/*
 * Type Definitions for node-gtk (https://github.com/romgrk/node-gtk)
 *
 * These type definitions are automatically generated, do not edit them by hand.
 * If you found a bug fix it in ts-for-gir itself or create a bug report on https://github.com/sammydre/ts-for-gjs
 */
/**
 * GtkSource-5
 */

import type Gtk from './Gtk-4.0';
import type Gsk from './Gsk-4.0';
import type Graphene from './Graphene-1.0';
import type GObject from './GObject-2.0';
import type GLib from './GLib-2.0';
import type Gdk from './Gdk-4.0';
import type cairo from './cairo-1.0';
import type PangoCairo from './PangoCairo-1.0';
import type Pango from './Pango-1.0';
import type HarfBuzz from './HarfBuzz-0.0';
import type Gio from './Gio-2.0';
import type GdkPixbuf from './GdkPixbuf-2.0';
import type GModule from './GModule-2.0';

export namespace GtkSource {

enum BackgroundPatternType {
    /**
     * no pattern
     */
    NONE,
    /**
     * grid pattern
     */
    GRID,
}
enum BracketMatchType {
    /**
     * there is no bracket to match.
     */
    NONE,
    /**
     * matching a bracket
     *  failed because the maximum range was reached.
     */
    OUT_OF_RANGE,
    /**
     * a matching bracket was not found.
     */
    NOT_FOUND,
    /**
     * a matching bracket was found.
     */
    FOUND,
}
enum ChangeCaseType {
    /**
     * change case to lowercase.
     */
    LOWER,
    /**
     * change case to uppercase.
     */
    UPPER,
    /**
     * toggle case of each character.
     */
    TOGGLE,
    /**
     * capitalize each word.
     */
    TITLE,
}
enum CompletionActivation {
    NONE,
    INTERACTIVE,
    USER_REQUESTED,
}
enum CompletionColumn {
    ICON,
    BEFORE,
    TYPED_TEXT,
    AFTER,
    COMMENT,
    DETAILS,
}
enum CompressionType {
    /**
     * plain text.
     */
    NONE,
    /**
     * gzip compression.
     */
    GZIP,
}
/**
 * An error code used with the %GTK_SOURCE_FILE_LOADER_ERROR domain.
 */
enum FileLoaderError {
    /**
     * The file is too big.
     */
    TOO_BIG,
    /**
     * It is not
     * possible to detect the encoding automatically.
     */
    ENCODING_AUTO_DETECTION_FAILED,
    /**
     * There was an encoding
     * conversion error and it was needed to use a fallback character.
     */
    CONVERSION_FALLBACK,
}
/**
 * An error code used with the %GTK_SOURCE_FILE_SAVER_ERROR domain.
 */
enum FileSaverError {
    /**
     * The buffer contains invalid
     *   characters.
     */
    INVALID_CHARS,
    /**
     * The file is externally
     *   modified.
     */
    EXTERNALLY_MODIFIED,
}
/**
 * The alignment mode of the renderer, when a cell spans multiple lines (due to
 * text wrapping).
 */
enum GutterRendererAlignmentMode {
    /**
     * The full cell.
     */
    CELL,
    /**
     * The first line.
     */
    FIRST,
    /**
     * The last line.
     */
    LAST,
}
enum NewlineType {
    /**
     * line feed, used on UNIX.
     */
    LF,
    /**
     * carriage return, used on Mac.
     */
    CR,
    /**
     * carriage return followed by a line feed, used
     *   on Windows.
     */
    CR_LF,
}
enum SmartHomeEndType {
    /**
     * smart-home-end disabled.
     */
    DISABLED,
    /**
     * move to the first/last
     * non-whitespace character on the first press of the HOME/END keys and
     * to the beginning/end of the line on the second press.
     */
    BEFORE,
    /**
     * move to the beginning/end of the
     * line on the first press of the HOME/END keys and to the first/last
     * non-whitespace character on the second press.
     */
    AFTER,
    /**
     * always move to the first/last
     * non-whitespace character when the HOME/END keys are pressed.
     */
    ALWAYS,
}
enum ViewGutterPosition {
    /**
     * the gutter position of the lines
     * renderer
     */
    LINES,
    /**
     * the gutter position of the marks
     * renderer
     */
    MARKS,
}
/**
 * Flags to define the behavior of a [flags`FileSaverFlags]`.
 */
enum FileSaverFlags {
    /**
     * No flags.
     */
    NONE,
    /**
     * Ignore invalid characters.
     */
    IGNORE_INVALID_CHARS,
    /**
     * Save file despite external modifications.
     */
    IGNORE_MODIFICATION_TIME,
    /**
     * Create a backup before saving the file.
     */
    CREATE_BACKUP,
}
enum SortFlags {
    /**
     * no flags specified
     */
    NONE,
    /**
     * case sensitive sort
     */
    CASE_SENSITIVE,
    /**
     * sort in reverse order
     */
    REVERSE_ORDER,
    /**
     * remove duplicates
     */
    REMOVE_DUPLICATES,
}
/**
 * #GtkSourceSpaceLocationFlags contains flags for white space locations.
 * 
 * If a line contains only white spaces (no text), the white spaces match both
 * %GTK_SOURCE_SPACE_LOCATION_LEADING and %GTK_SOURCE_SPACE_LOCATION_TRAILING.
 */
enum SpaceLocationFlags {
    /**
     * No flags.
     */
    NONE,
    /**
     * Leading white spaces on a line, i.e. the
     *   indentation.
     */
    LEADING,
    /**
     * White spaces inside a line of text.
     */
    INSIDE_TEXT,
    /**
     * Trailing white spaces on a line.
     */
    TRAILING,
    /**
     * White spaces anywhere.
     */
    ALL,
}
/**
 * #GtkSourceSpaceTypeFlags contains flags for white space types.
 */
enum SpaceTypeFlags {
    /**
     * No flags.
     */
    NONE,
    /**
     * Space character.
     */
    SPACE,
    /**
     * Tab character.
     */
    TAB,
    /**
     * Line break character. If the
     *   #GtkSourceBuffer:implicit-trailing-newline property is %TRUE,
     *   #GtkSourceSpaceDrawer also draws a line break at the end of the buffer.
     */
    NEWLINE,
    /**
     * Non-breaking space character.
     */
    NBSP,
    /**
     * All white spaces.
     */
    ALL,
}
function encodingGetAll(): Encoding[]
function encodingGetCurrent(): Encoding
function encodingGetDefaultCandidates(): Encoding[]
function encodingGetFromCharset(charset: string): Encoding | null
function encodingGetUtf8(): Encoding
function fileLoaderErrorQuark(): GLib.Quark
function fileSaverErrorQuark(): GLib.Quark
function finalize(): void
function init(): void
function schedulerAdd(callback: SchedulerCallback): number
function schedulerAddFull(callback: SchedulerCallback): number
function schedulerRemove(handlerId: number): void
function utilsEscapeSearchText(text: string): string
function utilsUnescapeSearchText(text: string): string
/**
 * This function is called incrementally to process additional background work.
 * A deadline is provided which can be checked using [func`GLib`.get_monotonic_time] so
 * that additional work can be processed each frame.
 * 
 * This is useful for situations where you are incrementally performing
 * background work such as spell checking or semantic syntax highlighting.
 */
interface SchedulerCallback {
    (deadline: number): boolean
}
class CompletionProposal {
    static name: string
}
class CompletionProvider {
    /* Methods of GtkSource-5.GtkSource.CompletionProvider */
    /**
     * This function requests `proposal` to be activated by the
     * #GtkSourceCompletionProvider.
     * 
     * What the provider does to activate the proposal is specific to that
     * provider. Many providers may choose to insert a #GtkSourceSnippet with
     * edit points the user may cycle through.
     * 
     * See also: [class`Snippet]`, [class`SnippetChunk]`, [method`View`.push_snippet]
     */
    activate(context: CompletionContext, proposal: CompletionProposal): void
    /**
     * This function requests that the #GtkSourceCompletionProvider prepares
     * `cell` to display the contents of `proposal`.
     * 
     * Based on `cells` column type, you may want to display different information.
     * 
     * This allows for columns of information among completion proposals
     * resulting in better alignment of similar content (icons, return types,
     * method names, and parameter lists).
     */
    display(context: CompletionContext, proposal: CompletionProposal, cell: CompletionCell): void
    /**
     * This function should return the priority of `self` in `context`.
     * 
     * The priority is used to sort groups of completion proposals by
     * provider so that higher priority providers results are shown
     * above lower priority providers.
     * 
     * Lower value indicates higher priority.
     */
    getPriority(context: CompletionContext): number
    /**
     * Gets the title of the completion provider, if any.
     * 
     * Currently, titles are not displayed in the completion results, but may be
     * at some point in the future when non-%NULL.
     */
    getTitle(): string | null
    /**
     * This function is used to determine of a character inserted into the text
     * editor should cause a new completion request to be triggered.
     * 
     * An example would be period '.' which might indicate that the user wants
     * to complete method or field names of an object.
     */
    isTrigger(iter: Gtk.TextIter, ch: number): boolean
    /**
     * This function is used to determine if a key typed by the user should
     * activate `proposal` (resulting in committing the text to the editor).
     * 
     * This is useful when using languages where convention may lead to less
     * typing by the user. One example may be the use of "." or "-" to expand
     * a field access in the C programming language.
     */
    keyActivates(context: CompletionContext, proposal: CompletionProposal, keyval: number, state: Gdk.ModifierType): boolean
    /**
     * Providers should return a list of alternates to `proposal` or %NULL if
     * there are no alternates available.
     * 
     * This can be used by the completion view to allow the user to move laterally
     * through similar proposals, such as overrides of methods by the same name.
     */
    listAlternates(context: CompletionContext, proposal: CompletionProposal): CompletionProposal[] | null
    /**
     * Asynchronously requests that the provider populates the completion
     * results for `context`.
     * 
     * For providers that would like to populate a [iface`Gio`.ListModel] while those
     * results are displayed to the user,
     * [method`CompletionContext`.set_proposals_for_provider] may be used
     * to reduce latency until the user sees results.
     */
    populateAsync(context: CompletionContext, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Completes an asynchronous operation to populate a completion provider.
     */
    populateFinish(result: Gio.AsyncResult): Gio.ListModel
    /**
     * This function can be used to filter results previously provided to
     * the [class`CompletionContext]` by the #GtkSourceCompletionProvider.
     * 
     * This can happen as the user types additional text onto the word so
     * that previously matched items may be removed from the list instead of
     * generating new [iface`Gio`.ListModel] of results.
     */
    refilter(context: CompletionContext, model: Gio.ListModel): void
    static name: string
}
class HoverProvider {
    /* Methods of GtkSource-5.GtkSource.HoverProvider */
    populateAsync(context: HoverContext, display: HoverDisplay, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    populateFinish(result: Gio.AsyncResult): boolean
    static name: string
}
class Indenter {
    /* Methods of GtkSource-5.GtkSource.Indenter */
    /**
     * This function should be implemented to alter the indentation of text
     * within the view.
     * 
     * `view` is provided so that the indenter may retrieve settings such as indentation and tab widths.
     * 
     * `iter` is the location where the indentation was requested. This typically
     * is after having just inserted a newline (\n) character but can be other
     * situations such as a manually requested indentation or reformatting.
     * 
     * See [iface`Indenter`.is_trigger] for how to trigger indentation on
     * various characters inserted into the buffer.
     * 
     * The implementor of this function is expected to keep `iter` valid across
     * calls to the function and should contain the location of the insert mark
     * after calling this function.
     * 
     * The default implementation for this virtual function will copy the
     * indentation of the previous line.
     */
    indent(view: View, iter: Gtk.TextIter): /* iter */ Gtk.TextIter
    /**
     * This function is used to determine if a key pressed should cause the
     * indenter to automatically indent.
     * 
     * The default implementation of this virtual method will check to see
     * if `keyval` is [const`Gdk`.KEY_Return] or [const`Gdk`.KEY_KP_Enter] and `state` does
     * not have %GDK_SHIFT_MASK set. This is to allow the user to avoid
     * indentation when Shift+Return is pressed. Other indenters may want
     * to copy this behavior to provide a consistent experience to users.
     */
    isTrigger(view: View, location: Gtk.TextIter, state: Gdk.ModifierType, keyval: number): boolean
    static name: string
}
class StyleSchemeChooser {
    /* Properties of GtkSource-5.GtkSource.StyleSchemeChooser */
    /**
     * Contains the currently selected style scheme.
     * 
     * The property can be set to change the current selection programmatically.
     */
    styleScheme: StyleScheme
    /* Methods of GtkSource-5.GtkSource.StyleSchemeChooser */
    /**
     * Gets the currently-selected scheme.
     */
    getStyleScheme(): StyleScheme
    /**
     * Sets the scheme.
     */
    setStyleScheme(scheme: StyleScheme): void
    static name: string
}
interface Buffer_ConstructProps extends Gtk.TextBuffer_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.Buffer */
    /**
     * Whether to highlight matching brackets in the buffer.
     */
    highlightMatchingBrackets?: boolean
    /**
     * Whether to highlight syntax in the buffer.
     */
    highlightSyntax?: boolean
    /**
     * Whether the buffer has an implicit trailing newline. See
     * [method`Buffer`.set_implicit_trailing_newline].
     */
    implicitTrailingNewline?: boolean
    language?: Language
    /**
     * Style scheme. It contains styles for syntax highlighting, optionally
     * foreground, background, cursor color, current line color, and matching
     * brackets style.
     */
    styleScheme?: StyleScheme
}
class Buffer {
    /* Properties of GtkSource-5.GtkSource.Buffer */
    /**
     * Whether to highlight matching brackets in the buffer.
     */
    highlightMatchingBrackets: boolean
    /**
     * Whether to highlight syntax in the buffer.
     */
    highlightSyntax: boolean
    /**
     * Whether the buffer has an implicit trailing newline. See
     * [method`Buffer`.set_implicit_trailing_newline].
     */
    implicitTrailingNewline: boolean
    language: Language
    /**
     * Style scheme. It contains styles for syntax highlighting, optionally
     * foreground, background, cursor color, current line color, and matching
     * brackets style.
     */
    styleScheme: StyleScheme
    /* Properties of Gtk-4.0.Gtk.TextBuffer */
    /**
     * Denotes that the buffer can reapply the last undone action.
     */
    readonly canRedo: boolean
    /**
     * Denotes that the buffer can undo the last applied action.
     */
    readonly canUndo: boolean
    /**
     * The position of the insert mark.
     * 
     * This is an offset from the beginning of the buffer.
     * It is useful for getting notified when the cursor moves.
     */
    readonly cursorPosition: number
    /**
     * Denotes if support for undoing and redoing changes to the buffer is allowed.
     */
    enableUndo: boolean
    /**
     * Whether the buffer has some text currently selected.
     */
    readonly hasSelection: boolean
    /**
     * The text content of the buffer.
     * 
     * Without child widgets and images,
     * see [method`Gtk`.TextBuffer.get_text] for more information.
     */
    text: string
    /* Fields of Gtk-4.0.Gtk.TextBuffer */
    readonly parentInstance: GObject.Object
    readonly priv: Gtk.TextBufferPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.Buffer */
    /**
     * Moves `iter` to the position of the previous [class`Mark]` of the given
     * category.
     * 
     * Returns %TRUE if `iter` was moved. If `category` is NULL, the
     * previous source mark can be of any category.
     */
    backwardIterToSourceMark(iter: Gtk.TextIter, category?: string | null): [ /* returnType */ boolean, /* iter */ Gtk.TextIter ]
    /**
     * Changes the case of the text between the specified iterators.
     * 
     * Since 5.4, this function will update the position of `start` and
     * `end` to surround the modified text.
     */
    changeCase(caseType: ChangeCaseType, start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Creates a source mark in the `buffer` of category `category`.
     * 
     * A source mark is a [class`Gtk`.TextMark] but organized into categories.
     * Depending on the category a pixbuf can be specified that will be displayed
     * along the line of the mark.
     * 
     * Like a [class`Gtk`.TextMark], a [class`Mark]` can be anonymous if the
     * passed `name` is %NULL.  Also, the buffer owns the marks so you
     * shouldn't unreference it.
     * 
     * Marks always have left gravity and are moved to the beginning of
     * the line when the user deletes the line they were in.
     * 
     * Typical uses for a source mark are bookmarks, breakpoints, current
     * executing instruction indication in a source file, etc..
     */
    createSourceMark(name: string | null, category: string, where: Gtk.TextIter): Mark
    /**
     * Forces buffer to analyze and highlight the given area synchronously.
     * 
     * **Note**:
     * 
     * This is a potentially slow operation and should be used only
     * when you need to make sure that some text not currently
     * visible is highlighted, for instance before printing.
     */
    ensureHighlight(start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Moves `iter` to the position of the next [class`Mark]` of the given
     * `category`.
     * 
     * Returns %TRUE if `iter` was moved. If `category` is NULL, the
     * next source mark can be of any category.
     */
    forwardIterToSourceMark(iter: Gtk.TextIter, category?: string | null): [ /* returnType */ boolean, /* iter */ Gtk.TextIter ]
    /**
     * Get all defined context classes at `iter`.
     * 
     * See the [class`Buffer]` description for the list of default context classes.
     */
    getContextClassesAtIter(iter: Gtk.TextIter): string[]
    /**
     * Determines whether bracket match highlighting is activated for the
     * source buffer.
     */
    getHighlightMatchingBrackets(): boolean
    /**
     * Determines whether syntax highlighting is activated in the source
     * buffer.
     */
    getHighlightSyntax(): boolean
    getImplicitTrailingNewline(): boolean
    /**
     * Returns the [class`Language]` associated with the buffer,
     * see [method`Buffer`.set_language].
     * 
     * The returned object should not be unreferenced by the user.
     */
    getLanguage(): Language | null
    /**
     * Returns the list of marks of the given category at `iter`.
     * 
     * If `category` is %NULL it returns all marks at `iter`.
     */
    getSourceMarksAtIter(iter: Gtk.TextIter, category?: string | null): Mark[]
    /**
     * Returns the list of marks of the given category at `line`.
     * 
     * If `category` is %NULL, all marks at `line` are returned.
     */
    getSourceMarksAtLine(line: number, category?: string | null): Mark[]
    /**
     * Returns the [class`StyleScheme]` associated with the buffer,
     * see [method`Buffer`.set_style_scheme].
     * 
     * The returned object should not be unreferenced by the user.
     */
    getStyleScheme(): StyleScheme | null
    /**
     * Moves backward to the next toggle (on or off) of the context class.
     * 
     * If no matching context class toggles are found, returns %FALSE, otherwise %TRUE.
     * Does not return toggles located at `iter,` only toggles after `iter`. Sets
     * `iter` to the location of the toggle, or to the end of the buffer if no
     * toggle is found.
     * 
     * See the [class`Buffer]` description for the list of default context classes.
     */
    iterBackwardToContextClassToggle(iter: Gtk.TextIter, contextClass: string): [ /* returnType */ boolean, /* iter */ Gtk.TextIter ]
    /**
     * Moves forward to the next toggle (on or off) of the context class.
     * 
     * If no matching context class toggles are found, returns %FALSE, otherwise %TRUE.
     * Does not return toggles located at `iter,` only toggles after `iter`. Sets
     * `iter` to the location of the toggle, or to the end of the buffer if no
     * toggle is found.
     * 
     * See the [class`Buffer]` description for the list of default context classes.
     */
    iterForwardToContextClassToggle(iter: Gtk.TextIter, contextClass: string): [ /* returnType */ boolean, /* iter */ Gtk.TextIter ]
    /**
     * Check if the class `context_class` is set on `iter`.
     * 
     * See the [class`Buffer]` description for the list of default context classes.
     */
    iterHasContextClass(iter: Gtk.TextIter, contextClass: string): boolean
    /**
     * Joins the lines of text between the specified iterators.
     */
    joinLines(start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Remove all marks of `category` between `start` and `end` from the buffer.
     * 
     * If `category` is NULL, all marks in the range will be removed.
     */
    removeSourceMarks(start: Gtk.TextIter, end: Gtk.TextIter, category?: string | null): void
    /**
     * Controls the bracket match highlighting function in the buffer.
     * 
     * If activated, when you position your cursor over a bracket character
     * (a parenthesis, a square bracket, etc.) the matching opening or
     * closing bracket character will be highlighted.
     */
    setHighlightMatchingBrackets(highlight: boolean): void
    /**
     * Controls whether syntax is highlighted in the buffer.
     * 
     * If `highlight` is %TRUE, the text will be highlighted according to the syntax
     * patterns specified in the [class`Language]` set with [method`Buffer`.set_language].
     * 
     * If `highlight` is %FALSE, syntax highlighting is disabled and all the
     * [class`Gtk`.TextTag] objects that have been added by the syntax highlighting engine
     * are removed from the buffer.
     */
    setHighlightSyntax(highlight: boolean): void
    /**
     * Sets whether the `buffer` has an implicit trailing newline.
     * 
     * If an explicit trailing newline is present in a [class`Gtk`.TextBuffer], [class`Gtk`.TextView]
     * shows it as an empty line. This is generally not what the user expects.
     * 
     * If `implicit_trailing_newline` is %TRUE (the default value):
     *  - when a [class`FileLoader]` loads the content of a file into the `buffer,`
     *    the trailing newline (if present in the file) is not inserted into the
     *    `buffer`.
     *  - when a [class`FileSaver]` saves the content of the `buffer` into a file, a
     *    trailing newline is added to the file.
     * 
     * On the other hand, if `implicit_trailing_newline` is %FALSE, the file's
     * content is not modified when loaded into the `buffer,` and the `buffer'`s
     * content is not modified when saved into a file.
     */
    setImplicitTrailingNewline(implicitTrailingNewline: boolean): void
    /**
     * Associates a [class`Language]` with the buffer.
     * 
     * Note that a [class`Language]` affects not only the syntax highlighting, but
     * also the [context classes](./class.Buffer.html#context-classes). If you want to disable just the
     * syntax highlighting, see [method`Buffer`.set_highlight_syntax].
     * 
     * The buffer holds a reference to `language`.
     */
    setLanguage(language?: Language | null): void
    /**
     * Sets a [class`StyleScheme]` to be used by the buffer and the view.
     * 
     * Note that a [class`StyleScheme]` affects not only the syntax highlighting,
     * but also other [class`View]` features such as highlighting the current line,
     * matching brackets, the line numbers, etc.
     * 
     * Instead of setting a %NULL `scheme,` it is better to disable syntax
     * highlighting with [method`Buffer`.set_highlight_syntax], and setting the
     * [class`StyleScheme]` with the "classic" or "tango" ID, because those two
     * style schemes follow more closely the GTK theme (for example for the
     * background color).
     * 
     * The buffer holds a reference to `scheme`.
     */
    setStyleScheme(scheme?: StyleScheme | null): void
    /**
     * Sort the lines of text between the specified iterators.
     */
    sortLines(start: Gtk.TextIter, end: Gtk.TextIter, flags: SortFlags, column: number): void
    /* Methods of Gtk-4.0.Gtk.TextBuffer */
    /**
     * Adds the mark at position `where`.
     * 
     * The mark must not be added to another buffer, and if its name
     * is not %NULL then there must not be another mark in the buffer
     * with the same name.
     * 
     * Emits the [signal`Gtk`.TextBuffer::mark-set] signal as notification
     * of the mark's initial placement.
     */
    addMark(mark: Gtk.TextMark, where: Gtk.TextIter): void
    /**
     * Adds `clipboard` to the list of clipboards in which the selection
     * contents of `buffer` are available.
     * 
     * In most cases, `clipboard` will be the `GdkClipboard` returned by
     * [method`Gtk`.Widget.get_primary_clipboard] for a view of `buffer`.
     */
    addSelectionClipboard(clipboard: Gdk.Clipboard): void
    /**
     * Emits the “apply-tag” signal on `buffer`.
     * 
     * The default handler for the signal applies
     * `tag` to the given range. `start` and `end` do
     * not have to be in order.
     */
    applyTag(tag: Gtk.TextTag, start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Emits the “apply-tag” signal on `buffer`.
     * 
     * Calls [method`Gtk`.TextTagTable.lookup] on the buffer’s
     * tag table to get a `GtkTextTag`, then calls
     * [method`Gtk`.TextBuffer.apply_tag].
     */
    applyTagByName(name: string, start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Performs the appropriate action as if the user hit the delete
     * key with the cursor at the position specified by `iter`.
     * 
     * In the normal case a single character will be deleted, but when
     * combining accents are involved, more than one character can
     * be deleted, and when precomposed character and accent combinations
     * are involved, less than one character will be deleted.
     * 
     * Because the buffer is modified, all outstanding iterators become
     * invalid after calling this function; however, the `iter` will be
     * re-initialized to point to the location where text was deleted.
     */
    backspace(iter: Gtk.TextIter, interactive: boolean, defaultEditable: boolean): boolean
    /**
     * Denotes the beginning of an action that may not be undone.
     * 
     * This will cause any previous operations in the undo/redo queue
     * to be cleared.
     * 
     * This should be paired with a call to
     * [method`Gtk`.TextBuffer.end_irreversible_action] after the irreversible
     * action has completed.
     * 
     * You may nest calls to gtk_text_buffer_begin_irreversible_action()
     * and gtk_text_buffer_end_irreversible_action() pairs.
     */
    beginIrreversibleAction(): void
    /**
     * Called to indicate that the buffer operations between here and a
     * call to gtk_text_buffer_end_user_action() are part of a single
     * user-visible operation.
     * 
     * The operations between gtk_text_buffer_begin_user_action() and
     * gtk_text_buffer_end_user_action() can then be grouped when creating
     * an undo stack. `GtkTextBuffer` maintains a count of calls to
     * gtk_text_buffer_begin_user_action() that have not been closed with
     * a call to gtk_text_buffer_end_user_action(), and emits the
     * “begin-user-action” and “end-user-action” signals only for the
     * outermost pair of calls. This allows you to build user actions
     * from other user actions.
     * 
     * The “interactive” buffer mutation functions, such as
     * [method`Gtk`.TextBuffer.insert_interactive], automatically call
     * begin/end user action around the buffer operations they perform,
     * so there's no need to add extra calls if you user action consists
     * solely of a single call to one of those functions.
     */
    beginUserAction(): void
    /**
     * Copies the currently-selected text to a clipboard.
     */
    copyClipboard(clipboard: Gdk.Clipboard): void
    /**
     * Creates and inserts a child anchor.
     * 
     * This is a convenience function which simply creates a child anchor
     * with [ctor`Gtk`.TextChildAnchor.new] and inserts it into the buffer
     * with [method`Gtk`.TextBuffer.insert_child_anchor].
     * 
     * The new anchor is owned by the buffer; no reference count is
     * returned to the caller of this function.
     */
    createChildAnchor(iter: Gtk.TextIter): Gtk.TextChildAnchor
    /**
     * Creates a mark at position `where`.
     * 
     * If `mark_name` is %NULL, the mark is anonymous; otherwise, the mark
     * can be retrieved by name using [method`Gtk`.TextBuffer.get_mark].
     * If a mark has left gravity, and text is inserted at the mark’s
     * current location, the mark will be moved to the left of the
     * newly-inserted text. If the mark has right gravity
     * (`left_gravity` = %FALSE), the mark will end up on the right of
     * newly-inserted text. The standard left-to-right cursor is a mark
     * with right gravity (when you type, the cursor stays on the right
     * side of the text you’re typing).
     * 
     * The caller of this function does not own a
     * reference to the returned `GtkTextMark`, so you can ignore the
     * return value if you like. Marks are owned by the buffer and go
     * away when the buffer does.
     * 
     * Emits the [signal`Gtk`.TextBuffer::mark-set] signal as notification
     * of the mark's initial placement.
     */
    createMark(markName: string | null, where: Gtk.TextIter, leftGravity: boolean): Gtk.TextMark
    /**
     * Copies the currently-selected text to a clipboard,
     * then deletes said text if it’s editable.
     */
    cutClipboard(clipboard: Gdk.Clipboard, defaultEditable: boolean): void
    /**
     * Deletes text between `start` and `end`.
     * 
     * The order of `start` and `end` is not actually relevant;
     * gtk_text_buffer_delete() will reorder them.
     * 
     * This function actually emits the “delete-range” signal, and
     * the default handler of that signal deletes the text. Because the
     * buffer is modified, all outstanding iterators become invalid after
     * calling this function; however, the `start` and `end` will be
     * re-initialized to point to the location where text was deleted.
     */
    delete(start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Deletes all editable text in the given range.
     * 
     * Calls [method`Gtk`.TextBuffer.delete] for each editable
     * sub-range of [`start,``end)`. `start` and `end` are revalidated
     * to point to the location of the last deleted range, or left
     * untouched if no text was deleted.
     */
    deleteInteractive(startIter: Gtk.TextIter, endIter: Gtk.TextIter, defaultEditable: boolean): boolean
    /**
     * Deletes `mark,` so that it’s no longer located anywhere in the
     * buffer.
     * 
     * Removes the reference the buffer holds to the mark, so if
     * you haven’t called g_object_ref() on the mark, it will be freed.
     * Even if the mark isn’t freed, most operations on `mark` become
     * invalid, until it gets added to a buffer again with
     * [method`Gtk`.TextBuffer.add_mark]. Use [method`Gtk`.TextMark.get_deleted]
     * to find out if a mark has been removed from its buffer.
     * 
     * The [signal`Gtk`.TextBuffer::mark-deleted] signal will be emitted as
     * notification after the mark is deleted.
     */
    deleteMark(mark: Gtk.TextMark): void
    /**
     * Deletes the mark named `name;` the mark must exist.
     * 
     * See [method`Gtk`.TextBuffer.delete_mark] for details.
     */
    deleteMarkByName(name: string): void
    /**
     * Deletes the range between the “insert” and “selection_bound” marks,
     * that is, the currently-selected text.
     * 
     * If `interactive` is %TRUE, the editability of the selection will be
     * considered (users can’t delete uneditable text).
     */
    deleteSelection(interactive: boolean, defaultEditable: boolean): boolean
    /**
     * Denotes the end of an action that may not be undone.
     * 
     * This will cause any previous operations in the undo/redo
     * queue to be cleared.
     * 
     * This should be called after completing modifications to the
     * text buffer after [method`Gtk`.TextBuffer.begin_irreversible_action]
     * was called.
     * 
     * You may nest calls to gtk_text_buffer_begin_irreversible_action()
     * and gtk_text_buffer_end_irreversible_action() pairs.
     */
    endIrreversibleAction(): void
    /**
     * Ends a user-visible operation.
     * 
     * Should be paired with a call to
     * [method`Gtk`.TextBuffer.begin_user_action].
     * See that function for a full explanation.
     */
    endUserAction(): void
    /**
     * Retrieves the first and last iterators in the buffer, i.e. the
     * entire buffer lies within the range [`start,``end)`.
     */
    getBounds(): [ /* start */ Gtk.TextIter, /* end */ Gtk.TextIter ]
    /**
     * Gets whether there is a redoable action in the history.
     */
    getCanRedo(): boolean
    /**
     * Gets whether there is an undoable action in the history.
     */
    getCanUndo(): boolean
    /**
     * Gets the number of characters in the buffer.
     * 
     * Note that characters and bytes are not the same, you can’t e.g.
     * expect the contents of the buffer in string form to be this
     * many bytes long.
     * 
     * The character count is cached, so this function is very fast.
     */
    getCharCount(): number
    /**
     * Gets whether the buffer is saving modifications to the buffer
     * to allow for undo and redo actions.
     * 
     * See [method`Gtk`.TextBuffer.begin_irreversible_action] and
     * [method`Gtk`.TextBuffer.end_irreversible_action] to create
     * changes to the buffer that cannot be undone.
     */
    getEnableUndo(): boolean
    /**
     * Initializes `iter` with the “end iterator,” one past the last valid
     * character in the text buffer.
     * 
     * If dereferenced with [method`Gtk`.TextIter.get_char], the end
     * iterator has a character value of 0.
     * The entire buffer lies in the range from the first position in
     * the buffer (call [method`Gtk`.TextBuffer.get_start_iter] to get
     * character position 0) to the end iterator.
     */
    getEndIter(): /* iter */ Gtk.TextIter
    /**
     * Indicates whether the buffer has some text currently selected.
     */
    getHasSelection(): boolean
    /**
     * Returns the mark that represents the cursor (insertion point).
     * 
     * Equivalent to calling [method`Gtk`.TextBuffer.get_mark]
     * to get the mark named “insert”, but very slightly more
     * efficient, and involves less typing.
     */
    getInsert(): Gtk.TextMark
    /**
     * Obtains the location of `anchor` within `buffer`.
     */
    getIterAtChildAnchor(anchor: Gtk.TextChildAnchor): /* iter */ Gtk.TextIter
    /**
     * Initializes `iter` to the start of the given line.
     * 
     * If `line_number` is greater than or equal to the number of lines
     * in the `buffer,` the end iterator is returned.
     */
    getIterAtLine(lineNumber: number): [ /* returnType */ boolean, /* iter */ Gtk.TextIter ]
    /**
     * Obtains an iterator pointing to `byte_index` within the given line.
     * 
     * `byte_index` must be the start of a UTF-8 character. Note bytes, not
     * characters; UTF-8 may encode one character as multiple bytes.
     * 
     * If `line_number` is greater than or equal to the number of lines in the `buffer,`
     * the end iterator is returned. And if `byte_index` is off the
     * end of the line, the iterator at the end of the line is returned.
     */
    getIterAtLineIndex(lineNumber: number, byteIndex: number): [ /* returnType */ boolean, /* iter */ Gtk.TextIter ]
    /**
     * Obtains an iterator pointing to `char_offset` within the given line.
     * 
     * Note characters, not bytes; UTF-8 may encode one character as multiple
     * bytes.
     * 
     * If `line_number` is greater than or equal to the number of lines in the `buffer,`
     * the end iterator is returned. And if `char_offset` is off the
     * end of the line, the iterator at the end of the line is returned.
     */
    getIterAtLineOffset(lineNumber: number, charOffset: number): [ /* returnType */ boolean, /* iter */ Gtk.TextIter ]
    /**
     * Initializes `iter` with the current position of `mark`.
     */
    getIterAtMark(mark: Gtk.TextMark): /* iter */ Gtk.TextIter
    /**
     * Initializes `iter` to a position `char_offset` chars from the start
     * of the entire buffer.
     * 
     * If `char_offset` is -1 or greater than the number
     * of characters in the buffer, `iter` is initialized to the end iterator,
     * the iterator one past the last valid character in the buffer.
     */
    getIterAtOffset(charOffset: number): /* iter */ Gtk.TextIter
    /**
     * Obtains the number of lines in the buffer.
     * 
     * This value is cached, so the function is very fast.
     */
    getLineCount(): number
    /**
     * Returns the mark named `name` in buffer `buffer,` or %NULL if no such
     * mark exists in the buffer.
     */
    getMark(name: string): Gtk.TextMark | null
    /**
     * Gets the maximum number of undo levels to perform.
     * 
     * If 0, unlimited undo actions may be performed. Note that this may
     * have a memory usage impact as it requires storing an additional
     * copy of the inserted or removed text within the text buffer.
     */
    getMaxUndoLevels(): number
    /**
     * Indicates whether the buffer has been modified since the last call
     * to [method`Gtk`.TextBuffer.set_modified] set the modification flag to
     * %FALSE.
     * 
     * Used for example to enable a “save” function in a text editor.
     */
    getModified(): boolean
    /**
     * Returns the mark that represents the selection bound.
     * 
     * Equivalent to calling [method`Gtk`.TextBuffer.get_mark]
     * to get the mark named “selection_bound”, but very slightly
     * more efficient, and involves less typing.
     * 
     * The currently-selected text in `buffer` is the region between the
     * “selection_bound” and “insert” marks. If “selection_bound” and
     * “insert” are in the same place, then there is no current selection.
     * [method`Gtk`.TextBuffer.get_selection_bounds] is another convenient
     * function for handling the selection, if you just want to know whether
     * there’s a selection and what its bounds are.
     */
    getSelectionBound(): Gtk.TextMark
    /**
     * Returns %TRUE if some text is selected; places the bounds
     * of the selection in `start` and `end`.
     * 
     * If the selection has length 0, then `start` and `end` are filled
     * in with the same value. `start` and `end` will be in ascending order.
     * If `start` and `end` are %NULL, then they are not filled in, but the
     * return value still indicates whether text is selected.
     */
    getSelectionBounds(): [ /* returnType */ boolean, /* start */ Gtk.TextIter, /* end */ Gtk.TextIter ]
    /**
     * Get a content provider for this buffer.
     * 
     * It can be used to make the content of `buffer` available
     * in a `GdkClipboard`, see [method`Gdk`.Clipboard.set_content].
     */
    getSelectionContent(): Gdk.ContentProvider
    /**
     * Returns the text in the range [`start,``end)`.
     * 
     * Excludes undisplayed text (text marked with tags that set the
     * invisibility attribute) if `include_hidden_chars` is %FALSE.
     * The returned string includes a 0xFFFC character whenever the
     * buffer contains embedded images, so byte and character indexes
     * into the returned string do correspond to byte and character
     * indexes into the buffer. Contrast with [method`Gtk`.TextBuffer.get_text].
     * Note that 0xFFFC can occur in normal text as well, so it is not a
     * reliable indicator that a paintable or widget is in the buffer.
     */
    getSlice(start: Gtk.TextIter, end: Gtk.TextIter, includeHiddenChars: boolean): string
    /**
     * Initialized `iter` with the first position in the text buffer.
     * 
     * This is the same as using [method`Gtk`.TextBuffer.get_iter_at_offset]
     * to get the iter at character offset 0.
     */
    getStartIter(): /* iter */ Gtk.TextIter
    /**
     * Get the `GtkTextTagTable` associated with this buffer.
     */
    getTagTable(): Gtk.TextTagTable
    /**
     * Returns the text in the range [`start,``end)`.
     * 
     * Excludes undisplayed text (text marked with tags that set the
     * invisibility attribute) if `include_hidden_chars` is %FALSE.
     * Does not include characters representing embedded images, so
     * byte and character indexes into the returned string do not
     * correspond to byte and character indexes into the buffer.
     * Contrast with [method`Gtk`.TextBuffer.get_slice].
     */
    getText(start: Gtk.TextIter, end: Gtk.TextIter, includeHiddenChars: boolean): string
    /**
     * Inserts `len` bytes of `text` at position `iter`.
     * 
     * If `len` is -1, `text` must be nul-terminated and will be inserted in its
     * entirety. Emits the “insert-text” signal; insertion actually occurs
     * in the default handler for the signal. `iter` is invalidated when
     * insertion occurs (because the buffer contents change), but the
     * default signal handler revalidates it to point to the end of the
     * inserted text.
     */
    insert(iter: Gtk.TextIter, text: string, len: number): void
    /**
     * Inserts `text` in `buffer`.
     * 
     * Simply calls [method`Gtk`.TextBuffer.insert],
     * using the current cursor position as the insertion point.
     */
    insertAtCursor(text: string, len: number): void
    /**
     * Inserts a child widget anchor into the text buffer at `iter`.
     * 
     * The anchor will be counted as one character in character counts, and
     * when obtaining the buffer contents as a string, will be represented
     * by the Unicode “object replacement character” 0xFFFC. Note that the
     * “slice” variants for obtaining portions of the buffer as a string
     * include this character for child anchors, but the “text” variants do
     * not. E.g. see [method`Gtk`.TextBuffer.get_slice] and
     * [method`Gtk`.TextBuffer.get_text].
     * 
     * Consider [method`Gtk`.TextBuffer.create_child_anchor] as a more
     * convenient alternative to this function. The buffer will add a
     * reference to the anchor, so you can unref it after insertion.
     */
    insertChildAnchor(iter: Gtk.TextIter, anchor: Gtk.TextChildAnchor): void
    /**
     * Inserts `text` in `buffer`.
     * 
     * Like [method`Gtk`.TextBuffer.insert], but the insertion will not occur
     * if `iter` is at a non-editable location in the buffer. Usually you
     * want to prevent insertions at ineditable locations if the insertion
     * results from a user action (is interactive).
     * 
     * `default_editable` indicates the editability of text that doesn't
     * have a tag affecting editability applied to it. Typically the
     * result of [method`Gtk`.TextView.get_editable] is appropriate here.
     */
    insertInteractive(iter: Gtk.TextIter, text: string, len: number, defaultEditable: boolean): boolean
    /**
     * Inserts `text` in `buffer`.
     * 
     * Calls [method`Gtk`.TextBuffer.insert_interactive]
     * at the cursor position.
     * 
     * `default_editable` indicates the editability of text that doesn't
     * have a tag affecting editability applied to it. Typically the
     * result of [method`Gtk`.TextView.get_editable] is appropriate here.
     */
    insertInteractiveAtCursor(text: string, len: number, defaultEditable: boolean): boolean
    /**
     * Inserts the text in `markup` at position `iter`.
     * 
     * `markup` will be inserted in its entirety and must be nul-terminated
     * and valid UTF-8. Emits the [signal`Gtk`.TextBuffer::insert-text] signal,
     * possibly multiple times; insertion actually occurs in the default handler
     * for the signal. `iter` will point to the end of the inserted text on return.
     */
    insertMarkup(iter: Gtk.TextIter, markup: string, len: number): void
    /**
     * Inserts an image into the text buffer at `iter`.
     * 
     * The image will be counted as one character in character counts,
     * and when obtaining the buffer contents as a string, will be
     * represented by the Unicode “object replacement character” 0xFFFC.
     * Note that the “slice” variants for obtaining portions of the buffer
     * as a string include this character for paintable, but the “text”
     * variants do not. e.g. see [method`Gtk`.TextBuffer.get_slice] and
     * [method`Gtk`.TextBuffer.get_text].
     */
    insertPaintable(iter: Gtk.TextIter, paintable: Gdk.Paintable): void
    /**
     * Copies text, tags, and paintables between `start` and `end`
     * and inserts the copy at `iter`.
     * 
     * The order of `start` and `end` doesn’t matter.
     * 
     * Used instead of simply getting/inserting text because it preserves
     * images and tags. If `start` and `end` are in a different buffer from
     * `buffer,` the two buffers must share the same tag table.
     * 
     * Implemented via emissions of the ::insert-text and ::apply-tag signals,
     * so expect those.
     */
    insertRange(iter: Gtk.TextIter, start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Copies text, tags, and paintables between `start` and `end`
     * and inserts the copy at `iter`.
     * 
     * Same as [method`Gtk`.TextBuffer.insert_range], but does nothing
     * if the insertion point isn’t editable. The `default_editable`
     * parameter indicates whether the text is editable at `iter` if
     * no tags enclosing `iter` affect editability. Typically the result
     * of [method`Gtk`.TextView.get_editable] is appropriate here.
     */
    insertRangeInteractive(iter: Gtk.TextIter, start: Gtk.TextIter, end: Gtk.TextIter, defaultEditable: boolean): boolean
    /**
     * Moves `mark` to the new location `where`.
     * 
     * Emits the [signal`Gtk`.TextBuffer::mark-set] signal
     * as notification of the move.
     */
    moveMark(mark: Gtk.TextMark, where: Gtk.TextIter): void
    /**
     * Moves the mark named `name` (which must exist) to location `where`.
     * 
     * See [method`Gtk`.TextBuffer.move_mark] for details.
     */
    moveMarkByName(name: string, where: Gtk.TextIter): void
    /**
     * Pastes the contents of a clipboard.
     * 
     * If `override_location` is %NULL, the pasted text will be inserted
     * at the cursor position, or the buffer selection will be replaced
     * if the selection is non-empty.
     * 
     * Note: pasting is asynchronous, that is, we’ll ask for the paste data
     * and return, and at some point later after the main loop runs, the paste
     * data will be inserted.
     */
    pasteClipboard(clipboard: Gdk.Clipboard, overrideLocation: Gtk.TextIter | null, defaultEditable: boolean): void
    /**
     * This function moves the “insert” and “selection_bound” marks
     * simultaneously.
     * 
     * If you move them to the same place in two steps with
     * [method`Gtk`.TextBuffer.move_mark], you will temporarily select a
     * region in between their old and new locations, which can be pretty
     * inefficient since the temporarily-selected region will force stuff
     * to be recalculated. This function moves them as a unit, which can
     * be optimized.
     */
    placeCursor(where: Gtk.TextIter): void
    /**
     * Redoes the next redoable action on the buffer, if there is one.
     */
    redo(): void
    /**
     * Removes all tags in the range between `start` and `end`.
     * 
     * Be careful with this function; it could remove tags added in code
     * unrelated to the code you’re currently writing. That is, using this
     * function is probably a bad idea if you have two or more unrelated
     * code sections that add tags.
     */
    removeAllTags(start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Removes a `GdkClipboard` added with
     * gtk_text_buffer_add_selection_clipboard().
     */
    removeSelectionClipboard(clipboard: Gdk.Clipboard): void
    /**
     * Emits the “remove-tag” signal.
     * 
     * The default handler for the signal removes all occurrences
     * of `tag` from the given range. `start` and `end` don’t have
     * to be in order.
     */
    removeTag(tag: Gtk.TextTag, start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Emits the “remove-tag” signal.
     * 
     * Calls [method`Gtk`.TextTagTable.lookup] on the buffer’s
     * tag table to get a `GtkTextTag`, then calls
     * [method`Gtk`.TextBuffer.remove_tag].
     */
    removeTagByName(name: string, start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * This function moves the “insert” and “selection_bound” marks
     * simultaneously.
     * 
     * If you move them in two steps with
     * [method`Gtk`.TextBuffer.move_mark], you will temporarily select a
     * region in between their old and new locations, which can be pretty
     * inefficient since the temporarily-selected region will force stuff
     * to be recalculated. This function moves them as a unit, which can
     * be optimized.
     */
    selectRange(ins: Gtk.TextIter, bound: Gtk.TextIter): void
    /**
     * Sets whether or not to enable undoable actions in the text buffer.
     * 
     * Undoable actions in this context are changes to the text content of
     * the buffer. Changes to tags and marks are not tracked.
     * 
     * If enabled, the user will be able to undo the last number of actions
     * up to [method`Gtk`.TextBuffer.get_max_undo_levels].
     * 
     * See [method`Gtk`.TextBuffer.begin_irreversible_action] and
     * [method`Gtk`.TextBuffer.end_irreversible_action] to create
     * changes to the buffer that cannot be undone.
     */
    setEnableUndo(enableUndo: boolean): void
    /**
     * Sets the maximum number of undo levels to perform.
     * 
     * If 0, unlimited undo actions may be performed. Note that this may
     * have a memory usage impact as it requires storing an additional
     * copy of the inserted or removed text within the text buffer.
     */
    setMaxUndoLevels(maxUndoLevels: number): void
    /**
     * Used to keep track of whether the buffer has been
     * modified since the last time it was saved.
     * 
     * Whenever the buffer is saved to disk, call
     * `gtk_text_buffer_set_modified (`buffer,` FALSE)`.
     * When the buffer is modified, it will automatically
     * toggled on the modified bit again. When the modified
     * bit flips, the buffer emits the
     * [signal`Gtk`.TextBuffer::modified-changed] signal.
     */
    setModified(setting: boolean): void
    /**
     * Deletes current contents of `buffer,` and inserts `text` instead.
     * 
     * If `len` is -1, `text` must be nul-terminated.
     * `text` must be valid UTF-8.
     */
    setText(text: string, len: number): void
    /**
     * Undoes the last undoable action on the buffer, if there is one.
     */
    undo(): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GtkSource-5.GtkSource.Buffer */
    /**
     * `iter` is set to a valid iterator pointing to the matching bracket
     * if `state` is %GTK_SOURCE_BRACKET_MATCH_FOUND. Otherwise `iter` is
     * meaningless.
     * 
     * The signal is emitted only when the `state` changes, typically when
     * the cursor moves.
     * 
     * A use-case for this signal is to show messages in a [class`Gtk`.Statusbar].
     */
    connect(sigName: "bracket-matched", callback: ((iter: Gtk.TextIter | null, state: BracketMatchType) => void)): number
    on(sigName: "bracket-matched", callback: (iter: Gtk.TextIter | null, state: BracketMatchType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "bracket-matched", callback: (iter: Gtk.TextIter | null, state: BracketMatchType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "bracket-matched", callback: (iter: Gtk.TextIter | null, state: BracketMatchType) => void): NodeJS.EventEmitter
    emit(sigName: "bracket-matched", iter: Gtk.TextIter | null, state: BracketMatchType): void
    /**
     * The "cursor-moved" signal is emitted when then insertion mark has moved.
     */
    connect(sigName: "cursor-moved", callback: (() => void)): number
    on(sigName: "cursor-moved", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "cursor-moved", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "cursor-moved", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "cursor-moved"): void
    /**
     * The ::highlight-updated signal is emitted when the syntax
     * highlighting and [context classes](./class.Buffer.html#context-classes) are updated in a
     * certain region of the `buffer`.
     */
    connect(sigName: "highlight-updated", callback: ((start: Gtk.TextIter, end: Gtk.TextIter) => void)): number
    on(sigName: "highlight-updated", callback: (start: Gtk.TextIter, end: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "highlight-updated", callback: (start: Gtk.TextIter, end: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "highlight-updated", callback: (start: Gtk.TextIter, end: Gtk.TextIter) => void): NodeJS.EventEmitter
    emit(sigName: "highlight-updated", start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * The ::source-mark-updated signal is emitted each time
     * a mark is added to, moved or removed from the `buffer`.
     */
    connect(sigName: "source-mark-updated", callback: ((mark: Gtk.TextMark) => void)): number
    on(sigName: "source-mark-updated", callback: (mark: Gtk.TextMark) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "source-mark-updated", callback: (mark: Gtk.TextMark) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "source-mark-updated", callback: (mark: Gtk.TextMark) => void): NodeJS.EventEmitter
    emit(sigName: "source-mark-updated", mark: Gtk.TextMark): void
    /* Signals of Gtk-4.0.Gtk.TextBuffer */
    /**
     * Emitted to apply a tag to a range of text in a `GtkTextBuffer`.
     * 
     * Applying actually occurs in the default handler.
     * 
     * Note that if your handler runs before the default handler
     * it must not invalidate the `start` and `end` iters (or has to
     * revalidate them).
     * 
     * See also:
     * [method`Gtk`.TextBuffer.apply_tag],
     * [method`Gtk`.TextBuffer.insert_with_tags],
     * [method`Gtk`.TextBuffer.insert_range].
     */
    connect(sigName: "apply-tag", callback: ((tag: Gtk.TextTag, start: Gtk.TextIter, end: Gtk.TextIter) => void)): number
    on(sigName: "apply-tag", callback: (tag: Gtk.TextTag, start: Gtk.TextIter, end: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "apply-tag", callback: (tag: Gtk.TextTag, start: Gtk.TextIter, end: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "apply-tag", callback: (tag: Gtk.TextTag, start: Gtk.TextIter, end: Gtk.TextIter) => void): NodeJS.EventEmitter
    emit(sigName: "apply-tag", tag: Gtk.TextTag, start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Emitted at the beginning of a single user-visible
     * operation on a `GtkTextBuffer`.
     * 
     * See also:
     * [method`Gtk`.TextBuffer.begin_user_action],
     * [method`Gtk`.TextBuffer.insert_interactive],
     * [method`Gtk`.TextBuffer.insert_range_interactive],
     * [method`Gtk`.TextBuffer.delete_interactive],
     * [method`Gtk`.TextBuffer.backspace],
     * [method`Gtk`.TextBuffer.delete_selection].
     */
    connect(sigName: "begin-user-action", callback: (() => void)): number
    on(sigName: "begin-user-action", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "begin-user-action", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "begin-user-action", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "begin-user-action"): void
    /**
     * Emitted when the content of a `GtkTextBuffer` has changed.
     */
    connect(sigName: "changed", callback: (() => void)): number
    on(sigName: "changed", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "changed", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "changed", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "changed"): void
    /**
     * Emitted to delete a range from a `GtkTextBuffer`.
     * 
     * Note that if your handler runs before the default handler
     * it must not invalidate the `start` and `end` iters (or has
     * to revalidate them). The default signal handler revalidates
     * the `start` and `end` iters to both point to the location
     * where text was deleted. Handlers which run after the default
     * handler (see g_signal_connect_after()) do not have access to
     * the deleted text.
     * 
     * See also: [method`Gtk`.TextBuffer.delete].
     */
    connect(sigName: "delete-range", callback: ((start: Gtk.TextIter, end: Gtk.TextIter) => void)): number
    on(sigName: "delete-range", callback: (start: Gtk.TextIter, end: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "delete-range", callback: (start: Gtk.TextIter, end: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "delete-range", callback: (start: Gtk.TextIter, end: Gtk.TextIter) => void): NodeJS.EventEmitter
    emit(sigName: "delete-range", start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Emitted at the end of a single user-visible
     * operation on the `GtkTextBuffer`.
     * 
     * See also:
     * [method`Gtk`.TextBuffer.end_user_action],
     * [method`Gtk`.TextBuffer.insert_interactive],
     * [method`Gtk`.TextBuffer.insert_range_interactive],
     * [method`Gtk`.TextBuffer.delete_interactive],
     * [method`Gtk`.TextBuffer.backspace],
     * [method`Gtk`.TextBuffer.delete_selection],
     * [method`Gtk`.TextBuffer.backspace].
     */
    connect(sigName: "end-user-action", callback: (() => void)): number
    on(sigName: "end-user-action", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "end-user-action", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "end-user-action", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "end-user-action"): void
    /**
     * Emitted to insert a `GtkTextChildAnchor` in a `GtkTextBuffer`.
     * 
     * Insertion actually occurs in the default handler.
     * 
     * Note that if your handler runs before the default handler
     * it must not invalidate the `location` iter (or has to
     * revalidate it). The default signal handler revalidates
     * it to be placed after the inserted `anchor`.
     * 
     * See also: [method`Gtk`.TextBuffer.insert_child_anchor].
     */
    connect(sigName: "insert-child-anchor", callback: ((location: Gtk.TextIter, anchor: Gtk.TextChildAnchor) => void)): number
    on(sigName: "insert-child-anchor", callback: (location: Gtk.TextIter, anchor: Gtk.TextChildAnchor) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "insert-child-anchor", callback: (location: Gtk.TextIter, anchor: Gtk.TextChildAnchor) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "insert-child-anchor", callback: (location: Gtk.TextIter, anchor: Gtk.TextChildAnchor) => void): NodeJS.EventEmitter
    emit(sigName: "insert-child-anchor", location: Gtk.TextIter, anchor: Gtk.TextChildAnchor): void
    /**
     * Emitted to insert a `GdkPaintable` in a `GtkTextBuffer`.
     * 
     * Insertion actually occurs in the default handler.
     * 
     * Note that if your handler runs before the default handler
     * it must not invalidate the `location` iter (or has to
     * revalidate it). The default signal handler revalidates
     * it to be placed after the inserted `paintable`.
     * 
     * See also: [method`Gtk`.TextBuffer.insert_paintable].
     */
    connect(sigName: "insert-paintable", callback: ((location: Gtk.TextIter, paintable: Gdk.Paintable) => void)): number
    on(sigName: "insert-paintable", callback: (location: Gtk.TextIter, paintable: Gdk.Paintable) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "insert-paintable", callback: (location: Gtk.TextIter, paintable: Gdk.Paintable) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "insert-paintable", callback: (location: Gtk.TextIter, paintable: Gdk.Paintable) => void): NodeJS.EventEmitter
    emit(sigName: "insert-paintable", location: Gtk.TextIter, paintable: Gdk.Paintable): void
    /**
     * Emitted to insert text in a `GtkTextBuffer`.
     * 
     * Insertion actually occurs in the default handler.
     * 
     * Note that if your handler runs before the default handler
     * it must not invalidate the `location` iter (or has to
     * revalidate it). The default signal handler revalidates
     * it to point to the end of the inserted text.
     * 
     * See also: [method`Gtk`.TextBuffer.insert],
     * [method`Gtk`.TextBuffer.insert_range].
     */
    connect(sigName: "insert-text", callback: ((location: Gtk.TextIter, text: string, len: number) => void)): number
    on(sigName: "insert-text", callback: (location: Gtk.TextIter, text: string, len: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "insert-text", callback: (location: Gtk.TextIter, text: string, len: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "insert-text", callback: (location: Gtk.TextIter, text: string, len: number) => void): NodeJS.EventEmitter
    emit(sigName: "insert-text", location: Gtk.TextIter, text: string, len: number): void
    /**
     * Emitted as notification after a `GtkTextMark` is deleted.
     * 
     * See also: [method`Gtk`.TextBuffer.delete_mark].
     */
    connect(sigName: "mark-deleted", callback: ((mark: Gtk.TextMark) => void)): number
    on(sigName: "mark-deleted", callback: (mark: Gtk.TextMark) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "mark-deleted", callback: (mark: Gtk.TextMark) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "mark-deleted", callback: (mark: Gtk.TextMark) => void): NodeJS.EventEmitter
    emit(sigName: "mark-deleted", mark: Gtk.TextMark): void
    /**
     * Emitted as notification after a `GtkTextMark` is set.
     * 
     * See also:
     * [method`Gtk`.TextBuffer.create_mark],
     * [method`Gtk`.TextBuffer.move_mark].
     */
    connect(sigName: "mark-set", callback: ((location: Gtk.TextIter, mark: Gtk.TextMark) => void)): number
    on(sigName: "mark-set", callback: (location: Gtk.TextIter, mark: Gtk.TextMark) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "mark-set", callback: (location: Gtk.TextIter, mark: Gtk.TextMark) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "mark-set", callback: (location: Gtk.TextIter, mark: Gtk.TextMark) => void): NodeJS.EventEmitter
    emit(sigName: "mark-set", location: Gtk.TextIter, mark: Gtk.TextMark): void
    /**
     * Emitted when the modified bit of a `GtkTextBuffer` flips.
     * 
     * See also: [method`Gtk`.TextBuffer.set_modified].
     */
    connect(sigName: "modified-changed", callback: (() => void)): number
    on(sigName: "modified-changed", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "modified-changed", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "modified-changed", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "modified-changed"): void
    /**
     * Emitted after paste operation has been completed.
     * 
     * This is useful to properly scroll the view to the end
     * of the pasted text. See [method`Gtk`.TextBuffer.paste_clipboard]
     * for more details.
     */
    connect(sigName: "paste-done", callback: ((clipboard: Gdk.Clipboard) => void)): number
    on(sigName: "paste-done", callback: (clipboard: Gdk.Clipboard) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "paste-done", callback: (clipboard: Gdk.Clipboard) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "paste-done", callback: (clipboard: Gdk.Clipboard) => void): NodeJS.EventEmitter
    emit(sigName: "paste-done", clipboard: Gdk.Clipboard): void
    /**
     * Emitted when a request has been made to redo the
     * previously undone operation.
     */
    connect(sigName: "redo", callback: (() => void)): number
    on(sigName: "redo", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "redo", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "redo", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "redo"): void
    /**
     * Emitted to remove all occurrences of `tag` from a range
     * of text in a `GtkTextBuffer`.
     * 
     * Removal actually occurs in the default handler.
     * 
     * Note that if your handler runs before the default handler
     * it must not invalidate the `start` and `end` iters (or has
     * to revalidate them).
     * 
     * See also: [method`Gtk`.TextBuffer.remove_tag].
     */
    connect(sigName: "remove-tag", callback: ((tag: Gtk.TextTag, start: Gtk.TextIter, end: Gtk.TextIter) => void)): number
    on(sigName: "remove-tag", callback: (tag: Gtk.TextTag, start: Gtk.TextIter, end: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "remove-tag", callback: (tag: Gtk.TextTag, start: Gtk.TextIter, end: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "remove-tag", callback: (tag: Gtk.TextTag, start: Gtk.TextIter, end: Gtk.TextIter) => void): NodeJS.EventEmitter
    emit(sigName: "remove-tag", tag: Gtk.TextTag, start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Emitted when a request has been made to undo the
     * previous operation or set of operations that have
     * been grouped together.
     */
    connect(sigName: "undo", callback: (() => void)): number
    on(sigName: "undo", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "undo", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "undo", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "undo"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::highlight-matching-brackets", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::highlight-matching-brackets", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::highlight-matching-brackets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::highlight-matching-brackets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::highlight-matching-brackets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::highlight-syntax", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::highlight-syntax", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::highlight-syntax", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::highlight-syntax", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::highlight-syntax", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::implicit-trailing-newline", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implicit-trailing-newline", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::implicit-trailing-newline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::implicit-trailing-newline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::implicit-trailing-newline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::language", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::language", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style-scheme", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style-scheme", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style-scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style-scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style-scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-redo", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-redo", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-redo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-redo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-redo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-undo", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-undo", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-undo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-undo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-undo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cursor-position", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor-position", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cursor-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cursor-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cursor-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-undo", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-undo", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-undo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-undo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-undo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-selection", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-selection", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-selection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-selection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-selection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Buffer_ConstructProps)
    _init (config?: Buffer_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(table?: Gtk.TextTagTable | null): Buffer
    /* Function overloads */
    static new(table?: Gtk.TextTagTable | null): Buffer
    static newWithLanguage(language: Language): Buffer
    static $gtype: GObject.Type
}
interface Completion_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.Completion */
    /**
     * The number of rows to display to the user before scrolling.
     */
    pageSize?: number
    /**
     * Determines whether the visibility of the info window should be saved when the
     * completion is hidden, and restored when the completion is shown again.
     */
    rememberInfoVisibility?: boolean
    /**
     * Determines whether the first proposal should be selected when the completion
     * is first shown.
     */
    selectOnShow?: boolean
    /**
     * The "show-icons" property denotes if icons should be displayed within
     * the list of completions presented to the user.
     */
    showIcons?: boolean
    /**
     * The "view" property is the #GtkTextView for which this #GtkSourceCompletion
     * is providing completion features.
     */
    view?: View
}
class Completion {
    /* Properties of GtkSource-5.GtkSource.Completion */
    /**
     * The #GtkTextBuffer for the #GtkSourceCompletion:view.
     * This is a convenience property for providers.
     */
    readonly buffer: Gtk.TextView
    /**
     * The number of rows to display to the user before scrolling.
     */
    pageSize: number
    /**
     * Determines whether the visibility of the info window should be saved when the
     * completion is hidden, and restored when the completion is shown again.
     */
    rememberInfoVisibility: boolean
    /**
     * Determines whether the first proposal should be selected when the completion
     * is first shown.
     */
    selectOnShow: boolean
    /**
     * The "show-icons" property denotes if icons should be displayed within
     * the list of completions presented to the user.
     */
    showIcons: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.Completion */
    /**
     * Adds a [iface`CompletionProvider]` to the list of providers to be queried
     * for completion results.
     */
    addProvider(provider: CompletionProvider): void
    blockInteractive(): void
    /**
     * Gets the connected [class`View]`'s [class`Buffer]`
     */
    getBuffer(): Buffer
    getPageSize(): number
    /**
     * Gets the [class`View]` that owns the [class`Completion]`.
     */
    getView(): View
    /**
     * Emits the "hide" signal.
     * 
     * When the "hide" signal is emitted, the completion window will be
     * dismissed.
     */
    hide(): void
    /**
     * Removes a [iface`CompletionProvider]` previously added with
     * [method`Completion`.add_provider].
     */
    removeProvider(provider: CompletionProvider): void
    setPageSize(pageSize: number): void
    /**
     * Emits the "show" signal.
     * 
     * When the "show" signal is emitted, the completion window will be
     * displayed if there are any results available.
     */
    show(): void
    unblockInteractive(): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GtkSource-5.GtkSource.Completion */
    /**
     * The "hide" signal is emitted when the completion window should
     * be hidden.
     */
    connect(sigName: "hide", callback: (() => void)): number
    on(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "hide", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "hide"): void
    /**
     * The "provided-added" signal is emitted when a new provider is
     * added to the completion.
     */
    connect(sigName: "provider-added", callback: ((provider: CompletionProvider) => void)): number
    on(sigName: "provider-added", callback: (provider: CompletionProvider) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "provider-added", callback: (provider: CompletionProvider) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "provider-added", callback: (provider: CompletionProvider) => void): NodeJS.EventEmitter
    emit(sigName: "provider-added", provider: CompletionProvider): void
    /**
     * The "provided-removed" signal is emitted when a provider has
     * been removed from the completion.
     */
    connect(sigName: "provider-removed", callback: ((provider: CompletionProvider) => void)): number
    on(sigName: "provider-removed", callback: (provider: CompletionProvider) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "provider-removed", callback: (provider: CompletionProvider) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "provider-removed", callback: (provider: CompletionProvider) => void): NodeJS.EventEmitter
    emit(sigName: "provider-removed", provider: CompletionProvider): void
    /**
     * The "show" signal is emitted when the completion window should
     * be shown.
     */
    connect(sigName: "show", callback: (() => void)): number
    on(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "show"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::buffer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::page-size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::page-size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::page-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::page-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::page-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::remember-info-visibility", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::remember-info-visibility", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::remember-info-visibility", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::remember-info-visibility", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::remember-info-visibility", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::select-on-show", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::select-on-show", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::select-on-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::select-on-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::select-on-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::show-icons", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-icons", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::show-icons", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::show-icons", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::show-icons", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Completion_ConstructProps)
    _init (config?: Completion_ConstructProps): void
    /* Static methods and pseudo-constructors */
    /**
     * This will add `<b>` tags around matched characters in `haystack`
     * based on `casefold_query`.
     */
    static fuzzyHighlight(haystack: string, casefoldQuery: string): Pango.AttrList | null
    /**
     * This helper function can do a fuzzy match for you giving a haystack and
     * casefolded needle.
     * 
     * Casefold your needle using [func`GLib`.utf8_casefold] before
     * running the query.
     * 
     * Score will be set with the score of the match upon success. Otherwise,
     * it will be set to zero.
     */
    static fuzzyMatch(haystack: string | null, casefoldNeedle: string): [ /* returnType */ boolean, /* priority */ number | null ]
    static $gtype: GObject.Type
}
interface CompletionCell_ConstructProps extends Gtk.Widget_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.CompletionCell */
    column?: CompletionColumn
    markup?: string
    paintable?: Gdk.Paintable
    text?: string
    widget?: Gtk.Widget
    /* Constructor properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole?: Gtk.AccessibleRole
}
class CompletionCell {
    /* Properties of GtkSource-5.GtkSource.CompletionCell */
    markup: string
    paintable: Gdk.Paintable
    text: string
    widget: Gtk.Widget
    /* Properties of Gtk-4.0.Gtk.Widget */
    /**
     * Whether the widget or any of its descendents can accept
     * the input focus.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    canFocus: boolean
    /**
     * Whether the widget can receive pointer events.
     */
    canTarget: boolean
    /**
     * A list of css classes applied to this widget.
     */
    cssClasses: string[]
    /**
     * The cursor used by `widget`.
     */
    cursor: Gdk.Cursor
    /**
     * Whether the widget should grab focus when it is clicked with the mouse.
     * 
     * This property is only relevant for widgets that can take focus.
     */
    focusOnClick: boolean
    /**
     * Whether this widget itself will accept the input focus.
     */
    focusable: boolean
    /**
     * How to distribute horizontal space if widget gets extra space.
     */
    halign: Gtk.Align
    /**
     * Whether the widget is the default widget.
     */
    readonly hasDefault: boolean
    /**
     * Whether the widget has the input focus.
     */
    readonly hasFocus: boolean
    /**
     * Enables or disables the emission of the ::query-tooltip signal on `widget`.
     * 
     * A value of %TRUE indicates that `widget` can have a tooltip, in this case
     * the widget will be queried using [signal`Gtk`.Widget::query-tooltip] to
     * determine whether it will provide a tooltip or not.
     */
    hasTooltip: boolean
    /**
     * Override for height request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    heightRequest: number
    /**
     * Whether to expand horizontally.
     */
    hexpand: boolean
    /**
     * Whether to use the `hexpand` property.
     */
    hexpandSet: boolean
    /**
     * The `GtkLayoutManager` instance to use to compute the preferred size
     * of the widget, and allocate its children.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    layoutManager: Gtk.LayoutManager
    /**
     * Margin on bottom side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginBottom: number
    /**
     * Margin on end of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginEnd: number
    /**
     * Margin on start of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginStart: number
    /**
     * Margin on top side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginTop: number
    /**
     * The name of the widget.
     */
    name: string
    /**
     * The requested opacity of the widget.
     */
    opacity: number
    /**
     * How content outside the widget's content area is treated.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    overflow: Gtk.Overflow
    /**
     * The parent widget of this widget.
     */
    readonly parent: Gtk.Widget
    /**
     * Whether the widget will receive the default action when it is focused.
     */
    receivesDefault: boolean
    /**
     * The `GtkRoot` widget of the widget tree containing this widget.
     * 
     * This will be %NULL if the widget is not contained in a root widget.
     */
    readonly root: Gtk.Root
    /**
     * The scale factor of the widget.
     */
    readonly scaleFactor: number
    /**
     * Whether the widget responds to input.
     */
    sensitive: boolean
    /**
     * Sets the text of tooltip to be the given string, which is marked up
     * with Pango markup.
     * 
     * Also see [method`Gtk`.Tooltip.set_markup].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipMarkup: string
    /**
     * Sets the text of tooltip to be the given string.
     * 
     * Also see [method`Gtk`.Tooltip.set_text].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipText: string
    /**
     * How to distribute vertical space if widget gets extra space.
     */
    valign: Gtk.Align
    /**
     * Whether to expand vertically.
     */
    vexpand: boolean
    /**
     * Whether to use the `vexpand` property.
     */
    vexpandSet: boolean
    /**
     * Whether the widget is visible.
     */
    visible: boolean
    /**
     * Override for width request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    widthRequest: number
    /* Properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole: Gtk.AccessibleRole
    /* Fields of Gtk-4.0.Gtk.Widget */
    readonly parentInstance: GObject.InitiallyUnowned
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.CompletionCell */
    getColumn(): CompletionColumn
    /**
     * Gets the child #GtkWidget, if any.
     */
    getWidget(): Gtk.Widget | null
    setGicon(gicon: Gio.Icon): void
    setIconName(iconName: string): void
    setMarkup(markup: string): void
    setPaintable(paintable: Gdk.Paintable): void
    setText(text: string): void
    setTextWithAttributes(text: string, attrs: Pango.AttrList): void
    setWidget(child: Gtk.Widget): void
    /* Methods of Gtk-4.0.Gtk.Widget */
    /**
     * Enable or disable an action installed with
     * gtk_widget_class_install_action().
     */
    actionSetEnabled(actionName: string, enabled: boolean): void
    /**
     * For widgets that can be “activated” (buttons, menu items, etc.),
     * this function activates them.
     * 
     * The activation will emit the signal set using
     * [method`Gtk`.WidgetClass.set_activate_signal] during class initialization.
     * 
     * Activation is what happens when you press <kbd>Enter</kbd>
     * on a widget during key navigation.
     * 
     * If you wish to handle the activation keybinding yourself, it is
     * recommended to use [method`Gtk`.WidgetClass.add_shortcut] with an action
     * created with [ctor`Gtk`.SignalAction.new].
     * 
     * If `widget` isn't activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Looks up the action in the action groups associated with
     * `widget` and its ancestors, and activates it.
     * 
     * If the action is in an action group added with
     * [method`Gtk`.Widget.insert_action_group], the `name` is expected
     * to be prefixed with the prefix that was used when the group was
     * inserted.
     * 
     * The arguments must match the actions expected parameter type,
     * as returned by `g_action_get_parameter_type()`.
     */
    activateAction(name: string, args?: GLib.Variant | null): boolean
    /**
     * Activates the `default.activate` action from `widget`.
     */
    activateDefault(): void
    /**
     * Adds `controller` to `widget` so that it will receive events.
     * 
     * You will usually want to call this function right after
     * creating any kind of [class`Gtk`.EventController].
     */
    addController(controller: Gtk.EventController): void
    /**
     * Adds a style class to `widget`.
     * 
     * After calling this function, the widgets style will match
     * for `css_class,` according to CSS matching rules.
     * 
     * Use [method`Gtk`.Widget.remove_css_class] to remove the
     * style again.
     */
    addCssClass(cssClass: string): void
    /**
     * Adds a widget to the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. Note the
     * list of mnemonic labels for the widget is cleared when the
     * widget is destroyed, so the caller must make sure to update
     * its internal state at this point as well.
     */
    addMnemonicLabel(label: Gtk.Widget): void
    /**
     * Queues an animation frame update and adds a callback to be called
     * before each frame.
     * 
     * Until the tick callback is removed, it will be called frequently
     * (usually at the frame rate of the output device or as quickly as
     * the application can be repainted, whichever is slower). For this
     * reason, is most suitable for handling graphics that change every
     * frame or every few frames. The tick callback does not automatically
     * imply a relayout or repaint. If you want a repaint or relayout, and
     * aren’t changing widget properties that would trigger that (for example,
     * changing the text of a `GtkLabel`), then you will have to call
     * [method`Gtk`.Widget.queue_resize] or [method`Gtk`.Widget.queue_draw]
     * yourself.
     * 
     * [method`Gdk`.FrameClock.get_frame_time] should generally be used
     * for timing continuous animations and
     * [method`Gdk`.FrameTimings.get_predicted_presentation_time] if you are
     * trying to display isolated frames at particular times.
     * 
     * This is a more convenient alternative to connecting directly to the
     * [signal`Gdk`.FrameClock::update] signal of `GdkFrameClock`, since you
     * don't have to worry about when a `GdkFrameClock` is assigned to a widget.
     */
    addTickCallback(callback: Gtk.TickCallback): number
    /**
     * This function is only used by `GtkWidget` subclasses, to
     * assign a size, position and (optionally) baseline to their
     * child widgets.
     * 
     * In this function, the allocation and baseline may be adjusted.
     * The given allocation will be forced to be bigger than the
     * widget's minimum size, as well as at least 0×0 in size.
     * 
     * For a version that does not take a transform, see
     * [method`Gtk`.Widget.size_allocate].
     */
    allocate(width: number, height: number, baseline: number, transform?: Gsk.Transform | null): void
    /**
     * Called by widgets as the user moves around the window using
     * keyboard shortcuts.
     * 
     * The `direction` argument indicates what kind of motion is taking place (up,
     * down, left, right, tab forward, tab backward).
     * 
     * This function calls the [vfunc`Gtk`.Widget.focus] virtual function; widgets
     * can override the virtual function in order to implement appropriate focus
     * behavior.
     * 
     * The default `focus()` virtual function for a widget should return `TRUE` if
     * moving in `direction` left the focus on a focusable location inside that
     * widget, and `FALSE` if moving in `direction` moved the focus outside the
     * widget. When returning `TRUE`, widgets normallycall [method`Gtk`.Widget.grab_focus]
     * to place the focus accordingly; when returning `FALSE`, they don’t modify
     * the current focus location.
     * 
     * This function is used by custom widget implementations; if you're
     * writing an app, you’d use [method`Gtk`.Widget.grab_focus] to move
     * the focus to a particular widget.
     */
    childFocus(direction: Gtk.DirectionType): boolean
    /**
     * Computes the bounds for `widget` in the coordinate space of `target`.
     * 
     * FIXME: Explain what "bounds" are.
     * 
     * If the operation is successful, %TRUE is returned. If `widget` has no
     * bounds or the bounds cannot be expressed in `target'`s coordinate space
     * (for example if both widgets are in different windows), %FALSE is
     * returned and `bounds` is set to the zero rectangle.
     * 
     * It is valid for `widget` and `target` to be the same widget.
     */
    computeBounds(target: Gtk.Widget): [ /* returnType */ boolean, /* outBounds */ Graphene.Rect ]
    /**
     * Computes whether a container should give this widget
     * extra space when possible.
     * 
     * Containers should check this, rather than looking at
     * [method`Gtk`.Widget.get_hexpand] or [method`Gtk`.Widget.get_vexpand].
     * 
     * This function already checks whether the widget is visible, so
     * visibility does not need to be checked separately. Non-visible
     * widgets are not expanded.
     * 
     * The computed expand value uses either the expand setting explicitly
     * set on the widget itself, or, if none has been explicitly set,
     * the widget may expand if some of its children do.
     */
    computeExpand(orientation: Gtk.Orientation): boolean
    /**
     * Translates the given `point` in `widget'`s coordinates to coordinates
     * relative to `target’`s coordinate system.
     * 
     * In order to perform this operation, both widgets must share a
     * common ancestor.
     */
    computePoint(target: Gtk.Widget, point: Graphene.Point): [ /* returnType */ boolean, /* outPoint */ Graphene.Point ]
    /**
     * Computes a matrix suitable to describe a transformation from
     * `widget'`s coordinate system into `target'`s coordinate system.
     * 
     * The transform can not be computed in certain cases, for example
     * when `widget` and `target` do not share a common ancestor. In that
     * case `out_transform` gets set to the identity matrix.
     */
    computeTransform(target: Gtk.Widget): [ /* returnType */ boolean, /* outTransform */ Graphene.Matrix ]
    /**
     * Tests if the point at (`x,` `y)` is contained in `widget`.
     * 
     * The coordinates for (`x,` `y)` must be in widget coordinates, so
     * (0, 0) is assumed to be the top left of `widget'`s content area.
     */
    contains(x: number, y: number): boolean
    /**
     * Creates a new `PangoContext` with the appropriate font map,
     * font options, font description, and base direction for drawing
     * text for this widget.
     * 
     * See also [method`Gtk`.Widget.get_pango_context].
     */
    createPangoContext(): Pango.Context
    /**
     * Creates a new `PangoLayout` with the appropriate font map,
     * font description, and base direction for drawing text for
     * this widget.
     * 
     * If you keep a `PangoLayout` created in this way around,
     * you need to re-create it when the widget `PangoContext`
     * is replaced. This can be tracked by listening to changes
     * of the [property`Gtk`.Widget:root] property on the widget.
     */
    createPangoLayout(text?: string | null): Pango.Layout
    /**
     * Checks to see if a drag movement has passed the GTK drag threshold.
     */
    dragCheckThreshold(startX: number, startY: number, currentX: number, currentY: number): boolean
    /**
     * Notifies the user about an input-related error on this widget.
     * 
     * If the [property`Gtk`.Settings:gtk-error-bell] setting is %TRUE,
     * it calls [method`Gdk`.Surface.beep], otherwise it does nothing.
     * 
     * Note that the effect of [method`Gdk`.Surface.beep] can be configured
     * in many ways, depending on the windowing backend and the desktop
     * environment or window manager that is used.
     */
    errorBell(): void
    /**
     * Returns the baseline that has currently been allocated to `widget`.
     * 
     * This function is intended to be used when implementing handlers
     * for the `GtkWidget`Class.snapshot() function, and when allocating
     * child widgets in `GtkWidget`Class.size_allocate().
     */
    getAllocatedBaseline(): number
    /**
     * Returns the height that has currently been allocated to `widget`.
     */
    getAllocatedHeight(): number
    /**
     * Returns the width that has currently been allocated to `widget`.
     */
    getAllocatedWidth(): number
    /**
     * Retrieves the widget’s allocation.
     * 
     * Note, when implementing a layout container: a widget’s allocation
     * will be its “adjusted” allocation, that is, the widget’s parent
     * typically calls [method`Gtk`.Widget.size_allocate] with an allocation,
     * and that allocation is then adjusted (to handle margin
     * and alignment for example) before assignment to the widget.
     * [method`Gtk`.Widget.get_allocation] returns the adjusted allocation that
     * was actually assigned to the widget. The adjusted allocation is
     * guaranteed to be completely contained within the
     * [method`Gtk`.Widget.size_allocate] allocation, however.
     * 
     * So a layout container is guaranteed that its children stay inside
     * the assigned bounds, but not that they have exactly the bounds the
     * container assigned.
     */
    getAllocation(): /* allocation */ Gtk.Allocation
    /**
     * Gets the first ancestor of `widget` with type `widget_type`.
     * 
     * For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)`
     * gets the first `GtkBox` that’s an ancestor of `widget`. No
     * reference will be added to the returned widget; it should
     * not be unreferenced.
     * 
     * Note that unlike [method`Gtk`.Widget.is_ancestor], this function
     * considers `widget` to be an ancestor of itself.
     */
    getAncestor(widgetType: GObject.Type): Gtk.Widget | null
    /**
     * Determines whether the input focus can enter `widget` or any
     * of its children.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getCanFocus(): boolean
    /**
     * Queries whether `widget` can be the target of pointer events.
     */
    getCanTarget(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * 
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    getChildVisible(): boolean
    /**
     * Gets the clipboard object for `widget`.
     * 
     * This is a utility function to get the clipboard object for the
     * `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getClipboard(): Gdk.Clipboard
    /**
     * Returns the list of style classes applied to `widget`.
     */
    getCssClasses(): string[]
    /**
     * Returns the CSS name that is used for `self`.
     */
    getCssName(): string
    /**
     * Queries the cursor set on `widget`.
     * 
     * See [method`Gtk`.Widget.set_cursor] for details.
     */
    getCursor(): Gdk.Cursor | null
    /**
     * Gets the reading direction for a particular widget.
     * 
     * See [method`Gtk`.Widget.set_direction].
     */
    getDirection(): Gtk.TextDirection
    /**
     * Get the `GdkDisplay` for the toplevel window associated with
     * this widget.
     * 
     * This function can only be called after the widget has been
     * added to a widget hierarchy with a `GtkWindow` at the top.
     * 
     * In general, you should only create display specific
     * resources when a widget has been realized, and you should
     * free those resources when the widget is unrealized.
     */
    getDisplay(): Gdk.Display
    /**
     * Returns the widgets first child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getFirstChild(): Gtk.Widget | null
    /**
     * Returns the current focus child of `widget`.
     */
    getFocusChild(): Gtk.Widget | null
    /**
     * Returns whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * See [method`Gtk`.Widget.set_focus_on_click].
     */
    getFocusOnClick(): boolean
    /**
     * Determines whether `widget` can own the input focus.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getFocusable(): boolean
    /**
     * Gets the font map of `widget`.
     * 
     * See [method`Gtk`.Widget.set_font_map].
     */
    getFontMap(): Pango.FontMap | null
    /**
     * Returns the `cairo_font_options_t` of widget.
     * 
     * Seee [method`Gtk`.Widget.set_font_options].
     */
    getFontOptions(): cairo.FontOptions | null
    /**
     * Obtains the frame clock for a widget.
     * 
     * The frame clock is a global “ticker” that can be used to drive
     * animations and repaints. The most common reason to get the frame
     * clock is to call [method`Gdk`.FrameClock.get_frame_time], in order
     * to get a time to use for animating. For example you might record
     * the start of the animation with an initial value from
     * [method`Gdk`.FrameClock.get_frame_time], and then update the animation
     * by calling [method`Gdk`.FrameClock.get_frame_time] again during each repaint.
     * 
     * [method`Gdk`.FrameClock.request_phase] will result in a new frame on the
     * clock, but won’t necessarily repaint any widgets. To repaint a
     * widget, you have to use [method`Gtk`.Widget.queue_draw] which invalidates
     * the widget (thus scheduling it to receive a draw on the next
     * frame). gtk_widget_queue_draw() will also end up requesting a frame
     * on the appropriate frame clock.
     * 
     * A widget’s frame clock will not change while the widget is
     * mapped. Reparenting a widget (which implies a temporary unmap) can
     * change the widget’s frame clock.
     * 
     * Unrealized widgets do not have a frame clock.
     */
    getFrameClock(): Gdk.FrameClock | null
    /**
     * Gets the horizontal alignment of `widget`.
     * 
     * For backwards compatibility reasons this method will never return
     * %GTK_ALIGN_BASELINE, but instead it will convert it to
     * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
     * alignment.
     */
    getHalign(): Gtk.Align
    /**
     * Returns the current value of the `has-tooltip` property.
     */
    getHasTooltip(): boolean
    /**
     * Returns the content height of the widget.
     * 
     * This function returns the height passed to its
     * size-allocate implementation, which is the height you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getHeight(): number
    /**
     * Gets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Containers should use [method`Gtk`.Widget.compute_expand] rather
     * than this function, to see whether a widget, or any of its children,
     * has the expand flag set. If any child of a widget wants to
     * expand, the parent may ask to expand also.
     * 
     * This function only looks at the widget’s own hexpand flag, rather
     * than computing whether the entire widget tree rooted at this widget
     * wants to expand.
     */
    getHexpand(): boolean
    /**
     * Gets whether gtk_widget_set_hexpand() has been used
     * to explicitly set the expand flag on this widget.
     * 
     * If [property`Gtk`.Widget:hexpand] property is set, then it
     * overrides any computed expand value based on child widgets.
     * If `hexpand` is not set, then the expand value depends on
     * whether any children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    getHexpandSet(): boolean
    /**
     * Returns the widgets last child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getLastChild(): Gtk.Widget | null
    /**
     * Retrieves the layout manager used by `widget`.
     * 
     * See [method`Gtk`.Widget.set_layout_manager].
     */
    getLayoutManager(): Gtk.LayoutManager | null
    /**
     * Whether the widget is mapped.
     */
    getMapped(): boolean
    /**
     * Gets the bottom margin of `widget`.
     */
    getMarginBottom(): number
    /**
     * Gets the end margin of `widget`.
     */
    getMarginEnd(): number
    /**
     * Gets the start margin of `widget`.
     */
    getMarginStart(): number
    /**
     * Gets the top margin of `widget`.
     */
    getMarginTop(): number
    /**
     * Retrieves the name of a widget.
     * 
     * See [method`Gtk`.Widget.set_name] for the significance of widget names.
     */
    getName(): string
    /**
     * Returns the nearest `GtkNative` ancestor of `widget`.
     * 
     * This function will return %NULL if the widget is not
     * contained inside a widget tree with a native ancestor.
     * 
     * `GtkNative` widgets will return themselves here.
     */
    getNative(): Gtk.Native | null
    /**
     * Returns the widgets next sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getNextSibling(): Gtk.Widget | null
    /**
     * #Fetches the requested opacity for this widget.
     * 
     * See [method`Gtk`.Widget.set_opacity].
     */
    getOpacity(): number
    /**
     * Returns the widgets overflow value.
     */
    getOverflow(): Gtk.Overflow
    /**
     * Gets a `PangoContext` with the appropriate font map, font description,
     * and base direction for this widget.
     * 
     * Unlike the context returned by [method`Gtk`.Widget.create_pango_context],
     * this context is owned by the widget (it can be used until the screen
     * for the widget changes or the widget is removed from its toplevel),
     * and will be updated to match any changes to the widget’s attributes.
     * This can be tracked by listening to changes of the
     * [property`Gtk`.Widget:root] property on the widget.
     */
    getPangoContext(): Pango.Context
    /**
     * Returns the parent widget of `widget`.
     */
    getParent(): Gtk.Widget | null
    /**
     * Retrieves the minimum and natural size of a widget, taking
     * into account the widget’s preference for height-for-width management.
     * 
     * This is used to retrieve a suitable size by container widgets which do
     * not impose any restrictions on the child placement. It can be used
     * to deduce toplevel window and menu sizes as well as child widgets in
     * free-form containers such as `GtkFixed`.
     * 
     * Handle with care. Note that the natural height of a height-for-width
     * widget will generally be a smaller size than the minimum height, since
     * the required height for the natural width is generally smaller than the
     * required height for the minimum width.
     * 
     * Use [id`gtk_widget_measure]` if you want to support baseline alignment.
     */
    getPreferredSize(): [ /* minimumSize */ Gtk.Requisition | null, /* naturalSize */ Gtk.Requisition | null ]
    /**
     * Returns the widgets previous sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getPrevSibling(): Gtk.Widget | null
    /**
     * Gets the primary clipboard of `widget`.
     * 
     * This is a utility function to get the primary clipboard object
     * for the `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getPrimaryClipboard(): Gdk.Clipboard
    /**
     * Determines whether `widget` is realized.
     */
    getRealized(): boolean
    /**
     * Determines whether `widget` is always treated as the default widget
     * within its toplevel when it has the focus, even if another widget
     * is the default.
     * 
     * See [method`Gtk`.Widget.set_receives_default].
     */
    getReceivesDefault(): boolean
    /**
     * Gets whether the widget prefers a height-for-width layout
     * or a width-for-height layout.
     * 
     * Single-child widgets generally propagate the preference of
     * their child, more complex widgets need to request something
     * either in context of their children or in context of their
     * allocation capabilities.
     */
    getRequestMode(): Gtk.SizeRequestMode
    /**
     * Returns the `GtkRoot` widget of `widget`.
     * 
     * This function will return %NULL if the widget is not contained
     * inside a widget tree with a root widget.
     * 
     * `GtkRoot` widgets will return themselves here.
     */
    getRoot(): Gtk.Root | null
    /**
     * Retrieves the internal scale factor that maps from window
     * coordinates to the actual device pixels.
     * 
     * On traditional systems this is 1, on high density outputs,
     * it can be a higher value (typically 2).
     * 
     * See [method`Gdk`.Surface.get_scale_factor].
     */
    getScaleFactor(): number
    /**
     * Returns the widget’s sensitivity.
     * 
     * This function returns the value that has been set using
     * [method`Gtk`.Widget.set_sensitive]).
     * 
     * The effective sensitivity of a widget is however determined
     * by both its own and its parent widget’s sensitivity.
     * See [method`Gtk`.Widget.is_sensitive].
     */
    getSensitive(): boolean
    /**
     * Gets the settings object holding the settings used for this widget.
     * 
     * Note that this function can only be called when the `GtkWidget`
     * is attached to a toplevel, since the settings object is specific
     * to a particular `GdkDisplay`. If you want to monitor the widget for
     * changes in its settings, connect to the `notify::display` signal.
     */
    getSettings(): Gtk.Settings
    /**
     * Returns the content width or height of the widget.
     * 
     * Which dimension is returned depends on `orientation`.
     * 
     * This is equivalent to calling [method`Gtk`.Widget.get_width]
     * for %GTK_ORIENTATION_HORIZONTAL or [method`Gtk`.Widget.get_height]
     * for %GTK_ORIENTATION_VERTICAL, but can be used when
     * writing orientation-independent code, such as when
     * implementing [iface`Gtk`.Orientable] widgets.
     */
    getSize(orientation: Gtk.Orientation): number
    /**
     * Gets the size request that was explicitly set for the widget using
     * gtk_widget_set_size_request().
     * 
     * A value of -1 stored in `width` or `height` indicates that that
     * dimension has not been set explicitly and the natural requisition
     * of the widget will be used instead. See
     * [method`Gtk`.Widget.set_size_request]. To get the size a widget will
     * actually request, call [method`Gtk`.Widget.measure] instead of
     * this function.
     */
    getSizeRequest(): [ /* width */ number | null, /* height */ number | null ]
    /**
     * Returns the widget state as a flag set.
     * 
     * It is worth mentioning that the effective %GTK_STATE_FLAG_INSENSITIVE
     * state will be returned, that is, also based on parent insensitivity,
     * even if `widget` itself is sensitive.
     * 
     * Also note that if you are looking for a way to obtain the
     * [flags`Gtk`.StateFlags] to pass to a [class`Gtk`.StyleContext]
     * method, you should look at [method`Gtk`.StyleContext.get_state].
     */
    getStateFlags(): Gtk.StateFlags
    /**
     * Returns the style context associated to `widget`.
     * 
     * The returned object is guaranteed to be the same
     * for the lifetime of `widget`.
     */
    getStyleContext(): Gtk.StyleContext
    /**
     * Fetch an object build from the template XML for `widget_type` in
     * this `widget` instance.
     * 
     * This will only report children which were previously declared
     * with [method`Gtk`.WidgetClass.bind_template_child_full] or one of its
     * variants.
     * 
     * This function is only meant to be called for code which is private
     * to the `widget_type` which declared the child and is meant for language
     * bindings which cannot easily make use of the GObject structure offsets.
     */
    getTemplateChild(widgetType: GObject.Type, name: string): GObject.Object
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the tooltip has not been set using
     * [method`Gtk`.Widget.set_tooltip_markup], this
     * function returns %NULL.
     */
    getTooltipMarkup(): string | null
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the `widget'`s tooltip was set using
     * [method`Gtk`.Widget.set_tooltip_markup],
     * this function will return the escaped text.
     */
    getTooltipText(): string | null
    /**
     * Gets the vertical alignment of `widget`.
     */
    getValign(): Gtk.Align
    /**
     * Gets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.get_hexpand] for more detail.
     */
    getVexpand(): boolean
    /**
     * Gets whether gtk_widget_set_vexpand() has been used to
     * explicitly set the expand flag on this widget.
     * 
     * See [method`Gtk`.Widget.get_hexpand_set] for more detail.
     */
    getVexpandSet(): boolean
    /**
     * Determines whether the widget is visible.
     * 
     * If you want to take into account whether the widget’s
     * parent is also marked as visible, use
     * [method`Gtk`.Widget.is_visible] instead.
     * 
     * This function does not check if the widget is
     * obscured in any way.
     * 
     * See [method`Gtk`.Widget.set_visible].
     */
    getVisible(): boolean
    /**
     * Returns the content width of the widget.
     * 
     * This function returns the width passed to its
     * size-allocate implementation, which is the width you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getWidth(): number
    /**
     * Causes `widget` to have the keyboard focus for the `GtkWindow` it's inside.
     * 
     * If `widget` is not focusable, or its [vfunc`Gtk`.Widget.grab_focus]
     * implementation cannot transfer the focus to a descendant of `widget`
     * that is focusable, it will not take focus and %FALSE will be returned.
     * 
     * Calling [method`Gtk`.Widget.grab_focus] on an already focused widget
     * is allowed, should not have an effect, and return %TRUE.
     */
    grabFocus(): boolean
    /**
     * Returns whether `css_class` is currently applied to `widget`.
     */
    hasCssClass(cssClass: string): boolean
    /**
     * Determines if the widget should show a visible indication that
     * it has the global input focus.
     * 
     * This is a convenience function that takes into account whether
     * focus indication should currently be shown in the toplevel window
     * of `widget`. See [method`Gtk`.Window.get_focus_visible] for more
     * information about focus indication.
     * 
     * To find out if the widget has the global input focus, use
     * [method`Gtk`.Widget.has_focus].
     */
    hasVisibleFocus(): boolean
    /**
     * Reverses the effects of gtk_widget_show().
     * 
     * This is causing the widget to be hidden (invisible to the user).
     */
    hide(): void
    /**
     * Returns whether the widget is currently being destroyed.
     * 
     * This information can sometimes be used to avoid doing
     * unnecessary work.
     */
    inDestruction(): boolean
    /**
     * Creates and initializes child widgets defined in templates.
     * 
     * This function must be called in the instance initializer
     * for any class which assigned itself a template using
     * [method`Gtk`.WidgetClass.set_template].
     * 
     * It is important to call this function in the instance initializer
     * of a `GtkWidget` subclass and not in `GObject.constructed()` or
     * `GObject.constructor()` for two reasons:
     * 
     *  - derived widgets will assume that the composite widgets
     *    defined by its parent classes have been created in their
     *    relative instance initializers
     *  - when calling `g_object_new()` on a widget with composite templates,
     *    it’s important to build the composite widgets before the construct
     *    properties are set. Properties passed to `g_object_new()` should
     *    take precedence over properties set in the private template XML
     * 
     * A good rule of thumb is to call this function as the first thing in
     * an instance initialization function.
     */
    initTemplate(): void
    /**
     * Inserts `group` into `widget`.
     * 
     * Children of `widget` that implement [iface`Gtk`.Actionable] can
     * then be associated with actions in `group` by setting their
     * “action-name” to `prefix`.`action-name`.
     * 
     * Note that inheritance is defined for individual actions. I.e.
     * even if you insert a group with prefix `prefix,` actions with
     * the same prefix will still be inherited from the parent, unless
     * the group contains an action with the same name.
     * 
     * If `group` is %NULL, a previously inserted group for `name` is
     * removed from `widget`.
     */
    insertActionGroup(name: string, group?: Gio.ActionGroup | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed after `previous_sibling,` or at the beginning if
     * `previous_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_prev_sibling(widget)`
     * will return `previous_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this
     * function can also be used to reorder `widget` in the child widget
     * list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertAfter(parent: Gtk.Widget, previousSibling?: Gtk.Widget | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed before `next_sibling,` or at the end if
     * `next_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_next_sibling(widget)`
     * will return `next_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this function
     * can also be used to reorder `widget` in the child widget list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertBefore(parent: Gtk.Widget, nextSibling?: Gtk.Widget | null): void
    /**
     * Determines whether `widget` is somewhere inside `ancestor,`
     * possibly with intermediate containers.
     */
    isAncestor(ancestor: Gtk.Widget): boolean
    /**
     * Determines whether `widget` can be drawn to.
     * 
     * A widget can be drawn if it is mapped and visible.
     */
    isDrawable(): boolean
    /**
     * Determines if the widget is the focus widget within its
     * toplevel.
     * 
     * This does not mean that the [property`Gtk`.Widget:has-focus]
     * property is necessarily set; [property`Gtk`.Widget:has-focus]
     * will only be set if the toplevel widget additionally has the
     * global input focus.
     */
    isFocus(): boolean
    /**
     * Returns the widget’s effective sensitivity.
     * 
     * This means it is sensitive itself and also its
     * parent widget is sensitive.
     */
    isSensitive(): boolean
    /**
     * Determines whether the widget and all its parents are marked as
     * visible.
     * 
     * This function does not check if the widget is obscured in any way.
     * 
     * See also [method`Gtk`.Widget.get_visible] and
     * [method`Gtk`.Widget.set_visible].
     */
    isVisible(): boolean
    /**
     * Emits the `::keynav-failed` signal on the widget.
     * 
     * This function should be called whenever keyboard navigation
     * within a single widget hits a boundary.
     * 
     * The return value of this function should be interpreted
     * in a way similar to the return value of
     * [method`Gtk`.Widget.child_focus]. When %TRUE is returned,
     * stay in the widget, the failed keyboard  navigation is OK
     * and/or there is nowhere we can/should move the focus to.
     * When %FALSE is returned, the caller should continue with
     * keyboard navigation outside the widget, e.g. by calling
     * [method`Gtk`.Widget.child_focus] on the widget’s toplevel.
     * 
     * The default [signal`Gtk`.Widget::keynav-failed] handler returns
     * %FALSE for %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD.
     * For the other values of `GtkDirectionType` it returns %TRUE.
     * 
     * Whenever the default handler returns %TRUE, it also calls
     * [method`Gtk`.Widget.error_bell] to notify the user of the
     * failed keyboard navigation.
     * 
     * A use case for providing an own implementation of ::keynav-failed
     * (either by connecting to it or by overriding it) would be a row of
     * [class`Gtk`.Entry] widgets where the user should be able to navigate
     * the entire row with the cursor keys, as e.g. known from user
     * interfaces that require entering license keys.
     */
    keynavFailed(direction: Gtk.DirectionType): boolean
    /**
     * Returns the widgets for which this widget is the target of a
     * mnemonic.
     * 
     * Typically, these widgets will be labels. See, for example,
     * [method`Gtk`.Label.set_mnemonic_widget].
     * 
     * The widgets in the list are not individually referenced.
     * If you want to iterate through the list and perform actions
     * involving callbacks that might destroy the widgets, you
     * must call `g_list_foreach (result, (GFunc)g_object_ref, NULL)`
     * first, and then unref all the widgets afterwards.
     */
    listMnemonicLabels(): Gtk.Widget[]
    /**
     * Causes a widget to be mapped if it isn’t already.
     * 
     * This function is only for use in widget implementations.
     */
    map(): void
    /**
     * Measures `widget` in the orientation `orientation` and for the given `for_size`.
     * 
     * As an example, if `orientation` is %GTK_ORIENTATION_HORIZONTAL and `for_size`
     * is 300, this functions will compute the minimum and natural width of `widget`
     * if it is allocated at a height of 300 pixels.
     * 
     * See [GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management) for
     * a more details on implementing `GtkWidgetClass.measure()`.
     */
    measure(orientation: Gtk.Orientation, forSize: number): [ /* minimum */ number | null, /* natural */ number | null, /* minimumBaseline */ number | null, /* naturalBaseline */ number | null ]
    /**
     * Emits the ::mnemonic-activate signal.
     * 
     * See [signal`Gtk`.Widget::mnemonic-activate].
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Returns a `GListModel` to track the children of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track children and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeChildren(): Gio.ListModel
    /**
     * Returns a `GListModel` to track the [class`Gtk`.EventController]s
     * of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track controllers and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeControllers(): Gio.ListModel
    /**
     * Finds the descendant of `widget` closest to the point (`x,` `y)`.
     * 
     * The point must be given in widget coordinates, so (0, 0) is assumed
     * to be the top left of `widget'`s content area.
     * 
     * Usually widgets will return %NULL if the given coordinate is not
     * contained in `widget` checked via [method`Gtk`.Widget.contains].
     * Otherwise they will recursively try to find a child that does
     * not return %NULL. Widgets are however free to customize their
     * picking algorithm.
     * 
     * This function is used on the toplevel to determine the widget
     * below the mouse cursor for purposes of hover highlighting and
     * delivering events.
     */
    pick(x: number, y: number, flags: Gtk.PickFlags): Gtk.Widget | null
    /**
     * Flags the widget for a rerun of the [vfunc`Gtk`.Widget.size_allocate]
     * function.
     * 
     * Use this function instead of [method`Gtk`.Widget.queue_resize]
     * when the `widget'`s size request didn't change but it wants to
     * reposition its contents.
     * 
     * An example user of this function is [method`Gtk`.Widget.set_halign].
     * 
     * This function is only for use in widget implementations.
     */
    queueAllocate(): void
    /**
     * Schedules this widget to be redrawn in the paint phase
     * of the current or the next frame.
     * 
     * This means `widget'`s [vfunc`Gtk`.Widget.snapshot]
     * implementation will be called.
     */
    queueDraw(): void
    /**
     * Flags a widget to have its size renegotiated.
     * 
     * This should be called when a widget for some reason has a new
     * size request. For example, when you change the text in a
     * [class`Gtk`.Label], the label queues a resize to ensure there’s
     * enough space for the new text.
     * 
     * Note that you cannot call gtk_widget_queue_resize() on a widget
     * from inside its implementation of the [vfunc`Gtk`.Widget.size_allocate]
     * virtual method. Calls to gtk_widget_queue_resize() from inside
     * [vfunc`Gtk`.Widget.size_allocate] will be silently ignored.
     * 
     * This function is only for use in widget implementations.
     */
    queueResize(): void
    /**
     * Creates the GDK resources associated with a widget.
     * 
     * Normally realization happens implicitly; if you show a widget
     * and all its parent containers, then the widget will be realized
     * and mapped automatically.
     * 
     * Realizing a widget requires all the widget’s parent widgets to be
     * realized; calling this function realizes the widget’s parents
     * in addition to `widget` itself. If a widget is not yet inside a
     * toplevel window when you realize it, bad things will happen.
     * 
     * This function is primarily used in widget implementations, and
     * isn’t very useful otherwise. Many times when you think you might
     * need it, a better approach is to connect to a signal that will be
     * called after the widget is realized automatically, such as
     * [signal`Gtk`.Widget::realize].
     */
    realize(): void
    /**
     * Removes `controller` from `widget,` so that it doesn't process
     * events anymore.
     * 
     * It should not be used again.
     * 
     * Widgets will remove all event controllers automatically when they
     * are destroyed, there is normally no need to call this function.
     */
    removeController(controller: Gtk.EventController): void
    /**
     * Removes a style from `widget`.
     * 
     * After this, the style of `widget` will stop matching for `css_class`.
     */
    removeCssClass(cssClass: string): void
    /**
     * Removes a widget from the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. The widget must
     * have previously been added to the list with
     * [method`Gtk`.Widget.add_mnemonic_label].
     */
    removeMnemonicLabel(label: Gtk.Widget): void
    /**
     * Removes a tick callback previously registered with
     * gtk_widget_add_tick_callback().
     */
    removeTickCallback(id: number): void
    /**
     * Specifies whether the input focus can enter the widget
     * or any of its children.
     * 
     * Applications should set `can_focus` to %FALSE to mark a
     * widget as for pointer/touch use only.
     * 
     * Note that having `can_focus` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and focusable and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setCanFocus(canFocus: boolean): void
    /**
     * Sets whether `widget` can be the target of pointer events.
     */
    setCanTarget(canTarget: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its parent.
     * 
     * The child visibility can be set for widget before it is added
     * to a container with [method`Gtk`.Widget.set_parent], to avoid
     * mapping children unnecessary before immediately unmapping them.
     * However it will be reset to its default state of %TRUE when the
     * widget is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    setChildVisible(childVisible: boolean): void
    /**
     * Clear all style classes applied to `widget`
     * and replace them with `classes`.
     */
    setCssClasses(classes: string[]): void
    /**
     * Sets the cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * If the `cursor` is NULL, `widget` will use the cursor
     * inherited from the parent widget.
     */
    setCursor(cursor?: Gdk.Cursor | null): void
    /**
     * Sets a named cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * This is a utility function that creates a cursor via
     * [ctor`Gdk`.Cursor.new_from_name] and then sets it on `widget`
     * with [method`Gtk`.Widget.set_cursor]. See those functions for
     * details.
     * 
     * On top of that, this function allows `name` to be %NULL, which
     * will do the same as calling [method`Gtk`.Widget.set_cursor]
     * with a %NULL cursor.
     */
    setCursorFromName(name?: string | null): void
    /**
     * Sets the reading direction on a particular widget.
     * 
     * This direction controls the primary direction for widgets
     * containing text, and also the direction in which the children
     * of a container are packed. The ability to set the direction is
     * present in order so that correct localization into languages with
     * right-to-left reading directions can be done. Generally, applications
     * will let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitly
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by [func`Gtk`.Widget.set_default_direction] will be used.
     */
    setDirection(dir: Gtk.TextDirection): void
    /**
     * Set `child` as the current focus child of `widget`.
     * 
     * This function is only suitable for widget implementations.
     * If you want a certain widget to get the input focus, call
     * [method`Gtk`.Widget.grab_focus] on it.
     */
    setFocusChild(child?: Gtk.Widget | null): void
    /**
     * Sets whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * Making mouse clicks not grab focus is useful in places like
     * toolbars where you don’t want the keyboard focus removed from
     * the main area of the application.
     */
    setFocusOnClick(focusOnClick: boolean): void
    /**
     * Specifies whether `widget` can own the input focus.
     * 
     * Widget implementations should set `focusable` to %TRUE in
     * their init() function if they want to receive keyboard input.
     * 
     * Note that having `focusable` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and can-focus and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setFocusable(focusable: boolean): void
    /**
     * Sets the font map to use for Pango rendering.
     * 
     * The font map is the object that is used to look up fonts.
     * Setting a custom font map can be useful in special situations,
     * e.g. when you need to add application-specific fonts to the set
     * of available fonts.
     * 
     * When not set, the widget will inherit the font map from its parent.
     */
    setFontMap(fontMap?: Pango.FontMap | null): void
    /**
     * Sets the `cairo_font_options_t` used for Pango rendering
     * in this widget.
     * 
     * When not set, the default font options for the `GdkDisplay`
     * will be used.
     */
    setFontOptions(options?: cairo.FontOptions | null): void
    /**
     * Sets the horizontal alignment of `widget`.
     */
    setHalign(align: Gtk.Align): void
    /**
     * Sets the `has-tooltip` property on `widget` to `has_tooltip`.
     */
    setHasTooltip(hasTooltip: boolean): void
    /**
     * Sets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Call this function to set the expand flag if you would like your
     * widget to become larger horizontally when the window has extra
     * room.
     * 
     * By default, widgets automatically expand if any of their children
     * want to expand. (To see if a widget will automatically expand given
     * its current children and state, call [method`Gtk`.Widget.compute_expand].
     * A container can decide how the expandability of children affects the
     * expansion of the container by overriding the compute_expand virtual
     * method on `GtkWidget`.).
     * 
     * Setting hexpand explicitly with this function will override the
     * automatic expand behavior.
     * 
     * This function forces the widget to expand or not to expand,
     * regardless of children.  The override occurs because
     * [method`Gtk`.Widget.set_hexpand] sets the hexpand-set property (see
     * [method`Gtk`.Widget.set_hexpand_set]) which causes the widget’s hexpand
     * value to be used, rather than looking at children and widget state.
     */
    setHexpand(expand: boolean): void
    /**
     * Sets whether the hexpand flag will be used.
     * 
     * The [property`Gtk`.Widget:hexpand-set] property will be set
     * automatically when you call [method`Gtk`.Widget.set_hexpand]
     * to set hexpand, so the most likely reason to use this function
     * would be to unset an explicit expand flag.
     * 
     * If hexpand is set, then it overrides any computed
     * expand value based on child widgets. If hexpand is not
     * set, then the expand value depends on whether any
     * children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    setHexpandSet(set: boolean): void
    /**
     * Sets the layout manager delegate instance that provides an
     * implementation for measuring and allocating the children of `widget`.
     */
    setLayoutManager(layoutManager?: Gtk.LayoutManager | null): void
    /**
     * Sets the bottom margin of `widget`.
     */
    setMarginBottom(margin: number): void
    /**
     * Sets the end margin of `widget`.
     */
    setMarginEnd(margin: number): void
    /**
     * Sets the start margin of `widget`.
     */
    setMarginStart(margin: number): void
    /**
     * Sets the top margin of `widget`.
     */
    setMarginTop(margin: number): void
    /**
     * Sets a widgets name.
     * 
     * Setting a name allows you to refer to the widget from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for [class`Gtk`.StyleContext].
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     */
    setName(name: string): void
    /**
     * Request the `widget` to be rendered partially transparent.
     * 
     * An opacity of 0 is fully transparent and an opacity of 1
     * is fully opaque.
     * 
     * Opacity works on both toplevel widgets and child widgets, although
     * there are some limitations: For toplevel widgets, applying opacity
     * depends on the capabilities of the windowing system. On X11, this
     * has any effect only on X displays with a compositing manager,
     * see gdk_display_is_composited(). On Windows and Wayland it should
     * always work, although setting a window’s opacity after the window
     * has been shown may cause some flicker.
     * 
     * Note that the opacity is inherited through inclusion — if you set
     * a toplevel to be partially translucent, all of its content will
     * appear translucent, since it is ultimatively rendered on that
     * toplevel. The opacity value itself is not inherited by child
     * widgets (since that would make widgets deeper in the hierarchy
     * progressively more translucent). As a consequence, [class`Gtk`.Popover]s
     * and other [iface`Gtk`.Native] widgets with their own surface will use their
     * own opacity value, and thus by default appear non-translucent,
     * even if they are attached to a toplevel that is translucent.
     */
    setOpacity(opacity: number): void
    /**
     * Sets how `widget` treats content that is drawn outside the
     * widget's content area.
     * 
     * See the definition of [enum`Gtk`.Overflow] for details.
     * 
     * This setting is provided for widget implementations and
     * should not be used by application code.
     * 
     * The default value is %GTK_OVERFLOW_VISIBLE.
     */
    setOverflow(overflow: Gtk.Overflow): void
    /**
     * Sets `parent` as the parent widget of `widget`.
     * 
     * This takes care of details such as updating the state and style
     * of the child to reflect its new location and resizing the parent.
     * The opposite function is [method`Gtk`.Widget.unparent].
     * 
     * This function is useful only when implementing subclasses of
     * `GtkWidget`.
     */
    setParent(parent: Gtk.Widget): void
    /**
     * Specifies whether `widget` will be treated as the default
     * widget within its toplevel when it has the focus, even if
     * another widget is the default.
     */
    setReceivesDefault(receivesDefault: boolean): void
    /**
     * Sets the sensitivity of a widget.
     * 
     * A widget is sensitive if the user can interact with it.
     * Insensitive widgets are “grayed out” and the user can’t
     * interact with them. Insensitive widgets are known as
     * “inactive”, “disabled”, or “ghosted” in some other toolkits.
     */
    setSensitive(sensitive: boolean): void
    /**
     * Sets the minimum size of a widget.
     * 
     * That is, the widget’s size request will be at least `width`
     * by `height`. You can use this function to force a widget to
     * be larger than it normally would be.
     * 
     * In most cases, [method`Gtk`.Window.set_default_size] is a better
     * choice for toplevel windows than this function; setting the default
     * size will still allow users to shrink the window. Setting the size
     * request will force them to leave the window at least as large as
     * the size request.
     * 
     * Note the inherent danger of setting any fixed size - themes,
     * translations into other languages, different fonts, and user action
     * can all change the appropriate size for a given widget. So, it's
     * basically impossible to hardcode a size that will always be
     * correct.
     * 
     * The size request of a widget is the smallest size a widget can
     * accept while still functioning well and drawing itself correctly.
     * However in some strange cases a widget may be allocated less than
     * its requested size, and in many cases a widget may be allocated more
     * space than it requested.
     * 
     * If the size request in a given direction is -1 (unset), then
     * the “natural” size request of the widget will be used instead.
     * 
     * The size request set here does not include any margin from the
     * properties
     * [property`Gtk`.Widget:margin-start],
     * [property`Gtk`.Widget:margin-end],
     * [property`Gtk`.Widget:margin-top], and
     * [property`Gtk`.Widget:margin-bottom], but it does include pretty
     * much all other padding or border properties set by any subclass
     * of `GtkWidget`.
     */
    setSizeRequest(width: number, height: number): void
    /**
     * Turns on flag values in the current widget state.
     * 
     * Typical widget states are insensitive, prelighted, etc.
     * 
     * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
     * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set
     * the widget's direction, use [method`Gtk`.Widget.set_direction].
     * 
     * This function is for use in widget implementations.
     */
    setStateFlags(flags: Gtk.StateFlags, clear: boolean): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked
     * up with Pango markup.
     * 
     * This function will take care of setting the
     * [property`Gtk`.Widget:has-tooltip] as a side effect, and of the
     * default handler for the [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_markup].
     */
    setTooltipMarkup(markup?: string | null): void
    /**
     * Sets `text` as the contents of the tooltip.
     * 
     * If `text` contains any markup, it will be escaped.
     * 
     * This function will take care of setting
     * [property`Gtk`.Widget:has-tooltip] as a side effect,
     * and of the default handler for the
     * [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_text].
     */
    setTooltipText(text?: string | null): void
    /**
     * Sets the vertical alignment of `widget`.
     */
    setValign(align: Gtk.Align): void
    /**
     * Sets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.set_hexpand] for more detail.
     */
    setVexpand(expand: boolean): void
    /**
     * Sets whether the vexpand flag will be used.
     * 
     * See [method`Gtk`.Widget.set_hexpand_set] for more detail.
     */
    setVexpandSet(set: boolean): void
    /**
     * Sets the visibility state of `widget`.
     * 
     * Note that setting this to %TRUE doesn’t mean the widget is
     * actually viewable, see [method`Gtk`.Widget.get_visible].
     * 
     * This function simply calls [method`Gtk`.Widget.show] or
     * [method`Gtk`.Widget.hide] but is nicer to use when the
     * visibility of the widget depends on some condition.
     */
    setVisible(visible: boolean): void
    /**
     * Returns whether `widget` should contribute to
     * the measuring and allocation of its parent.
     * 
     * This is %FALSE for invisible children, but also
     * for children that have their own surface.
     */
    shouldLayout(): boolean
    /**
     * Flags a widget to be displayed.
     * 
     * Any widget that isn’t shown will not appear on the screen.
     * 
     * Remember that you have to show the containers containing a widget,
     * in addition to the widget itself, before it will appear onscreen.
     * 
     * When a toplevel container is shown, it is immediately realized and
     * mapped; other shown widgets are realized and mapped when their
     * toplevel container is realized and mapped.
     */
    show(): void
    /**
     * Allocates widget with a transformation that translates
     * the origin to the position in `allocation`.
     * 
     * This is a simple form of [method`Gtk`.Widget.allocate].
     */
    sizeAllocate(allocation: Gtk.Allocation, baseline: number): void
    /**
     * Snapshot the a child of `widget`.
     * 
     * When a widget receives a call to the snapshot function,
     * it must send synthetic [vfunc`Gtk`.Widget.snapshot] calls
     * to all children. This function provides a convenient way
     * of doing this. A widget, when it receives a call to its
     * [vfunc`Gtk`.Widget.snapshot] function, calls
     * gtk_widget_snapshot_child() once for each child, passing in
     * the `snapshot` the widget received.
     * 
     * gtk_widget_snapshot_child() takes care of translating the origin of
     * `snapshot,` and deciding whether the child needs to be snapshot.
     * 
     * This function does nothing for children that implement `GtkNative`.
     */
    snapshotChild(child: Gtk.Widget, snapshot: Gtk.Snapshot): void
    /**
     * Translate coordinates relative to `src_widget’`s allocation
     * to coordinates relative to `dest_widget’`s allocations.
     * 
     * In order to perform this operation, both widget must share
     * a common ancestor.
     */
    translateCoordinates(destWidget: Gtk.Widget, srcX: number, srcY: number): [ /* returnType */ boolean, /* destX */ number | null, /* destY */ number | null ]
    /**
     * Triggers a tooltip query on the display where the toplevel
     * of `widget` is located.
     */
    triggerTooltipQuery(): void
    /**
     * Causes a widget to be unmapped if it’s currently mapped.
     * 
     * This function is only for use in widget implementations.
     */
    unmap(): void
    /**
     * Dissociate `widget` from its parent.
     * 
     * This function is only for use in widget implementations,
     * typically in dispose.
     */
    unparent(): void
    /**
     * Causes a widget to be unrealized (frees all GDK resources
     * associated with the widget).
     * 
     * This function is only useful in widget implementations.
     */
    unrealize(): void
    /**
     * Turns off flag values for the current widget state.
     * 
     * See [method`Gtk`.Widget.set_state_flags].
     * 
     * This function is for use in widget implementations.
     */
    unsetStateFlags(flags: Gtk.StateFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Methods of Gtk-4.0.Gtk.Accessible */
    /**
     * Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
     */
    getAccessibleRole(): Gtk.AccessibleRole
    /**
     * Resets the accessible `property` to its default value.
     */
    resetProperty(property: Gtk.AccessibleProperty): void
    /**
     * Resets the accessible `relation` to its default value.
     */
    resetRelation(relation: Gtk.AccessibleRelation): void
    /**
     * Resets the accessible `state` to its default value.
     */
    resetState(state: Gtk.AccessibleState): void
    /**
     * Updates an array of accessible properties.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * property change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateProperty(properties: Gtk.AccessibleProperty[], values: any[]): void
    /**
     * Updates an array of accessible relations.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * relation change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateRelation(relations: Gtk.AccessibleRelation[], values: any[]): void
    /**
     * Updates an array of accessible states.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * state change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateState(states: Gtk.AccessibleState[], values: any[]): void
    /* Methods of Gtk-4.0.Gtk.Buildable */
    /**
     * Gets the ID of the `buildable` object.
     * 
     * `GtkBuilder` sets the name based on the ID attribute
     * of the <object> tag used to construct the `buildable`.
     */
    getBuildableId(): string | null
    /* Signals of Gtk-4.0.Gtk.Widget */
    /**
     * Signals that all holders of a reference to the widget should release
     * the reference that they hold.
     * 
     * May result in finalization of the widget if all references are released.
     * 
     * This signal is not suitable for saving widget state.
     */
    connect(sigName: "destroy", callback: (() => void)): number
    on(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "destroy", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "destroy"): void
    /**
     * Emitted when the text direction of a widget changes.
     */
    connect(sigName: "direction-changed", callback: ((previousDirection: Gtk.TextDirection) => void)): number
    on(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void): NodeJS.EventEmitter
    emit(sigName: "direction-changed", previousDirection: Gtk.TextDirection): void
    /**
     * Emitted when `widget` is hidden.
     */
    connect(sigName: "hide", callback: (() => void)): number
    on(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "hide", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "hide"): void
    /**
     * Emitted if keyboard navigation fails.
     * 
     * See [method`Gtk`.Widget.keynav_failed] for details.
     */
    connect(sigName: "keynav-failed", callback: ((direction: Gtk.DirectionType) => boolean)): number
    on(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "keynav-failed", direction: Gtk.DirectionType): void
    /**
     * Emitted when `widget` is going to be mapped.
     * 
     * A widget is mapped when the widget is visible (which is controlled with
     * [property`Gtk`.Widget:visible]) and all its parents up to the toplevel widget
     * are also visible.
     * 
     * The ::map signal can be used to determine whether a widget will be drawn,
     * for instance it can resume an animation that was stopped during the
     * emission of [signal`Gtk`.Widget::unmap].
     */
    connect(sigName: "map", callback: (() => void)): number
    on(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "map", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "map"): void
    /**
     * Emitted when a widget is activated via a mnemonic.
     * 
     * The default handler for this signal activates `widget` if `group_cycling`
     * is %FALSE, or just makes `widget` grab focus if `group_cycling` is %TRUE.
     */
    connect(sigName: "mnemonic-activate", callback: ((groupCycling: boolean) => boolean)): number
    on(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "mnemonic-activate", groupCycling: boolean): void
    /**
     * Emitted when the focus is moved.
     */
    connect(sigName: "move-focus", callback: ((direction: Gtk.DirectionType) => void)): number
    on(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "move-focus", direction: Gtk.DirectionType): void
    /**
     * Emitted when the widgets tooltip is about to be shown.
     * 
     * This happens when the [property`Gtk`.Widget:has-tooltip] property
     * is %TRUE and the hover timeout has expired with the cursor hovering
     * "above" `widget;` or emitted when `widget` got focus in keyboard mode.
     * 
     * Using the given coordinates, the signal handler should determine
     * whether a tooltip should be shown for `widget`. If this is the case
     * %TRUE should be returned, %FALSE otherwise.  Note that if
     * `keyboard_mode` is %TRUE, the values of `x` and `y` are undefined and
     * should not be used.
     * 
     * The signal handler is free to manipulate `tooltip` with the therefore
     * destined function calls.
     */
    connect(sigName: "query-tooltip", callback: ((x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => boolean)): number
    on(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void): NodeJS.EventEmitter
    emit(sigName: "query-tooltip", x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip): void
    /**
     * Emitted when `widget` is associated with a `GdkSurface`.
     * 
     * This means that [method`Gtk`.Widget.realize] has been called
     * or the widget has been mapped (that is, it is going to be drawn).
     */
    connect(sigName: "realize", callback: (() => void)): number
    on(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "realize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "realize"): void
    /**
     * Emitted when `widget` is shown.
     */
    connect(sigName: "show", callback: (() => void)): number
    on(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "show"): void
    /**
     * Emitted when the widget state changes.
     * 
     * See [method`Gtk`.Widget.get_state_flags].
     */
    connect(sigName: "state-flags-changed", callback: ((flags: Gtk.StateFlags) => void)): number
    on(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void): NodeJS.EventEmitter
    emit(sigName: "state-flags-changed", flags: Gtk.StateFlags): void
    /**
     * Emitted when `widget` is going to be unmapped.
     * 
     * A widget is unmapped when either it or any of its parents up to the
     * toplevel widget have been set as hidden.
     * 
     * As ::unmap indicates that a widget will not be shown any longer,
     * it can be used to, for example, stop an animation on the widget.
     */
    connect(sigName: "unmap", callback: (() => void)): number
    on(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unmap", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unmap"): void
    /**
     * Emitted when the `GdkSurface` associated with `widget` is destroyed.
     * 
     * This means that [method`Gtk`.Widget.unrealize] has been called
     * or the widget has been unmapped (that is, it is going to be hidden).
     */
    connect(sigName: "unrealize", callback: (() => void)): number
    on(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unrealize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::paintable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::paintable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::widget", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::widget", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::widget", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::widget", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::widget", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CompletionCell_ConstructProps)
    _init (config?: CompletionCell_ConstructProps): void
    static $gtype: GObject.Type
}
interface CompletionContext_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.CompletionContext */
    /**
     * The "completion" is the #GtkSourceCompletion that was used to create the context.
     */
    completion?: Completion
}
class CompletionContext {
    /* Properties of GtkSource-5.GtkSource.CompletionContext */
    /**
     * The "busy" property is %TRUE while the completion context is
     * populating completion proposals.
     */
    readonly busy: boolean
    /**
     * The "empty" property is %TRUE when there are no results.
     * 
     * It will be notified when the first result is added or the last
     * result is removed.
     */
    readonly empty: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.CompletionContext */
    /**
     * Gets the mode for which the context was activated.
     */
    getActivation(): CompletionActivation
    /**
     * Gets the bounds for the completion, which is the beginning of the
     * current word (taking break characters into account) to the current
     * insertion cursor.
     * 
     * If `begin` is non-%NULL, it will be set to the start position of the
     * current word being completed.
     * 
     * If `end` is non-%NULL, it will be set to the insertion cursor for the
     * current word being completed.
     */
    getBounds(): [ /* returnType */ boolean, /* begin */ Gtk.TextIter | null, /* end */ Gtk.TextIter | null ]
    /**
     * Gets the underlying buffer used by the context.
     * 
     * This is a convenience function to get the buffer via the #GtkSourceCompletion
     * property.
     */
    getBuffer(): Buffer | null
    /**
     * Gets the "busy" property. This is set to %TRUE while the completion
     * context is actively fetching proposals from registered
     * #GtkSourceCompletionProvider's.
     */
    getBusy(): boolean
    /**
     * Gets the #GtkSourceCompletion that created the context.
     */
    getCompletion(): Completion | null
    /**
     * Checks if any proposals have been provided to the context.
     * 
     * Out of convenience, this function will return %TRUE if `self` is %NULL.
     */
    getEmpty(): boolean
    /**
     * Gets the language of the underlying buffer, if any.
     */
    getLanguage(): Language | null
    /**
     * Gets the text view for the context.
     */
    getView(): View | null
    /**
     * Gets the word that is being completed up to the position of the insert mark.
     */
    getWord(): string
    /**
     * This function allows providers to update their results for a context
     * outside of a call to [method`CompletionProvider`.populate_async].
     * 
     * This can be used to immediately return results for a provider while it does
     * additional asynchronous work. Doing so will allow the completions to
     * update while the operation is in progress.
     */
    setProposalsForProvider(provider: CompletionProvider, results?: Gio.ListModel | null): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Methods of Gio-2.0.Gio.ListModel */
    /**
     * Gets the type of the items in `list`.
     * 
     * All items returned from g_list_model_get_item() are of the type
     * returned by this function, or a subtype, or if the type is an
     * interface, they are an implementation of that interface.
     * 
     * The item type of a #GListModel can not change during the life of the
     * model.
     */
    getItemType(): GObject.Type
    /**
     * Gets the number of items in `list`.
     * 
     * Depending on the model implementation, calling this function may be
     * less efficient than iterating the list with increasing values for
     * `position` until g_list_model_get_item() returns %NULL.
     */
    getNItems(): number
    /**
     * Get the item at `position`.
     * 
     * If `position` is greater than the number of items in `list,` %NULL is
     * returned.
     * 
     * %NULL is never returned for an index that is smaller than the length
     * of the list.
     * 
     * This function is meant to be used by language bindings in place
     * of g_list_model_get_item().
     * 
     * See also: g_list_model_get_n_items()
     */
    getItem(position: number): GObject.Object | null
    /**
     * Emits the #GListModel::items-changed signal on `list`.
     * 
     * This function should only be called by classes implementing
     * #GListModel. It has to be called after the internal representation
     * of `list` has been updated, because handlers connected to this signal
     * might query the new state of the list.
     * 
     * Implementations must only make changes to the model (as visible to
     * its consumer) in places that will not cause problems for that
     * consumer.  For models that are driven directly by a write API (such
     * as #GListStore), changes can be reported in response to uses of that
     * API.  For models that represent remote data, changes should only be
     * made from a fresh mainloop dispatch.  It is particularly not
     * permitted to make changes in response to a call to the #GListModel
     * consumer API.
     * 
     * Stated another way: in general, it is assumed that code making a
     * series of accesses to the model via the API, without returning to the
     * mainloop, and without calling other code, will continue to view the
     * same contents of the model.
     */
    itemsChanged(position: number, removed: number, added: number): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    /* Signals of Gio-2.0.Gio.ListModel */
    /**
     * This signal is emitted whenever items were added to or removed
     * from `list`. At `position,` `removed` items were removed and `added`
     * items were added in their place.
     * 
     * Note: If `removed != added`, the positions of all later items
     * in the model change.
     */
    connect(sigName: "items-changed", callback: ((position: number, removed: number, added: number) => void)): number
    on(sigName: "items-changed", callback: (position: number, removed: number, added: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "items-changed", callback: (position: number, removed: number, added: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "items-changed", callback: (position: number, removed: number, added: number) => void): NodeJS.EventEmitter
    emit(sigName: "items-changed", position: number, removed: number, added: number): void
    connect(sigName: "notify::busy", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::busy", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::busy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::busy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::busy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::empty", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::empty", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::empty", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::empty", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::empty", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CompletionContext_ConstructProps)
    _init (config?: CompletionContext_ConstructProps): void
    static $gtype: GObject.Type
}
interface CompletionSnippets_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.CompletionSnippets */
    priority?: number
    title?: string
}
class CompletionSnippets {
    /* Properties of GtkSource-5.GtkSource.CompletionSnippets */
    priority: number
    title: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Methods of GtkSource-5.GtkSource.CompletionProvider */
    /**
     * This function requests `proposal` to be activated by the
     * #GtkSourceCompletionProvider.
     * 
     * What the provider does to activate the proposal is specific to that
     * provider. Many providers may choose to insert a #GtkSourceSnippet with
     * edit points the user may cycle through.
     * 
     * See also: [class`Snippet]`, [class`SnippetChunk]`, [method`View`.push_snippet]
     */
    activate(context: CompletionContext, proposal: CompletionProposal): void
    /**
     * This function requests that the #GtkSourceCompletionProvider prepares
     * `cell` to display the contents of `proposal`.
     * 
     * Based on `cells` column type, you may want to display different information.
     * 
     * This allows for columns of information among completion proposals
     * resulting in better alignment of similar content (icons, return types,
     * method names, and parameter lists).
     */
    display(context: CompletionContext, proposal: CompletionProposal, cell: CompletionCell): void
    /**
     * This function should return the priority of `self` in `context`.
     * 
     * The priority is used to sort groups of completion proposals by
     * provider so that higher priority providers results are shown
     * above lower priority providers.
     * 
     * Lower value indicates higher priority.
     */
    getPriority(context: CompletionContext): number
    /**
     * Gets the title of the completion provider, if any.
     * 
     * Currently, titles are not displayed in the completion results, but may be
     * at some point in the future when non-%NULL.
     */
    getTitle(): string | null
    /**
     * This function is used to determine of a character inserted into the text
     * editor should cause a new completion request to be triggered.
     * 
     * An example would be period '.' which might indicate that the user wants
     * to complete method or field names of an object.
     */
    isTrigger(iter: Gtk.TextIter, ch: number): boolean
    /**
     * This function is used to determine if a key typed by the user should
     * activate `proposal` (resulting in committing the text to the editor).
     * 
     * This is useful when using languages where convention may lead to less
     * typing by the user. One example may be the use of "." or "-" to expand
     * a field access in the C programming language.
     */
    keyActivates(context: CompletionContext, proposal: CompletionProposal, keyval: number, state: Gdk.ModifierType): boolean
    /**
     * Providers should return a list of alternates to `proposal` or %NULL if
     * there are no alternates available.
     * 
     * This can be used by the completion view to allow the user to move laterally
     * through similar proposals, such as overrides of methods by the same name.
     */
    listAlternates(context: CompletionContext, proposal: CompletionProposal): CompletionProposal[] | null
    /**
     * Asynchronously requests that the provider populates the completion
     * results for `context`.
     * 
     * For providers that would like to populate a [iface`Gio`.ListModel] while those
     * results are displayed to the user,
     * [method`CompletionContext`.set_proposals_for_provider] may be used
     * to reduce latency until the user sees results.
     */
    populateAsync(context: CompletionContext, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Completes an asynchronous operation to populate a completion provider.
     */
    populateFinish(result: Gio.AsyncResult): Gio.ListModel
    /**
     * This function can be used to filter results previously provided to
     * the [class`CompletionContext]` by the #GtkSourceCompletionProvider.
     * 
     * This can happen as the user types additional text onto the word so
     * that previously matched items may be removed from the list instead of
     * generating new [iface`Gio`.ListModel] of results.
     */
    refilter(context: CompletionContext, model: Gio.ListModel): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::priority", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CompletionSnippets_ConstructProps)
    _init (config?: CompletionSnippets_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): CompletionSnippets
    static $gtype: GObject.Type
}
interface CompletionWords_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.CompletionWords */
    minimumWordSize?: number
    priority?: number
    proposalsBatchSize?: number
    scanBatchSize?: number
    title?: string
}
class CompletionWords {
    /* Properties of GtkSource-5.GtkSource.CompletionWords */
    minimumWordSize: number
    priority: number
    proposalsBatchSize: number
    scanBatchSize: number
    title: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.CompletionWords */
    /**
     * Registers `buffer` in the `words` provider.
     */
    register(buffer: Gtk.TextBuffer): void
    /**
     * Unregisters `buffer` from the `words` provider.
     */
    unregister(buffer: Gtk.TextBuffer): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Methods of GtkSource-5.GtkSource.CompletionProvider */
    /**
     * This function requests `proposal` to be activated by the
     * #GtkSourceCompletionProvider.
     * 
     * What the provider does to activate the proposal is specific to that
     * provider. Many providers may choose to insert a #GtkSourceSnippet with
     * edit points the user may cycle through.
     * 
     * See also: [class`Snippet]`, [class`SnippetChunk]`, [method`View`.push_snippet]
     */
    activate(context: CompletionContext, proposal: CompletionProposal): void
    /**
     * This function requests that the #GtkSourceCompletionProvider prepares
     * `cell` to display the contents of `proposal`.
     * 
     * Based on `cells` column type, you may want to display different information.
     * 
     * This allows for columns of information among completion proposals
     * resulting in better alignment of similar content (icons, return types,
     * method names, and parameter lists).
     */
    display(context: CompletionContext, proposal: CompletionProposal, cell: CompletionCell): void
    /**
     * This function should return the priority of `self` in `context`.
     * 
     * The priority is used to sort groups of completion proposals by
     * provider so that higher priority providers results are shown
     * above lower priority providers.
     * 
     * Lower value indicates higher priority.
     */
    getPriority(context: CompletionContext): number
    /**
     * Gets the title of the completion provider, if any.
     * 
     * Currently, titles are not displayed in the completion results, but may be
     * at some point in the future when non-%NULL.
     */
    getTitle(): string | null
    /**
     * This function is used to determine of a character inserted into the text
     * editor should cause a new completion request to be triggered.
     * 
     * An example would be period '.' which might indicate that the user wants
     * to complete method or field names of an object.
     */
    isTrigger(iter: Gtk.TextIter, ch: number): boolean
    /**
     * This function is used to determine if a key typed by the user should
     * activate `proposal` (resulting in committing the text to the editor).
     * 
     * This is useful when using languages where convention may lead to less
     * typing by the user. One example may be the use of "." or "-" to expand
     * a field access in the C programming language.
     */
    keyActivates(context: CompletionContext, proposal: CompletionProposal, keyval: number, state: Gdk.ModifierType): boolean
    /**
     * Providers should return a list of alternates to `proposal` or %NULL if
     * there are no alternates available.
     * 
     * This can be used by the completion view to allow the user to move laterally
     * through similar proposals, such as overrides of methods by the same name.
     */
    listAlternates(context: CompletionContext, proposal: CompletionProposal): CompletionProposal[] | null
    /**
     * Asynchronously requests that the provider populates the completion
     * results for `context`.
     * 
     * For providers that would like to populate a [iface`Gio`.ListModel] while those
     * results are displayed to the user,
     * [method`CompletionContext`.set_proposals_for_provider] may be used
     * to reduce latency until the user sees results.
     */
    populateAsync(context: CompletionContext, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Completes an asynchronous operation to populate a completion provider.
     */
    populateFinish(result: Gio.AsyncResult): Gio.ListModel
    /**
     * This function can be used to filter results previously provided to
     * the [class`CompletionContext]` by the #GtkSourceCompletionProvider.
     * 
     * This can happen as the user types additional text onto the word so
     * that previously matched items may be removed from the list instead of
     * generating new [iface`Gio`.ListModel] of results.
     */
    refilter(context: CompletionContext, model: Gio.ListModel): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::minimum-word-size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minimum-word-size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::minimum-word-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::minimum-word-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::minimum-word-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::priority", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::proposals-batch-size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::proposals-batch-size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::proposals-batch-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::proposals-batch-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::proposals-batch-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scan-batch-size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scan-batch-size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scan-batch-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scan-batch-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scan-batch-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: CompletionWords_ConstructProps)
    _init (config?: CompletionWords_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(title?: string | null): CompletionWords
    static $gtype: GObject.Type
}
interface File_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.File */
    /**
     * The location.
     */
    location?: Gio.File
}
class File {
    /* Properties of GtkSource-5.GtkSource.File */
    /**
     * The compression type.
     */
    readonly compressionType: CompressionType
    /**
     * The character encoding, initially %NULL. After a successful file
     * loading or saving operation, the encoding is non-%NULL.
     */
    readonly encoding: Encoding
    /**
     * The location.
     */
    location: Gio.File
    /**
     * The line ending type.
     */
    readonly newlineType: NewlineType
    /**
     * Whether the file is read-only or not. The value of this property is
     * not updated automatically (there is no file monitors).
     */
    readonly readOnly: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.File */
    /**
     * Checks synchronously the file on disk, to know whether the file is externally
     * modified, or has been deleted, and whether the file is read-only.
     * 
     * #GtkSourceFile doesn't create a [class`Gio`.FileMonitor] to track those properties, so
     * this function needs to be called instead. Creating lots of [class`Gio`.FileMonitor]'s
     * would take lots of resources.
     * 
     * Since this function is synchronous, it is advised to call it only on local
     * files. See [method`File`.is_local].
     */
    checkFileOnDisk(): void
    getCompressionType(): CompressionType
    /**
     * The encoding is initially %NULL. After a successful file loading or saving
     * operation, the encoding is non-%NULL.
     */
    getEncoding(): Encoding
    getLocation(): Gio.File
    getNewlineType(): NewlineType
    /**
     * Returns whether the file has been deleted. If the
     * [property`File:`location] is %NULL, returns %FALSE.
     * 
     * To have an up-to-date value, you must first call
     * [method`File`.check_file_on_disk].
     */
    isDeleted(): boolean
    /**
     * Returns whether the file is externally modified. If the
     * [property`File:`location] is %NULL, returns %FALSE.
     * 
     * To have an up-to-date value, you must first call
     * [method`File`.check_file_on_disk].
     */
    isExternallyModified(): boolean
    /**
     * Returns whether the file is local. If the [property`File:`location] is %NULL,
     * returns %FALSE.
     */
    isLocal(): boolean
    /**
     * Returns whether the file is read-only. If the
     * [property`File:`location] is %NULL, returns %FALSE.
     * 
     * To have an up-to-date value, you must first call
     * [method`File`.check_file_on_disk].
     */
    isReadonly(): boolean
    /**
     * Sets the location.
     */
    setLocation(location?: Gio.File | null): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::compression-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compression-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compression-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compression-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compression-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::encoding", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encoding", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::location", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::location", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::newline-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::newline-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::newline-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::newline-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::newline-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: File_ConstructProps)
    _init (config?: File_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): File
    static $gtype: GObject.Type
}
interface FileLoader_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.FileLoader */
    /**
     * The #GtkSourceBuffer to load the contents into. The
     * #GtkSourceFileLoader object has a weak reference to the buffer.
     */
    buffer?: Buffer
    /**
     * The #GtkSourceFile. The #GtkSourceFileLoader object has a weak
     * reference to the file.
     */
    file?: File
    /**
     * The #GInputStream to load. Useful for reading stdin. If this property
     * is set, the #GtkSourceFileLoader:location property is ignored.
     */
    inputStream?: Gio.InputStream
    /**
     * The #GFile to load. If the #GtkSourceFileLoader:input-stream is
     * %NULL, by default the location is taken from the #GtkSourceFile at
     * construction time.
     */
    location?: Gio.File
}
class FileLoader {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.FileLoader */
    getBuffer(): Buffer
    getCompressionType(): CompressionType
    getEncoding(): Encoding
    getFile(): File
    getInputStream(): Gio.InputStream | null
    getLocation(): Gio.File | null
    getNewlineType(): NewlineType
    /**
     * Loads asynchronously the file or input stream contents into the [class`Buffer]`.
     * 
     * See the [iface`Gio`.AsyncResult] documentation to know how to use this
     * function.
     */
    loadAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, progressCallback?: Gio.FileProgressCallback | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes a file loading started with [method`FileLoader`.load_async].
     * 
     * If the contents has been loaded, the following [class`File]` properties will
     * be updated: the location, the encoding, the newline type and the compression
     * type.
     */
    loadFinish(result: Gio.AsyncResult): boolean
    /**
     * Sets the candidate encodings for the file loading.
     * 
     * The encodings are tried in the same order as the list.
     * 
     * For convenience, `candidate_encodings` can contain duplicates. Only the first
     * occurrence of a duplicated encoding is kept in the list.
     * 
     * By default the candidate encodings are (in that order in the list):
     * 
     * 1. If set, the [class`File]`'s encoding as returned by [method`File`.get_encoding].
     * 2. The default candidates as returned by [func`Encoding`.get_default_candidates].
     */
    setCandidateEncodings(candidateEncodings: Encoding[]): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: FileLoader_ConstructProps)
    _init (config?: FileLoader_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(buffer: Buffer, file: File): FileLoader
    static newFromStream(buffer: Buffer, file: File, stream: Gio.InputStream): FileLoader
    static $gtype: GObject.Type
}
interface FileSaver_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.FileSaver */
    /**
     * The #GtkSourceBuffer to save. The #GtkSourceFileSaver object has a
     * weak reference to the buffer.
     */
    buffer?: Buffer
    /**
     * The compression type.
     */
    compressionType?: CompressionType
    /**
     * The file's encoding.
     */
    encoding?: Encoding
    /**
     * The #GtkSourceFile. The #GtkSourceFileSaver object has a weak
     * reference to the file.
     */
    file?: File
    /**
     * File saving flags.
     */
    flags?: FileSaverFlags
    /**
     * The #GFile where to save the buffer. By default the location is taken
     * from the #GtkSourceFile at construction time.
     */
    location?: Gio.File
    /**
     * The newline type.
     */
    newlineType?: NewlineType
}
class FileSaver {
    /* Properties of GtkSource-5.GtkSource.FileSaver */
    /**
     * The compression type.
     */
    compressionType: CompressionType
    /**
     * The file's encoding.
     */
    encoding: Encoding
    /**
     * File saving flags.
     */
    flags: FileSaverFlags
    /**
     * The newline type.
     */
    newlineType: NewlineType
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.FileSaver */
    getBuffer(): Buffer
    getCompressionType(): CompressionType
    getEncoding(): Encoding
    getFile(): File
    getFlags(): FileSaverFlags
    getLocation(): Gio.File
    getNewlineType(): NewlineType
    /**
     * Saves asynchronously the buffer into the file.
     * 
     * See the [iface`Gio`.AsyncResult] documentation to know how to use this function.
     */
    saveAsync(ioPriority: number, cancellable?: Gio.Cancellable | null, progressCallback?: Gio.FileProgressCallback | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes a file saving started with [method`FileSaver`.save_async].
     * 
     * If the file has been saved successfully, the following [class`File]`
     * properties will be updated: the location, the encoding, the newline type and
     * the compression type.
     * 
     * Since the 3.20 version, [method`Gtk`.TextBuffer.set_modified] is called with %FALSE
     * if the file has been saved successfully.
     */
    saveFinish(result: Gio.AsyncResult): boolean
    /**
     * Sets the compression type. By default the compression type is taken from the
     * #GtkSourceFile.
     */
    setCompressionType(compressionType: CompressionType): void
    /**
     * Sets the encoding. If `encoding` is %NULL, the UTF-8 encoding will be set.
     * 
     * By default the encoding is taken from the #GtkSourceFile.
     */
    setEncoding(encoding?: Encoding | null): void
    setFlags(flags: FileSaverFlags): void
    /**
     * Sets the newline type. By default the newline type is taken from the
     * #GtkSourceFile.
     */
    setNewlineType(newlineType: NewlineType): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::compression-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::compression-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::compression-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::compression-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::compression-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::encoding", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encoding", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::newline-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::newline-type", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::newline-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::newline-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::newline-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: FileSaver_ConstructProps)
    _init (config?: FileSaver_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(buffer: Buffer, file: File): FileSaver
    static newWithTarget(buffer: Buffer, file: File, targetLocation: Gio.File): FileSaver
    static $gtype: GObject.Type
}
interface Gutter_ConstructProps extends Gtk.Widget_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.Gutter */
    /**
     * The #GtkSourceView of the gutter.
     */
    view?: View
    /**
     * The text window type on which the window is placed.
     */
    windowType?: Gtk.TextWindowType
    /* Constructor properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole?: Gtk.AccessibleRole
}
class Gutter {
    /* Properties of Gtk-4.0.Gtk.Widget */
    /**
     * Whether the widget or any of its descendents can accept
     * the input focus.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    canFocus: boolean
    /**
     * Whether the widget can receive pointer events.
     */
    canTarget: boolean
    /**
     * A list of css classes applied to this widget.
     */
    cssClasses: string[]
    /**
     * The cursor used by `widget`.
     */
    cursor: Gdk.Cursor
    /**
     * Whether the widget should grab focus when it is clicked with the mouse.
     * 
     * This property is only relevant for widgets that can take focus.
     */
    focusOnClick: boolean
    /**
     * Whether this widget itself will accept the input focus.
     */
    focusable: boolean
    /**
     * How to distribute horizontal space if widget gets extra space.
     */
    halign: Gtk.Align
    /**
     * Whether the widget is the default widget.
     */
    readonly hasDefault: boolean
    /**
     * Whether the widget has the input focus.
     */
    readonly hasFocus: boolean
    /**
     * Enables or disables the emission of the ::query-tooltip signal on `widget`.
     * 
     * A value of %TRUE indicates that `widget` can have a tooltip, in this case
     * the widget will be queried using [signal`Gtk`.Widget::query-tooltip] to
     * determine whether it will provide a tooltip or not.
     */
    hasTooltip: boolean
    /**
     * Override for height request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    heightRequest: number
    /**
     * Whether to expand horizontally.
     */
    hexpand: boolean
    /**
     * Whether to use the `hexpand` property.
     */
    hexpandSet: boolean
    /**
     * The `GtkLayoutManager` instance to use to compute the preferred size
     * of the widget, and allocate its children.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    layoutManager: Gtk.LayoutManager
    /**
     * Margin on bottom side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginBottom: number
    /**
     * Margin on end of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginEnd: number
    /**
     * Margin on start of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginStart: number
    /**
     * Margin on top side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginTop: number
    /**
     * The name of the widget.
     */
    name: string
    /**
     * The requested opacity of the widget.
     */
    opacity: number
    /**
     * How content outside the widget's content area is treated.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    overflow: Gtk.Overflow
    /**
     * The parent widget of this widget.
     */
    readonly parent: Gtk.Widget
    /**
     * Whether the widget will receive the default action when it is focused.
     */
    receivesDefault: boolean
    /**
     * The `GtkRoot` widget of the widget tree containing this widget.
     * 
     * This will be %NULL if the widget is not contained in a root widget.
     */
    readonly root: Gtk.Root
    /**
     * The scale factor of the widget.
     */
    readonly scaleFactor: number
    /**
     * Whether the widget responds to input.
     */
    sensitive: boolean
    /**
     * Sets the text of tooltip to be the given string, which is marked up
     * with Pango markup.
     * 
     * Also see [method`Gtk`.Tooltip.set_markup].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipMarkup: string
    /**
     * Sets the text of tooltip to be the given string.
     * 
     * Also see [method`Gtk`.Tooltip.set_text].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipText: string
    /**
     * How to distribute vertical space if widget gets extra space.
     */
    valign: Gtk.Align
    /**
     * Whether to expand vertically.
     */
    vexpand: boolean
    /**
     * Whether to use the `vexpand` property.
     */
    vexpandSet: boolean
    /**
     * Whether the widget is visible.
     */
    visible: boolean
    /**
     * Override for width request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    widthRequest: number
    /* Properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole: Gtk.AccessibleRole
    /* Fields of Gtk-4.0.Gtk.Widget */
    readonly parentInstance: GObject.InitiallyUnowned
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.Gutter */
    getView(): View
    /**
     * Insert `renderer` into the gutter. If `renderer` is yet unowned then gutter
     * claims its ownership. Otherwise just increases renderer's reference count.
     * `renderer` cannot be already inserted to another gutter.
     */
    insert(renderer: GutterRenderer, position: number): boolean
    remove(renderer: GutterRenderer): void
    /**
     * Reorders `renderer` in `gutter` to new `position`.
     */
    reorder(renderer: GutterRenderer, position: number): void
    /* Methods of Gtk-4.0.Gtk.Widget */
    /**
     * Enable or disable an action installed with
     * gtk_widget_class_install_action().
     */
    actionSetEnabled(actionName: string, enabled: boolean): void
    /**
     * For widgets that can be “activated” (buttons, menu items, etc.),
     * this function activates them.
     * 
     * The activation will emit the signal set using
     * [method`Gtk`.WidgetClass.set_activate_signal] during class initialization.
     * 
     * Activation is what happens when you press <kbd>Enter</kbd>
     * on a widget during key navigation.
     * 
     * If you wish to handle the activation keybinding yourself, it is
     * recommended to use [method`Gtk`.WidgetClass.add_shortcut] with an action
     * created with [ctor`Gtk`.SignalAction.new].
     * 
     * If `widget` isn't activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Looks up the action in the action groups associated with
     * `widget` and its ancestors, and activates it.
     * 
     * If the action is in an action group added with
     * [method`Gtk`.Widget.insert_action_group], the `name` is expected
     * to be prefixed with the prefix that was used when the group was
     * inserted.
     * 
     * The arguments must match the actions expected parameter type,
     * as returned by `g_action_get_parameter_type()`.
     */
    activateAction(name: string, args?: GLib.Variant | null): boolean
    /**
     * Activates the `default.activate` action from `widget`.
     */
    activateDefault(): void
    /**
     * Adds `controller` to `widget` so that it will receive events.
     * 
     * You will usually want to call this function right after
     * creating any kind of [class`Gtk`.EventController].
     */
    addController(controller: Gtk.EventController): void
    /**
     * Adds a style class to `widget`.
     * 
     * After calling this function, the widgets style will match
     * for `css_class,` according to CSS matching rules.
     * 
     * Use [method`Gtk`.Widget.remove_css_class] to remove the
     * style again.
     */
    addCssClass(cssClass: string): void
    /**
     * Adds a widget to the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. Note the
     * list of mnemonic labels for the widget is cleared when the
     * widget is destroyed, so the caller must make sure to update
     * its internal state at this point as well.
     */
    addMnemonicLabel(label: Gtk.Widget): void
    /**
     * Queues an animation frame update and adds a callback to be called
     * before each frame.
     * 
     * Until the tick callback is removed, it will be called frequently
     * (usually at the frame rate of the output device or as quickly as
     * the application can be repainted, whichever is slower). For this
     * reason, is most suitable for handling graphics that change every
     * frame or every few frames. The tick callback does not automatically
     * imply a relayout or repaint. If you want a repaint or relayout, and
     * aren’t changing widget properties that would trigger that (for example,
     * changing the text of a `GtkLabel`), then you will have to call
     * [method`Gtk`.Widget.queue_resize] or [method`Gtk`.Widget.queue_draw]
     * yourself.
     * 
     * [method`Gdk`.FrameClock.get_frame_time] should generally be used
     * for timing continuous animations and
     * [method`Gdk`.FrameTimings.get_predicted_presentation_time] if you are
     * trying to display isolated frames at particular times.
     * 
     * This is a more convenient alternative to connecting directly to the
     * [signal`Gdk`.FrameClock::update] signal of `GdkFrameClock`, since you
     * don't have to worry about when a `GdkFrameClock` is assigned to a widget.
     */
    addTickCallback(callback: Gtk.TickCallback): number
    /**
     * This function is only used by `GtkWidget` subclasses, to
     * assign a size, position and (optionally) baseline to their
     * child widgets.
     * 
     * In this function, the allocation and baseline may be adjusted.
     * The given allocation will be forced to be bigger than the
     * widget's minimum size, as well as at least 0×0 in size.
     * 
     * For a version that does not take a transform, see
     * [method`Gtk`.Widget.size_allocate].
     */
    allocate(width: number, height: number, baseline: number, transform?: Gsk.Transform | null): void
    /**
     * Called by widgets as the user moves around the window using
     * keyboard shortcuts.
     * 
     * The `direction` argument indicates what kind of motion is taking place (up,
     * down, left, right, tab forward, tab backward).
     * 
     * This function calls the [vfunc`Gtk`.Widget.focus] virtual function; widgets
     * can override the virtual function in order to implement appropriate focus
     * behavior.
     * 
     * The default `focus()` virtual function for a widget should return `TRUE` if
     * moving in `direction` left the focus on a focusable location inside that
     * widget, and `FALSE` if moving in `direction` moved the focus outside the
     * widget. When returning `TRUE`, widgets normallycall [method`Gtk`.Widget.grab_focus]
     * to place the focus accordingly; when returning `FALSE`, they don’t modify
     * the current focus location.
     * 
     * This function is used by custom widget implementations; if you're
     * writing an app, you’d use [method`Gtk`.Widget.grab_focus] to move
     * the focus to a particular widget.
     */
    childFocus(direction: Gtk.DirectionType): boolean
    /**
     * Computes the bounds for `widget` in the coordinate space of `target`.
     * 
     * FIXME: Explain what "bounds" are.
     * 
     * If the operation is successful, %TRUE is returned. If `widget` has no
     * bounds or the bounds cannot be expressed in `target'`s coordinate space
     * (for example if both widgets are in different windows), %FALSE is
     * returned and `bounds` is set to the zero rectangle.
     * 
     * It is valid for `widget` and `target` to be the same widget.
     */
    computeBounds(target: Gtk.Widget): [ /* returnType */ boolean, /* outBounds */ Graphene.Rect ]
    /**
     * Computes whether a container should give this widget
     * extra space when possible.
     * 
     * Containers should check this, rather than looking at
     * [method`Gtk`.Widget.get_hexpand] or [method`Gtk`.Widget.get_vexpand].
     * 
     * This function already checks whether the widget is visible, so
     * visibility does not need to be checked separately. Non-visible
     * widgets are not expanded.
     * 
     * The computed expand value uses either the expand setting explicitly
     * set on the widget itself, or, if none has been explicitly set,
     * the widget may expand if some of its children do.
     */
    computeExpand(orientation: Gtk.Orientation): boolean
    /**
     * Translates the given `point` in `widget'`s coordinates to coordinates
     * relative to `target’`s coordinate system.
     * 
     * In order to perform this operation, both widgets must share a
     * common ancestor.
     */
    computePoint(target: Gtk.Widget, point: Graphene.Point): [ /* returnType */ boolean, /* outPoint */ Graphene.Point ]
    /**
     * Computes a matrix suitable to describe a transformation from
     * `widget'`s coordinate system into `target'`s coordinate system.
     * 
     * The transform can not be computed in certain cases, for example
     * when `widget` and `target` do not share a common ancestor. In that
     * case `out_transform` gets set to the identity matrix.
     */
    computeTransform(target: Gtk.Widget): [ /* returnType */ boolean, /* outTransform */ Graphene.Matrix ]
    /**
     * Tests if the point at (`x,` `y)` is contained in `widget`.
     * 
     * The coordinates for (`x,` `y)` must be in widget coordinates, so
     * (0, 0) is assumed to be the top left of `widget'`s content area.
     */
    contains(x: number, y: number): boolean
    /**
     * Creates a new `PangoContext` with the appropriate font map,
     * font options, font description, and base direction for drawing
     * text for this widget.
     * 
     * See also [method`Gtk`.Widget.get_pango_context].
     */
    createPangoContext(): Pango.Context
    /**
     * Creates a new `PangoLayout` with the appropriate font map,
     * font description, and base direction for drawing text for
     * this widget.
     * 
     * If you keep a `PangoLayout` created in this way around,
     * you need to re-create it when the widget `PangoContext`
     * is replaced. This can be tracked by listening to changes
     * of the [property`Gtk`.Widget:root] property on the widget.
     */
    createPangoLayout(text?: string | null): Pango.Layout
    /**
     * Checks to see if a drag movement has passed the GTK drag threshold.
     */
    dragCheckThreshold(startX: number, startY: number, currentX: number, currentY: number): boolean
    /**
     * Notifies the user about an input-related error on this widget.
     * 
     * If the [property`Gtk`.Settings:gtk-error-bell] setting is %TRUE,
     * it calls [method`Gdk`.Surface.beep], otherwise it does nothing.
     * 
     * Note that the effect of [method`Gdk`.Surface.beep] can be configured
     * in many ways, depending on the windowing backend and the desktop
     * environment or window manager that is used.
     */
    errorBell(): void
    /**
     * Returns the baseline that has currently been allocated to `widget`.
     * 
     * This function is intended to be used when implementing handlers
     * for the `GtkWidget`Class.snapshot() function, and when allocating
     * child widgets in `GtkWidget`Class.size_allocate().
     */
    getAllocatedBaseline(): number
    /**
     * Returns the height that has currently been allocated to `widget`.
     */
    getAllocatedHeight(): number
    /**
     * Returns the width that has currently been allocated to `widget`.
     */
    getAllocatedWidth(): number
    /**
     * Retrieves the widget’s allocation.
     * 
     * Note, when implementing a layout container: a widget’s allocation
     * will be its “adjusted” allocation, that is, the widget’s parent
     * typically calls [method`Gtk`.Widget.size_allocate] with an allocation,
     * and that allocation is then adjusted (to handle margin
     * and alignment for example) before assignment to the widget.
     * [method`Gtk`.Widget.get_allocation] returns the adjusted allocation that
     * was actually assigned to the widget. The adjusted allocation is
     * guaranteed to be completely contained within the
     * [method`Gtk`.Widget.size_allocate] allocation, however.
     * 
     * So a layout container is guaranteed that its children stay inside
     * the assigned bounds, but not that they have exactly the bounds the
     * container assigned.
     */
    getAllocation(): /* allocation */ Gtk.Allocation
    /**
     * Gets the first ancestor of `widget` with type `widget_type`.
     * 
     * For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)`
     * gets the first `GtkBox` that’s an ancestor of `widget`. No
     * reference will be added to the returned widget; it should
     * not be unreferenced.
     * 
     * Note that unlike [method`Gtk`.Widget.is_ancestor], this function
     * considers `widget` to be an ancestor of itself.
     */
    getAncestor(widgetType: GObject.Type): Gtk.Widget | null
    /**
     * Determines whether the input focus can enter `widget` or any
     * of its children.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getCanFocus(): boolean
    /**
     * Queries whether `widget` can be the target of pointer events.
     */
    getCanTarget(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * 
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    getChildVisible(): boolean
    /**
     * Gets the clipboard object for `widget`.
     * 
     * This is a utility function to get the clipboard object for the
     * `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getClipboard(): Gdk.Clipboard
    /**
     * Returns the list of style classes applied to `widget`.
     */
    getCssClasses(): string[]
    /**
     * Returns the CSS name that is used for `self`.
     */
    getCssName(): string
    /**
     * Queries the cursor set on `widget`.
     * 
     * See [method`Gtk`.Widget.set_cursor] for details.
     */
    getCursor(): Gdk.Cursor | null
    /**
     * Gets the reading direction for a particular widget.
     * 
     * See [method`Gtk`.Widget.set_direction].
     */
    getDirection(): Gtk.TextDirection
    /**
     * Get the `GdkDisplay` for the toplevel window associated with
     * this widget.
     * 
     * This function can only be called after the widget has been
     * added to a widget hierarchy with a `GtkWindow` at the top.
     * 
     * In general, you should only create display specific
     * resources when a widget has been realized, and you should
     * free those resources when the widget is unrealized.
     */
    getDisplay(): Gdk.Display
    /**
     * Returns the widgets first child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getFirstChild(): Gtk.Widget | null
    /**
     * Returns the current focus child of `widget`.
     */
    getFocusChild(): Gtk.Widget | null
    /**
     * Returns whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * See [method`Gtk`.Widget.set_focus_on_click].
     */
    getFocusOnClick(): boolean
    /**
     * Determines whether `widget` can own the input focus.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getFocusable(): boolean
    /**
     * Gets the font map of `widget`.
     * 
     * See [method`Gtk`.Widget.set_font_map].
     */
    getFontMap(): Pango.FontMap | null
    /**
     * Returns the `cairo_font_options_t` of widget.
     * 
     * Seee [method`Gtk`.Widget.set_font_options].
     */
    getFontOptions(): cairo.FontOptions | null
    /**
     * Obtains the frame clock for a widget.
     * 
     * The frame clock is a global “ticker” that can be used to drive
     * animations and repaints. The most common reason to get the frame
     * clock is to call [method`Gdk`.FrameClock.get_frame_time], in order
     * to get a time to use for animating. For example you might record
     * the start of the animation with an initial value from
     * [method`Gdk`.FrameClock.get_frame_time], and then update the animation
     * by calling [method`Gdk`.FrameClock.get_frame_time] again during each repaint.
     * 
     * [method`Gdk`.FrameClock.request_phase] will result in a new frame on the
     * clock, but won’t necessarily repaint any widgets. To repaint a
     * widget, you have to use [method`Gtk`.Widget.queue_draw] which invalidates
     * the widget (thus scheduling it to receive a draw on the next
     * frame). gtk_widget_queue_draw() will also end up requesting a frame
     * on the appropriate frame clock.
     * 
     * A widget’s frame clock will not change while the widget is
     * mapped. Reparenting a widget (which implies a temporary unmap) can
     * change the widget’s frame clock.
     * 
     * Unrealized widgets do not have a frame clock.
     */
    getFrameClock(): Gdk.FrameClock | null
    /**
     * Gets the horizontal alignment of `widget`.
     * 
     * For backwards compatibility reasons this method will never return
     * %GTK_ALIGN_BASELINE, but instead it will convert it to
     * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
     * alignment.
     */
    getHalign(): Gtk.Align
    /**
     * Returns the current value of the `has-tooltip` property.
     */
    getHasTooltip(): boolean
    /**
     * Returns the content height of the widget.
     * 
     * This function returns the height passed to its
     * size-allocate implementation, which is the height you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getHeight(): number
    /**
     * Gets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Containers should use [method`Gtk`.Widget.compute_expand] rather
     * than this function, to see whether a widget, or any of its children,
     * has the expand flag set. If any child of a widget wants to
     * expand, the parent may ask to expand also.
     * 
     * This function only looks at the widget’s own hexpand flag, rather
     * than computing whether the entire widget tree rooted at this widget
     * wants to expand.
     */
    getHexpand(): boolean
    /**
     * Gets whether gtk_widget_set_hexpand() has been used
     * to explicitly set the expand flag on this widget.
     * 
     * If [property`Gtk`.Widget:hexpand] property is set, then it
     * overrides any computed expand value based on child widgets.
     * If `hexpand` is not set, then the expand value depends on
     * whether any children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    getHexpandSet(): boolean
    /**
     * Returns the widgets last child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getLastChild(): Gtk.Widget | null
    /**
     * Retrieves the layout manager used by `widget`.
     * 
     * See [method`Gtk`.Widget.set_layout_manager].
     */
    getLayoutManager(): Gtk.LayoutManager | null
    /**
     * Whether the widget is mapped.
     */
    getMapped(): boolean
    /**
     * Gets the bottom margin of `widget`.
     */
    getMarginBottom(): number
    /**
     * Gets the end margin of `widget`.
     */
    getMarginEnd(): number
    /**
     * Gets the start margin of `widget`.
     */
    getMarginStart(): number
    /**
     * Gets the top margin of `widget`.
     */
    getMarginTop(): number
    /**
     * Retrieves the name of a widget.
     * 
     * See [method`Gtk`.Widget.set_name] for the significance of widget names.
     */
    getName(): string
    /**
     * Returns the nearest `GtkNative` ancestor of `widget`.
     * 
     * This function will return %NULL if the widget is not
     * contained inside a widget tree with a native ancestor.
     * 
     * `GtkNative` widgets will return themselves here.
     */
    getNative(): Gtk.Native | null
    /**
     * Returns the widgets next sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getNextSibling(): Gtk.Widget | null
    /**
     * #Fetches the requested opacity for this widget.
     * 
     * See [method`Gtk`.Widget.set_opacity].
     */
    getOpacity(): number
    /**
     * Returns the widgets overflow value.
     */
    getOverflow(): Gtk.Overflow
    /**
     * Gets a `PangoContext` with the appropriate font map, font description,
     * and base direction for this widget.
     * 
     * Unlike the context returned by [method`Gtk`.Widget.create_pango_context],
     * this context is owned by the widget (it can be used until the screen
     * for the widget changes or the widget is removed from its toplevel),
     * and will be updated to match any changes to the widget’s attributes.
     * This can be tracked by listening to changes of the
     * [property`Gtk`.Widget:root] property on the widget.
     */
    getPangoContext(): Pango.Context
    /**
     * Returns the parent widget of `widget`.
     */
    getParent(): Gtk.Widget | null
    /**
     * Retrieves the minimum and natural size of a widget, taking
     * into account the widget’s preference for height-for-width management.
     * 
     * This is used to retrieve a suitable size by container widgets which do
     * not impose any restrictions on the child placement. It can be used
     * to deduce toplevel window and menu sizes as well as child widgets in
     * free-form containers such as `GtkFixed`.
     * 
     * Handle with care. Note that the natural height of a height-for-width
     * widget will generally be a smaller size than the minimum height, since
     * the required height for the natural width is generally smaller than the
     * required height for the minimum width.
     * 
     * Use [id`gtk_widget_measure]` if you want to support baseline alignment.
     */
    getPreferredSize(): [ /* minimumSize */ Gtk.Requisition | null, /* naturalSize */ Gtk.Requisition | null ]
    /**
     * Returns the widgets previous sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getPrevSibling(): Gtk.Widget | null
    /**
     * Gets the primary clipboard of `widget`.
     * 
     * This is a utility function to get the primary clipboard object
     * for the `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getPrimaryClipboard(): Gdk.Clipboard
    /**
     * Determines whether `widget` is realized.
     */
    getRealized(): boolean
    /**
     * Determines whether `widget` is always treated as the default widget
     * within its toplevel when it has the focus, even if another widget
     * is the default.
     * 
     * See [method`Gtk`.Widget.set_receives_default].
     */
    getReceivesDefault(): boolean
    /**
     * Gets whether the widget prefers a height-for-width layout
     * or a width-for-height layout.
     * 
     * Single-child widgets generally propagate the preference of
     * their child, more complex widgets need to request something
     * either in context of their children or in context of their
     * allocation capabilities.
     */
    getRequestMode(): Gtk.SizeRequestMode
    /**
     * Returns the `GtkRoot` widget of `widget`.
     * 
     * This function will return %NULL if the widget is not contained
     * inside a widget tree with a root widget.
     * 
     * `GtkRoot` widgets will return themselves here.
     */
    getRoot(): Gtk.Root | null
    /**
     * Retrieves the internal scale factor that maps from window
     * coordinates to the actual device pixels.
     * 
     * On traditional systems this is 1, on high density outputs,
     * it can be a higher value (typically 2).
     * 
     * See [method`Gdk`.Surface.get_scale_factor].
     */
    getScaleFactor(): number
    /**
     * Returns the widget’s sensitivity.
     * 
     * This function returns the value that has been set using
     * [method`Gtk`.Widget.set_sensitive]).
     * 
     * The effective sensitivity of a widget is however determined
     * by both its own and its parent widget’s sensitivity.
     * See [method`Gtk`.Widget.is_sensitive].
     */
    getSensitive(): boolean
    /**
     * Gets the settings object holding the settings used for this widget.
     * 
     * Note that this function can only be called when the `GtkWidget`
     * is attached to a toplevel, since the settings object is specific
     * to a particular `GdkDisplay`. If you want to monitor the widget for
     * changes in its settings, connect to the `notify::display` signal.
     */
    getSettings(): Gtk.Settings
    /**
     * Returns the content width or height of the widget.
     * 
     * Which dimension is returned depends on `orientation`.
     * 
     * This is equivalent to calling [method`Gtk`.Widget.get_width]
     * for %GTK_ORIENTATION_HORIZONTAL or [method`Gtk`.Widget.get_height]
     * for %GTK_ORIENTATION_VERTICAL, but can be used when
     * writing orientation-independent code, such as when
     * implementing [iface`Gtk`.Orientable] widgets.
     */
    getSize(orientation: Gtk.Orientation): number
    /**
     * Gets the size request that was explicitly set for the widget using
     * gtk_widget_set_size_request().
     * 
     * A value of -1 stored in `width` or `height` indicates that that
     * dimension has not been set explicitly and the natural requisition
     * of the widget will be used instead. See
     * [method`Gtk`.Widget.set_size_request]. To get the size a widget will
     * actually request, call [method`Gtk`.Widget.measure] instead of
     * this function.
     */
    getSizeRequest(): [ /* width */ number | null, /* height */ number | null ]
    /**
     * Returns the widget state as a flag set.
     * 
     * It is worth mentioning that the effective %GTK_STATE_FLAG_INSENSITIVE
     * state will be returned, that is, also based on parent insensitivity,
     * even if `widget` itself is sensitive.
     * 
     * Also note that if you are looking for a way to obtain the
     * [flags`Gtk`.StateFlags] to pass to a [class`Gtk`.StyleContext]
     * method, you should look at [method`Gtk`.StyleContext.get_state].
     */
    getStateFlags(): Gtk.StateFlags
    /**
     * Returns the style context associated to `widget`.
     * 
     * The returned object is guaranteed to be the same
     * for the lifetime of `widget`.
     */
    getStyleContext(): Gtk.StyleContext
    /**
     * Fetch an object build from the template XML for `widget_type` in
     * this `widget` instance.
     * 
     * This will only report children which were previously declared
     * with [method`Gtk`.WidgetClass.bind_template_child_full] or one of its
     * variants.
     * 
     * This function is only meant to be called for code which is private
     * to the `widget_type` which declared the child and is meant for language
     * bindings which cannot easily make use of the GObject structure offsets.
     */
    getTemplateChild(widgetType: GObject.Type, name: string): GObject.Object
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the tooltip has not been set using
     * [method`Gtk`.Widget.set_tooltip_markup], this
     * function returns %NULL.
     */
    getTooltipMarkup(): string | null
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the `widget'`s tooltip was set using
     * [method`Gtk`.Widget.set_tooltip_markup],
     * this function will return the escaped text.
     */
    getTooltipText(): string | null
    /**
     * Gets the vertical alignment of `widget`.
     */
    getValign(): Gtk.Align
    /**
     * Gets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.get_hexpand] for more detail.
     */
    getVexpand(): boolean
    /**
     * Gets whether gtk_widget_set_vexpand() has been used to
     * explicitly set the expand flag on this widget.
     * 
     * See [method`Gtk`.Widget.get_hexpand_set] for more detail.
     */
    getVexpandSet(): boolean
    /**
     * Determines whether the widget is visible.
     * 
     * If you want to take into account whether the widget’s
     * parent is also marked as visible, use
     * [method`Gtk`.Widget.is_visible] instead.
     * 
     * This function does not check if the widget is
     * obscured in any way.
     * 
     * See [method`Gtk`.Widget.set_visible].
     */
    getVisible(): boolean
    /**
     * Returns the content width of the widget.
     * 
     * This function returns the width passed to its
     * size-allocate implementation, which is the width you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getWidth(): number
    /**
     * Causes `widget` to have the keyboard focus for the `GtkWindow` it's inside.
     * 
     * If `widget` is not focusable, or its [vfunc`Gtk`.Widget.grab_focus]
     * implementation cannot transfer the focus to a descendant of `widget`
     * that is focusable, it will not take focus and %FALSE will be returned.
     * 
     * Calling [method`Gtk`.Widget.grab_focus] on an already focused widget
     * is allowed, should not have an effect, and return %TRUE.
     */
    grabFocus(): boolean
    /**
     * Returns whether `css_class` is currently applied to `widget`.
     */
    hasCssClass(cssClass: string): boolean
    /**
     * Determines if the widget should show a visible indication that
     * it has the global input focus.
     * 
     * This is a convenience function that takes into account whether
     * focus indication should currently be shown in the toplevel window
     * of `widget`. See [method`Gtk`.Window.get_focus_visible] for more
     * information about focus indication.
     * 
     * To find out if the widget has the global input focus, use
     * [method`Gtk`.Widget.has_focus].
     */
    hasVisibleFocus(): boolean
    /**
     * Reverses the effects of gtk_widget_show().
     * 
     * This is causing the widget to be hidden (invisible to the user).
     */
    hide(): void
    /**
     * Returns whether the widget is currently being destroyed.
     * 
     * This information can sometimes be used to avoid doing
     * unnecessary work.
     */
    inDestruction(): boolean
    /**
     * Creates and initializes child widgets defined in templates.
     * 
     * This function must be called in the instance initializer
     * for any class which assigned itself a template using
     * [method`Gtk`.WidgetClass.set_template].
     * 
     * It is important to call this function in the instance initializer
     * of a `GtkWidget` subclass and not in `GObject.constructed()` or
     * `GObject.constructor()` for two reasons:
     * 
     *  - derived widgets will assume that the composite widgets
     *    defined by its parent classes have been created in their
     *    relative instance initializers
     *  - when calling `g_object_new()` on a widget with composite templates,
     *    it’s important to build the composite widgets before the construct
     *    properties are set. Properties passed to `g_object_new()` should
     *    take precedence over properties set in the private template XML
     * 
     * A good rule of thumb is to call this function as the first thing in
     * an instance initialization function.
     */
    initTemplate(): void
    /**
     * Inserts `group` into `widget`.
     * 
     * Children of `widget` that implement [iface`Gtk`.Actionable] can
     * then be associated with actions in `group` by setting their
     * “action-name” to `prefix`.`action-name`.
     * 
     * Note that inheritance is defined for individual actions. I.e.
     * even if you insert a group with prefix `prefix,` actions with
     * the same prefix will still be inherited from the parent, unless
     * the group contains an action with the same name.
     * 
     * If `group` is %NULL, a previously inserted group for `name` is
     * removed from `widget`.
     */
    insertActionGroup(name: string, group?: Gio.ActionGroup | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed after `previous_sibling,` or at the beginning if
     * `previous_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_prev_sibling(widget)`
     * will return `previous_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this
     * function can also be used to reorder `widget` in the child widget
     * list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertAfter(parent: Gtk.Widget, previousSibling?: Gtk.Widget | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed before `next_sibling,` or at the end if
     * `next_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_next_sibling(widget)`
     * will return `next_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this function
     * can also be used to reorder `widget` in the child widget list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertBefore(parent: Gtk.Widget, nextSibling?: Gtk.Widget | null): void
    /**
     * Determines whether `widget` is somewhere inside `ancestor,`
     * possibly with intermediate containers.
     */
    isAncestor(ancestor: Gtk.Widget): boolean
    /**
     * Determines whether `widget` can be drawn to.
     * 
     * A widget can be drawn if it is mapped and visible.
     */
    isDrawable(): boolean
    /**
     * Determines if the widget is the focus widget within its
     * toplevel.
     * 
     * This does not mean that the [property`Gtk`.Widget:has-focus]
     * property is necessarily set; [property`Gtk`.Widget:has-focus]
     * will only be set if the toplevel widget additionally has the
     * global input focus.
     */
    isFocus(): boolean
    /**
     * Returns the widget’s effective sensitivity.
     * 
     * This means it is sensitive itself and also its
     * parent widget is sensitive.
     */
    isSensitive(): boolean
    /**
     * Determines whether the widget and all its parents are marked as
     * visible.
     * 
     * This function does not check if the widget is obscured in any way.
     * 
     * See also [method`Gtk`.Widget.get_visible] and
     * [method`Gtk`.Widget.set_visible].
     */
    isVisible(): boolean
    /**
     * Emits the `::keynav-failed` signal on the widget.
     * 
     * This function should be called whenever keyboard navigation
     * within a single widget hits a boundary.
     * 
     * The return value of this function should be interpreted
     * in a way similar to the return value of
     * [method`Gtk`.Widget.child_focus]. When %TRUE is returned,
     * stay in the widget, the failed keyboard  navigation is OK
     * and/or there is nowhere we can/should move the focus to.
     * When %FALSE is returned, the caller should continue with
     * keyboard navigation outside the widget, e.g. by calling
     * [method`Gtk`.Widget.child_focus] on the widget’s toplevel.
     * 
     * The default [signal`Gtk`.Widget::keynav-failed] handler returns
     * %FALSE for %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD.
     * For the other values of `GtkDirectionType` it returns %TRUE.
     * 
     * Whenever the default handler returns %TRUE, it also calls
     * [method`Gtk`.Widget.error_bell] to notify the user of the
     * failed keyboard navigation.
     * 
     * A use case for providing an own implementation of ::keynav-failed
     * (either by connecting to it or by overriding it) would be a row of
     * [class`Gtk`.Entry] widgets where the user should be able to navigate
     * the entire row with the cursor keys, as e.g. known from user
     * interfaces that require entering license keys.
     */
    keynavFailed(direction: Gtk.DirectionType): boolean
    /**
     * Returns the widgets for which this widget is the target of a
     * mnemonic.
     * 
     * Typically, these widgets will be labels. See, for example,
     * [method`Gtk`.Label.set_mnemonic_widget].
     * 
     * The widgets in the list are not individually referenced.
     * If you want to iterate through the list and perform actions
     * involving callbacks that might destroy the widgets, you
     * must call `g_list_foreach (result, (GFunc)g_object_ref, NULL)`
     * first, and then unref all the widgets afterwards.
     */
    listMnemonicLabels(): Gtk.Widget[]
    /**
     * Causes a widget to be mapped if it isn’t already.
     * 
     * This function is only for use in widget implementations.
     */
    map(): void
    /**
     * Measures `widget` in the orientation `orientation` and for the given `for_size`.
     * 
     * As an example, if `orientation` is %GTK_ORIENTATION_HORIZONTAL and `for_size`
     * is 300, this functions will compute the minimum and natural width of `widget`
     * if it is allocated at a height of 300 pixels.
     * 
     * See [GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management) for
     * a more details on implementing `GtkWidgetClass.measure()`.
     */
    measure(orientation: Gtk.Orientation, forSize: number): [ /* minimum */ number | null, /* natural */ number | null, /* minimumBaseline */ number | null, /* naturalBaseline */ number | null ]
    /**
     * Emits the ::mnemonic-activate signal.
     * 
     * See [signal`Gtk`.Widget::mnemonic-activate].
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Returns a `GListModel` to track the children of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track children and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeChildren(): Gio.ListModel
    /**
     * Returns a `GListModel` to track the [class`Gtk`.EventController]s
     * of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track controllers and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeControllers(): Gio.ListModel
    /**
     * Finds the descendant of `widget` closest to the point (`x,` `y)`.
     * 
     * The point must be given in widget coordinates, so (0, 0) is assumed
     * to be the top left of `widget'`s content area.
     * 
     * Usually widgets will return %NULL if the given coordinate is not
     * contained in `widget` checked via [method`Gtk`.Widget.contains].
     * Otherwise they will recursively try to find a child that does
     * not return %NULL. Widgets are however free to customize their
     * picking algorithm.
     * 
     * This function is used on the toplevel to determine the widget
     * below the mouse cursor for purposes of hover highlighting and
     * delivering events.
     */
    pick(x: number, y: number, flags: Gtk.PickFlags): Gtk.Widget | null
    /**
     * Flags the widget for a rerun of the [vfunc`Gtk`.Widget.size_allocate]
     * function.
     * 
     * Use this function instead of [method`Gtk`.Widget.queue_resize]
     * when the `widget'`s size request didn't change but it wants to
     * reposition its contents.
     * 
     * An example user of this function is [method`Gtk`.Widget.set_halign].
     * 
     * This function is only for use in widget implementations.
     */
    queueAllocate(): void
    /**
     * Schedules this widget to be redrawn in the paint phase
     * of the current or the next frame.
     * 
     * This means `widget'`s [vfunc`Gtk`.Widget.snapshot]
     * implementation will be called.
     */
    queueDraw(): void
    /**
     * Flags a widget to have its size renegotiated.
     * 
     * This should be called when a widget for some reason has a new
     * size request. For example, when you change the text in a
     * [class`Gtk`.Label], the label queues a resize to ensure there’s
     * enough space for the new text.
     * 
     * Note that you cannot call gtk_widget_queue_resize() on a widget
     * from inside its implementation of the [vfunc`Gtk`.Widget.size_allocate]
     * virtual method. Calls to gtk_widget_queue_resize() from inside
     * [vfunc`Gtk`.Widget.size_allocate] will be silently ignored.
     * 
     * This function is only for use in widget implementations.
     */
    queueResize(): void
    /**
     * Creates the GDK resources associated with a widget.
     * 
     * Normally realization happens implicitly; if you show a widget
     * and all its parent containers, then the widget will be realized
     * and mapped automatically.
     * 
     * Realizing a widget requires all the widget’s parent widgets to be
     * realized; calling this function realizes the widget’s parents
     * in addition to `widget` itself. If a widget is not yet inside a
     * toplevel window when you realize it, bad things will happen.
     * 
     * This function is primarily used in widget implementations, and
     * isn’t very useful otherwise. Many times when you think you might
     * need it, a better approach is to connect to a signal that will be
     * called after the widget is realized automatically, such as
     * [signal`Gtk`.Widget::realize].
     */
    realize(): void
    /**
     * Removes `controller` from `widget,` so that it doesn't process
     * events anymore.
     * 
     * It should not be used again.
     * 
     * Widgets will remove all event controllers automatically when they
     * are destroyed, there is normally no need to call this function.
     */
    removeController(controller: Gtk.EventController): void
    /**
     * Removes a style from `widget`.
     * 
     * After this, the style of `widget` will stop matching for `css_class`.
     */
    removeCssClass(cssClass: string): void
    /**
     * Removes a widget from the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. The widget must
     * have previously been added to the list with
     * [method`Gtk`.Widget.add_mnemonic_label].
     */
    removeMnemonicLabel(label: Gtk.Widget): void
    /**
     * Removes a tick callback previously registered with
     * gtk_widget_add_tick_callback().
     */
    removeTickCallback(id: number): void
    /**
     * Specifies whether the input focus can enter the widget
     * or any of its children.
     * 
     * Applications should set `can_focus` to %FALSE to mark a
     * widget as for pointer/touch use only.
     * 
     * Note that having `can_focus` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and focusable and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setCanFocus(canFocus: boolean): void
    /**
     * Sets whether `widget` can be the target of pointer events.
     */
    setCanTarget(canTarget: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its parent.
     * 
     * The child visibility can be set for widget before it is added
     * to a container with [method`Gtk`.Widget.set_parent], to avoid
     * mapping children unnecessary before immediately unmapping them.
     * However it will be reset to its default state of %TRUE when the
     * widget is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    setChildVisible(childVisible: boolean): void
    /**
     * Clear all style classes applied to `widget`
     * and replace them with `classes`.
     */
    setCssClasses(classes: string[]): void
    /**
     * Sets the cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * If the `cursor` is NULL, `widget` will use the cursor
     * inherited from the parent widget.
     */
    setCursor(cursor?: Gdk.Cursor | null): void
    /**
     * Sets a named cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * This is a utility function that creates a cursor via
     * [ctor`Gdk`.Cursor.new_from_name] and then sets it on `widget`
     * with [method`Gtk`.Widget.set_cursor]. See those functions for
     * details.
     * 
     * On top of that, this function allows `name` to be %NULL, which
     * will do the same as calling [method`Gtk`.Widget.set_cursor]
     * with a %NULL cursor.
     */
    setCursorFromName(name?: string | null): void
    /**
     * Sets the reading direction on a particular widget.
     * 
     * This direction controls the primary direction for widgets
     * containing text, and also the direction in which the children
     * of a container are packed. The ability to set the direction is
     * present in order so that correct localization into languages with
     * right-to-left reading directions can be done. Generally, applications
     * will let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitly
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by [func`Gtk`.Widget.set_default_direction] will be used.
     */
    setDirection(dir: Gtk.TextDirection): void
    /**
     * Set `child` as the current focus child of `widget`.
     * 
     * This function is only suitable for widget implementations.
     * If you want a certain widget to get the input focus, call
     * [method`Gtk`.Widget.grab_focus] on it.
     */
    setFocusChild(child?: Gtk.Widget | null): void
    /**
     * Sets whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * Making mouse clicks not grab focus is useful in places like
     * toolbars where you don’t want the keyboard focus removed from
     * the main area of the application.
     */
    setFocusOnClick(focusOnClick: boolean): void
    /**
     * Specifies whether `widget` can own the input focus.
     * 
     * Widget implementations should set `focusable` to %TRUE in
     * their init() function if they want to receive keyboard input.
     * 
     * Note that having `focusable` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and can-focus and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setFocusable(focusable: boolean): void
    /**
     * Sets the font map to use for Pango rendering.
     * 
     * The font map is the object that is used to look up fonts.
     * Setting a custom font map can be useful in special situations,
     * e.g. when you need to add application-specific fonts to the set
     * of available fonts.
     * 
     * When not set, the widget will inherit the font map from its parent.
     */
    setFontMap(fontMap?: Pango.FontMap | null): void
    /**
     * Sets the `cairo_font_options_t` used for Pango rendering
     * in this widget.
     * 
     * When not set, the default font options for the `GdkDisplay`
     * will be used.
     */
    setFontOptions(options?: cairo.FontOptions | null): void
    /**
     * Sets the horizontal alignment of `widget`.
     */
    setHalign(align: Gtk.Align): void
    /**
     * Sets the `has-tooltip` property on `widget` to `has_tooltip`.
     */
    setHasTooltip(hasTooltip: boolean): void
    /**
     * Sets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Call this function to set the expand flag if you would like your
     * widget to become larger horizontally when the window has extra
     * room.
     * 
     * By default, widgets automatically expand if any of their children
     * want to expand. (To see if a widget will automatically expand given
     * its current children and state, call [method`Gtk`.Widget.compute_expand].
     * A container can decide how the expandability of children affects the
     * expansion of the container by overriding the compute_expand virtual
     * method on `GtkWidget`.).
     * 
     * Setting hexpand explicitly with this function will override the
     * automatic expand behavior.
     * 
     * This function forces the widget to expand or not to expand,
     * regardless of children.  The override occurs because
     * [method`Gtk`.Widget.set_hexpand] sets the hexpand-set property (see
     * [method`Gtk`.Widget.set_hexpand_set]) which causes the widget’s hexpand
     * value to be used, rather than looking at children and widget state.
     */
    setHexpand(expand: boolean): void
    /**
     * Sets whether the hexpand flag will be used.
     * 
     * The [property`Gtk`.Widget:hexpand-set] property will be set
     * automatically when you call [method`Gtk`.Widget.set_hexpand]
     * to set hexpand, so the most likely reason to use this function
     * would be to unset an explicit expand flag.
     * 
     * If hexpand is set, then it overrides any computed
     * expand value based on child widgets. If hexpand is not
     * set, then the expand value depends on whether any
     * children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    setHexpandSet(set: boolean): void
    /**
     * Sets the layout manager delegate instance that provides an
     * implementation for measuring and allocating the children of `widget`.
     */
    setLayoutManager(layoutManager?: Gtk.LayoutManager | null): void
    /**
     * Sets the bottom margin of `widget`.
     */
    setMarginBottom(margin: number): void
    /**
     * Sets the end margin of `widget`.
     */
    setMarginEnd(margin: number): void
    /**
     * Sets the start margin of `widget`.
     */
    setMarginStart(margin: number): void
    /**
     * Sets the top margin of `widget`.
     */
    setMarginTop(margin: number): void
    /**
     * Sets a widgets name.
     * 
     * Setting a name allows you to refer to the widget from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for [class`Gtk`.StyleContext].
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     */
    setName(name: string): void
    /**
     * Request the `widget` to be rendered partially transparent.
     * 
     * An opacity of 0 is fully transparent and an opacity of 1
     * is fully opaque.
     * 
     * Opacity works on both toplevel widgets and child widgets, although
     * there are some limitations: For toplevel widgets, applying opacity
     * depends on the capabilities of the windowing system. On X11, this
     * has any effect only on X displays with a compositing manager,
     * see gdk_display_is_composited(). On Windows and Wayland it should
     * always work, although setting a window’s opacity after the window
     * has been shown may cause some flicker.
     * 
     * Note that the opacity is inherited through inclusion — if you set
     * a toplevel to be partially translucent, all of its content will
     * appear translucent, since it is ultimatively rendered on that
     * toplevel. The opacity value itself is not inherited by child
     * widgets (since that would make widgets deeper in the hierarchy
     * progressively more translucent). As a consequence, [class`Gtk`.Popover]s
     * and other [iface`Gtk`.Native] widgets with their own surface will use their
     * own opacity value, and thus by default appear non-translucent,
     * even if they are attached to a toplevel that is translucent.
     */
    setOpacity(opacity: number): void
    /**
     * Sets how `widget` treats content that is drawn outside the
     * widget's content area.
     * 
     * See the definition of [enum`Gtk`.Overflow] for details.
     * 
     * This setting is provided for widget implementations and
     * should not be used by application code.
     * 
     * The default value is %GTK_OVERFLOW_VISIBLE.
     */
    setOverflow(overflow: Gtk.Overflow): void
    /**
     * Sets `parent` as the parent widget of `widget`.
     * 
     * This takes care of details such as updating the state and style
     * of the child to reflect its new location and resizing the parent.
     * The opposite function is [method`Gtk`.Widget.unparent].
     * 
     * This function is useful only when implementing subclasses of
     * `GtkWidget`.
     */
    setParent(parent: Gtk.Widget): void
    /**
     * Specifies whether `widget` will be treated as the default
     * widget within its toplevel when it has the focus, even if
     * another widget is the default.
     */
    setReceivesDefault(receivesDefault: boolean): void
    /**
     * Sets the sensitivity of a widget.
     * 
     * A widget is sensitive if the user can interact with it.
     * Insensitive widgets are “grayed out” and the user can’t
     * interact with them. Insensitive widgets are known as
     * “inactive”, “disabled”, or “ghosted” in some other toolkits.
     */
    setSensitive(sensitive: boolean): void
    /**
     * Sets the minimum size of a widget.
     * 
     * That is, the widget’s size request will be at least `width`
     * by `height`. You can use this function to force a widget to
     * be larger than it normally would be.
     * 
     * In most cases, [method`Gtk`.Window.set_default_size] is a better
     * choice for toplevel windows than this function; setting the default
     * size will still allow users to shrink the window. Setting the size
     * request will force them to leave the window at least as large as
     * the size request.
     * 
     * Note the inherent danger of setting any fixed size - themes,
     * translations into other languages, different fonts, and user action
     * can all change the appropriate size for a given widget. So, it's
     * basically impossible to hardcode a size that will always be
     * correct.
     * 
     * The size request of a widget is the smallest size a widget can
     * accept while still functioning well and drawing itself correctly.
     * However in some strange cases a widget may be allocated less than
     * its requested size, and in many cases a widget may be allocated more
     * space than it requested.
     * 
     * If the size request in a given direction is -1 (unset), then
     * the “natural” size request of the widget will be used instead.
     * 
     * The size request set here does not include any margin from the
     * properties
     * [property`Gtk`.Widget:margin-start],
     * [property`Gtk`.Widget:margin-end],
     * [property`Gtk`.Widget:margin-top], and
     * [property`Gtk`.Widget:margin-bottom], but it does include pretty
     * much all other padding or border properties set by any subclass
     * of `GtkWidget`.
     */
    setSizeRequest(width: number, height: number): void
    /**
     * Turns on flag values in the current widget state.
     * 
     * Typical widget states are insensitive, prelighted, etc.
     * 
     * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
     * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set
     * the widget's direction, use [method`Gtk`.Widget.set_direction].
     * 
     * This function is for use in widget implementations.
     */
    setStateFlags(flags: Gtk.StateFlags, clear: boolean): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked
     * up with Pango markup.
     * 
     * This function will take care of setting the
     * [property`Gtk`.Widget:has-tooltip] as a side effect, and of the
     * default handler for the [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_markup].
     */
    setTooltipMarkup(markup?: string | null): void
    /**
     * Sets `text` as the contents of the tooltip.
     * 
     * If `text` contains any markup, it will be escaped.
     * 
     * This function will take care of setting
     * [property`Gtk`.Widget:has-tooltip] as a side effect,
     * and of the default handler for the
     * [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_text].
     */
    setTooltipText(text?: string | null): void
    /**
     * Sets the vertical alignment of `widget`.
     */
    setValign(align: Gtk.Align): void
    /**
     * Sets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.set_hexpand] for more detail.
     */
    setVexpand(expand: boolean): void
    /**
     * Sets whether the vexpand flag will be used.
     * 
     * See [method`Gtk`.Widget.set_hexpand_set] for more detail.
     */
    setVexpandSet(set: boolean): void
    /**
     * Sets the visibility state of `widget`.
     * 
     * Note that setting this to %TRUE doesn’t mean the widget is
     * actually viewable, see [method`Gtk`.Widget.get_visible].
     * 
     * This function simply calls [method`Gtk`.Widget.show] or
     * [method`Gtk`.Widget.hide] but is nicer to use when the
     * visibility of the widget depends on some condition.
     */
    setVisible(visible: boolean): void
    /**
     * Returns whether `widget` should contribute to
     * the measuring and allocation of its parent.
     * 
     * This is %FALSE for invisible children, but also
     * for children that have their own surface.
     */
    shouldLayout(): boolean
    /**
     * Flags a widget to be displayed.
     * 
     * Any widget that isn’t shown will not appear on the screen.
     * 
     * Remember that you have to show the containers containing a widget,
     * in addition to the widget itself, before it will appear onscreen.
     * 
     * When a toplevel container is shown, it is immediately realized and
     * mapped; other shown widgets are realized and mapped when their
     * toplevel container is realized and mapped.
     */
    show(): void
    /**
     * Allocates widget with a transformation that translates
     * the origin to the position in `allocation`.
     * 
     * This is a simple form of [method`Gtk`.Widget.allocate].
     */
    sizeAllocate(allocation: Gtk.Allocation, baseline: number): void
    /**
     * Snapshot the a child of `widget`.
     * 
     * When a widget receives a call to the snapshot function,
     * it must send synthetic [vfunc`Gtk`.Widget.snapshot] calls
     * to all children. This function provides a convenient way
     * of doing this. A widget, when it receives a call to its
     * [vfunc`Gtk`.Widget.snapshot] function, calls
     * gtk_widget_snapshot_child() once for each child, passing in
     * the `snapshot` the widget received.
     * 
     * gtk_widget_snapshot_child() takes care of translating the origin of
     * `snapshot,` and deciding whether the child needs to be snapshot.
     * 
     * This function does nothing for children that implement `GtkNative`.
     */
    snapshotChild(child: Gtk.Widget, snapshot: Gtk.Snapshot): void
    /**
     * Translate coordinates relative to `src_widget’`s allocation
     * to coordinates relative to `dest_widget’`s allocations.
     * 
     * In order to perform this operation, both widget must share
     * a common ancestor.
     */
    translateCoordinates(destWidget: Gtk.Widget, srcX: number, srcY: number): [ /* returnType */ boolean, /* destX */ number | null, /* destY */ number | null ]
    /**
     * Triggers a tooltip query on the display where the toplevel
     * of `widget` is located.
     */
    triggerTooltipQuery(): void
    /**
     * Causes a widget to be unmapped if it’s currently mapped.
     * 
     * This function is only for use in widget implementations.
     */
    unmap(): void
    /**
     * Dissociate `widget` from its parent.
     * 
     * This function is only for use in widget implementations,
     * typically in dispose.
     */
    unparent(): void
    /**
     * Causes a widget to be unrealized (frees all GDK resources
     * associated with the widget).
     * 
     * This function is only useful in widget implementations.
     */
    unrealize(): void
    /**
     * Turns off flag values for the current widget state.
     * 
     * See [method`Gtk`.Widget.set_state_flags].
     * 
     * This function is for use in widget implementations.
     */
    unsetStateFlags(flags: Gtk.StateFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Methods of Gtk-4.0.Gtk.Accessible */
    /**
     * Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
     */
    getAccessibleRole(): Gtk.AccessibleRole
    /**
     * Resets the accessible `property` to its default value.
     */
    resetProperty(property: Gtk.AccessibleProperty): void
    /**
     * Resets the accessible `relation` to its default value.
     */
    resetRelation(relation: Gtk.AccessibleRelation): void
    /**
     * Resets the accessible `state` to its default value.
     */
    resetState(state: Gtk.AccessibleState): void
    /**
     * Updates an array of accessible properties.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * property change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateProperty(properties: Gtk.AccessibleProperty[], values: any[]): void
    /**
     * Updates an array of accessible relations.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * relation change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateRelation(relations: Gtk.AccessibleRelation[], values: any[]): void
    /**
     * Updates an array of accessible states.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * state change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateState(states: Gtk.AccessibleState[], values: any[]): void
    /* Methods of Gtk-4.0.Gtk.Buildable */
    /**
     * Gets the ID of the `buildable` object.
     * 
     * `GtkBuilder` sets the name based on the ID attribute
     * of the <object> tag used to construct the `buildable`.
     */
    getBuildableId(): string | null
    /* Signals of Gtk-4.0.Gtk.Widget */
    /**
     * Signals that all holders of a reference to the widget should release
     * the reference that they hold.
     * 
     * May result in finalization of the widget if all references are released.
     * 
     * This signal is not suitable for saving widget state.
     */
    connect(sigName: "destroy", callback: (() => void)): number
    on(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "destroy", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "destroy"): void
    /**
     * Emitted when the text direction of a widget changes.
     */
    connect(sigName: "direction-changed", callback: ((previousDirection: Gtk.TextDirection) => void)): number
    on(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void): NodeJS.EventEmitter
    emit(sigName: "direction-changed", previousDirection: Gtk.TextDirection): void
    /**
     * Emitted when `widget` is hidden.
     */
    connect(sigName: "hide", callback: (() => void)): number
    on(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "hide", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "hide"): void
    /**
     * Emitted if keyboard navigation fails.
     * 
     * See [method`Gtk`.Widget.keynav_failed] for details.
     */
    connect(sigName: "keynav-failed", callback: ((direction: Gtk.DirectionType) => boolean)): number
    on(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "keynav-failed", direction: Gtk.DirectionType): void
    /**
     * Emitted when `widget` is going to be mapped.
     * 
     * A widget is mapped when the widget is visible (which is controlled with
     * [property`Gtk`.Widget:visible]) and all its parents up to the toplevel widget
     * are also visible.
     * 
     * The ::map signal can be used to determine whether a widget will be drawn,
     * for instance it can resume an animation that was stopped during the
     * emission of [signal`Gtk`.Widget::unmap].
     */
    connect(sigName: "map", callback: (() => void)): number
    on(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "map", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "map"): void
    /**
     * Emitted when a widget is activated via a mnemonic.
     * 
     * The default handler for this signal activates `widget` if `group_cycling`
     * is %FALSE, or just makes `widget` grab focus if `group_cycling` is %TRUE.
     */
    connect(sigName: "mnemonic-activate", callback: ((groupCycling: boolean) => boolean)): number
    on(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "mnemonic-activate", groupCycling: boolean): void
    /**
     * Emitted when the focus is moved.
     */
    connect(sigName: "move-focus", callback: ((direction: Gtk.DirectionType) => void)): number
    on(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "move-focus", direction: Gtk.DirectionType): void
    /**
     * Emitted when the widgets tooltip is about to be shown.
     * 
     * This happens when the [property`Gtk`.Widget:has-tooltip] property
     * is %TRUE and the hover timeout has expired with the cursor hovering
     * "above" `widget;` or emitted when `widget` got focus in keyboard mode.
     * 
     * Using the given coordinates, the signal handler should determine
     * whether a tooltip should be shown for `widget`. If this is the case
     * %TRUE should be returned, %FALSE otherwise.  Note that if
     * `keyboard_mode` is %TRUE, the values of `x` and `y` are undefined and
     * should not be used.
     * 
     * The signal handler is free to manipulate `tooltip` with the therefore
     * destined function calls.
     */
    connect(sigName: "query-tooltip", callback: ((x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => boolean)): number
    on(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void): NodeJS.EventEmitter
    emit(sigName: "query-tooltip", x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip): void
    /**
     * Emitted when `widget` is associated with a `GdkSurface`.
     * 
     * This means that [method`Gtk`.Widget.realize] has been called
     * or the widget has been mapped (that is, it is going to be drawn).
     */
    connect(sigName: "realize", callback: (() => void)): number
    on(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "realize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "realize"): void
    /**
     * Emitted when `widget` is shown.
     */
    connect(sigName: "show", callback: (() => void)): number
    on(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "show"): void
    /**
     * Emitted when the widget state changes.
     * 
     * See [method`Gtk`.Widget.get_state_flags].
     */
    connect(sigName: "state-flags-changed", callback: ((flags: Gtk.StateFlags) => void)): number
    on(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void): NodeJS.EventEmitter
    emit(sigName: "state-flags-changed", flags: Gtk.StateFlags): void
    /**
     * Emitted when `widget` is going to be unmapped.
     * 
     * A widget is unmapped when either it or any of its parents up to the
     * toplevel widget have been set as hidden.
     * 
     * As ::unmap indicates that a widget will not be shown any longer,
     * it can be used to, for example, stop an animation on the widget.
     */
    connect(sigName: "unmap", callback: (() => void)): number
    on(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unmap", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unmap"): void
    /**
     * Emitted when the `GdkSurface` associated with `widget` is destroyed.
     * 
     * This means that [method`Gtk`.Widget.unrealize] has been called
     * or the widget has been unmapped (that is, it is going to be hidden).
     */
    connect(sigName: "unrealize", callback: (() => void)): number
    on(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unrealize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Gutter_ConstructProps)
    _init (config?: Gutter_ConstructProps): void
    static $gtype: GObject.Type
}
interface GutterLines_ConstructProps extends GObject.Object_ConstructProps {
}
class GutterLines {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.GutterLines */
    /**
     * Adds the class `name` to `line`.
     * 
     * `name` will be converted to a [alias`GLib`.Quark] as part of this process. A
     * faster version of this function is available via
     * [method`GutterLines`.add_qclass] for situations where the [alias`GLib`.Quark] is
     * known ahead of time.
     */
    addClass(line: number, name: string): void
    /**
     * Adds the class denoted by `qname` to `line`.
     * 
     * You may check if a line has `qname` by calling
     * [method`GutterLines`.has_qclass].
     * 
     * You can remove `qname` by calling
     * [method`GutterLines`.remove_qclass].
     */
    addQclass(line: number, qname: GLib.Quark): void
    /**
     * Gets the [class`Gtk`.TextBuffer] that the `GtkSourceGutterLines` represents.
     */
    getBuffer(): Gtk.TextBuffer
    /**
     * Gets the line number (starting from 0) for the first line that is
     * user visible.
     */
    getFirst(): number
    /**
     * Gets a #GtkTextIter for the current buffer at `line`
     */
    getIterAtLine(line: number): /* iter */ Gtk.TextIter
    /**
     * Gets the line number (starting from 0) for the last line that is
     * user visible.
     */
    getLast(): number
    /**
     * Gets the Y range for a line based on `mode`.
     * 
     * The value for `y` is relative to the renderers widget coordinates.
     */
    getLineYrange(line: number, mode: GutterRendererAlignmentMode): [ /* y */ number, /* height */ number ]
    /**
     * Gets the [class`Gtk`.TextView] that the `GtkSourceGutterLines` represents.
     */
    getView(): Gtk.TextView
    getYrange(line: number, lineY: number, lineHeight: number): void
    /**
     * Checks to see if [method`GutterLines`.add_class] was called with
     * the `name` for `line`.
     * 
     * A faster version of this function is provided via
     * [method`GutterLines`.has_qclass] for situations where the quark
     * is known ahead of time.
     */
    hasClass(line: number, name: string): boolean
    /**
     * Checks to see if [method`GutterLines`.add_qclass] was called with
     * the quark denoted by `qname` for `line`.
     */
    hasQclass(line: number, qname: GLib.Quark): boolean
    /**
     * Checks to see if `line` contains the insertion cursor.
     */
    isCursor(line: number): boolean
    /**
     * Checks to see if `line` is marked as prelit. Generally, this means
     * the mouse pointer is over the line within the gutter.
     */
    isPrelit(line: number): boolean
    /**
     * Checks to see if the view had a selection and if that selection overlaps
     * `line` in some way.
     */
    isSelected(line: number): boolean
    /**
     * Removes the class matching `name` from `line`.
     * 
     * A faster version of this function is available via
     * [method`GutterLines`.remove_qclass] for situations where the
     * #GQuark is known ahead of time.
     */
    removeClass(line: number, name: string): void
    /**
     * Reverses a call to [method`GutterLines`.add_qclass] by removing
     * the [alias`GLib`.Quark] matching `qname`.
     */
    removeQclass(line: number, qname: GLib.Quark): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GutterLines_ConstructProps)
    _init (config?: GutterLines_ConstructProps): void
    static $gtype: GObject.Type
}
interface GutterRenderer_ConstructProps extends Gtk.Widget_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.GutterRenderer */
    /**
     * The alignment mode of the renderer.
     * 
     * This can be used to indicate that in the case a cell spans multiple lines (due to text wrapping)
     * the alignment should work on either the full cell, the first line or the last line.
     */
    alignmentMode?: GutterRendererAlignmentMode
    /**
     * The horizontal alignment of the renderer.
     * 
     * Set to 0 for a left alignment. 1 for a right alignment. And 0.5 for centering the cells.
     * A value lower than 0 doesn't modify the alignment.
     */
    xalign?: number
    /**
     * The left and right padding of the renderer.
     */
    xpad?: number
    /**
     * The vertical alignment of the renderer.
     * 
     * Set to 0 for a top alignment. 1 for a bottom alignment. And 0.5 for centering the cells.
     * A value lower than 0 doesn't modify the alignment.
     */
    yalign?: number
    /**
     * The top and bottom padding of the renderer.
     */
    ypad?: number
    /* Constructor properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole?: Gtk.AccessibleRole
}
class GutterRenderer {
    /* Properties of GtkSource-5.GtkSource.GutterRenderer */
    /**
     * The alignment mode of the renderer.
     * 
     * This can be used to indicate that in the case a cell spans multiple lines (due to text wrapping)
     * the alignment should work on either the full cell, the first line or the last line.
     */
    alignmentMode: GutterRendererAlignmentMode
    /**
     * Contains information about the lines to be rendered.
     * 
     * It should be used by #GtkSourceGutterRenderer implementations from [vfunc`Gtk`.Widget.snapshot].
     */
    readonly lines: GutterLines
    /**
     * The view on which the renderer is placed.
     */
    readonly view: Gtk.TextView
    /**
     * The horizontal alignment of the renderer.
     * 
     * Set to 0 for a left alignment. 1 for a right alignment. And 0.5 for centering the cells.
     * A value lower than 0 doesn't modify the alignment.
     */
    xalign: number
    /**
     * The left and right padding of the renderer.
     */
    xpad: number
    /**
     * The vertical alignment of the renderer.
     * 
     * Set to 0 for a top alignment. 1 for a bottom alignment. And 0.5 for centering the cells.
     * A value lower than 0 doesn't modify the alignment.
     */
    yalign: number
    /**
     * The top and bottom padding of the renderer.
     */
    ypad: number
    /* Properties of Gtk-4.0.Gtk.Widget */
    /**
     * Whether the widget or any of its descendents can accept
     * the input focus.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    canFocus: boolean
    /**
     * Whether the widget can receive pointer events.
     */
    canTarget: boolean
    /**
     * A list of css classes applied to this widget.
     */
    cssClasses: string[]
    /**
     * The cursor used by `widget`.
     */
    cursor: Gdk.Cursor
    /**
     * Whether the widget should grab focus when it is clicked with the mouse.
     * 
     * This property is only relevant for widgets that can take focus.
     */
    focusOnClick: boolean
    /**
     * Whether this widget itself will accept the input focus.
     */
    focusable: boolean
    /**
     * How to distribute horizontal space if widget gets extra space.
     */
    halign: Gtk.Align
    /**
     * Whether the widget is the default widget.
     */
    readonly hasDefault: boolean
    /**
     * Whether the widget has the input focus.
     */
    readonly hasFocus: boolean
    /**
     * Enables or disables the emission of the ::query-tooltip signal on `widget`.
     * 
     * A value of %TRUE indicates that `widget` can have a tooltip, in this case
     * the widget will be queried using [signal`Gtk`.Widget::query-tooltip] to
     * determine whether it will provide a tooltip or not.
     */
    hasTooltip: boolean
    /**
     * Override for height request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    heightRequest: number
    /**
     * Whether to expand horizontally.
     */
    hexpand: boolean
    /**
     * Whether to use the `hexpand` property.
     */
    hexpandSet: boolean
    /**
     * The `GtkLayoutManager` instance to use to compute the preferred size
     * of the widget, and allocate its children.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    layoutManager: Gtk.LayoutManager
    /**
     * Margin on bottom side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginBottom: number
    /**
     * Margin on end of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginEnd: number
    /**
     * Margin on start of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginStart: number
    /**
     * Margin on top side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginTop: number
    /**
     * The name of the widget.
     */
    name: string
    /**
     * The requested opacity of the widget.
     */
    opacity: number
    /**
     * How content outside the widget's content area is treated.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    overflow: Gtk.Overflow
    /**
     * The parent widget of this widget.
     */
    readonly parent: Gtk.Widget
    /**
     * Whether the widget will receive the default action when it is focused.
     */
    receivesDefault: boolean
    /**
     * The `GtkRoot` widget of the widget tree containing this widget.
     * 
     * This will be %NULL if the widget is not contained in a root widget.
     */
    readonly root: Gtk.Root
    /**
     * The scale factor of the widget.
     */
    readonly scaleFactor: number
    /**
     * Whether the widget responds to input.
     */
    sensitive: boolean
    /**
     * Sets the text of tooltip to be the given string, which is marked up
     * with Pango markup.
     * 
     * Also see [method`Gtk`.Tooltip.set_markup].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipMarkup: string
    /**
     * Sets the text of tooltip to be the given string.
     * 
     * Also see [method`Gtk`.Tooltip.set_text].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipText: string
    /**
     * How to distribute vertical space if widget gets extra space.
     */
    valign: Gtk.Align
    /**
     * Whether to expand vertically.
     */
    vexpand: boolean
    /**
     * Whether to use the `vexpand` property.
     */
    vexpandSet: boolean
    /**
     * Whether the widget is visible.
     */
    visible: boolean
    /**
     * Override for width request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    widthRequest: number
    /* Properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole: Gtk.AccessibleRole
    /* Fields of Gtk-4.0.Gtk.Widget */
    readonly parentInstance: GObject.InitiallyUnowned
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.GutterRenderer */
    /**
     * Emits the [signal`GutterRenderer:`:activate] signal of the renderer. This is
     * called from [class`Gutter]` and should never have to be called manually.
     */
    activate(iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number): void
    /**
     * Locates where to render content that is `width` x `height` based on
     * the renderers alignment and padding.
     * 
     * The location will be placed into `x` and `y` and is relative to the
     * renderer's coordinates.
     * 
     * It is encouraged that renderers use this function when snappshotting
     * to ensure consistent placement of their contents.
     */
    alignCell(line: number, width: number, height: number): [ /* x */ number, /* y */ number ]
    /**
     * Get the alignment mode.
     * 
     * The alignment mode describes the manner in which the
     * renderer is aligned (see [property`GutterRenderer:`xalign] and
     * [property`GutterRenderer:`yalign]).
     */
    getAlignmentMode(): GutterRendererAlignmentMode
    /**
     * Gets the [class`Buffer]` for which the gutter renderer is drawing.
     */
    getBuffer(): Buffer | null
    /**
     * Get the view associated to the gutter renderer
     */
    getView(): View
    /**
     * Gets the `xalign` property.
     * 
     * This may be used to adjust where within the cell rectangle the renderer will draw.
     */
    getXalign(): number
    /**
     * Gets the `xpad` property.
     * 
     * This may be used to adjust the cell rectangle that the renderer will use to draw.
     */
    getXpad(): number
    /**
     * Gets the `yalign` property.
     * 
     * This may be used to adjust where within the cell rectangle the renderer will draw.
     */
    getYalign(): number
    /**
     * Gets the `ypad` property.
     * 
     * This may be used to adjust the cell rectangle that the renderer will use to draw.
     */
    getYpad(): number
    /**
     * Get whether the renderer is activatable at the location provided. This is
     * called from [class`Gutter]` to determine whether a renderer is activatable
     * using the mouse pointer.
     */
    queryActivatable(iter: Gtk.TextIter, area: Gdk.Rectangle): boolean
    /**
     * Set the alignment mode. The alignment mode describes the manner in which the
     * renderer is aligned (see [property`GutterRenderer:`xalign] and
     * [property`GutterRenderer:`yalign]).
     */
    setAlignmentMode(mode: GutterRendererAlignmentMode): void
    /**
     * Adjusts the `xalign` property.
     * 
     * This may be used to adjust where within the cell rectangle the renderer will draw.
     */
    setXalign(xalign: number): void
    /**
     * Adjusts the `xpad` property.
     * 
     * This may be used to adjust the cell rectangle that the renderer will use to draw.
     */
    setXpad(xpad: number): void
    /**
     * Adjusts the `yalign` property.
     * 
     * This may be used to adjust where within the cell rectangle the renderer will draw.
     */
    setYalign(yalign: number): void
    /**
     * Adjusts the `ypad` property.
     * 
     * This may be used to adjust the cell rectangle that the renderer will use to draw.
     */
    setYpad(ypad: number): void
    /* Methods of Gtk-4.0.Gtk.Widget */
    /**
     * Enable or disable an action installed with
     * gtk_widget_class_install_action().
     */
    actionSetEnabled(actionName: string, enabled: boolean): void
    /**
     * For widgets that can be “activated” (buttons, menu items, etc.),
     * this function activates them.
     * 
     * The activation will emit the signal set using
     * [method`Gtk`.WidgetClass.set_activate_signal] during class initialization.
     * 
     * Activation is what happens when you press <kbd>Enter</kbd>
     * on a widget during key navigation.
     * 
     * If you wish to handle the activation keybinding yourself, it is
     * recommended to use [method`Gtk`.WidgetClass.add_shortcut] with an action
     * created with [ctor`Gtk`.SignalAction.new].
     * 
     * If `widget` isn't activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Looks up the action in the action groups associated with
     * `widget` and its ancestors, and activates it.
     * 
     * If the action is in an action group added with
     * [method`Gtk`.Widget.insert_action_group], the `name` is expected
     * to be prefixed with the prefix that was used when the group was
     * inserted.
     * 
     * The arguments must match the actions expected parameter type,
     * as returned by `g_action_get_parameter_type()`.
     */
    activateAction(name: string, args?: GLib.Variant | null): boolean
    /**
     * Activates the `default.activate` action from `widget`.
     */
    activateDefault(): void
    /**
     * Adds `controller` to `widget` so that it will receive events.
     * 
     * You will usually want to call this function right after
     * creating any kind of [class`Gtk`.EventController].
     */
    addController(controller: Gtk.EventController): void
    /**
     * Adds a style class to `widget`.
     * 
     * After calling this function, the widgets style will match
     * for `css_class,` according to CSS matching rules.
     * 
     * Use [method`Gtk`.Widget.remove_css_class] to remove the
     * style again.
     */
    addCssClass(cssClass: string): void
    /**
     * Adds a widget to the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. Note the
     * list of mnemonic labels for the widget is cleared when the
     * widget is destroyed, so the caller must make sure to update
     * its internal state at this point as well.
     */
    addMnemonicLabel(label: Gtk.Widget): void
    /**
     * Queues an animation frame update and adds a callback to be called
     * before each frame.
     * 
     * Until the tick callback is removed, it will be called frequently
     * (usually at the frame rate of the output device or as quickly as
     * the application can be repainted, whichever is slower). For this
     * reason, is most suitable for handling graphics that change every
     * frame or every few frames. The tick callback does not automatically
     * imply a relayout or repaint. If you want a repaint or relayout, and
     * aren’t changing widget properties that would trigger that (for example,
     * changing the text of a `GtkLabel`), then you will have to call
     * [method`Gtk`.Widget.queue_resize] or [method`Gtk`.Widget.queue_draw]
     * yourself.
     * 
     * [method`Gdk`.FrameClock.get_frame_time] should generally be used
     * for timing continuous animations and
     * [method`Gdk`.FrameTimings.get_predicted_presentation_time] if you are
     * trying to display isolated frames at particular times.
     * 
     * This is a more convenient alternative to connecting directly to the
     * [signal`Gdk`.FrameClock::update] signal of `GdkFrameClock`, since you
     * don't have to worry about when a `GdkFrameClock` is assigned to a widget.
     */
    addTickCallback(callback: Gtk.TickCallback): number
    /**
     * This function is only used by `GtkWidget` subclasses, to
     * assign a size, position and (optionally) baseline to their
     * child widgets.
     * 
     * In this function, the allocation and baseline may be adjusted.
     * The given allocation will be forced to be bigger than the
     * widget's minimum size, as well as at least 0×0 in size.
     * 
     * For a version that does not take a transform, see
     * [method`Gtk`.Widget.size_allocate].
     */
    allocate(width: number, height: number, baseline: number, transform?: Gsk.Transform | null): void
    /**
     * Called by widgets as the user moves around the window using
     * keyboard shortcuts.
     * 
     * The `direction` argument indicates what kind of motion is taking place (up,
     * down, left, right, tab forward, tab backward).
     * 
     * This function calls the [vfunc`Gtk`.Widget.focus] virtual function; widgets
     * can override the virtual function in order to implement appropriate focus
     * behavior.
     * 
     * The default `focus()` virtual function for a widget should return `TRUE` if
     * moving in `direction` left the focus on a focusable location inside that
     * widget, and `FALSE` if moving in `direction` moved the focus outside the
     * widget. When returning `TRUE`, widgets normallycall [method`Gtk`.Widget.grab_focus]
     * to place the focus accordingly; when returning `FALSE`, they don’t modify
     * the current focus location.
     * 
     * This function is used by custom widget implementations; if you're
     * writing an app, you’d use [method`Gtk`.Widget.grab_focus] to move
     * the focus to a particular widget.
     */
    childFocus(direction: Gtk.DirectionType): boolean
    /**
     * Computes the bounds for `widget` in the coordinate space of `target`.
     * 
     * FIXME: Explain what "bounds" are.
     * 
     * If the operation is successful, %TRUE is returned. If `widget` has no
     * bounds or the bounds cannot be expressed in `target'`s coordinate space
     * (for example if both widgets are in different windows), %FALSE is
     * returned and `bounds` is set to the zero rectangle.
     * 
     * It is valid for `widget` and `target` to be the same widget.
     */
    computeBounds(target: Gtk.Widget): [ /* returnType */ boolean, /* outBounds */ Graphene.Rect ]
    /**
     * Computes whether a container should give this widget
     * extra space when possible.
     * 
     * Containers should check this, rather than looking at
     * [method`Gtk`.Widget.get_hexpand] or [method`Gtk`.Widget.get_vexpand].
     * 
     * This function already checks whether the widget is visible, so
     * visibility does not need to be checked separately. Non-visible
     * widgets are not expanded.
     * 
     * The computed expand value uses either the expand setting explicitly
     * set on the widget itself, or, if none has been explicitly set,
     * the widget may expand if some of its children do.
     */
    computeExpand(orientation: Gtk.Orientation): boolean
    /**
     * Translates the given `point` in `widget'`s coordinates to coordinates
     * relative to `target’`s coordinate system.
     * 
     * In order to perform this operation, both widgets must share a
     * common ancestor.
     */
    computePoint(target: Gtk.Widget, point: Graphene.Point): [ /* returnType */ boolean, /* outPoint */ Graphene.Point ]
    /**
     * Computes a matrix suitable to describe a transformation from
     * `widget'`s coordinate system into `target'`s coordinate system.
     * 
     * The transform can not be computed in certain cases, for example
     * when `widget` and `target` do not share a common ancestor. In that
     * case `out_transform` gets set to the identity matrix.
     */
    computeTransform(target: Gtk.Widget): [ /* returnType */ boolean, /* outTransform */ Graphene.Matrix ]
    /**
     * Tests if the point at (`x,` `y)` is contained in `widget`.
     * 
     * The coordinates for (`x,` `y)` must be in widget coordinates, so
     * (0, 0) is assumed to be the top left of `widget'`s content area.
     */
    contains(x: number, y: number): boolean
    /**
     * Creates a new `PangoContext` with the appropriate font map,
     * font options, font description, and base direction for drawing
     * text for this widget.
     * 
     * See also [method`Gtk`.Widget.get_pango_context].
     */
    createPangoContext(): Pango.Context
    /**
     * Creates a new `PangoLayout` with the appropriate font map,
     * font description, and base direction for drawing text for
     * this widget.
     * 
     * If you keep a `PangoLayout` created in this way around,
     * you need to re-create it when the widget `PangoContext`
     * is replaced. This can be tracked by listening to changes
     * of the [property`Gtk`.Widget:root] property on the widget.
     */
    createPangoLayout(text?: string | null): Pango.Layout
    /**
     * Checks to see if a drag movement has passed the GTK drag threshold.
     */
    dragCheckThreshold(startX: number, startY: number, currentX: number, currentY: number): boolean
    /**
     * Notifies the user about an input-related error on this widget.
     * 
     * If the [property`Gtk`.Settings:gtk-error-bell] setting is %TRUE,
     * it calls [method`Gdk`.Surface.beep], otherwise it does nothing.
     * 
     * Note that the effect of [method`Gdk`.Surface.beep] can be configured
     * in many ways, depending on the windowing backend and the desktop
     * environment or window manager that is used.
     */
    errorBell(): void
    /**
     * Returns the baseline that has currently been allocated to `widget`.
     * 
     * This function is intended to be used when implementing handlers
     * for the `GtkWidget`Class.snapshot() function, and when allocating
     * child widgets in `GtkWidget`Class.size_allocate().
     */
    getAllocatedBaseline(): number
    /**
     * Returns the height that has currently been allocated to `widget`.
     */
    getAllocatedHeight(): number
    /**
     * Returns the width that has currently been allocated to `widget`.
     */
    getAllocatedWidth(): number
    /**
     * Retrieves the widget’s allocation.
     * 
     * Note, when implementing a layout container: a widget’s allocation
     * will be its “adjusted” allocation, that is, the widget’s parent
     * typically calls [method`Gtk`.Widget.size_allocate] with an allocation,
     * and that allocation is then adjusted (to handle margin
     * and alignment for example) before assignment to the widget.
     * [method`Gtk`.Widget.get_allocation] returns the adjusted allocation that
     * was actually assigned to the widget. The adjusted allocation is
     * guaranteed to be completely contained within the
     * [method`Gtk`.Widget.size_allocate] allocation, however.
     * 
     * So a layout container is guaranteed that its children stay inside
     * the assigned bounds, but not that they have exactly the bounds the
     * container assigned.
     */
    getAllocation(): /* allocation */ Gtk.Allocation
    /**
     * Gets the first ancestor of `widget` with type `widget_type`.
     * 
     * For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)`
     * gets the first `GtkBox` that’s an ancestor of `widget`. No
     * reference will be added to the returned widget; it should
     * not be unreferenced.
     * 
     * Note that unlike [method`Gtk`.Widget.is_ancestor], this function
     * considers `widget` to be an ancestor of itself.
     */
    getAncestor(widgetType: GObject.Type): Gtk.Widget | null
    /**
     * Determines whether the input focus can enter `widget` or any
     * of its children.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getCanFocus(): boolean
    /**
     * Queries whether `widget` can be the target of pointer events.
     */
    getCanTarget(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * 
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    getChildVisible(): boolean
    /**
     * Gets the clipboard object for `widget`.
     * 
     * This is a utility function to get the clipboard object for the
     * `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getClipboard(): Gdk.Clipboard
    /**
     * Returns the list of style classes applied to `widget`.
     */
    getCssClasses(): string[]
    /**
     * Returns the CSS name that is used for `self`.
     */
    getCssName(): string
    /**
     * Queries the cursor set on `widget`.
     * 
     * See [method`Gtk`.Widget.set_cursor] for details.
     */
    getCursor(): Gdk.Cursor | null
    /**
     * Gets the reading direction for a particular widget.
     * 
     * See [method`Gtk`.Widget.set_direction].
     */
    getDirection(): Gtk.TextDirection
    /**
     * Get the `GdkDisplay` for the toplevel window associated with
     * this widget.
     * 
     * This function can only be called after the widget has been
     * added to a widget hierarchy with a `GtkWindow` at the top.
     * 
     * In general, you should only create display specific
     * resources when a widget has been realized, and you should
     * free those resources when the widget is unrealized.
     */
    getDisplay(): Gdk.Display
    /**
     * Returns the widgets first child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getFirstChild(): Gtk.Widget | null
    /**
     * Returns the current focus child of `widget`.
     */
    getFocusChild(): Gtk.Widget | null
    /**
     * Returns whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * See [method`Gtk`.Widget.set_focus_on_click].
     */
    getFocusOnClick(): boolean
    /**
     * Determines whether `widget` can own the input focus.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getFocusable(): boolean
    /**
     * Gets the font map of `widget`.
     * 
     * See [method`Gtk`.Widget.set_font_map].
     */
    getFontMap(): Pango.FontMap | null
    /**
     * Returns the `cairo_font_options_t` of widget.
     * 
     * Seee [method`Gtk`.Widget.set_font_options].
     */
    getFontOptions(): cairo.FontOptions | null
    /**
     * Obtains the frame clock for a widget.
     * 
     * The frame clock is a global “ticker” that can be used to drive
     * animations and repaints. The most common reason to get the frame
     * clock is to call [method`Gdk`.FrameClock.get_frame_time], in order
     * to get a time to use for animating. For example you might record
     * the start of the animation with an initial value from
     * [method`Gdk`.FrameClock.get_frame_time], and then update the animation
     * by calling [method`Gdk`.FrameClock.get_frame_time] again during each repaint.
     * 
     * [method`Gdk`.FrameClock.request_phase] will result in a new frame on the
     * clock, but won’t necessarily repaint any widgets. To repaint a
     * widget, you have to use [method`Gtk`.Widget.queue_draw] which invalidates
     * the widget (thus scheduling it to receive a draw on the next
     * frame). gtk_widget_queue_draw() will also end up requesting a frame
     * on the appropriate frame clock.
     * 
     * A widget’s frame clock will not change while the widget is
     * mapped. Reparenting a widget (which implies a temporary unmap) can
     * change the widget’s frame clock.
     * 
     * Unrealized widgets do not have a frame clock.
     */
    getFrameClock(): Gdk.FrameClock | null
    /**
     * Gets the horizontal alignment of `widget`.
     * 
     * For backwards compatibility reasons this method will never return
     * %GTK_ALIGN_BASELINE, but instead it will convert it to
     * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
     * alignment.
     */
    getHalign(): Gtk.Align
    /**
     * Returns the current value of the `has-tooltip` property.
     */
    getHasTooltip(): boolean
    /**
     * Returns the content height of the widget.
     * 
     * This function returns the height passed to its
     * size-allocate implementation, which is the height you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getHeight(): number
    /**
     * Gets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Containers should use [method`Gtk`.Widget.compute_expand] rather
     * than this function, to see whether a widget, or any of its children,
     * has the expand flag set. If any child of a widget wants to
     * expand, the parent may ask to expand also.
     * 
     * This function only looks at the widget’s own hexpand flag, rather
     * than computing whether the entire widget tree rooted at this widget
     * wants to expand.
     */
    getHexpand(): boolean
    /**
     * Gets whether gtk_widget_set_hexpand() has been used
     * to explicitly set the expand flag on this widget.
     * 
     * If [property`Gtk`.Widget:hexpand] property is set, then it
     * overrides any computed expand value based on child widgets.
     * If `hexpand` is not set, then the expand value depends on
     * whether any children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    getHexpandSet(): boolean
    /**
     * Returns the widgets last child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getLastChild(): Gtk.Widget | null
    /**
     * Retrieves the layout manager used by `widget`.
     * 
     * See [method`Gtk`.Widget.set_layout_manager].
     */
    getLayoutManager(): Gtk.LayoutManager | null
    /**
     * Whether the widget is mapped.
     */
    getMapped(): boolean
    /**
     * Gets the bottom margin of `widget`.
     */
    getMarginBottom(): number
    /**
     * Gets the end margin of `widget`.
     */
    getMarginEnd(): number
    /**
     * Gets the start margin of `widget`.
     */
    getMarginStart(): number
    /**
     * Gets the top margin of `widget`.
     */
    getMarginTop(): number
    /**
     * Retrieves the name of a widget.
     * 
     * See [method`Gtk`.Widget.set_name] for the significance of widget names.
     */
    getName(): string
    /**
     * Returns the nearest `GtkNative` ancestor of `widget`.
     * 
     * This function will return %NULL if the widget is not
     * contained inside a widget tree with a native ancestor.
     * 
     * `GtkNative` widgets will return themselves here.
     */
    getNative(): Gtk.Native | null
    /**
     * Returns the widgets next sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getNextSibling(): Gtk.Widget | null
    /**
     * #Fetches the requested opacity for this widget.
     * 
     * See [method`Gtk`.Widget.set_opacity].
     */
    getOpacity(): number
    /**
     * Returns the widgets overflow value.
     */
    getOverflow(): Gtk.Overflow
    /**
     * Gets a `PangoContext` with the appropriate font map, font description,
     * and base direction for this widget.
     * 
     * Unlike the context returned by [method`Gtk`.Widget.create_pango_context],
     * this context is owned by the widget (it can be used until the screen
     * for the widget changes or the widget is removed from its toplevel),
     * and will be updated to match any changes to the widget’s attributes.
     * This can be tracked by listening to changes of the
     * [property`Gtk`.Widget:root] property on the widget.
     */
    getPangoContext(): Pango.Context
    /**
     * Returns the parent widget of `widget`.
     */
    getParent(): Gtk.Widget | null
    /**
     * Retrieves the minimum and natural size of a widget, taking
     * into account the widget’s preference for height-for-width management.
     * 
     * This is used to retrieve a suitable size by container widgets which do
     * not impose any restrictions on the child placement. It can be used
     * to deduce toplevel window and menu sizes as well as child widgets in
     * free-form containers such as `GtkFixed`.
     * 
     * Handle with care. Note that the natural height of a height-for-width
     * widget will generally be a smaller size than the minimum height, since
     * the required height for the natural width is generally smaller than the
     * required height for the minimum width.
     * 
     * Use [id`gtk_widget_measure]` if you want to support baseline alignment.
     */
    getPreferredSize(): [ /* minimumSize */ Gtk.Requisition | null, /* naturalSize */ Gtk.Requisition | null ]
    /**
     * Returns the widgets previous sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getPrevSibling(): Gtk.Widget | null
    /**
     * Gets the primary clipboard of `widget`.
     * 
     * This is a utility function to get the primary clipboard object
     * for the `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getPrimaryClipboard(): Gdk.Clipboard
    /**
     * Determines whether `widget` is realized.
     */
    getRealized(): boolean
    /**
     * Determines whether `widget` is always treated as the default widget
     * within its toplevel when it has the focus, even if another widget
     * is the default.
     * 
     * See [method`Gtk`.Widget.set_receives_default].
     */
    getReceivesDefault(): boolean
    /**
     * Gets whether the widget prefers a height-for-width layout
     * or a width-for-height layout.
     * 
     * Single-child widgets generally propagate the preference of
     * their child, more complex widgets need to request something
     * either in context of their children or in context of their
     * allocation capabilities.
     */
    getRequestMode(): Gtk.SizeRequestMode
    /**
     * Returns the `GtkRoot` widget of `widget`.
     * 
     * This function will return %NULL if the widget is not contained
     * inside a widget tree with a root widget.
     * 
     * `GtkRoot` widgets will return themselves here.
     */
    getRoot(): Gtk.Root | null
    /**
     * Retrieves the internal scale factor that maps from window
     * coordinates to the actual device pixels.
     * 
     * On traditional systems this is 1, on high density outputs,
     * it can be a higher value (typically 2).
     * 
     * See [method`Gdk`.Surface.get_scale_factor].
     */
    getScaleFactor(): number
    /**
     * Returns the widget’s sensitivity.
     * 
     * This function returns the value that has been set using
     * [method`Gtk`.Widget.set_sensitive]).
     * 
     * The effective sensitivity of a widget is however determined
     * by both its own and its parent widget’s sensitivity.
     * See [method`Gtk`.Widget.is_sensitive].
     */
    getSensitive(): boolean
    /**
     * Gets the settings object holding the settings used for this widget.
     * 
     * Note that this function can only be called when the `GtkWidget`
     * is attached to a toplevel, since the settings object is specific
     * to a particular `GdkDisplay`. If you want to monitor the widget for
     * changes in its settings, connect to the `notify::display` signal.
     */
    getSettings(): Gtk.Settings
    /**
     * Returns the content width or height of the widget.
     * 
     * Which dimension is returned depends on `orientation`.
     * 
     * This is equivalent to calling [method`Gtk`.Widget.get_width]
     * for %GTK_ORIENTATION_HORIZONTAL or [method`Gtk`.Widget.get_height]
     * for %GTK_ORIENTATION_VERTICAL, but can be used when
     * writing orientation-independent code, such as when
     * implementing [iface`Gtk`.Orientable] widgets.
     */
    getSize(orientation: Gtk.Orientation): number
    /**
     * Gets the size request that was explicitly set for the widget using
     * gtk_widget_set_size_request().
     * 
     * A value of -1 stored in `width` or `height` indicates that that
     * dimension has not been set explicitly and the natural requisition
     * of the widget will be used instead. See
     * [method`Gtk`.Widget.set_size_request]. To get the size a widget will
     * actually request, call [method`Gtk`.Widget.measure] instead of
     * this function.
     */
    getSizeRequest(): [ /* width */ number | null, /* height */ number | null ]
    /**
     * Returns the widget state as a flag set.
     * 
     * It is worth mentioning that the effective %GTK_STATE_FLAG_INSENSITIVE
     * state will be returned, that is, also based on parent insensitivity,
     * even if `widget` itself is sensitive.
     * 
     * Also note that if you are looking for a way to obtain the
     * [flags`Gtk`.StateFlags] to pass to a [class`Gtk`.StyleContext]
     * method, you should look at [method`Gtk`.StyleContext.get_state].
     */
    getStateFlags(): Gtk.StateFlags
    /**
     * Returns the style context associated to `widget`.
     * 
     * The returned object is guaranteed to be the same
     * for the lifetime of `widget`.
     */
    getStyleContext(): Gtk.StyleContext
    /**
     * Fetch an object build from the template XML for `widget_type` in
     * this `widget` instance.
     * 
     * This will only report children which were previously declared
     * with [method`Gtk`.WidgetClass.bind_template_child_full] or one of its
     * variants.
     * 
     * This function is only meant to be called for code which is private
     * to the `widget_type` which declared the child and is meant for language
     * bindings which cannot easily make use of the GObject structure offsets.
     */
    getTemplateChild(widgetType: GObject.Type, name: string): GObject.Object
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the tooltip has not been set using
     * [method`Gtk`.Widget.set_tooltip_markup], this
     * function returns %NULL.
     */
    getTooltipMarkup(): string | null
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the `widget'`s tooltip was set using
     * [method`Gtk`.Widget.set_tooltip_markup],
     * this function will return the escaped text.
     */
    getTooltipText(): string | null
    /**
     * Gets the vertical alignment of `widget`.
     */
    getValign(): Gtk.Align
    /**
     * Gets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.get_hexpand] for more detail.
     */
    getVexpand(): boolean
    /**
     * Gets whether gtk_widget_set_vexpand() has been used to
     * explicitly set the expand flag on this widget.
     * 
     * See [method`Gtk`.Widget.get_hexpand_set] for more detail.
     */
    getVexpandSet(): boolean
    /**
     * Determines whether the widget is visible.
     * 
     * If you want to take into account whether the widget’s
     * parent is also marked as visible, use
     * [method`Gtk`.Widget.is_visible] instead.
     * 
     * This function does not check if the widget is
     * obscured in any way.
     * 
     * See [method`Gtk`.Widget.set_visible].
     */
    getVisible(): boolean
    /**
     * Returns the content width of the widget.
     * 
     * This function returns the width passed to its
     * size-allocate implementation, which is the width you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getWidth(): number
    /**
     * Causes `widget` to have the keyboard focus for the `GtkWindow` it's inside.
     * 
     * If `widget` is not focusable, or its [vfunc`Gtk`.Widget.grab_focus]
     * implementation cannot transfer the focus to a descendant of `widget`
     * that is focusable, it will not take focus and %FALSE will be returned.
     * 
     * Calling [method`Gtk`.Widget.grab_focus] on an already focused widget
     * is allowed, should not have an effect, and return %TRUE.
     */
    grabFocus(): boolean
    /**
     * Returns whether `css_class` is currently applied to `widget`.
     */
    hasCssClass(cssClass: string): boolean
    /**
     * Determines if the widget should show a visible indication that
     * it has the global input focus.
     * 
     * This is a convenience function that takes into account whether
     * focus indication should currently be shown in the toplevel window
     * of `widget`. See [method`Gtk`.Window.get_focus_visible] for more
     * information about focus indication.
     * 
     * To find out if the widget has the global input focus, use
     * [method`Gtk`.Widget.has_focus].
     */
    hasVisibleFocus(): boolean
    /**
     * Reverses the effects of gtk_widget_show().
     * 
     * This is causing the widget to be hidden (invisible to the user).
     */
    hide(): void
    /**
     * Returns whether the widget is currently being destroyed.
     * 
     * This information can sometimes be used to avoid doing
     * unnecessary work.
     */
    inDestruction(): boolean
    /**
     * Creates and initializes child widgets defined in templates.
     * 
     * This function must be called in the instance initializer
     * for any class which assigned itself a template using
     * [method`Gtk`.WidgetClass.set_template].
     * 
     * It is important to call this function in the instance initializer
     * of a `GtkWidget` subclass and not in `GObject.constructed()` or
     * `GObject.constructor()` for two reasons:
     * 
     *  - derived widgets will assume that the composite widgets
     *    defined by its parent classes have been created in their
     *    relative instance initializers
     *  - when calling `g_object_new()` on a widget with composite templates,
     *    it’s important to build the composite widgets before the construct
     *    properties are set. Properties passed to `g_object_new()` should
     *    take precedence over properties set in the private template XML
     * 
     * A good rule of thumb is to call this function as the first thing in
     * an instance initialization function.
     */
    initTemplate(): void
    /**
     * Inserts `group` into `widget`.
     * 
     * Children of `widget` that implement [iface`Gtk`.Actionable] can
     * then be associated with actions in `group` by setting their
     * “action-name” to `prefix`.`action-name`.
     * 
     * Note that inheritance is defined for individual actions. I.e.
     * even if you insert a group with prefix `prefix,` actions with
     * the same prefix will still be inherited from the parent, unless
     * the group contains an action with the same name.
     * 
     * If `group` is %NULL, a previously inserted group for `name` is
     * removed from `widget`.
     */
    insertActionGroup(name: string, group?: Gio.ActionGroup | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed after `previous_sibling,` or at the beginning if
     * `previous_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_prev_sibling(widget)`
     * will return `previous_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this
     * function can also be used to reorder `widget` in the child widget
     * list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertAfter(parent: Gtk.Widget, previousSibling?: Gtk.Widget | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed before `next_sibling,` or at the end if
     * `next_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_next_sibling(widget)`
     * will return `next_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this function
     * can also be used to reorder `widget` in the child widget list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertBefore(parent: Gtk.Widget, nextSibling?: Gtk.Widget | null): void
    /**
     * Determines whether `widget` is somewhere inside `ancestor,`
     * possibly with intermediate containers.
     */
    isAncestor(ancestor: Gtk.Widget): boolean
    /**
     * Determines whether `widget` can be drawn to.
     * 
     * A widget can be drawn if it is mapped and visible.
     */
    isDrawable(): boolean
    /**
     * Determines if the widget is the focus widget within its
     * toplevel.
     * 
     * This does not mean that the [property`Gtk`.Widget:has-focus]
     * property is necessarily set; [property`Gtk`.Widget:has-focus]
     * will only be set if the toplevel widget additionally has the
     * global input focus.
     */
    isFocus(): boolean
    /**
     * Returns the widget’s effective sensitivity.
     * 
     * This means it is sensitive itself and also its
     * parent widget is sensitive.
     */
    isSensitive(): boolean
    /**
     * Determines whether the widget and all its parents are marked as
     * visible.
     * 
     * This function does not check if the widget is obscured in any way.
     * 
     * See also [method`Gtk`.Widget.get_visible] and
     * [method`Gtk`.Widget.set_visible].
     */
    isVisible(): boolean
    /**
     * Emits the `::keynav-failed` signal on the widget.
     * 
     * This function should be called whenever keyboard navigation
     * within a single widget hits a boundary.
     * 
     * The return value of this function should be interpreted
     * in a way similar to the return value of
     * [method`Gtk`.Widget.child_focus]. When %TRUE is returned,
     * stay in the widget, the failed keyboard  navigation is OK
     * and/or there is nowhere we can/should move the focus to.
     * When %FALSE is returned, the caller should continue with
     * keyboard navigation outside the widget, e.g. by calling
     * [method`Gtk`.Widget.child_focus] on the widget’s toplevel.
     * 
     * The default [signal`Gtk`.Widget::keynav-failed] handler returns
     * %FALSE for %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD.
     * For the other values of `GtkDirectionType` it returns %TRUE.
     * 
     * Whenever the default handler returns %TRUE, it also calls
     * [method`Gtk`.Widget.error_bell] to notify the user of the
     * failed keyboard navigation.
     * 
     * A use case for providing an own implementation of ::keynav-failed
     * (either by connecting to it or by overriding it) would be a row of
     * [class`Gtk`.Entry] widgets where the user should be able to navigate
     * the entire row with the cursor keys, as e.g. known from user
     * interfaces that require entering license keys.
     */
    keynavFailed(direction: Gtk.DirectionType): boolean
    /**
     * Returns the widgets for which this widget is the target of a
     * mnemonic.
     * 
     * Typically, these widgets will be labels. See, for example,
     * [method`Gtk`.Label.set_mnemonic_widget].
     * 
     * The widgets in the list are not individually referenced.
     * If you want to iterate through the list and perform actions
     * involving callbacks that might destroy the widgets, you
     * must call `g_list_foreach (result, (GFunc)g_object_ref, NULL)`
     * first, and then unref all the widgets afterwards.
     */
    listMnemonicLabels(): Gtk.Widget[]
    /**
     * Causes a widget to be mapped if it isn’t already.
     * 
     * This function is only for use in widget implementations.
     */
    map(): void
    /**
     * Measures `widget` in the orientation `orientation` and for the given `for_size`.
     * 
     * As an example, if `orientation` is %GTK_ORIENTATION_HORIZONTAL and `for_size`
     * is 300, this functions will compute the minimum and natural width of `widget`
     * if it is allocated at a height of 300 pixels.
     * 
     * See [GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management) for
     * a more details on implementing `GtkWidgetClass.measure()`.
     */
    measure(orientation: Gtk.Orientation, forSize: number): [ /* minimum */ number | null, /* natural */ number | null, /* minimumBaseline */ number | null, /* naturalBaseline */ number | null ]
    /**
     * Emits the ::mnemonic-activate signal.
     * 
     * See [signal`Gtk`.Widget::mnemonic-activate].
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Returns a `GListModel` to track the children of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track children and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeChildren(): Gio.ListModel
    /**
     * Returns a `GListModel` to track the [class`Gtk`.EventController]s
     * of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track controllers and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeControllers(): Gio.ListModel
    /**
     * Finds the descendant of `widget` closest to the point (`x,` `y)`.
     * 
     * The point must be given in widget coordinates, so (0, 0) is assumed
     * to be the top left of `widget'`s content area.
     * 
     * Usually widgets will return %NULL if the given coordinate is not
     * contained in `widget` checked via [method`Gtk`.Widget.contains].
     * Otherwise they will recursively try to find a child that does
     * not return %NULL. Widgets are however free to customize their
     * picking algorithm.
     * 
     * This function is used on the toplevel to determine the widget
     * below the mouse cursor for purposes of hover highlighting and
     * delivering events.
     */
    pick(x: number, y: number, flags: Gtk.PickFlags): Gtk.Widget | null
    /**
     * Flags the widget for a rerun of the [vfunc`Gtk`.Widget.size_allocate]
     * function.
     * 
     * Use this function instead of [method`Gtk`.Widget.queue_resize]
     * when the `widget'`s size request didn't change but it wants to
     * reposition its contents.
     * 
     * An example user of this function is [method`Gtk`.Widget.set_halign].
     * 
     * This function is only for use in widget implementations.
     */
    queueAllocate(): void
    /**
     * Schedules this widget to be redrawn in the paint phase
     * of the current or the next frame.
     * 
     * This means `widget'`s [vfunc`Gtk`.Widget.snapshot]
     * implementation will be called.
     */
    queueDraw(): void
    /**
     * Flags a widget to have its size renegotiated.
     * 
     * This should be called when a widget for some reason has a new
     * size request. For example, when you change the text in a
     * [class`Gtk`.Label], the label queues a resize to ensure there’s
     * enough space for the new text.
     * 
     * Note that you cannot call gtk_widget_queue_resize() on a widget
     * from inside its implementation of the [vfunc`Gtk`.Widget.size_allocate]
     * virtual method. Calls to gtk_widget_queue_resize() from inside
     * [vfunc`Gtk`.Widget.size_allocate] will be silently ignored.
     * 
     * This function is only for use in widget implementations.
     */
    queueResize(): void
    /**
     * Creates the GDK resources associated with a widget.
     * 
     * Normally realization happens implicitly; if you show a widget
     * and all its parent containers, then the widget will be realized
     * and mapped automatically.
     * 
     * Realizing a widget requires all the widget’s parent widgets to be
     * realized; calling this function realizes the widget’s parents
     * in addition to `widget` itself. If a widget is not yet inside a
     * toplevel window when you realize it, bad things will happen.
     * 
     * This function is primarily used in widget implementations, and
     * isn’t very useful otherwise. Many times when you think you might
     * need it, a better approach is to connect to a signal that will be
     * called after the widget is realized automatically, such as
     * [signal`Gtk`.Widget::realize].
     */
    realize(): void
    /**
     * Removes `controller` from `widget,` so that it doesn't process
     * events anymore.
     * 
     * It should not be used again.
     * 
     * Widgets will remove all event controllers automatically when they
     * are destroyed, there is normally no need to call this function.
     */
    removeController(controller: Gtk.EventController): void
    /**
     * Removes a style from `widget`.
     * 
     * After this, the style of `widget` will stop matching for `css_class`.
     */
    removeCssClass(cssClass: string): void
    /**
     * Removes a widget from the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. The widget must
     * have previously been added to the list with
     * [method`Gtk`.Widget.add_mnemonic_label].
     */
    removeMnemonicLabel(label: Gtk.Widget): void
    /**
     * Removes a tick callback previously registered with
     * gtk_widget_add_tick_callback().
     */
    removeTickCallback(id: number): void
    /**
     * Specifies whether the input focus can enter the widget
     * or any of its children.
     * 
     * Applications should set `can_focus` to %FALSE to mark a
     * widget as for pointer/touch use only.
     * 
     * Note that having `can_focus` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and focusable and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setCanFocus(canFocus: boolean): void
    /**
     * Sets whether `widget` can be the target of pointer events.
     */
    setCanTarget(canTarget: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its parent.
     * 
     * The child visibility can be set for widget before it is added
     * to a container with [method`Gtk`.Widget.set_parent], to avoid
     * mapping children unnecessary before immediately unmapping them.
     * However it will be reset to its default state of %TRUE when the
     * widget is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    setChildVisible(childVisible: boolean): void
    /**
     * Clear all style classes applied to `widget`
     * and replace them with `classes`.
     */
    setCssClasses(classes: string[]): void
    /**
     * Sets the cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * If the `cursor` is NULL, `widget` will use the cursor
     * inherited from the parent widget.
     */
    setCursor(cursor?: Gdk.Cursor | null): void
    /**
     * Sets a named cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * This is a utility function that creates a cursor via
     * [ctor`Gdk`.Cursor.new_from_name] and then sets it on `widget`
     * with [method`Gtk`.Widget.set_cursor]. See those functions for
     * details.
     * 
     * On top of that, this function allows `name` to be %NULL, which
     * will do the same as calling [method`Gtk`.Widget.set_cursor]
     * with a %NULL cursor.
     */
    setCursorFromName(name?: string | null): void
    /**
     * Sets the reading direction on a particular widget.
     * 
     * This direction controls the primary direction for widgets
     * containing text, and also the direction in which the children
     * of a container are packed. The ability to set the direction is
     * present in order so that correct localization into languages with
     * right-to-left reading directions can be done. Generally, applications
     * will let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitly
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by [func`Gtk`.Widget.set_default_direction] will be used.
     */
    setDirection(dir: Gtk.TextDirection): void
    /**
     * Set `child` as the current focus child of `widget`.
     * 
     * This function is only suitable for widget implementations.
     * If you want a certain widget to get the input focus, call
     * [method`Gtk`.Widget.grab_focus] on it.
     */
    setFocusChild(child?: Gtk.Widget | null): void
    /**
     * Sets whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * Making mouse clicks not grab focus is useful in places like
     * toolbars where you don’t want the keyboard focus removed from
     * the main area of the application.
     */
    setFocusOnClick(focusOnClick: boolean): void
    /**
     * Specifies whether `widget` can own the input focus.
     * 
     * Widget implementations should set `focusable` to %TRUE in
     * their init() function if they want to receive keyboard input.
     * 
     * Note that having `focusable` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and can-focus and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setFocusable(focusable: boolean): void
    /**
     * Sets the font map to use for Pango rendering.
     * 
     * The font map is the object that is used to look up fonts.
     * Setting a custom font map can be useful in special situations,
     * e.g. when you need to add application-specific fonts to the set
     * of available fonts.
     * 
     * When not set, the widget will inherit the font map from its parent.
     */
    setFontMap(fontMap?: Pango.FontMap | null): void
    /**
     * Sets the `cairo_font_options_t` used for Pango rendering
     * in this widget.
     * 
     * When not set, the default font options for the `GdkDisplay`
     * will be used.
     */
    setFontOptions(options?: cairo.FontOptions | null): void
    /**
     * Sets the horizontal alignment of `widget`.
     */
    setHalign(align: Gtk.Align): void
    /**
     * Sets the `has-tooltip` property on `widget` to `has_tooltip`.
     */
    setHasTooltip(hasTooltip: boolean): void
    /**
     * Sets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Call this function to set the expand flag if you would like your
     * widget to become larger horizontally when the window has extra
     * room.
     * 
     * By default, widgets automatically expand if any of their children
     * want to expand. (To see if a widget will automatically expand given
     * its current children and state, call [method`Gtk`.Widget.compute_expand].
     * A container can decide how the expandability of children affects the
     * expansion of the container by overriding the compute_expand virtual
     * method on `GtkWidget`.).
     * 
     * Setting hexpand explicitly with this function will override the
     * automatic expand behavior.
     * 
     * This function forces the widget to expand or not to expand,
     * regardless of children.  The override occurs because
     * [method`Gtk`.Widget.set_hexpand] sets the hexpand-set property (see
     * [method`Gtk`.Widget.set_hexpand_set]) which causes the widget’s hexpand
     * value to be used, rather than looking at children and widget state.
     */
    setHexpand(expand: boolean): void
    /**
     * Sets whether the hexpand flag will be used.
     * 
     * The [property`Gtk`.Widget:hexpand-set] property will be set
     * automatically when you call [method`Gtk`.Widget.set_hexpand]
     * to set hexpand, so the most likely reason to use this function
     * would be to unset an explicit expand flag.
     * 
     * If hexpand is set, then it overrides any computed
     * expand value based on child widgets. If hexpand is not
     * set, then the expand value depends on whether any
     * children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    setHexpandSet(set: boolean): void
    /**
     * Sets the layout manager delegate instance that provides an
     * implementation for measuring and allocating the children of `widget`.
     */
    setLayoutManager(layoutManager?: Gtk.LayoutManager | null): void
    /**
     * Sets the bottom margin of `widget`.
     */
    setMarginBottom(margin: number): void
    /**
     * Sets the end margin of `widget`.
     */
    setMarginEnd(margin: number): void
    /**
     * Sets the start margin of `widget`.
     */
    setMarginStart(margin: number): void
    /**
     * Sets the top margin of `widget`.
     */
    setMarginTop(margin: number): void
    /**
     * Sets a widgets name.
     * 
     * Setting a name allows you to refer to the widget from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for [class`Gtk`.StyleContext].
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     */
    setName(name: string): void
    /**
     * Request the `widget` to be rendered partially transparent.
     * 
     * An opacity of 0 is fully transparent and an opacity of 1
     * is fully opaque.
     * 
     * Opacity works on both toplevel widgets and child widgets, although
     * there are some limitations: For toplevel widgets, applying opacity
     * depends on the capabilities of the windowing system. On X11, this
     * has any effect only on X displays with a compositing manager,
     * see gdk_display_is_composited(). On Windows and Wayland it should
     * always work, although setting a window’s opacity after the window
     * has been shown may cause some flicker.
     * 
     * Note that the opacity is inherited through inclusion — if you set
     * a toplevel to be partially translucent, all of its content will
     * appear translucent, since it is ultimatively rendered on that
     * toplevel. The opacity value itself is not inherited by child
     * widgets (since that would make widgets deeper in the hierarchy
     * progressively more translucent). As a consequence, [class`Gtk`.Popover]s
     * and other [iface`Gtk`.Native] widgets with their own surface will use their
     * own opacity value, and thus by default appear non-translucent,
     * even if they are attached to a toplevel that is translucent.
     */
    setOpacity(opacity: number): void
    /**
     * Sets how `widget` treats content that is drawn outside the
     * widget's content area.
     * 
     * See the definition of [enum`Gtk`.Overflow] for details.
     * 
     * This setting is provided for widget implementations and
     * should not be used by application code.
     * 
     * The default value is %GTK_OVERFLOW_VISIBLE.
     */
    setOverflow(overflow: Gtk.Overflow): void
    /**
     * Sets `parent` as the parent widget of `widget`.
     * 
     * This takes care of details such as updating the state and style
     * of the child to reflect its new location and resizing the parent.
     * The opposite function is [method`Gtk`.Widget.unparent].
     * 
     * This function is useful only when implementing subclasses of
     * `GtkWidget`.
     */
    setParent(parent: Gtk.Widget): void
    /**
     * Specifies whether `widget` will be treated as the default
     * widget within its toplevel when it has the focus, even if
     * another widget is the default.
     */
    setReceivesDefault(receivesDefault: boolean): void
    /**
     * Sets the sensitivity of a widget.
     * 
     * A widget is sensitive if the user can interact with it.
     * Insensitive widgets are “grayed out” and the user can’t
     * interact with them. Insensitive widgets are known as
     * “inactive”, “disabled”, or “ghosted” in some other toolkits.
     */
    setSensitive(sensitive: boolean): void
    /**
     * Sets the minimum size of a widget.
     * 
     * That is, the widget’s size request will be at least `width`
     * by `height`. You can use this function to force a widget to
     * be larger than it normally would be.
     * 
     * In most cases, [method`Gtk`.Window.set_default_size] is a better
     * choice for toplevel windows than this function; setting the default
     * size will still allow users to shrink the window. Setting the size
     * request will force them to leave the window at least as large as
     * the size request.
     * 
     * Note the inherent danger of setting any fixed size - themes,
     * translations into other languages, different fonts, and user action
     * can all change the appropriate size for a given widget. So, it's
     * basically impossible to hardcode a size that will always be
     * correct.
     * 
     * The size request of a widget is the smallest size a widget can
     * accept while still functioning well and drawing itself correctly.
     * However in some strange cases a widget may be allocated less than
     * its requested size, and in many cases a widget may be allocated more
     * space than it requested.
     * 
     * If the size request in a given direction is -1 (unset), then
     * the “natural” size request of the widget will be used instead.
     * 
     * The size request set here does not include any margin from the
     * properties
     * [property`Gtk`.Widget:margin-start],
     * [property`Gtk`.Widget:margin-end],
     * [property`Gtk`.Widget:margin-top], and
     * [property`Gtk`.Widget:margin-bottom], but it does include pretty
     * much all other padding or border properties set by any subclass
     * of `GtkWidget`.
     */
    setSizeRequest(width: number, height: number): void
    /**
     * Turns on flag values in the current widget state.
     * 
     * Typical widget states are insensitive, prelighted, etc.
     * 
     * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
     * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set
     * the widget's direction, use [method`Gtk`.Widget.set_direction].
     * 
     * This function is for use in widget implementations.
     */
    setStateFlags(flags: Gtk.StateFlags, clear: boolean): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked
     * up with Pango markup.
     * 
     * This function will take care of setting the
     * [property`Gtk`.Widget:has-tooltip] as a side effect, and of the
     * default handler for the [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_markup].
     */
    setTooltipMarkup(markup?: string | null): void
    /**
     * Sets `text` as the contents of the tooltip.
     * 
     * If `text` contains any markup, it will be escaped.
     * 
     * This function will take care of setting
     * [property`Gtk`.Widget:has-tooltip] as a side effect,
     * and of the default handler for the
     * [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_text].
     */
    setTooltipText(text?: string | null): void
    /**
     * Sets the vertical alignment of `widget`.
     */
    setValign(align: Gtk.Align): void
    /**
     * Sets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.set_hexpand] for more detail.
     */
    setVexpand(expand: boolean): void
    /**
     * Sets whether the vexpand flag will be used.
     * 
     * See [method`Gtk`.Widget.set_hexpand_set] for more detail.
     */
    setVexpandSet(set: boolean): void
    /**
     * Sets the visibility state of `widget`.
     * 
     * Note that setting this to %TRUE doesn’t mean the widget is
     * actually viewable, see [method`Gtk`.Widget.get_visible].
     * 
     * This function simply calls [method`Gtk`.Widget.show] or
     * [method`Gtk`.Widget.hide] but is nicer to use when the
     * visibility of the widget depends on some condition.
     */
    setVisible(visible: boolean): void
    /**
     * Returns whether `widget` should contribute to
     * the measuring and allocation of its parent.
     * 
     * This is %FALSE for invisible children, but also
     * for children that have their own surface.
     */
    shouldLayout(): boolean
    /**
     * Flags a widget to be displayed.
     * 
     * Any widget that isn’t shown will not appear on the screen.
     * 
     * Remember that you have to show the containers containing a widget,
     * in addition to the widget itself, before it will appear onscreen.
     * 
     * When a toplevel container is shown, it is immediately realized and
     * mapped; other shown widgets are realized and mapped when their
     * toplevel container is realized and mapped.
     */
    show(): void
    /**
     * Allocates widget with a transformation that translates
     * the origin to the position in `allocation`.
     * 
     * This is a simple form of [method`Gtk`.Widget.allocate].
     */
    sizeAllocate(allocation: Gtk.Allocation, baseline: number): void
    /**
     * Snapshot the a child of `widget`.
     * 
     * When a widget receives a call to the snapshot function,
     * it must send synthetic [vfunc`Gtk`.Widget.snapshot] calls
     * to all children. This function provides a convenient way
     * of doing this. A widget, when it receives a call to its
     * [vfunc`Gtk`.Widget.snapshot] function, calls
     * gtk_widget_snapshot_child() once for each child, passing in
     * the `snapshot` the widget received.
     * 
     * gtk_widget_snapshot_child() takes care of translating the origin of
     * `snapshot,` and deciding whether the child needs to be snapshot.
     * 
     * This function does nothing for children that implement `GtkNative`.
     */
    snapshotChild(child: Gtk.Widget, snapshot: Gtk.Snapshot): void
    /**
     * Translate coordinates relative to `src_widget’`s allocation
     * to coordinates relative to `dest_widget’`s allocations.
     * 
     * In order to perform this operation, both widget must share
     * a common ancestor.
     */
    translateCoordinates(destWidget: Gtk.Widget, srcX: number, srcY: number): [ /* returnType */ boolean, /* destX */ number | null, /* destY */ number | null ]
    /**
     * Triggers a tooltip query on the display where the toplevel
     * of `widget` is located.
     */
    triggerTooltipQuery(): void
    /**
     * Causes a widget to be unmapped if it’s currently mapped.
     * 
     * This function is only for use in widget implementations.
     */
    unmap(): void
    /**
     * Dissociate `widget` from its parent.
     * 
     * This function is only for use in widget implementations,
     * typically in dispose.
     */
    unparent(): void
    /**
     * Causes a widget to be unrealized (frees all GDK resources
     * associated with the widget).
     * 
     * This function is only useful in widget implementations.
     */
    unrealize(): void
    /**
     * Turns off flag values for the current widget state.
     * 
     * See [method`Gtk`.Widget.set_state_flags].
     * 
     * This function is for use in widget implementations.
     */
    unsetStateFlags(flags: Gtk.StateFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Methods of Gtk-4.0.Gtk.Accessible */
    /**
     * Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
     */
    getAccessibleRole(): Gtk.AccessibleRole
    /**
     * Resets the accessible `property` to its default value.
     */
    resetProperty(property: Gtk.AccessibleProperty): void
    /**
     * Resets the accessible `relation` to its default value.
     */
    resetRelation(relation: Gtk.AccessibleRelation): void
    /**
     * Resets the accessible `state` to its default value.
     */
    resetState(state: Gtk.AccessibleState): void
    /**
     * Updates an array of accessible properties.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * property change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateProperty(properties: Gtk.AccessibleProperty[], values: any[]): void
    /**
     * Updates an array of accessible relations.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * relation change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateRelation(relations: Gtk.AccessibleRelation[], values: any[]): void
    /**
     * Updates an array of accessible states.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * state change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateState(states: Gtk.AccessibleState[], values: any[]): void
    /* Methods of Gtk-4.0.Gtk.Buildable */
    /**
     * Gets the ID of the `buildable` object.
     * 
     * `GtkBuilder` sets the name based on the ID attribute
     * of the <object> tag used to construct the `buildable`.
     */
    getBuildableId(): string | null
    /* Signals of GtkSource-5.GtkSource.GutterRenderer */
    /**
     * The signal is emitted when the renderer is activated.
     */
    connect(sigName: "activate", callback: ((iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number) => void)): number
    on(sigName: "activate", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "activate", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "activate", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number) => void): NodeJS.EventEmitter
    emit(sigName: "activate", iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number): void
    /**
     * The signal is emitted when the renderer can possibly be activated.
     */
    connect(sigName: "query-activatable", callback: ((iter: Gtk.TextIter, area: Gdk.Rectangle) => boolean)): number
    on(sigName: "query-activatable", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-activatable", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-activatable", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle) => void): NodeJS.EventEmitter
    emit(sigName: "query-activatable", iter: Gtk.TextIter, area: Gdk.Rectangle): void
    connect(sigName: "query-data", callback: ((object: GObject.Object, p0: number) => void)): number
    on(sigName: "query-data", callback: (object: GObject.Object, p0: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-data", callback: (object: GObject.Object, p0: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-data", callback: (object: GObject.Object, p0: number) => void): NodeJS.EventEmitter
    emit(sigName: "query-data", object: GObject.Object, p0: number): void
    /* Signals of Gtk-4.0.Gtk.Widget */
    /**
     * Signals that all holders of a reference to the widget should release
     * the reference that they hold.
     * 
     * May result in finalization of the widget if all references are released.
     * 
     * This signal is not suitable for saving widget state.
     */
    connect(sigName: "destroy", callback: (() => void)): number
    on(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "destroy", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "destroy"): void
    /**
     * Emitted when the text direction of a widget changes.
     */
    connect(sigName: "direction-changed", callback: ((previousDirection: Gtk.TextDirection) => void)): number
    on(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void): NodeJS.EventEmitter
    emit(sigName: "direction-changed", previousDirection: Gtk.TextDirection): void
    /**
     * Emitted when `widget` is hidden.
     */
    connect(sigName: "hide", callback: (() => void)): number
    on(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "hide", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "hide"): void
    /**
     * Emitted if keyboard navigation fails.
     * 
     * See [method`Gtk`.Widget.keynav_failed] for details.
     */
    connect(sigName: "keynav-failed", callback: ((direction: Gtk.DirectionType) => boolean)): number
    on(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "keynav-failed", direction: Gtk.DirectionType): void
    /**
     * Emitted when `widget` is going to be mapped.
     * 
     * A widget is mapped when the widget is visible (which is controlled with
     * [property`Gtk`.Widget:visible]) and all its parents up to the toplevel widget
     * are also visible.
     * 
     * The ::map signal can be used to determine whether a widget will be drawn,
     * for instance it can resume an animation that was stopped during the
     * emission of [signal`Gtk`.Widget::unmap].
     */
    connect(sigName: "map", callback: (() => void)): number
    on(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "map", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "map"): void
    /**
     * Emitted when a widget is activated via a mnemonic.
     * 
     * The default handler for this signal activates `widget` if `group_cycling`
     * is %FALSE, or just makes `widget` grab focus if `group_cycling` is %TRUE.
     */
    connect(sigName: "mnemonic-activate", callback: ((groupCycling: boolean) => boolean)): number
    on(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "mnemonic-activate", groupCycling: boolean): void
    /**
     * Emitted when the focus is moved.
     */
    connect(sigName: "move-focus", callback: ((direction: Gtk.DirectionType) => void)): number
    on(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "move-focus", direction: Gtk.DirectionType): void
    /**
     * Emitted when the widgets tooltip is about to be shown.
     * 
     * This happens when the [property`Gtk`.Widget:has-tooltip] property
     * is %TRUE and the hover timeout has expired with the cursor hovering
     * "above" `widget;` or emitted when `widget` got focus in keyboard mode.
     * 
     * Using the given coordinates, the signal handler should determine
     * whether a tooltip should be shown for `widget`. If this is the case
     * %TRUE should be returned, %FALSE otherwise.  Note that if
     * `keyboard_mode` is %TRUE, the values of `x` and `y` are undefined and
     * should not be used.
     * 
     * The signal handler is free to manipulate `tooltip` with the therefore
     * destined function calls.
     */
    connect(sigName: "query-tooltip", callback: ((x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => boolean)): number
    on(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void): NodeJS.EventEmitter
    emit(sigName: "query-tooltip", x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip): void
    /**
     * Emitted when `widget` is associated with a `GdkSurface`.
     * 
     * This means that [method`Gtk`.Widget.realize] has been called
     * or the widget has been mapped (that is, it is going to be drawn).
     */
    connect(sigName: "realize", callback: (() => void)): number
    on(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "realize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "realize"): void
    /**
     * Emitted when `widget` is shown.
     */
    connect(sigName: "show", callback: (() => void)): number
    on(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "show"): void
    /**
     * Emitted when the widget state changes.
     * 
     * See [method`Gtk`.Widget.get_state_flags].
     */
    connect(sigName: "state-flags-changed", callback: ((flags: Gtk.StateFlags) => void)): number
    on(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void): NodeJS.EventEmitter
    emit(sigName: "state-flags-changed", flags: Gtk.StateFlags): void
    /**
     * Emitted when `widget` is going to be unmapped.
     * 
     * A widget is unmapped when either it or any of its parents up to the
     * toplevel widget have been set as hidden.
     * 
     * As ::unmap indicates that a widget will not be shown any longer,
     * it can be used to, for example, stop an animation on the widget.
     */
    connect(sigName: "unmap", callback: (() => void)): number
    on(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unmap", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unmap"): void
    /**
     * Emitted when the `GdkSurface` associated with `widget` is destroyed.
     * 
     * This means that [method`Gtk`.Widget.unrealize] has been called
     * or the widget has been unmapped (that is, it is going to be hidden).
     */
    connect(sigName: "unrealize", callback: (() => void)): number
    on(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unrealize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::alignment-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alignment-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alignment-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alignment-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alignment-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xalign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xalign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xpad", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xpad", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xpad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xpad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xpad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::yalign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::yalign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::yalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::yalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::yalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ypad", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ypad", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ypad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ypad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ypad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GutterRenderer_ConstructProps)
    _init (config?: GutterRenderer_ConstructProps): void
    static $gtype: GObject.Type
}
interface GutterRendererPixbuf_ConstructProps extends GutterRenderer_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.GutterRendererPixbuf */
    gicon?: Gio.Icon
    iconName?: string
    paintable?: Gdk.Paintable
    pixbuf?: GdkPixbuf.Pixbuf
    /* Constructor properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole?: Gtk.AccessibleRole
}
class GutterRendererPixbuf {
    /* Properties of GtkSource-5.GtkSource.GutterRendererPixbuf */
    gicon: Gio.Icon
    iconName: string
    paintable: Gdk.Paintable
    pixbuf: GdkPixbuf.Pixbuf
    /* Properties of GtkSource-5.GtkSource.GutterRenderer */
    /**
     * The alignment mode of the renderer.
     * 
     * This can be used to indicate that in the case a cell spans multiple lines (due to text wrapping)
     * the alignment should work on either the full cell, the first line or the last line.
     */
    alignmentMode: GutterRendererAlignmentMode
    /**
     * Contains information about the lines to be rendered.
     * 
     * It should be used by #GtkSourceGutterRenderer implementations from [vfunc`Gtk`.Widget.snapshot].
     */
    readonly lines: GutterLines
    /**
     * The view on which the renderer is placed.
     */
    readonly view: Gtk.TextView
    /**
     * The horizontal alignment of the renderer.
     * 
     * Set to 0 for a left alignment. 1 for a right alignment. And 0.5 for centering the cells.
     * A value lower than 0 doesn't modify the alignment.
     */
    xalign: number
    /**
     * The left and right padding of the renderer.
     */
    xpad: number
    /**
     * The vertical alignment of the renderer.
     * 
     * Set to 0 for a top alignment. 1 for a bottom alignment. And 0.5 for centering the cells.
     * A value lower than 0 doesn't modify the alignment.
     */
    yalign: number
    /**
     * The top and bottom padding of the renderer.
     */
    ypad: number
    /* Properties of Gtk-4.0.Gtk.Widget */
    /**
     * Whether the widget or any of its descendents can accept
     * the input focus.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    canFocus: boolean
    /**
     * Whether the widget can receive pointer events.
     */
    canTarget: boolean
    /**
     * A list of css classes applied to this widget.
     */
    cssClasses: string[]
    /**
     * The cursor used by `widget`.
     */
    cursor: Gdk.Cursor
    /**
     * Whether the widget should grab focus when it is clicked with the mouse.
     * 
     * This property is only relevant for widgets that can take focus.
     */
    focusOnClick: boolean
    /**
     * Whether this widget itself will accept the input focus.
     */
    focusable: boolean
    /**
     * How to distribute horizontal space if widget gets extra space.
     */
    halign: Gtk.Align
    /**
     * Whether the widget is the default widget.
     */
    readonly hasDefault: boolean
    /**
     * Whether the widget has the input focus.
     */
    readonly hasFocus: boolean
    /**
     * Enables or disables the emission of the ::query-tooltip signal on `widget`.
     * 
     * A value of %TRUE indicates that `widget` can have a tooltip, in this case
     * the widget will be queried using [signal`Gtk`.Widget::query-tooltip] to
     * determine whether it will provide a tooltip or not.
     */
    hasTooltip: boolean
    /**
     * Override for height request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    heightRequest: number
    /**
     * Whether to expand horizontally.
     */
    hexpand: boolean
    /**
     * Whether to use the `hexpand` property.
     */
    hexpandSet: boolean
    /**
     * The `GtkLayoutManager` instance to use to compute the preferred size
     * of the widget, and allocate its children.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    layoutManager: Gtk.LayoutManager
    /**
     * Margin on bottom side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginBottom: number
    /**
     * Margin on end of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginEnd: number
    /**
     * Margin on start of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginStart: number
    /**
     * Margin on top side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginTop: number
    /**
     * The name of the widget.
     */
    name: string
    /**
     * The requested opacity of the widget.
     */
    opacity: number
    /**
     * How content outside the widget's content area is treated.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    overflow: Gtk.Overflow
    /**
     * The parent widget of this widget.
     */
    readonly parent: Gtk.Widget
    /**
     * Whether the widget will receive the default action when it is focused.
     */
    receivesDefault: boolean
    /**
     * The `GtkRoot` widget of the widget tree containing this widget.
     * 
     * This will be %NULL if the widget is not contained in a root widget.
     */
    readonly root: Gtk.Root
    /**
     * The scale factor of the widget.
     */
    readonly scaleFactor: number
    /**
     * Whether the widget responds to input.
     */
    sensitive: boolean
    /**
     * Sets the text of tooltip to be the given string, which is marked up
     * with Pango markup.
     * 
     * Also see [method`Gtk`.Tooltip.set_markup].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipMarkup: string
    /**
     * Sets the text of tooltip to be the given string.
     * 
     * Also see [method`Gtk`.Tooltip.set_text].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipText: string
    /**
     * How to distribute vertical space if widget gets extra space.
     */
    valign: Gtk.Align
    /**
     * Whether to expand vertically.
     */
    vexpand: boolean
    /**
     * Whether to use the `vexpand` property.
     */
    vexpandSet: boolean
    /**
     * Whether the widget is visible.
     */
    visible: boolean
    /**
     * Override for width request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    widthRequest: number
    /* Properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole: Gtk.AccessibleRole
    /* Fields of GtkSource-5.GtkSource.GutterRenderer */
    readonly parentInstance: Gtk.Widget
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.GutterRendererPixbuf */
    /**
     * Get the gicon of the renderer
     */
    getGicon(): Gio.Icon
    getIconName(): string
    /**
     * Gets a [iface`Gdk`.Paintable] that was set with
     * [method`GutterRendererPixbuf`.set_paintable]
     */
    getPaintable(): Gdk.Paintable | null
    /**
     * Get the pixbuf of the renderer.
     */
    getPixbuf(): GdkPixbuf.Pixbuf
    /**
     * Allows overlaying a paintable on top of any other image that
     * has been set for the pixbuf. This will be applied when the
     * widget is next snapshot.
     */
    overlayPaintable(paintable: Gdk.Paintable): void
    setGicon(icon?: Gio.Icon | null): void
    setIconName(iconName?: string | null): void
    setPaintable(paintable?: Gdk.Paintable | null): void
    setPixbuf(pixbuf?: GdkPixbuf.Pixbuf | null): void
    /* Methods of GtkSource-5.GtkSource.GutterRenderer */
    /**
     * Emits the [signal`GutterRenderer:`:activate] signal of the renderer. This is
     * called from [class`Gutter]` and should never have to be called manually.
     */
    activate(iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number): void
    /**
     * Locates where to render content that is `width` x `height` based on
     * the renderers alignment and padding.
     * 
     * The location will be placed into `x` and `y` and is relative to the
     * renderer's coordinates.
     * 
     * It is encouraged that renderers use this function when snappshotting
     * to ensure consistent placement of their contents.
     */
    alignCell(line: number, width: number, height: number): [ /* x */ number, /* y */ number ]
    /**
     * Get the alignment mode.
     * 
     * The alignment mode describes the manner in which the
     * renderer is aligned (see [property`GutterRenderer:`xalign] and
     * [property`GutterRenderer:`yalign]).
     */
    getAlignmentMode(): GutterRendererAlignmentMode
    /**
     * Gets the [class`Buffer]` for which the gutter renderer is drawing.
     */
    getBuffer(): Buffer | null
    /**
     * Get the view associated to the gutter renderer
     */
    getView(): View
    /**
     * Gets the `xalign` property.
     * 
     * This may be used to adjust where within the cell rectangle the renderer will draw.
     */
    getXalign(): number
    /**
     * Gets the `xpad` property.
     * 
     * This may be used to adjust the cell rectangle that the renderer will use to draw.
     */
    getXpad(): number
    /**
     * Gets the `yalign` property.
     * 
     * This may be used to adjust where within the cell rectangle the renderer will draw.
     */
    getYalign(): number
    /**
     * Gets the `ypad` property.
     * 
     * This may be used to adjust the cell rectangle that the renderer will use to draw.
     */
    getYpad(): number
    /**
     * Get whether the renderer is activatable at the location provided. This is
     * called from [class`Gutter]` to determine whether a renderer is activatable
     * using the mouse pointer.
     */
    queryActivatable(iter: Gtk.TextIter, area: Gdk.Rectangle): boolean
    /**
     * Set the alignment mode. The alignment mode describes the manner in which the
     * renderer is aligned (see [property`GutterRenderer:`xalign] and
     * [property`GutterRenderer:`yalign]).
     */
    setAlignmentMode(mode: GutterRendererAlignmentMode): void
    /**
     * Adjusts the `xalign` property.
     * 
     * This may be used to adjust where within the cell rectangle the renderer will draw.
     */
    setXalign(xalign: number): void
    /**
     * Adjusts the `xpad` property.
     * 
     * This may be used to adjust the cell rectangle that the renderer will use to draw.
     */
    setXpad(xpad: number): void
    /**
     * Adjusts the `yalign` property.
     * 
     * This may be used to adjust where within the cell rectangle the renderer will draw.
     */
    setYalign(yalign: number): void
    /**
     * Adjusts the `ypad` property.
     * 
     * This may be used to adjust the cell rectangle that the renderer will use to draw.
     */
    setYpad(ypad: number): void
    /* Methods of Gtk-4.0.Gtk.Widget */
    /**
     * Enable or disable an action installed with
     * gtk_widget_class_install_action().
     */
    actionSetEnabled(actionName: string, enabled: boolean): void
    /**
     * For widgets that can be “activated” (buttons, menu items, etc.),
     * this function activates them.
     * 
     * The activation will emit the signal set using
     * [method`Gtk`.WidgetClass.set_activate_signal] during class initialization.
     * 
     * Activation is what happens when you press <kbd>Enter</kbd>
     * on a widget during key navigation.
     * 
     * If you wish to handle the activation keybinding yourself, it is
     * recommended to use [method`Gtk`.WidgetClass.add_shortcut] with an action
     * created with [ctor`Gtk`.SignalAction.new].
     * 
     * If `widget` isn't activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Looks up the action in the action groups associated with
     * `widget` and its ancestors, and activates it.
     * 
     * If the action is in an action group added with
     * [method`Gtk`.Widget.insert_action_group], the `name` is expected
     * to be prefixed with the prefix that was used when the group was
     * inserted.
     * 
     * The arguments must match the actions expected parameter type,
     * as returned by `g_action_get_parameter_type()`.
     */
    activateAction(name: string, args?: GLib.Variant | null): boolean
    /**
     * Activates the `default.activate` action from `widget`.
     */
    activateDefault(): void
    /**
     * Adds `controller` to `widget` so that it will receive events.
     * 
     * You will usually want to call this function right after
     * creating any kind of [class`Gtk`.EventController].
     */
    addController(controller: Gtk.EventController): void
    /**
     * Adds a style class to `widget`.
     * 
     * After calling this function, the widgets style will match
     * for `css_class,` according to CSS matching rules.
     * 
     * Use [method`Gtk`.Widget.remove_css_class] to remove the
     * style again.
     */
    addCssClass(cssClass: string): void
    /**
     * Adds a widget to the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. Note the
     * list of mnemonic labels for the widget is cleared when the
     * widget is destroyed, so the caller must make sure to update
     * its internal state at this point as well.
     */
    addMnemonicLabel(label: Gtk.Widget): void
    /**
     * Queues an animation frame update and adds a callback to be called
     * before each frame.
     * 
     * Until the tick callback is removed, it will be called frequently
     * (usually at the frame rate of the output device or as quickly as
     * the application can be repainted, whichever is slower). For this
     * reason, is most suitable for handling graphics that change every
     * frame or every few frames. The tick callback does not automatically
     * imply a relayout or repaint. If you want a repaint or relayout, and
     * aren’t changing widget properties that would trigger that (for example,
     * changing the text of a `GtkLabel`), then you will have to call
     * [method`Gtk`.Widget.queue_resize] or [method`Gtk`.Widget.queue_draw]
     * yourself.
     * 
     * [method`Gdk`.FrameClock.get_frame_time] should generally be used
     * for timing continuous animations and
     * [method`Gdk`.FrameTimings.get_predicted_presentation_time] if you are
     * trying to display isolated frames at particular times.
     * 
     * This is a more convenient alternative to connecting directly to the
     * [signal`Gdk`.FrameClock::update] signal of `GdkFrameClock`, since you
     * don't have to worry about when a `GdkFrameClock` is assigned to a widget.
     */
    addTickCallback(callback: Gtk.TickCallback): number
    /**
     * This function is only used by `GtkWidget` subclasses, to
     * assign a size, position and (optionally) baseline to their
     * child widgets.
     * 
     * In this function, the allocation and baseline may be adjusted.
     * The given allocation will be forced to be bigger than the
     * widget's minimum size, as well as at least 0×0 in size.
     * 
     * For a version that does not take a transform, see
     * [method`Gtk`.Widget.size_allocate].
     */
    allocate(width: number, height: number, baseline: number, transform?: Gsk.Transform | null): void
    /**
     * Called by widgets as the user moves around the window using
     * keyboard shortcuts.
     * 
     * The `direction` argument indicates what kind of motion is taking place (up,
     * down, left, right, tab forward, tab backward).
     * 
     * This function calls the [vfunc`Gtk`.Widget.focus] virtual function; widgets
     * can override the virtual function in order to implement appropriate focus
     * behavior.
     * 
     * The default `focus()` virtual function for a widget should return `TRUE` if
     * moving in `direction` left the focus on a focusable location inside that
     * widget, and `FALSE` if moving in `direction` moved the focus outside the
     * widget. When returning `TRUE`, widgets normallycall [method`Gtk`.Widget.grab_focus]
     * to place the focus accordingly; when returning `FALSE`, they don’t modify
     * the current focus location.
     * 
     * This function is used by custom widget implementations; if you're
     * writing an app, you’d use [method`Gtk`.Widget.grab_focus] to move
     * the focus to a particular widget.
     */
    childFocus(direction: Gtk.DirectionType): boolean
    /**
     * Computes the bounds for `widget` in the coordinate space of `target`.
     * 
     * FIXME: Explain what "bounds" are.
     * 
     * If the operation is successful, %TRUE is returned. If `widget` has no
     * bounds or the bounds cannot be expressed in `target'`s coordinate space
     * (for example if both widgets are in different windows), %FALSE is
     * returned and `bounds` is set to the zero rectangle.
     * 
     * It is valid for `widget` and `target` to be the same widget.
     */
    computeBounds(target: Gtk.Widget): [ /* returnType */ boolean, /* outBounds */ Graphene.Rect ]
    /**
     * Computes whether a container should give this widget
     * extra space when possible.
     * 
     * Containers should check this, rather than looking at
     * [method`Gtk`.Widget.get_hexpand] or [method`Gtk`.Widget.get_vexpand].
     * 
     * This function already checks whether the widget is visible, so
     * visibility does not need to be checked separately. Non-visible
     * widgets are not expanded.
     * 
     * The computed expand value uses either the expand setting explicitly
     * set on the widget itself, or, if none has been explicitly set,
     * the widget may expand if some of its children do.
     */
    computeExpand(orientation: Gtk.Orientation): boolean
    /**
     * Translates the given `point` in `widget'`s coordinates to coordinates
     * relative to `target’`s coordinate system.
     * 
     * In order to perform this operation, both widgets must share a
     * common ancestor.
     */
    computePoint(target: Gtk.Widget, point: Graphene.Point): [ /* returnType */ boolean, /* outPoint */ Graphene.Point ]
    /**
     * Computes a matrix suitable to describe a transformation from
     * `widget'`s coordinate system into `target'`s coordinate system.
     * 
     * The transform can not be computed in certain cases, for example
     * when `widget` and `target` do not share a common ancestor. In that
     * case `out_transform` gets set to the identity matrix.
     */
    computeTransform(target: Gtk.Widget): [ /* returnType */ boolean, /* outTransform */ Graphene.Matrix ]
    /**
     * Tests if the point at (`x,` `y)` is contained in `widget`.
     * 
     * The coordinates for (`x,` `y)` must be in widget coordinates, so
     * (0, 0) is assumed to be the top left of `widget'`s content area.
     */
    contains(x: number, y: number): boolean
    /**
     * Creates a new `PangoContext` with the appropriate font map,
     * font options, font description, and base direction for drawing
     * text for this widget.
     * 
     * See also [method`Gtk`.Widget.get_pango_context].
     */
    createPangoContext(): Pango.Context
    /**
     * Creates a new `PangoLayout` with the appropriate font map,
     * font description, and base direction for drawing text for
     * this widget.
     * 
     * If you keep a `PangoLayout` created in this way around,
     * you need to re-create it when the widget `PangoContext`
     * is replaced. This can be tracked by listening to changes
     * of the [property`Gtk`.Widget:root] property on the widget.
     */
    createPangoLayout(text?: string | null): Pango.Layout
    /**
     * Checks to see if a drag movement has passed the GTK drag threshold.
     */
    dragCheckThreshold(startX: number, startY: number, currentX: number, currentY: number): boolean
    /**
     * Notifies the user about an input-related error on this widget.
     * 
     * If the [property`Gtk`.Settings:gtk-error-bell] setting is %TRUE,
     * it calls [method`Gdk`.Surface.beep], otherwise it does nothing.
     * 
     * Note that the effect of [method`Gdk`.Surface.beep] can be configured
     * in many ways, depending on the windowing backend and the desktop
     * environment or window manager that is used.
     */
    errorBell(): void
    /**
     * Returns the baseline that has currently been allocated to `widget`.
     * 
     * This function is intended to be used when implementing handlers
     * for the `GtkWidget`Class.snapshot() function, and when allocating
     * child widgets in `GtkWidget`Class.size_allocate().
     */
    getAllocatedBaseline(): number
    /**
     * Returns the height that has currently been allocated to `widget`.
     */
    getAllocatedHeight(): number
    /**
     * Returns the width that has currently been allocated to `widget`.
     */
    getAllocatedWidth(): number
    /**
     * Retrieves the widget’s allocation.
     * 
     * Note, when implementing a layout container: a widget’s allocation
     * will be its “adjusted” allocation, that is, the widget’s parent
     * typically calls [method`Gtk`.Widget.size_allocate] with an allocation,
     * and that allocation is then adjusted (to handle margin
     * and alignment for example) before assignment to the widget.
     * [method`Gtk`.Widget.get_allocation] returns the adjusted allocation that
     * was actually assigned to the widget. The adjusted allocation is
     * guaranteed to be completely contained within the
     * [method`Gtk`.Widget.size_allocate] allocation, however.
     * 
     * So a layout container is guaranteed that its children stay inside
     * the assigned bounds, but not that they have exactly the bounds the
     * container assigned.
     */
    getAllocation(): /* allocation */ Gtk.Allocation
    /**
     * Gets the first ancestor of `widget` with type `widget_type`.
     * 
     * For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)`
     * gets the first `GtkBox` that’s an ancestor of `widget`. No
     * reference will be added to the returned widget; it should
     * not be unreferenced.
     * 
     * Note that unlike [method`Gtk`.Widget.is_ancestor], this function
     * considers `widget` to be an ancestor of itself.
     */
    getAncestor(widgetType: GObject.Type): Gtk.Widget | null
    /**
     * Determines whether the input focus can enter `widget` or any
     * of its children.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getCanFocus(): boolean
    /**
     * Queries whether `widget` can be the target of pointer events.
     */
    getCanTarget(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * 
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    getChildVisible(): boolean
    /**
     * Gets the clipboard object for `widget`.
     * 
     * This is a utility function to get the clipboard object for the
     * `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getClipboard(): Gdk.Clipboard
    /**
     * Returns the list of style classes applied to `widget`.
     */
    getCssClasses(): string[]
    /**
     * Returns the CSS name that is used for `self`.
     */
    getCssName(): string
    /**
     * Queries the cursor set on `widget`.
     * 
     * See [method`Gtk`.Widget.set_cursor] for details.
     */
    getCursor(): Gdk.Cursor | null
    /**
     * Gets the reading direction for a particular widget.
     * 
     * See [method`Gtk`.Widget.set_direction].
     */
    getDirection(): Gtk.TextDirection
    /**
     * Get the `GdkDisplay` for the toplevel window associated with
     * this widget.
     * 
     * This function can only be called after the widget has been
     * added to a widget hierarchy with a `GtkWindow` at the top.
     * 
     * In general, you should only create display specific
     * resources when a widget has been realized, and you should
     * free those resources when the widget is unrealized.
     */
    getDisplay(): Gdk.Display
    /**
     * Returns the widgets first child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getFirstChild(): Gtk.Widget | null
    /**
     * Returns the current focus child of `widget`.
     */
    getFocusChild(): Gtk.Widget | null
    /**
     * Returns whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * See [method`Gtk`.Widget.set_focus_on_click].
     */
    getFocusOnClick(): boolean
    /**
     * Determines whether `widget` can own the input focus.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getFocusable(): boolean
    /**
     * Gets the font map of `widget`.
     * 
     * See [method`Gtk`.Widget.set_font_map].
     */
    getFontMap(): Pango.FontMap | null
    /**
     * Returns the `cairo_font_options_t` of widget.
     * 
     * Seee [method`Gtk`.Widget.set_font_options].
     */
    getFontOptions(): cairo.FontOptions | null
    /**
     * Obtains the frame clock for a widget.
     * 
     * The frame clock is a global “ticker” that can be used to drive
     * animations and repaints. The most common reason to get the frame
     * clock is to call [method`Gdk`.FrameClock.get_frame_time], in order
     * to get a time to use for animating. For example you might record
     * the start of the animation with an initial value from
     * [method`Gdk`.FrameClock.get_frame_time], and then update the animation
     * by calling [method`Gdk`.FrameClock.get_frame_time] again during each repaint.
     * 
     * [method`Gdk`.FrameClock.request_phase] will result in a new frame on the
     * clock, but won’t necessarily repaint any widgets. To repaint a
     * widget, you have to use [method`Gtk`.Widget.queue_draw] which invalidates
     * the widget (thus scheduling it to receive a draw on the next
     * frame). gtk_widget_queue_draw() will also end up requesting a frame
     * on the appropriate frame clock.
     * 
     * A widget’s frame clock will not change while the widget is
     * mapped. Reparenting a widget (which implies a temporary unmap) can
     * change the widget’s frame clock.
     * 
     * Unrealized widgets do not have a frame clock.
     */
    getFrameClock(): Gdk.FrameClock | null
    /**
     * Gets the horizontal alignment of `widget`.
     * 
     * For backwards compatibility reasons this method will never return
     * %GTK_ALIGN_BASELINE, but instead it will convert it to
     * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
     * alignment.
     */
    getHalign(): Gtk.Align
    /**
     * Returns the current value of the `has-tooltip` property.
     */
    getHasTooltip(): boolean
    /**
     * Returns the content height of the widget.
     * 
     * This function returns the height passed to its
     * size-allocate implementation, which is the height you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getHeight(): number
    /**
     * Gets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Containers should use [method`Gtk`.Widget.compute_expand] rather
     * than this function, to see whether a widget, or any of its children,
     * has the expand flag set. If any child of a widget wants to
     * expand, the parent may ask to expand also.
     * 
     * This function only looks at the widget’s own hexpand flag, rather
     * than computing whether the entire widget tree rooted at this widget
     * wants to expand.
     */
    getHexpand(): boolean
    /**
     * Gets whether gtk_widget_set_hexpand() has been used
     * to explicitly set the expand flag on this widget.
     * 
     * If [property`Gtk`.Widget:hexpand] property is set, then it
     * overrides any computed expand value based on child widgets.
     * If `hexpand` is not set, then the expand value depends on
     * whether any children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    getHexpandSet(): boolean
    /**
     * Returns the widgets last child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getLastChild(): Gtk.Widget | null
    /**
     * Retrieves the layout manager used by `widget`.
     * 
     * See [method`Gtk`.Widget.set_layout_manager].
     */
    getLayoutManager(): Gtk.LayoutManager | null
    /**
     * Whether the widget is mapped.
     */
    getMapped(): boolean
    /**
     * Gets the bottom margin of `widget`.
     */
    getMarginBottom(): number
    /**
     * Gets the end margin of `widget`.
     */
    getMarginEnd(): number
    /**
     * Gets the start margin of `widget`.
     */
    getMarginStart(): number
    /**
     * Gets the top margin of `widget`.
     */
    getMarginTop(): number
    /**
     * Retrieves the name of a widget.
     * 
     * See [method`Gtk`.Widget.set_name] for the significance of widget names.
     */
    getName(): string
    /**
     * Returns the nearest `GtkNative` ancestor of `widget`.
     * 
     * This function will return %NULL if the widget is not
     * contained inside a widget tree with a native ancestor.
     * 
     * `GtkNative` widgets will return themselves here.
     */
    getNative(): Gtk.Native | null
    /**
     * Returns the widgets next sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getNextSibling(): Gtk.Widget | null
    /**
     * #Fetches the requested opacity for this widget.
     * 
     * See [method`Gtk`.Widget.set_opacity].
     */
    getOpacity(): number
    /**
     * Returns the widgets overflow value.
     */
    getOverflow(): Gtk.Overflow
    /**
     * Gets a `PangoContext` with the appropriate font map, font description,
     * and base direction for this widget.
     * 
     * Unlike the context returned by [method`Gtk`.Widget.create_pango_context],
     * this context is owned by the widget (it can be used until the screen
     * for the widget changes or the widget is removed from its toplevel),
     * and will be updated to match any changes to the widget’s attributes.
     * This can be tracked by listening to changes of the
     * [property`Gtk`.Widget:root] property on the widget.
     */
    getPangoContext(): Pango.Context
    /**
     * Returns the parent widget of `widget`.
     */
    getParent(): Gtk.Widget | null
    /**
     * Retrieves the minimum and natural size of a widget, taking
     * into account the widget’s preference for height-for-width management.
     * 
     * This is used to retrieve a suitable size by container widgets which do
     * not impose any restrictions on the child placement. It can be used
     * to deduce toplevel window and menu sizes as well as child widgets in
     * free-form containers such as `GtkFixed`.
     * 
     * Handle with care. Note that the natural height of a height-for-width
     * widget will generally be a smaller size than the minimum height, since
     * the required height for the natural width is generally smaller than the
     * required height for the minimum width.
     * 
     * Use [id`gtk_widget_measure]` if you want to support baseline alignment.
     */
    getPreferredSize(): [ /* minimumSize */ Gtk.Requisition | null, /* naturalSize */ Gtk.Requisition | null ]
    /**
     * Returns the widgets previous sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getPrevSibling(): Gtk.Widget | null
    /**
     * Gets the primary clipboard of `widget`.
     * 
     * This is a utility function to get the primary clipboard object
     * for the `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getPrimaryClipboard(): Gdk.Clipboard
    /**
     * Determines whether `widget` is realized.
     */
    getRealized(): boolean
    /**
     * Determines whether `widget` is always treated as the default widget
     * within its toplevel when it has the focus, even if another widget
     * is the default.
     * 
     * See [method`Gtk`.Widget.set_receives_default].
     */
    getReceivesDefault(): boolean
    /**
     * Gets whether the widget prefers a height-for-width layout
     * or a width-for-height layout.
     * 
     * Single-child widgets generally propagate the preference of
     * their child, more complex widgets need to request something
     * either in context of their children or in context of their
     * allocation capabilities.
     */
    getRequestMode(): Gtk.SizeRequestMode
    /**
     * Returns the `GtkRoot` widget of `widget`.
     * 
     * This function will return %NULL if the widget is not contained
     * inside a widget tree with a root widget.
     * 
     * `GtkRoot` widgets will return themselves here.
     */
    getRoot(): Gtk.Root | null
    /**
     * Retrieves the internal scale factor that maps from window
     * coordinates to the actual device pixels.
     * 
     * On traditional systems this is 1, on high density outputs,
     * it can be a higher value (typically 2).
     * 
     * See [method`Gdk`.Surface.get_scale_factor].
     */
    getScaleFactor(): number
    /**
     * Returns the widget’s sensitivity.
     * 
     * This function returns the value that has been set using
     * [method`Gtk`.Widget.set_sensitive]).
     * 
     * The effective sensitivity of a widget is however determined
     * by both its own and its parent widget’s sensitivity.
     * See [method`Gtk`.Widget.is_sensitive].
     */
    getSensitive(): boolean
    /**
     * Gets the settings object holding the settings used for this widget.
     * 
     * Note that this function can only be called when the `GtkWidget`
     * is attached to a toplevel, since the settings object is specific
     * to a particular `GdkDisplay`. If you want to monitor the widget for
     * changes in its settings, connect to the `notify::display` signal.
     */
    getSettings(): Gtk.Settings
    /**
     * Returns the content width or height of the widget.
     * 
     * Which dimension is returned depends on `orientation`.
     * 
     * This is equivalent to calling [method`Gtk`.Widget.get_width]
     * for %GTK_ORIENTATION_HORIZONTAL or [method`Gtk`.Widget.get_height]
     * for %GTK_ORIENTATION_VERTICAL, but can be used when
     * writing orientation-independent code, such as when
     * implementing [iface`Gtk`.Orientable] widgets.
     */
    getSize(orientation: Gtk.Orientation): number
    /**
     * Gets the size request that was explicitly set for the widget using
     * gtk_widget_set_size_request().
     * 
     * A value of -1 stored in `width` or `height` indicates that that
     * dimension has not been set explicitly and the natural requisition
     * of the widget will be used instead. See
     * [method`Gtk`.Widget.set_size_request]. To get the size a widget will
     * actually request, call [method`Gtk`.Widget.measure] instead of
     * this function.
     */
    getSizeRequest(): [ /* width */ number | null, /* height */ number | null ]
    /**
     * Returns the widget state as a flag set.
     * 
     * It is worth mentioning that the effective %GTK_STATE_FLAG_INSENSITIVE
     * state will be returned, that is, also based on parent insensitivity,
     * even if `widget` itself is sensitive.
     * 
     * Also note that if you are looking for a way to obtain the
     * [flags`Gtk`.StateFlags] to pass to a [class`Gtk`.StyleContext]
     * method, you should look at [method`Gtk`.StyleContext.get_state].
     */
    getStateFlags(): Gtk.StateFlags
    /**
     * Returns the style context associated to `widget`.
     * 
     * The returned object is guaranteed to be the same
     * for the lifetime of `widget`.
     */
    getStyleContext(): Gtk.StyleContext
    /**
     * Fetch an object build from the template XML for `widget_type` in
     * this `widget` instance.
     * 
     * This will only report children which were previously declared
     * with [method`Gtk`.WidgetClass.bind_template_child_full] or one of its
     * variants.
     * 
     * This function is only meant to be called for code which is private
     * to the `widget_type` which declared the child and is meant for language
     * bindings which cannot easily make use of the GObject structure offsets.
     */
    getTemplateChild(widgetType: GObject.Type, name: string): GObject.Object
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the tooltip has not been set using
     * [method`Gtk`.Widget.set_tooltip_markup], this
     * function returns %NULL.
     */
    getTooltipMarkup(): string | null
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the `widget'`s tooltip was set using
     * [method`Gtk`.Widget.set_tooltip_markup],
     * this function will return the escaped text.
     */
    getTooltipText(): string | null
    /**
     * Gets the vertical alignment of `widget`.
     */
    getValign(): Gtk.Align
    /**
     * Gets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.get_hexpand] for more detail.
     */
    getVexpand(): boolean
    /**
     * Gets whether gtk_widget_set_vexpand() has been used to
     * explicitly set the expand flag on this widget.
     * 
     * See [method`Gtk`.Widget.get_hexpand_set] for more detail.
     */
    getVexpandSet(): boolean
    /**
     * Determines whether the widget is visible.
     * 
     * If you want to take into account whether the widget’s
     * parent is also marked as visible, use
     * [method`Gtk`.Widget.is_visible] instead.
     * 
     * This function does not check if the widget is
     * obscured in any way.
     * 
     * See [method`Gtk`.Widget.set_visible].
     */
    getVisible(): boolean
    /**
     * Returns the content width of the widget.
     * 
     * This function returns the width passed to its
     * size-allocate implementation, which is the width you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getWidth(): number
    /**
     * Causes `widget` to have the keyboard focus for the `GtkWindow` it's inside.
     * 
     * If `widget` is not focusable, or its [vfunc`Gtk`.Widget.grab_focus]
     * implementation cannot transfer the focus to a descendant of `widget`
     * that is focusable, it will not take focus and %FALSE will be returned.
     * 
     * Calling [method`Gtk`.Widget.grab_focus] on an already focused widget
     * is allowed, should not have an effect, and return %TRUE.
     */
    grabFocus(): boolean
    /**
     * Returns whether `css_class` is currently applied to `widget`.
     */
    hasCssClass(cssClass: string): boolean
    /**
     * Determines if the widget should show a visible indication that
     * it has the global input focus.
     * 
     * This is a convenience function that takes into account whether
     * focus indication should currently be shown in the toplevel window
     * of `widget`. See [method`Gtk`.Window.get_focus_visible] for more
     * information about focus indication.
     * 
     * To find out if the widget has the global input focus, use
     * [method`Gtk`.Widget.has_focus].
     */
    hasVisibleFocus(): boolean
    /**
     * Reverses the effects of gtk_widget_show().
     * 
     * This is causing the widget to be hidden (invisible to the user).
     */
    hide(): void
    /**
     * Returns whether the widget is currently being destroyed.
     * 
     * This information can sometimes be used to avoid doing
     * unnecessary work.
     */
    inDestruction(): boolean
    /**
     * Creates and initializes child widgets defined in templates.
     * 
     * This function must be called in the instance initializer
     * for any class which assigned itself a template using
     * [method`Gtk`.WidgetClass.set_template].
     * 
     * It is important to call this function in the instance initializer
     * of a `GtkWidget` subclass and not in `GObject.constructed()` or
     * `GObject.constructor()` for two reasons:
     * 
     *  - derived widgets will assume that the composite widgets
     *    defined by its parent classes have been created in their
     *    relative instance initializers
     *  - when calling `g_object_new()` on a widget with composite templates,
     *    it’s important to build the composite widgets before the construct
     *    properties are set. Properties passed to `g_object_new()` should
     *    take precedence over properties set in the private template XML
     * 
     * A good rule of thumb is to call this function as the first thing in
     * an instance initialization function.
     */
    initTemplate(): void
    /**
     * Inserts `group` into `widget`.
     * 
     * Children of `widget` that implement [iface`Gtk`.Actionable] can
     * then be associated with actions in `group` by setting their
     * “action-name” to `prefix`.`action-name`.
     * 
     * Note that inheritance is defined for individual actions. I.e.
     * even if you insert a group with prefix `prefix,` actions with
     * the same prefix will still be inherited from the parent, unless
     * the group contains an action with the same name.
     * 
     * If `group` is %NULL, a previously inserted group for `name` is
     * removed from `widget`.
     */
    insertActionGroup(name: string, group?: Gio.ActionGroup | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed after `previous_sibling,` or at the beginning if
     * `previous_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_prev_sibling(widget)`
     * will return `previous_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this
     * function can also be used to reorder `widget` in the child widget
     * list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertAfter(parent: Gtk.Widget, previousSibling?: Gtk.Widget | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed before `next_sibling,` or at the end if
     * `next_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_next_sibling(widget)`
     * will return `next_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this function
     * can also be used to reorder `widget` in the child widget list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertBefore(parent: Gtk.Widget, nextSibling?: Gtk.Widget | null): void
    /**
     * Determines whether `widget` is somewhere inside `ancestor,`
     * possibly with intermediate containers.
     */
    isAncestor(ancestor: Gtk.Widget): boolean
    /**
     * Determines whether `widget` can be drawn to.
     * 
     * A widget can be drawn if it is mapped and visible.
     */
    isDrawable(): boolean
    /**
     * Determines if the widget is the focus widget within its
     * toplevel.
     * 
     * This does not mean that the [property`Gtk`.Widget:has-focus]
     * property is necessarily set; [property`Gtk`.Widget:has-focus]
     * will only be set if the toplevel widget additionally has the
     * global input focus.
     */
    isFocus(): boolean
    /**
     * Returns the widget’s effective sensitivity.
     * 
     * This means it is sensitive itself and also its
     * parent widget is sensitive.
     */
    isSensitive(): boolean
    /**
     * Determines whether the widget and all its parents are marked as
     * visible.
     * 
     * This function does not check if the widget is obscured in any way.
     * 
     * See also [method`Gtk`.Widget.get_visible] and
     * [method`Gtk`.Widget.set_visible].
     */
    isVisible(): boolean
    /**
     * Emits the `::keynav-failed` signal on the widget.
     * 
     * This function should be called whenever keyboard navigation
     * within a single widget hits a boundary.
     * 
     * The return value of this function should be interpreted
     * in a way similar to the return value of
     * [method`Gtk`.Widget.child_focus]. When %TRUE is returned,
     * stay in the widget, the failed keyboard  navigation is OK
     * and/or there is nowhere we can/should move the focus to.
     * When %FALSE is returned, the caller should continue with
     * keyboard navigation outside the widget, e.g. by calling
     * [method`Gtk`.Widget.child_focus] on the widget’s toplevel.
     * 
     * The default [signal`Gtk`.Widget::keynav-failed] handler returns
     * %FALSE for %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD.
     * For the other values of `GtkDirectionType` it returns %TRUE.
     * 
     * Whenever the default handler returns %TRUE, it also calls
     * [method`Gtk`.Widget.error_bell] to notify the user of the
     * failed keyboard navigation.
     * 
     * A use case for providing an own implementation of ::keynav-failed
     * (either by connecting to it or by overriding it) would be a row of
     * [class`Gtk`.Entry] widgets where the user should be able to navigate
     * the entire row with the cursor keys, as e.g. known from user
     * interfaces that require entering license keys.
     */
    keynavFailed(direction: Gtk.DirectionType): boolean
    /**
     * Returns the widgets for which this widget is the target of a
     * mnemonic.
     * 
     * Typically, these widgets will be labels. See, for example,
     * [method`Gtk`.Label.set_mnemonic_widget].
     * 
     * The widgets in the list are not individually referenced.
     * If you want to iterate through the list and perform actions
     * involving callbacks that might destroy the widgets, you
     * must call `g_list_foreach (result, (GFunc)g_object_ref, NULL)`
     * first, and then unref all the widgets afterwards.
     */
    listMnemonicLabels(): Gtk.Widget[]
    /**
     * Causes a widget to be mapped if it isn’t already.
     * 
     * This function is only for use in widget implementations.
     */
    map(): void
    /**
     * Measures `widget` in the orientation `orientation` and for the given `for_size`.
     * 
     * As an example, if `orientation` is %GTK_ORIENTATION_HORIZONTAL and `for_size`
     * is 300, this functions will compute the minimum and natural width of `widget`
     * if it is allocated at a height of 300 pixels.
     * 
     * See [GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management) for
     * a more details on implementing `GtkWidgetClass.measure()`.
     */
    measure(orientation: Gtk.Orientation, forSize: number): [ /* minimum */ number | null, /* natural */ number | null, /* minimumBaseline */ number | null, /* naturalBaseline */ number | null ]
    /**
     * Emits the ::mnemonic-activate signal.
     * 
     * See [signal`Gtk`.Widget::mnemonic-activate].
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Returns a `GListModel` to track the children of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track children and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeChildren(): Gio.ListModel
    /**
     * Returns a `GListModel` to track the [class`Gtk`.EventController]s
     * of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track controllers and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeControllers(): Gio.ListModel
    /**
     * Finds the descendant of `widget` closest to the point (`x,` `y)`.
     * 
     * The point must be given in widget coordinates, so (0, 0) is assumed
     * to be the top left of `widget'`s content area.
     * 
     * Usually widgets will return %NULL if the given coordinate is not
     * contained in `widget` checked via [method`Gtk`.Widget.contains].
     * Otherwise they will recursively try to find a child that does
     * not return %NULL. Widgets are however free to customize their
     * picking algorithm.
     * 
     * This function is used on the toplevel to determine the widget
     * below the mouse cursor for purposes of hover highlighting and
     * delivering events.
     */
    pick(x: number, y: number, flags: Gtk.PickFlags): Gtk.Widget | null
    /**
     * Flags the widget for a rerun of the [vfunc`Gtk`.Widget.size_allocate]
     * function.
     * 
     * Use this function instead of [method`Gtk`.Widget.queue_resize]
     * when the `widget'`s size request didn't change but it wants to
     * reposition its contents.
     * 
     * An example user of this function is [method`Gtk`.Widget.set_halign].
     * 
     * This function is only for use in widget implementations.
     */
    queueAllocate(): void
    /**
     * Schedules this widget to be redrawn in the paint phase
     * of the current or the next frame.
     * 
     * This means `widget'`s [vfunc`Gtk`.Widget.snapshot]
     * implementation will be called.
     */
    queueDraw(): void
    /**
     * Flags a widget to have its size renegotiated.
     * 
     * This should be called when a widget for some reason has a new
     * size request. For example, when you change the text in a
     * [class`Gtk`.Label], the label queues a resize to ensure there’s
     * enough space for the new text.
     * 
     * Note that you cannot call gtk_widget_queue_resize() on a widget
     * from inside its implementation of the [vfunc`Gtk`.Widget.size_allocate]
     * virtual method. Calls to gtk_widget_queue_resize() from inside
     * [vfunc`Gtk`.Widget.size_allocate] will be silently ignored.
     * 
     * This function is only for use in widget implementations.
     */
    queueResize(): void
    /**
     * Creates the GDK resources associated with a widget.
     * 
     * Normally realization happens implicitly; if you show a widget
     * and all its parent containers, then the widget will be realized
     * and mapped automatically.
     * 
     * Realizing a widget requires all the widget’s parent widgets to be
     * realized; calling this function realizes the widget’s parents
     * in addition to `widget` itself. If a widget is not yet inside a
     * toplevel window when you realize it, bad things will happen.
     * 
     * This function is primarily used in widget implementations, and
     * isn’t very useful otherwise. Many times when you think you might
     * need it, a better approach is to connect to a signal that will be
     * called after the widget is realized automatically, such as
     * [signal`Gtk`.Widget::realize].
     */
    realize(): void
    /**
     * Removes `controller` from `widget,` so that it doesn't process
     * events anymore.
     * 
     * It should not be used again.
     * 
     * Widgets will remove all event controllers automatically when they
     * are destroyed, there is normally no need to call this function.
     */
    removeController(controller: Gtk.EventController): void
    /**
     * Removes a style from `widget`.
     * 
     * After this, the style of `widget` will stop matching for `css_class`.
     */
    removeCssClass(cssClass: string): void
    /**
     * Removes a widget from the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. The widget must
     * have previously been added to the list with
     * [method`Gtk`.Widget.add_mnemonic_label].
     */
    removeMnemonicLabel(label: Gtk.Widget): void
    /**
     * Removes a tick callback previously registered with
     * gtk_widget_add_tick_callback().
     */
    removeTickCallback(id: number): void
    /**
     * Specifies whether the input focus can enter the widget
     * or any of its children.
     * 
     * Applications should set `can_focus` to %FALSE to mark a
     * widget as for pointer/touch use only.
     * 
     * Note that having `can_focus` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and focusable and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setCanFocus(canFocus: boolean): void
    /**
     * Sets whether `widget` can be the target of pointer events.
     */
    setCanTarget(canTarget: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its parent.
     * 
     * The child visibility can be set for widget before it is added
     * to a container with [method`Gtk`.Widget.set_parent], to avoid
     * mapping children unnecessary before immediately unmapping them.
     * However it will be reset to its default state of %TRUE when the
     * widget is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    setChildVisible(childVisible: boolean): void
    /**
     * Clear all style classes applied to `widget`
     * and replace them with `classes`.
     */
    setCssClasses(classes: string[]): void
    /**
     * Sets the cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * If the `cursor` is NULL, `widget` will use the cursor
     * inherited from the parent widget.
     */
    setCursor(cursor?: Gdk.Cursor | null): void
    /**
     * Sets a named cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * This is a utility function that creates a cursor via
     * [ctor`Gdk`.Cursor.new_from_name] and then sets it on `widget`
     * with [method`Gtk`.Widget.set_cursor]. See those functions for
     * details.
     * 
     * On top of that, this function allows `name` to be %NULL, which
     * will do the same as calling [method`Gtk`.Widget.set_cursor]
     * with a %NULL cursor.
     */
    setCursorFromName(name?: string | null): void
    /**
     * Sets the reading direction on a particular widget.
     * 
     * This direction controls the primary direction for widgets
     * containing text, and also the direction in which the children
     * of a container are packed. The ability to set the direction is
     * present in order so that correct localization into languages with
     * right-to-left reading directions can be done. Generally, applications
     * will let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitly
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by [func`Gtk`.Widget.set_default_direction] will be used.
     */
    setDirection(dir: Gtk.TextDirection): void
    /**
     * Set `child` as the current focus child of `widget`.
     * 
     * This function is only suitable for widget implementations.
     * If you want a certain widget to get the input focus, call
     * [method`Gtk`.Widget.grab_focus] on it.
     */
    setFocusChild(child?: Gtk.Widget | null): void
    /**
     * Sets whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * Making mouse clicks not grab focus is useful in places like
     * toolbars where you don’t want the keyboard focus removed from
     * the main area of the application.
     */
    setFocusOnClick(focusOnClick: boolean): void
    /**
     * Specifies whether `widget` can own the input focus.
     * 
     * Widget implementations should set `focusable` to %TRUE in
     * their init() function if they want to receive keyboard input.
     * 
     * Note that having `focusable` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and can-focus and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setFocusable(focusable: boolean): void
    /**
     * Sets the font map to use for Pango rendering.
     * 
     * The font map is the object that is used to look up fonts.
     * Setting a custom font map can be useful in special situations,
     * e.g. when you need to add application-specific fonts to the set
     * of available fonts.
     * 
     * When not set, the widget will inherit the font map from its parent.
     */
    setFontMap(fontMap?: Pango.FontMap | null): void
    /**
     * Sets the `cairo_font_options_t` used for Pango rendering
     * in this widget.
     * 
     * When not set, the default font options for the `GdkDisplay`
     * will be used.
     */
    setFontOptions(options?: cairo.FontOptions | null): void
    /**
     * Sets the horizontal alignment of `widget`.
     */
    setHalign(align: Gtk.Align): void
    /**
     * Sets the `has-tooltip` property on `widget` to `has_tooltip`.
     */
    setHasTooltip(hasTooltip: boolean): void
    /**
     * Sets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Call this function to set the expand flag if you would like your
     * widget to become larger horizontally when the window has extra
     * room.
     * 
     * By default, widgets automatically expand if any of their children
     * want to expand. (To see if a widget will automatically expand given
     * its current children and state, call [method`Gtk`.Widget.compute_expand].
     * A container can decide how the expandability of children affects the
     * expansion of the container by overriding the compute_expand virtual
     * method on `GtkWidget`.).
     * 
     * Setting hexpand explicitly with this function will override the
     * automatic expand behavior.
     * 
     * This function forces the widget to expand or not to expand,
     * regardless of children.  The override occurs because
     * [method`Gtk`.Widget.set_hexpand] sets the hexpand-set property (see
     * [method`Gtk`.Widget.set_hexpand_set]) which causes the widget’s hexpand
     * value to be used, rather than looking at children and widget state.
     */
    setHexpand(expand: boolean): void
    /**
     * Sets whether the hexpand flag will be used.
     * 
     * The [property`Gtk`.Widget:hexpand-set] property will be set
     * automatically when you call [method`Gtk`.Widget.set_hexpand]
     * to set hexpand, so the most likely reason to use this function
     * would be to unset an explicit expand flag.
     * 
     * If hexpand is set, then it overrides any computed
     * expand value based on child widgets. If hexpand is not
     * set, then the expand value depends on whether any
     * children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    setHexpandSet(set: boolean): void
    /**
     * Sets the layout manager delegate instance that provides an
     * implementation for measuring and allocating the children of `widget`.
     */
    setLayoutManager(layoutManager?: Gtk.LayoutManager | null): void
    /**
     * Sets the bottom margin of `widget`.
     */
    setMarginBottom(margin: number): void
    /**
     * Sets the end margin of `widget`.
     */
    setMarginEnd(margin: number): void
    /**
     * Sets the start margin of `widget`.
     */
    setMarginStart(margin: number): void
    /**
     * Sets the top margin of `widget`.
     */
    setMarginTop(margin: number): void
    /**
     * Sets a widgets name.
     * 
     * Setting a name allows you to refer to the widget from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for [class`Gtk`.StyleContext].
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     */
    setName(name: string): void
    /**
     * Request the `widget` to be rendered partially transparent.
     * 
     * An opacity of 0 is fully transparent and an opacity of 1
     * is fully opaque.
     * 
     * Opacity works on both toplevel widgets and child widgets, although
     * there are some limitations: For toplevel widgets, applying opacity
     * depends on the capabilities of the windowing system. On X11, this
     * has any effect only on X displays with a compositing manager,
     * see gdk_display_is_composited(). On Windows and Wayland it should
     * always work, although setting a window’s opacity after the window
     * has been shown may cause some flicker.
     * 
     * Note that the opacity is inherited through inclusion — if you set
     * a toplevel to be partially translucent, all of its content will
     * appear translucent, since it is ultimatively rendered on that
     * toplevel. The opacity value itself is not inherited by child
     * widgets (since that would make widgets deeper in the hierarchy
     * progressively more translucent). As a consequence, [class`Gtk`.Popover]s
     * and other [iface`Gtk`.Native] widgets with their own surface will use their
     * own opacity value, and thus by default appear non-translucent,
     * even if they are attached to a toplevel that is translucent.
     */
    setOpacity(opacity: number): void
    /**
     * Sets how `widget` treats content that is drawn outside the
     * widget's content area.
     * 
     * See the definition of [enum`Gtk`.Overflow] for details.
     * 
     * This setting is provided for widget implementations and
     * should not be used by application code.
     * 
     * The default value is %GTK_OVERFLOW_VISIBLE.
     */
    setOverflow(overflow: Gtk.Overflow): void
    /**
     * Sets `parent` as the parent widget of `widget`.
     * 
     * This takes care of details such as updating the state and style
     * of the child to reflect its new location and resizing the parent.
     * The opposite function is [method`Gtk`.Widget.unparent].
     * 
     * This function is useful only when implementing subclasses of
     * `GtkWidget`.
     */
    setParent(parent: Gtk.Widget): void
    /**
     * Specifies whether `widget` will be treated as the default
     * widget within its toplevel when it has the focus, even if
     * another widget is the default.
     */
    setReceivesDefault(receivesDefault: boolean): void
    /**
     * Sets the sensitivity of a widget.
     * 
     * A widget is sensitive if the user can interact with it.
     * Insensitive widgets are “grayed out” and the user can’t
     * interact with them. Insensitive widgets are known as
     * “inactive”, “disabled”, or “ghosted” in some other toolkits.
     */
    setSensitive(sensitive: boolean): void
    /**
     * Sets the minimum size of a widget.
     * 
     * That is, the widget’s size request will be at least `width`
     * by `height`. You can use this function to force a widget to
     * be larger than it normally would be.
     * 
     * In most cases, [method`Gtk`.Window.set_default_size] is a better
     * choice for toplevel windows than this function; setting the default
     * size will still allow users to shrink the window. Setting the size
     * request will force them to leave the window at least as large as
     * the size request.
     * 
     * Note the inherent danger of setting any fixed size - themes,
     * translations into other languages, different fonts, and user action
     * can all change the appropriate size for a given widget. So, it's
     * basically impossible to hardcode a size that will always be
     * correct.
     * 
     * The size request of a widget is the smallest size a widget can
     * accept while still functioning well and drawing itself correctly.
     * However in some strange cases a widget may be allocated less than
     * its requested size, and in many cases a widget may be allocated more
     * space than it requested.
     * 
     * If the size request in a given direction is -1 (unset), then
     * the “natural” size request of the widget will be used instead.
     * 
     * The size request set here does not include any margin from the
     * properties
     * [property`Gtk`.Widget:margin-start],
     * [property`Gtk`.Widget:margin-end],
     * [property`Gtk`.Widget:margin-top], and
     * [property`Gtk`.Widget:margin-bottom], but it does include pretty
     * much all other padding or border properties set by any subclass
     * of `GtkWidget`.
     */
    setSizeRequest(width: number, height: number): void
    /**
     * Turns on flag values in the current widget state.
     * 
     * Typical widget states are insensitive, prelighted, etc.
     * 
     * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
     * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set
     * the widget's direction, use [method`Gtk`.Widget.set_direction].
     * 
     * This function is for use in widget implementations.
     */
    setStateFlags(flags: Gtk.StateFlags, clear: boolean): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked
     * up with Pango markup.
     * 
     * This function will take care of setting the
     * [property`Gtk`.Widget:has-tooltip] as a side effect, and of the
     * default handler for the [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_markup].
     */
    setTooltipMarkup(markup?: string | null): void
    /**
     * Sets `text` as the contents of the tooltip.
     * 
     * If `text` contains any markup, it will be escaped.
     * 
     * This function will take care of setting
     * [property`Gtk`.Widget:has-tooltip] as a side effect,
     * and of the default handler for the
     * [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_text].
     */
    setTooltipText(text?: string | null): void
    /**
     * Sets the vertical alignment of `widget`.
     */
    setValign(align: Gtk.Align): void
    /**
     * Sets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.set_hexpand] for more detail.
     */
    setVexpand(expand: boolean): void
    /**
     * Sets whether the vexpand flag will be used.
     * 
     * See [method`Gtk`.Widget.set_hexpand_set] for more detail.
     */
    setVexpandSet(set: boolean): void
    /**
     * Sets the visibility state of `widget`.
     * 
     * Note that setting this to %TRUE doesn’t mean the widget is
     * actually viewable, see [method`Gtk`.Widget.get_visible].
     * 
     * This function simply calls [method`Gtk`.Widget.show] or
     * [method`Gtk`.Widget.hide] but is nicer to use when the
     * visibility of the widget depends on some condition.
     */
    setVisible(visible: boolean): void
    /**
     * Returns whether `widget` should contribute to
     * the measuring and allocation of its parent.
     * 
     * This is %FALSE for invisible children, but also
     * for children that have their own surface.
     */
    shouldLayout(): boolean
    /**
     * Flags a widget to be displayed.
     * 
     * Any widget that isn’t shown will not appear on the screen.
     * 
     * Remember that you have to show the containers containing a widget,
     * in addition to the widget itself, before it will appear onscreen.
     * 
     * When a toplevel container is shown, it is immediately realized and
     * mapped; other shown widgets are realized and mapped when their
     * toplevel container is realized and mapped.
     */
    show(): void
    /**
     * Allocates widget with a transformation that translates
     * the origin to the position in `allocation`.
     * 
     * This is a simple form of [method`Gtk`.Widget.allocate].
     */
    sizeAllocate(allocation: Gtk.Allocation, baseline: number): void
    /**
     * Snapshot the a child of `widget`.
     * 
     * When a widget receives a call to the snapshot function,
     * it must send synthetic [vfunc`Gtk`.Widget.snapshot] calls
     * to all children. This function provides a convenient way
     * of doing this. A widget, when it receives a call to its
     * [vfunc`Gtk`.Widget.snapshot] function, calls
     * gtk_widget_snapshot_child() once for each child, passing in
     * the `snapshot` the widget received.
     * 
     * gtk_widget_snapshot_child() takes care of translating the origin of
     * `snapshot,` and deciding whether the child needs to be snapshot.
     * 
     * This function does nothing for children that implement `GtkNative`.
     */
    snapshotChild(child: Gtk.Widget, snapshot: Gtk.Snapshot): void
    /**
     * Translate coordinates relative to `src_widget’`s allocation
     * to coordinates relative to `dest_widget’`s allocations.
     * 
     * In order to perform this operation, both widget must share
     * a common ancestor.
     */
    translateCoordinates(destWidget: Gtk.Widget, srcX: number, srcY: number): [ /* returnType */ boolean, /* destX */ number | null, /* destY */ number | null ]
    /**
     * Triggers a tooltip query on the display where the toplevel
     * of `widget` is located.
     */
    triggerTooltipQuery(): void
    /**
     * Causes a widget to be unmapped if it’s currently mapped.
     * 
     * This function is only for use in widget implementations.
     */
    unmap(): void
    /**
     * Dissociate `widget` from its parent.
     * 
     * This function is only for use in widget implementations,
     * typically in dispose.
     */
    unparent(): void
    /**
     * Causes a widget to be unrealized (frees all GDK resources
     * associated with the widget).
     * 
     * This function is only useful in widget implementations.
     */
    unrealize(): void
    /**
     * Turns off flag values for the current widget state.
     * 
     * See [method`Gtk`.Widget.set_state_flags].
     * 
     * This function is for use in widget implementations.
     */
    unsetStateFlags(flags: Gtk.StateFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Methods of Gtk-4.0.Gtk.Accessible */
    /**
     * Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
     */
    getAccessibleRole(): Gtk.AccessibleRole
    /**
     * Resets the accessible `property` to its default value.
     */
    resetProperty(property: Gtk.AccessibleProperty): void
    /**
     * Resets the accessible `relation` to its default value.
     */
    resetRelation(relation: Gtk.AccessibleRelation): void
    /**
     * Resets the accessible `state` to its default value.
     */
    resetState(state: Gtk.AccessibleState): void
    /**
     * Updates an array of accessible properties.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * property change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateProperty(properties: Gtk.AccessibleProperty[], values: any[]): void
    /**
     * Updates an array of accessible relations.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * relation change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateRelation(relations: Gtk.AccessibleRelation[], values: any[]): void
    /**
     * Updates an array of accessible states.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * state change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateState(states: Gtk.AccessibleState[], values: any[]): void
    /* Methods of Gtk-4.0.Gtk.Buildable */
    /**
     * Gets the ID of the `buildable` object.
     * 
     * `GtkBuilder` sets the name based on the ID attribute
     * of the <object> tag used to construct the `buildable`.
     */
    getBuildableId(): string | null
    /* Signals of GtkSource-5.GtkSource.GutterRenderer */
    /**
     * The signal is emitted when the renderer is activated.
     */
    connect(sigName: "activate", callback: ((iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number) => void)): number
    on(sigName: "activate", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "activate", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "activate", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number) => void): NodeJS.EventEmitter
    emit(sigName: "activate", iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number): void
    /**
     * The signal is emitted when the renderer can possibly be activated.
     */
    connect(sigName: "query-activatable", callback: ((iter: Gtk.TextIter, area: Gdk.Rectangle) => boolean)): number
    on(sigName: "query-activatable", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-activatable", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-activatable", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle) => void): NodeJS.EventEmitter
    emit(sigName: "query-activatable", iter: Gtk.TextIter, area: Gdk.Rectangle): void
    connect(sigName: "query-data", callback: ((object: GObject.Object, p0: number) => void)): number
    on(sigName: "query-data", callback: (object: GObject.Object, p0: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-data", callback: (object: GObject.Object, p0: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-data", callback: (object: GObject.Object, p0: number) => void): NodeJS.EventEmitter
    emit(sigName: "query-data", object: GObject.Object, p0: number): void
    /* Signals of Gtk-4.0.Gtk.Widget */
    /**
     * Signals that all holders of a reference to the widget should release
     * the reference that they hold.
     * 
     * May result in finalization of the widget if all references are released.
     * 
     * This signal is not suitable for saving widget state.
     */
    connect(sigName: "destroy", callback: (() => void)): number
    on(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "destroy", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "destroy"): void
    /**
     * Emitted when the text direction of a widget changes.
     */
    connect(sigName: "direction-changed", callback: ((previousDirection: Gtk.TextDirection) => void)): number
    on(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void): NodeJS.EventEmitter
    emit(sigName: "direction-changed", previousDirection: Gtk.TextDirection): void
    /**
     * Emitted when `widget` is hidden.
     */
    connect(sigName: "hide", callback: (() => void)): number
    on(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "hide", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "hide"): void
    /**
     * Emitted if keyboard navigation fails.
     * 
     * See [method`Gtk`.Widget.keynav_failed] for details.
     */
    connect(sigName: "keynav-failed", callback: ((direction: Gtk.DirectionType) => boolean)): number
    on(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "keynav-failed", direction: Gtk.DirectionType): void
    /**
     * Emitted when `widget` is going to be mapped.
     * 
     * A widget is mapped when the widget is visible (which is controlled with
     * [property`Gtk`.Widget:visible]) and all its parents up to the toplevel widget
     * are also visible.
     * 
     * The ::map signal can be used to determine whether a widget will be drawn,
     * for instance it can resume an animation that was stopped during the
     * emission of [signal`Gtk`.Widget::unmap].
     */
    connect(sigName: "map", callback: (() => void)): number
    on(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "map", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "map"): void
    /**
     * Emitted when a widget is activated via a mnemonic.
     * 
     * The default handler for this signal activates `widget` if `group_cycling`
     * is %FALSE, or just makes `widget` grab focus if `group_cycling` is %TRUE.
     */
    connect(sigName: "mnemonic-activate", callback: ((groupCycling: boolean) => boolean)): number
    on(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "mnemonic-activate", groupCycling: boolean): void
    /**
     * Emitted when the focus is moved.
     */
    connect(sigName: "move-focus", callback: ((direction: Gtk.DirectionType) => void)): number
    on(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "move-focus", direction: Gtk.DirectionType): void
    /**
     * Emitted when the widgets tooltip is about to be shown.
     * 
     * This happens when the [property`Gtk`.Widget:has-tooltip] property
     * is %TRUE and the hover timeout has expired with the cursor hovering
     * "above" `widget;` or emitted when `widget` got focus in keyboard mode.
     * 
     * Using the given coordinates, the signal handler should determine
     * whether a tooltip should be shown for `widget`. If this is the case
     * %TRUE should be returned, %FALSE otherwise.  Note that if
     * `keyboard_mode` is %TRUE, the values of `x` and `y` are undefined and
     * should not be used.
     * 
     * The signal handler is free to manipulate `tooltip` with the therefore
     * destined function calls.
     */
    connect(sigName: "query-tooltip", callback: ((x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => boolean)): number
    on(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void): NodeJS.EventEmitter
    emit(sigName: "query-tooltip", x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip): void
    /**
     * Emitted when `widget` is associated with a `GdkSurface`.
     * 
     * This means that [method`Gtk`.Widget.realize] has been called
     * or the widget has been mapped (that is, it is going to be drawn).
     */
    connect(sigName: "realize", callback: (() => void)): number
    on(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "realize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "realize"): void
    /**
     * Emitted when `widget` is shown.
     */
    connect(sigName: "show", callback: (() => void)): number
    on(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "show"): void
    /**
     * Emitted when the widget state changes.
     * 
     * See [method`Gtk`.Widget.get_state_flags].
     */
    connect(sigName: "state-flags-changed", callback: ((flags: Gtk.StateFlags) => void)): number
    on(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void): NodeJS.EventEmitter
    emit(sigName: "state-flags-changed", flags: Gtk.StateFlags): void
    /**
     * Emitted when `widget` is going to be unmapped.
     * 
     * A widget is unmapped when either it or any of its parents up to the
     * toplevel widget have been set as hidden.
     * 
     * As ::unmap indicates that a widget will not be shown any longer,
     * it can be used to, for example, stop an animation on the widget.
     */
    connect(sigName: "unmap", callback: (() => void)): number
    on(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unmap", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unmap"): void
    /**
     * Emitted when the `GdkSurface` associated with `widget` is destroyed.
     * 
     * This means that [method`Gtk`.Widget.unrealize] has been called
     * or the widget has been unmapped (that is, it is going to be hidden).
     */
    connect(sigName: "unrealize", callback: (() => void)): number
    on(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unrealize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::gicon", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gicon", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::gicon", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::gicon", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::gicon", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::icon-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::icon-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::paintable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::paintable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pixbuf", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixbuf", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pixbuf", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pixbuf", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pixbuf", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alignment-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alignment-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alignment-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alignment-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alignment-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xalign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xalign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xpad", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xpad", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xpad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xpad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xpad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::yalign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::yalign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::yalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::yalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::yalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ypad", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ypad", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ypad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ypad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ypad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GutterRendererPixbuf_ConstructProps)
    _init (config?: GutterRendererPixbuf_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GutterRendererPixbuf
    static $gtype: GObject.Type
}
interface GutterRendererText_ConstructProps extends GutterRenderer_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.GutterRendererText */
    markup?: string
    text?: string
    /* Constructor properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole?: Gtk.AccessibleRole
}
class GutterRendererText {
    /* Properties of GtkSource-5.GtkSource.GutterRendererText */
    markup: string
    text: string
    /* Properties of GtkSource-5.GtkSource.GutterRenderer */
    /**
     * The alignment mode of the renderer.
     * 
     * This can be used to indicate that in the case a cell spans multiple lines (due to text wrapping)
     * the alignment should work on either the full cell, the first line or the last line.
     */
    alignmentMode: GutterRendererAlignmentMode
    /**
     * Contains information about the lines to be rendered.
     * 
     * It should be used by #GtkSourceGutterRenderer implementations from [vfunc`Gtk`.Widget.snapshot].
     */
    readonly lines: GutterLines
    /**
     * The view on which the renderer is placed.
     */
    readonly view: Gtk.TextView
    /**
     * The horizontal alignment of the renderer.
     * 
     * Set to 0 for a left alignment. 1 for a right alignment. And 0.5 for centering the cells.
     * A value lower than 0 doesn't modify the alignment.
     */
    xalign: number
    /**
     * The left and right padding of the renderer.
     */
    xpad: number
    /**
     * The vertical alignment of the renderer.
     * 
     * Set to 0 for a top alignment. 1 for a bottom alignment. And 0.5 for centering the cells.
     * A value lower than 0 doesn't modify the alignment.
     */
    yalign: number
    /**
     * The top and bottom padding of the renderer.
     */
    ypad: number
    /* Properties of Gtk-4.0.Gtk.Widget */
    /**
     * Whether the widget or any of its descendents can accept
     * the input focus.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    canFocus: boolean
    /**
     * Whether the widget can receive pointer events.
     */
    canTarget: boolean
    /**
     * A list of css classes applied to this widget.
     */
    cssClasses: string[]
    /**
     * The cursor used by `widget`.
     */
    cursor: Gdk.Cursor
    /**
     * Whether the widget should grab focus when it is clicked with the mouse.
     * 
     * This property is only relevant for widgets that can take focus.
     */
    focusOnClick: boolean
    /**
     * Whether this widget itself will accept the input focus.
     */
    focusable: boolean
    /**
     * How to distribute horizontal space if widget gets extra space.
     */
    halign: Gtk.Align
    /**
     * Whether the widget is the default widget.
     */
    readonly hasDefault: boolean
    /**
     * Whether the widget has the input focus.
     */
    readonly hasFocus: boolean
    /**
     * Enables or disables the emission of the ::query-tooltip signal on `widget`.
     * 
     * A value of %TRUE indicates that `widget` can have a tooltip, in this case
     * the widget will be queried using [signal`Gtk`.Widget::query-tooltip] to
     * determine whether it will provide a tooltip or not.
     */
    hasTooltip: boolean
    /**
     * Override for height request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    heightRequest: number
    /**
     * Whether to expand horizontally.
     */
    hexpand: boolean
    /**
     * Whether to use the `hexpand` property.
     */
    hexpandSet: boolean
    /**
     * The `GtkLayoutManager` instance to use to compute the preferred size
     * of the widget, and allocate its children.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    layoutManager: Gtk.LayoutManager
    /**
     * Margin on bottom side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginBottom: number
    /**
     * Margin on end of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginEnd: number
    /**
     * Margin on start of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginStart: number
    /**
     * Margin on top side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginTop: number
    /**
     * The name of the widget.
     */
    name: string
    /**
     * The requested opacity of the widget.
     */
    opacity: number
    /**
     * How content outside the widget's content area is treated.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    overflow: Gtk.Overflow
    /**
     * The parent widget of this widget.
     */
    readonly parent: Gtk.Widget
    /**
     * Whether the widget will receive the default action when it is focused.
     */
    receivesDefault: boolean
    /**
     * The `GtkRoot` widget of the widget tree containing this widget.
     * 
     * This will be %NULL if the widget is not contained in a root widget.
     */
    readonly root: Gtk.Root
    /**
     * The scale factor of the widget.
     */
    readonly scaleFactor: number
    /**
     * Whether the widget responds to input.
     */
    sensitive: boolean
    /**
     * Sets the text of tooltip to be the given string, which is marked up
     * with Pango markup.
     * 
     * Also see [method`Gtk`.Tooltip.set_markup].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipMarkup: string
    /**
     * Sets the text of tooltip to be the given string.
     * 
     * Also see [method`Gtk`.Tooltip.set_text].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipText: string
    /**
     * How to distribute vertical space if widget gets extra space.
     */
    valign: Gtk.Align
    /**
     * Whether to expand vertically.
     */
    vexpand: boolean
    /**
     * Whether to use the `vexpand` property.
     */
    vexpandSet: boolean
    /**
     * Whether the widget is visible.
     */
    visible: boolean
    /**
     * Override for width request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    widthRequest: number
    /* Properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole: Gtk.AccessibleRole
    /* Fields of GtkSource-5.GtkSource.GutterRenderer */
    readonly parentInstance: Gtk.Widget
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.GutterRendererText */
    /**
     * Measures the text provided using the pango layout used by the
     * #GtkSourceGutterRendererText.
     */
    measure(text: string): [ /* width */ number | null, /* height */ number | null ]
    /**
     * Measures the pango markup provided using the pango layout used by the
     * #GtkSourceGutterRendererText.
     */
    measureMarkup(markup: string): [ /* width */ number | null, /* height */ number | null ]
    setMarkup(markup: string, length: number): void
    setText(text: string, length: number): void
    /* Methods of GtkSource-5.GtkSource.GutterRenderer */
    /**
     * Emits the [signal`GutterRenderer:`:activate] signal of the renderer. This is
     * called from [class`Gutter]` and should never have to be called manually.
     */
    activate(iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number): void
    /**
     * Locates where to render content that is `width` x `height` based on
     * the renderers alignment and padding.
     * 
     * The location will be placed into `x` and `y` and is relative to the
     * renderer's coordinates.
     * 
     * It is encouraged that renderers use this function when snappshotting
     * to ensure consistent placement of their contents.
     */
    alignCell(line: number, width: number, height: number): [ /* x */ number, /* y */ number ]
    /**
     * Get the alignment mode.
     * 
     * The alignment mode describes the manner in which the
     * renderer is aligned (see [property`GutterRenderer:`xalign] and
     * [property`GutterRenderer:`yalign]).
     */
    getAlignmentMode(): GutterRendererAlignmentMode
    /**
     * Gets the [class`Buffer]` for which the gutter renderer is drawing.
     */
    getBuffer(): Buffer | null
    /**
     * Get the view associated to the gutter renderer
     */
    getView(): View
    /**
     * Gets the `xalign` property.
     * 
     * This may be used to adjust where within the cell rectangle the renderer will draw.
     */
    getXalign(): number
    /**
     * Gets the `xpad` property.
     * 
     * This may be used to adjust the cell rectangle that the renderer will use to draw.
     */
    getXpad(): number
    /**
     * Gets the `yalign` property.
     * 
     * This may be used to adjust where within the cell rectangle the renderer will draw.
     */
    getYalign(): number
    /**
     * Gets the `ypad` property.
     * 
     * This may be used to adjust the cell rectangle that the renderer will use to draw.
     */
    getYpad(): number
    /**
     * Get whether the renderer is activatable at the location provided. This is
     * called from [class`Gutter]` to determine whether a renderer is activatable
     * using the mouse pointer.
     */
    queryActivatable(iter: Gtk.TextIter, area: Gdk.Rectangle): boolean
    /**
     * Set the alignment mode. The alignment mode describes the manner in which the
     * renderer is aligned (see [property`GutterRenderer:`xalign] and
     * [property`GutterRenderer:`yalign]).
     */
    setAlignmentMode(mode: GutterRendererAlignmentMode): void
    /**
     * Adjusts the `xalign` property.
     * 
     * This may be used to adjust where within the cell rectangle the renderer will draw.
     */
    setXalign(xalign: number): void
    /**
     * Adjusts the `xpad` property.
     * 
     * This may be used to adjust the cell rectangle that the renderer will use to draw.
     */
    setXpad(xpad: number): void
    /**
     * Adjusts the `yalign` property.
     * 
     * This may be used to adjust where within the cell rectangle the renderer will draw.
     */
    setYalign(yalign: number): void
    /**
     * Adjusts the `ypad` property.
     * 
     * This may be used to adjust the cell rectangle that the renderer will use to draw.
     */
    setYpad(ypad: number): void
    /* Methods of Gtk-4.0.Gtk.Widget */
    /**
     * Enable or disable an action installed with
     * gtk_widget_class_install_action().
     */
    actionSetEnabled(actionName: string, enabled: boolean): void
    /**
     * For widgets that can be “activated” (buttons, menu items, etc.),
     * this function activates them.
     * 
     * The activation will emit the signal set using
     * [method`Gtk`.WidgetClass.set_activate_signal] during class initialization.
     * 
     * Activation is what happens when you press <kbd>Enter</kbd>
     * on a widget during key navigation.
     * 
     * If you wish to handle the activation keybinding yourself, it is
     * recommended to use [method`Gtk`.WidgetClass.add_shortcut] with an action
     * created with [ctor`Gtk`.SignalAction.new].
     * 
     * If `widget` isn't activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Looks up the action in the action groups associated with
     * `widget` and its ancestors, and activates it.
     * 
     * If the action is in an action group added with
     * [method`Gtk`.Widget.insert_action_group], the `name` is expected
     * to be prefixed with the prefix that was used when the group was
     * inserted.
     * 
     * The arguments must match the actions expected parameter type,
     * as returned by `g_action_get_parameter_type()`.
     */
    activateAction(name: string, args?: GLib.Variant | null): boolean
    /**
     * Activates the `default.activate` action from `widget`.
     */
    activateDefault(): void
    /**
     * Adds `controller` to `widget` so that it will receive events.
     * 
     * You will usually want to call this function right after
     * creating any kind of [class`Gtk`.EventController].
     */
    addController(controller: Gtk.EventController): void
    /**
     * Adds a style class to `widget`.
     * 
     * After calling this function, the widgets style will match
     * for `css_class,` according to CSS matching rules.
     * 
     * Use [method`Gtk`.Widget.remove_css_class] to remove the
     * style again.
     */
    addCssClass(cssClass: string): void
    /**
     * Adds a widget to the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. Note the
     * list of mnemonic labels for the widget is cleared when the
     * widget is destroyed, so the caller must make sure to update
     * its internal state at this point as well.
     */
    addMnemonicLabel(label: Gtk.Widget): void
    /**
     * Queues an animation frame update and adds a callback to be called
     * before each frame.
     * 
     * Until the tick callback is removed, it will be called frequently
     * (usually at the frame rate of the output device or as quickly as
     * the application can be repainted, whichever is slower). For this
     * reason, is most suitable for handling graphics that change every
     * frame or every few frames. The tick callback does not automatically
     * imply a relayout or repaint. If you want a repaint or relayout, and
     * aren’t changing widget properties that would trigger that (for example,
     * changing the text of a `GtkLabel`), then you will have to call
     * [method`Gtk`.Widget.queue_resize] or [method`Gtk`.Widget.queue_draw]
     * yourself.
     * 
     * [method`Gdk`.FrameClock.get_frame_time] should generally be used
     * for timing continuous animations and
     * [method`Gdk`.FrameTimings.get_predicted_presentation_time] if you are
     * trying to display isolated frames at particular times.
     * 
     * This is a more convenient alternative to connecting directly to the
     * [signal`Gdk`.FrameClock::update] signal of `GdkFrameClock`, since you
     * don't have to worry about when a `GdkFrameClock` is assigned to a widget.
     */
    addTickCallback(callback: Gtk.TickCallback): number
    /**
     * This function is only used by `GtkWidget` subclasses, to
     * assign a size, position and (optionally) baseline to their
     * child widgets.
     * 
     * In this function, the allocation and baseline may be adjusted.
     * The given allocation will be forced to be bigger than the
     * widget's minimum size, as well as at least 0×0 in size.
     * 
     * For a version that does not take a transform, see
     * [method`Gtk`.Widget.size_allocate].
     */
    allocate(width: number, height: number, baseline: number, transform?: Gsk.Transform | null): void
    /**
     * Called by widgets as the user moves around the window using
     * keyboard shortcuts.
     * 
     * The `direction` argument indicates what kind of motion is taking place (up,
     * down, left, right, tab forward, tab backward).
     * 
     * This function calls the [vfunc`Gtk`.Widget.focus] virtual function; widgets
     * can override the virtual function in order to implement appropriate focus
     * behavior.
     * 
     * The default `focus()` virtual function for a widget should return `TRUE` if
     * moving in `direction` left the focus on a focusable location inside that
     * widget, and `FALSE` if moving in `direction` moved the focus outside the
     * widget. When returning `TRUE`, widgets normallycall [method`Gtk`.Widget.grab_focus]
     * to place the focus accordingly; when returning `FALSE`, they don’t modify
     * the current focus location.
     * 
     * This function is used by custom widget implementations; if you're
     * writing an app, you’d use [method`Gtk`.Widget.grab_focus] to move
     * the focus to a particular widget.
     */
    childFocus(direction: Gtk.DirectionType): boolean
    /**
     * Computes the bounds for `widget` in the coordinate space of `target`.
     * 
     * FIXME: Explain what "bounds" are.
     * 
     * If the operation is successful, %TRUE is returned. If `widget` has no
     * bounds or the bounds cannot be expressed in `target'`s coordinate space
     * (for example if both widgets are in different windows), %FALSE is
     * returned and `bounds` is set to the zero rectangle.
     * 
     * It is valid for `widget` and `target` to be the same widget.
     */
    computeBounds(target: Gtk.Widget): [ /* returnType */ boolean, /* outBounds */ Graphene.Rect ]
    /**
     * Computes whether a container should give this widget
     * extra space when possible.
     * 
     * Containers should check this, rather than looking at
     * [method`Gtk`.Widget.get_hexpand] or [method`Gtk`.Widget.get_vexpand].
     * 
     * This function already checks whether the widget is visible, so
     * visibility does not need to be checked separately. Non-visible
     * widgets are not expanded.
     * 
     * The computed expand value uses either the expand setting explicitly
     * set on the widget itself, or, if none has been explicitly set,
     * the widget may expand if some of its children do.
     */
    computeExpand(orientation: Gtk.Orientation): boolean
    /**
     * Translates the given `point` in `widget'`s coordinates to coordinates
     * relative to `target’`s coordinate system.
     * 
     * In order to perform this operation, both widgets must share a
     * common ancestor.
     */
    computePoint(target: Gtk.Widget, point: Graphene.Point): [ /* returnType */ boolean, /* outPoint */ Graphene.Point ]
    /**
     * Computes a matrix suitable to describe a transformation from
     * `widget'`s coordinate system into `target'`s coordinate system.
     * 
     * The transform can not be computed in certain cases, for example
     * when `widget` and `target` do not share a common ancestor. In that
     * case `out_transform` gets set to the identity matrix.
     */
    computeTransform(target: Gtk.Widget): [ /* returnType */ boolean, /* outTransform */ Graphene.Matrix ]
    /**
     * Tests if the point at (`x,` `y)` is contained in `widget`.
     * 
     * The coordinates for (`x,` `y)` must be in widget coordinates, so
     * (0, 0) is assumed to be the top left of `widget'`s content area.
     */
    contains(x: number, y: number): boolean
    /**
     * Creates a new `PangoContext` with the appropriate font map,
     * font options, font description, and base direction for drawing
     * text for this widget.
     * 
     * See also [method`Gtk`.Widget.get_pango_context].
     */
    createPangoContext(): Pango.Context
    /**
     * Creates a new `PangoLayout` with the appropriate font map,
     * font description, and base direction for drawing text for
     * this widget.
     * 
     * If you keep a `PangoLayout` created in this way around,
     * you need to re-create it when the widget `PangoContext`
     * is replaced. This can be tracked by listening to changes
     * of the [property`Gtk`.Widget:root] property on the widget.
     */
    createPangoLayout(text?: string | null): Pango.Layout
    /**
     * Checks to see if a drag movement has passed the GTK drag threshold.
     */
    dragCheckThreshold(startX: number, startY: number, currentX: number, currentY: number): boolean
    /**
     * Notifies the user about an input-related error on this widget.
     * 
     * If the [property`Gtk`.Settings:gtk-error-bell] setting is %TRUE,
     * it calls [method`Gdk`.Surface.beep], otherwise it does nothing.
     * 
     * Note that the effect of [method`Gdk`.Surface.beep] can be configured
     * in many ways, depending on the windowing backend and the desktop
     * environment or window manager that is used.
     */
    errorBell(): void
    /**
     * Returns the baseline that has currently been allocated to `widget`.
     * 
     * This function is intended to be used when implementing handlers
     * for the `GtkWidget`Class.snapshot() function, and when allocating
     * child widgets in `GtkWidget`Class.size_allocate().
     */
    getAllocatedBaseline(): number
    /**
     * Returns the height that has currently been allocated to `widget`.
     */
    getAllocatedHeight(): number
    /**
     * Returns the width that has currently been allocated to `widget`.
     */
    getAllocatedWidth(): number
    /**
     * Retrieves the widget’s allocation.
     * 
     * Note, when implementing a layout container: a widget’s allocation
     * will be its “adjusted” allocation, that is, the widget’s parent
     * typically calls [method`Gtk`.Widget.size_allocate] with an allocation,
     * and that allocation is then adjusted (to handle margin
     * and alignment for example) before assignment to the widget.
     * [method`Gtk`.Widget.get_allocation] returns the adjusted allocation that
     * was actually assigned to the widget. The adjusted allocation is
     * guaranteed to be completely contained within the
     * [method`Gtk`.Widget.size_allocate] allocation, however.
     * 
     * So a layout container is guaranteed that its children stay inside
     * the assigned bounds, but not that they have exactly the bounds the
     * container assigned.
     */
    getAllocation(): /* allocation */ Gtk.Allocation
    /**
     * Gets the first ancestor of `widget` with type `widget_type`.
     * 
     * For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)`
     * gets the first `GtkBox` that’s an ancestor of `widget`. No
     * reference will be added to the returned widget; it should
     * not be unreferenced.
     * 
     * Note that unlike [method`Gtk`.Widget.is_ancestor], this function
     * considers `widget` to be an ancestor of itself.
     */
    getAncestor(widgetType: GObject.Type): Gtk.Widget | null
    /**
     * Determines whether the input focus can enter `widget` or any
     * of its children.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getCanFocus(): boolean
    /**
     * Queries whether `widget` can be the target of pointer events.
     */
    getCanTarget(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * 
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    getChildVisible(): boolean
    /**
     * Gets the clipboard object for `widget`.
     * 
     * This is a utility function to get the clipboard object for the
     * `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getClipboard(): Gdk.Clipboard
    /**
     * Returns the list of style classes applied to `widget`.
     */
    getCssClasses(): string[]
    /**
     * Returns the CSS name that is used for `self`.
     */
    getCssName(): string
    /**
     * Queries the cursor set on `widget`.
     * 
     * See [method`Gtk`.Widget.set_cursor] for details.
     */
    getCursor(): Gdk.Cursor | null
    /**
     * Gets the reading direction for a particular widget.
     * 
     * See [method`Gtk`.Widget.set_direction].
     */
    getDirection(): Gtk.TextDirection
    /**
     * Get the `GdkDisplay` for the toplevel window associated with
     * this widget.
     * 
     * This function can only be called after the widget has been
     * added to a widget hierarchy with a `GtkWindow` at the top.
     * 
     * In general, you should only create display specific
     * resources when a widget has been realized, and you should
     * free those resources when the widget is unrealized.
     */
    getDisplay(): Gdk.Display
    /**
     * Returns the widgets first child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getFirstChild(): Gtk.Widget | null
    /**
     * Returns the current focus child of `widget`.
     */
    getFocusChild(): Gtk.Widget | null
    /**
     * Returns whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * See [method`Gtk`.Widget.set_focus_on_click].
     */
    getFocusOnClick(): boolean
    /**
     * Determines whether `widget` can own the input focus.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getFocusable(): boolean
    /**
     * Gets the font map of `widget`.
     * 
     * See [method`Gtk`.Widget.set_font_map].
     */
    getFontMap(): Pango.FontMap | null
    /**
     * Returns the `cairo_font_options_t` of widget.
     * 
     * Seee [method`Gtk`.Widget.set_font_options].
     */
    getFontOptions(): cairo.FontOptions | null
    /**
     * Obtains the frame clock for a widget.
     * 
     * The frame clock is a global “ticker” that can be used to drive
     * animations and repaints. The most common reason to get the frame
     * clock is to call [method`Gdk`.FrameClock.get_frame_time], in order
     * to get a time to use for animating. For example you might record
     * the start of the animation with an initial value from
     * [method`Gdk`.FrameClock.get_frame_time], and then update the animation
     * by calling [method`Gdk`.FrameClock.get_frame_time] again during each repaint.
     * 
     * [method`Gdk`.FrameClock.request_phase] will result in a new frame on the
     * clock, but won’t necessarily repaint any widgets. To repaint a
     * widget, you have to use [method`Gtk`.Widget.queue_draw] which invalidates
     * the widget (thus scheduling it to receive a draw on the next
     * frame). gtk_widget_queue_draw() will also end up requesting a frame
     * on the appropriate frame clock.
     * 
     * A widget’s frame clock will not change while the widget is
     * mapped. Reparenting a widget (which implies a temporary unmap) can
     * change the widget’s frame clock.
     * 
     * Unrealized widgets do not have a frame clock.
     */
    getFrameClock(): Gdk.FrameClock | null
    /**
     * Gets the horizontal alignment of `widget`.
     * 
     * For backwards compatibility reasons this method will never return
     * %GTK_ALIGN_BASELINE, but instead it will convert it to
     * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
     * alignment.
     */
    getHalign(): Gtk.Align
    /**
     * Returns the current value of the `has-tooltip` property.
     */
    getHasTooltip(): boolean
    /**
     * Returns the content height of the widget.
     * 
     * This function returns the height passed to its
     * size-allocate implementation, which is the height you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getHeight(): number
    /**
     * Gets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Containers should use [method`Gtk`.Widget.compute_expand] rather
     * than this function, to see whether a widget, or any of its children,
     * has the expand flag set. If any child of a widget wants to
     * expand, the parent may ask to expand also.
     * 
     * This function only looks at the widget’s own hexpand flag, rather
     * than computing whether the entire widget tree rooted at this widget
     * wants to expand.
     */
    getHexpand(): boolean
    /**
     * Gets whether gtk_widget_set_hexpand() has been used
     * to explicitly set the expand flag on this widget.
     * 
     * If [property`Gtk`.Widget:hexpand] property is set, then it
     * overrides any computed expand value based on child widgets.
     * If `hexpand` is not set, then the expand value depends on
     * whether any children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    getHexpandSet(): boolean
    /**
     * Returns the widgets last child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getLastChild(): Gtk.Widget | null
    /**
     * Retrieves the layout manager used by `widget`.
     * 
     * See [method`Gtk`.Widget.set_layout_manager].
     */
    getLayoutManager(): Gtk.LayoutManager | null
    /**
     * Whether the widget is mapped.
     */
    getMapped(): boolean
    /**
     * Gets the bottom margin of `widget`.
     */
    getMarginBottom(): number
    /**
     * Gets the end margin of `widget`.
     */
    getMarginEnd(): number
    /**
     * Gets the start margin of `widget`.
     */
    getMarginStart(): number
    /**
     * Gets the top margin of `widget`.
     */
    getMarginTop(): number
    /**
     * Retrieves the name of a widget.
     * 
     * See [method`Gtk`.Widget.set_name] for the significance of widget names.
     */
    getName(): string
    /**
     * Returns the nearest `GtkNative` ancestor of `widget`.
     * 
     * This function will return %NULL if the widget is not
     * contained inside a widget tree with a native ancestor.
     * 
     * `GtkNative` widgets will return themselves here.
     */
    getNative(): Gtk.Native | null
    /**
     * Returns the widgets next sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getNextSibling(): Gtk.Widget | null
    /**
     * #Fetches the requested opacity for this widget.
     * 
     * See [method`Gtk`.Widget.set_opacity].
     */
    getOpacity(): number
    /**
     * Returns the widgets overflow value.
     */
    getOverflow(): Gtk.Overflow
    /**
     * Gets a `PangoContext` with the appropriate font map, font description,
     * and base direction for this widget.
     * 
     * Unlike the context returned by [method`Gtk`.Widget.create_pango_context],
     * this context is owned by the widget (it can be used until the screen
     * for the widget changes or the widget is removed from its toplevel),
     * and will be updated to match any changes to the widget’s attributes.
     * This can be tracked by listening to changes of the
     * [property`Gtk`.Widget:root] property on the widget.
     */
    getPangoContext(): Pango.Context
    /**
     * Returns the parent widget of `widget`.
     */
    getParent(): Gtk.Widget | null
    /**
     * Retrieves the minimum and natural size of a widget, taking
     * into account the widget’s preference for height-for-width management.
     * 
     * This is used to retrieve a suitable size by container widgets which do
     * not impose any restrictions on the child placement. It can be used
     * to deduce toplevel window and menu sizes as well as child widgets in
     * free-form containers such as `GtkFixed`.
     * 
     * Handle with care. Note that the natural height of a height-for-width
     * widget will generally be a smaller size than the minimum height, since
     * the required height for the natural width is generally smaller than the
     * required height for the minimum width.
     * 
     * Use [id`gtk_widget_measure]` if you want to support baseline alignment.
     */
    getPreferredSize(): [ /* minimumSize */ Gtk.Requisition | null, /* naturalSize */ Gtk.Requisition | null ]
    /**
     * Returns the widgets previous sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getPrevSibling(): Gtk.Widget | null
    /**
     * Gets the primary clipboard of `widget`.
     * 
     * This is a utility function to get the primary clipboard object
     * for the `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getPrimaryClipboard(): Gdk.Clipboard
    /**
     * Determines whether `widget` is realized.
     */
    getRealized(): boolean
    /**
     * Determines whether `widget` is always treated as the default widget
     * within its toplevel when it has the focus, even if another widget
     * is the default.
     * 
     * See [method`Gtk`.Widget.set_receives_default].
     */
    getReceivesDefault(): boolean
    /**
     * Gets whether the widget prefers a height-for-width layout
     * or a width-for-height layout.
     * 
     * Single-child widgets generally propagate the preference of
     * their child, more complex widgets need to request something
     * either in context of their children or in context of their
     * allocation capabilities.
     */
    getRequestMode(): Gtk.SizeRequestMode
    /**
     * Returns the `GtkRoot` widget of `widget`.
     * 
     * This function will return %NULL if the widget is not contained
     * inside a widget tree with a root widget.
     * 
     * `GtkRoot` widgets will return themselves here.
     */
    getRoot(): Gtk.Root | null
    /**
     * Retrieves the internal scale factor that maps from window
     * coordinates to the actual device pixels.
     * 
     * On traditional systems this is 1, on high density outputs,
     * it can be a higher value (typically 2).
     * 
     * See [method`Gdk`.Surface.get_scale_factor].
     */
    getScaleFactor(): number
    /**
     * Returns the widget’s sensitivity.
     * 
     * This function returns the value that has been set using
     * [method`Gtk`.Widget.set_sensitive]).
     * 
     * The effective sensitivity of a widget is however determined
     * by both its own and its parent widget’s sensitivity.
     * See [method`Gtk`.Widget.is_sensitive].
     */
    getSensitive(): boolean
    /**
     * Gets the settings object holding the settings used for this widget.
     * 
     * Note that this function can only be called when the `GtkWidget`
     * is attached to a toplevel, since the settings object is specific
     * to a particular `GdkDisplay`. If you want to monitor the widget for
     * changes in its settings, connect to the `notify::display` signal.
     */
    getSettings(): Gtk.Settings
    /**
     * Returns the content width or height of the widget.
     * 
     * Which dimension is returned depends on `orientation`.
     * 
     * This is equivalent to calling [method`Gtk`.Widget.get_width]
     * for %GTK_ORIENTATION_HORIZONTAL or [method`Gtk`.Widget.get_height]
     * for %GTK_ORIENTATION_VERTICAL, but can be used when
     * writing orientation-independent code, such as when
     * implementing [iface`Gtk`.Orientable] widgets.
     */
    getSize(orientation: Gtk.Orientation): number
    /**
     * Gets the size request that was explicitly set for the widget using
     * gtk_widget_set_size_request().
     * 
     * A value of -1 stored in `width` or `height` indicates that that
     * dimension has not been set explicitly and the natural requisition
     * of the widget will be used instead. See
     * [method`Gtk`.Widget.set_size_request]. To get the size a widget will
     * actually request, call [method`Gtk`.Widget.measure] instead of
     * this function.
     */
    getSizeRequest(): [ /* width */ number | null, /* height */ number | null ]
    /**
     * Returns the widget state as a flag set.
     * 
     * It is worth mentioning that the effective %GTK_STATE_FLAG_INSENSITIVE
     * state will be returned, that is, also based on parent insensitivity,
     * even if `widget` itself is sensitive.
     * 
     * Also note that if you are looking for a way to obtain the
     * [flags`Gtk`.StateFlags] to pass to a [class`Gtk`.StyleContext]
     * method, you should look at [method`Gtk`.StyleContext.get_state].
     */
    getStateFlags(): Gtk.StateFlags
    /**
     * Returns the style context associated to `widget`.
     * 
     * The returned object is guaranteed to be the same
     * for the lifetime of `widget`.
     */
    getStyleContext(): Gtk.StyleContext
    /**
     * Fetch an object build from the template XML for `widget_type` in
     * this `widget` instance.
     * 
     * This will only report children which were previously declared
     * with [method`Gtk`.WidgetClass.bind_template_child_full] or one of its
     * variants.
     * 
     * This function is only meant to be called for code which is private
     * to the `widget_type` which declared the child and is meant for language
     * bindings which cannot easily make use of the GObject structure offsets.
     */
    getTemplateChild(widgetType: GObject.Type, name: string): GObject.Object
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the tooltip has not been set using
     * [method`Gtk`.Widget.set_tooltip_markup], this
     * function returns %NULL.
     */
    getTooltipMarkup(): string | null
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the `widget'`s tooltip was set using
     * [method`Gtk`.Widget.set_tooltip_markup],
     * this function will return the escaped text.
     */
    getTooltipText(): string | null
    /**
     * Gets the vertical alignment of `widget`.
     */
    getValign(): Gtk.Align
    /**
     * Gets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.get_hexpand] for more detail.
     */
    getVexpand(): boolean
    /**
     * Gets whether gtk_widget_set_vexpand() has been used to
     * explicitly set the expand flag on this widget.
     * 
     * See [method`Gtk`.Widget.get_hexpand_set] for more detail.
     */
    getVexpandSet(): boolean
    /**
     * Determines whether the widget is visible.
     * 
     * If you want to take into account whether the widget’s
     * parent is also marked as visible, use
     * [method`Gtk`.Widget.is_visible] instead.
     * 
     * This function does not check if the widget is
     * obscured in any way.
     * 
     * See [method`Gtk`.Widget.set_visible].
     */
    getVisible(): boolean
    /**
     * Returns the content width of the widget.
     * 
     * This function returns the width passed to its
     * size-allocate implementation, which is the width you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getWidth(): number
    /**
     * Causes `widget` to have the keyboard focus for the `GtkWindow` it's inside.
     * 
     * If `widget` is not focusable, or its [vfunc`Gtk`.Widget.grab_focus]
     * implementation cannot transfer the focus to a descendant of `widget`
     * that is focusable, it will not take focus and %FALSE will be returned.
     * 
     * Calling [method`Gtk`.Widget.grab_focus] on an already focused widget
     * is allowed, should not have an effect, and return %TRUE.
     */
    grabFocus(): boolean
    /**
     * Returns whether `css_class` is currently applied to `widget`.
     */
    hasCssClass(cssClass: string): boolean
    /**
     * Determines if the widget should show a visible indication that
     * it has the global input focus.
     * 
     * This is a convenience function that takes into account whether
     * focus indication should currently be shown in the toplevel window
     * of `widget`. See [method`Gtk`.Window.get_focus_visible] for more
     * information about focus indication.
     * 
     * To find out if the widget has the global input focus, use
     * [method`Gtk`.Widget.has_focus].
     */
    hasVisibleFocus(): boolean
    /**
     * Reverses the effects of gtk_widget_show().
     * 
     * This is causing the widget to be hidden (invisible to the user).
     */
    hide(): void
    /**
     * Returns whether the widget is currently being destroyed.
     * 
     * This information can sometimes be used to avoid doing
     * unnecessary work.
     */
    inDestruction(): boolean
    /**
     * Creates and initializes child widgets defined in templates.
     * 
     * This function must be called in the instance initializer
     * for any class which assigned itself a template using
     * [method`Gtk`.WidgetClass.set_template].
     * 
     * It is important to call this function in the instance initializer
     * of a `GtkWidget` subclass and not in `GObject.constructed()` or
     * `GObject.constructor()` for two reasons:
     * 
     *  - derived widgets will assume that the composite widgets
     *    defined by its parent classes have been created in their
     *    relative instance initializers
     *  - when calling `g_object_new()` on a widget with composite templates,
     *    it’s important to build the composite widgets before the construct
     *    properties are set. Properties passed to `g_object_new()` should
     *    take precedence over properties set in the private template XML
     * 
     * A good rule of thumb is to call this function as the first thing in
     * an instance initialization function.
     */
    initTemplate(): void
    /**
     * Inserts `group` into `widget`.
     * 
     * Children of `widget` that implement [iface`Gtk`.Actionable] can
     * then be associated with actions in `group` by setting their
     * “action-name” to `prefix`.`action-name`.
     * 
     * Note that inheritance is defined for individual actions. I.e.
     * even if you insert a group with prefix `prefix,` actions with
     * the same prefix will still be inherited from the parent, unless
     * the group contains an action with the same name.
     * 
     * If `group` is %NULL, a previously inserted group for `name` is
     * removed from `widget`.
     */
    insertActionGroup(name: string, group?: Gio.ActionGroup | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed after `previous_sibling,` or at the beginning if
     * `previous_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_prev_sibling(widget)`
     * will return `previous_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this
     * function can also be used to reorder `widget` in the child widget
     * list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertAfter(parent: Gtk.Widget, previousSibling?: Gtk.Widget | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed before `next_sibling,` or at the end if
     * `next_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_next_sibling(widget)`
     * will return `next_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this function
     * can also be used to reorder `widget` in the child widget list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertBefore(parent: Gtk.Widget, nextSibling?: Gtk.Widget | null): void
    /**
     * Determines whether `widget` is somewhere inside `ancestor,`
     * possibly with intermediate containers.
     */
    isAncestor(ancestor: Gtk.Widget): boolean
    /**
     * Determines whether `widget` can be drawn to.
     * 
     * A widget can be drawn if it is mapped and visible.
     */
    isDrawable(): boolean
    /**
     * Determines if the widget is the focus widget within its
     * toplevel.
     * 
     * This does not mean that the [property`Gtk`.Widget:has-focus]
     * property is necessarily set; [property`Gtk`.Widget:has-focus]
     * will only be set if the toplevel widget additionally has the
     * global input focus.
     */
    isFocus(): boolean
    /**
     * Returns the widget’s effective sensitivity.
     * 
     * This means it is sensitive itself and also its
     * parent widget is sensitive.
     */
    isSensitive(): boolean
    /**
     * Determines whether the widget and all its parents are marked as
     * visible.
     * 
     * This function does not check if the widget is obscured in any way.
     * 
     * See also [method`Gtk`.Widget.get_visible] and
     * [method`Gtk`.Widget.set_visible].
     */
    isVisible(): boolean
    /**
     * Emits the `::keynav-failed` signal on the widget.
     * 
     * This function should be called whenever keyboard navigation
     * within a single widget hits a boundary.
     * 
     * The return value of this function should be interpreted
     * in a way similar to the return value of
     * [method`Gtk`.Widget.child_focus]. When %TRUE is returned,
     * stay in the widget, the failed keyboard  navigation is OK
     * and/or there is nowhere we can/should move the focus to.
     * When %FALSE is returned, the caller should continue with
     * keyboard navigation outside the widget, e.g. by calling
     * [method`Gtk`.Widget.child_focus] on the widget’s toplevel.
     * 
     * The default [signal`Gtk`.Widget::keynav-failed] handler returns
     * %FALSE for %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD.
     * For the other values of `GtkDirectionType` it returns %TRUE.
     * 
     * Whenever the default handler returns %TRUE, it also calls
     * [method`Gtk`.Widget.error_bell] to notify the user of the
     * failed keyboard navigation.
     * 
     * A use case for providing an own implementation of ::keynav-failed
     * (either by connecting to it or by overriding it) would be a row of
     * [class`Gtk`.Entry] widgets where the user should be able to navigate
     * the entire row with the cursor keys, as e.g. known from user
     * interfaces that require entering license keys.
     */
    keynavFailed(direction: Gtk.DirectionType): boolean
    /**
     * Returns the widgets for which this widget is the target of a
     * mnemonic.
     * 
     * Typically, these widgets will be labels. See, for example,
     * [method`Gtk`.Label.set_mnemonic_widget].
     * 
     * The widgets in the list are not individually referenced.
     * If you want to iterate through the list and perform actions
     * involving callbacks that might destroy the widgets, you
     * must call `g_list_foreach (result, (GFunc)g_object_ref, NULL)`
     * first, and then unref all the widgets afterwards.
     */
    listMnemonicLabels(): Gtk.Widget[]
    /**
     * Causes a widget to be mapped if it isn’t already.
     * 
     * This function is only for use in widget implementations.
     */
    map(): void
    /**
     * Measures `widget` in the orientation `orientation` and for the given `for_size`.
     * 
     * As an example, if `orientation` is %GTK_ORIENTATION_HORIZONTAL and `for_size`
     * is 300, this functions will compute the minimum and natural width of `widget`
     * if it is allocated at a height of 300 pixels.
     * 
     * See [GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management) for
     * a more details on implementing `GtkWidgetClass.measure()`.
     */
    measure(orientation: Gtk.Orientation, forSize: number): [ /* minimum */ number | null, /* natural */ number | null, /* minimumBaseline */ number | null, /* naturalBaseline */ number | null ]
    /**
     * Emits the ::mnemonic-activate signal.
     * 
     * See [signal`Gtk`.Widget::mnemonic-activate].
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Returns a `GListModel` to track the children of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track children and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeChildren(): Gio.ListModel
    /**
     * Returns a `GListModel` to track the [class`Gtk`.EventController]s
     * of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track controllers and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeControllers(): Gio.ListModel
    /**
     * Finds the descendant of `widget` closest to the point (`x,` `y)`.
     * 
     * The point must be given in widget coordinates, so (0, 0) is assumed
     * to be the top left of `widget'`s content area.
     * 
     * Usually widgets will return %NULL if the given coordinate is not
     * contained in `widget` checked via [method`Gtk`.Widget.contains].
     * Otherwise they will recursively try to find a child that does
     * not return %NULL. Widgets are however free to customize their
     * picking algorithm.
     * 
     * This function is used on the toplevel to determine the widget
     * below the mouse cursor for purposes of hover highlighting and
     * delivering events.
     */
    pick(x: number, y: number, flags: Gtk.PickFlags): Gtk.Widget | null
    /**
     * Flags the widget for a rerun of the [vfunc`Gtk`.Widget.size_allocate]
     * function.
     * 
     * Use this function instead of [method`Gtk`.Widget.queue_resize]
     * when the `widget'`s size request didn't change but it wants to
     * reposition its contents.
     * 
     * An example user of this function is [method`Gtk`.Widget.set_halign].
     * 
     * This function is only for use in widget implementations.
     */
    queueAllocate(): void
    /**
     * Schedules this widget to be redrawn in the paint phase
     * of the current or the next frame.
     * 
     * This means `widget'`s [vfunc`Gtk`.Widget.snapshot]
     * implementation will be called.
     */
    queueDraw(): void
    /**
     * Flags a widget to have its size renegotiated.
     * 
     * This should be called when a widget for some reason has a new
     * size request. For example, when you change the text in a
     * [class`Gtk`.Label], the label queues a resize to ensure there’s
     * enough space for the new text.
     * 
     * Note that you cannot call gtk_widget_queue_resize() on a widget
     * from inside its implementation of the [vfunc`Gtk`.Widget.size_allocate]
     * virtual method. Calls to gtk_widget_queue_resize() from inside
     * [vfunc`Gtk`.Widget.size_allocate] will be silently ignored.
     * 
     * This function is only for use in widget implementations.
     */
    queueResize(): void
    /**
     * Creates the GDK resources associated with a widget.
     * 
     * Normally realization happens implicitly; if you show a widget
     * and all its parent containers, then the widget will be realized
     * and mapped automatically.
     * 
     * Realizing a widget requires all the widget’s parent widgets to be
     * realized; calling this function realizes the widget’s parents
     * in addition to `widget` itself. If a widget is not yet inside a
     * toplevel window when you realize it, bad things will happen.
     * 
     * This function is primarily used in widget implementations, and
     * isn’t very useful otherwise. Many times when you think you might
     * need it, a better approach is to connect to a signal that will be
     * called after the widget is realized automatically, such as
     * [signal`Gtk`.Widget::realize].
     */
    realize(): void
    /**
     * Removes `controller` from `widget,` so that it doesn't process
     * events anymore.
     * 
     * It should not be used again.
     * 
     * Widgets will remove all event controllers automatically when they
     * are destroyed, there is normally no need to call this function.
     */
    removeController(controller: Gtk.EventController): void
    /**
     * Removes a style from `widget`.
     * 
     * After this, the style of `widget` will stop matching for `css_class`.
     */
    removeCssClass(cssClass: string): void
    /**
     * Removes a widget from the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. The widget must
     * have previously been added to the list with
     * [method`Gtk`.Widget.add_mnemonic_label].
     */
    removeMnemonicLabel(label: Gtk.Widget): void
    /**
     * Removes a tick callback previously registered with
     * gtk_widget_add_tick_callback().
     */
    removeTickCallback(id: number): void
    /**
     * Specifies whether the input focus can enter the widget
     * or any of its children.
     * 
     * Applications should set `can_focus` to %FALSE to mark a
     * widget as for pointer/touch use only.
     * 
     * Note that having `can_focus` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and focusable and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setCanFocus(canFocus: boolean): void
    /**
     * Sets whether `widget` can be the target of pointer events.
     */
    setCanTarget(canTarget: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its parent.
     * 
     * The child visibility can be set for widget before it is added
     * to a container with [method`Gtk`.Widget.set_parent], to avoid
     * mapping children unnecessary before immediately unmapping them.
     * However it will be reset to its default state of %TRUE when the
     * widget is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    setChildVisible(childVisible: boolean): void
    /**
     * Clear all style classes applied to `widget`
     * and replace them with `classes`.
     */
    setCssClasses(classes: string[]): void
    /**
     * Sets the cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * If the `cursor` is NULL, `widget` will use the cursor
     * inherited from the parent widget.
     */
    setCursor(cursor?: Gdk.Cursor | null): void
    /**
     * Sets a named cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * This is a utility function that creates a cursor via
     * [ctor`Gdk`.Cursor.new_from_name] and then sets it on `widget`
     * with [method`Gtk`.Widget.set_cursor]. See those functions for
     * details.
     * 
     * On top of that, this function allows `name` to be %NULL, which
     * will do the same as calling [method`Gtk`.Widget.set_cursor]
     * with a %NULL cursor.
     */
    setCursorFromName(name?: string | null): void
    /**
     * Sets the reading direction on a particular widget.
     * 
     * This direction controls the primary direction for widgets
     * containing text, and also the direction in which the children
     * of a container are packed. The ability to set the direction is
     * present in order so that correct localization into languages with
     * right-to-left reading directions can be done. Generally, applications
     * will let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitly
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by [func`Gtk`.Widget.set_default_direction] will be used.
     */
    setDirection(dir: Gtk.TextDirection): void
    /**
     * Set `child` as the current focus child of `widget`.
     * 
     * This function is only suitable for widget implementations.
     * If you want a certain widget to get the input focus, call
     * [method`Gtk`.Widget.grab_focus] on it.
     */
    setFocusChild(child?: Gtk.Widget | null): void
    /**
     * Sets whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * Making mouse clicks not grab focus is useful in places like
     * toolbars where you don’t want the keyboard focus removed from
     * the main area of the application.
     */
    setFocusOnClick(focusOnClick: boolean): void
    /**
     * Specifies whether `widget` can own the input focus.
     * 
     * Widget implementations should set `focusable` to %TRUE in
     * their init() function if they want to receive keyboard input.
     * 
     * Note that having `focusable` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and can-focus and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setFocusable(focusable: boolean): void
    /**
     * Sets the font map to use for Pango rendering.
     * 
     * The font map is the object that is used to look up fonts.
     * Setting a custom font map can be useful in special situations,
     * e.g. when you need to add application-specific fonts to the set
     * of available fonts.
     * 
     * When not set, the widget will inherit the font map from its parent.
     */
    setFontMap(fontMap?: Pango.FontMap | null): void
    /**
     * Sets the `cairo_font_options_t` used for Pango rendering
     * in this widget.
     * 
     * When not set, the default font options for the `GdkDisplay`
     * will be used.
     */
    setFontOptions(options?: cairo.FontOptions | null): void
    /**
     * Sets the horizontal alignment of `widget`.
     */
    setHalign(align: Gtk.Align): void
    /**
     * Sets the `has-tooltip` property on `widget` to `has_tooltip`.
     */
    setHasTooltip(hasTooltip: boolean): void
    /**
     * Sets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Call this function to set the expand flag if you would like your
     * widget to become larger horizontally when the window has extra
     * room.
     * 
     * By default, widgets automatically expand if any of their children
     * want to expand. (To see if a widget will automatically expand given
     * its current children and state, call [method`Gtk`.Widget.compute_expand].
     * A container can decide how the expandability of children affects the
     * expansion of the container by overriding the compute_expand virtual
     * method on `GtkWidget`.).
     * 
     * Setting hexpand explicitly with this function will override the
     * automatic expand behavior.
     * 
     * This function forces the widget to expand or not to expand,
     * regardless of children.  The override occurs because
     * [method`Gtk`.Widget.set_hexpand] sets the hexpand-set property (see
     * [method`Gtk`.Widget.set_hexpand_set]) which causes the widget’s hexpand
     * value to be used, rather than looking at children and widget state.
     */
    setHexpand(expand: boolean): void
    /**
     * Sets whether the hexpand flag will be used.
     * 
     * The [property`Gtk`.Widget:hexpand-set] property will be set
     * automatically when you call [method`Gtk`.Widget.set_hexpand]
     * to set hexpand, so the most likely reason to use this function
     * would be to unset an explicit expand flag.
     * 
     * If hexpand is set, then it overrides any computed
     * expand value based on child widgets. If hexpand is not
     * set, then the expand value depends on whether any
     * children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    setHexpandSet(set: boolean): void
    /**
     * Sets the layout manager delegate instance that provides an
     * implementation for measuring and allocating the children of `widget`.
     */
    setLayoutManager(layoutManager?: Gtk.LayoutManager | null): void
    /**
     * Sets the bottom margin of `widget`.
     */
    setMarginBottom(margin: number): void
    /**
     * Sets the end margin of `widget`.
     */
    setMarginEnd(margin: number): void
    /**
     * Sets the start margin of `widget`.
     */
    setMarginStart(margin: number): void
    /**
     * Sets the top margin of `widget`.
     */
    setMarginTop(margin: number): void
    /**
     * Sets a widgets name.
     * 
     * Setting a name allows you to refer to the widget from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for [class`Gtk`.StyleContext].
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     */
    setName(name: string): void
    /**
     * Request the `widget` to be rendered partially transparent.
     * 
     * An opacity of 0 is fully transparent and an opacity of 1
     * is fully opaque.
     * 
     * Opacity works on both toplevel widgets and child widgets, although
     * there are some limitations: For toplevel widgets, applying opacity
     * depends on the capabilities of the windowing system. On X11, this
     * has any effect only on X displays with a compositing manager,
     * see gdk_display_is_composited(). On Windows and Wayland it should
     * always work, although setting a window’s opacity after the window
     * has been shown may cause some flicker.
     * 
     * Note that the opacity is inherited through inclusion — if you set
     * a toplevel to be partially translucent, all of its content will
     * appear translucent, since it is ultimatively rendered on that
     * toplevel. The opacity value itself is not inherited by child
     * widgets (since that would make widgets deeper in the hierarchy
     * progressively more translucent). As a consequence, [class`Gtk`.Popover]s
     * and other [iface`Gtk`.Native] widgets with their own surface will use their
     * own opacity value, and thus by default appear non-translucent,
     * even if they are attached to a toplevel that is translucent.
     */
    setOpacity(opacity: number): void
    /**
     * Sets how `widget` treats content that is drawn outside the
     * widget's content area.
     * 
     * See the definition of [enum`Gtk`.Overflow] for details.
     * 
     * This setting is provided for widget implementations and
     * should not be used by application code.
     * 
     * The default value is %GTK_OVERFLOW_VISIBLE.
     */
    setOverflow(overflow: Gtk.Overflow): void
    /**
     * Sets `parent` as the parent widget of `widget`.
     * 
     * This takes care of details such as updating the state and style
     * of the child to reflect its new location and resizing the parent.
     * The opposite function is [method`Gtk`.Widget.unparent].
     * 
     * This function is useful only when implementing subclasses of
     * `GtkWidget`.
     */
    setParent(parent: Gtk.Widget): void
    /**
     * Specifies whether `widget` will be treated as the default
     * widget within its toplevel when it has the focus, even if
     * another widget is the default.
     */
    setReceivesDefault(receivesDefault: boolean): void
    /**
     * Sets the sensitivity of a widget.
     * 
     * A widget is sensitive if the user can interact with it.
     * Insensitive widgets are “grayed out” and the user can’t
     * interact with them. Insensitive widgets are known as
     * “inactive”, “disabled”, or “ghosted” in some other toolkits.
     */
    setSensitive(sensitive: boolean): void
    /**
     * Sets the minimum size of a widget.
     * 
     * That is, the widget’s size request will be at least `width`
     * by `height`. You can use this function to force a widget to
     * be larger than it normally would be.
     * 
     * In most cases, [method`Gtk`.Window.set_default_size] is a better
     * choice for toplevel windows than this function; setting the default
     * size will still allow users to shrink the window. Setting the size
     * request will force them to leave the window at least as large as
     * the size request.
     * 
     * Note the inherent danger of setting any fixed size - themes,
     * translations into other languages, different fonts, and user action
     * can all change the appropriate size for a given widget. So, it's
     * basically impossible to hardcode a size that will always be
     * correct.
     * 
     * The size request of a widget is the smallest size a widget can
     * accept while still functioning well and drawing itself correctly.
     * However in some strange cases a widget may be allocated less than
     * its requested size, and in many cases a widget may be allocated more
     * space than it requested.
     * 
     * If the size request in a given direction is -1 (unset), then
     * the “natural” size request of the widget will be used instead.
     * 
     * The size request set here does not include any margin from the
     * properties
     * [property`Gtk`.Widget:margin-start],
     * [property`Gtk`.Widget:margin-end],
     * [property`Gtk`.Widget:margin-top], and
     * [property`Gtk`.Widget:margin-bottom], but it does include pretty
     * much all other padding or border properties set by any subclass
     * of `GtkWidget`.
     */
    setSizeRequest(width: number, height: number): void
    /**
     * Turns on flag values in the current widget state.
     * 
     * Typical widget states are insensitive, prelighted, etc.
     * 
     * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
     * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set
     * the widget's direction, use [method`Gtk`.Widget.set_direction].
     * 
     * This function is for use in widget implementations.
     */
    setStateFlags(flags: Gtk.StateFlags, clear: boolean): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked
     * up with Pango markup.
     * 
     * This function will take care of setting the
     * [property`Gtk`.Widget:has-tooltip] as a side effect, and of the
     * default handler for the [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_markup].
     */
    setTooltipMarkup(markup?: string | null): void
    /**
     * Sets `text` as the contents of the tooltip.
     * 
     * If `text` contains any markup, it will be escaped.
     * 
     * This function will take care of setting
     * [property`Gtk`.Widget:has-tooltip] as a side effect,
     * and of the default handler for the
     * [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_text].
     */
    setTooltipText(text?: string | null): void
    /**
     * Sets the vertical alignment of `widget`.
     */
    setValign(align: Gtk.Align): void
    /**
     * Sets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.set_hexpand] for more detail.
     */
    setVexpand(expand: boolean): void
    /**
     * Sets whether the vexpand flag will be used.
     * 
     * See [method`Gtk`.Widget.set_hexpand_set] for more detail.
     */
    setVexpandSet(set: boolean): void
    /**
     * Sets the visibility state of `widget`.
     * 
     * Note that setting this to %TRUE doesn’t mean the widget is
     * actually viewable, see [method`Gtk`.Widget.get_visible].
     * 
     * This function simply calls [method`Gtk`.Widget.show] or
     * [method`Gtk`.Widget.hide] but is nicer to use when the
     * visibility of the widget depends on some condition.
     */
    setVisible(visible: boolean): void
    /**
     * Returns whether `widget` should contribute to
     * the measuring and allocation of its parent.
     * 
     * This is %FALSE for invisible children, but also
     * for children that have their own surface.
     */
    shouldLayout(): boolean
    /**
     * Flags a widget to be displayed.
     * 
     * Any widget that isn’t shown will not appear on the screen.
     * 
     * Remember that you have to show the containers containing a widget,
     * in addition to the widget itself, before it will appear onscreen.
     * 
     * When a toplevel container is shown, it is immediately realized and
     * mapped; other shown widgets are realized and mapped when their
     * toplevel container is realized and mapped.
     */
    show(): void
    /**
     * Allocates widget with a transformation that translates
     * the origin to the position in `allocation`.
     * 
     * This is a simple form of [method`Gtk`.Widget.allocate].
     */
    sizeAllocate(allocation: Gtk.Allocation, baseline: number): void
    /**
     * Snapshot the a child of `widget`.
     * 
     * When a widget receives a call to the snapshot function,
     * it must send synthetic [vfunc`Gtk`.Widget.snapshot] calls
     * to all children. This function provides a convenient way
     * of doing this. A widget, when it receives a call to its
     * [vfunc`Gtk`.Widget.snapshot] function, calls
     * gtk_widget_snapshot_child() once for each child, passing in
     * the `snapshot` the widget received.
     * 
     * gtk_widget_snapshot_child() takes care of translating the origin of
     * `snapshot,` and deciding whether the child needs to be snapshot.
     * 
     * This function does nothing for children that implement `GtkNative`.
     */
    snapshotChild(child: Gtk.Widget, snapshot: Gtk.Snapshot): void
    /**
     * Translate coordinates relative to `src_widget’`s allocation
     * to coordinates relative to `dest_widget’`s allocations.
     * 
     * In order to perform this operation, both widget must share
     * a common ancestor.
     */
    translateCoordinates(destWidget: Gtk.Widget, srcX: number, srcY: number): [ /* returnType */ boolean, /* destX */ number | null, /* destY */ number | null ]
    /**
     * Triggers a tooltip query on the display where the toplevel
     * of `widget` is located.
     */
    triggerTooltipQuery(): void
    /**
     * Causes a widget to be unmapped if it’s currently mapped.
     * 
     * This function is only for use in widget implementations.
     */
    unmap(): void
    /**
     * Dissociate `widget` from its parent.
     * 
     * This function is only for use in widget implementations,
     * typically in dispose.
     */
    unparent(): void
    /**
     * Causes a widget to be unrealized (frees all GDK resources
     * associated with the widget).
     * 
     * This function is only useful in widget implementations.
     */
    unrealize(): void
    /**
     * Turns off flag values for the current widget state.
     * 
     * See [method`Gtk`.Widget.set_state_flags].
     * 
     * This function is for use in widget implementations.
     */
    unsetStateFlags(flags: Gtk.StateFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Methods of Gtk-4.0.Gtk.Accessible */
    /**
     * Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
     */
    getAccessibleRole(): Gtk.AccessibleRole
    /**
     * Resets the accessible `property` to its default value.
     */
    resetProperty(property: Gtk.AccessibleProperty): void
    /**
     * Resets the accessible `relation` to its default value.
     */
    resetRelation(relation: Gtk.AccessibleRelation): void
    /**
     * Resets the accessible `state` to its default value.
     */
    resetState(state: Gtk.AccessibleState): void
    /**
     * Updates an array of accessible properties.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * property change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateProperty(properties: Gtk.AccessibleProperty[], values: any[]): void
    /**
     * Updates an array of accessible relations.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * relation change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateRelation(relations: Gtk.AccessibleRelation[], values: any[]): void
    /**
     * Updates an array of accessible states.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * state change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateState(states: Gtk.AccessibleState[], values: any[]): void
    /* Methods of Gtk-4.0.Gtk.Buildable */
    /**
     * Gets the ID of the `buildable` object.
     * 
     * `GtkBuilder` sets the name based on the ID attribute
     * of the <object> tag used to construct the `buildable`.
     */
    getBuildableId(): string | null
    /* Signals of GtkSource-5.GtkSource.GutterRenderer */
    /**
     * The signal is emitted when the renderer is activated.
     */
    connect(sigName: "activate", callback: ((iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number) => void)): number
    on(sigName: "activate", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "activate", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "activate", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number) => void): NodeJS.EventEmitter
    emit(sigName: "activate", iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number): void
    /**
     * The signal is emitted when the renderer can possibly be activated.
     */
    connect(sigName: "query-activatable", callback: ((iter: Gtk.TextIter, area: Gdk.Rectangle) => boolean)): number
    on(sigName: "query-activatable", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-activatable", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-activatable", callback: (iter: Gtk.TextIter, area: Gdk.Rectangle) => void): NodeJS.EventEmitter
    emit(sigName: "query-activatable", iter: Gtk.TextIter, area: Gdk.Rectangle): void
    connect(sigName: "query-data", callback: ((object: GObject.Object, p0: number) => void)): number
    on(sigName: "query-data", callback: (object: GObject.Object, p0: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-data", callback: (object: GObject.Object, p0: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-data", callback: (object: GObject.Object, p0: number) => void): NodeJS.EventEmitter
    emit(sigName: "query-data", object: GObject.Object, p0: number): void
    /* Signals of Gtk-4.0.Gtk.Widget */
    /**
     * Signals that all holders of a reference to the widget should release
     * the reference that they hold.
     * 
     * May result in finalization of the widget if all references are released.
     * 
     * This signal is not suitable for saving widget state.
     */
    connect(sigName: "destroy", callback: (() => void)): number
    on(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "destroy", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "destroy"): void
    /**
     * Emitted when the text direction of a widget changes.
     */
    connect(sigName: "direction-changed", callback: ((previousDirection: Gtk.TextDirection) => void)): number
    on(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void): NodeJS.EventEmitter
    emit(sigName: "direction-changed", previousDirection: Gtk.TextDirection): void
    /**
     * Emitted when `widget` is hidden.
     */
    connect(sigName: "hide", callback: (() => void)): number
    on(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "hide", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "hide"): void
    /**
     * Emitted if keyboard navigation fails.
     * 
     * See [method`Gtk`.Widget.keynav_failed] for details.
     */
    connect(sigName: "keynav-failed", callback: ((direction: Gtk.DirectionType) => boolean)): number
    on(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "keynav-failed", direction: Gtk.DirectionType): void
    /**
     * Emitted when `widget` is going to be mapped.
     * 
     * A widget is mapped when the widget is visible (which is controlled with
     * [property`Gtk`.Widget:visible]) and all its parents up to the toplevel widget
     * are also visible.
     * 
     * The ::map signal can be used to determine whether a widget will be drawn,
     * for instance it can resume an animation that was stopped during the
     * emission of [signal`Gtk`.Widget::unmap].
     */
    connect(sigName: "map", callback: (() => void)): number
    on(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "map", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "map"): void
    /**
     * Emitted when a widget is activated via a mnemonic.
     * 
     * The default handler for this signal activates `widget` if `group_cycling`
     * is %FALSE, or just makes `widget` grab focus if `group_cycling` is %TRUE.
     */
    connect(sigName: "mnemonic-activate", callback: ((groupCycling: boolean) => boolean)): number
    on(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "mnemonic-activate", groupCycling: boolean): void
    /**
     * Emitted when the focus is moved.
     */
    connect(sigName: "move-focus", callback: ((direction: Gtk.DirectionType) => void)): number
    on(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "move-focus", direction: Gtk.DirectionType): void
    /**
     * Emitted when the widgets tooltip is about to be shown.
     * 
     * This happens when the [property`Gtk`.Widget:has-tooltip] property
     * is %TRUE and the hover timeout has expired with the cursor hovering
     * "above" `widget;` or emitted when `widget` got focus in keyboard mode.
     * 
     * Using the given coordinates, the signal handler should determine
     * whether a tooltip should be shown for `widget`. If this is the case
     * %TRUE should be returned, %FALSE otherwise.  Note that if
     * `keyboard_mode` is %TRUE, the values of `x` and `y` are undefined and
     * should not be used.
     * 
     * The signal handler is free to manipulate `tooltip` with the therefore
     * destined function calls.
     */
    connect(sigName: "query-tooltip", callback: ((x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => boolean)): number
    on(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void): NodeJS.EventEmitter
    emit(sigName: "query-tooltip", x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip): void
    /**
     * Emitted when `widget` is associated with a `GdkSurface`.
     * 
     * This means that [method`Gtk`.Widget.realize] has been called
     * or the widget has been mapped (that is, it is going to be drawn).
     */
    connect(sigName: "realize", callback: (() => void)): number
    on(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "realize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "realize"): void
    /**
     * Emitted when `widget` is shown.
     */
    connect(sigName: "show", callback: (() => void)): number
    on(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "show"): void
    /**
     * Emitted when the widget state changes.
     * 
     * See [method`Gtk`.Widget.get_state_flags].
     */
    connect(sigName: "state-flags-changed", callback: ((flags: Gtk.StateFlags) => void)): number
    on(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void): NodeJS.EventEmitter
    emit(sigName: "state-flags-changed", flags: Gtk.StateFlags): void
    /**
     * Emitted when `widget` is going to be unmapped.
     * 
     * A widget is unmapped when either it or any of its parents up to the
     * toplevel widget have been set as hidden.
     * 
     * As ::unmap indicates that a widget will not be shown any longer,
     * it can be used to, for example, stop an animation on the widget.
     */
    connect(sigName: "unmap", callback: (() => void)): number
    on(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unmap", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unmap"): void
    /**
     * Emitted when the `GdkSurface` associated with `widget` is destroyed.
     * 
     * This means that [method`Gtk`.Widget.unrealize] has been called
     * or the widget has been unmapped (that is, it is going to be hidden).
     */
    connect(sigName: "unrealize", callback: (() => void)): number
    on(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unrealize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::alignment-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::alignment-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::alignment-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::alignment-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::alignment-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xalign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xalign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::xpad", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xpad", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::xpad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::xpad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::xpad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::yalign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::yalign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::yalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::yalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::yalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::ypad", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ypad", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::ypad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::ypad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::ypad", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: GutterRendererText_ConstructProps)
    _init (config?: GutterRendererText_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): GutterRendererText
    static $gtype: GObject.Type
}
interface Hover_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.Hover */
    /**
     * Contains the number of milliseconds to delay before showing the hover assistant.
     */
    hoverDelay?: number
}
class Hover {
    /* Properties of GtkSource-5.GtkSource.Hover */
    /**
     * Contains the number of milliseconds to delay before showing the hover assistant.
     */
    hoverDelay: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.Hover */
    addProvider(provider: HoverProvider): void
    removeProvider(provider: HoverProvider): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::hover-delay", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hover-delay", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hover-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hover-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hover-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Hover_ConstructProps)
    _init (config?: Hover_ConstructProps): void
    static $gtype: GObject.Type
}
interface HoverContext_ConstructProps extends GObject.Object_ConstructProps {
}
class HoverContext {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.HoverContext */
    /**
     * Gets the current word bounds of the hover.
     * 
     * If `begin` is non-%NULL, it will be set to the start position of the
     * current word being hovered.
     * 
     * If `end` is non-%NULL, it will be set to the end position for the
     * current word being hovered.
     */
    getBounds(): [ /* returnType */ boolean, /* begin */ Gtk.TextIter | null, /* end */ Gtk.TextIter | null ]
    /**
     * A convenience function to get the buffer.
     */
    getBuffer(): Buffer
    getIter(iter: Gtk.TextIter): boolean
    getView(): View
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: HoverContext_ConstructProps)
    _init (config?: HoverContext_ConstructProps): void
    static $gtype: GObject.Type
}
interface HoverDisplay_ConstructProps extends Gtk.Widget_ConstructProps {
    /* Constructor properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole?: Gtk.AccessibleRole
}
class HoverDisplay {
    /* Properties of Gtk-4.0.Gtk.Widget */
    /**
     * Whether the widget or any of its descendents can accept
     * the input focus.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    canFocus: boolean
    /**
     * Whether the widget can receive pointer events.
     */
    canTarget: boolean
    /**
     * A list of css classes applied to this widget.
     */
    cssClasses: string[]
    /**
     * The cursor used by `widget`.
     */
    cursor: Gdk.Cursor
    /**
     * Whether the widget should grab focus when it is clicked with the mouse.
     * 
     * This property is only relevant for widgets that can take focus.
     */
    focusOnClick: boolean
    /**
     * Whether this widget itself will accept the input focus.
     */
    focusable: boolean
    /**
     * How to distribute horizontal space if widget gets extra space.
     */
    halign: Gtk.Align
    /**
     * Whether the widget is the default widget.
     */
    readonly hasDefault: boolean
    /**
     * Whether the widget has the input focus.
     */
    readonly hasFocus: boolean
    /**
     * Enables or disables the emission of the ::query-tooltip signal on `widget`.
     * 
     * A value of %TRUE indicates that `widget` can have a tooltip, in this case
     * the widget will be queried using [signal`Gtk`.Widget::query-tooltip] to
     * determine whether it will provide a tooltip or not.
     */
    hasTooltip: boolean
    /**
     * Override for height request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    heightRequest: number
    /**
     * Whether to expand horizontally.
     */
    hexpand: boolean
    /**
     * Whether to use the `hexpand` property.
     */
    hexpandSet: boolean
    /**
     * The `GtkLayoutManager` instance to use to compute the preferred size
     * of the widget, and allocate its children.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    layoutManager: Gtk.LayoutManager
    /**
     * Margin on bottom side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginBottom: number
    /**
     * Margin on end of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginEnd: number
    /**
     * Margin on start of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginStart: number
    /**
     * Margin on top side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginTop: number
    /**
     * The name of the widget.
     */
    name: string
    /**
     * The requested opacity of the widget.
     */
    opacity: number
    /**
     * How content outside the widget's content area is treated.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    overflow: Gtk.Overflow
    /**
     * The parent widget of this widget.
     */
    readonly parent: Gtk.Widget
    /**
     * Whether the widget will receive the default action when it is focused.
     */
    receivesDefault: boolean
    /**
     * The `GtkRoot` widget of the widget tree containing this widget.
     * 
     * This will be %NULL if the widget is not contained in a root widget.
     */
    readonly root: Gtk.Root
    /**
     * The scale factor of the widget.
     */
    readonly scaleFactor: number
    /**
     * Whether the widget responds to input.
     */
    sensitive: boolean
    /**
     * Sets the text of tooltip to be the given string, which is marked up
     * with Pango markup.
     * 
     * Also see [method`Gtk`.Tooltip.set_markup].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipMarkup: string
    /**
     * Sets the text of tooltip to be the given string.
     * 
     * Also see [method`Gtk`.Tooltip.set_text].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipText: string
    /**
     * How to distribute vertical space if widget gets extra space.
     */
    valign: Gtk.Align
    /**
     * Whether to expand vertically.
     */
    vexpand: boolean
    /**
     * Whether to use the `vexpand` property.
     */
    vexpandSet: boolean
    /**
     * Whether the widget is visible.
     */
    visible: boolean
    /**
     * Override for width request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    widthRequest: number
    /* Properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole: Gtk.AccessibleRole
    /* Fields of Gtk-4.0.Gtk.Widget */
    readonly parentInstance: GObject.InitiallyUnowned
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.HoverDisplay */
    append(child: Gtk.Widget): void
    insertAfter(child: Gtk.Widget, sibling: Gtk.Widget): void
    prepend(child: Gtk.Widget): void
    remove(child: Gtk.Widget): void
    /* Methods of Gtk-4.0.Gtk.Widget */
    /**
     * Enable or disable an action installed with
     * gtk_widget_class_install_action().
     */
    actionSetEnabled(actionName: string, enabled: boolean): void
    /**
     * For widgets that can be “activated” (buttons, menu items, etc.),
     * this function activates them.
     * 
     * The activation will emit the signal set using
     * [method`Gtk`.WidgetClass.set_activate_signal] during class initialization.
     * 
     * Activation is what happens when you press <kbd>Enter</kbd>
     * on a widget during key navigation.
     * 
     * If you wish to handle the activation keybinding yourself, it is
     * recommended to use [method`Gtk`.WidgetClass.add_shortcut] with an action
     * created with [ctor`Gtk`.SignalAction.new].
     * 
     * If `widget` isn't activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Looks up the action in the action groups associated with
     * `widget` and its ancestors, and activates it.
     * 
     * If the action is in an action group added with
     * [method`Gtk`.Widget.insert_action_group], the `name` is expected
     * to be prefixed with the prefix that was used when the group was
     * inserted.
     * 
     * The arguments must match the actions expected parameter type,
     * as returned by `g_action_get_parameter_type()`.
     */
    activateAction(name: string, args?: GLib.Variant | null): boolean
    /**
     * Activates the `default.activate` action from `widget`.
     */
    activateDefault(): void
    /**
     * Adds `controller` to `widget` so that it will receive events.
     * 
     * You will usually want to call this function right after
     * creating any kind of [class`Gtk`.EventController].
     */
    addController(controller: Gtk.EventController): void
    /**
     * Adds a style class to `widget`.
     * 
     * After calling this function, the widgets style will match
     * for `css_class,` according to CSS matching rules.
     * 
     * Use [method`Gtk`.Widget.remove_css_class] to remove the
     * style again.
     */
    addCssClass(cssClass: string): void
    /**
     * Adds a widget to the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. Note the
     * list of mnemonic labels for the widget is cleared when the
     * widget is destroyed, so the caller must make sure to update
     * its internal state at this point as well.
     */
    addMnemonicLabel(label: Gtk.Widget): void
    /**
     * Queues an animation frame update and adds a callback to be called
     * before each frame.
     * 
     * Until the tick callback is removed, it will be called frequently
     * (usually at the frame rate of the output device or as quickly as
     * the application can be repainted, whichever is slower). For this
     * reason, is most suitable for handling graphics that change every
     * frame or every few frames. The tick callback does not automatically
     * imply a relayout or repaint. If you want a repaint or relayout, and
     * aren’t changing widget properties that would trigger that (for example,
     * changing the text of a `GtkLabel`), then you will have to call
     * [method`Gtk`.Widget.queue_resize] or [method`Gtk`.Widget.queue_draw]
     * yourself.
     * 
     * [method`Gdk`.FrameClock.get_frame_time] should generally be used
     * for timing continuous animations and
     * [method`Gdk`.FrameTimings.get_predicted_presentation_time] if you are
     * trying to display isolated frames at particular times.
     * 
     * This is a more convenient alternative to connecting directly to the
     * [signal`Gdk`.FrameClock::update] signal of `GdkFrameClock`, since you
     * don't have to worry about when a `GdkFrameClock` is assigned to a widget.
     */
    addTickCallback(callback: Gtk.TickCallback): number
    /**
     * This function is only used by `GtkWidget` subclasses, to
     * assign a size, position and (optionally) baseline to their
     * child widgets.
     * 
     * In this function, the allocation and baseline may be adjusted.
     * The given allocation will be forced to be bigger than the
     * widget's minimum size, as well as at least 0×0 in size.
     * 
     * For a version that does not take a transform, see
     * [method`Gtk`.Widget.size_allocate].
     */
    allocate(width: number, height: number, baseline: number, transform?: Gsk.Transform | null): void
    /**
     * Called by widgets as the user moves around the window using
     * keyboard shortcuts.
     * 
     * The `direction` argument indicates what kind of motion is taking place (up,
     * down, left, right, tab forward, tab backward).
     * 
     * This function calls the [vfunc`Gtk`.Widget.focus] virtual function; widgets
     * can override the virtual function in order to implement appropriate focus
     * behavior.
     * 
     * The default `focus()` virtual function for a widget should return `TRUE` if
     * moving in `direction` left the focus on a focusable location inside that
     * widget, and `FALSE` if moving in `direction` moved the focus outside the
     * widget. When returning `TRUE`, widgets normallycall [method`Gtk`.Widget.grab_focus]
     * to place the focus accordingly; when returning `FALSE`, they don’t modify
     * the current focus location.
     * 
     * This function is used by custom widget implementations; if you're
     * writing an app, you’d use [method`Gtk`.Widget.grab_focus] to move
     * the focus to a particular widget.
     */
    childFocus(direction: Gtk.DirectionType): boolean
    /**
     * Computes the bounds for `widget` in the coordinate space of `target`.
     * 
     * FIXME: Explain what "bounds" are.
     * 
     * If the operation is successful, %TRUE is returned. If `widget` has no
     * bounds or the bounds cannot be expressed in `target'`s coordinate space
     * (for example if both widgets are in different windows), %FALSE is
     * returned and `bounds` is set to the zero rectangle.
     * 
     * It is valid for `widget` and `target` to be the same widget.
     */
    computeBounds(target: Gtk.Widget): [ /* returnType */ boolean, /* outBounds */ Graphene.Rect ]
    /**
     * Computes whether a container should give this widget
     * extra space when possible.
     * 
     * Containers should check this, rather than looking at
     * [method`Gtk`.Widget.get_hexpand] or [method`Gtk`.Widget.get_vexpand].
     * 
     * This function already checks whether the widget is visible, so
     * visibility does not need to be checked separately. Non-visible
     * widgets are not expanded.
     * 
     * The computed expand value uses either the expand setting explicitly
     * set on the widget itself, or, if none has been explicitly set,
     * the widget may expand if some of its children do.
     */
    computeExpand(orientation: Gtk.Orientation): boolean
    /**
     * Translates the given `point` in `widget'`s coordinates to coordinates
     * relative to `target’`s coordinate system.
     * 
     * In order to perform this operation, both widgets must share a
     * common ancestor.
     */
    computePoint(target: Gtk.Widget, point: Graphene.Point): [ /* returnType */ boolean, /* outPoint */ Graphene.Point ]
    /**
     * Computes a matrix suitable to describe a transformation from
     * `widget'`s coordinate system into `target'`s coordinate system.
     * 
     * The transform can not be computed in certain cases, for example
     * when `widget` and `target` do not share a common ancestor. In that
     * case `out_transform` gets set to the identity matrix.
     */
    computeTransform(target: Gtk.Widget): [ /* returnType */ boolean, /* outTransform */ Graphene.Matrix ]
    /**
     * Tests if the point at (`x,` `y)` is contained in `widget`.
     * 
     * The coordinates for (`x,` `y)` must be in widget coordinates, so
     * (0, 0) is assumed to be the top left of `widget'`s content area.
     */
    contains(x: number, y: number): boolean
    /**
     * Creates a new `PangoContext` with the appropriate font map,
     * font options, font description, and base direction for drawing
     * text for this widget.
     * 
     * See also [method`Gtk`.Widget.get_pango_context].
     */
    createPangoContext(): Pango.Context
    /**
     * Creates a new `PangoLayout` with the appropriate font map,
     * font description, and base direction for drawing text for
     * this widget.
     * 
     * If you keep a `PangoLayout` created in this way around,
     * you need to re-create it when the widget `PangoContext`
     * is replaced. This can be tracked by listening to changes
     * of the [property`Gtk`.Widget:root] property on the widget.
     */
    createPangoLayout(text?: string | null): Pango.Layout
    /**
     * Checks to see if a drag movement has passed the GTK drag threshold.
     */
    dragCheckThreshold(startX: number, startY: number, currentX: number, currentY: number): boolean
    /**
     * Notifies the user about an input-related error on this widget.
     * 
     * If the [property`Gtk`.Settings:gtk-error-bell] setting is %TRUE,
     * it calls [method`Gdk`.Surface.beep], otherwise it does nothing.
     * 
     * Note that the effect of [method`Gdk`.Surface.beep] can be configured
     * in many ways, depending on the windowing backend and the desktop
     * environment or window manager that is used.
     */
    errorBell(): void
    /**
     * Returns the baseline that has currently been allocated to `widget`.
     * 
     * This function is intended to be used when implementing handlers
     * for the `GtkWidget`Class.snapshot() function, and when allocating
     * child widgets in `GtkWidget`Class.size_allocate().
     */
    getAllocatedBaseline(): number
    /**
     * Returns the height that has currently been allocated to `widget`.
     */
    getAllocatedHeight(): number
    /**
     * Returns the width that has currently been allocated to `widget`.
     */
    getAllocatedWidth(): number
    /**
     * Retrieves the widget’s allocation.
     * 
     * Note, when implementing a layout container: a widget’s allocation
     * will be its “adjusted” allocation, that is, the widget’s parent
     * typically calls [method`Gtk`.Widget.size_allocate] with an allocation,
     * and that allocation is then adjusted (to handle margin
     * and alignment for example) before assignment to the widget.
     * [method`Gtk`.Widget.get_allocation] returns the adjusted allocation that
     * was actually assigned to the widget. The adjusted allocation is
     * guaranteed to be completely contained within the
     * [method`Gtk`.Widget.size_allocate] allocation, however.
     * 
     * So a layout container is guaranteed that its children stay inside
     * the assigned bounds, but not that they have exactly the bounds the
     * container assigned.
     */
    getAllocation(): /* allocation */ Gtk.Allocation
    /**
     * Gets the first ancestor of `widget` with type `widget_type`.
     * 
     * For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)`
     * gets the first `GtkBox` that’s an ancestor of `widget`. No
     * reference will be added to the returned widget; it should
     * not be unreferenced.
     * 
     * Note that unlike [method`Gtk`.Widget.is_ancestor], this function
     * considers `widget` to be an ancestor of itself.
     */
    getAncestor(widgetType: GObject.Type): Gtk.Widget | null
    /**
     * Determines whether the input focus can enter `widget` or any
     * of its children.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getCanFocus(): boolean
    /**
     * Queries whether `widget` can be the target of pointer events.
     */
    getCanTarget(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * 
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    getChildVisible(): boolean
    /**
     * Gets the clipboard object for `widget`.
     * 
     * This is a utility function to get the clipboard object for the
     * `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getClipboard(): Gdk.Clipboard
    /**
     * Returns the list of style classes applied to `widget`.
     */
    getCssClasses(): string[]
    /**
     * Returns the CSS name that is used for `self`.
     */
    getCssName(): string
    /**
     * Queries the cursor set on `widget`.
     * 
     * See [method`Gtk`.Widget.set_cursor] for details.
     */
    getCursor(): Gdk.Cursor | null
    /**
     * Gets the reading direction for a particular widget.
     * 
     * See [method`Gtk`.Widget.set_direction].
     */
    getDirection(): Gtk.TextDirection
    /**
     * Get the `GdkDisplay` for the toplevel window associated with
     * this widget.
     * 
     * This function can only be called after the widget has been
     * added to a widget hierarchy with a `GtkWindow` at the top.
     * 
     * In general, you should only create display specific
     * resources when a widget has been realized, and you should
     * free those resources when the widget is unrealized.
     */
    getDisplay(): Gdk.Display
    /**
     * Returns the widgets first child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getFirstChild(): Gtk.Widget | null
    /**
     * Returns the current focus child of `widget`.
     */
    getFocusChild(): Gtk.Widget | null
    /**
     * Returns whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * See [method`Gtk`.Widget.set_focus_on_click].
     */
    getFocusOnClick(): boolean
    /**
     * Determines whether `widget` can own the input focus.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getFocusable(): boolean
    /**
     * Gets the font map of `widget`.
     * 
     * See [method`Gtk`.Widget.set_font_map].
     */
    getFontMap(): Pango.FontMap | null
    /**
     * Returns the `cairo_font_options_t` of widget.
     * 
     * Seee [method`Gtk`.Widget.set_font_options].
     */
    getFontOptions(): cairo.FontOptions | null
    /**
     * Obtains the frame clock for a widget.
     * 
     * The frame clock is a global “ticker” that can be used to drive
     * animations and repaints. The most common reason to get the frame
     * clock is to call [method`Gdk`.FrameClock.get_frame_time], in order
     * to get a time to use for animating. For example you might record
     * the start of the animation with an initial value from
     * [method`Gdk`.FrameClock.get_frame_time], and then update the animation
     * by calling [method`Gdk`.FrameClock.get_frame_time] again during each repaint.
     * 
     * [method`Gdk`.FrameClock.request_phase] will result in a new frame on the
     * clock, but won’t necessarily repaint any widgets. To repaint a
     * widget, you have to use [method`Gtk`.Widget.queue_draw] which invalidates
     * the widget (thus scheduling it to receive a draw on the next
     * frame). gtk_widget_queue_draw() will also end up requesting a frame
     * on the appropriate frame clock.
     * 
     * A widget’s frame clock will not change while the widget is
     * mapped. Reparenting a widget (which implies a temporary unmap) can
     * change the widget’s frame clock.
     * 
     * Unrealized widgets do not have a frame clock.
     */
    getFrameClock(): Gdk.FrameClock | null
    /**
     * Gets the horizontal alignment of `widget`.
     * 
     * For backwards compatibility reasons this method will never return
     * %GTK_ALIGN_BASELINE, but instead it will convert it to
     * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
     * alignment.
     */
    getHalign(): Gtk.Align
    /**
     * Returns the current value of the `has-tooltip` property.
     */
    getHasTooltip(): boolean
    /**
     * Returns the content height of the widget.
     * 
     * This function returns the height passed to its
     * size-allocate implementation, which is the height you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getHeight(): number
    /**
     * Gets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Containers should use [method`Gtk`.Widget.compute_expand] rather
     * than this function, to see whether a widget, or any of its children,
     * has the expand flag set. If any child of a widget wants to
     * expand, the parent may ask to expand also.
     * 
     * This function only looks at the widget’s own hexpand flag, rather
     * than computing whether the entire widget tree rooted at this widget
     * wants to expand.
     */
    getHexpand(): boolean
    /**
     * Gets whether gtk_widget_set_hexpand() has been used
     * to explicitly set the expand flag on this widget.
     * 
     * If [property`Gtk`.Widget:hexpand] property is set, then it
     * overrides any computed expand value based on child widgets.
     * If `hexpand` is not set, then the expand value depends on
     * whether any children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    getHexpandSet(): boolean
    /**
     * Returns the widgets last child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getLastChild(): Gtk.Widget | null
    /**
     * Retrieves the layout manager used by `widget`.
     * 
     * See [method`Gtk`.Widget.set_layout_manager].
     */
    getLayoutManager(): Gtk.LayoutManager | null
    /**
     * Whether the widget is mapped.
     */
    getMapped(): boolean
    /**
     * Gets the bottom margin of `widget`.
     */
    getMarginBottom(): number
    /**
     * Gets the end margin of `widget`.
     */
    getMarginEnd(): number
    /**
     * Gets the start margin of `widget`.
     */
    getMarginStart(): number
    /**
     * Gets the top margin of `widget`.
     */
    getMarginTop(): number
    /**
     * Retrieves the name of a widget.
     * 
     * See [method`Gtk`.Widget.set_name] for the significance of widget names.
     */
    getName(): string
    /**
     * Returns the nearest `GtkNative` ancestor of `widget`.
     * 
     * This function will return %NULL if the widget is not
     * contained inside a widget tree with a native ancestor.
     * 
     * `GtkNative` widgets will return themselves here.
     */
    getNative(): Gtk.Native | null
    /**
     * Returns the widgets next sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getNextSibling(): Gtk.Widget | null
    /**
     * #Fetches the requested opacity for this widget.
     * 
     * See [method`Gtk`.Widget.set_opacity].
     */
    getOpacity(): number
    /**
     * Returns the widgets overflow value.
     */
    getOverflow(): Gtk.Overflow
    /**
     * Gets a `PangoContext` with the appropriate font map, font description,
     * and base direction for this widget.
     * 
     * Unlike the context returned by [method`Gtk`.Widget.create_pango_context],
     * this context is owned by the widget (it can be used until the screen
     * for the widget changes or the widget is removed from its toplevel),
     * and will be updated to match any changes to the widget’s attributes.
     * This can be tracked by listening to changes of the
     * [property`Gtk`.Widget:root] property on the widget.
     */
    getPangoContext(): Pango.Context
    /**
     * Returns the parent widget of `widget`.
     */
    getParent(): Gtk.Widget | null
    /**
     * Retrieves the minimum and natural size of a widget, taking
     * into account the widget’s preference for height-for-width management.
     * 
     * This is used to retrieve a suitable size by container widgets which do
     * not impose any restrictions on the child placement. It can be used
     * to deduce toplevel window and menu sizes as well as child widgets in
     * free-form containers such as `GtkFixed`.
     * 
     * Handle with care. Note that the natural height of a height-for-width
     * widget will generally be a smaller size than the minimum height, since
     * the required height for the natural width is generally smaller than the
     * required height for the minimum width.
     * 
     * Use [id`gtk_widget_measure]` if you want to support baseline alignment.
     */
    getPreferredSize(): [ /* minimumSize */ Gtk.Requisition | null, /* naturalSize */ Gtk.Requisition | null ]
    /**
     * Returns the widgets previous sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getPrevSibling(): Gtk.Widget | null
    /**
     * Gets the primary clipboard of `widget`.
     * 
     * This is a utility function to get the primary clipboard object
     * for the `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getPrimaryClipboard(): Gdk.Clipboard
    /**
     * Determines whether `widget` is realized.
     */
    getRealized(): boolean
    /**
     * Determines whether `widget` is always treated as the default widget
     * within its toplevel when it has the focus, even if another widget
     * is the default.
     * 
     * See [method`Gtk`.Widget.set_receives_default].
     */
    getReceivesDefault(): boolean
    /**
     * Gets whether the widget prefers a height-for-width layout
     * or a width-for-height layout.
     * 
     * Single-child widgets generally propagate the preference of
     * their child, more complex widgets need to request something
     * either in context of their children or in context of their
     * allocation capabilities.
     */
    getRequestMode(): Gtk.SizeRequestMode
    /**
     * Returns the `GtkRoot` widget of `widget`.
     * 
     * This function will return %NULL if the widget is not contained
     * inside a widget tree with a root widget.
     * 
     * `GtkRoot` widgets will return themselves here.
     */
    getRoot(): Gtk.Root | null
    /**
     * Retrieves the internal scale factor that maps from window
     * coordinates to the actual device pixels.
     * 
     * On traditional systems this is 1, on high density outputs,
     * it can be a higher value (typically 2).
     * 
     * See [method`Gdk`.Surface.get_scale_factor].
     */
    getScaleFactor(): number
    /**
     * Returns the widget’s sensitivity.
     * 
     * This function returns the value that has been set using
     * [method`Gtk`.Widget.set_sensitive]).
     * 
     * The effective sensitivity of a widget is however determined
     * by both its own and its parent widget’s sensitivity.
     * See [method`Gtk`.Widget.is_sensitive].
     */
    getSensitive(): boolean
    /**
     * Gets the settings object holding the settings used for this widget.
     * 
     * Note that this function can only be called when the `GtkWidget`
     * is attached to a toplevel, since the settings object is specific
     * to a particular `GdkDisplay`. If you want to monitor the widget for
     * changes in its settings, connect to the `notify::display` signal.
     */
    getSettings(): Gtk.Settings
    /**
     * Returns the content width or height of the widget.
     * 
     * Which dimension is returned depends on `orientation`.
     * 
     * This is equivalent to calling [method`Gtk`.Widget.get_width]
     * for %GTK_ORIENTATION_HORIZONTAL or [method`Gtk`.Widget.get_height]
     * for %GTK_ORIENTATION_VERTICAL, but can be used when
     * writing orientation-independent code, such as when
     * implementing [iface`Gtk`.Orientable] widgets.
     */
    getSize(orientation: Gtk.Orientation): number
    /**
     * Gets the size request that was explicitly set for the widget using
     * gtk_widget_set_size_request().
     * 
     * A value of -1 stored in `width` or `height` indicates that that
     * dimension has not been set explicitly and the natural requisition
     * of the widget will be used instead. See
     * [method`Gtk`.Widget.set_size_request]. To get the size a widget will
     * actually request, call [method`Gtk`.Widget.measure] instead of
     * this function.
     */
    getSizeRequest(): [ /* width */ number | null, /* height */ number | null ]
    /**
     * Returns the widget state as a flag set.
     * 
     * It is worth mentioning that the effective %GTK_STATE_FLAG_INSENSITIVE
     * state will be returned, that is, also based on parent insensitivity,
     * even if `widget` itself is sensitive.
     * 
     * Also note that if you are looking for a way to obtain the
     * [flags`Gtk`.StateFlags] to pass to a [class`Gtk`.StyleContext]
     * method, you should look at [method`Gtk`.StyleContext.get_state].
     */
    getStateFlags(): Gtk.StateFlags
    /**
     * Returns the style context associated to `widget`.
     * 
     * The returned object is guaranteed to be the same
     * for the lifetime of `widget`.
     */
    getStyleContext(): Gtk.StyleContext
    /**
     * Fetch an object build from the template XML for `widget_type` in
     * this `widget` instance.
     * 
     * This will only report children which were previously declared
     * with [method`Gtk`.WidgetClass.bind_template_child_full] or one of its
     * variants.
     * 
     * This function is only meant to be called for code which is private
     * to the `widget_type` which declared the child and is meant for language
     * bindings which cannot easily make use of the GObject structure offsets.
     */
    getTemplateChild(widgetType: GObject.Type, name: string): GObject.Object
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the tooltip has not been set using
     * [method`Gtk`.Widget.set_tooltip_markup], this
     * function returns %NULL.
     */
    getTooltipMarkup(): string | null
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the `widget'`s tooltip was set using
     * [method`Gtk`.Widget.set_tooltip_markup],
     * this function will return the escaped text.
     */
    getTooltipText(): string | null
    /**
     * Gets the vertical alignment of `widget`.
     */
    getValign(): Gtk.Align
    /**
     * Gets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.get_hexpand] for more detail.
     */
    getVexpand(): boolean
    /**
     * Gets whether gtk_widget_set_vexpand() has been used to
     * explicitly set the expand flag on this widget.
     * 
     * See [method`Gtk`.Widget.get_hexpand_set] for more detail.
     */
    getVexpandSet(): boolean
    /**
     * Determines whether the widget is visible.
     * 
     * If you want to take into account whether the widget’s
     * parent is also marked as visible, use
     * [method`Gtk`.Widget.is_visible] instead.
     * 
     * This function does not check if the widget is
     * obscured in any way.
     * 
     * See [method`Gtk`.Widget.set_visible].
     */
    getVisible(): boolean
    /**
     * Returns the content width of the widget.
     * 
     * This function returns the width passed to its
     * size-allocate implementation, which is the width you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getWidth(): number
    /**
     * Causes `widget` to have the keyboard focus for the `GtkWindow` it's inside.
     * 
     * If `widget` is not focusable, or its [vfunc`Gtk`.Widget.grab_focus]
     * implementation cannot transfer the focus to a descendant of `widget`
     * that is focusable, it will not take focus and %FALSE will be returned.
     * 
     * Calling [method`Gtk`.Widget.grab_focus] on an already focused widget
     * is allowed, should not have an effect, and return %TRUE.
     */
    grabFocus(): boolean
    /**
     * Returns whether `css_class` is currently applied to `widget`.
     */
    hasCssClass(cssClass: string): boolean
    /**
     * Determines if the widget should show a visible indication that
     * it has the global input focus.
     * 
     * This is a convenience function that takes into account whether
     * focus indication should currently be shown in the toplevel window
     * of `widget`. See [method`Gtk`.Window.get_focus_visible] for more
     * information about focus indication.
     * 
     * To find out if the widget has the global input focus, use
     * [method`Gtk`.Widget.has_focus].
     */
    hasVisibleFocus(): boolean
    /**
     * Reverses the effects of gtk_widget_show().
     * 
     * This is causing the widget to be hidden (invisible to the user).
     */
    hide(): void
    /**
     * Returns whether the widget is currently being destroyed.
     * 
     * This information can sometimes be used to avoid doing
     * unnecessary work.
     */
    inDestruction(): boolean
    /**
     * Creates and initializes child widgets defined in templates.
     * 
     * This function must be called in the instance initializer
     * for any class which assigned itself a template using
     * [method`Gtk`.WidgetClass.set_template].
     * 
     * It is important to call this function in the instance initializer
     * of a `GtkWidget` subclass and not in `GObject.constructed()` or
     * `GObject.constructor()` for two reasons:
     * 
     *  - derived widgets will assume that the composite widgets
     *    defined by its parent classes have been created in their
     *    relative instance initializers
     *  - when calling `g_object_new()` on a widget with composite templates,
     *    it’s important to build the composite widgets before the construct
     *    properties are set. Properties passed to `g_object_new()` should
     *    take precedence over properties set in the private template XML
     * 
     * A good rule of thumb is to call this function as the first thing in
     * an instance initialization function.
     */
    initTemplate(): void
    /**
     * Inserts `group` into `widget`.
     * 
     * Children of `widget` that implement [iface`Gtk`.Actionable] can
     * then be associated with actions in `group` by setting their
     * “action-name” to `prefix`.`action-name`.
     * 
     * Note that inheritance is defined for individual actions. I.e.
     * even if you insert a group with prefix `prefix,` actions with
     * the same prefix will still be inherited from the parent, unless
     * the group contains an action with the same name.
     * 
     * If `group` is %NULL, a previously inserted group for `name` is
     * removed from `widget`.
     */
    insertActionGroup(name: string, group?: Gio.ActionGroup | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed after `previous_sibling,` or at the beginning if
     * `previous_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_prev_sibling(widget)`
     * will return `previous_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this
     * function can also be used to reorder `widget` in the child widget
     * list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertAfter(parent: Gtk.Widget, previousSibling?: Gtk.Widget | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed before `next_sibling,` or at the end if
     * `next_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_next_sibling(widget)`
     * will return `next_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this function
     * can also be used to reorder `widget` in the child widget list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertBefore(parent: Gtk.Widget, nextSibling?: Gtk.Widget | null): void
    /**
     * Determines whether `widget` is somewhere inside `ancestor,`
     * possibly with intermediate containers.
     */
    isAncestor(ancestor: Gtk.Widget): boolean
    /**
     * Determines whether `widget` can be drawn to.
     * 
     * A widget can be drawn if it is mapped and visible.
     */
    isDrawable(): boolean
    /**
     * Determines if the widget is the focus widget within its
     * toplevel.
     * 
     * This does not mean that the [property`Gtk`.Widget:has-focus]
     * property is necessarily set; [property`Gtk`.Widget:has-focus]
     * will only be set if the toplevel widget additionally has the
     * global input focus.
     */
    isFocus(): boolean
    /**
     * Returns the widget’s effective sensitivity.
     * 
     * This means it is sensitive itself and also its
     * parent widget is sensitive.
     */
    isSensitive(): boolean
    /**
     * Determines whether the widget and all its parents are marked as
     * visible.
     * 
     * This function does not check if the widget is obscured in any way.
     * 
     * See also [method`Gtk`.Widget.get_visible] and
     * [method`Gtk`.Widget.set_visible].
     */
    isVisible(): boolean
    /**
     * Emits the `::keynav-failed` signal on the widget.
     * 
     * This function should be called whenever keyboard navigation
     * within a single widget hits a boundary.
     * 
     * The return value of this function should be interpreted
     * in a way similar to the return value of
     * [method`Gtk`.Widget.child_focus]. When %TRUE is returned,
     * stay in the widget, the failed keyboard  navigation is OK
     * and/or there is nowhere we can/should move the focus to.
     * When %FALSE is returned, the caller should continue with
     * keyboard navigation outside the widget, e.g. by calling
     * [method`Gtk`.Widget.child_focus] on the widget’s toplevel.
     * 
     * The default [signal`Gtk`.Widget::keynav-failed] handler returns
     * %FALSE for %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD.
     * For the other values of `GtkDirectionType` it returns %TRUE.
     * 
     * Whenever the default handler returns %TRUE, it also calls
     * [method`Gtk`.Widget.error_bell] to notify the user of the
     * failed keyboard navigation.
     * 
     * A use case for providing an own implementation of ::keynav-failed
     * (either by connecting to it or by overriding it) would be a row of
     * [class`Gtk`.Entry] widgets where the user should be able to navigate
     * the entire row with the cursor keys, as e.g. known from user
     * interfaces that require entering license keys.
     */
    keynavFailed(direction: Gtk.DirectionType): boolean
    /**
     * Returns the widgets for which this widget is the target of a
     * mnemonic.
     * 
     * Typically, these widgets will be labels. See, for example,
     * [method`Gtk`.Label.set_mnemonic_widget].
     * 
     * The widgets in the list are not individually referenced.
     * If you want to iterate through the list and perform actions
     * involving callbacks that might destroy the widgets, you
     * must call `g_list_foreach (result, (GFunc)g_object_ref, NULL)`
     * first, and then unref all the widgets afterwards.
     */
    listMnemonicLabels(): Gtk.Widget[]
    /**
     * Causes a widget to be mapped if it isn’t already.
     * 
     * This function is only for use in widget implementations.
     */
    map(): void
    /**
     * Measures `widget` in the orientation `orientation` and for the given `for_size`.
     * 
     * As an example, if `orientation` is %GTK_ORIENTATION_HORIZONTAL and `for_size`
     * is 300, this functions will compute the minimum and natural width of `widget`
     * if it is allocated at a height of 300 pixels.
     * 
     * See [GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management) for
     * a more details on implementing `GtkWidgetClass.measure()`.
     */
    measure(orientation: Gtk.Orientation, forSize: number): [ /* minimum */ number | null, /* natural */ number | null, /* minimumBaseline */ number | null, /* naturalBaseline */ number | null ]
    /**
     * Emits the ::mnemonic-activate signal.
     * 
     * See [signal`Gtk`.Widget::mnemonic-activate].
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Returns a `GListModel` to track the children of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track children and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeChildren(): Gio.ListModel
    /**
     * Returns a `GListModel` to track the [class`Gtk`.EventController]s
     * of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track controllers and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeControllers(): Gio.ListModel
    /**
     * Finds the descendant of `widget` closest to the point (`x,` `y)`.
     * 
     * The point must be given in widget coordinates, so (0, 0) is assumed
     * to be the top left of `widget'`s content area.
     * 
     * Usually widgets will return %NULL if the given coordinate is not
     * contained in `widget` checked via [method`Gtk`.Widget.contains].
     * Otherwise they will recursively try to find a child that does
     * not return %NULL. Widgets are however free to customize their
     * picking algorithm.
     * 
     * This function is used on the toplevel to determine the widget
     * below the mouse cursor for purposes of hover highlighting and
     * delivering events.
     */
    pick(x: number, y: number, flags: Gtk.PickFlags): Gtk.Widget | null
    /**
     * Flags the widget for a rerun of the [vfunc`Gtk`.Widget.size_allocate]
     * function.
     * 
     * Use this function instead of [method`Gtk`.Widget.queue_resize]
     * when the `widget'`s size request didn't change but it wants to
     * reposition its contents.
     * 
     * An example user of this function is [method`Gtk`.Widget.set_halign].
     * 
     * This function is only for use in widget implementations.
     */
    queueAllocate(): void
    /**
     * Schedules this widget to be redrawn in the paint phase
     * of the current or the next frame.
     * 
     * This means `widget'`s [vfunc`Gtk`.Widget.snapshot]
     * implementation will be called.
     */
    queueDraw(): void
    /**
     * Flags a widget to have its size renegotiated.
     * 
     * This should be called when a widget for some reason has a new
     * size request. For example, when you change the text in a
     * [class`Gtk`.Label], the label queues a resize to ensure there’s
     * enough space for the new text.
     * 
     * Note that you cannot call gtk_widget_queue_resize() on a widget
     * from inside its implementation of the [vfunc`Gtk`.Widget.size_allocate]
     * virtual method. Calls to gtk_widget_queue_resize() from inside
     * [vfunc`Gtk`.Widget.size_allocate] will be silently ignored.
     * 
     * This function is only for use in widget implementations.
     */
    queueResize(): void
    /**
     * Creates the GDK resources associated with a widget.
     * 
     * Normally realization happens implicitly; if you show a widget
     * and all its parent containers, then the widget will be realized
     * and mapped automatically.
     * 
     * Realizing a widget requires all the widget’s parent widgets to be
     * realized; calling this function realizes the widget’s parents
     * in addition to `widget` itself. If a widget is not yet inside a
     * toplevel window when you realize it, bad things will happen.
     * 
     * This function is primarily used in widget implementations, and
     * isn’t very useful otherwise. Many times when you think you might
     * need it, a better approach is to connect to a signal that will be
     * called after the widget is realized automatically, such as
     * [signal`Gtk`.Widget::realize].
     */
    realize(): void
    /**
     * Removes `controller` from `widget,` so that it doesn't process
     * events anymore.
     * 
     * It should not be used again.
     * 
     * Widgets will remove all event controllers automatically when they
     * are destroyed, there is normally no need to call this function.
     */
    removeController(controller: Gtk.EventController): void
    /**
     * Removes a style from `widget`.
     * 
     * After this, the style of `widget` will stop matching for `css_class`.
     */
    removeCssClass(cssClass: string): void
    /**
     * Removes a widget from the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. The widget must
     * have previously been added to the list with
     * [method`Gtk`.Widget.add_mnemonic_label].
     */
    removeMnemonicLabel(label: Gtk.Widget): void
    /**
     * Removes a tick callback previously registered with
     * gtk_widget_add_tick_callback().
     */
    removeTickCallback(id: number): void
    /**
     * Specifies whether the input focus can enter the widget
     * or any of its children.
     * 
     * Applications should set `can_focus` to %FALSE to mark a
     * widget as for pointer/touch use only.
     * 
     * Note that having `can_focus` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and focusable and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setCanFocus(canFocus: boolean): void
    /**
     * Sets whether `widget` can be the target of pointer events.
     */
    setCanTarget(canTarget: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its parent.
     * 
     * The child visibility can be set for widget before it is added
     * to a container with [method`Gtk`.Widget.set_parent], to avoid
     * mapping children unnecessary before immediately unmapping them.
     * However it will be reset to its default state of %TRUE when the
     * widget is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    setChildVisible(childVisible: boolean): void
    /**
     * Clear all style classes applied to `widget`
     * and replace them with `classes`.
     */
    setCssClasses(classes: string[]): void
    /**
     * Sets the cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * If the `cursor` is NULL, `widget` will use the cursor
     * inherited from the parent widget.
     */
    setCursor(cursor?: Gdk.Cursor | null): void
    /**
     * Sets a named cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * This is a utility function that creates a cursor via
     * [ctor`Gdk`.Cursor.new_from_name] and then sets it on `widget`
     * with [method`Gtk`.Widget.set_cursor]. See those functions for
     * details.
     * 
     * On top of that, this function allows `name` to be %NULL, which
     * will do the same as calling [method`Gtk`.Widget.set_cursor]
     * with a %NULL cursor.
     */
    setCursorFromName(name?: string | null): void
    /**
     * Sets the reading direction on a particular widget.
     * 
     * This direction controls the primary direction for widgets
     * containing text, and also the direction in which the children
     * of a container are packed. The ability to set the direction is
     * present in order so that correct localization into languages with
     * right-to-left reading directions can be done. Generally, applications
     * will let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitly
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by [func`Gtk`.Widget.set_default_direction] will be used.
     */
    setDirection(dir: Gtk.TextDirection): void
    /**
     * Set `child` as the current focus child of `widget`.
     * 
     * This function is only suitable for widget implementations.
     * If you want a certain widget to get the input focus, call
     * [method`Gtk`.Widget.grab_focus] on it.
     */
    setFocusChild(child?: Gtk.Widget | null): void
    /**
     * Sets whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * Making mouse clicks not grab focus is useful in places like
     * toolbars where you don’t want the keyboard focus removed from
     * the main area of the application.
     */
    setFocusOnClick(focusOnClick: boolean): void
    /**
     * Specifies whether `widget` can own the input focus.
     * 
     * Widget implementations should set `focusable` to %TRUE in
     * their init() function if they want to receive keyboard input.
     * 
     * Note that having `focusable` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and can-focus and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setFocusable(focusable: boolean): void
    /**
     * Sets the font map to use for Pango rendering.
     * 
     * The font map is the object that is used to look up fonts.
     * Setting a custom font map can be useful in special situations,
     * e.g. when you need to add application-specific fonts to the set
     * of available fonts.
     * 
     * When not set, the widget will inherit the font map from its parent.
     */
    setFontMap(fontMap?: Pango.FontMap | null): void
    /**
     * Sets the `cairo_font_options_t` used for Pango rendering
     * in this widget.
     * 
     * When not set, the default font options for the `GdkDisplay`
     * will be used.
     */
    setFontOptions(options?: cairo.FontOptions | null): void
    /**
     * Sets the horizontal alignment of `widget`.
     */
    setHalign(align: Gtk.Align): void
    /**
     * Sets the `has-tooltip` property on `widget` to `has_tooltip`.
     */
    setHasTooltip(hasTooltip: boolean): void
    /**
     * Sets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Call this function to set the expand flag if you would like your
     * widget to become larger horizontally when the window has extra
     * room.
     * 
     * By default, widgets automatically expand if any of their children
     * want to expand. (To see if a widget will automatically expand given
     * its current children and state, call [method`Gtk`.Widget.compute_expand].
     * A container can decide how the expandability of children affects the
     * expansion of the container by overriding the compute_expand virtual
     * method on `GtkWidget`.).
     * 
     * Setting hexpand explicitly with this function will override the
     * automatic expand behavior.
     * 
     * This function forces the widget to expand or not to expand,
     * regardless of children.  The override occurs because
     * [method`Gtk`.Widget.set_hexpand] sets the hexpand-set property (see
     * [method`Gtk`.Widget.set_hexpand_set]) which causes the widget’s hexpand
     * value to be used, rather than looking at children and widget state.
     */
    setHexpand(expand: boolean): void
    /**
     * Sets whether the hexpand flag will be used.
     * 
     * The [property`Gtk`.Widget:hexpand-set] property will be set
     * automatically when you call [method`Gtk`.Widget.set_hexpand]
     * to set hexpand, so the most likely reason to use this function
     * would be to unset an explicit expand flag.
     * 
     * If hexpand is set, then it overrides any computed
     * expand value based on child widgets. If hexpand is not
     * set, then the expand value depends on whether any
     * children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    setHexpandSet(set: boolean): void
    /**
     * Sets the layout manager delegate instance that provides an
     * implementation for measuring and allocating the children of `widget`.
     */
    setLayoutManager(layoutManager?: Gtk.LayoutManager | null): void
    /**
     * Sets the bottom margin of `widget`.
     */
    setMarginBottom(margin: number): void
    /**
     * Sets the end margin of `widget`.
     */
    setMarginEnd(margin: number): void
    /**
     * Sets the start margin of `widget`.
     */
    setMarginStart(margin: number): void
    /**
     * Sets the top margin of `widget`.
     */
    setMarginTop(margin: number): void
    /**
     * Sets a widgets name.
     * 
     * Setting a name allows you to refer to the widget from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for [class`Gtk`.StyleContext].
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     */
    setName(name: string): void
    /**
     * Request the `widget` to be rendered partially transparent.
     * 
     * An opacity of 0 is fully transparent and an opacity of 1
     * is fully opaque.
     * 
     * Opacity works on both toplevel widgets and child widgets, although
     * there are some limitations: For toplevel widgets, applying opacity
     * depends on the capabilities of the windowing system. On X11, this
     * has any effect only on X displays with a compositing manager,
     * see gdk_display_is_composited(). On Windows and Wayland it should
     * always work, although setting a window’s opacity after the window
     * has been shown may cause some flicker.
     * 
     * Note that the opacity is inherited through inclusion — if you set
     * a toplevel to be partially translucent, all of its content will
     * appear translucent, since it is ultimatively rendered on that
     * toplevel. The opacity value itself is not inherited by child
     * widgets (since that would make widgets deeper in the hierarchy
     * progressively more translucent). As a consequence, [class`Gtk`.Popover]s
     * and other [iface`Gtk`.Native] widgets with their own surface will use their
     * own opacity value, and thus by default appear non-translucent,
     * even if they are attached to a toplevel that is translucent.
     */
    setOpacity(opacity: number): void
    /**
     * Sets how `widget` treats content that is drawn outside the
     * widget's content area.
     * 
     * See the definition of [enum`Gtk`.Overflow] for details.
     * 
     * This setting is provided for widget implementations and
     * should not be used by application code.
     * 
     * The default value is %GTK_OVERFLOW_VISIBLE.
     */
    setOverflow(overflow: Gtk.Overflow): void
    /**
     * Sets `parent` as the parent widget of `widget`.
     * 
     * This takes care of details such as updating the state and style
     * of the child to reflect its new location and resizing the parent.
     * The opposite function is [method`Gtk`.Widget.unparent].
     * 
     * This function is useful only when implementing subclasses of
     * `GtkWidget`.
     */
    setParent(parent: Gtk.Widget): void
    /**
     * Specifies whether `widget` will be treated as the default
     * widget within its toplevel when it has the focus, even if
     * another widget is the default.
     */
    setReceivesDefault(receivesDefault: boolean): void
    /**
     * Sets the sensitivity of a widget.
     * 
     * A widget is sensitive if the user can interact with it.
     * Insensitive widgets are “grayed out” and the user can’t
     * interact with them. Insensitive widgets are known as
     * “inactive”, “disabled”, or “ghosted” in some other toolkits.
     */
    setSensitive(sensitive: boolean): void
    /**
     * Sets the minimum size of a widget.
     * 
     * That is, the widget’s size request will be at least `width`
     * by `height`. You can use this function to force a widget to
     * be larger than it normally would be.
     * 
     * In most cases, [method`Gtk`.Window.set_default_size] is a better
     * choice for toplevel windows than this function; setting the default
     * size will still allow users to shrink the window. Setting the size
     * request will force them to leave the window at least as large as
     * the size request.
     * 
     * Note the inherent danger of setting any fixed size - themes,
     * translations into other languages, different fonts, and user action
     * can all change the appropriate size for a given widget. So, it's
     * basically impossible to hardcode a size that will always be
     * correct.
     * 
     * The size request of a widget is the smallest size a widget can
     * accept while still functioning well and drawing itself correctly.
     * However in some strange cases a widget may be allocated less than
     * its requested size, and in many cases a widget may be allocated more
     * space than it requested.
     * 
     * If the size request in a given direction is -1 (unset), then
     * the “natural” size request of the widget will be used instead.
     * 
     * The size request set here does not include any margin from the
     * properties
     * [property`Gtk`.Widget:margin-start],
     * [property`Gtk`.Widget:margin-end],
     * [property`Gtk`.Widget:margin-top], and
     * [property`Gtk`.Widget:margin-bottom], but it does include pretty
     * much all other padding or border properties set by any subclass
     * of `GtkWidget`.
     */
    setSizeRequest(width: number, height: number): void
    /**
     * Turns on flag values in the current widget state.
     * 
     * Typical widget states are insensitive, prelighted, etc.
     * 
     * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
     * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set
     * the widget's direction, use [method`Gtk`.Widget.set_direction].
     * 
     * This function is for use in widget implementations.
     */
    setStateFlags(flags: Gtk.StateFlags, clear: boolean): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked
     * up with Pango markup.
     * 
     * This function will take care of setting the
     * [property`Gtk`.Widget:has-tooltip] as a side effect, and of the
     * default handler for the [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_markup].
     */
    setTooltipMarkup(markup?: string | null): void
    /**
     * Sets `text` as the contents of the tooltip.
     * 
     * If `text` contains any markup, it will be escaped.
     * 
     * This function will take care of setting
     * [property`Gtk`.Widget:has-tooltip] as a side effect,
     * and of the default handler for the
     * [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_text].
     */
    setTooltipText(text?: string | null): void
    /**
     * Sets the vertical alignment of `widget`.
     */
    setValign(align: Gtk.Align): void
    /**
     * Sets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.set_hexpand] for more detail.
     */
    setVexpand(expand: boolean): void
    /**
     * Sets whether the vexpand flag will be used.
     * 
     * See [method`Gtk`.Widget.set_hexpand_set] for more detail.
     */
    setVexpandSet(set: boolean): void
    /**
     * Sets the visibility state of `widget`.
     * 
     * Note that setting this to %TRUE doesn’t mean the widget is
     * actually viewable, see [method`Gtk`.Widget.get_visible].
     * 
     * This function simply calls [method`Gtk`.Widget.show] or
     * [method`Gtk`.Widget.hide] but is nicer to use when the
     * visibility of the widget depends on some condition.
     */
    setVisible(visible: boolean): void
    /**
     * Returns whether `widget` should contribute to
     * the measuring and allocation of its parent.
     * 
     * This is %FALSE for invisible children, but also
     * for children that have their own surface.
     */
    shouldLayout(): boolean
    /**
     * Flags a widget to be displayed.
     * 
     * Any widget that isn’t shown will not appear on the screen.
     * 
     * Remember that you have to show the containers containing a widget,
     * in addition to the widget itself, before it will appear onscreen.
     * 
     * When a toplevel container is shown, it is immediately realized and
     * mapped; other shown widgets are realized and mapped when their
     * toplevel container is realized and mapped.
     */
    show(): void
    /**
     * Allocates widget with a transformation that translates
     * the origin to the position in `allocation`.
     * 
     * This is a simple form of [method`Gtk`.Widget.allocate].
     */
    sizeAllocate(allocation: Gtk.Allocation, baseline: number): void
    /**
     * Snapshot the a child of `widget`.
     * 
     * When a widget receives a call to the snapshot function,
     * it must send synthetic [vfunc`Gtk`.Widget.snapshot] calls
     * to all children. This function provides a convenient way
     * of doing this. A widget, when it receives a call to its
     * [vfunc`Gtk`.Widget.snapshot] function, calls
     * gtk_widget_snapshot_child() once for each child, passing in
     * the `snapshot` the widget received.
     * 
     * gtk_widget_snapshot_child() takes care of translating the origin of
     * `snapshot,` and deciding whether the child needs to be snapshot.
     * 
     * This function does nothing for children that implement `GtkNative`.
     */
    snapshotChild(child: Gtk.Widget, snapshot: Gtk.Snapshot): void
    /**
     * Translate coordinates relative to `src_widget’`s allocation
     * to coordinates relative to `dest_widget’`s allocations.
     * 
     * In order to perform this operation, both widget must share
     * a common ancestor.
     */
    translateCoordinates(destWidget: Gtk.Widget, srcX: number, srcY: number): [ /* returnType */ boolean, /* destX */ number | null, /* destY */ number | null ]
    /**
     * Triggers a tooltip query on the display where the toplevel
     * of `widget` is located.
     */
    triggerTooltipQuery(): void
    /**
     * Causes a widget to be unmapped if it’s currently mapped.
     * 
     * This function is only for use in widget implementations.
     */
    unmap(): void
    /**
     * Dissociate `widget` from its parent.
     * 
     * This function is only for use in widget implementations,
     * typically in dispose.
     */
    unparent(): void
    /**
     * Causes a widget to be unrealized (frees all GDK resources
     * associated with the widget).
     * 
     * This function is only useful in widget implementations.
     */
    unrealize(): void
    /**
     * Turns off flag values for the current widget state.
     * 
     * See [method`Gtk`.Widget.set_state_flags].
     * 
     * This function is for use in widget implementations.
     */
    unsetStateFlags(flags: Gtk.StateFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Methods of Gtk-4.0.Gtk.Accessible */
    /**
     * Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
     */
    getAccessibleRole(): Gtk.AccessibleRole
    /**
     * Resets the accessible `property` to its default value.
     */
    resetProperty(property: Gtk.AccessibleProperty): void
    /**
     * Resets the accessible `relation` to its default value.
     */
    resetRelation(relation: Gtk.AccessibleRelation): void
    /**
     * Resets the accessible `state` to its default value.
     */
    resetState(state: Gtk.AccessibleState): void
    /**
     * Updates an array of accessible properties.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * property change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateProperty(properties: Gtk.AccessibleProperty[], values: any[]): void
    /**
     * Updates an array of accessible relations.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * relation change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateRelation(relations: Gtk.AccessibleRelation[], values: any[]): void
    /**
     * Updates an array of accessible states.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * state change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateState(states: Gtk.AccessibleState[], values: any[]): void
    /* Methods of Gtk-4.0.Gtk.Buildable */
    /**
     * Gets the ID of the `buildable` object.
     * 
     * `GtkBuilder` sets the name based on the ID attribute
     * of the <object> tag used to construct the `buildable`.
     */
    getBuildableId(): string | null
    /* Signals of Gtk-4.0.Gtk.Widget */
    /**
     * Signals that all holders of a reference to the widget should release
     * the reference that they hold.
     * 
     * May result in finalization of the widget if all references are released.
     * 
     * This signal is not suitable for saving widget state.
     */
    connect(sigName: "destroy", callback: (() => void)): number
    on(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "destroy", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "destroy"): void
    /**
     * Emitted when the text direction of a widget changes.
     */
    connect(sigName: "direction-changed", callback: ((previousDirection: Gtk.TextDirection) => void)): number
    on(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void): NodeJS.EventEmitter
    emit(sigName: "direction-changed", previousDirection: Gtk.TextDirection): void
    /**
     * Emitted when `widget` is hidden.
     */
    connect(sigName: "hide", callback: (() => void)): number
    on(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "hide", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "hide"): void
    /**
     * Emitted if keyboard navigation fails.
     * 
     * See [method`Gtk`.Widget.keynav_failed] for details.
     */
    connect(sigName: "keynav-failed", callback: ((direction: Gtk.DirectionType) => boolean)): number
    on(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "keynav-failed", direction: Gtk.DirectionType): void
    /**
     * Emitted when `widget` is going to be mapped.
     * 
     * A widget is mapped when the widget is visible (which is controlled with
     * [property`Gtk`.Widget:visible]) and all its parents up to the toplevel widget
     * are also visible.
     * 
     * The ::map signal can be used to determine whether a widget will be drawn,
     * for instance it can resume an animation that was stopped during the
     * emission of [signal`Gtk`.Widget::unmap].
     */
    connect(sigName: "map", callback: (() => void)): number
    on(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "map", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "map"): void
    /**
     * Emitted when a widget is activated via a mnemonic.
     * 
     * The default handler for this signal activates `widget` if `group_cycling`
     * is %FALSE, or just makes `widget` grab focus if `group_cycling` is %TRUE.
     */
    connect(sigName: "mnemonic-activate", callback: ((groupCycling: boolean) => boolean)): number
    on(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "mnemonic-activate", groupCycling: boolean): void
    /**
     * Emitted when the focus is moved.
     */
    connect(sigName: "move-focus", callback: ((direction: Gtk.DirectionType) => void)): number
    on(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "move-focus", direction: Gtk.DirectionType): void
    /**
     * Emitted when the widgets tooltip is about to be shown.
     * 
     * This happens when the [property`Gtk`.Widget:has-tooltip] property
     * is %TRUE and the hover timeout has expired with the cursor hovering
     * "above" `widget;` or emitted when `widget` got focus in keyboard mode.
     * 
     * Using the given coordinates, the signal handler should determine
     * whether a tooltip should be shown for `widget`. If this is the case
     * %TRUE should be returned, %FALSE otherwise.  Note that if
     * `keyboard_mode` is %TRUE, the values of `x` and `y` are undefined and
     * should not be used.
     * 
     * The signal handler is free to manipulate `tooltip` with the therefore
     * destined function calls.
     */
    connect(sigName: "query-tooltip", callback: ((x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => boolean)): number
    on(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void): NodeJS.EventEmitter
    emit(sigName: "query-tooltip", x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip): void
    /**
     * Emitted when `widget` is associated with a `GdkSurface`.
     * 
     * This means that [method`Gtk`.Widget.realize] has been called
     * or the widget has been mapped (that is, it is going to be drawn).
     */
    connect(sigName: "realize", callback: (() => void)): number
    on(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "realize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "realize"): void
    /**
     * Emitted when `widget` is shown.
     */
    connect(sigName: "show", callback: (() => void)): number
    on(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "show"): void
    /**
     * Emitted when the widget state changes.
     * 
     * See [method`Gtk`.Widget.get_state_flags].
     */
    connect(sigName: "state-flags-changed", callback: ((flags: Gtk.StateFlags) => void)): number
    on(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void): NodeJS.EventEmitter
    emit(sigName: "state-flags-changed", flags: Gtk.StateFlags): void
    /**
     * Emitted when `widget` is going to be unmapped.
     * 
     * A widget is unmapped when either it or any of its parents up to the
     * toplevel widget have been set as hidden.
     * 
     * As ::unmap indicates that a widget will not be shown any longer,
     * it can be used to, for example, stop an animation on the widget.
     */
    connect(sigName: "unmap", callback: (() => void)): number
    on(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unmap", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unmap"): void
    /**
     * Emitted when the `GdkSurface` associated with `widget` is destroyed.
     * 
     * This means that [method`Gtk`.Widget.unrealize] has been called
     * or the widget has been unmapped (that is, it is going to be hidden).
     */
    connect(sigName: "unrealize", callback: (() => void)): number
    on(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unrealize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: HoverDisplay_ConstructProps)
    _init (config?: HoverDisplay_ConstructProps): void
    static $gtype: GObject.Type
}
interface Language_ConstructProps extends GObject.Object_ConstructProps {
}
class Language {
    /* Properties of GtkSource-5.GtkSource.Language */
    readonly hidden: boolean
    readonly id: string
    readonly name: string
    readonly section: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.Language */
    /**
     * Returns the globs associated to this language.
     * 
     * This is just an utility wrapper around [method`Language`.get_metadata] to
     * retrieve the "globs" metadata property and split it into an array.
     */
    getGlobs(): string[] | null
    /**
     * Returns whether the language should be hidden from the user.
     */
    getHidden(): boolean
    /**
     * Returns the ID of the language.
     * 
     * The ID is not locale-dependent.The returned string is owned by `language`
     * and should not be freed or modified.
     */
    getId(): string
    getMetadata(name: string): string | null
    /**
     * Returns the mime types associated to this language.
     * 
     * This is just an utility wrapper around [method`Language`.get_metadata] to
     * retrieve the "mimetypes" metadata property and split it into an
     * array.
     */
    getMimeTypes(): string[] | null
    /**
     * Returns the localized name of the language.
     * 
     * The returned string is owned by `language` and should not be freed
     * or modified.
     */
    getName(): string
    /**
     * Returns the localized section of the language.
     * 
     * Each language belong to a section (ex. HTML belongs to the
     * Markup section).
     * The returned string is owned by `language` and should not be freed
     * or modified.
     */
    getSection(): string
    /**
     * Returns the ID of the style to use if the specified `style_id`
     * is not present in the current style scheme.
     */
    getStyleFallback(styleId: string): string | null
    /**
     * Returns the ids of the styles defined by this `language`.
     */
    getStyleIds(): string[] | null
    /**
     * Returns the name of the style with ID `style_id` defined by this `language`.
     */
    getStyleName(styleId: string): string | null
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hidden", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::section", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::section", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::section", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::section", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::section", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Language_ConstructProps)
    _init (config?: Language_ConstructProps): void
    static $gtype: GObject.Type
}
interface LanguageManager_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.LanguageManager */
    searchPath?: string[]
}
class LanguageManager {
    /* Properties of GtkSource-5.GtkSource.LanguageManager */
    readonly languageIds: string[]
    searchPath: string[]
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.LanguageManager */
    /**
     * Appends `path` to the list of directories where the `manager` looks for
     * language files.
     * 
     * See [method`LanguageManager`.set_search_path] for details.
     */
    appendSearchPath(path: string): void
    /**
     * Gets the [class`Language]` identified by the given `id` in the language
     * manager.
     */
    getLanguage(id: string): Language | null
    /**
     * Returns the ids of the available languages.
     */
    getLanguageIds(): string[] | null
    /**
     * Gets the list directories where `lm` looks for language files.
     */
    getSearchPath(): string[]
    /**
     * Picks a [class`Language]` for given file name and content type,
     * according to the information in lang files.
     * 
     * Either `filename` or `content_type` may be %NULL. This function can be used as follows:
     * 
     * ```c
     * GtkSourceLanguage *lang;
     * GtkSourceLanguageManager *manager;
     * lm = gtk_source_language_manager_get_default ();
     * lang = gtk_source_language_manager_guess_language (manager, filename, NULL);
     * gtk_source_buffer_set_language (buffer, lang);
     * ```
     * 
     * or
     * 
     * ```c
     * GtkSourceLanguage *lang = NULL;
     * GtkSourceLanguageManager *manager;
     * gboolean result_uncertain;
     * gchar *content_type;
     * 
     * content_type = g_content_type_guess (filename, NULL, 0, &result_uncertain);
     * if (result_uncertain)
     *   {
     *     g_free (content_type);
     *     content_type = NULL;
     *   }
     * 
     * manager = gtk_source_language_manager_get_default ();
     * lang = gtk_source_language_manager_guess_language (manager, filename, content_type);
     * gtk_source_buffer_set_language (buffer, lang);
     * 
     * g_free (content_type);
     * ```
     * 
     * etc. Use [method`Language`.get_mime_types] and [method`Language`.get_globs]
     * if you need full control over file -> language mapping.
     */
    guessLanguage(filename?: string | null, contentType?: string | null): Language | null
    /**
     * Prepends `path` to the list of directories where the `manager` looks
     * for language files.
     * 
     * See [method`LanguageManager`.set_search_path] for details.
     */
    prependSearchPath(path: string): void
    /**
     * Sets the list of directories where the `lm` looks for
     * language files.
     * 
     * If `dirs` is %NULL, the search path is reset to default.
     * 
     * At the moment this function can be called only before the
     * language files are loaded for the first time. In practice
     * to set a custom search path for a `GtkSourceLanguageManager`,
     * you have to call this function right after creating it.
     * 
     * Since GtkSourceView 5.4 this function will allow you to provide
     * paths in the form of "resource:///" URIs to embedded `GResource`s.
     * They must contain the path of a directory within the `GResource`.
     */
    setSearchPath(dirs?: string[] | null): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::language-ids", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::language-ids", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::language-ids", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::language-ids", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::language-ids", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::search-path", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::search-path", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::search-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::search-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::search-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: LanguageManager_ConstructProps)
    _init (config?: LanguageManager_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): LanguageManager
    /**
     * Returns the default #GtkSourceLanguageManager instance.
     */
    static getDefault(): LanguageManager
    static $gtype: GObject.Type
}
interface Map_ConstructProps extends View_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.Map */
    fontDesc?: Pango.FontDescription
    view?: View
    /* Constructor properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole?: Gtk.AccessibleRole
    /* Constructor properties of Gtk-4.0.Gtk.Scrollable */
    /**
     * Horizontal `GtkAdjustment` of the scrollable widget.
     * 
     * This adjustment is shared between the scrollable widget and its parent.
     */
    hadjustment?: Gtk.Adjustment
    /**
     * Determines when horizontal scrolling should start.
     */
    hscrollPolicy?: Gtk.ScrollablePolicy
    /**
     * Vertical `GtkAdjustment` of the scrollable widget.
     * 
     * This adjustment is shared between the scrollable widget and its parent.
     */
    vadjustment?: Gtk.Adjustment
    /**
     * Determines when vertical scrolling should start.
     */
    vscrollPolicy?: Gtk.ScrollablePolicy
}
class Map {
    /* Properties of GtkSource-5.GtkSource.Map */
    fontDesc: Pango.FontDescription
    view: View
    /* Properties of GtkSource-5.GtkSource.View */
    autoIndent: boolean
    /**
     * Draw a specific background pattern on the view.
     */
    backgroundPattern: BackgroundPatternType
    /**
     * The completion object associated with the view
     */
    readonly completion: Completion
    /**
     * The property denotes if snippets should be
     * expanded when the user presses Tab after having typed a word
     * matching the snippets found in [class`SnippetManager]`.
     * 
     * The user may tab through focus-positions of the snippet if any
     * are available by pressing Tab repeatedly until the desired focus
     * position is selected.
     */
    enableSnippets: boolean
    highlightCurrentLine: boolean
    indentOnTab: boolean
    /**
     * Width of an indentation step expressed in number of spaces.
     */
    indentWidth: number
    /**
     * The property is a [iface`Indenter]` to use to indent
     * as the user types into the [class`View]`.
     */
    indenter: Indenter
    insertSpacesInsteadOfTabs: boolean
    /**
     * Position of the right margin.
     */
    rightMarginPosition: number
    /**
     * Whether to display line mark pixbufs
     */
    showLineMarks: boolean
    /**
     * Whether to display line numbers
     */
    showLineNumbers: boolean
    /**
     * Whether to display the right margin.
     */
    showRightMargin: boolean
    /**
     * Whether smart Backspace should be used.
     */
    smartBackspace: boolean
    /**
     * Set the behavior of the HOME and END keys.
     */
    smartHomeEnd: SmartHomeEndType
    /**
     * The [class`SpaceDrawer]` object associated with the view.4
     */
    readonly spaceDrawer: SpaceDrawer
    /**
     * Width of a tab character expressed in number of spaces.
     */
    tabWidth: number
    /* Properties of Gtk-4.0.Gtk.TextView */
    /**
     * Whether Tab will result in a tab character being entered.
     */
    acceptsTab: boolean
    /**
     * The bottom margin for text in the text view.
     * 
     * Note that this property is confusingly named. In CSS terms,
     * the value set here is padding, and it is applied in addition
     * to the padding from the theme.
     * 
     * Don't confuse this property with [property`Gtk`.Widget:margin-bottom].
     */
    bottomMargin: number
    /**
     * The buffer which is displayed.
     */
    buffer: Gtk.TextBuffer
    /**
     * If the insertion cursor is shown.
     */
    cursorVisible: boolean
    editable: boolean
    /**
     * A menu model whose contents will be appended to the context menu.
     */
    extraMenu: Gio.MenuModel
    /**
     * Which IM (input method) module should be used for this text_view.
     * 
     * See [class`Gtk`.IMMulticontext].
     * 
     * Setting this to a non-%NULL value overrides the system-wide IM module
     * setting. See the GtkSettings [property`Gtk`.Settings:gtk-im-module] property.
     */
    imModule: string
    /**
     * Amount to indent the paragraph, in pixels.
     */
    indent: number
    /**
     * Additional hints (beyond [property`Gtk`.TextView:input-purpose])
     * that allow input methods to fine-tune their behaviour.
     */
    inputHints: Gtk.InputHints
    /**
     * The purpose of this text field.
     * 
     * This property can be used by on-screen keyboards and other input
     * methods to adjust their behaviour.
     */
    inputPurpose: Gtk.InputPurpose
    justification: Gtk.Justification
    /**
     * The default left margin for text in the text view.
     * 
     * Tags in the buffer may override the default.
     * 
     * Note that this property is confusingly named. In CSS terms,
     * the value set here is padding, and it is applied in addition
     * to the padding from the theme.
     */
    leftMargin: number
    /**
     * Whether text should be displayed in a monospace font.
     * 
     * If %TRUE, set the .monospace style class on the
     * text view to indicate that a monospace font is desired.
     */
    monospace: boolean
    /**
     * Whether entered text overwrites existing contents.
     */
    overwrite: boolean
    pixelsAboveLines: number
    pixelsBelowLines: number
    pixelsInsideWrap: number
    /**
     * The default right margin for text in the text view.
     * 
     * Tags in the buffer may override the default.
     * 
     * Note that this property is confusingly named. In CSS terms,
     * the value set here is padding, and it is applied in addition
     * to the padding from the theme.
     */
    rightMargin: number
    tabs: Pango.TabArray
    /**
     * The top margin for text in the text view.
     * 
     * Note that this property is confusingly named. In CSS terms,
     * the value set here is padding, and it is applied in addition
     * to the padding from the theme.
     * 
     * Don't confuse this property with [property`Gtk`.Widget:margin-top].
     */
    topMargin: number
    wrapMode: Gtk.WrapMode
    /* Properties of Gtk-4.0.Gtk.Widget */
    /**
     * Whether the widget or any of its descendents can accept
     * the input focus.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    canFocus: boolean
    /**
     * Whether the widget can receive pointer events.
     */
    canTarget: boolean
    /**
     * A list of css classes applied to this widget.
     */
    cssClasses: string[]
    /**
     * The cursor used by `widget`.
     */
    cursor: Gdk.Cursor
    /**
     * Whether the widget should grab focus when it is clicked with the mouse.
     * 
     * This property is only relevant for widgets that can take focus.
     */
    focusOnClick: boolean
    /**
     * Whether this widget itself will accept the input focus.
     */
    focusable: boolean
    /**
     * How to distribute horizontal space if widget gets extra space.
     */
    halign: Gtk.Align
    /**
     * Whether the widget is the default widget.
     */
    readonly hasDefault: boolean
    /**
     * Whether the widget has the input focus.
     */
    readonly hasFocus: boolean
    /**
     * Enables or disables the emission of the ::query-tooltip signal on `widget`.
     * 
     * A value of %TRUE indicates that `widget` can have a tooltip, in this case
     * the widget will be queried using [signal`Gtk`.Widget::query-tooltip] to
     * determine whether it will provide a tooltip or not.
     */
    hasTooltip: boolean
    /**
     * Override for height request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    heightRequest: number
    /**
     * Whether to expand horizontally.
     */
    hexpand: boolean
    /**
     * Whether to use the `hexpand` property.
     */
    hexpandSet: boolean
    /**
     * The `GtkLayoutManager` instance to use to compute the preferred size
     * of the widget, and allocate its children.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    layoutManager: Gtk.LayoutManager
    /**
     * Margin on bottom side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginBottom: number
    /**
     * Margin on end of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginEnd: number
    /**
     * Margin on start of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginStart: number
    /**
     * Margin on top side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginTop: number
    /**
     * The name of the widget.
     */
    name: string
    /**
     * The requested opacity of the widget.
     */
    opacity: number
    /**
     * How content outside the widget's content area is treated.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    overflow: Gtk.Overflow
    /**
     * The parent widget of this widget.
     */
    readonly parent: Gtk.Widget
    /**
     * Whether the widget will receive the default action when it is focused.
     */
    receivesDefault: boolean
    /**
     * The `GtkRoot` widget of the widget tree containing this widget.
     * 
     * This will be %NULL if the widget is not contained in a root widget.
     */
    readonly root: Gtk.Root
    /**
     * The scale factor of the widget.
     */
    readonly scaleFactor: number
    /**
     * Whether the widget responds to input.
     */
    sensitive: boolean
    /**
     * Sets the text of tooltip to be the given string, which is marked up
     * with Pango markup.
     * 
     * Also see [method`Gtk`.Tooltip.set_markup].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipMarkup: string
    /**
     * Sets the text of tooltip to be the given string.
     * 
     * Also see [method`Gtk`.Tooltip.set_text].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipText: string
    /**
     * How to distribute vertical space if widget gets extra space.
     */
    valign: Gtk.Align
    /**
     * Whether to expand vertically.
     */
    vexpand: boolean
    /**
     * Whether to use the `vexpand` property.
     */
    vexpandSet: boolean
    /**
     * Whether the widget is visible.
     */
    visible: boolean
    /**
     * Override for width request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    widthRequest: number
    /* Properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole: Gtk.AccessibleRole
    /* Properties of Gtk-4.0.Gtk.Scrollable */
    /**
     * Horizontal `GtkAdjustment` of the scrollable widget.
     * 
     * This adjustment is shared between the scrollable widget and its parent.
     */
    hadjustment: Gtk.Adjustment
    /**
     * Determines when horizontal scrolling should start.
     */
    hscrollPolicy: Gtk.ScrollablePolicy
    /**
     * Vertical `GtkAdjustment` of the scrollable widget.
     * 
     * This adjustment is shared between the scrollable widget and its parent.
     */
    vadjustment: Gtk.Adjustment
    /**
     * Determines when vertical scrolling should start.
     */
    vscrollPolicy: Gtk.ScrollablePolicy
    /* Fields of GtkSource-5.GtkSource.View */
    readonly parentInstance: Gtk.TextView
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.Map */
    /**
     * Gets the [property`Map:`view] property, which is the view this widget is mapping.
     */
    getView(): View | null
    /**
     * Sets the view that `map` will be doing the mapping to.
     */
    setView(view: View): void
    /* Methods of GtkSource-5.GtkSource.View */
    /**
     * Returns whether auto-indentation of text is enabled.
     */
    getAutoIndent(): boolean
    /**
     * Returns the #GtkSourceBackgroundPatternType specifying if and how
     * the background pattern should be displayed for this `view`.
     */
    getBackgroundPattern(): BackgroundPatternType
    /**
     * Gets the [class`Completion]` associated with `view`.
     * 
     * The returned object is guaranteed to be the same for the lifetime of `view`.
     * Each `GtkSourceView` object has a different [class`Completion]`.
     */
    getCompletion(): Completion
    /**
     * Gets the [property`View:`enable-snippets] property.
     * 
     * If %TRUE, matching snippets found in the [class`SnippetManager]`
     * may be expanded when the user presses Tab after a word in the [class`View]`.
     */
    getEnableSnippets(): boolean
    /**
     * Returns the [class`Gutter]` object associated with `window_type` for `view`.
     * 
     * Only %GTK_TEXT_WINDOW_LEFT and %GTK_TEXT_WINDOW_RIGHT are supported,
     * respectively corresponding to the left and right gutter. The line numbers
     * and mark category icons are rendered in the left gutter.
     */
    getGutter(windowType: Gtk.TextWindowType): Gutter
    /**
     * Returns whether the current line is highlighted.
     */
    getHighlightCurrentLine(): boolean
    /**
     * Gets the [class`Hover]` associated with `view`.
     * 
     * The returned object is guaranteed to be the same for the lifetime of `view`.
     * Each [class`View]` object has a different [class`Hover]`.
     */
    getHover(): Hover
    /**
     * Returns whether when the tab key is pressed the current selection
     * should get indented instead of replaced with the `\t` character.
     */
    getIndentOnTab(): boolean
    /**
     * Returns the number of spaces to use for each step of indent.
     * 
     * See [method`View`.set_indent_width] for details.
     */
    getIndentWidth(): number
    /**
     * Gets the [property`View:`indenter] property.
     */
    getIndenter(): Indenter | null
    /**
     * Returns whether when inserting a tabulator character it should
     * be replaced by a group of space characters.
     */
    getInsertSpacesInsteadOfTabs(): boolean
    /**
     * Gets attributes and priority for the `category`.
     */
    getMarkAttributes(category: string, priority: number): MarkAttributes
    /**
     * Gets the position of the right margin in the given `view`.
     */
    getRightMarginPosition(): number
    /**
     * Returns whether line marks are displayed beside the text.
     */
    getShowLineMarks(): boolean
    /**
     * Returns whether line numbers are displayed beside the text.
     */
    getShowLineNumbers(): boolean
    /**
     * Returns whether a right margin is displayed.
     */
    getShowRightMargin(): boolean
    /**
     * Returns %TRUE if pressing the Backspace key will try to delete spaces
     * up to the previous tab stop.
     */
    getSmartBackspace(): boolean
    /**
     * Returns a [enum`SmartHomeEndType]` end value specifying
     * how the cursor will move when HOME and END keys are pressed.
     */
    getSmartHomeEnd(): SmartHomeEndType
    /**
     * Gets the [class`SpaceDrawer]` associated with `view`.
     * 
     * The returned object is guaranteed to be the same for the lifetime of `view`.
     * Each [class`View]` object has a different [class`SpaceDrawer]`.
     */
    getSpaceDrawer(): SpaceDrawer
    /**
     * Returns the width of tabulation in characters.
     */
    getTabWidth(): number
    /**
     * Determines the visual column at `iter` taking into consideration the
     * [property`View:`tab-width] of `view`.
     */
    getVisualColumn(iter: Gtk.TextIter): number
    /**
     * Inserts one indentation level at the beginning of the specified lines. The
     * empty lines are not indented.
     */
    indentLines(start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Inserts a new snippet at `location`
     * 
     * If another snippet was already active, it will be paused and the new
     * snippet will become active. Once the focus positions of `snippet` have
     * been exhausted, editing will return to the previous snippet.
     */
    pushSnippet(snippet: Snippet, location?: Gtk.TextIter | null): void
    /**
     * If %TRUE auto-indentation of text is enabled.
     * 
     * When Enter is pressed to create a new line, the auto-indentation inserts the
     * same indentation as the previous line. This is **not** a
     * "smart indentation" where an indentation level is added or removed depending
     * on the context.
     */
    setAutoIndent(enable: boolean): void
    /**
     * Set if and how the background pattern should be displayed.
     */
    setBackgroundPattern(backgroundPattern: BackgroundPatternType): void
    /**
     * Sets the [property`View:`enable-snippets] property.
     * 
     * If `enable_snippets` is %TRUE, matching snippets found in the
     * [class`SnippetManager]` may be expanded when the user presses
     * Tab after a word in the [class`View]`.
     */
    setEnableSnippets(enableSnippets: boolean): void
    /**
     * If `highlight` is %TRUE the current line will be highlighted.
     */
    setHighlightCurrentLine(highlight: boolean): void
    /**
     * If %TRUE, when the tab key is pressed when several lines are selected, the
     * selected lines are indented of one level instead of being replaced with a `\t`
     * character. Shift+Tab unindents the selection.
     * 
     * If the first or last line is not selected completely, it is also indented or
     * unindented.
     * 
     * When the selection doesn't span several lines, the tab key always replaces
     * the selection with a normal `\t` character.
     */
    setIndentOnTab(enable: boolean): void
    /**
     * Sets the number of spaces to use for each step of indent when the tab key is
     * pressed.
     * 
     * If `width` is -1, the value of the [property`View:`tab-width] property
     * will be used.
     * 
     * The [property`View:`indent-width] interacts with the
     * [property`View:`insert-spaces-instead-of-tabs] property and
     * [property`View:`tab-width]. An example will be clearer:
     * 
     * If the [property`View:`indent-width] is 4 and [property`View:`tab-width] is 8 and
     * [property`View:`insert-spaces-instead-of-tabs] is %FALSE, then pressing the tab
     * key at the beginning of a line will insert 4 spaces. So far so good. Pressing
     * the tab key a second time will remove the 4 spaces and insert a `\t` character
     * instead (since [property`View:`tab-width] is 8). On the other hand, if
     * [property`View:`insert-spaces-instead-of-tabs] is %TRUE, the second tab key
     * pressed will insert 4 more spaces for a total of 8 spaces in the
     * [class`Gtk`.TextBuffer].
     * 
     * The test-widget program (available in the GtkSourceView repository) may be
     * useful to better understand the indentation settings (enable the space
     * drawing!).
     */
    setIndentWidth(width: number): void
    /**
     * Sets the indenter for `view` to `indenter`.
     * 
     * Note that the indenter will not be used unless #GtkSourceView:auto-indent
     * has been set to %TRUE.
     */
    setIndenter(indenter?: Indenter | null): void
    /**
     * If %TRUE a tab key pressed is replaced by a group of space characters.
     * 
     * Of course it is still possible to insert a real `\t` programmatically with the
     * [class`Gtk`.TextBuffer] API.
     */
    setInsertSpacesInsteadOfTabs(enable: boolean): void
    /**
     * Sets attributes and priority for the `category`.
     */
    setMarkAttributes(category: string, attributes: MarkAttributes, priority: number): void
    /**
     * Sets the position of the right margin in the given `view`.
     */
    setRightMarginPosition(pos: number): void
    /**
     * If %TRUE line marks will be displayed beside the text.
     */
    setShowLineMarks(show: boolean): void
    /**
     * If %TRUE line numbers will be displayed beside the text.
     */
    setShowLineNumbers(show: boolean): void
    /**
     * If %TRUE a right margin is displayed.
     */
    setShowRightMargin(show: boolean): void
    /**
     * When set to %TRUE, pressing the Backspace key will try to delete spaces
     * up to the previous tab stop.
     */
    setSmartBackspace(smartBackspace: boolean): void
    /**
     * Set the desired movement of the cursor when HOME and END keys
     * are pressed.
     */
    setSmartHomeEnd(smartHomeEnd: SmartHomeEndType): void
    /**
     * Sets the width of tabulation in characters.
     * 
     * The #GtkTextBuffer still contains `\t` characters,
     * but they can take a different visual width in a [class`View]` widget.
     */
    setTabWidth(width: number): void
    /**
     * Removes one indentation level at the beginning of the
     * specified lines.
     */
    unindentLines(start: Gtk.TextIter, end: Gtk.TextIter): void
    /* Methods of Gtk-4.0.Gtk.TextView */
    /**
     * Adds a child widget in the text buffer, at the given `anchor`.
     */
    addChildAtAnchor(child: Gtk.Widget, anchor: Gtk.TextChildAnchor): void
    /**
     * Adds `child` at a fixed coordinate in the `GtkTextView`'s text window.
     * 
     * The `xpos` and `ypos` must be in buffer coordinates (see
     * [method`Gtk`.TextView.get_iter_location] to convert to
     * buffer coordinates).
     * 
     * `child` will scroll with the text view.
     * 
     * If instead you want a widget that will not move with the
     * `GtkTextView` contents see `GtkOverlay`.
     */
    addOverlay(child: Gtk.Widget, xpos: number, ypos: number): void
    /**
     * Moves the given `iter` backward by one display (wrapped) line.
     * 
     * A display line is different from a paragraph. Paragraphs are
     * separated by newlines or other paragraph separator characters.
     * Display lines are created by line-wrapping a paragraph. If
     * wrapping is turned off, display lines and paragraphs will be the
     * same. Display lines are divided differently for each view, since
     * they depend on the view’s width; paragraphs are the same in all
     * views, since they depend on the contents of the `GtkTextBuffer`.
     */
    backwardDisplayLine(iter: Gtk.TextIter): boolean
    /**
     * Moves the given `iter` backward to the next display line start.
     * 
     * A display line is different from a paragraph. Paragraphs are
     * separated by newlines or other paragraph separator characters.
     * Display lines are created by line-wrapping a paragraph. If
     * wrapping is turned off, display lines and paragraphs will be the
     * same. Display lines are divided differently for each view, since
     * they depend on the view’s width; paragraphs are the same in all
     * views, since they depend on the contents of the `GtkTextBuffer`.
     */
    backwardDisplayLineStart(iter: Gtk.TextIter): boolean
    /**
     * Converts buffer coordinates to window coordinates.
     */
    bufferToWindowCoords(win: Gtk.TextWindowType, bufferX: number, bufferY: number): [ /* windowX */ number | null, /* windowY */ number | null ]
    /**
     * Moves the given `iter` forward by one display (wrapped) line.
     * 
     * A display line is different from a paragraph. Paragraphs are
     * separated by newlines or other paragraph separator characters.
     * Display lines are created by line-wrapping a paragraph. If
     * wrapping is turned off, display lines and paragraphs will be the
     * same. Display lines are divided differently for each view, since
     * they depend on the view’s width; paragraphs are the same in all
     * views, since they depend on the contents of the `GtkTextBuffer`.
     */
    forwardDisplayLine(iter: Gtk.TextIter): boolean
    /**
     * Moves the given `iter` forward to the next display line end.
     * 
     * A display line is different from a paragraph. Paragraphs are
     * separated by newlines or other paragraph separator characters.
     * Display lines are created by line-wrapping a paragraph. If
     * wrapping is turned off, display lines and paragraphs will be the
     * same. Display lines are divided differently for each view, since
     * they depend on the view’s width; paragraphs are the same in all
     * views, since they depend on the contents of the `GtkTextBuffer`.
     */
    forwardDisplayLineEnd(iter: Gtk.TextIter): boolean
    /**
     * Returns whether pressing the <kbd>Tab</kbd> key inserts a tab characters.
     * 
     * See [method`Gtk`.TextView.set_accepts_tab].
     */
    getAcceptsTab(): boolean
    /**
     * Gets the bottom margin for text in the `text_view`.
     */
    getBottomMargin(): number
    /**
     * Returns the `GtkTextBuffer` being displayed by this text view.
     * 
     * The reference count on the buffer is not incremented; the caller
     * of this function won’t own a new reference.
     */
    getBuffer(): Gtk.TextBuffer
    /**
     * Determine the positions of the strong and weak cursors if the
     * insertion point is at `iter`.
     * 
     * The position of each cursor is stored as a zero-width rectangle.
     * The strong cursor location is the location where characters of
     * the directionality equal to the base direction of the paragraph
     * are inserted. The weak cursor location is the location where
     * characters of the directionality opposite to the base direction
     * of the paragraph are inserted.
     * 
     * If `iter` is %NULL, the actual cursor position is used.
     * 
     * Note that if `iter` happens to be the actual cursor position, and
     * there is currently an IM preedit sequence being entered, the
     * returned locations will be adjusted to account for the preedit
     * cursor’s offset within the preedit sequence.
     * 
     * The rectangle position is in buffer coordinates; use
     * [method`Gtk`.TextView.buffer_to_window_coords] to convert these
     * coordinates to coordinates for one of the windows in the text view.
     */
    getCursorLocations(iter?: Gtk.TextIter | null): [ /* strong */ Gdk.Rectangle | null, /* weak */ Gdk.Rectangle | null ]
    /**
     * Find out whether the cursor should be displayed.
     */
    getCursorVisible(): boolean
    /**
     * Returns the default editability of the `GtkTextView`.
     * 
     * Tags in the buffer may override this setting for some ranges of text.
     */
    getEditable(): boolean
    /**
     * Gets the menu model that gets added to the context menu
     * or %NULL if none has been set.
     */
    getExtraMenu(): Gio.MenuModel
    /**
     * Gets a `GtkWidget` that has previously been set as gutter.
     * 
     * See [method`Gtk`.TextView.set_gutter].
     * 
     * `win` must be one of %GTK_TEXT_WINDOW_LEFT, %GTK_TEXT_WINDOW_RIGHT,
     * %GTK_TEXT_WINDOW_TOP, or %GTK_TEXT_WINDOW_BOTTOM.
     */
    getGutter(win: Gtk.TextWindowType): Gtk.Widget | null
    /**
     * Gets the default indentation of paragraphs in `text_view`.
     * 
     * Tags in the view’s buffer may override the default.
     * The indentation may be negative.
     */
    getIndent(): number
    /**
     * Gets the `input-hints` of the `GtkTextView`.
     */
    getInputHints(): Gtk.InputHints
    /**
     * Gets the `input-purpose` of the `GtkTextView`.
     */
    getInputPurpose(): Gtk.InputPurpose
    /**
     * Retrieves the iterator at buffer coordinates `x` and `y`.
     * 
     * Buffer coordinates are coordinates for the entire buffer, not just
     * the currently-displayed portion. If you have coordinates from an
     * event, you have to convert those to buffer coordinates with
     * [method`Gtk`.TextView.window_to_buffer_coords].
     */
    getIterAtLocation(x: number, y: number): [ /* returnType */ boolean, /* iter */ Gtk.TextIter ]
    /**
     * Retrieves the iterator pointing to the character at buffer
     * coordinates `x` and `y`.
     * 
     * Buffer coordinates are coordinates for the entire buffer, not just
     * the currently-displayed portion. If you have coordinates from an event,
     * you have to convert those to buffer coordinates with
     * [method`Gtk`.TextView.window_to_buffer_coords].
     * 
     * Note that this is different from [method`Gtk`.TextView.get_iter_at_location],
     * which returns cursor locations, i.e. positions between characters.
     */
    getIterAtPosition(x: number, y: number): [ /* returnType */ boolean, /* iter */ Gtk.TextIter, /* trailing */ number | null ]
    /**
     * Gets a rectangle which roughly contains the character at `iter`.
     * 
     * The rectangle position is in buffer coordinates; use
     * [method`Gtk`.TextView.buffer_to_window_coords] to convert these
     * coordinates to coordinates for one of the windows in the text view.
     */
    getIterLocation(iter: Gtk.TextIter): /* location */ Gdk.Rectangle
    /**
     * Gets the default justification of paragraphs in `text_view`.
     * 
     * Tags in the buffer may override the default.
     */
    getJustification(): Gtk.Justification
    /**
     * Gets the default left margin size of paragraphs in the `text_view`.
     * 
     * Tags in the buffer may override the default.
     */
    getLeftMargin(): number
    /**
     * Gets the `GtkTextIter` at the start of the line containing
     * the coordinate `y`.
     * 
     * `y` is in buffer coordinates, convert from window coordinates with
     * [method`Gtk`.TextView.window_to_buffer_coords]. If non-%NULL,
     * `line_top` will be filled with the coordinate of the top edge
     * of the line.
     */
    getLineAtY(y: number): [ /* targetIter */ Gtk.TextIter, /* lineTop */ number ]
    /**
     * Gets the y coordinate of the top of the line containing `iter,`
     * and the height of the line.
     * 
     * The coordinate is a buffer coordinate; convert to window
     * coordinates with [method`Gtk`.TextView.buffer_to_window_coords].
     */
    getLineYrange(iter: Gtk.TextIter): [ /* y */ number, /* height */ number ]
    /**
     * Gets the `PangoContext` that is used for rendering LTR directed
     * text layouts.
     * 
     * The context may be replaced when CSS changes occur.
     */
    getLtrContext(): Pango.Context
    /**
     * Gets whether the `GtkTextView` uses monospace styling.
     */
    getMonospace(): boolean
    /**
     * Returns whether the `GtkTextView` is in overwrite mode or not.
     */
    getOverwrite(): boolean
    /**
     * Gets the default number of pixels to put above paragraphs.
     * 
     * Adding this function with [method`Gtk`.TextView.get_pixels_below_lines]
     * is equal to the line space between each paragraph.
     */
    getPixelsAboveLines(): number
    /**
     * Gets the default number of pixels to put below paragraphs.
     * 
     * The line space is the sum of the value returned by this function and
     * the value returned by [method`Gtk`.TextView.get_pixels_above_lines].
     */
    getPixelsBelowLines(): number
    /**
     * Gets the default number of pixels to put between wrapped lines
     * inside a paragraph.
     */
    getPixelsInsideWrap(): number
    /**
     * Gets the default right margin for text in `text_view`.
     * 
     * Tags in the buffer may override the default.
     */
    getRightMargin(): number
    /**
     * Gets the `PangoContext` that is used for rendering RTL directed
     * text layouts.
     * 
     * The context may be replaced when CSS changes occur.
     */
    getRtlContext(): Pango.Context
    /**
     * Gets the default tabs for `text_view`.
     * 
     * Tags in the buffer may override the defaults. The returned array
     * will be %NULL if “standard” (8-space) tabs are used. Free the
     * return value with [method`Pango`.TabArray.free].
     */
    getTabs(): Pango.TabArray | null
    /**
     * Gets the top margin for text in the `text_view`.
     */
    getTopMargin(): number
    /**
     * Fills `visible_rect` with the currently-visible
     * region of the buffer, in buffer coordinates.
     * 
     * Convert to window coordinates with
     * [method`Gtk`.TextView.buffer_to_window_coords].
     */
    getVisibleRect(): /* visibleRect */ Gdk.Rectangle
    /**
     * Gets the line wrapping for the view.
     */
    getWrapMode(): Gtk.WrapMode
    /**
     * Allow the `GtkTextView` input method to internally handle key press
     * and release events.
     * 
     * If this function returns %TRUE, then no further processing should be
     * done for this key event. See [method`Gtk`.IMContext.filter_keypress].
     * 
     * Note that you are expected to call this function from your handler
     * when overriding key event handling. This is needed in the case when
     * you need to insert your own key handling between the input method
     * and the default key event handling of the `GtkTextView`.
     * 
     * ```c
     * static gboolean
     * gtk_foo_bar_key_press_event (GtkWidget *widget,
     *                              GdkEvent  *event)
     * {
     *   guint keyval;
     * 
     *   gdk_event_get_keyval ((GdkEvent*)event, &keyval);
     * 
     *   if (keyval == GDK_KEY_Return || keyval == GDK_KEY_KP_Enter)
     *     {
     *       if (gtk_text_view_im_context_filter_keypress (GTK_TEXT_VIEW (widget), event))
     *         return TRUE;
     *     }
     * 
     *   // Do some stuff
     * 
     *   return GTK_WIDGET_CLASS (gtk_foo_bar_parent_class)->key_press_event (widget, event);
     * }
     * ```
     */
    imContextFilterKeypress(event: Gdk.Event): boolean
    /**
     * Moves a mark within the buffer so that it's
     * located within the currently-visible text area.
     */
    moveMarkOnscreen(mark: Gtk.TextMark): boolean
    /**
     * Updates the position of a child.
     * 
     * See [method`Gtk`.TextView.add_overlay].
     */
    moveOverlay(child: Gtk.Widget, xpos: number, ypos: number): void
    /**
     * Move the iterator a given number of characters visually, treating
     * it as the strong cursor position.
     * 
     * If `count` is positive, then the new strong cursor position will
     * be `count` positions to the right of the old cursor position.
     * If `count` is negative then the new strong cursor position will
     * be `count` positions to the left of the old cursor position.
     * 
     * In the presence of bi-directional text, the correspondence
     * between logical and visual order will depend on the direction
     * of the current run, and there may be jumps when the cursor
     * is moved off of the end of a run.
     */
    moveVisually(iter: Gtk.TextIter, count: number): boolean
    /**
     * Moves the cursor to the currently visible region of the
     * buffer.
     */
    placeCursorOnscreen(): boolean
    /**
     * Removes a child widget from `text_view`.
     */
    remove(child: Gtk.Widget): void
    /**
     * Ensures that the cursor is shown.
     * 
     * This also resets the time that it will stay blinking (or
     * visible, in case blinking is disabled).
     * 
     * This function should be called in response to user input
     * (e.g. from derived classes that override the textview's
     * event handlers).
     */
    resetCursorBlink(): void
    /**
     * Reset the input method context of the text view if needed.
     * 
     * This can be necessary in the case where modifying the buffer
     * would confuse on-going input method behavior.
     */
    resetImContext(): void
    /**
     * Scrolls `text_view` the minimum distance such that `mark` is contained
     * within the visible area of the widget.
     */
    scrollMarkOnscreen(mark: Gtk.TextMark): void
    /**
     * Scrolls `text_view` so that `iter` is on the screen in the position
     * indicated by `xalign` and `yalign`.
     * 
     * An alignment of 0.0 indicates left or top, 1.0 indicates right or
     * bottom, 0.5 means center. If `use_align` is %FALSE, the text scrolls
     * the minimal distance to get the mark onscreen, possibly not scrolling
     * at all. The effective screen for purposes of this function is reduced
     * by a margin of size `within_margin`.
     * 
     * Note that this function uses the currently-computed height of the
     * lines in the text buffer. Line heights are computed in an idle
     * handler; so this function may not have the desired effect if it’s
     * called before the height computations. To avoid oddness, consider
     * using [method`Gtk`.TextView.scroll_to_mark] which saves a point to be
     * scrolled to after line validation.
     */
    scrollToIter(iter: Gtk.TextIter, withinMargin: number, useAlign: boolean, xalign: number, yalign: number): boolean
    /**
     * Scrolls `text_view` so that `mark` is on the screen in the position
     * indicated by `xalign` and `yalign`.
     * 
     * An alignment of 0.0 indicates left or top, 1.0 indicates right or
     * bottom, 0.5 means center. If `use_align` is %FALSE, the text scrolls
     * the minimal distance to get the mark onscreen, possibly not scrolling
     * at all. The effective screen for purposes of this function is reduced
     * by a margin of size `within_margin`.
     */
    scrollToMark(mark: Gtk.TextMark, withinMargin: number, useAlign: boolean, xalign: number, yalign: number): void
    /**
     * Sets the behavior of the text widget when the <kbd>Tab</kbd> key is pressed.
     * 
     * If `accepts_tab` is %TRUE, a tab character is inserted. If `accepts_tab`
     * is %FALSE the keyboard focus is moved to the next widget in the focus
     * chain.
     */
    setAcceptsTab(acceptsTab: boolean): void
    /**
     * Sets the bottom margin for text in `text_view`.
     * 
     * Note that this function is confusingly named.
     * In CSS terms, the value set here is padding.
     */
    setBottomMargin(bottomMargin: number): void
    /**
     * Sets `buffer` as the buffer being displayed by `text_view`.
     * 
     * The previous buffer displayed by the text view is unreferenced, and
     * a reference is added to `buffer`. If you owned a reference to `buffer`
     * before passing it to this function, you must remove that reference
     * yourself; `GtkTextView` will not “adopt” it.
     */
    setBuffer(buffer?: Gtk.TextBuffer | null): void
    /**
     * Toggles whether the insertion point should be displayed.
     * 
     * A buffer with no editable text probably shouldn’t have a visible
     * cursor, so you may want to turn the cursor off.
     * 
     * Note that this property may be overridden by the
     * [property`GtkSettings:`gtk-keynav-use-caret] setting.
     */
    setCursorVisible(setting: boolean): void
    /**
     * Sets the default editability of the `GtkTextView`.
     * 
     * You can override this default setting with tags in the buffer,
     * using the “editable” attribute of tags.
     */
    setEditable(setting: boolean): void
    /**
     * Sets a menu model to add when constructing the context
     * menu for `text_view`.
     * 
     * You can pass %NULL to remove a previously set extra menu.
     */
    setExtraMenu(model?: Gio.MenuModel | null): void
    /**
     * Places `widget` into the gutter specified by `win`.
     * 
     * `win` must be one of %GTK_TEXT_WINDOW_LEFT, %GTK_TEXT_WINDOW_RIGHT,
     * %GTK_TEXT_WINDOW_TOP, or %GTK_TEXT_WINDOW_BOTTOM.
     */
    setGutter(win: Gtk.TextWindowType, widget?: Gtk.Widget | null): void
    /**
     * Sets the default indentation for paragraphs in `text_view`.
     * 
     * Tags in the buffer may override the default.
     */
    setIndent(indent: number): void
    /**
     * Sets the `input-hints` of the `GtkTextView`.
     * 
     * The `input-hints` allow input methods to fine-tune
     * their behaviour.
     */
    setInputHints(hints: Gtk.InputHints): void
    /**
     * Sets the `input-purpose` of the `GtkTextView`.
     * 
     * The `input-purpose` can be used by on-screen keyboards
     * and other input methods to adjust their behaviour.
     */
    setInputPurpose(purpose: Gtk.InputPurpose): void
    /**
     * Sets the default justification of text in `text_view`.
     * 
     * Tags in the view’s buffer may override the default.
     */
    setJustification(justification: Gtk.Justification): void
    /**
     * Sets the default left margin for text in `text_view`.
     * 
     * Tags in the buffer may override the default.
     * 
     * Note that this function is confusingly named.
     * In CSS terms, the value set here is padding.
     */
    setLeftMargin(leftMargin: number): void
    /**
     * Sets whether the `GtkTextView` should display text in
     * monospace styling.
     */
    setMonospace(monospace: boolean): void
    /**
     * Changes the `GtkTextView` overwrite mode.
     */
    setOverwrite(overwrite: boolean): void
    /**
     * Sets the default number of blank pixels above paragraphs in `text_view`.
     * 
     * Tags in the buffer for `text_view` may override the defaults.
     */
    setPixelsAboveLines(pixelsAboveLines: number): void
    /**
     * Sets the default number of pixels of blank space
     * to put below paragraphs in `text_view`.
     * 
     * May be overridden by tags applied to `text_view’`s buffer.
     */
    setPixelsBelowLines(pixelsBelowLines: number): void
    /**
     * Sets the default number of pixels of blank space to leave between
     * display/wrapped lines within a paragraph.
     * 
     * May be overridden by tags in `text_view’`s buffer.
     */
    setPixelsInsideWrap(pixelsInsideWrap: number): void
    /**
     * Sets the default right margin for text in the text view.
     * 
     * Tags in the buffer may override the default.
     * 
     * Note that this function is confusingly named.
     * In CSS terms, the value set here is padding.
     */
    setRightMargin(rightMargin: number): void
    /**
     * Sets the default tab stops for paragraphs in `text_view`.
     * 
     * Tags in the buffer may override the default.
     */
    setTabs(tabs: Pango.TabArray): void
    /**
     * Sets the top margin for text in `text_view`.
     * 
     * Note that this function is confusingly named.
     * In CSS terms, the value set here is padding.
     */
    setTopMargin(topMargin: number): void
    /**
     * Sets the line wrapping for the view.
     */
    setWrapMode(wrapMode: Gtk.WrapMode): void
    /**
     * Determines whether `iter` is at the start of a display line.
     * 
     * See [method`Gtk`.TextView.forward_display_line] for an
     * explanation of display lines vs. paragraphs.
     */
    startsDisplayLine(iter: Gtk.TextIter): boolean
    /**
     * Converts coordinates on the window identified by `win` to buffer
     * coordinates.
     */
    windowToBufferCoords(win: Gtk.TextWindowType, windowX: number, windowY: number): [ /* bufferX */ number | null, /* bufferY */ number | null ]
    /* Methods of Gtk-4.0.Gtk.Widget */
    /**
     * Enable or disable an action installed with
     * gtk_widget_class_install_action().
     */
    actionSetEnabled(actionName: string, enabled: boolean): void
    /**
     * For widgets that can be “activated” (buttons, menu items, etc.),
     * this function activates them.
     * 
     * The activation will emit the signal set using
     * [method`Gtk`.WidgetClass.set_activate_signal] during class initialization.
     * 
     * Activation is what happens when you press <kbd>Enter</kbd>
     * on a widget during key navigation.
     * 
     * If you wish to handle the activation keybinding yourself, it is
     * recommended to use [method`Gtk`.WidgetClass.add_shortcut] with an action
     * created with [ctor`Gtk`.SignalAction.new].
     * 
     * If `widget` isn't activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Looks up the action in the action groups associated with
     * `widget` and its ancestors, and activates it.
     * 
     * If the action is in an action group added with
     * [method`Gtk`.Widget.insert_action_group], the `name` is expected
     * to be prefixed with the prefix that was used when the group was
     * inserted.
     * 
     * The arguments must match the actions expected parameter type,
     * as returned by `g_action_get_parameter_type()`.
     */
    activateAction(name: string, args?: GLib.Variant | null): boolean
    /**
     * Activates the `default.activate` action from `widget`.
     */
    activateDefault(): void
    /**
     * Adds `controller` to `widget` so that it will receive events.
     * 
     * You will usually want to call this function right after
     * creating any kind of [class`Gtk`.EventController].
     */
    addController(controller: Gtk.EventController): void
    /**
     * Adds a style class to `widget`.
     * 
     * After calling this function, the widgets style will match
     * for `css_class,` according to CSS matching rules.
     * 
     * Use [method`Gtk`.Widget.remove_css_class] to remove the
     * style again.
     */
    addCssClass(cssClass: string): void
    /**
     * Adds a widget to the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. Note the
     * list of mnemonic labels for the widget is cleared when the
     * widget is destroyed, so the caller must make sure to update
     * its internal state at this point as well.
     */
    addMnemonicLabel(label: Gtk.Widget): void
    /**
     * Queues an animation frame update and adds a callback to be called
     * before each frame.
     * 
     * Until the tick callback is removed, it will be called frequently
     * (usually at the frame rate of the output device or as quickly as
     * the application can be repainted, whichever is slower). For this
     * reason, is most suitable for handling graphics that change every
     * frame or every few frames. The tick callback does not automatically
     * imply a relayout or repaint. If you want a repaint or relayout, and
     * aren’t changing widget properties that would trigger that (for example,
     * changing the text of a `GtkLabel`), then you will have to call
     * [method`Gtk`.Widget.queue_resize] or [method`Gtk`.Widget.queue_draw]
     * yourself.
     * 
     * [method`Gdk`.FrameClock.get_frame_time] should generally be used
     * for timing continuous animations and
     * [method`Gdk`.FrameTimings.get_predicted_presentation_time] if you are
     * trying to display isolated frames at particular times.
     * 
     * This is a more convenient alternative to connecting directly to the
     * [signal`Gdk`.FrameClock::update] signal of `GdkFrameClock`, since you
     * don't have to worry about when a `GdkFrameClock` is assigned to a widget.
     */
    addTickCallback(callback: Gtk.TickCallback): number
    /**
     * This function is only used by `GtkWidget` subclasses, to
     * assign a size, position and (optionally) baseline to their
     * child widgets.
     * 
     * In this function, the allocation and baseline may be adjusted.
     * The given allocation will be forced to be bigger than the
     * widget's minimum size, as well as at least 0×0 in size.
     * 
     * For a version that does not take a transform, see
     * [method`Gtk`.Widget.size_allocate].
     */
    allocate(width: number, height: number, baseline: number, transform?: Gsk.Transform | null): void
    /**
     * Called by widgets as the user moves around the window using
     * keyboard shortcuts.
     * 
     * The `direction` argument indicates what kind of motion is taking place (up,
     * down, left, right, tab forward, tab backward).
     * 
     * This function calls the [vfunc`Gtk`.Widget.focus] virtual function; widgets
     * can override the virtual function in order to implement appropriate focus
     * behavior.
     * 
     * The default `focus()` virtual function for a widget should return `TRUE` if
     * moving in `direction` left the focus on a focusable location inside that
     * widget, and `FALSE` if moving in `direction` moved the focus outside the
     * widget. When returning `TRUE`, widgets normallycall [method`Gtk`.Widget.grab_focus]
     * to place the focus accordingly; when returning `FALSE`, they don’t modify
     * the current focus location.
     * 
     * This function is used by custom widget implementations; if you're
     * writing an app, you’d use [method`Gtk`.Widget.grab_focus] to move
     * the focus to a particular widget.
     */
    childFocus(direction: Gtk.DirectionType): boolean
    /**
     * Computes the bounds for `widget` in the coordinate space of `target`.
     * 
     * FIXME: Explain what "bounds" are.
     * 
     * If the operation is successful, %TRUE is returned. If `widget` has no
     * bounds or the bounds cannot be expressed in `target'`s coordinate space
     * (for example if both widgets are in different windows), %FALSE is
     * returned and `bounds` is set to the zero rectangle.
     * 
     * It is valid for `widget` and `target` to be the same widget.
     */
    computeBounds(target: Gtk.Widget): [ /* returnType */ boolean, /* outBounds */ Graphene.Rect ]
    /**
     * Computes whether a container should give this widget
     * extra space when possible.
     * 
     * Containers should check this, rather than looking at
     * [method`Gtk`.Widget.get_hexpand] or [method`Gtk`.Widget.get_vexpand].
     * 
     * This function already checks whether the widget is visible, so
     * visibility does not need to be checked separately. Non-visible
     * widgets are not expanded.
     * 
     * The computed expand value uses either the expand setting explicitly
     * set on the widget itself, or, if none has been explicitly set,
     * the widget may expand if some of its children do.
     */
    computeExpand(orientation: Gtk.Orientation): boolean
    /**
     * Translates the given `point` in `widget'`s coordinates to coordinates
     * relative to `target’`s coordinate system.
     * 
     * In order to perform this operation, both widgets must share a
     * common ancestor.
     */
    computePoint(target: Gtk.Widget, point: Graphene.Point): [ /* returnType */ boolean, /* outPoint */ Graphene.Point ]
    /**
     * Computes a matrix suitable to describe a transformation from
     * `widget'`s coordinate system into `target'`s coordinate system.
     * 
     * The transform can not be computed in certain cases, for example
     * when `widget` and `target` do not share a common ancestor. In that
     * case `out_transform` gets set to the identity matrix.
     */
    computeTransform(target: Gtk.Widget): [ /* returnType */ boolean, /* outTransform */ Graphene.Matrix ]
    /**
     * Tests if the point at (`x,` `y)` is contained in `widget`.
     * 
     * The coordinates for (`x,` `y)` must be in widget coordinates, so
     * (0, 0) is assumed to be the top left of `widget'`s content area.
     */
    contains(x: number, y: number): boolean
    /**
     * Creates a new `PangoContext` with the appropriate font map,
     * font options, font description, and base direction for drawing
     * text for this widget.
     * 
     * See also [method`Gtk`.Widget.get_pango_context].
     */
    createPangoContext(): Pango.Context
    /**
     * Creates a new `PangoLayout` with the appropriate font map,
     * font description, and base direction for drawing text for
     * this widget.
     * 
     * If you keep a `PangoLayout` created in this way around,
     * you need to re-create it when the widget `PangoContext`
     * is replaced. This can be tracked by listening to changes
     * of the [property`Gtk`.Widget:root] property on the widget.
     */
    createPangoLayout(text?: string | null): Pango.Layout
    /**
     * Checks to see if a drag movement has passed the GTK drag threshold.
     */
    dragCheckThreshold(startX: number, startY: number, currentX: number, currentY: number): boolean
    /**
     * Notifies the user about an input-related error on this widget.
     * 
     * If the [property`Gtk`.Settings:gtk-error-bell] setting is %TRUE,
     * it calls [method`Gdk`.Surface.beep], otherwise it does nothing.
     * 
     * Note that the effect of [method`Gdk`.Surface.beep] can be configured
     * in many ways, depending on the windowing backend and the desktop
     * environment or window manager that is used.
     */
    errorBell(): void
    /**
     * Returns the baseline that has currently been allocated to `widget`.
     * 
     * This function is intended to be used when implementing handlers
     * for the `GtkWidget`Class.snapshot() function, and when allocating
     * child widgets in `GtkWidget`Class.size_allocate().
     */
    getAllocatedBaseline(): number
    /**
     * Returns the height that has currently been allocated to `widget`.
     */
    getAllocatedHeight(): number
    /**
     * Returns the width that has currently been allocated to `widget`.
     */
    getAllocatedWidth(): number
    /**
     * Retrieves the widget’s allocation.
     * 
     * Note, when implementing a layout container: a widget’s allocation
     * will be its “adjusted” allocation, that is, the widget’s parent
     * typically calls [method`Gtk`.Widget.size_allocate] with an allocation,
     * and that allocation is then adjusted (to handle margin
     * and alignment for example) before assignment to the widget.
     * [method`Gtk`.Widget.get_allocation] returns the adjusted allocation that
     * was actually assigned to the widget. The adjusted allocation is
     * guaranteed to be completely contained within the
     * [method`Gtk`.Widget.size_allocate] allocation, however.
     * 
     * So a layout container is guaranteed that its children stay inside
     * the assigned bounds, but not that they have exactly the bounds the
     * container assigned.
     */
    getAllocation(): /* allocation */ Gtk.Allocation
    /**
     * Gets the first ancestor of `widget` with type `widget_type`.
     * 
     * For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)`
     * gets the first `GtkBox` that’s an ancestor of `widget`. No
     * reference will be added to the returned widget; it should
     * not be unreferenced.
     * 
     * Note that unlike [method`Gtk`.Widget.is_ancestor], this function
     * considers `widget` to be an ancestor of itself.
     */
    getAncestor(widgetType: GObject.Type): Gtk.Widget | null
    /**
     * Determines whether the input focus can enter `widget` or any
     * of its children.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getCanFocus(): boolean
    /**
     * Queries whether `widget` can be the target of pointer events.
     */
    getCanTarget(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * 
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    getChildVisible(): boolean
    /**
     * Gets the clipboard object for `widget`.
     * 
     * This is a utility function to get the clipboard object for the
     * `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getClipboard(): Gdk.Clipboard
    /**
     * Returns the list of style classes applied to `widget`.
     */
    getCssClasses(): string[]
    /**
     * Returns the CSS name that is used for `self`.
     */
    getCssName(): string
    /**
     * Queries the cursor set on `widget`.
     * 
     * See [method`Gtk`.Widget.set_cursor] for details.
     */
    getCursor(): Gdk.Cursor | null
    /**
     * Gets the reading direction for a particular widget.
     * 
     * See [method`Gtk`.Widget.set_direction].
     */
    getDirection(): Gtk.TextDirection
    /**
     * Get the `GdkDisplay` for the toplevel window associated with
     * this widget.
     * 
     * This function can only be called after the widget has been
     * added to a widget hierarchy with a `GtkWindow` at the top.
     * 
     * In general, you should only create display specific
     * resources when a widget has been realized, and you should
     * free those resources when the widget is unrealized.
     */
    getDisplay(): Gdk.Display
    /**
     * Returns the widgets first child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getFirstChild(): Gtk.Widget | null
    /**
     * Returns the current focus child of `widget`.
     */
    getFocusChild(): Gtk.Widget | null
    /**
     * Returns whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * See [method`Gtk`.Widget.set_focus_on_click].
     */
    getFocusOnClick(): boolean
    /**
     * Determines whether `widget` can own the input focus.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getFocusable(): boolean
    /**
     * Gets the font map of `widget`.
     * 
     * See [method`Gtk`.Widget.set_font_map].
     */
    getFontMap(): Pango.FontMap | null
    /**
     * Returns the `cairo_font_options_t` of widget.
     * 
     * Seee [method`Gtk`.Widget.set_font_options].
     */
    getFontOptions(): cairo.FontOptions | null
    /**
     * Obtains the frame clock for a widget.
     * 
     * The frame clock is a global “ticker” that can be used to drive
     * animations and repaints. The most common reason to get the frame
     * clock is to call [method`Gdk`.FrameClock.get_frame_time], in order
     * to get a time to use for animating. For example you might record
     * the start of the animation with an initial value from
     * [method`Gdk`.FrameClock.get_frame_time], and then update the animation
     * by calling [method`Gdk`.FrameClock.get_frame_time] again during each repaint.
     * 
     * [method`Gdk`.FrameClock.request_phase] will result in a new frame on the
     * clock, but won’t necessarily repaint any widgets. To repaint a
     * widget, you have to use [method`Gtk`.Widget.queue_draw] which invalidates
     * the widget (thus scheduling it to receive a draw on the next
     * frame). gtk_widget_queue_draw() will also end up requesting a frame
     * on the appropriate frame clock.
     * 
     * A widget’s frame clock will not change while the widget is
     * mapped. Reparenting a widget (which implies a temporary unmap) can
     * change the widget’s frame clock.
     * 
     * Unrealized widgets do not have a frame clock.
     */
    getFrameClock(): Gdk.FrameClock | null
    /**
     * Gets the horizontal alignment of `widget`.
     * 
     * For backwards compatibility reasons this method will never return
     * %GTK_ALIGN_BASELINE, but instead it will convert it to
     * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
     * alignment.
     */
    getHalign(): Gtk.Align
    /**
     * Returns the current value of the `has-tooltip` property.
     */
    getHasTooltip(): boolean
    /**
     * Returns the content height of the widget.
     * 
     * This function returns the height passed to its
     * size-allocate implementation, which is the height you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getHeight(): number
    /**
     * Gets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Containers should use [method`Gtk`.Widget.compute_expand] rather
     * than this function, to see whether a widget, or any of its children,
     * has the expand flag set. If any child of a widget wants to
     * expand, the parent may ask to expand also.
     * 
     * This function only looks at the widget’s own hexpand flag, rather
     * than computing whether the entire widget tree rooted at this widget
     * wants to expand.
     */
    getHexpand(): boolean
    /**
     * Gets whether gtk_widget_set_hexpand() has been used
     * to explicitly set the expand flag on this widget.
     * 
     * If [property`Gtk`.Widget:hexpand] property is set, then it
     * overrides any computed expand value based on child widgets.
     * If `hexpand` is not set, then the expand value depends on
     * whether any children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    getHexpandSet(): boolean
    /**
     * Returns the widgets last child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getLastChild(): Gtk.Widget | null
    /**
     * Retrieves the layout manager used by `widget`.
     * 
     * See [method`Gtk`.Widget.set_layout_manager].
     */
    getLayoutManager(): Gtk.LayoutManager | null
    /**
     * Whether the widget is mapped.
     */
    getMapped(): boolean
    /**
     * Gets the bottom margin of `widget`.
     */
    getMarginBottom(): number
    /**
     * Gets the end margin of `widget`.
     */
    getMarginEnd(): number
    /**
     * Gets the start margin of `widget`.
     */
    getMarginStart(): number
    /**
     * Gets the top margin of `widget`.
     */
    getMarginTop(): number
    /**
     * Retrieves the name of a widget.
     * 
     * See [method`Gtk`.Widget.set_name] for the significance of widget names.
     */
    getName(): string
    /**
     * Returns the nearest `GtkNative` ancestor of `widget`.
     * 
     * This function will return %NULL if the widget is not
     * contained inside a widget tree with a native ancestor.
     * 
     * `GtkNative` widgets will return themselves here.
     */
    getNative(): Gtk.Native | null
    /**
     * Returns the widgets next sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getNextSibling(): Gtk.Widget | null
    /**
     * #Fetches the requested opacity for this widget.
     * 
     * See [method`Gtk`.Widget.set_opacity].
     */
    getOpacity(): number
    /**
     * Returns the widgets overflow value.
     */
    getOverflow(): Gtk.Overflow
    /**
     * Gets a `PangoContext` with the appropriate font map, font description,
     * and base direction for this widget.
     * 
     * Unlike the context returned by [method`Gtk`.Widget.create_pango_context],
     * this context is owned by the widget (it can be used until the screen
     * for the widget changes or the widget is removed from its toplevel),
     * and will be updated to match any changes to the widget’s attributes.
     * This can be tracked by listening to changes of the
     * [property`Gtk`.Widget:root] property on the widget.
     */
    getPangoContext(): Pango.Context
    /**
     * Returns the parent widget of `widget`.
     */
    getParent(): Gtk.Widget | null
    /**
     * Retrieves the minimum and natural size of a widget, taking
     * into account the widget’s preference for height-for-width management.
     * 
     * This is used to retrieve a suitable size by container widgets which do
     * not impose any restrictions on the child placement. It can be used
     * to deduce toplevel window and menu sizes as well as child widgets in
     * free-form containers such as `GtkFixed`.
     * 
     * Handle with care. Note that the natural height of a height-for-width
     * widget will generally be a smaller size than the minimum height, since
     * the required height for the natural width is generally smaller than the
     * required height for the minimum width.
     * 
     * Use [id`gtk_widget_measure]` if you want to support baseline alignment.
     */
    getPreferredSize(): [ /* minimumSize */ Gtk.Requisition | null, /* naturalSize */ Gtk.Requisition | null ]
    /**
     * Returns the widgets previous sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getPrevSibling(): Gtk.Widget | null
    /**
     * Gets the primary clipboard of `widget`.
     * 
     * This is a utility function to get the primary clipboard object
     * for the `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getPrimaryClipboard(): Gdk.Clipboard
    /**
     * Determines whether `widget` is realized.
     */
    getRealized(): boolean
    /**
     * Determines whether `widget` is always treated as the default widget
     * within its toplevel when it has the focus, even if another widget
     * is the default.
     * 
     * See [method`Gtk`.Widget.set_receives_default].
     */
    getReceivesDefault(): boolean
    /**
     * Gets whether the widget prefers a height-for-width layout
     * or a width-for-height layout.
     * 
     * Single-child widgets generally propagate the preference of
     * their child, more complex widgets need to request something
     * either in context of their children or in context of their
     * allocation capabilities.
     */
    getRequestMode(): Gtk.SizeRequestMode
    /**
     * Returns the `GtkRoot` widget of `widget`.
     * 
     * This function will return %NULL if the widget is not contained
     * inside a widget tree with a root widget.
     * 
     * `GtkRoot` widgets will return themselves here.
     */
    getRoot(): Gtk.Root | null
    /**
     * Retrieves the internal scale factor that maps from window
     * coordinates to the actual device pixels.
     * 
     * On traditional systems this is 1, on high density outputs,
     * it can be a higher value (typically 2).
     * 
     * See [method`Gdk`.Surface.get_scale_factor].
     */
    getScaleFactor(): number
    /**
     * Returns the widget’s sensitivity.
     * 
     * This function returns the value that has been set using
     * [method`Gtk`.Widget.set_sensitive]).
     * 
     * The effective sensitivity of a widget is however determined
     * by both its own and its parent widget’s sensitivity.
     * See [method`Gtk`.Widget.is_sensitive].
     */
    getSensitive(): boolean
    /**
     * Gets the settings object holding the settings used for this widget.
     * 
     * Note that this function can only be called when the `GtkWidget`
     * is attached to a toplevel, since the settings object is specific
     * to a particular `GdkDisplay`. If you want to monitor the widget for
     * changes in its settings, connect to the `notify::display` signal.
     */
    getSettings(): Gtk.Settings
    /**
     * Returns the content width or height of the widget.
     * 
     * Which dimension is returned depends on `orientation`.
     * 
     * This is equivalent to calling [method`Gtk`.Widget.get_width]
     * for %GTK_ORIENTATION_HORIZONTAL or [method`Gtk`.Widget.get_height]
     * for %GTK_ORIENTATION_VERTICAL, but can be used when
     * writing orientation-independent code, such as when
     * implementing [iface`Gtk`.Orientable] widgets.
     */
    getSize(orientation: Gtk.Orientation): number
    /**
     * Gets the size request that was explicitly set for the widget using
     * gtk_widget_set_size_request().
     * 
     * A value of -1 stored in `width` or `height` indicates that that
     * dimension has not been set explicitly and the natural requisition
     * of the widget will be used instead. See
     * [method`Gtk`.Widget.set_size_request]. To get the size a widget will
     * actually request, call [method`Gtk`.Widget.measure] instead of
     * this function.
     */
    getSizeRequest(): [ /* width */ number | null, /* height */ number | null ]
    /**
     * Returns the widget state as a flag set.
     * 
     * It is worth mentioning that the effective %GTK_STATE_FLAG_INSENSITIVE
     * state will be returned, that is, also based on parent insensitivity,
     * even if `widget` itself is sensitive.
     * 
     * Also note that if you are looking for a way to obtain the
     * [flags`Gtk`.StateFlags] to pass to a [class`Gtk`.StyleContext]
     * method, you should look at [method`Gtk`.StyleContext.get_state].
     */
    getStateFlags(): Gtk.StateFlags
    /**
     * Returns the style context associated to `widget`.
     * 
     * The returned object is guaranteed to be the same
     * for the lifetime of `widget`.
     */
    getStyleContext(): Gtk.StyleContext
    /**
     * Fetch an object build from the template XML for `widget_type` in
     * this `widget` instance.
     * 
     * This will only report children which were previously declared
     * with [method`Gtk`.WidgetClass.bind_template_child_full] or one of its
     * variants.
     * 
     * This function is only meant to be called for code which is private
     * to the `widget_type` which declared the child and is meant for language
     * bindings which cannot easily make use of the GObject structure offsets.
     */
    getTemplateChild(widgetType: GObject.Type, name: string): GObject.Object
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the tooltip has not been set using
     * [method`Gtk`.Widget.set_tooltip_markup], this
     * function returns %NULL.
     */
    getTooltipMarkup(): string | null
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the `widget'`s tooltip was set using
     * [method`Gtk`.Widget.set_tooltip_markup],
     * this function will return the escaped text.
     */
    getTooltipText(): string | null
    /**
     * Gets the vertical alignment of `widget`.
     */
    getValign(): Gtk.Align
    /**
     * Gets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.get_hexpand] for more detail.
     */
    getVexpand(): boolean
    /**
     * Gets whether gtk_widget_set_vexpand() has been used to
     * explicitly set the expand flag on this widget.
     * 
     * See [method`Gtk`.Widget.get_hexpand_set] for more detail.
     */
    getVexpandSet(): boolean
    /**
     * Determines whether the widget is visible.
     * 
     * If you want to take into account whether the widget’s
     * parent is also marked as visible, use
     * [method`Gtk`.Widget.is_visible] instead.
     * 
     * This function does not check if the widget is
     * obscured in any way.
     * 
     * See [method`Gtk`.Widget.set_visible].
     */
    getVisible(): boolean
    /**
     * Returns the content width of the widget.
     * 
     * This function returns the width passed to its
     * size-allocate implementation, which is the width you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getWidth(): number
    /**
     * Causes `widget` to have the keyboard focus for the `GtkWindow` it's inside.
     * 
     * If `widget` is not focusable, or its [vfunc`Gtk`.Widget.grab_focus]
     * implementation cannot transfer the focus to a descendant of `widget`
     * that is focusable, it will not take focus and %FALSE will be returned.
     * 
     * Calling [method`Gtk`.Widget.grab_focus] on an already focused widget
     * is allowed, should not have an effect, and return %TRUE.
     */
    grabFocus(): boolean
    /**
     * Returns whether `css_class` is currently applied to `widget`.
     */
    hasCssClass(cssClass: string): boolean
    /**
     * Determines if the widget should show a visible indication that
     * it has the global input focus.
     * 
     * This is a convenience function that takes into account whether
     * focus indication should currently be shown in the toplevel window
     * of `widget`. See [method`Gtk`.Window.get_focus_visible] for more
     * information about focus indication.
     * 
     * To find out if the widget has the global input focus, use
     * [method`Gtk`.Widget.has_focus].
     */
    hasVisibleFocus(): boolean
    /**
     * Reverses the effects of gtk_widget_show().
     * 
     * This is causing the widget to be hidden (invisible to the user).
     */
    hide(): void
    /**
     * Returns whether the widget is currently being destroyed.
     * 
     * This information can sometimes be used to avoid doing
     * unnecessary work.
     */
    inDestruction(): boolean
    /**
     * Creates and initializes child widgets defined in templates.
     * 
     * This function must be called in the instance initializer
     * for any class which assigned itself a template using
     * [method`Gtk`.WidgetClass.set_template].
     * 
     * It is important to call this function in the instance initializer
     * of a `GtkWidget` subclass and not in `GObject.constructed()` or
     * `GObject.constructor()` for two reasons:
     * 
     *  - derived widgets will assume that the composite widgets
     *    defined by its parent classes have been created in their
     *    relative instance initializers
     *  - when calling `g_object_new()` on a widget with composite templates,
     *    it’s important to build the composite widgets before the construct
     *    properties are set. Properties passed to `g_object_new()` should
     *    take precedence over properties set in the private template XML
     * 
     * A good rule of thumb is to call this function as the first thing in
     * an instance initialization function.
     */
    initTemplate(): void
    /**
     * Inserts `group` into `widget`.
     * 
     * Children of `widget` that implement [iface`Gtk`.Actionable] can
     * then be associated with actions in `group` by setting their
     * “action-name” to `prefix`.`action-name`.
     * 
     * Note that inheritance is defined for individual actions. I.e.
     * even if you insert a group with prefix `prefix,` actions with
     * the same prefix will still be inherited from the parent, unless
     * the group contains an action with the same name.
     * 
     * If `group` is %NULL, a previously inserted group for `name` is
     * removed from `widget`.
     */
    insertActionGroup(name: string, group?: Gio.ActionGroup | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed after `previous_sibling,` or at the beginning if
     * `previous_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_prev_sibling(widget)`
     * will return `previous_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this
     * function can also be used to reorder `widget` in the child widget
     * list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertAfter(parent: Gtk.Widget, previousSibling?: Gtk.Widget | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed before `next_sibling,` or at the end if
     * `next_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_next_sibling(widget)`
     * will return `next_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this function
     * can also be used to reorder `widget` in the child widget list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertBefore(parent: Gtk.Widget, nextSibling?: Gtk.Widget | null): void
    /**
     * Determines whether `widget` is somewhere inside `ancestor,`
     * possibly with intermediate containers.
     */
    isAncestor(ancestor: Gtk.Widget): boolean
    /**
     * Determines whether `widget` can be drawn to.
     * 
     * A widget can be drawn if it is mapped and visible.
     */
    isDrawable(): boolean
    /**
     * Determines if the widget is the focus widget within its
     * toplevel.
     * 
     * This does not mean that the [property`Gtk`.Widget:has-focus]
     * property is necessarily set; [property`Gtk`.Widget:has-focus]
     * will only be set if the toplevel widget additionally has the
     * global input focus.
     */
    isFocus(): boolean
    /**
     * Returns the widget’s effective sensitivity.
     * 
     * This means it is sensitive itself and also its
     * parent widget is sensitive.
     */
    isSensitive(): boolean
    /**
     * Determines whether the widget and all its parents are marked as
     * visible.
     * 
     * This function does not check if the widget is obscured in any way.
     * 
     * See also [method`Gtk`.Widget.get_visible] and
     * [method`Gtk`.Widget.set_visible].
     */
    isVisible(): boolean
    /**
     * Emits the `::keynav-failed` signal on the widget.
     * 
     * This function should be called whenever keyboard navigation
     * within a single widget hits a boundary.
     * 
     * The return value of this function should be interpreted
     * in a way similar to the return value of
     * [method`Gtk`.Widget.child_focus]. When %TRUE is returned,
     * stay in the widget, the failed keyboard  navigation is OK
     * and/or there is nowhere we can/should move the focus to.
     * When %FALSE is returned, the caller should continue with
     * keyboard navigation outside the widget, e.g. by calling
     * [method`Gtk`.Widget.child_focus] on the widget’s toplevel.
     * 
     * The default [signal`Gtk`.Widget::keynav-failed] handler returns
     * %FALSE for %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD.
     * For the other values of `GtkDirectionType` it returns %TRUE.
     * 
     * Whenever the default handler returns %TRUE, it also calls
     * [method`Gtk`.Widget.error_bell] to notify the user of the
     * failed keyboard navigation.
     * 
     * A use case for providing an own implementation of ::keynav-failed
     * (either by connecting to it or by overriding it) would be a row of
     * [class`Gtk`.Entry] widgets where the user should be able to navigate
     * the entire row with the cursor keys, as e.g. known from user
     * interfaces that require entering license keys.
     */
    keynavFailed(direction: Gtk.DirectionType): boolean
    /**
     * Returns the widgets for which this widget is the target of a
     * mnemonic.
     * 
     * Typically, these widgets will be labels. See, for example,
     * [method`Gtk`.Label.set_mnemonic_widget].
     * 
     * The widgets in the list are not individually referenced.
     * If you want to iterate through the list and perform actions
     * involving callbacks that might destroy the widgets, you
     * must call `g_list_foreach (result, (GFunc)g_object_ref, NULL)`
     * first, and then unref all the widgets afterwards.
     */
    listMnemonicLabels(): Gtk.Widget[]
    /**
     * Causes a widget to be mapped if it isn’t already.
     * 
     * This function is only for use in widget implementations.
     */
    map(): void
    /**
     * Measures `widget` in the orientation `orientation` and for the given `for_size`.
     * 
     * As an example, if `orientation` is %GTK_ORIENTATION_HORIZONTAL and `for_size`
     * is 300, this functions will compute the minimum and natural width of `widget`
     * if it is allocated at a height of 300 pixels.
     * 
     * See [GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management) for
     * a more details on implementing `GtkWidgetClass.measure()`.
     */
    measure(orientation: Gtk.Orientation, forSize: number): [ /* minimum */ number | null, /* natural */ number | null, /* minimumBaseline */ number | null, /* naturalBaseline */ number | null ]
    /**
     * Emits the ::mnemonic-activate signal.
     * 
     * See [signal`Gtk`.Widget::mnemonic-activate].
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Returns a `GListModel` to track the children of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track children and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeChildren(): Gio.ListModel
    /**
     * Returns a `GListModel` to track the [class`Gtk`.EventController]s
     * of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track controllers and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeControllers(): Gio.ListModel
    /**
     * Finds the descendant of `widget` closest to the point (`x,` `y)`.
     * 
     * The point must be given in widget coordinates, so (0, 0) is assumed
     * to be the top left of `widget'`s content area.
     * 
     * Usually widgets will return %NULL if the given coordinate is not
     * contained in `widget` checked via [method`Gtk`.Widget.contains].
     * Otherwise they will recursively try to find a child that does
     * not return %NULL. Widgets are however free to customize their
     * picking algorithm.
     * 
     * This function is used on the toplevel to determine the widget
     * below the mouse cursor for purposes of hover highlighting and
     * delivering events.
     */
    pick(x: number, y: number, flags: Gtk.PickFlags): Gtk.Widget | null
    /**
     * Flags the widget for a rerun of the [vfunc`Gtk`.Widget.size_allocate]
     * function.
     * 
     * Use this function instead of [method`Gtk`.Widget.queue_resize]
     * when the `widget'`s size request didn't change but it wants to
     * reposition its contents.
     * 
     * An example user of this function is [method`Gtk`.Widget.set_halign].
     * 
     * This function is only for use in widget implementations.
     */
    queueAllocate(): void
    /**
     * Schedules this widget to be redrawn in the paint phase
     * of the current or the next frame.
     * 
     * This means `widget'`s [vfunc`Gtk`.Widget.snapshot]
     * implementation will be called.
     */
    queueDraw(): void
    /**
     * Flags a widget to have its size renegotiated.
     * 
     * This should be called when a widget for some reason has a new
     * size request. For example, when you change the text in a
     * [class`Gtk`.Label], the label queues a resize to ensure there’s
     * enough space for the new text.
     * 
     * Note that you cannot call gtk_widget_queue_resize() on a widget
     * from inside its implementation of the [vfunc`Gtk`.Widget.size_allocate]
     * virtual method. Calls to gtk_widget_queue_resize() from inside
     * [vfunc`Gtk`.Widget.size_allocate] will be silently ignored.
     * 
     * This function is only for use in widget implementations.
     */
    queueResize(): void
    /**
     * Creates the GDK resources associated with a widget.
     * 
     * Normally realization happens implicitly; if you show a widget
     * and all its parent containers, then the widget will be realized
     * and mapped automatically.
     * 
     * Realizing a widget requires all the widget’s parent widgets to be
     * realized; calling this function realizes the widget’s parents
     * in addition to `widget` itself. If a widget is not yet inside a
     * toplevel window when you realize it, bad things will happen.
     * 
     * This function is primarily used in widget implementations, and
     * isn’t very useful otherwise. Many times when you think you might
     * need it, a better approach is to connect to a signal that will be
     * called after the widget is realized automatically, such as
     * [signal`Gtk`.Widget::realize].
     */
    realize(): void
    /**
     * Removes `controller` from `widget,` so that it doesn't process
     * events anymore.
     * 
     * It should not be used again.
     * 
     * Widgets will remove all event controllers automatically when they
     * are destroyed, there is normally no need to call this function.
     */
    removeController(controller: Gtk.EventController): void
    /**
     * Removes a style from `widget`.
     * 
     * After this, the style of `widget` will stop matching for `css_class`.
     */
    removeCssClass(cssClass: string): void
    /**
     * Removes a widget from the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. The widget must
     * have previously been added to the list with
     * [method`Gtk`.Widget.add_mnemonic_label].
     */
    removeMnemonicLabel(label: Gtk.Widget): void
    /**
     * Removes a tick callback previously registered with
     * gtk_widget_add_tick_callback().
     */
    removeTickCallback(id: number): void
    /**
     * Specifies whether the input focus can enter the widget
     * or any of its children.
     * 
     * Applications should set `can_focus` to %FALSE to mark a
     * widget as for pointer/touch use only.
     * 
     * Note that having `can_focus` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and focusable and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setCanFocus(canFocus: boolean): void
    /**
     * Sets whether `widget` can be the target of pointer events.
     */
    setCanTarget(canTarget: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its parent.
     * 
     * The child visibility can be set for widget before it is added
     * to a container with [method`Gtk`.Widget.set_parent], to avoid
     * mapping children unnecessary before immediately unmapping them.
     * However it will be reset to its default state of %TRUE when the
     * widget is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    setChildVisible(childVisible: boolean): void
    /**
     * Clear all style classes applied to `widget`
     * and replace them with `classes`.
     */
    setCssClasses(classes: string[]): void
    /**
     * Sets the cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * If the `cursor` is NULL, `widget` will use the cursor
     * inherited from the parent widget.
     */
    setCursor(cursor?: Gdk.Cursor | null): void
    /**
     * Sets a named cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * This is a utility function that creates a cursor via
     * [ctor`Gdk`.Cursor.new_from_name] and then sets it on `widget`
     * with [method`Gtk`.Widget.set_cursor]. See those functions for
     * details.
     * 
     * On top of that, this function allows `name` to be %NULL, which
     * will do the same as calling [method`Gtk`.Widget.set_cursor]
     * with a %NULL cursor.
     */
    setCursorFromName(name?: string | null): void
    /**
     * Sets the reading direction on a particular widget.
     * 
     * This direction controls the primary direction for widgets
     * containing text, and also the direction in which the children
     * of a container are packed. The ability to set the direction is
     * present in order so that correct localization into languages with
     * right-to-left reading directions can be done. Generally, applications
     * will let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitly
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by [func`Gtk`.Widget.set_default_direction] will be used.
     */
    setDirection(dir: Gtk.TextDirection): void
    /**
     * Set `child` as the current focus child of `widget`.
     * 
     * This function is only suitable for widget implementations.
     * If you want a certain widget to get the input focus, call
     * [method`Gtk`.Widget.grab_focus] on it.
     */
    setFocusChild(child?: Gtk.Widget | null): void
    /**
     * Sets whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * Making mouse clicks not grab focus is useful in places like
     * toolbars where you don’t want the keyboard focus removed from
     * the main area of the application.
     */
    setFocusOnClick(focusOnClick: boolean): void
    /**
     * Specifies whether `widget` can own the input focus.
     * 
     * Widget implementations should set `focusable` to %TRUE in
     * their init() function if they want to receive keyboard input.
     * 
     * Note that having `focusable` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and can-focus and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setFocusable(focusable: boolean): void
    /**
     * Sets the font map to use for Pango rendering.
     * 
     * The font map is the object that is used to look up fonts.
     * Setting a custom font map can be useful in special situations,
     * e.g. when you need to add application-specific fonts to the set
     * of available fonts.
     * 
     * When not set, the widget will inherit the font map from its parent.
     */
    setFontMap(fontMap?: Pango.FontMap | null): void
    /**
     * Sets the `cairo_font_options_t` used for Pango rendering
     * in this widget.
     * 
     * When not set, the default font options for the `GdkDisplay`
     * will be used.
     */
    setFontOptions(options?: cairo.FontOptions | null): void
    /**
     * Sets the horizontal alignment of `widget`.
     */
    setHalign(align: Gtk.Align): void
    /**
     * Sets the `has-tooltip` property on `widget` to `has_tooltip`.
     */
    setHasTooltip(hasTooltip: boolean): void
    /**
     * Sets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Call this function to set the expand flag if you would like your
     * widget to become larger horizontally when the window has extra
     * room.
     * 
     * By default, widgets automatically expand if any of their children
     * want to expand. (To see if a widget will automatically expand given
     * its current children and state, call [method`Gtk`.Widget.compute_expand].
     * A container can decide how the expandability of children affects the
     * expansion of the container by overriding the compute_expand virtual
     * method on `GtkWidget`.).
     * 
     * Setting hexpand explicitly with this function will override the
     * automatic expand behavior.
     * 
     * This function forces the widget to expand or not to expand,
     * regardless of children.  The override occurs because
     * [method`Gtk`.Widget.set_hexpand] sets the hexpand-set property (see
     * [method`Gtk`.Widget.set_hexpand_set]) which causes the widget’s hexpand
     * value to be used, rather than looking at children and widget state.
     */
    setHexpand(expand: boolean): void
    /**
     * Sets whether the hexpand flag will be used.
     * 
     * The [property`Gtk`.Widget:hexpand-set] property will be set
     * automatically when you call [method`Gtk`.Widget.set_hexpand]
     * to set hexpand, so the most likely reason to use this function
     * would be to unset an explicit expand flag.
     * 
     * If hexpand is set, then it overrides any computed
     * expand value based on child widgets. If hexpand is not
     * set, then the expand value depends on whether any
     * children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    setHexpandSet(set: boolean): void
    /**
     * Sets the layout manager delegate instance that provides an
     * implementation for measuring and allocating the children of `widget`.
     */
    setLayoutManager(layoutManager?: Gtk.LayoutManager | null): void
    /**
     * Sets the bottom margin of `widget`.
     */
    setMarginBottom(margin: number): void
    /**
     * Sets the end margin of `widget`.
     */
    setMarginEnd(margin: number): void
    /**
     * Sets the start margin of `widget`.
     */
    setMarginStart(margin: number): void
    /**
     * Sets the top margin of `widget`.
     */
    setMarginTop(margin: number): void
    /**
     * Sets a widgets name.
     * 
     * Setting a name allows you to refer to the widget from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for [class`Gtk`.StyleContext].
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     */
    setName(name: string): void
    /**
     * Request the `widget` to be rendered partially transparent.
     * 
     * An opacity of 0 is fully transparent and an opacity of 1
     * is fully opaque.
     * 
     * Opacity works on both toplevel widgets and child widgets, although
     * there are some limitations: For toplevel widgets, applying opacity
     * depends on the capabilities of the windowing system. On X11, this
     * has any effect only on X displays with a compositing manager,
     * see gdk_display_is_composited(). On Windows and Wayland it should
     * always work, although setting a window’s opacity after the window
     * has been shown may cause some flicker.
     * 
     * Note that the opacity is inherited through inclusion — if you set
     * a toplevel to be partially translucent, all of its content will
     * appear translucent, since it is ultimatively rendered on that
     * toplevel. The opacity value itself is not inherited by child
     * widgets (since that would make widgets deeper in the hierarchy
     * progressively more translucent). As a consequence, [class`Gtk`.Popover]s
     * and other [iface`Gtk`.Native] widgets with their own surface will use their
     * own opacity value, and thus by default appear non-translucent,
     * even if they are attached to a toplevel that is translucent.
     */
    setOpacity(opacity: number): void
    /**
     * Sets how `widget` treats content that is drawn outside the
     * widget's content area.
     * 
     * See the definition of [enum`Gtk`.Overflow] for details.
     * 
     * This setting is provided for widget implementations and
     * should not be used by application code.
     * 
     * The default value is %GTK_OVERFLOW_VISIBLE.
     */
    setOverflow(overflow: Gtk.Overflow): void
    /**
     * Sets `parent` as the parent widget of `widget`.
     * 
     * This takes care of details such as updating the state and style
     * of the child to reflect its new location and resizing the parent.
     * The opposite function is [method`Gtk`.Widget.unparent].
     * 
     * This function is useful only when implementing subclasses of
     * `GtkWidget`.
     */
    setParent(parent: Gtk.Widget): void
    /**
     * Specifies whether `widget` will be treated as the default
     * widget within its toplevel when it has the focus, even if
     * another widget is the default.
     */
    setReceivesDefault(receivesDefault: boolean): void
    /**
     * Sets the sensitivity of a widget.
     * 
     * A widget is sensitive if the user can interact with it.
     * Insensitive widgets are “grayed out” and the user can’t
     * interact with them. Insensitive widgets are known as
     * “inactive”, “disabled”, or “ghosted” in some other toolkits.
     */
    setSensitive(sensitive: boolean): void
    /**
     * Sets the minimum size of a widget.
     * 
     * That is, the widget’s size request will be at least `width`
     * by `height`. You can use this function to force a widget to
     * be larger than it normally would be.
     * 
     * In most cases, [method`Gtk`.Window.set_default_size] is a better
     * choice for toplevel windows than this function; setting the default
     * size will still allow users to shrink the window. Setting the size
     * request will force them to leave the window at least as large as
     * the size request.
     * 
     * Note the inherent danger of setting any fixed size - themes,
     * translations into other languages, different fonts, and user action
     * can all change the appropriate size for a given widget. So, it's
     * basically impossible to hardcode a size that will always be
     * correct.
     * 
     * The size request of a widget is the smallest size a widget can
     * accept while still functioning well and drawing itself correctly.
     * However in some strange cases a widget may be allocated less than
     * its requested size, and in many cases a widget may be allocated more
     * space than it requested.
     * 
     * If the size request in a given direction is -1 (unset), then
     * the “natural” size request of the widget will be used instead.
     * 
     * The size request set here does not include any margin from the
     * properties
     * [property`Gtk`.Widget:margin-start],
     * [property`Gtk`.Widget:margin-end],
     * [property`Gtk`.Widget:margin-top], and
     * [property`Gtk`.Widget:margin-bottom], but it does include pretty
     * much all other padding or border properties set by any subclass
     * of `GtkWidget`.
     */
    setSizeRequest(width: number, height: number): void
    /**
     * Turns on flag values in the current widget state.
     * 
     * Typical widget states are insensitive, prelighted, etc.
     * 
     * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
     * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set
     * the widget's direction, use [method`Gtk`.Widget.set_direction].
     * 
     * This function is for use in widget implementations.
     */
    setStateFlags(flags: Gtk.StateFlags, clear: boolean): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked
     * up with Pango markup.
     * 
     * This function will take care of setting the
     * [property`Gtk`.Widget:has-tooltip] as a side effect, and of the
     * default handler for the [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_markup].
     */
    setTooltipMarkup(markup?: string | null): void
    /**
     * Sets `text` as the contents of the tooltip.
     * 
     * If `text` contains any markup, it will be escaped.
     * 
     * This function will take care of setting
     * [property`Gtk`.Widget:has-tooltip] as a side effect,
     * and of the default handler for the
     * [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_text].
     */
    setTooltipText(text?: string | null): void
    /**
     * Sets the vertical alignment of `widget`.
     */
    setValign(align: Gtk.Align): void
    /**
     * Sets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.set_hexpand] for more detail.
     */
    setVexpand(expand: boolean): void
    /**
     * Sets whether the vexpand flag will be used.
     * 
     * See [method`Gtk`.Widget.set_hexpand_set] for more detail.
     */
    setVexpandSet(set: boolean): void
    /**
     * Sets the visibility state of `widget`.
     * 
     * Note that setting this to %TRUE doesn’t mean the widget is
     * actually viewable, see [method`Gtk`.Widget.get_visible].
     * 
     * This function simply calls [method`Gtk`.Widget.show] or
     * [method`Gtk`.Widget.hide] but is nicer to use when the
     * visibility of the widget depends on some condition.
     */
    setVisible(visible: boolean): void
    /**
     * Returns whether `widget` should contribute to
     * the measuring and allocation of its parent.
     * 
     * This is %FALSE for invisible children, but also
     * for children that have their own surface.
     */
    shouldLayout(): boolean
    /**
     * Flags a widget to be displayed.
     * 
     * Any widget that isn’t shown will not appear on the screen.
     * 
     * Remember that you have to show the containers containing a widget,
     * in addition to the widget itself, before it will appear onscreen.
     * 
     * When a toplevel container is shown, it is immediately realized and
     * mapped; other shown widgets are realized and mapped when their
     * toplevel container is realized and mapped.
     */
    show(): void
    /**
     * Allocates widget with a transformation that translates
     * the origin to the position in `allocation`.
     * 
     * This is a simple form of [method`Gtk`.Widget.allocate].
     */
    sizeAllocate(allocation: Gtk.Allocation, baseline: number): void
    /**
     * Snapshot the a child of `widget`.
     * 
     * When a widget receives a call to the snapshot function,
     * it must send synthetic [vfunc`Gtk`.Widget.snapshot] calls
     * to all children. This function provides a convenient way
     * of doing this. A widget, when it receives a call to its
     * [vfunc`Gtk`.Widget.snapshot] function, calls
     * gtk_widget_snapshot_child() once for each child, passing in
     * the `snapshot` the widget received.
     * 
     * gtk_widget_snapshot_child() takes care of translating the origin of
     * `snapshot,` and deciding whether the child needs to be snapshot.
     * 
     * This function does nothing for children that implement `GtkNative`.
     */
    snapshotChild(child: Gtk.Widget, snapshot: Gtk.Snapshot): void
    /**
     * Translate coordinates relative to `src_widget’`s allocation
     * to coordinates relative to `dest_widget’`s allocations.
     * 
     * In order to perform this operation, both widget must share
     * a common ancestor.
     */
    translateCoordinates(destWidget: Gtk.Widget, srcX: number, srcY: number): [ /* returnType */ boolean, /* destX */ number | null, /* destY */ number | null ]
    /**
     * Triggers a tooltip query on the display where the toplevel
     * of `widget` is located.
     */
    triggerTooltipQuery(): void
    /**
     * Causes a widget to be unmapped if it’s currently mapped.
     * 
     * This function is only for use in widget implementations.
     */
    unmap(): void
    /**
     * Dissociate `widget` from its parent.
     * 
     * This function is only for use in widget implementations,
     * typically in dispose.
     */
    unparent(): void
    /**
     * Causes a widget to be unrealized (frees all GDK resources
     * associated with the widget).
     * 
     * This function is only useful in widget implementations.
     */
    unrealize(): void
    /**
     * Turns off flag values for the current widget state.
     * 
     * See [method`Gtk`.Widget.set_state_flags].
     * 
     * This function is for use in widget implementations.
     */
    unsetStateFlags(flags: Gtk.StateFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Methods of Gtk-4.0.Gtk.Accessible */
    /**
     * Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
     */
    getAccessibleRole(): Gtk.AccessibleRole
    /**
     * Resets the accessible `property` to its default value.
     */
    resetProperty(property: Gtk.AccessibleProperty): void
    /**
     * Resets the accessible `relation` to its default value.
     */
    resetRelation(relation: Gtk.AccessibleRelation): void
    /**
     * Resets the accessible `state` to its default value.
     */
    resetState(state: Gtk.AccessibleState): void
    /**
     * Updates an array of accessible properties.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * property change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateProperty(properties: Gtk.AccessibleProperty[], values: any[]): void
    /**
     * Updates an array of accessible relations.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * relation change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateRelation(relations: Gtk.AccessibleRelation[], values: any[]): void
    /**
     * Updates an array of accessible states.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * state change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateState(states: Gtk.AccessibleState[], values: any[]): void
    /* Methods of Gtk-4.0.Gtk.Buildable */
    /**
     * Gets the ID of the `buildable` object.
     * 
     * `GtkBuilder` sets the name based on the ID attribute
     * of the <object> tag used to construct the `buildable`.
     */
    getBuildableId(): string | null
    /* Methods of Gtk-4.0.Gtk.Scrollable */
    /**
     * Returns the size of a non-scrolling border around the
     * outside of the scrollable.
     * 
     * An example for this would be treeview headers. GTK can use
     * this information to display overlaid graphics, like the
     * overshoot indication, at the right position.
     */
    getBorder(): [ /* returnType */ boolean, /* border */ Gtk.Border ]
    /**
     * Retrieves the `GtkAdjustment` used for horizontal scrolling.
     */
    getHadjustment(): Gtk.Adjustment | null
    /**
     * Gets the horizontal `GtkScrollablePolicy`.
     */
    getHscrollPolicy(): Gtk.ScrollablePolicy
    /**
     * Retrieves the `GtkAdjustment` used for vertical scrolling.
     */
    getVadjustment(): Gtk.Adjustment | null
    /**
     * Gets the vertical `GtkScrollablePolicy`.
     */
    getVscrollPolicy(): Gtk.ScrollablePolicy
    /**
     * Sets the horizontal adjustment of the `GtkScrollable`.
     */
    setHadjustment(hadjustment?: Gtk.Adjustment | null): void
    /**
     * Sets the `GtkScrollablePolicy`.
     * 
     * The policy determines whether horizontal scrolling should start
     * below the minimum width or below the natural width.
     */
    setHscrollPolicy(policy: Gtk.ScrollablePolicy): void
    /**
     * Sets the vertical adjustment of the `GtkScrollable`.
     */
    setVadjustment(vadjustment?: Gtk.Adjustment | null): void
    /**
     * Sets the `GtkScrollablePolicy`.
     * 
     * The policy determines whether vertical scrolling should start
     * below the minimum height or below the natural height.
     */
    setVscrollPolicy(policy: Gtk.ScrollablePolicy): void
    /* Signals of GtkSource-5.GtkSource.View */
    /**
     * Keybinding signal to change case of the text at the current cursor position.
     */
    connect(sigName: "change-case", callback: ((caseType: ChangeCaseType) => void)): number
    on(sigName: "change-case", callback: (caseType: ChangeCaseType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "change-case", callback: (caseType: ChangeCaseType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "change-case", callback: (caseType: ChangeCaseType) => void): NodeJS.EventEmitter
    emit(sigName: "change-case", caseType: ChangeCaseType): void
    /**
     * Keybinding signal to edit a number at the current cursor position.
     */
    connect(sigName: "change-number", callback: ((count: number) => void)): number
    on(sigName: "change-number", callback: (count: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "change-number", callback: (count: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "change-number", callback: (count: number) => void): NodeJS.EventEmitter
    emit(sigName: "change-number", count: number): void
    /**
     * Keybinding signal to join the lines currently selected.
     */
    connect(sigName: "join-lines", callback: (() => void)): number
    on(sigName: "join-lines", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "join-lines", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "join-lines", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "join-lines"): void
    /**
     * Emitted when a line mark has been activated (for instance when there
     * was a button press in the line marks gutter).
     * 
     * You can use `iter` to determine on which line the activation took place.
     */
    connect(sigName: "line-mark-activated", callback: ((iter: Gtk.TextIter, button: number, state: Gdk.ModifierType, nPresses: number) => void)): number
    on(sigName: "line-mark-activated", callback: (iter: Gtk.TextIter, button: number, state: Gdk.ModifierType, nPresses: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "line-mark-activated", callback: (iter: Gtk.TextIter, button: number, state: Gdk.ModifierType, nPresses: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "line-mark-activated", callback: (iter: Gtk.TextIter, button: number, state: Gdk.ModifierType, nPresses: number) => void): NodeJS.EventEmitter
    emit(sigName: "line-mark-activated", iter: Gtk.TextIter, button: number, state: Gdk.ModifierType, nPresses: number): void
    /**
     * The signal is a keybinding which gets emitted when the user initiates moving a line.
     * 
     * The default binding key is Alt+Up/Down arrow. And moves the currently selected lines,
     * or the current line up or down by one line.
     */
    connect(sigName: "move-lines", callback: ((down: boolean) => void)): number
    on(sigName: "move-lines", callback: (down: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-lines", callback: (down: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-lines", callback: (down: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "move-lines", down: boolean): void
    /**
     * Keybinding signal to move the cursor to the matching bracket.
     */
    connect(sigName: "move-to-matching-bracket", callback: ((extendSelection: boolean) => void)): number
    on(sigName: "move-to-matching-bracket", callback: (extendSelection: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-to-matching-bracket", callback: (extendSelection: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-to-matching-bracket", callback: (extendSelection: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "move-to-matching-bracket", extendSelection: boolean): void
    /**
     * The signal is a keybinding which gets emitted when the user initiates moving a word.
     * 
     * The default binding key is Alt+Left/Right Arrow and moves the current selection, or the current
     * word by one word.
     */
    connect(sigName: "move-words", callback: ((count: number) => void)): number
    on(sigName: "move-words", callback: (count: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-words", callback: (count: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-words", callback: (count: number) => void): NodeJS.EventEmitter
    emit(sigName: "move-words", count: number): void
    /**
     * The signal is emitted to insert a new snippet into the view.
     * 
     * If another snippet was active, it will be paused until all focus positions of `snippet` have been exhausted.
     * 
     * `location` will be updated to point at the end of the snippet.
     */
    connect(sigName: "push-snippet", callback: ((snippet: Snippet, location: Gtk.TextIter) => void)): number
    on(sigName: "push-snippet", callback: (snippet: Snippet, location: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "push-snippet", callback: (snippet: Snippet, location: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "push-snippet", callback: (snippet: Snippet, location: Gtk.TextIter) => void): NodeJS.EventEmitter
    emit(sigName: "push-snippet", snippet: Snippet, location: Gtk.TextIter): void
    /**
     * The signal is a key binding signal which gets
     * emitted when the user requests a completion, by pressing
     * <keycombo><keycap>Control</keycap><keycap>space</keycap></keycombo>.
     * 
     * This will create a [class`CompletionContext]` with the activation
     * type as %GTK_SOURCE_COMPLETION_ACTIVATION_USER_REQUESTED.
     * 
     * Applications should not connect to it, but may emit it with
     * [func`GObject`.signal_emit_by_name] if they need to activate the completion by
     * another means, for example with another key binding or a menu entry.
     */
    connect(sigName: "show-completion", callback: (() => void)): number
    on(sigName: "show-completion", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show-completion", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show-completion", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "show-completion"): void
    /**
     * Emitted when a the cursor was moved according to the smart home end setting.
     * 
     * The signal is emitted after the cursor is moved, but
     * during the [signal`Gtk`.TextView::move-cursor] action. This can be used to find
     * out whether the cursor was moved by a normal home/end or by a smart
     * home/end.
     */
    connect(sigName: "smart-home-end", callback: ((iter: Gtk.TextIter, count: number) => void)): number
    on(sigName: "smart-home-end", callback: (iter: Gtk.TextIter, count: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "smart-home-end", callback: (iter: Gtk.TextIter, count: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "smart-home-end", callback: (iter: Gtk.TextIter, count: number) => void): NodeJS.EventEmitter
    emit(sigName: "smart-home-end", iter: Gtk.TextIter, count: number): void
    /* Signals of Gtk-4.0.Gtk.TextView */
    /**
     * Gets emitted when the user asks for it.
     * 
     * The ::backspace signal is a [keybinding signal](class.SignalAction.html).
     * 
     * The default bindings for this signal are
     * <kbd>Backspace</kbd> and <kbd>Shift</kbd>-<kbd>Backspace</kbd>.
     */
    connect(sigName: "backspace", callback: (() => void)): number
    on(sigName: "backspace", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "backspace", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "backspace", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "backspace"): void
    /**
     * Gets emitted to copy the selection to the clipboard.
     * 
     * The ::copy-clipboard signal is a [keybinding signal](class.SignalAction.html).
     * 
     * The default bindings for this signal are
     * <kbd>Ctrl</kbd>-<kbd>c</kbd> and
     * <kbd>Ctrl</kbd>-<kbd>Insert</kbd>.
     */
    connect(sigName: "copy-clipboard", callback: (() => void)): number
    on(sigName: "copy-clipboard", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "copy-clipboard", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "copy-clipboard", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "copy-clipboard"): void
    /**
     * Gets emitted to cut the selection to the clipboard.
     * 
     * The ::cut-clipboard signal is a [keybinding signal](class.SignalAction.html).
     * 
     * The default bindings for this signal are
     * <kbd>Ctrl</kbd>-<kbd>x</kbd> and
     * <kbd>Shift</kbd>-<kbd>Delete</kbd>.
     */
    connect(sigName: "cut-clipboard", callback: (() => void)): number
    on(sigName: "cut-clipboard", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "cut-clipboard", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "cut-clipboard", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "cut-clipboard"): void
    /**
     * Gets emitted when the user initiates a text deletion.
     * 
     * The ::delete-from-cursor signal is a [keybinding signal](class.SignalAction.html).
     * 
     * If the `type` is %GTK_DELETE_CHARS, GTK deletes the selection
     * if there is one, otherwise it deletes the requested number
     * of characters.
     * 
     * The default bindings for this signal are <kbd>Delete</kbd> for
     * deleting a character, <kbd>Ctrl</kbd>-<kbd>Delete</kbd> for
     * deleting a word and <kbd>Ctrl</kbd>-<kbd>Backspace</kbd> for
     * deleting a word backwards.
     */
    connect(sigName: "delete-from-cursor", callback: ((type: Gtk.DeleteType, count: number) => void)): number
    on(sigName: "delete-from-cursor", callback: (type: Gtk.DeleteType, count: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "delete-from-cursor", callback: (type: Gtk.DeleteType, count: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "delete-from-cursor", callback: (type: Gtk.DeleteType, count: number) => void): NodeJS.EventEmitter
    emit(sigName: "delete-from-cursor", type: Gtk.DeleteType, count: number): void
    /**
     * Emitted when the selection needs to be extended at `location`.
     */
    connect(sigName: "extend-selection", callback: ((granularity: Gtk.TextExtendSelection, location: Gtk.TextIter, start: Gtk.TextIter, end: Gtk.TextIter) => boolean)): number
    on(sigName: "extend-selection", callback: (granularity: Gtk.TextExtendSelection, location: Gtk.TextIter, start: Gtk.TextIter, end: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "extend-selection", callback: (granularity: Gtk.TextExtendSelection, location: Gtk.TextIter, start: Gtk.TextIter, end: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "extend-selection", callback: (granularity: Gtk.TextExtendSelection, location: Gtk.TextIter, start: Gtk.TextIter, end: Gtk.TextIter) => void): NodeJS.EventEmitter
    emit(sigName: "extend-selection", granularity: Gtk.TextExtendSelection, location: Gtk.TextIter, start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Gets emitted when the user initiates the insertion of a
     * fixed string at the cursor.
     * 
     * The ::insert-at-cursor signal is a [keybinding signal](class.SignalAction.html).
     * 
     * This signal has no default bindings.
     */
    connect(sigName: "insert-at-cursor", callback: ((string: string) => void)): number
    on(sigName: "insert-at-cursor", callback: (string: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "insert-at-cursor", callback: (string: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "insert-at-cursor", callback: (string: string) => void): NodeJS.EventEmitter
    emit(sigName: "insert-at-cursor", string: string): void
    /**
     * Gets emitted to present the Emoji chooser for the `text_view`.
     * 
     * The ::insert-emoji signal is a [keybinding signal](class.SignalAction.html).
     * 
     * The default bindings for this signal are
     * <kbd>Ctrl</kbd>-<kbd>.</kbd> and
     * <kbd>Ctrl</kbd>-<kbd>;</kbd>
     */
    connect(sigName: "insert-emoji", callback: (() => void)): number
    on(sigName: "insert-emoji", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "insert-emoji", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "insert-emoji", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "insert-emoji"): void
    /**
     * Gets emitted when the user initiates a cursor movement.
     * 
     * The ::move-cursor signal is a [keybinding signal](class.SignalAction.html).
     * If the cursor is not visible in `text_view,` this signal causes
     * the viewport to be moved instead.
     * 
     * Applications should not connect to it, but may emit it with
     * g_signal_emit_by_name() if they need to control the cursor
     * programmatically.
     * 
     * 
     * The default bindings for this signal come in two variants,
     * the variant with the <kbd>Shift</kbd> modifier extends the
     * selection, the variant without it does not.
     * There are too many key combinations to list them all here.
     * 
     * - <kbd>←</kbd>, <kbd>→</kbd>, <kbd>↑</kbd>, <kbd>↓</kbd>
     *   move by individual characters/lines
     * - <kbd>Ctrl</kbd>-<kbd>→</kbd>, etc. move by words/paragraphs
     * - <kbd>Home</kbd>, <kbd>End</kbd> move to the ends of the buffer
     * - <kbd>PgUp</kbd>, <kbd>PgDn</kbd> move vertically by pages
     * - <kbd>Ctrl</kbd>-<kbd>PgUp</kbd>, <kbd>Ctrl</kbd>-<kbd>PgDn</kbd>
     *   move horizontally by pages
     */
    connect(sigName: "move-cursor", callback: ((step: Gtk.MovementStep, count: number, extendSelection: boolean) => void)): number
    on(sigName: "move-cursor", callback: (step: Gtk.MovementStep, count: number, extendSelection: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-cursor", callback: (step: Gtk.MovementStep, count: number, extendSelection: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-cursor", callback: (step: Gtk.MovementStep, count: number, extendSelection: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "move-cursor", step: Gtk.MovementStep, count: number, extendSelection: boolean): void
    /**
     * Gets emitted to move the viewport.
     * 
     * The ::move-viewport signal is a [keybinding signal](class.SignalAction.html),
     * which can be bound to key combinations to allow the user to move the viewport,
     * i.e. change what part of the text view is visible in a containing scrolled
     * window.
     * 
     * There are no default bindings for this signal.
     */
    connect(sigName: "move-viewport", callback: ((step: Gtk.ScrollStep, count: number) => void)): number
    on(sigName: "move-viewport", callback: (step: Gtk.ScrollStep, count: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-viewport", callback: (step: Gtk.ScrollStep, count: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-viewport", callback: (step: Gtk.ScrollStep, count: number) => void): NodeJS.EventEmitter
    emit(sigName: "move-viewport", step: Gtk.ScrollStep, count: number): void
    /**
     * Gets emitted to paste the contents of the clipboard
     * into the text view.
     * 
     * The ::paste-clipboard signal is a [keybinding signal](class.SignalAction.html).
     * 
     * The default bindings for this signal are
     * <kbd>Ctrl</kbd>-<kbd>v</kbd> and
     * <kbd>Shift</kbd>-<kbd>Insert</kbd>.
     */
    connect(sigName: "paste-clipboard", callback: (() => void)): number
    on(sigName: "paste-clipboard", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "paste-clipboard", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "paste-clipboard", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "paste-clipboard"): void
    /**
     * Emitted when preedit text of the active IM changes.
     * 
     * If an input method is used, the typed text will not immediately
     * be committed to the buffer. So if you are interested in the text,
     * connect to this signal.
     * 
     * This signal is only emitted if the text at the given position
     * is actually editable.
     */
    connect(sigName: "preedit-changed", callback: ((preedit: string) => void)): number
    on(sigName: "preedit-changed", callback: (preedit: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "preedit-changed", callback: (preedit: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "preedit-changed", callback: (preedit: string) => void): NodeJS.EventEmitter
    emit(sigName: "preedit-changed", preedit: string): void
    /**
     * Gets emitted to select or unselect the complete contents of the text view.
     * 
     * The ::select-all signal is a [keybinding signal](class.SignalAction.html).
     * 
     * The default bindings for this signal are
     * <kbd>Ctrl</kbd>-<kbd>a</kbd> and
     * <kbd>Ctrl</kbd>-<kbd>/</kbd> for selecting and
     * <kbd>Shift</kbd>-<kbd>Ctrl</kbd>-<kbd>a</kbd> and
     * <kbd>Ctrl</kbd>-<kbd>\</kbd> for unselecting.
     */
    connect(sigName: "select-all", callback: ((select: boolean) => void)): number
    on(sigName: "select-all", callback: (select: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "select-all", callback: (select: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "select-all", callback: (select: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "select-all", select: boolean): void
    /**
     * Gets emitted when the user initiates settings the "anchor" mark.
     * 
     * The ::set-anchor signal is a [keybinding signal](class.SignalAction.html)
     * which gets emitted when the user initiates setting the "anchor"
     * mark. The "anchor" mark gets placed at the same position as the
     * "insert" mark.
     * 
     * This signal has no default bindings.
     */
    connect(sigName: "set-anchor", callback: (() => void)): number
    on(sigName: "set-anchor", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-anchor", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-anchor", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "set-anchor"): void
    /**
     * Gets emitted to toggle the `cursor-visible` property.
     * 
     * The ::toggle-cursor-visible signal is a
     * [keybinding signal](class.SignalAction.html).
     * 
     * The default binding for this signal is <kbd>F7</kbd>.
     */
    connect(sigName: "toggle-cursor-visible", callback: (() => void)): number
    on(sigName: "toggle-cursor-visible", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "toggle-cursor-visible", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "toggle-cursor-visible", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "toggle-cursor-visible"): void
    /**
     * Gets emitted to toggle the overwrite mode of the text view.
     * 
     * The ::toggle-overwrite signal is a [keybinding signal](class.SignalAction.html).
     * 
     * The default binding for this signal is <kbd>Insert</kbd>.
     */
    connect(sigName: "toggle-overwrite", callback: (() => void)): number
    on(sigName: "toggle-overwrite", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "toggle-overwrite", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "toggle-overwrite", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "toggle-overwrite"): void
    /* Signals of Gtk-4.0.Gtk.Widget */
    /**
     * Signals that all holders of a reference to the widget should release
     * the reference that they hold.
     * 
     * May result in finalization of the widget if all references are released.
     * 
     * This signal is not suitable for saving widget state.
     */
    connect(sigName: "destroy", callback: (() => void)): number
    on(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "destroy", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "destroy"): void
    /**
     * Emitted when the text direction of a widget changes.
     */
    connect(sigName: "direction-changed", callback: ((previousDirection: Gtk.TextDirection) => void)): number
    on(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void): NodeJS.EventEmitter
    emit(sigName: "direction-changed", previousDirection: Gtk.TextDirection): void
    /**
     * Emitted when `widget` is hidden.
     */
    connect(sigName: "hide", callback: (() => void)): number
    on(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "hide", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "hide"): void
    /**
     * Emitted if keyboard navigation fails.
     * 
     * See [method`Gtk`.Widget.keynav_failed] for details.
     */
    connect(sigName: "keynav-failed", callback: ((direction: Gtk.DirectionType) => boolean)): number
    on(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "keynav-failed", direction: Gtk.DirectionType): void
    /**
     * Emitted when `widget` is going to be mapped.
     * 
     * A widget is mapped when the widget is visible (which is controlled with
     * [property`Gtk`.Widget:visible]) and all its parents up to the toplevel widget
     * are also visible.
     * 
     * The ::map signal can be used to determine whether a widget will be drawn,
     * for instance it can resume an animation that was stopped during the
     * emission of [signal`Gtk`.Widget::unmap].
     */
    connect(sigName: "map", callback: (() => void)): number
    on(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "map", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "map"): void
    /**
     * Emitted when a widget is activated via a mnemonic.
     * 
     * The default handler for this signal activates `widget` if `group_cycling`
     * is %FALSE, or just makes `widget` grab focus if `group_cycling` is %TRUE.
     */
    connect(sigName: "mnemonic-activate", callback: ((groupCycling: boolean) => boolean)): number
    on(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "mnemonic-activate", groupCycling: boolean): void
    /**
     * Emitted when the focus is moved.
     */
    connect(sigName: "move-focus", callback: ((direction: Gtk.DirectionType) => void)): number
    on(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "move-focus", direction: Gtk.DirectionType): void
    /**
     * Emitted when the widgets tooltip is about to be shown.
     * 
     * This happens when the [property`Gtk`.Widget:has-tooltip] property
     * is %TRUE and the hover timeout has expired with the cursor hovering
     * "above" `widget;` or emitted when `widget` got focus in keyboard mode.
     * 
     * Using the given coordinates, the signal handler should determine
     * whether a tooltip should be shown for `widget`. If this is the case
     * %TRUE should be returned, %FALSE otherwise.  Note that if
     * `keyboard_mode` is %TRUE, the values of `x` and `y` are undefined and
     * should not be used.
     * 
     * The signal handler is free to manipulate `tooltip` with the therefore
     * destined function calls.
     */
    connect(sigName: "query-tooltip", callback: ((x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => boolean)): number
    on(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void): NodeJS.EventEmitter
    emit(sigName: "query-tooltip", x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip): void
    /**
     * Emitted when `widget` is associated with a `GdkSurface`.
     * 
     * This means that [method`Gtk`.Widget.realize] has been called
     * or the widget has been mapped (that is, it is going to be drawn).
     */
    connect(sigName: "realize", callback: (() => void)): number
    on(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "realize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "realize"): void
    /**
     * Emitted when `widget` is shown.
     */
    connect(sigName: "show", callback: (() => void)): number
    on(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "show"): void
    /**
     * Emitted when the widget state changes.
     * 
     * See [method`Gtk`.Widget.get_state_flags].
     */
    connect(sigName: "state-flags-changed", callback: ((flags: Gtk.StateFlags) => void)): number
    on(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void): NodeJS.EventEmitter
    emit(sigName: "state-flags-changed", flags: Gtk.StateFlags): void
    /**
     * Emitted when `widget` is going to be unmapped.
     * 
     * A widget is unmapped when either it or any of its parents up to the
     * toplevel widget have been set as hidden.
     * 
     * As ::unmap indicates that a widget will not be shown any longer,
     * it can be used to, for example, stop an animation on the widget.
     */
    connect(sigName: "unmap", callback: (() => void)): number
    on(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unmap", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unmap"): void
    /**
     * Emitted when the `GdkSurface` associated with `widget` is destroyed.
     * 
     * This means that [method`Gtk`.Widget.unrealize] has been called
     * or the widget has been unmapped (that is, it is going to be hidden).
     */
    connect(sigName: "unrealize", callback: (() => void)): number
    on(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unrealize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::font-desc", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font-desc", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::font-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::font-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::font-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::view", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::auto-indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::auto-indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::auto-indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::auto-indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::background-pattern", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-pattern", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::background-pattern", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::background-pattern", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::background-pattern", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::completion", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::completion", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::completion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::completion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::completion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-snippets", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-snippets", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-snippets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-snippets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-snippets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::highlight-current-line", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::highlight-current-line", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::highlight-current-line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::highlight-current-line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::highlight-current-line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent-on-tab", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent-on-tab", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent-on-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent-on-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent-on-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indenter", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indenter", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indenter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indenter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indenter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::insert-spaces-instead-of-tabs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::insert-spaces-instead-of-tabs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::insert-spaces-instead-of-tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::insert-spaces-instead-of-tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::insert-spaces-instead-of-tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::right-margin-position", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::right-margin-position", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::right-margin-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::right-margin-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::right-margin-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::show-line-marks", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-line-marks", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::show-line-marks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::show-line-marks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::show-line-marks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::show-line-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-line-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::show-line-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::show-line-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::show-line-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::show-right-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-right-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::show-right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::show-right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::show-right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-backspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-backspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-backspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-backspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-backspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-home-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-home-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-home-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-home-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-home-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::space-drawer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::space-drawer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::space-drawer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::space-drawer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::space-drawer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accepts-tab", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accepts-tab", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accepts-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accepts-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accepts-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bottom-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bottom-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bottom-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bottom-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bottom-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::buffer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cursor-visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor-visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cursor-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cursor-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cursor-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::extra-menu", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::extra-menu", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::extra-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::extra-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::extra-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::im-module", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::im-module", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::im-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::im-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::im-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::input-hints", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-hints", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::input-hints", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::input-hints", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::input-hints", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::input-purpose", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-purpose", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::input-purpose", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::input-purpose", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::input-purpose", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::justification", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::justification", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::justification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::justification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::justification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::left-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::left-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::left-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::left-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::left-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::monospace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::monospace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::monospace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::monospace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::monospace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overwrite", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overwrite", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overwrite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overwrite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overwrite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pixels-above-lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-above-lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pixels-below-lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-below-lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pixels-inside-wrap", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-inside-wrap", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::right-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::right-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tabs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tabs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::top-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::top-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::top-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::top-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::top-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wrap-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wrap-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hadjustment", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hadjustment", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hscroll-policy", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hscroll-policy", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vadjustment", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vadjustment", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vscroll-policy", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vscroll-policy", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Map_ConstructProps)
    _init (config?: Map_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Map
    static newWithBuffer(buffer: Buffer): Map
    /* Function overloads */
    static newWithBuffer(buffer: Gtk.TextBuffer): Map
    static $gtype: GObject.Type
}
interface Mark_ConstructProps extends Gtk.TextMark_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.Mark */
    /**
     * The category of the `GtkSourceMark`, classifies the mark and controls
     * which pixbuf is used and with which priority it is drawn.
     */
    category?: string
}
class Mark {
    /* Fields of Gtk-4.0.Gtk.TextMark */
    readonly parentInstance: GObject.Object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.Mark */
    /**
     * Returns the mark category.
     */
    getCategory(): string
    /**
     * Returns the next `GtkSourceMark` in the buffer or %NULL if the mark
     * was not added to a buffer.
     * 
     *  If there is no next mark, %NULL will be returned.
     * 
     * If `category` is %NULL, looks for marks of any category.
     */
    next(category?: string | null): Mark | null
    /**
     * Returns the previous `GtkSourceMark` in the buffer or %NULL if the mark
     * was not added to a buffer.
     * 
     * If there is no previous mark, %NULL is returned.
     * 
     * If `category` is %NULL, looks for marks of any category
     */
    prev(category: string): Mark | null
    /* Methods of Gtk-4.0.Gtk.TextMark */
    /**
     * Gets the buffer this mark is located inside.
     * 
     * Returns %NULL if the mark is deleted.
     */
    getBuffer(): Gtk.TextBuffer | null
    /**
     * Returns %TRUE if the mark has been removed from its buffer.
     * 
     * See [method`Gtk`.TextBuffer.add_mark] for a way to add it
     * to a buffer again.
     */
    getDeleted(): boolean
    /**
     * Determines whether the mark has left gravity.
     */
    getLeftGravity(): boolean
    /**
     * Returns the mark name.
     * 
     * Returns %NULL for anonymous marks.
     */
    getName(): string | null
    /**
     * Returns %TRUE if the mark is visible.
     * 
     * A cursor is displayed for visible marks.
     */
    getVisible(): boolean
    setVisible(setting: boolean): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Mark_ConstructProps)
    _init (config?: Mark_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(name: string | null, category: string): Mark
    /* Function overloads */
    static new(name: string | null, leftGravity: boolean): Mark
    static $gtype: GObject.Type
}
interface MarkAttributes_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.MarkAttributes */
    /**
     * A color used for background of a line.
     */
    background?: Gdk.RGBA
    /**
     * A #GIcon that may be a base of a rendered icon.
     */
    gicon?: Gio.Icon
    /**
     * An icon name that may be a base of a rendered icon.
     */
    iconName?: string
    /**
     * A #GdkPixbuf that may be a base of a rendered icon.
     */
    pixbuf?: GdkPixbuf.Pixbuf
}
class MarkAttributes {
    /* Properties of GtkSource-5.GtkSource.MarkAttributes */
    /**
     * A color used for background of a line.
     */
    background: Gdk.RGBA
    /**
     * A #GIcon that may be a base of a rendered icon.
     */
    gicon: Gio.Icon
    /**
     * An icon name that may be a base of a rendered icon.
     */
    iconName: string
    /**
     * A #GdkPixbuf that may be a base of a rendered icon.
     */
    pixbuf: GdkPixbuf.Pixbuf
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.MarkAttributes */
    /**
     * Stores background color in `background`.
     */
    getBackground(): [ /* returnType */ boolean, /* background */ Gdk.RGBA ]
    /**
     * Gets a [iface`Gio`.Icon] to be used as a base for rendered icon.
     * 
     * Note that the icon can be %NULL if it wasn't set earlier.
     */
    getGicon(): Gio.Icon
    /**
     * Gets a name of an icon to be used as a base for rendered icon.
     * 
     * Note that the icon name can be %NULL if it wasn't set earlier.
     */
    getIconName(): string
    /**
     * Gets a [class`GdkPixbuf`.Pixbuf] to be used as a base for rendered icon.
     * 
     * Note that the pixbuf can be %NULL if it wasn't set earlier.
     */
    getPixbuf(): GdkPixbuf.Pixbuf
    /**
     * Queries for a tooltip by emitting a [signal`MarkAttributes:`:query-tooltip-markup] signal.
     * 
     * The tooltip may contain a markup.
     */
    getTooltipMarkup(mark: Mark): string
    /**
     * Queries for a tooltip by emitting a [signal`MarkAttributes:`:query-tooltip-text] signal.
     * 
     * The tooltip is a plain text.
     */
    getTooltipText(mark: Mark): string
    /**
     * Renders an icon of given size.
     * 
     * The base of the icon is set by the last call to one of:
     * 
     * - [method`MarkAttributes`.set_pixbuf]
     * - [method`MarkAttributes`.set_gicon]
     * - [method`MarkAttributes`.set_icon_name]
     * 
     * `size` cannot be lower than 1.
     */
    renderIcon(widget: Gtk.Widget, size: number): Gdk.Paintable
    /**
     * Sets background color to the one given in `background`.
     */
    setBackground(background: Gdk.RGBA): void
    /**
     * Sets an icon to be used as a base for rendered icon.
     */
    setGicon(gicon: Gio.Icon): void
    /**
     * Sets a name of an icon to be used as a base for rendered icon.
     */
    setIconName(iconName: string): void
    /**
     * Sets a pixbuf to be used as a base for rendered icon.
     */
    setPixbuf(pixbuf: GdkPixbuf.Pixbuf): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GtkSource-5.GtkSource.MarkAttributes */
    /**
     * The code should connect to this signal to provide a tooltip for given
     * `mark`. The tooltip can contain a markup.
     */
    connect(sigName: "query-tooltip-markup", callback: ((mark: Mark) => string)): number
    on(sigName: "query-tooltip-markup", callback: (mark: Mark) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-tooltip-markup", callback: (mark: Mark) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-tooltip-markup", callback: (mark: Mark) => void): NodeJS.EventEmitter
    emit(sigName: "query-tooltip-markup", mark: Mark): void
    /**
     * The code should connect to this signal to provide a tooltip for given
     * `mark`. The tooltip should be just a plain text.
     */
    connect(sigName: "query-tooltip-text", callback: ((mark: Mark) => string)): number
    on(sigName: "query-tooltip-text", callback: (mark: Mark) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-tooltip-text", callback: (mark: Mark) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-tooltip-text", callback: (mark: Mark) => void): NodeJS.EventEmitter
    emit(sigName: "query-tooltip-text", mark: Mark): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::background", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::gicon", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gicon", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::gicon", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::gicon", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::gicon", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::icon-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::icon-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pixbuf", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixbuf", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pixbuf", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pixbuf", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pixbuf", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: MarkAttributes_ConstructProps)
    _init (config?: MarkAttributes_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): MarkAttributes
    static $gtype: GObject.Type
}
interface PrintCompositor_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.PrintCompositor */
    /**
     * Name of the font used for the text body.
     * 
     * Accepted values are strings representing a font description Pango can understand.
     * (e.g. &quot;Monospace 10&quot;). See [func`Pango`.FontDescription.from_string]
     * for a description of the format of the string representation.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    bodyFontName?: string
    /**
     * The [class`Buffer]` object to print.
     */
    buffer?: Buffer
    /**
     * Name of the font used to print page footer.
     * If this property is unspecified, the text body font is used.
     * 
     * Accepted values are strings representing a font description Pango can understand.
     * (e.g. &quot;Monospace 10&quot;). See [func`Pango`.FontDescription.from_string]
     * for a description of the format of the string representation.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    footerFontName?: string
    /**
     * Name of the font used to print page header.
     * If this property is unspecified, the text body font is used.
     * 
     * Accepted values are strings representing a font description Pango can understand.
     * (e.g. &quot;Monospace 10&quot;). See [func`Pango`.FontDescription.from_string]
     * for a description of the format of the string representation.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    headerFontName?: string
    /**
     * Whether to print the document with highlighted syntax.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    highlightSyntax?: boolean
    /**
     * Name of the font used to print line numbers on the left margin.
     * If this property is unspecified, the text body font is used.
     * 
     * Accepted values are strings representing a font description Pango can understand.
     * (e.g. &quot;Monospace 10&quot;). See [func`Pango`.FontDescription.from_string]
     * for a description of the format of the string representation.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    lineNumbersFontName?: string
    /**
     * Whether to print a footer in each page.
     * 
     * Note that by default the footer format is unspecified, and if it is
     * unspecified the footer will not be printed, regardless of the value of
     * this property.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    printFooter?: boolean
    /**
     * Whether to print a header in each page.
     * 
     * Note that by default the header format is unspecified, and if it is
     * unspecified the header will not be printed, regardless of the value of
     * this property.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    printHeader?: boolean
    /**
     * Interval of printed line numbers.
     * 
     * If this property is set to 0 no numbers will be printed.
     * If greater than 0, a number will be printed every "print-line-numbers"
     * lines (i.e. 1 will print all line numbers).
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    printLineNumbers?: number
    /**
     * Width of a tab character expressed in spaces.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    tabWidth?: number
    /**
     * Whether to wrap lines never, at word boundaries, or at character boundaries.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    wrapMode?: Gtk.WrapMode
}
class PrintCompositor {
    /* Properties of GtkSource-5.GtkSource.PrintCompositor */
    /**
     * Name of the font used for the text body.
     * 
     * Accepted values are strings representing a font description Pango can understand.
     * (e.g. &quot;Monospace 10&quot;). See [func`Pango`.FontDescription.from_string]
     * for a description of the format of the string representation.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    bodyFontName: string
    /**
     * Name of the font used to print page footer.
     * If this property is unspecified, the text body font is used.
     * 
     * Accepted values are strings representing a font description Pango can understand.
     * (e.g. &quot;Monospace 10&quot;). See [func`Pango`.FontDescription.from_string]
     * for a description of the format of the string representation.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    footerFontName: string
    /**
     * Name of the font used to print page header.
     * If this property is unspecified, the text body font is used.
     * 
     * Accepted values are strings representing a font description Pango can understand.
     * (e.g. &quot;Monospace 10&quot;). See [func`Pango`.FontDescription.from_string]
     * for a description of the format of the string representation.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    headerFontName: string
    /**
     * Whether to print the document with highlighted syntax.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    highlightSyntax: boolean
    /**
     * Name of the font used to print line numbers on the left margin.
     * If this property is unspecified, the text body font is used.
     * 
     * Accepted values are strings representing a font description Pango can understand.
     * (e.g. &quot;Monospace 10&quot;). See [func`Pango`.FontDescription.from_string]
     * for a description of the format of the string representation.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    lineNumbersFontName: string
    /**
     * The number of pages in the document or <code>-1</code> if the
     * document has not been completely paginated.
     */
    readonly nPages: number
    /**
     * Whether to print a footer in each page.
     * 
     * Note that by default the footer format is unspecified, and if it is
     * unspecified the footer will not be printed, regardless of the value of
     * this property.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    printFooter: boolean
    /**
     * Whether to print a header in each page.
     * 
     * Note that by default the header format is unspecified, and if it is
     * unspecified the header will not be printed, regardless of the value of
     * this property.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    printHeader: boolean
    /**
     * Interval of printed line numbers.
     * 
     * If this property is set to 0 no numbers will be printed.
     * If greater than 0, a number will be printed every "print-line-numbers"
     * lines (i.e. 1 will print all line numbers).
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    printLineNumbers: number
    /**
     * Width of a tab character expressed in spaces.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    tabWidth: number
    /**
     * Whether to wrap lines never, at word boundaries, or at character boundaries.
     * 
     * The value of this property cannot be changed anymore after the first
     * call to the [method`PrintCompositor`.paginate] function.
     */
    wrapMode: Gtk.WrapMode
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.PrintCompositor */
    /**
     * Draw page `page_nr` for printing on the the Cairo context encapsuled in `context`.
     * 
     * This method has been designed to be called in the handler of the [signal`Gtk`.PrintOperation::draw_page] signal
     * as shown in the following example:
     * 
     * ```c
     * // Signal handler for the GtkPrintOperation::draw_page signal
     * 
     * static void
     * draw_page (GtkPrintOperation *operation,
     *            GtkPrintContext   *context,
     *            gint               page_nr,
     *            gpointer           user_data)
     * {
     *     GtkSourcePrintCompositor *compositor;
     * 
     *     compositor = GTK_SOURCE_PRINT_COMPOSITOR (user_data);
     * 
     *     gtk_source_print_compositor_draw_page (compositor,
     *                                            context,
     *                                            page_nr);
     * }
     * ```
     */
    drawPage(context: Gtk.PrintContext, pageNr: number): void
    /**
     * Returns the name of the font used to print the text body.
     * 
     * The returned string must be freed with g_free().
     */
    getBodyFontName(): string
    /**
     * Gets the bottom margin in units of `unit`.
     */
    getBottomMargin(unit: Gtk.Unit): number
    /**
     * Gets the [class`Buffer]` associated with the compositor.
     * 
     * The returned object reference is owned by the compositor object and
     * should not be unreferenced.
     */
    getBuffer(): Buffer
    /**
     * Returns the name of the font used to print the page footer.
     * 
     * The returned string must be freed with g_free().
     */
    getFooterFontName(): string
    /**
     * Returns the name of the font used to print the page header.
     * 
     * The returned string must be freed with g_free().
     */
    getHeaderFontName(): string
    /**
     * Determines whether the printed text will be highlighted according to the
     * buffer rules.
     * 
     * Note that highlighting will happen only if the buffer to print has highlighting activated.
     */
    getHighlightSyntax(): boolean
    /**
     * Gets the left margin in units of `unit`.
     */
    getLeftMargin(unit: Gtk.Unit): number
    /**
     * Returns the name of the font used to print line numbers on the left margin.
     * 
     * The returned string must be freed with g_free().
     */
    getLineNumbersFontName(): string
    /**
     * Returns the number of pages in the document or <code>-1</code> if the
     * document has not been completely paginated.
     */
    getNPages(): number
    /**
     * Returns the current fraction of the document pagination that has been completed.
     */
    getPaginationProgress(): number
    /**
     * Determines if a footer is set to be printed for each page.
     * 
     * A footer will be printed if this function returns %TRUE
     * **and** some format strings have been specified
     * with [method`PrintCompositor`.set_footer_format].
     */
    getPrintFooter(): boolean
    /**
     * Determines if a header is set to be printed for each page.
     * 
     * A header will be printed if this function returns %TRUE
     * **and** some format strings have been specified
     * with [method`PrintCompositor`.set_header_format].
     */
    getPrintHeader(): boolean
    /**
     * Returns the interval used for line number printing.
     * 
     * If the value is 0, no line numbers will be printed. The default value is
     * 1 (i.e. numbers printed in all lines).
     */
    getPrintLineNumbers(): number
    /**
     * Gets the right margin in units of `unit`.
     */
    getRightMargin(unit: Gtk.Unit): number
    /**
     * Returns the width of tabulation in characters for printed text.
     */
    getTabWidth(): number
    /**
     * Gets the top margin in units of `unit`.
     */
    getTopMargin(unit: Gtk.Unit): number
    /**
     * Gets the line wrapping mode for the printed text.
     */
    getWrapMode(): Gtk.WrapMode
    /**
     * Specifies a tag whose style should be ignored when compositing the
     * document to the printable page.
     */
    ignoreTag(tag: Gtk.TextTag): void
    /**
     * Paginate the document associated with the `compositor`.
     * 
     * In order to support non-blocking pagination, document is paginated in small chunks.
     * Each time [method`PrintCompositor`.paginate] is invoked, a chunk of the document
     * is paginated. To paginate the entire document, [method`PrintCompositor`.paginate]
     * must be invoked multiple times.
     * It returns %TRUE if the document has been completely paginated, otherwise it returns %FALSE.
     * 
     * This method has been designed to be invoked in the handler of the [signal`Gtk`.PrintOperation::paginate] signal,
     * as shown in the following example:
     * 
     * ```c
     * // Signal handler for the GtkPrintOperation::paginate signal
     * 
     * static gboolean
     * paginate (GtkPrintOperation *operation,
     *           GtkPrintContext   *context,
     *           gpointer           user_data)
     * {
     *     GtkSourcePrintCompositor *compositor;
     * 
     *     compositor = GTK_SOURCE_PRINT_COMPOSITOR (user_data);
     * 
     *     if (gtk_source_print_compositor_paginate (compositor, context))
     *     {
     *         gint n_pages;
     * 
     *         n_pages = gtk_source_print_compositor_get_n_pages (compositor);
     *         gtk_print_operation_set_n_pages (operation, n_pages);
     * 
     *         return TRUE;
     *     }
     * 
     *     return FALSE;
     * }
     * ```
     * 
     * If you don't need to do pagination in chunks, you can simply do it all in the
     * [signal`Gtk`.PrintOperation::begin-print] handler, and set the number of pages from there, like
     * in the following example:
     * 
     * ```c
     * // Signal handler for the GtkPrintOperation::begin-print signal
     * 
     * static void
     * begin_print (GtkPrintOperation *operation,
     *              GtkPrintContext   *context,
     *              gpointer           user_data)
     * {
     *     GtkSourcePrintCompositor *compositor;
     *     gint n_pages;
     * 
     *     compositor = GTK_SOURCE_PRINT_COMPOSITOR (user_data);
     * 
     *     while (!gtk_source_print_compositor_paginate (compositor, context));
     * 
     *     n_pages = gtk_source_print_compositor_get_n_pages (compositor);
     *     gtk_print_operation_set_n_pages (operation, n_pages);
     * }
     * ```
     */
    paginate(context: Gtk.PrintContext): boolean
    /**
     * Sets the default font for the printed text.
     * 
     * `font_name` should be a
     * string representation of a font description Pango can understand.
     * (e.g. &quot;Monospace 10&quot;). See [func`Pango`.FontDescription.from_string]
     * for a description of the format of the string representation.
     * 
     * This function cannot be called anymore after the first call to the
     * [method`PrintCompositor`.paginate] function.
     */
    setBodyFontName(fontName: string): void
    /**
     * Sets the bottom margin used by `compositor`.
     */
    setBottomMargin(margin: number, unit: Gtk.Unit): void
    /**
     * Sets the font for printing the page footer.
     * 
     * If %NULL is supplied, the default font (i.e. the one being used for the
     * text) will be used instead.
     * 
     * `font_name` should be a
     * string representation of a font description Pango can understand.
     * (e.g. &quot;Monospace 10&quot;). See [func`Pango`.FontDescription.from_string]
     * for a description of the format of the string representation.
     * 
     * This function cannot be called anymore after the first call to the
     * [method`PrintCompositor`.paginate] function.
     */
    setFooterFontName(fontName?: string | null): void
    /**
     * See [method`PrintCompositor`.set_header_format] for more information
     * about the parameters.
     */
    setFooterFormat(separator: boolean, left?: string | null, center?: string | null, right?: string | null): void
    /**
     * Sets the font for printing the page header.
     * 
     * If %NULL is supplied, the default font (i.e. the one being used for the
     * text) will be used instead.
     * 
     * `font_name` should be a
     * string representation of a font description Pango can understand.
     * (e.g. &quot;Monospace 10&quot;). See [func`Pango`.FontDescription.from_string]
     * for a description of the format of the string representation.
     * 
     * This function cannot be called anymore after the first call to the
     * [method`PrintCompositor`.paginate] function.
     */
    setHeaderFontName(fontName?: string | null): void
    /**
     * Sets strftime like header format strings, to be printed on the
     * left, center and right of the top of each page.
     * 
     * The strings may include strftime(3) codes which will be expanded at print time.
     * A subset of strftime() codes are accepted, see [method`GLib`.DateTime.format]
     * for more details on the accepted format specifiers.
     * Additionally the following format specifiers are accepted:
     * 
     * - #N: the page number
     * - #Q: the page count.
     * 
     * `separator` specifies if a solid line should be drawn to separate
     * the header from the document text.
     * 
     * If %NULL is given for any of the three arguments, that particular
     * string will not be printed.
     * 
     * For the header to be printed, in
     * addition to specifying format strings, you need to enable header
     * printing with [method`PrintCompositor`.set_print_header].
     * 
     * This function cannot be called anymore after the first call to the
     * [method`PrintCompositor`.paginate] function.
     */
    setHeaderFormat(separator: boolean, left?: string | null, center?: string | null, right?: string | null): void
    /**
     * Sets whether the printed text will be highlighted according to the
     * buffer rules.  Both color and font style are applied.
     * 
     * This function cannot be called anymore after the first call to the
     * [method`PrintCompositor`.paginate] function.
     */
    setHighlightSyntax(highlight: boolean): void
    /**
     * Sets the left margin used by `compositor`.
     */
    setLeftMargin(margin: number, unit: Gtk.Unit): void
    /**
     * Sets the font for printing line numbers on the left margin.
     * 
     * If %NULL is supplied, the default font (i.e. the one being used for the
     * text) will be used instead.
     * 
     * `font_name` should be a
     * string representation of a font description Pango can understand.
     * (e.g. &quot;Monospace 10&quot;). See [func`Pango`.FontDescription.from_string]
     * for a description of the format of the string representation.
     * 
     * This function cannot be called anymore after the first call to the
     * [method`PrintCompositor`.paginate] function.
     */
    setLineNumbersFontName(fontName?: string | null): void
    /**
     * Sets whether you want to print a footer in each page.
     * 
     * The footer consists of three pieces of text and an optional line
     * separator, configurable with
     * [method`PrintCompositor`.set_footer_format].
     * 
     * Note that by default the footer format is unspecified, and if it's
     * empty it will not be printed, regardless of this setting.
     * 
     * This function cannot be called anymore after the first call to the
     * [method`PrintCompositor`.paginate] function.
     */
    setPrintFooter(print: boolean): void
    /**
     * Sets whether you want to print a header in each page.
     * 
     * The header consists of three pieces of text and an optional line
     * separator, configurable with [method`PrintCompositor`.set_header_format].
     * 
     * Note that by default the header format is unspecified, and if it's
     * empty it will not be printed, regardless of this setting.
     * 
     * This function cannot be called anymore after the first call to the
     * [method`PrintCompositor`.paginate] function.
     */
    setPrintHeader(print: boolean): void
    /**
     * Sets the interval for printed line numbers.
     * 
     * If `interval` is 0 no numbers will be printed. If greater than 0, a number will be
     * printed every `interval` lines (i.e. 1 will print all line numbers).
     * 
     * Maximum accepted value for `interval` is 100.
     * 
     * This function cannot be called anymore after the first call to the
     * [method`PrintCompositor`.paginate] function.
     */
    setPrintLineNumbers(interval: number): void
    /**
     * Sets the right margin used by `compositor`.
     */
    setRightMargin(margin: number, unit: Gtk.Unit): void
    /**
     * Sets the width of tabulation in characters for printed text.
     * 
     * This function cannot be called anymore after the first call to the
     * [method`PrintCompositor`.paginate] function.
     */
    setTabWidth(width: number): void
    /**
     * Sets the top margin used by `compositor`.
     */
    setTopMargin(margin: number, unit: Gtk.Unit): void
    /**
     * Sets the line wrapping mode for the printed text.
     * 
     * This function cannot be called anymore after the first call to the
     * [method`PrintCompositor`.paginate] function.
     */
    setWrapMode(wrapMode: Gtk.WrapMode): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::body-font-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::body-font-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::body-font-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::body-font-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::body-font-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::footer-font-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::footer-font-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::footer-font-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::footer-font-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::footer-font-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::header-font-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::header-font-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::header-font-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::header-font-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::header-font-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::highlight-syntax", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::highlight-syntax", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::highlight-syntax", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::highlight-syntax", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::highlight-syntax", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::line-numbers-font-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::line-numbers-font-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::line-numbers-font-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::line-numbers-font-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::line-numbers-font-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::n-pages", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::n-pages", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::n-pages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::n-pages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::n-pages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::print-footer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::print-footer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::print-footer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::print-footer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::print-footer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::print-header", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::print-header", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::print-header", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::print-header", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::print-header", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::print-line-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::print-line-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::print-line-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::print-line-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::print-line-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wrap-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wrap-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: PrintCompositor_ConstructProps)
    _init (config?: PrintCompositor_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(buffer: Buffer): PrintCompositor
    static newFromView(view: View): PrintCompositor
    static $gtype: GObject.Type
}
interface Region_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.Region */
    /**
     * The [class`Gtk`.TextBuffer]. The #GtkSourceRegion has a weak reference to the
     * buffer.
     */
    buffer?: Gtk.TextBuffer
}
class Region {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.Region */
    /**
     * Adds `region_to_add` to `region`.
     * 
     * `region_to_add` is not modified.
     */
    addRegion(regionToAdd?: Region | null): void
    /**
     * Adds the subregion delimited by `_start` and `_end` to `region`.
     */
    addSubregion(start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Gets the `start` and `end` bounds of the `region`.
     */
    getBounds(): [ /* returnType */ boolean, /* start */ Gtk.TextIter | null, /* end */ Gtk.TextIter | null ]
    getBuffer(): Gtk.TextBuffer | null
    /**
     * Initializes a [struct`RegionIter]` to the first subregion of `region`.
     * 
     * If `region` is empty, `iter` will be initialized to the end iterator.
     */
    getStartRegionIter(): /* iter */ RegionIter
    /**
     * Returns the intersection between `region1` and `region2`.
     * 
     * `region1` and `region2` are not modified.
     */
    intersectRegion(region2?: Region | null): Region | null
    /**
     * Returns the intersection between `region` and the subregion delimited by
     * `_start` and `_end`.
     * 
     * `region` is not modified.
     */
    intersectSubregion(start: Gtk.TextIter, end: Gtk.TextIter): Region | null
    /**
     * Returns whether the `region` is empty.
     * 
     * A %NULL `region` is considered empty.
     */
    isEmpty(): boolean
    /**
     * Subtracts `region_to_subtract` from `region`.
     * 
     * `region_to_subtract` is not modified.
     */
    subtractRegion(regionToSubtract?: Region | null): void
    /**
     * Subtracts the subregion delimited by `_start` and `_end` from `region`.
     */
    subtractSubregion(start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Gets a string represention of `region,` for debugging purposes.
     * 
     * The returned string contains the character offsets of the subregions. It
     * doesn't include a newline character at the end of the string.
     */
    toString(): string | null
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Region_ConstructProps)
    _init (config?: Region_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(buffer: Gtk.TextBuffer): Region
    static $gtype: GObject.Type
}
interface SearchContext_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.SearchContext */
    /**
     * The [class`Buffer]` associated to the search context.
     */
    buffer?: Buffer
    /**
     * Highlight the search occurrences.
     */
    highlight?: boolean
    /**
     * A [class`Style]`, or %NULL for theme's scheme default style.
     */
    matchStyle?: Style
    /**
     * The [class`SearchSettings]` associated to the search context.
     * 
     * This property is construct-only since version 4.0.
     */
    settings?: SearchSettings
}
class SearchContext {
    /* Properties of GtkSource-5.GtkSource.SearchContext */
    /**
     * Highlight the search occurrences.
     */
    highlight: boolean
    /**
     * A [class`Style]`, or %NULL for theme's scheme default style.
     */
    matchStyle: Style
    /**
     * The total number of search occurrences. If the search is disabled,
     * the value is 0. If the buffer is not already fully scanned, the value
     * is -1.
     */
    readonly occurrencesCount: number
    /**
     * If the regex search pattern doesn't follow all the rules, this
     * #GError property will be set. If the pattern is valid, the value is
     * %NULL.
     * 
     * Free with [method`GLib`.Error.free].
     */
    readonly regexError: GLib.Error
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.SearchContext */
    /**
     * Synchronous backward search.
     * 
     * It is recommended to use the asynchronous functions instead, to not block the user interface.
     * However, if you are sure that the `buffer` is small, this function is more convenient to use.
     * 
     * If the [property`SearchSettings:`wrap-around] property is %FALSE, this function
     * doesn't try to wrap around.
     * 
     * The `has_wrapped_around` out parameter is set independently of whether a match
     * is found. So if this function returns %FALSE, `has_wrapped_around` will have
     * the same value as the [property`SearchSettings:`wrap-around] property.
     */
    backward(iter: Gtk.TextIter): [ /* returnType */ boolean, /* matchStart */ Gtk.TextIter | null, /* matchEnd */ Gtk.TextIter | null, /* hasWrappedAround */ boolean | null ]
    /**
     * The asynchronous version of [method`SearchContext`.backward].
     * 
     * See the [iface`Gio`.AsyncResult] documentation to know how to use this function.
     * 
     * If the operation is cancelled, the `callback` will only be called if
     * `cancellable` was not %NULL. The method takes
     * ownership of `cancellable,` so you can unref it after calling this function.
     */
    backwardAsync(iter: Gtk.TextIter, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes a backward search started with
     * [method`SearchContext`.backward_async].
     * 
     * See the documentation of [method`SearchContext`.backward] for more
     * details.
     */
    backwardFinish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* matchStart */ Gtk.TextIter | null, /* matchEnd */ Gtk.TextIter | null, /* hasWrappedAround */ boolean | null ]
    /**
     * Synchronous forward search.
     * 
     * It is recommended to use the asynchronous functions instead, to not block the user interface.
     * However, if you are sure that the `buffer` is small, this function is more convenient to use.
     * 
     * If the [property`SearchSettings:`wrap-around] property is %FALSE, this function
     * doesn't try to wrap around.
     * 
     * The `has_wrapped_around` out parameter is set independently of whether a match
     * is found. So if this function returns %FALSE, `has_wrapped_around` will have
     * the same value as the  [property`SearchSettings:`wrap-around] property.
     */
    forward(iter: Gtk.TextIter): [ /* returnType */ boolean, /* matchStart */ Gtk.TextIter | null, /* matchEnd */ Gtk.TextIter | null, /* hasWrappedAround */ boolean | null ]
    /**
     * The asynchronous version of [method`SearchContext`.forward].
     * 
     * See the [iface`Gio`.AsyncResult] documentation to know how to use this function.
     * 
     * If the operation is cancelled, the `callback` will only be called if
     * `cancellable` was not %NULL. The method takes
     * ownership of `cancellable,` so you can unref it after calling this function.
     */
    forwardAsync(iter: Gtk.TextIter, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes a forward search started with [method`SearchContext`.forward_async].
     * 
     * See the documentation of [method`SearchContext`.forward] for more
     * details.
     */
    forwardFinish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* matchStart */ Gtk.TextIter | null, /* matchEnd */ Gtk.TextIter | null, /* hasWrappedAround */ boolean | null ]
    getBuffer(): Buffer
    getHighlight(): boolean
    getMatchStyle(): Style
    /**
     * Gets the position of a search occurrence.
     * 
     * If the buffer is not already fully scanned, the position may be unknown,
     * and -1 is returned. If 0 is returned, it means that this part of the buffer
     * has already been scanned, and that `match_start` and `match_end` don't delimit an occurrence.
     */
    getOccurrencePosition(matchStart: Gtk.TextIter, matchEnd: Gtk.TextIter): number
    /**
     * Gets the total number of search occurrences.
     * 
     * If the buffer is not already fully scanned, the total number of occurrences is
     * unknown, and -1 is returned.
     */
    getOccurrencesCount(): number
    /**
     * Regular expression patterns must follow certain rules. If
     * [property`SearchSettings:`search-text] breaks a rule, the error can be
     * retrieved with this function.
     * 
     * The error domain is [enum`GLib`.RegexError].
     * 
     * Free the return value with [method`GLib`.Error.free].
     */
    getRegexError(): GLib.Error | null
    getSettings(): SearchSettings
    /**
     * Replaces a search match by another text. If `match_start` and `match_end`
     * doesn't correspond to a search match, %FALSE is returned.
     * 
     * `match_start` and `match_end` iters are revalidated to point to the replacement
     * text boundaries.
     * 
     * For a regular expression replacement, you can check if `replace` is valid by
     * calling [func`GLib`.Regex.check_replacement]. The `replace` text can contain
     * backreferences.
     */
    replace(matchStart: Gtk.TextIter, matchEnd: Gtk.TextIter, replace: string, replaceLength: number): boolean
    /**
     * Replaces all search matches by another text.
     * 
     * It is a synchronous function, so it can block the user interface.
     * 
     * For a regular expression replacement, you can check if `replace` is valid by
     * calling [func`GLib`.Regex.check_replacement]. The `replace` text can contain
     * backreferences.
     */
    replaceAll(replace: string, replaceLength: number): number
    /**
     * Enables or disables the search occurrences highlighting.
     */
    setHighlight(highlight: boolean): void
    /**
     * Set the style to apply on search matches.
     * 
     * If `match_style` is %NULL, default theme's scheme 'match-style' will be used.
     * To enable or disable the search highlighting, use [method`SearchContext`.set_highlight].
     */
    setMatchStyle(matchStyle?: Style | null): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::highlight", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::highlight", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::highlight", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::highlight", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::highlight", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::match-style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::match-style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::match-style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::match-style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::match-style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::occurrences-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::occurrences-count", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::occurrences-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::occurrences-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::occurrences-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::regex-error", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::regex-error", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::regex-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::regex-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::regex-error", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SearchContext_ConstructProps)
    _init (config?: SearchContext_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(buffer: Buffer, settings?: SearchSettings | null): SearchContext
    static $gtype: GObject.Type
}
interface SearchSettings_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.SearchSettings */
    /**
     * If %TRUE, a search match must start and end a word. The match can
     * span multiple words.
     */
    atWordBoundaries?: boolean
    /**
     * Whether the search is case sensitive.
     */
    caseSensitive?: boolean
    /**
     * Search by regular expressions with
     * [property`SearchSettings:`search-text] as the pattern.
     */
    regexEnabled?: boolean
    /**
     * A search string, or %NULL if the search is disabled.
     * 
     * If the regular expression search is enabled, [property`SearchSettings:`search-text] is
     * the pattern.
     */
    searchText?: string
    /**
     * For a forward search, continue at the beginning of the buffer if no
     * search occurrence is found. For a backward search, continue at the
     * end of the buffer.
     */
    wrapAround?: boolean
}
class SearchSettings {
    /* Properties of GtkSource-5.GtkSource.SearchSettings */
    /**
     * If %TRUE, a search match must start and end a word. The match can
     * span multiple words.
     */
    atWordBoundaries: boolean
    /**
     * Whether the search is case sensitive.
     */
    caseSensitive: boolean
    /**
     * Search by regular expressions with
     * [property`SearchSettings:`search-text] as the pattern.
     */
    regexEnabled: boolean
    /**
     * A search string, or %NULL if the search is disabled.
     * 
     * If the regular expression search is enabled, [property`SearchSettings:`search-text] is
     * the pattern.
     */
    searchText: string
    /**
     * For a forward search, continue at the beginning of the buffer if no
     * search occurrence is found. For a backward search, continue at the
     * end of the buffer.
     */
    wrapAround: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.SearchSettings */
    getAtWordBoundaries(): boolean
    getCaseSensitive(): boolean
    getRegexEnabled(): boolean
    /**
     * Gets the text to search.
     * 
     * The return value must not be freed.
     * 
     * You may be interested to call [func`utils_escape_search_text]` after
     * this function.
     */
    getSearchText(): string | null
    getWrapAround(): boolean
    /**
     * Change whether the search is done at word boundaries.
     * 
     * If `at_word_boundaries` is %TRUE, a search match must start and end a word.
     * The match can span multiple words. See also [method`Gtk`.TextIter.starts_word] and
     * [method`Gtk`.TextIter.ends_word].
     */
    setAtWordBoundaries(atWordBoundaries: boolean): void
    /**
     * Enables or disables the case sensitivity for the search.
     */
    setCaseSensitive(caseSensitive: boolean): void
    /**
     * Enables or disables whether to search by regular expressions.
     * 
     * If enabled, the [property`SearchSettings:`search-text] property contains the
     * pattern of the regular expression.
     * 
     * [class`SearchContext]` uses #GRegex when regex search is enabled. See the
     * [Regular expression syntax](https://developer.gnome.org/glib/stable/glib-regex-syntax.html)
     * page in the GLib reference manual.
     */
    setRegexEnabled(regexEnabled: boolean): void
    /**
     * Sets the text to search.
     * 
     * If `search_text` is %NULL or is empty, the search will be disabled. A copy of `search_text`
     * will be made, so you can safely free `search_text` after a call to this function.
     * 
     * You may be interested to call [func`utils_unescape_search_text]` before
     * this function.
     */
    setSearchText(searchText?: string | null): void
    /**
     * Enables or disables the wrap around search.
     * 
     * If `wrap_around` is %TRUE, the forward search continues at the beginning of the buffer
     * if no search occurrences are found. Similarly, the backward search continues to search at
     * the end of the buffer.
     */
    setWrapAround(wrapAround: boolean): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::at-word-boundaries", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::at-word-boundaries", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::at-word-boundaries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::at-word-boundaries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::at-word-boundaries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::case-sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::case-sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::case-sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::case-sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::case-sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::regex-enabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::regex-enabled", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::regex-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::regex-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::regex-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::search-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::search-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::search-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::search-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::search-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wrap-around", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wrap-around", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wrap-around", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wrap-around", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wrap-around", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SearchSettings_ConstructProps)
    _init (config?: SearchSettings_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SearchSettings
    static $gtype: GObject.Type
}
interface Snippet_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.Snippet */
    description?: string
    languageId?: string
    name?: string
    trigger?: string
}
class Snippet {
    /* Properties of GtkSource-5.GtkSource.Snippet */
    readonly buffer: Gtk.TextBuffer
    description: string
    readonly focusPosition: number
    languageId: string
    name: string
    trigger: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.Snippet */
    /**
     * Appends `chunk` to the `snippet`.
     * 
     * This may only be called before the snippet has been expanded.
     */
    addChunk(chunk: SnippetChunk): void
    /**
     * Does a deep copy of the snippet.
     */
    copy(): Snippet
    /**
     * Gets the context used for expanding the snippet.
     */
    getContext(): SnippetContext | null
    /**
     * Gets the description for the snippet.
     */
    getDescription(): string
    /**
     * Gets the current focus for the snippet.
     * 
     * This is changed as the user tabs through focus locations.
     */
    getFocusPosition(): number
    /**
     * Gets the language-id used for the source snippet.
     * 
     * The language identifier should be one that matches a
     * source language [property`Language:`id] property.
     */
    getLanguageId(): string
    /**
     * Gets the number of chunks in the snippet.
     * 
     * Note that not all chunks are editable.
     */
    getNChunks(): number
    /**
     * Gets the name for the snippet.
     */
    getName(): string
    /**
     * Gets the chunk at `nth`.
     */
    getNthChunk(nth: number): SnippetChunk
    /**
     * Gets the trigger for the source snippet.
     * 
     * A trigger is a word that can be expanded into the full snippet when
     * the user presses Tab.
     */
    getTrigger(): string | null
    /**
     * Sets the description for the snippet.
     */
    setDescription(description: string): void
    /**
     * Sets the language identifier for the snippet.
     * 
     * This should match the [property`Language:`id] identifier.
     */
    setLanguageId(languageId: string): void
    /**
     * Sets the name for the snippet.
     */
    setName(name: string): void
    /**
     * Sets the trigger for the snippet.
     */
    setTrigger(trigger: string): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::buffer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::description", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::description", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-position", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-position", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::language-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::language-id", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::language-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::language-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::language-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::trigger", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::trigger", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::trigger", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::trigger", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::trigger", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Snippet_ConstructProps)
    _init (config?: Snippet_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(trigger?: string | null, languageId?: string | null): Snippet
    static $gtype: GObject.Type
}
interface SnippetChunk_ConstructProps extends GObject.InitiallyUnowned_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.SnippetChunk */
    context?: SnippetContext
    focusPosition?: number
    spec?: string
    text?: string
    textSet?: boolean
    tooltipText?: string
}
class SnippetChunk {
    /* Properties of GtkSource-5.GtkSource.SnippetChunk */
    context: SnippetContext
    focusPosition: number
    spec: string
    text: string
    textSet: boolean
    tooltipText: string
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.SnippetChunk */
    /**
     * Copies the source snippet.
     */
    copy(): SnippetChunk
    /**
     * Gets the context for the snippet insertion.
     */
    getContext(): SnippetContext
    /**
     * Gets the [property`SnippetChunk:`focus-position].
     * 
     * The focus-position is used to determine how many tabs it takes for the
     * snippet to advanced to this chunk.
     * 
     * A focus-position of zero will be the last focus position of the snippet
     * and snippet editing ends when it has been reached.
     * 
     * A focus-position of -1 means the chunk cannot be focused by the user.
     */
    getFocusPosition(): number
    /**
     * Gets the specification for the chunk.
     * 
     * The specification is evaluated for variables when other chunks are edited
     * within the snippet context. If the user has changed the text, the
     * [property`SnippetChunk:`text] and [property`SnippetChunk:`text-set] properties
     * are updated.
     */
    getSpec(): string | null
    /**
     * Gets the [property`SnippetChunk:`text] property.
     * 
     * The text property is updated when the user edits the text of the chunk.
     * If it has not been edited, the [property`SnippetChunk:`spec] property is
     * returned.
     */
    getText(): string
    /**
     * Gets the [property`SnippetChunk:`text-set] property.
     * 
     * This is typically set when the user has edited a snippet chunk.
     */
    getTextSet(): boolean
    getTooltipText(): string
    setContext(context: SnippetContext): void
    /**
     * Sets the [property`SnippetChunk:`focus-position] property.
     * 
     * The focus-position is used to determine how many tabs it takes for the
     * snippet to advanced to this chunk.
     * 
     * A focus-position of zero will be the last focus position of the snippet
     * and snippet editing ends when it has been reached.
     * 
     * A focus-position of -1 means the chunk cannot be focused by the user.
     */
    setFocusPosition(focusPosition: number): void
    /**
     * Sets the specification for the chunk.
     * 
     * The specification is evaluated for variables when other chunks are edited
     * within the snippet context. If the user has changed the text, the
     * [property`SnippetChunk:`text and] [property`SnippetChunk:`text-set] properties
     * are updated.
     */
    setSpec(spec: string): void
    /**
     * Sets the text for the snippet chunk.
     * 
     * This is usually used by the snippet engine to update the text, but may
     * be useful when creating custom snippets to avoid expansion of any
     * specification.
     */
    setText(text: string): void
    /**
     * Sets the [property`SnippetChunk:`text-set] property.
     * 
     * This is typically set when the user has edited a snippet chunk by the
     * snippet engine.
     */
    setTextSet(textSet: boolean): void
    setTooltipText(tooltipText: string): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::context", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-position", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-position", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::spec", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spec", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::spec", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::spec", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::spec", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SnippetChunk_ConstructProps)
    _init (config?: SnippetChunk_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SnippetChunk
    static $gtype: GObject.Type
}
interface SnippetContext_ConstructProps extends GObject.Object_ConstructProps {
}
class SnippetContext {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.SnippetContext */
    /**
     * Removes all variables from the context.
     */
    clearVariables(): void
    expand(input: string): string
    /**
     * Gets the current value for a variable named `key`.
     */
    getVariable(key: string): string | null
    /**
     * Sets a constatnt within the context.
     * 
     * This is similar to a variable set with [method`SnippetContext`.set_variable]
     * but is expected to not change during use of the snippet.
     * 
     * Examples would be the date or users name.
     */
    setConstant(key: string, value: string): void
    setLinePrefix(linePrefix: string): void
    setTabWidth(tabWidth: number): void
    setUseSpaces(useSpaces: boolean): void
    /**
     * Sets a variable within the context.
     * 
     * This variable may be overridden by future updates to the
     * context.
     */
    setVariable(key: string, value: string): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GtkSource-5.GtkSource.SnippetContext */
    /**
     * The signal is emitted when a change has been
     * discovered in one of the chunks of the snippet which has
     * caused a variable or other dynamic data within the context
     * to have changed.
     */
    connect(sigName: "changed", callback: (() => void)): number
    on(sigName: "changed", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "changed", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "changed", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "changed"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SnippetContext_ConstructProps)
    _init (config?: SnippetContext_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SnippetContext
    static $gtype: GObject.Type
}
interface SnippetManager_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.SnippetManager */
    /**
     * Contains a list of directories to search for files containing snippets (*.snippets).
     */
    searchPath?: string[]
}
class SnippetManager {
    /* Properties of GtkSource-5.GtkSource.SnippetManager */
    /**
     * Contains a list of directories to search for files containing snippets (*.snippets).
     */
    searchPath: string[]
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.SnippetManager */
    /**
     * Gets the list directories where `self` looks for snippet files.
     */
    getSearchPath(): string[]
    /**
     * Queries the known snippets for the first matching `group,` `language_id,`
     * and/or `trigger`.
     * 
     * If `group` or `language_id` are %NULL, they will be ignored.
     */
    getSnippet(group: string | null, languageId: string | null, trigger: string): Snippet | null
    /**
     * List all the known groups within the snippet manager.
     * 
     * The result should be freed with g_free(), and the individual strings are
     * owned by `self` and should never be freed by the caller.
     */
    listGroups(): string[]
    /**
     * Queries the known snippets for those matching `group,` `language_id,` and/or
     * `trigger_prefix`.
     * 
     * If any of these are %NULL, they will be ignored when filtering the available snippets.
     * 
     * The [iface`Gio`.ListModel] only contains information about the available snippets until
     * [method`Gio`.ListModel.get_item] is called for a specific snippet. This helps reduce
     * the number of [class`GObject`.Object]'s that are created at runtime to those needed by
     * the calling application.
     */
    listMatching(group?: string | null, languageId?: string | null, triggerPrefix?: string | null): Gio.ListModel
    /**
     * Sets the list of directories in which the `GtkSourceSnippetManager` looks for
     * snippet files.
     * 
     * If `dirs` is %NULL, the search path is reset to default.
     * 
     * At the moment this function can be called only before the
     * snippet files are loaded for the first time. In practice
     * to set a custom search path for a `GtkSourceSnippetManager`,
     * you have to call this function right after creating it.
     */
    setSearchPath(dirs?: string[] | null): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::search-path", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::search-path", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::search-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::search-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::search-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SnippetManager_ConstructProps)
    _init (config?: SnippetManager_ConstructProps): void
    /* Static methods and pseudo-constructors */
    /**
     * Returns the default #GtkSourceSnippetManager instance.
     */
    static getDefault(): SnippetManager
    static $gtype: GObject.Type
}
interface SpaceDrawer_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.SpaceDrawer */
    /**
     * Whether the [property`SpaceDrawer:`matrix] property is enabled.
     */
    enableMatrix?: boolean
    /**
     * The property is a [struct`GLib`.Variant] property to specify where and
     * what kind of white spaces to draw.
     * 
     * The [struct`GLib`.Variant] is of type `"au"`, an array of unsigned integers. Each
     * integer is a combination of [flags`SpaceTypeFlags]`. There is one
     * integer for each [flags`SpaceLocationFlags]`, in the same order as
     * they are defined in the enum (%GTK_SOURCE_SPACE_LOCATION_NONE and
     * %GTK_SOURCE_SPACE_LOCATION_ALL are not taken into account).
     * 
     * If the array is shorter than the number of locations, then the value
     * for the missing locations will be %GTK_SOURCE_SPACE_TYPE_NONE.
     * 
     * By default, %GTK_SOURCE_SPACE_TYPE_ALL is set for all locations.4
     */
    matrix?: GLib.Variant
}
class SpaceDrawer {
    /* Properties of GtkSource-5.GtkSource.SpaceDrawer */
    /**
     * Whether the [property`SpaceDrawer:`matrix] property is enabled.
     */
    enableMatrix: boolean
    /**
     * The property is a [struct`GLib`.Variant] property to specify where and
     * what kind of white spaces to draw.
     * 
     * The [struct`GLib`.Variant] is of type `"au"`, an array of unsigned integers. Each
     * integer is a combination of [flags`SpaceTypeFlags]`. There is one
     * integer for each [flags`SpaceLocationFlags]`, in the same order as
     * they are defined in the enum (%GTK_SOURCE_SPACE_LOCATION_NONE and
     * %GTK_SOURCE_SPACE_LOCATION_ALL are not taken into account).
     * 
     * If the array is shorter than the number of locations, then the value
     * for the missing locations will be %GTK_SOURCE_SPACE_TYPE_NONE.
     * 
     * By default, %GTK_SOURCE_SPACE_TYPE_ALL is set for all locations.4
     */
    matrix: GLib.Variant
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.SpaceDrawer */
    /**
     * Binds the [property`SpaceDrawer:`matrix] property to a [class`Gio`.Settings] key.
     * 
     * The [class`Gio`.Settings] key must be of the same type as the
     * [property`SpaceDrawer:`matrix] property, that is, `"au"`.
     * 
     * The [method`Gio`.Settings.bind] function cannot be used, because the default GIO
     * mapping functions don't support [struct`GLib`.Variant] properties (maybe it will be
     * supported by a future GIO version, in which case this function can be
     * deprecated).
     */
    bindMatrixSetting(settings: Gio.Settings, key: string, flags: Gio.SettingsBindFlags): void
    getEnableMatrix(): boolean
    /**
     * Gets the value of the [property`SpaceDrawer:`matrix] property, as a [struct`GLib`.Variant].
     * 
     * An empty array can be returned in case the matrix is a zero matrix.
     * 
     * The [method`SpaceDrawer`.get_types_for_locations] function may be more
     * convenient to use.
     */
    getMatrix(): GLib.Variant
    /**
     * If only one location is specified, this function returns what kind of
     * white spaces are drawn at that location.
     * 
     * The value is retrieved from the [property`SpaceDrawer:`matrix] property.
     * 
     * If several locations are specified, this function returns the logical AND for
     * those locations. Which means that if a certain kind of white space is present
     * in the return value, then that kind of white space is drawn at all the
     * specified `locations`.
     */
    getTypesForLocations(locations: SpaceLocationFlags): SpaceTypeFlags
    /**
     * Sets whether the [property`SpaceDrawer:`matrix] property is enabled.
     */
    setEnableMatrix(enableMatrix: boolean): void
    /**
     * Sets a new value to the [property`SpaceDrawer:`matrix] property, as a [struct`GLib`.Variant].
     * 
     * If `matrix` is %NULL, then an empty array is set.
     * 
     * If `matrix` is floating, it is consumed.
     * 
     * The [method`SpaceDrawer`.set_types_for_locations] function may be more
     * convenient to use.
     */
    setMatrix(matrix?: GLib.Variant | null): void
    /**
     * Modifies the [property`SpaceDrawer:`matrix] property at the specified
     * `locations`.
     */
    setTypesForLocations(locations: SpaceLocationFlags, types: SpaceTypeFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::enable-matrix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-matrix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-matrix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-matrix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-matrix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::matrix", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::matrix", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::matrix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::matrix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::matrix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: SpaceDrawer_ConstructProps)
    _init (config?: SpaceDrawer_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SpaceDrawer
    static $gtype: GObject.Type
}
interface Style_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.Style */
    background?: string
    backgroundSet?: boolean
    bold?: boolean
    boldSet?: boolean
    foreground?: string
    foregroundSet?: boolean
    italic?: boolean
    italicSet?: boolean
    lineBackground?: string
    lineBackgroundSet?: boolean
    pangoUnderline?: Pango.Underline
    scale?: string
    scaleSet?: boolean
    strikethrough?: boolean
    strikethroughSet?: boolean
    underlineColor?: string
    underlineColorSet?: boolean
    underlineSet?: boolean
    weight?: Pango.Weight
    weightSet?: boolean
}
class Style {
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.Style */
    /**
     * This function modifies the [class`Gtk`.TextTag] properties that are related to the
     * #GtkSourceStyle properties. Other [class`Gtk`.TextTag] properties are left untouched.
     * 
     * If `style` is non-%NULL, applies `style` to `tag`.
     * 
     * If `style` is %NULL, the related *-set properties of [class`Gtk`.TextTag] are set to
     * %FALSE.
     */
    apply(tag: Gtk.TextTag): void
    /**
     * Creates a copy of `style,` that is a new #GtkSourceStyle instance which
     * has the same attributes set.
     */
    copy(): Style
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Style_ConstructProps)
    _init (config?: Style_ConstructProps): void
    static $gtype: GObject.Type
}
interface StyleScheme_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.StyleScheme */
    /**
     * Style scheme id, a unique string used to identify the style scheme
     * in [class`StyleSchemeManager]`.
     */
    id?: string
}
class StyleScheme {
    /* Properties of GtkSource-5.GtkSource.StyleScheme */
    /**
     * Style scheme description, a translatable string to present to the user.
     */
    readonly description: string
    /**
     * Style scheme filename or %NULL.
     */
    readonly filename: string
    /**
     * Style scheme name, a translatable string to present to the user.
     */
    readonly name: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.StyleScheme */
    getAuthors(): string[] | null
    getDescription(): string | null
    getFilename(): string | null
    getId(): string
    /**
     * Gets a metadata property from the style scheme.
     */
    getMetadata(name: string): string | null
    getName(): string
    getStyle(styleId: string): Style | null
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::description", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::description", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::filename", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filename", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: StyleScheme_ConstructProps)
    _init (config?: StyleScheme_ConstructProps): void
    static $gtype: GObject.Type
}
interface StyleSchemeChooserButton_ConstructProps extends Gtk.Button_ConstructProps {
    /* Constructor properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole?: Gtk.AccessibleRole
    /* Constructor properties of Gtk-4.0.Gtk.Actionable */
    actionName?: string
    actionTarget?: GLib.Variant
    /* Constructor properties of GtkSource-5.GtkSource.StyleSchemeChooser */
    /**
     * Contains the currently selected style scheme.
     * 
     * The property can be set to change the current selection programmatically.
     */
    styleScheme?: StyleScheme
}
class StyleSchemeChooserButton {
    /* Properties of Gtk-4.0.Gtk.Button */
    /**
     * The child widget.
     */
    child: Gtk.Widget
    /**
     * Whether the button has a frame.
     */
    hasFrame: boolean
    /**
     * The name of the icon used to automatically populate the button.
     */
    iconName: string
    /**
     * Text of the label inside the button, if the button contains a label widget.
     */
    label: string
    /**
     * If set, an underline in the text indicates that the following character is
     * to be used as mnemonic.
     */
    useUnderline: boolean
    /* Properties of Gtk-4.0.Gtk.Widget */
    /**
     * Whether the widget or any of its descendents can accept
     * the input focus.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    canFocus: boolean
    /**
     * Whether the widget can receive pointer events.
     */
    canTarget: boolean
    /**
     * A list of css classes applied to this widget.
     */
    cssClasses: string[]
    /**
     * The cursor used by `widget`.
     */
    cursor: Gdk.Cursor
    /**
     * Whether the widget should grab focus when it is clicked with the mouse.
     * 
     * This property is only relevant for widgets that can take focus.
     */
    focusOnClick: boolean
    /**
     * Whether this widget itself will accept the input focus.
     */
    focusable: boolean
    /**
     * How to distribute horizontal space if widget gets extra space.
     */
    halign: Gtk.Align
    /**
     * Whether the widget is the default widget.
     */
    readonly hasDefault: boolean
    /**
     * Whether the widget has the input focus.
     */
    readonly hasFocus: boolean
    /**
     * Enables or disables the emission of the ::query-tooltip signal on `widget`.
     * 
     * A value of %TRUE indicates that `widget` can have a tooltip, in this case
     * the widget will be queried using [signal`Gtk`.Widget::query-tooltip] to
     * determine whether it will provide a tooltip or not.
     */
    hasTooltip: boolean
    /**
     * Override for height request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    heightRequest: number
    /**
     * Whether to expand horizontally.
     */
    hexpand: boolean
    /**
     * Whether to use the `hexpand` property.
     */
    hexpandSet: boolean
    /**
     * The `GtkLayoutManager` instance to use to compute the preferred size
     * of the widget, and allocate its children.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    layoutManager: Gtk.LayoutManager
    /**
     * Margin on bottom side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginBottom: number
    /**
     * Margin on end of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginEnd: number
    /**
     * Margin on start of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginStart: number
    /**
     * Margin on top side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginTop: number
    /**
     * The name of the widget.
     */
    name: string
    /**
     * The requested opacity of the widget.
     */
    opacity: number
    /**
     * How content outside the widget's content area is treated.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    overflow: Gtk.Overflow
    /**
     * The parent widget of this widget.
     */
    readonly parent: Gtk.Widget
    /**
     * Whether the widget will receive the default action when it is focused.
     */
    receivesDefault: boolean
    /**
     * The `GtkRoot` widget of the widget tree containing this widget.
     * 
     * This will be %NULL if the widget is not contained in a root widget.
     */
    readonly root: Gtk.Root
    /**
     * The scale factor of the widget.
     */
    readonly scaleFactor: number
    /**
     * Whether the widget responds to input.
     */
    sensitive: boolean
    /**
     * Sets the text of tooltip to be the given string, which is marked up
     * with Pango markup.
     * 
     * Also see [method`Gtk`.Tooltip.set_markup].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipMarkup: string
    /**
     * Sets the text of tooltip to be the given string.
     * 
     * Also see [method`Gtk`.Tooltip.set_text].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipText: string
    /**
     * How to distribute vertical space if widget gets extra space.
     */
    valign: Gtk.Align
    /**
     * Whether to expand vertically.
     */
    vexpand: boolean
    /**
     * Whether to use the `vexpand` property.
     */
    vexpandSet: boolean
    /**
     * Whether the widget is visible.
     */
    visible: boolean
    /**
     * Override for width request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    widthRequest: number
    /* Properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole: Gtk.AccessibleRole
    /* Properties of Gtk-4.0.Gtk.Actionable */
    actionName: string
    actionTarget: GLib.Variant
    /* Properties of GtkSource-5.GtkSource.StyleSchemeChooser */
    /**
     * Contains the currently selected style scheme.
     * 
     * The property can be set to change the current selection programmatically.
     */
    styleScheme: StyleScheme
    /* Fields of Gtk-4.0.Gtk.Widget */
    readonly parentInstance: GObject.InitiallyUnowned
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gtk-4.0.Gtk.Button */
    /**
     * Gets the child widget of `button`.
     */
    getChild(): Gtk.Widget | null
    /**
     * Returns whether the button has a frame.
     */
    getHasFrame(): boolean
    /**
     * Returns the icon name of the button.
     * 
     * If the icon name has not been set with [method`Gtk`.Button.set_icon_name]
     * the return value will be %NULL. This will be the case if you create
     * an empty button with [ctor`Gtk`.Button.new] to use as a container.
     */
    getIconName(): string | null
    /**
     * Fetches the text from the label of the button.
     * 
     * If the label text has not been set with [method`Gtk`.Button.set_label]
     * the return value will be %NULL. This will be the case if you create
     * an empty button with [ctor`Gtk`.Button.new] to use as a container.
     */
    getLabel(): string | null
    /**
     * gets whether underlines are interpreted as mnemonics.
     * 
     * See [method`Gtk`.Button.set_use_underline].
     */
    getUseUnderline(): boolean
    /**
     * Sets the child widget of `button`.
     * 
     * Note that by using this API, you take full responsibility for setting
     * up the proper accessibility label and description information for `button`.
     * Most likely, you'll either set the accessibility label or description
     * for `button` explicitly, or you'll set a labelled-by or described-by
     * relations from `child` to `button`.
     */
    setChild(child?: Gtk.Widget | null): void
    /**
     * Sets the style of the button.
     * 
     * Buttons can has a flat appearance or have a frame drawn around them.
     */
    setHasFrame(hasFrame: boolean): void
    /**
     * Adds a `GtkImage` with the given icon name as a child.
     * 
     * If `button` already contains a child widget, that child widget will
     * be removed and replaced with the image.
     */
    setIconName(iconName: string): void
    /**
     * Sets the text of the label of the button to `label`.
     * 
     * This will also clear any previously set labels.
     */
    setLabel(label: string): void
    /**
     * Sets whether to use underlines as mnemonics.
     * 
     * If true, an underline in the text of the button label indicates
     * the next character should be used for the mnemonic accelerator key.
     */
    setUseUnderline(useUnderline: boolean): void
    /* Methods of Gtk-4.0.Gtk.Widget */
    /**
     * Enable or disable an action installed with
     * gtk_widget_class_install_action().
     */
    actionSetEnabled(actionName: string, enabled: boolean): void
    /**
     * For widgets that can be “activated” (buttons, menu items, etc.),
     * this function activates them.
     * 
     * The activation will emit the signal set using
     * [method`Gtk`.WidgetClass.set_activate_signal] during class initialization.
     * 
     * Activation is what happens when you press <kbd>Enter</kbd>
     * on a widget during key navigation.
     * 
     * If you wish to handle the activation keybinding yourself, it is
     * recommended to use [method`Gtk`.WidgetClass.add_shortcut] with an action
     * created with [ctor`Gtk`.SignalAction.new].
     * 
     * If `widget` isn't activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Looks up the action in the action groups associated with
     * `widget` and its ancestors, and activates it.
     * 
     * If the action is in an action group added with
     * [method`Gtk`.Widget.insert_action_group], the `name` is expected
     * to be prefixed with the prefix that was used when the group was
     * inserted.
     * 
     * The arguments must match the actions expected parameter type,
     * as returned by `g_action_get_parameter_type()`.
     */
    activateAction(name: string, args?: GLib.Variant | null): boolean
    /**
     * Activates the `default.activate` action from `widget`.
     */
    activateDefault(): void
    /**
     * Adds `controller` to `widget` so that it will receive events.
     * 
     * You will usually want to call this function right after
     * creating any kind of [class`Gtk`.EventController].
     */
    addController(controller: Gtk.EventController): void
    /**
     * Adds a style class to `widget`.
     * 
     * After calling this function, the widgets style will match
     * for `css_class,` according to CSS matching rules.
     * 
     * Use [method`Gtk`.Widget.remove_css_class] to remove the
     * style again.
     */
    addCssClass(cssClass: string): void
    /**
     * Adds a widget to the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. Note the
     * list of mnemonic labels for the widget is cleared when the
     * widget is destroyed, so the caller must make sure to update
     * its internal state at this point as well.
     */
    addMnemonicLabel(label: Gtk.Widget): void
    /**
     * Queues an animation frame update and adds a callback to be called
     * before each frame.
     * 
     * Until the tick callback is removed, it will be called frequently
     * (usually at the frame rate of the output device or as quickly as
     * the application can be repainted, whichever is slower). For this
     * reason, is most suitable for handling graphics that change every
     * frame or every few frames. The tick callback does not automatically
     * imply a relayout or repaint. If you want a repaint or relayout, and
     * aren’t changing widget properties that would trigger that (for example,
     * changing the text of a `GtkLabel`), then you will have to call
     * [method`Gtk`.Widget.queue_resize] or [method`Gtk`.Widget.queue_draw]
     * yourself.
     * 
     * [method`Gdk`.FrameClock.get_frame_time] should generally be used
     * for timing continuous animations and
     * [method`Gdk`.FrameTimings.get_predicted_presentation_time] if you are
     * trying to display isolated frames at particular times.
     * 
     * This is a more convenient alternative to connecting directly to the
     * [signal`Gdk`.FrameClock::update] signal of `GdkFrameClock`, since you
     * don't have to worry about when a `GdkFrameClock` is assigned to a widget.
     */
    addTickCallback(callback: Gtk.TickCallback): number
    /**
     * This function is only used by `GtkWidget` subclasses, to
     * assign a size, position and (optionally) baseline to their
     * child widgets.
     * 
     * In this function, the allocation and baseline may be adjusted.
     * The given allocation will be forced to be bigger than the
     * widget's minimum size, as well as at least 0×0 in size.
     * 
     * For a version that does not take a transform, see
     * [method`Gtk`.Widget.size_allocate].
     */
    allocate(width: number, height: number, baseline: number, transform?: Gsk.Transform | null): void
    /**
     * Called by widgets as the user moves around the window using
     * keyboard shortcuts.
     * 
     * The `direction` argument indicates what kind of motion is taking place (up,
     * down, left, right, tab forward, tab backward).
     * 
     * This function calls the [vfunc`Gtk`.Widget.focus] virtual function; widgets
     * can override the virtual function in order to implement appropriate focus
     * behavior.
     * 
     * The default `focus()` virtual function for a widget should return `TRUE` if
     * moving in `direction` left the focus on a focusable location inside that
     * widget, and `FALSE` if moving in `direction` moved the focus outside the
     * widget. When returning `TRUE`, widgets normallycall [method`Gtk`.Widget.grab_focus]
     * to place the focus accordingly; when returning `FALSE`, they don’t modify
     * the current focus location.
     * 
     * This function is used by custom widget implementations; if you're
     * writing an app, you’d use [method`Gtk`.Widget.grab_focus] to move
     * the focus to a particular widget.
     */
    childFocus(direction: Gtk.DirectionType): boolean
    /**
     * Computes the bounds for `widget` in the coordinate space of `target`.
     * 
     * FIXME: Explain what "bounds" are.
     * 
     * If the operation is successful, %TRUE is returned. If `widget` has no
     * bounds or the bounds cannot be expressed in `target'`s coordinate space
     * (for example if both widgets are in different windows), %FALSE is
     * returned and `bounds` is set to the zero rectangle.
     * 
     * It is valid for `widget` and `target` to be the same widget.
     */
    computeBounds(target: Gtk.Widget): [ /* returnType */ boolean, /* outBounds */ Graphene.Rect ]
    /**
     * Computes whether a container should give this widget
     * extra space when possible.
     * 
     * Containers should check this, rather than looking at
     * [method`Gtk`.Widget.get_hexpand] or [method`Gtk`.Widget.get_vexpand].
     * 
     * This function already checks whether the widget is visible, so
     * visibility does not need to be checked separately. Non-visible
     * widgets are not expanded.
     * 
     * The computed expand value uses either the expand setting explicitly
     * set on the widget itself, or, if none has been explicitly set,
     * the widget may expand if some of its children do.
     */
    computeExpand(orientation: Gtk.Orientation): boolean
    /**
     * Translates the given `point` in `widget'`s coordinates to coordinates
     * relative to `target’`s coordinate system.
     * 
     * In order to perform this operation, both widgets must share a
     * common ancestor.
     */
    computePoint(target: Gtk.Widget, point: Graphene.Point): [ /* returnType */ boolean, /* outPoint */ Graphene.Point ]
    /**
     * Computes a matrix suitable to describe a transformation from
     * `widget'`s coordinate system into `target'`s coordinate system.
     * 
     * The transform can not be computed in certain cases, for example
     * when `widget` and `target` do not share a common ancestor. In that
     * case `out_transform` gets set to the identity matrix.
     */
    computeTransform(target: Gtk.Widget): [ /* returnType */ boolean, /* outTransform */ Graphene.Matrix ]
    /**
     * Tests if the point at (`x,` `y)` is contained in `widget`.
     * 
     * The coordinates for (`x,` `y)` must be in widget coordinates, so
     * (0, 0) is assumed to be the top left of `widget'`s content area.
     */
    contains(x: number, y: number): boolean
    /**
     * Creates a new `PangoContext` with the appropriate font map,
     * font options, font description, and base direction for drawing
     * text for this widget.
     * 
     * See also [method`Gtk`.Widget.get_pango_context].
     */
    createPangoContext(): Pango.Context
    /**
     * Creates a new `PangoLayout` with the appropriate font map,
     * font description, and base direction for drawing text for
     * this widget.
     * 
     * If you keep a `PangoLayout` created in this way around,
     * you need to re-create it when the widget `PangoContext`
     * is replaced. This can be tracked by listening to changes
     * of the [property`Gtk`.Widget:root] property on the widget.
     */
    createPangoLayout(text?: string | null): Pango.Layout
    /**
     * Checks to see if a drag movement has passed the GTK drag threshold.
     */
    dragCheckThreshold(startX: number, startY: number, currentX: number, currentY: number): boolean
    /**
     * Notifies the user about an input-related error on this widget.
     * 
     * If the [property`Gtk`.Settings:gtk-error-bell] setting is %TRUE,
     * it calls [method`Gdk`.Surface.beep], otherwise it does nothing.
     * 
     * Note that the effect of [method`Gdk`.Surface.beep] can be configured
     * in many ways, depending on the windowing backend and the desktop
     * environment or window manager that is used.
     */
    errorBell(): void
    /**
     * Returns the baseline that has currently been allocated to `widget`.
     * 
     * This function is intended to be used when implementing handlers
     * for the `GtkWidget`Class.snapshot() function, and when allocating
     * child widgets in `GtkWidget`Class.size_allocate().
     */
    getAllocatedBaseline(): number
    /**
     * Returns the height that has currently been allocated to `widget`.
     */
    getAllocatedHeight(): number
    /**
     * Returns the width that has currently been allocated to `widget`.
     */
    getAllocatedWidth(): number
    /**
     * Retrieves the widget’s allocation.
     * 
     * Note, when implementing a layout container: a widget’s allocation
     * will be its “adjusted” allocation, that is, the widget’s parent
     * typically calls [method`Gtk`.Widget.size_allocate] with an allocation,
     * and that allocation is then adjusted (to handle margin
     * and alignment for example) before assignment to the widget.
     * [method`Gtk`.Widget.get_allocation] returns the adjusted allocation that
     * was actually assigned to the widget. The adjusted allocation is
     * guaranteed to be completely contained within the
     * [method`Gtk`.Widget.size_allocate] allocation, however.
     * 
     * So a layout container is guaranteed that its children stay inside
     * the assigned bounds, but not that they have exactly the bounds the
     * container assigned.
     */
    getAllocation(): /* allocation */ Gtk.Allocation
    /**
     * Gets the first ancestor of `widget` with type `widget_type`.
     * 
     * For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)`
     * gets the first `GtkBox` that’s an ancestor of `widget`. No
     * reference will be added to the returned widget; it should
     * not be unreferenced.
     * 
     * Note that unlike [method`Gtk`.Widget.is_ancestor], this function
     * considers `widget` to be an ancestor of itself.
     */
    getAncestor(widgetType: GObject.Type): Gtk.Widget | null
    /**
     * Determines whether the input focus can enter `widget` or any
     * of its children.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getCanFocus(): boolean
    /**
     * Queries whether `widget` can be the target of pointer events.
     */
    getCanTarget(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * 
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    getChildVisible(): boolean
    /**
     * Gets the clipboard object for `widget`.
     * 
     * This is a utility function to get the clipboard object for the
     * `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getClipboard(): Gdk.Clipboard
    /**
     * Returns the list of style classes applied to `widget`.
     */
    getCssClasses(): string[]
    /**
     * Returns the CSS name that is used for `self`.
     */
    getCssName(): string
    /**
     * Queries the cursor set on `widget`.
     * 
     * See [method`Gtk`.Widget.set_cursor] for details.
     */
    getCursor(): Gdk.Cursor | null
    /**
     * Gets the reading direction for a particular widget.
     * 
     * See [method`Gtk`.Widget.set_direction].
     */
    getDirection(): Gtk.TextDirection
    /**
     * Get the `GdkDisplay` for the toplevel window associated with
     * this widget.
     * 
     * This function can only be called after the widget has been
     * added to a widget hierarchy with a `GtkWindow` at the top.
     * 
     * In general, you should only create display specific
     * resources when a widget has been realized, and you should
     * free those resources when the widget is unrealized.
     */
    getDisplay(): Gdk.Display
    /**
     * Returns the widgets first child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getFirstChild(): Gtk.Widget | null
    /**
     * Returns the current focus child of `widget`.
     */
    getFocusChild(): Gtk.Widget | null
    /**
     * Returns whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * See [method`Gtk`.Widget.set_focus_on_click].
     */
    getFocusOnClick(): boolean
    /**
     * Determines whether `widget` can own the input focus.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getFocusable(): boolean
    /**
     * Gets the font map of `widget`.
     * 
     * See [method`Gtk`.Widget.set_font_map].
     */
    getFontMap(): Pango.FontMap | null
    /**
     * Returns the `cairo_font_options_t` of widget.
     * 
     * Seee [method`Gtk`.Widget.set_font_options].
     */
    getFontOptions(): cairo.FontOptions | null
    /**
     * Obtains the frame clock for a widget.
     * 
     * The frame clock is a global “ticker” that can be used to drive
     * animations and repaints. The most common reason to get the frame
     * clock is to call [method`Gdk`.FrameClock.get_frame_time], in order
     * to get a time to use for animating. For example you might record
     * the start of the animation with an initial value from
     * [method`Gdk`.FrameClock.get_frame_time], and then update the animation
     * by calling [method`Gdk`.FrameClock.get_frame_time] again during each repaint.
     * 
     * [method`Gdk`.FrameClock.request_phase] will result in a new frame on the
     * clock, but won’t necessarily repaint any widgets. To repaint a
     * widget, you have to use [method`Gtk`.Widget.queue_draw] which invalidates
     * the widget (thus scheduling it to receive a draw on the next
     * frame). gtk_widget_queue_draw() will also end up requesting a frame
     * on the appropriate frame clock.
     * 
     * A widget’s frame clock will not change while the widget is
     * mapped. Reparenting a widget (which implies a temporary unmap) can
     * change the widget’s frame clock.
     * 
     * Unrealized widgets do not have a frame clock.
     */
    getFrameClock(): Gdk.FrameClock | null
    /**
     * Gets the horizontal alignment of `widget`.
     * 
     * For backwards compatibility reasons this method will never return
     * %GTK_ALIGN_BASELINE, but instead it will convert it to
     * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
     * alignment.
     */
    getHalign(): Gtk.Align
    /**
     * Returns the current value of the `has-tooltip` property.
     */
    getHasTooltip(): boolean
    /**
     * Returns the content height of the widget.
     * 
     * This function returns the height passed to its
     * size-allocate implementation, which is the height you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getHeight(): number
    /**
     * Gets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Containers should use [method`Gtk`.Widget.compute_expand] rather
     * than this function, to see whether a widget, or any of its children,
     * has the expand flag set. If any child of a widget wants to
     * expand, the parent may ask to expand also.
     * 
     * This function only looks at the widget’s own hexpand flag, rather
     * than computing whether the entire widget tree rooted at this widget
     * wants to expand.
     */
    getHexpand(): boolean
    /**
     * Gets whether gtk_widget_set_hexpand() has been used
     * to explicitly set the expand flag on this widget.
     * 
     * If [property`Gtk`.Widget:hexpand] property is set, then it
     * overrides any computed expand value based on child widgets.
     * If `hexpand` is not set, then the expand value depends on
     * whether any children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    getHexpandSet(): boolean
    /**
     * Returns the widgets last child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getLastChild(): Gtk.Widget | null
    /**
     * Retrieves the layout manager used by `widget`.
     * 
     * See [method`Gtk`.Widget.set_layout_manager].
     */
    getLayoutManager(): Gtk.LayoutManager | null
    /**
     * Whether the widget is mapped.
     */
    getMapped(): boolean
    /**
     * Gets the bottom margin of `widget`.
     */
    getMarginBottom(): number
    /**
     * Gets the end margin of `widget`.
     */
    getMarginEnd(): number
    /**
     * Gets the start margin of `widget`.
     */
    getMarginStart(): number
    /**
     * Gets the top margin of `widget`.
     */
    getMarginTop(): number
    /**
     * Retrieves the name of a widget.
     * 
     * See [method`Gtk`.Widget.set_name] for the significance of widget names.
     */
    getName(): string
    /**
     * Returns the nearest `GtkNative` ancestor of `widget`.
     * 
     * This function will return %NULL if the widget is not
     * contained inside a widget tree with a native ancestor.
     * 
     * `GtkNative` widgets will return themselves here.
     */
    getNative(): Gtk.Native | null
    /**
     * Returns the widgets next sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getNextSibling(): Gtk.Widget | null
    /**
     * #Fetches the requested opacity for this widget.
     * 
     * See [method`Gtk`.Widget.set_opacity].
     */
    getOpacity(): number
    /**
     * Returns the widgets overflow value.
     */
    getOverflow(): Gtk.Overflow
    /**
     * Gets a `PangoContext` with the appropriate font map, font description,
     * and base direction for this widget.
     * 
     * Unlike the context returned by [method`Gtk`.Widget.create_pango_context],
     * this context is owned by the widget (it can be used until the screen
     * for the widget changes or the widget is removed from its toplevel),
     * and will be updated to match any changes to the widget’s attributes.
     * This can be tracked by listening to changes of the
     * [property`Gtk`.Widget:root] property on the widget.
     */
    getPangoContext(): Pango.Context
    /**
     * Returns the parent widget of `widget`.
     */
    getParent(): Gtk.Widget | null
    /**
     * Retrieves the minimum and natural size of a widget, taking
     * into account the widget’s preference for height-for-width management.
     * 
     * This is used to retrieve a suitable size by container widgets which do
     * not impose any restrictions on the child placement. It can be used
     * to deduce toplevel window and menu sizes as well as child widgets in
     * free-form containers such as `GtkFixed`.
     * 
     * Handle with care. Note that the natural height of a height-for-width
     * widget will generally be a smaller size than the minimum height, since
     * the required height for the natural width is generally smaller than the
     * required height for the minimum width.
     * 
     * Use [id`gtk_widget_measure]` if you want to support baseline alignment.
     */
    getPreferredSize(): [ /* minimumSize */ Gtk.Requisition | null, /* naturalSize */ Gtk.Requisition | null ]
    /**
     * Returns the widgets previous sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getPrevSibling(): Gtk.Widget | null
    /**
     * Gets the primary clipboard of `widget`.
     * 
     * This is a utility function to get the primary clipboard object
     * for the `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getPrimaryClipboard(): Gdk.Clipboard
    /**
     * Determines whether `widget` is realized.
     */
    getRealized(): boolean
    /**
     * Determines whether `widget` is always treated as the default widget
     * within its toplevel when it has the focus, even if another widget
     * is the default.
     * 
     * See [method`Gtk`.Widget.set_receives_default].
     */
    getReceivesDefault(): boolean
    /**
     * Gets whether the widget prefers a height-for-width layout
     * or a width-for-height layout.
     * 
     * Single-child widgets generally propagate the preference of
     * their child, more complex widgets need to request something
     * either in context of their children or in context of their
     * allocation capabilities.
     */
    getRequestMode(): Gtk.SizeRequestMode
    /**
     * Returns the `GtkRoot` widget of `widget`.
     * 
     * This function will return %NULL if the widget is not contained
     * inside a widget tree with a root widget.
     * 
     * `GtkRoot` widgets will return themselves here.
     */
    getRoot(): Gtk.Root | null
    /**
     * Retrieves the internal scale factor that maps from window
     * coordinates to the actual device pixels.
     * 
     * On traditional systems this is 1, on high density outputs,
     * it can be a higher value (typically 2).
     * 
     * See [method`Gdk`.Surface.get_scale_factor].
     */
    getScaleFactor(): number
    /**
     * Returns the widget’s sensitivity.
     * 
     * This function returns the value that has been set using
     * [method`Gtk`.Widget.set_sensitive]).
     * 
     * The effective sensitivity of a widget is however determined
     * by both its own and its parent widget’s sensitivity.
     * See [method`Gtk`.Widget.is_sensitive].
     */
    getSensitive(): boolean
    /**
     * Gets the settings object holding the settings used for this widget.
     * 
     * Note that this function can only be called when the `GtkWidget`
     * is attached to a toplevel, since the settings object is specific
     * to a particular `GdkDisplay`. If you want to monitor the widget for
     * changes in its settings, connect to the `notify::display` signal.
     */
    getSettings(): Gtk.Settings
    /**
     * Returns the content width or height of the widget.
     * 
     * Which dimension is returned depends on `orientation`.
     * 
     * This is equivalent to calling [method`Gtk`.Widget.get_width]
     * for %GTK_ORIENTATION_HORIZONTAL or [method`Gtk`.Widget.get_height]
     * for %GTK_ORIENTATION_VERTICAL, but can be used when
     * writing orientation-independent code, such as when
     * implementing [iface`Gtk`.Orientable] widgets.
     */
    getSize(orientation: Gtk.Orientation): number
    /**
     * Gets the size request that was explicitly set for the widget using
     * gtk_widget_set_size_request().
     * 
     * A value of -1 stored in `width` or `height` indicates that that
     * dimension has not been set explicitly and the natural requisition
     * of the widget will be used instead. See
     * [method`Gtk`.Widget.set_size_request]. To get the size a widget will
     * actually request, call [method`Gtk`.Widget.measure] instead of
     * this function.
     */
    getSizeRequest(): [ /* width */ number | null, /* height */ number | null ]
    /**
     * Returns the widget state as a flag set.
     * 
     * It is worth mentioning that the effective %GTK_STATE_FLAG_INSENSITIVE
     * state will be returned, that is, also based on parent insensitivity,
     * even if `widget` itself is sensitive.
     * 
     * Also note that if you are looking for a way to obtain the
     * [flags`Gtk`.StateFlags] to pass to a [class`Gtk`.StyleContext]
     * method, you should look at [method`Gtk`.StyleContext.get_state].
     */
    getStateFlags(): Gtk.StateFlags
    /**
     * Returns the style context associated to `widget`.
     * 
     * The returned object is guaranteed to be the same
     * for the lifetime of `widget`.
     */
    getStyleContext(): Gtk.StyleContext
    /**
     * Fetch an object build from the template XML for `widget_type` in
     * this `widget` instance.
     * 
     * This will only report children which were previously declared
     * with [method`Gtk`.WidgetClass.bind_template_child_full] or one of its
     * variants.
     * 
     * This function is only meant to be called for code which is private
     * to the `widget_type` which declared the child and is meant for language
     * bindings which cannot easily make use of the GObject structure offsets.
     */
    getTemplateChild(widgetType: GObject.Type, name: string): GObject.Object
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the tooltip has not been set using
     * [method`Gtk`.Widget.set_tooltip_markup], this
     * function returns %NULL.
     */
    getTooltipMarkup(): string | null
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the `widget'`s tooltip was set using
     * [method`Gtk`.Widget.set_tooltip_markup],
     * this function will return the escaped text.
     */
    getTooltipText(): string | null
    /**
     * Gets the vertical alignment of `widget`.
     */
    getValign(): Gtk.Align
    /**
     * Gets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.get_hexpand] for more detail.
     */
    getVexpand(): boolean
    /**
     * Gets whether gtk_widget_set_vexpand() has been used to
     * explicitly set the expand flag on this widget.
     * 
     * See [method`Gtk`.Widget.get_hexpand_set] for more detail.
     */
    getVexpandSet(): boolean
    /**
     * Determines whether the widget is visible.
     * 
     * If you want to take into account whether the widget’s
     * parent is also marked as visible, use
     * [method`Gtk`.Widget.is_visible] instead.
     * 
     * This function does not check if the widget is
     * obscured in any way.
     * 
     * See [method`Gtk`.Widget.set_visible].
     */
    getVisible(): boolean
    /**
     * Returns the content width of the widget.
     * 
     * This function returns the width passed to its
     * size-allocate implementation, which is the width you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getWidth(): number
    /**
     * Causes `widget` to have the keyboard focus for the `GtkWindow` it's inside.
     * 
     * If `widget` is not focusable, or its [vfunc`Gtk`.Widget.grab_focus]
     * implementation cannot transfer the focus to a descendant of `widget`
     * that is focusable, it will not take focus and %FALSE will be returned.
     * 
     * Calling [method`Gtk`.Widget.grab_focus] on an already focused widget
     * is allowed, should not have an effect, and return %TRUE.
     */
    grabFocus(): boolean
    /**
     * Returns whether `css_class` is currently applied to `widget`.
     */
    hasCssClass(cssClass: string): boolean
    /**
     * Determines if the widget should show a visible indication that
     * it has the global input focus.
     * 
     * This is a convenience function that takes into account whether
     * focus indication should currently be shown in the toplevel window
     * of `widget`. See [method`Gtk`.Window.get_focus_visible] for more
     * information about focus indication.
     * 
     * To find out if the widget has the global input focus, use
     * [method`Gtk`.Widget.has_focus].
     */
    hasVisibleFocus(): boolean
    /**
     * Reverses the effects of gtk_widget_show().
     * 
     * This is causing the widget to be hidden (invisible to the user).
     */
    hide(): void
    /**
     * Returns whether the widget is currently being destroyed.
     * 
     * This information can sometimes be used to avoid doing
     * unnecessary work.
     */
    inDestruction(): boolean
    /**
     * Creates and initializes child widgets defined in templates.
     * 
     * This function must be called in the instance initializer
     * for any class which assigned itself a template using
     * [method`Gtk`.WidgetClass.set_template].
     * 
     * It is important to call this function in the instance initializer
     * of a `GtkWidget` subclass and not in `GObject.constructed()` or
     * `GObject.constructor()` for two reasons:
     * 
     *  - derived widgets will assume that the composite widgets
     *    defined by its parent classes have been created in their
     *    relative instance initializers
     *  - when calling `g_object_new()` on a widget with composite templates,
     *    it’s important to build the composite widgets before the construct
     *    properties are set. Properties passed to `g_object_new()` should
     *    take precedence over properties set in the private template XML
     * 
     * A good rule of thumb is to call this function as the first thing in
     * an instance initialization function.
     */
    initTemplate(): void
    /**
     * Inserts `group` into `widget`.
     * 
     * Children of `widget` that implement [iface`Gtk`.Actionable] can
     * then be associated with actions in `group` by setting their
     * “action-name” to `prefix`.`action-name`.
     * 
     * Note that inheritance is defined for individual actions. I.e.
     * even if you insert a group with prefix `prefix,` actions with
     * the same prefix will still be inherited from the parent, unless
     * the group contains an action with the same name.
     * 
     * If `group` is %NULL, a previously inserted group for `name` is
     * removed from `widget`.
     */
    insertActionGroup(name: string, group?: Gio.ActionGroup | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed after `previous_sibling,` or at the beginning if
     * `previous_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_prev_sibling(widget)`
     * will return `previous_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this
     * function can also be used to reorder `widget` in the child widget
     * list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertAfter(parent: Gtk.Widget, previousSibling?: Gtk.Widget | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed before `next_sibling,` or at the end if
     * `next_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_next_sibling(widget)`
     * will return `next_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this function
     * can also be used to reorder `widget` in the child widget list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertBefore(parent: Gtk.Widget, nextSibling?: Gtk.Widget | null): void
    /**
     * Determines whether `widget` is somewhere inside `ancestor,`
     * possibly with intermediate containers.
     */
    isAncestor(ancestor: Gtk.Widget): boolean
    /**
     * Determines whether `widget` can be drawn to.
     * 
     * A widget can be drawn if it is mapped and visible.
     */
    isDrawable(): boolean
    /**
     * Determines if the widget is the focus widget within its
     * toplevel.
     * 
     * This does not mean that the [property`Gtk`.Widget:has-focus]
     * property is necessarily set; [property`Gtk`.Widget:has-focus]
     * will only be set if the toplevel widget additionally has the
     * global input focus.
     */
    isFocus(): boolean
    /**
     * Returns the widget’s effective sensitivity.
     * 
     * This means it is sensitive itself and also its
     * parent widget is sensitive.
     */
    isSensitive(): boolean
    /**
     * Determines whether the widget and all its parents are marked as
     * visible.
     * 
     * This function does not check if the widget is obscured in any way.
     * 
     * See also [method`Gtk`.Widget.get_visible] and
     * [method`Gtk`.Widget.set_visible].
     */
    isVisible(): boolean
    /**
     * Emits the `::keynav-failed` signal on the widget.
     * 
     * This function should be called whenever keyboard navigation
     * within a single widget hits a boundary.
     * 
     * The return value of this function should be interpreted
     * in a way similar to the return value of
     * [method`Gtk`.Widget.child_focus]. When %TRUE is returned,
     * stay in the widget, the failed keyboard  navigation is OK
     * and/or there is nowhere we can/should move the focus to.
     * When %FALSE is returned, the caller should continue with
     * keyboard navigation outside the widget, e.g. by calling
     * [method`Gtk`.Widget.child_focus] on the widget’s toplevel.
     * 
     * The default [signal`Gtk`.Widget::keynav-failed] handler returns
     * %FALSE for %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD.
     * For the other values of `GtkDirectionType` it returns %TRUE.
     * 
     * Whenever the default handler returns %TRUE, it also calls
     * [method`Gtk`.Widget.error_bell] to notify the user of the
     * failed keyboard navigation.
     * 
     * A use case for providing an own implementation of ::keynav-failed
     * (either by connecting to it or by overriding it) would be a row of
     * [class`Gtk`.Entry] widgets where the user should be able to navigate
     * the entire row with the cursor keys, as e.g. known from user
     * interfaces that require entering license keys.
     */
    keynavFailed(direction: Gtk.DirectionType): boolean
    /**
     * Returns the widgets for which this widget is the target of a
     * mnemonic.
     * 
     * Typically, these widgets will be labels. See, for example,
     * [method`Gtk`.Label.set_mnemonic_widget].
     * 
     * The widgets in the list are not individually referenced.
     * If you want to iterate through the list and perform actions
     * involving callbacks that might destroy the widgets, you
     * must call `g_list_foreach (result, (GFunc)g_object_ref, NULL)`
     * first, and then unref all the widgets afterwards.
     */
    listMnemonicLabels(): Gtk.Widget[]
    /**
     * Causes a widget to be mapped if it isn’t already.
     * 
     * This function is only for use in widget implementations.
     */
    map(): void
    /**
     * Measures `widget` in the orientation `orientation` and for the given `for_size`.
     * 
     * As an example, if `orientation` is %GTK_ORIENTATION_HORIZONTAL and `for_size`
     * is 300, this functions will compute the minimum and natural width of `widget`
     * if it is allocated at a height of 300 pixels.
     * 
     * See [GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management) for
     * a more details on implementing `GtkWidgetClass.measure()`.
     */
    measure(orientation: Gtk.Orientation, forSize: number): [ /* minimum */ number | null, /* natural */ number | null, /* minimumBaseline */ number | null, /* naturalBaseline */ number | null ]
    /**
     * Emits the ::mnemonic-activate signal.
     * 
     * See [signal`Gtk`.Widget::mnemonic-activate].
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Returns a `GListModel` to track the children of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track children and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeChildren(): Gio.ListModel
    /**
     * Returns a `GListModel` to track the [class`Gtk`.EventController]s
     * of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track controllers and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeControllers(): Gio.ListModel
    /**
     * Finds the descendant of `widget` closest to the point (`x,` `y)`.
     * 
     * The point must be given in widget coordinates, so (0, 0) is assumed
     * to be the top left of `widget'`s content area.
     * 
     * Usually widgets will return %NULL if the given coordinate is not
     * contained in `widget` checked via [method`Gtk`.Widget.contains].
     * Otherwise they will recursively try to find a child that does
     * not return %NULL. Widgets are however free to customize their
     * picking algorithm.
     * 
     * This function is used on the toplevel to determine the widget
     * below the mouse cursor for purposes of hover highlighting and
     * delivering events.
     */
    pick(x: number, y: number, flags: Gtk.PickFlags): Gtk.Widget | null
    /**
     * Flags the widget for a rerun of the [vfunc`Gtk`.Widget.size_allocate]
     * function.
     * 
     * Use this function instead of [method`Gtk`.Widget.queue_resize]
     * when the `widget'`s size request didn't change but it wants to
     * reposition its contents.
     * 
     * An example user of this function is [method`Gtk`.Widget.set_halign].
     * 
     * This function is only for use in widget implementations.
     */
    queueAllocate(): void
    /**
     * Schedules this widget to be redrawn in the paint phase
     * of the current or the next frame.
     * 
     * This means `widget'`s [vfunc`Gtk`.Widget.snapshot]
     * implementation will be called.
     */
    queueDraw(): void
    /**
     * Flags a widget to have its size renegotiated.
     * 
     * This should be called when a widget for some reason has a new
     * size request. For example, when you change the text in a
     * [class`Gtk`.Label], the label queues a resize to ensure there’s
     * enough space for the new text.
     * 
     * Note that you cannot call gtk_widget_queue_resize() on a widget
     * from inside its implementation of the [vfunc`Gtk`.Widget.size_allocate]
     * virtual method. Calls to gtk_widget_queue_resize() from inside
     * [vfunc`Gtk`.Widget.size_allocate] will be silently ignored.
     * 
     * This function is only for use in widget implementations.
     */
    queueResize(): void
    /**
     * Creates the GDK resources associated with a widget.
     * 
     * Normally realization happens implicitly; if you show a widget
     * and all its parent containers, then the widget will be realized
     * and mapped automatically.
     * 
     * Realizing a widget requires all the widget’s parent widgets to be
     * realized; calling this function realizes the widget’s parents
     * in addition to `widget` itself. If a widget is not yet inside a
     * toplevel window when you realize it, bad things will happen.
     * 
     * This function is primarily used in widget implementations, and
     * isn’t very useful otherwise. Many times when you think you might
     * need it, a better approach is to connect to a signal that will be
     * called after the widget is realized automatically, such as
     * [signal`Gtk`.Widget::realize].
     */
    realize(): void
    /**
     * Removes `controller` from `widget,` so that it doesn't process
     * events anymore.
     * 
     * It should not be used again.
     * 
     * Widgets will remove all event controllers automatically when they
     * are destroyed, there is normally no need to call this function.
     */
    removeController(controller: Gtk.EventController): void
    /**
     * Removes a style from `widget`.
     * 
     * After this, the style of `widget` will stop matching for `css_class`.
     */
    removeCssClass(cssClass: string): void
    /**
     * Removes a widget from the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. The widget must
     * have previously been added to the list with
     * [method`Gtk`.Widget.add_mnemonic_label].
     */
    removeMnemonicLabel(label: Gtk.Widget): void
    /**
     * Removes a tick callback previously registered with
     * gtk_widget_add_tick_callback().
     */
    removeTickCallback(id: number): void
    /**
     * Specifies whether the input focus can enter the widget
     * or any of its children.
     * 
     * Applications should set `can_focus` to %FALSE to mark a
     * widget as for pointer/touch use only.
     * 
     * Note that having `can_focus` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and focusable and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setCanFocus(canFocus: boolean): void
    /**
     * Sets whether `widget` can be the target of pointer events.
     */
    setCanTarget(canTarget: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its parent.
     * 
     * The child visibility can be set for widget before it is added
     * to a container with [method`Gtk`.Widget.set_parent], to avoid
     * mapping children unnecessary before immediately unmapping them.
     * However it will be reset to its default state of %TRUE when the
     * widget is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    setChildVisible(childVisible: boolean): void
    /**
     * Clear all style classes applied to `widget`
     * and replace them with `classes`.
     */
    setCssClasses(classes: string[]): void
    /**
     * Sets the cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * If the `cursor` is NULL, `widget` will use the cursor
     * inherited from the parent widget.
     */
    setCursor(cursor?: Gdk.Cursor | null): void
    /**
     * Sets a named cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * This is a utility function that creates a cursor via
     * [ctor`Gdk`.Cursor.new_from_name] and then sets it on `widget`
     * with [method`Gtk`.Widget.set_cursor]. See those functions for
     * details.
     * 
     * On top of that, this function allows `name` to be %NULL, which
     * will do the same as calling [method`Gtk`.Widget.set_cursor]
     * with a %NULL cursor.
     */
    setCursorFromName(name?: string | null): void
    /**
     * Sets the reading direction on a particular widget.
     * 
     * This direction controls the primary direction for widgets
     * containing text, and also the direction in which the children
     * of a container are packed. The ability to set the direction is
     * present in order so that correct localization into languages with
     * right-to-left reading directions can be done. Generally, applications
     * will let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitly
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by [func`Gtk`.Widget.set_default_direction] will be used.
     */
    setDirection(dir: Gtk.TextDirection): void
    /**
     * Set `child` as the current focus child of `widget`.
     * 
     * This function is only suitable for widget implementations.
     * If you want a certain widget to get the input focus, call
     * [method`Gtk`.Widget.grab_focus] on it.
     */
    setFocusChild(child?: Gtk.Widget | null): void
    /**
     * Sets whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * Making mouse clicks not grab focus is useful in places like
     * toolbars where you don’t want the keyboard focus removed from
     * the main area of the application.
     */
    setFocusOnClick(focusOnClick: boolean): void
    /**
     * Specifies whether `widget` can own the input focus.
     * 
     * Widget implementations should set `focusable` to %TRUE in
     * their init() function if they want to receive keyboard input.
     * 
     * Note that having `focusable` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and can-focus and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setFocusable(focusable: boolean): void
    /**
     * Sets the font map to use for Pango rendering.
     * 
     * The font map is the object that is used to look up fonts.
     * Setting a custom font map can be useful in special situations,
     * e.g. when you need to add application-specific fonts to the set
     * of available fonts.
     * 
     * When not set, the widget will inherit the font map from its parent.
     */
    setFontMap(fontMap?: Pango.FontMap | null): void
    /**
     * Sets the `cairo_font_options_t` used for Pango rendering
     * in this widget.
     * 
     * When not set, the default font options for the `GdkDisplay`
     * will be used.
     */
    setFontOptions(options?: cairo.FontOptions | null): void
    /**
     * Sets the horizontal alignment of `widget`.
     */
    setHalign(align: Gtk.Align): void
    /**
     * Sets the `has-tooltip` property on `widget` to `has_tooltip`.
     */
    setHasTooltip(hasTooltip: boolean): void
    /**
     * Sets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Call this function to set the expand flag if you would like your
     * widget to become larger horizontally when the window has extra
     * room.
     * 
     * By default, widgets automatically expand if any of their children
     * want to expand. (To see if a widget will automatically expand given
     * its current children and state, call [method`Gtk`.Widget.compute_expand].
     * A container can decide how the expandability of children affects the
     * expansion of the container by overriding the compute_expand virtual
     * method on `GtkWidget`.).
     * 
     * Setting hexpand explicitly with this function will override the
     * automatic expand behavior.
     * 
     * This function forces the widget to expand or not to expand,
     * regardless of children.  The override occurs because
     * [method`Gtk`.Widget.set_hexpand] sets the hexpand-set property (see
     * [method`Gtk`.Widget.set_hexpand_set]) which causes the widget’s hexpand
     * value to be used, rather than looking at children and widget state.
     */
    setHexpand(expand: boolean): void
    /**
     * Sets whether the hexpand flag will be used.
     * 
     * The [property`Gtk`.Widget:hexpand-set] property will be set
     * automatically when you call [method`Gtk`.Widget.set_hexpand]
     * to set hexpand, so the most likely reason to use this function
     * would be to unset an explicit expand flag.
     * 
     * If hexpand is set, then it overrides any computed
     * expand value based on child widgets. If hexpand is not
     * set, then the expand value depends on whether any
     * children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    setHexpandSet(set: boolean): void
    /**
     * Sets the layout manager delegate instance that provides an
     * implementation for measuring and allocating the children of `widget`.
     */
    setLayoutManager(layoutManager?: Gtk.LayoutManager | null): void
    /**
     * Sets the bottom margin of `widget`.
     */
    setMarginBottom(margin: number): void
    /**
     * Sets the end margin of `widget`.
     */
    setMarginEnd(margin: number): void
    /**
     * Sets the start margin of `widget`.
     */
    setMarginStart(margin: number): void
    /**
     * Sets the top margin of `widget`.
     */
    setMarginTop(margin: number): void
    /**
     * Sets a widgets name.
     * 
     * Setting a name allows you to refer to the widget from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for [class`Gtk`.StyleContext].
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     */
    setName(name: string): void
    /**
     * Request the `widget` to be rendered partially transparent.
     * 
     * An opacity of 0 is fully transparent and an opacity of 1
     * is fully opaque.
     * 
     * Opacity works on both toplevel widgets and child widgets, although
     * there are some limitations: For toplevel widgets, applying opacity
     * depends on the capabilities of the windowing system. On X11, this
     * has any effect only on X displays with a compositing manager,
     * see gdk_display_is_composited(). On Windows and Wayland it should
     * always work, although setting a window’s opacity after the window
     * has been shown may cause some flicker.
     * 
     * Note that the opacity is inherited through inclusion — if you set
     * a toplevel to be partially translucent, all of its content will
     * appear translucent, since it is ultimatively rendered on that
     * toplevel. The opacity value itself is not inherited by child
     * widgets (since that would make widgets deeper in the hierarchy
     * progressively more translucent). As a consequence, [class`Gtk`.Popover]s
     * and other [iface`Gtk`.Native] widgets with their own surface will use their
     * own opacity value, and thus by default appear non-translucent,
     * even if they are attached to a toplevel that is translucent.
     */
    setOpacity(opacity: number): void
    /**
     * Sets how `widget` treats content that is drawn outside the
     * widget's content area.
     * 
     * See the definition of [enum`Gtk`.Overflow] for details.
     * 
     * This setting is provided for widget implementations and
     * should not be used by application code.
     * 
     * The default value is %GTK_OVERFLOW_VISIBLE.
     */
    setOverflow(overflow: Gtk.Overflow): void
    /**
     * Sets `parent` as the parent widget of `widget`.
     * 
     * This takes care of details such as updating the state and style
     * of the child to reflect its new location and resizing the parent.
     * The opposite function is [method`Gtk`.Widget.unparent].
     * 
     * This function is useful only when implementing subclasses of
     * `GtkWidget`.
     */
    setParent(parent: Gtk.Widget): void
    /**
     * Specifies whether `widget` will be treated as the default
     * widget within its toplevel when it has the focus, even if
     * another widget is the default.
     */
    setReceivesDefault(receivesDefault: boolean): void
    /**
     * Sets the sensitivity of a widget.
     * 
     * A widget is sensitive if the user can interact with it.
     * Insensitive widgets are “grayed out” and the user can’t
     * interact with them. Insensitive widgets are known as
     * “inactive”, “disabled”, or “ghosted” in some other toolkits.
     */
    setSensitive(sensitive: boolean): void
    /**
     * Sets the minimum size of a widget.
     * 
     * That is, the widget’s size request will be at least `width`
     * by `height`. You can use this function to force a widget to
     * be larger than it normally would be.
     * 
     * In most cases, [method`Gtk`.Window.set_default_size] is a better
     * choice for toplevel windows than this function; setting the default
     * size will still allow users to shrink the window. Setting the size
     * request will force them to leave the window at least as large as
     * the size request.
     * 
     * Note the inherent danger of setting any fixed size - themes,
     * translations into other languages, different fonts, and user action
     * can all change the appropriate size for a given widget. So, it's
     * basically impossible to hardcode a size that will always be
     * correct.
     * 
     * The size request of a widget is the smallest size a widget can
     * accept while still functioning well and drawing itself correctly.
     * However in some strange cases a widget may be allocated less than
     * its requested size, and in many cases a widget may be allocated more
     * space than it requested.
     * 
     * If the size request in a given direction is -1 (unset), then
     * the “natural” size request of the widget will be used instead.
     * 
     * The size request set here does not include any margin from the
     * properties
     * [property`Gtk`.Widget:margin-start],
     * [property`Gtk`.Widget:margin-end],
     * [property`Gtk`.Widget:margin-top], and
     * [property`Gtk`.Widget:margin-bottom], but it does include pretty
     * much all other padding or border properties set by any subclass
     * of `GtkWidget`.
     */
    setSizeRequest(width: number, height: number): void
    /**
     * Turns on flag values in the current widget state.
     * 
     * Typical widget states are insensitive, prelighted, etc.
     * 
     * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
     * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set
     * the widget's direction, use [method`Gtk`.Widget.set_direction].
     * 
     * This function is for use in widget implementations.
     */
    setStateFlags(flags: Gtk.StateFlags, clear: boolean): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked
     * up with Pango markup.
     * 
     * This function will take care of setting the
     * [property`Gtk`.Widget:has-tooltip] as a side effect, and of the
     * default handler for the [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_markup].
     */
    setTooltipMarkup(markup?: string | null): void
    /**
     * Sets `text` as the contents of the tooltip.
     * 
     * If `text` contains any markup, it will be escaped.
     * 
     * This function will take care of setting
     * [property`Gtk`.Widget:has-tooltip] as a side effect,
     * and of the default handler for the
     * [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_text].
     */
    setTooltipText(text?: string | null): void
    /**
     * Sets the vertical alignment of `widget`.
     */
    setValign(align: Gtk.Align): void
    /**
     * Sets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.set_hexpand] for more detail.
     */
    setVexpand(expand: boolean): void
    /**
     * Sets whether the vexpand flag will be used.
     * 
     * See [method`Gtk`.Widget.set_hexpand_set] for more detail.
     */
    setVexpandSet(set: boolean): void
    /**
     * Sets the visibility state of `widget`.
     * 
     * Note that setting this to %TRUE doesn’t mean the widget is
     * actually viewable, see [method`Gtk`.Widget.get_visible].
     * 
     * This function simply calls [method`Gtk`.Widget.show] or
     * [method`Gtk`.Widget.hide] but is nicer to use when the
     * visibility of the widget depends on some condition.
     */
    setVisible(visible: boolean): void
    /**
     * Returns whether `widget` should contribute to
     * the measuring and allocation of its parent.
     * 
     * This is %FALSE for invisible children, but also
     * for children that have their own surface.
     */
    shouldLayout(): boolean
    /**
     * Flags a widget to be displayed.
     * 
     * Any widget that isn’t shown will not appear on the screen.
     * 
     * Remember that you have to show the containers containing a widget,
     * in addition to the widget itself, before it will appear onscreen.
     * 
     * When a toplevel container is shown, it is immediately realized and
     * mapped; other shown widgets are realized and mapped when their
     * toplevel container is realized and mapped.
     */
    show(): void
    /**
     * Allocates widget with a transformation that translates
     * the origin to the position in `allocation`.
     * 
     * This is a simple form of [method`Gtk`.Widget.allocate].
     */
    sizeAllocate(allocation: Gtk.Allocation, baseline: number): void
    /**
     * Snapshot the a child of `widget`.
     * 
     * When a widget receives a call to the snapshot function,
     * it must send synthetic [vfunc`Gtk`.Widget.snapshot] calls
     * to all children. This function provides a convenient way
     * of doing this. A widget, when it receives a call to its
     * [vfunc`Gtk`.Widget.snapshot] function, calls
     * gtk_widget_snapshot_child() once for each child, passing in
     * the `snapshot` the widget received.
     * 
     * gtk_widget_snapshot_child() takes care of translating the origin of
     * `snapshot,` and deciding whether the child needs to be snapshot.
     * 
     * This function does nothing for children that implement `GtkNative`.
     */
    snapshotChild(child: Gtk.Widget, snapshot: Gtk.Snapshot): void
    /**
     * Translate coordinates relative to `src_widget’`s allocation
     * to coordinates relative to `dest_widget’`s allocations.
     * 
     * In order to perform this operation, both widget must share
     * a common ancestor.
     */
    translateCoordinates(destWidget: Gtk.Widget, srcX: number, srcY: number): [ /* returnType */ boolean, /* destX */ number | null, /* destY */ number | null ]
    /**
     * Triggers a tooltip query on the display where the toplevel
     * of `widget` is located.
     */
    triggerTooltipQuery(): void
    /**
     * Causes a widget to be unmapped if it’s currently mapped.
     * 
     * This function is only for use in widget implementations.
     */
    unmap(): void
    /**
     * Dissociate `widget` from its parent.
     * 
     * This function is only for use in widget implementations,
     * typically in dispose.
     */
    unparent(): void
    /**
     * Causes a widget to be unrealized (frees all GDK resources
     * associated with the widget).
     * 
     * This function is only useful in widget implementations.
     */
    unrealize(): void
    /**
     * Turns off flag values for the current widget state.
     * 
     * See [method`Gtk`.Widget.set_state_flags].
     * 
     * This function is for use in widget implementations.
     */
    unsetStateFlags(flags: Gtk.StateFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Methods of Gtk-4.0.Gtk.Accessible */
    /**
     * Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
     */
    getAccessibleRole(): Gtk.AccessibleRole
    /**
     * Resets the accessible `property` to its default value.
     */
    resetProperty(property: Gtk.AccessibleProperty): void
    /**
     * Resets the accessible `relation` to its default value.
     */
    resetRelation(relation: Gtk.AccessibleRelation): void
    /**
     * Resets the accessible `state` to its default value.
     */
    resetState(state: Gtk.AccessibleState): void
    /**
     * Updates an array of accessible properties.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * property change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateProperty(properties: Gtk.AccessibleProperty[], values: any[]): void
    /**
     * Updates an array of accessible relations.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * relation change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateRelation(relations: Gtk.AccessibleRelation[], values: any[]): void
    /**
     * Updates an array of accessible states.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * state change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateState(states: Gtk.AccessibleState[], values: any[]): void
    /* Methods of Gtk-4.0.Gtk.Actionable */
    /**
     * Gets the action name for `actionable`.
     */
    getActionName(): string | null
    /**
     * Gets the current target value of `actionable`.
     */
    getActionTargetValue(): GLib.Variant | null
    /**
     * Specifies the name of the action with which this widget should be
     * associated.
     * 
     * If `action_name` is %NULL then the widget will be unassociated from
     * any previous action.
     * 
     * Usually this function is used when the widget is located (or will be
     * located) within the hierarchy of a `GtkApplicationWindow`.
     * 
     * Names are of the form “win.save” or “app.quit” for actions on the
     * containing [class`ApplicationWindow]` or its associated [class`Application]`,
     * respectively. This is the same form used for actions in the [class`Gio`.Menu]
     * associated with the window.
     */
    setActionName(actionName?: string | null): void
    /**
     * Sets the target value of an actionable widget.
     * 
     * If `target_value` is %NULL then the target value is unset.
     * 
     * The target value has two purposes. First, it is used as the parameter
     * to activation of the action associated with the `GtkActionable` widget.
     * Second, it is used to determine if the widget should be rendered as
     * “active” — the widget is active if the state is equal to the given target.
     * 
     * Consider the example of associating a set of buttons with a [iface`Gio`.Action]
     * with string state in a typical “radio button” situation. Each button
     * will be associated with the same action, but with a different target
     * value for that action. Clicking on a particular button will activate
     * the action with the target of that button, which will typically cause
     * the action’s state to change to that value. Since the action’s state
     * is now equal to the target value of the button, the button will now
     * be rendered as active (and the other buttons, with different targets,
     * rendered inactive).
     */
    setActionTargetValue(targetValue?: GLib.Variant | null): void
    /**
     * Sets the action-name and associated string target value of an
     * actionable widget.
     * 
     * `detailed_action_name` is a string in the format accepted by
     * [func`Gio`.Action.parse_detailed_name].
     */
    setDetailedActionName(detailedActionName: string): void
    /* Methods of Gtk-4.0.Gtk.Buildable */
    /**
     * Gets the ID of the `buildable` object.
     * 
     * `GtkBuilder` sets the name based on the ID attribute
     * of the <object> tag used to construct the `buildable`.
     */
    getBuildableId(): string | null
    /* Methods of GtkSource-5.GtkSource.StyleSchemeChooser */
    /**
     * Gets the currently-selected scheme.
     */
    getStyleScheme(): StyleScheme
    /**
     * Sets the scheme.
     */
    setStyleScheme(scheme: StyleScheme): void
    /* Signals of Gtk-4.0.Gtk.Button */
    /**
     * Emitted to animate press then release.
     * 
     * This is an action signal. Applications should never connect
     * to this signal, but use the [signal`Gtk`.Button::clicked] signal.
     */
    connect(sigName: "activate", callback: (() => void)): number
    on(sigName: "activate", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "activate", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "activate", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "activate"): void
    /**
     * Emitted when the button has been activated (pressed and released).
     */
    connect(sigName: "clicked", callback: (() => void)): number
    on(sigName: "clicked", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "clicked", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "clicked", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "clicked"): void
    /* Signals of Gtk-4.0.Gtk.Widget */
    /**
     * Signals that all holders of a reference to the widget should release
     * the reference that they hold.
     * 
     * May result in finalization of the widget if all references are released.
     * 
     * This signal is not suitable for saving widget state.
     */
    connect(sigName: "destroy", callback: (() => void)): number
    on(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "destroy", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "destroy"): void
    /**
     * Emitted when the text direction of a widget changes.
     */
    connect(sigName: "direction-changed", callback: ((previousDirection: Gtk.TextDirection) => void)): number
    on(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void): NodeJS.EventEmitter
    emit(sigName: "direction-changed", previousDirection: Gtk.TextDirection): void
    /**
     * Emitted when `widget` is hidden.
     */
    connect(sigName: "hide", callback: (() => void)): number
    on(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "hide", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "hide"): void
    /**
     * Emitted if keyboard navigation fails.
     * 
     * See [method`Gtk`.Widget.keynav_failed] for details.
     */
    connect(sigName: "keynav-failed", callback: ((direction: Gtk.DirectionType) => boolean)): number
    on(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "keynav-failed", direction: Gtk.DirectionType): void
    /**
     * Emitted when `widget` is going to be mapped.
     * 
     * A widget is mapped when the widget is visible (which is controlled with
     * [property`Gtk`.Widget:visible]) and all its parents up to the toplevel widget
     * are also visible.
     * 
     * The ::map signal can be used to determine whether a widget will be drawn,
     * for instance it can resume an animation that was stopped during the
     * emission of [signal`Gtk`.Widget::unmap].
     */
    connect(sigName: "map", callback: (() => void)): number
    on(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "map", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "map"): void
    /**
     * Emitted when a widget is activated via a mnemonic.
     * 
     * The default handler for this signal activates `widget` if `group_cycling`
     * is %FALSE, or just makes `widget` grab focus if `group_cycling` is %TRUE.
     */
    connect(sigName: "mnemonic-activate", callback: ((groupCycling: boolean) => boolean)): number
    on(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "mnemonic-activate", groupCycling: boolean): void
    /**
     * Emitted when the focus is moved.
     */
    connect(sigName: "move-focus", callback: ((direction: Gtk.DirectionType) => void)): number
    on(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "move-focus", direction: Gtk.DirectionType): void
    /**
     * Emitted when the widgets tooltip is about to be shown.
     * 
     * This happens when the [property`Gtk`.Widget:has-tooltip] property
     * is %TRUE and the hover timeout has expired with the cursor hovering
     * "above" `widget;` or emitted when `widget` got focus in keyboard mode.
     * 
     * Using the given coordinates, the signal handler should determine
     * whether a tooltip should be shown for `widget`. If this is the case
     * %TRUE should be returned, %FALSE otherwise.  Note that if
     * `keyboard_mode` is %TRUE, the values of `x` and `y` are undefined and
     * should not be used.
     * 
     * The signal handler is free to manipulate `tooltip` with the therefore
     * destined function calls.
     */
    connect(sigName: "query-tooltip", callback: ((x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => boolean)): number
    on(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void): NodeJS.EventEmitter
    emit(sigName: "query-tooltip", x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip): void
    /**
     * Emitted when `widget` is associated with a `GdkSurface`.
     * 
     * This means that [method`Gtk`.Widget.realize] has been called
     * or the widget has been mapped (that is, it is going to be drawn).
     */
    connect(sigName: "realize", callback: (() => void)): number
    on(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "realize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "realize"): void
    /**
     * Emitted when `widget` is shown.
     */
    connect(sigName: "show", callback: (() => void)): number
    on(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "show"): void
    /**
     * Emitted when the widget state changes.
     * 
     * See [method`Gtk`.Widget.get_state_flags].
     */
    connect(sigName: "state-flags-changed", callback: ((flags: Gtk.StateFlags) => void)): number
    on(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void): NodeJS.EventEmitter
    emit(sigName: "state-flags-changed", flags: Gtk.StateFlags): void
    /**
     * Emitted when `widget` is going to be unmapped.
     * 
     * A widget is unmapped when either it or any of its parents up to the
     * toplevel widget have been set as hidden.
     * 
     * As ::unmap indicates that a widget will not be shown any longer,
     * it can be used to, for example, stop an animation on the widget.
     */
    connect(sigName: "unmap", callback: (() => void)): number
    on(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unmap", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unmap"): void
    /**
     * Emitted when the `GdkSurface` associated with `widget` is destroyed.
     * 
     * This means that [method`Gtk`.Widget.unrealize] has been called
     * or the widget has been unmapped (that is, it is going to be hidden).
     */
    connect(sigName: "unrealize", callback: (() => void)): number
    on(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unrealize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::child", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-frame", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-frame", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-frame", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-frame", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-frame", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::icon-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::icon-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::label", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::label", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::use-underline", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-underline", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::use-underline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::use-underline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::use-underline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::action-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::action-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::action-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::action-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::action-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::action-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::action-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::action-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::action-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::action-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style-scheme", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style-scheme", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style-scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style-scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style-scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: StyleSchemeChooserButton_ConstructProps)
    _init (config?: StyleSchemeChooserButton_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): StyleSchemeChooserButton
    static $gtype: GObject.Type
}
interface StyleSchemeChooserWidget_ConstructProps extends Gtk.Widget_ConstructProps {
    /* Constructor properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole?: Gtk.AccessibleRole
    /* Constructor properties of GtkSource-5.GtkSource.StyleSchemeChooser */
    /**
     * Contains the currently selected style scheme.
     * 
     * The property can be set to change the current selection programmatically.
     */
    styleScheme?: StyleScheme
}
class StyleSchemeChooserWidget {
    /* Properties of Gtk-4.0.Gtk.Widget */
    /**
     * Whether the widget or any of its descendents can accept
     * the input focus.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    canFocus: boolean
    /**
     * Whether the widget can receive pointer events.
     */
    canTarget: boolean
    /**
     * A list of css classes applied to this widget.
     */
    cssClasses: string[]
    /**
     * The cursor used by `widget`.
     */
    cursor: Gdk.Cursor
    /**
     * Whether the widget should grab focus when it is clicked with the mouse.
     * 
     * This property is only relevant for widgets that can take focus.
     */
    focusOnClick: boolean
    /**
     * Whether this widget itself will accept the input focus.
     */
    focusable: boolean
    /**
     * How to distribute horizontal space if widget gets extra space.
     */
    halign: Gtk.Align
    /**
     * Whether the widget is the default widget.
     */
    readonly hasDefault: boolean
    /**
     * Whether the widget has the input focus.
     */
    readonly hasFocus: boolean
    /**
     * Enables or disables the emission of the ::query-tooltip signal on `widget`.
     * 
     * A value of %TRUE indicates that `widget` can have a tooltip, in this case
     * the widget will be queried using [signal`Gtk`.Widget::query-tooltip] to
     * determine whether it will provide a tooltip or not.
     */
    hasTooltip: boolean
    /**
     * Override for height request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    heightRequest: number
    /**
     * Whether to expand horizontally.
     */
    hexpand: boolean
    /**
     * Whether to use the `hexpand` property.
     */
    hexpandSet: boolean
    /**
     * The `GtkLayoutManager` instance to use to compute the preferred size
     * of the widget, and allocate its children.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    layoutManager: Gtk.LayoutManager
    /**
     * Margin on bottom side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginBottom: number
    /**
     * Margin on end of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginEnd: number
    /**
     * Margin on start of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginStart: number
    /**
     * Margin on top side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginTop: number
    /**
     * The name of the widget.
     */
    name: string
    /**
     * The requested opacity of the widget.
     */
    opacity: number
    /**
     * How content outside the widget's content area is treated.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    overflow: Gtk.Overflow
    /**
     * The parent widget of this widget.
     */
    readonly parent: Gtk.Widget
    /**
     * Whether the widget will receive the default action when it is focused.
     */
    receivesDefault: boolean
    /**
     * The `GtkRoot` widget of the widget tree containing this widget.
     * 
     * This will be %NULL if the widget is not contained in a root widget.
     */
    readonly root: Gtk.Root
    /**
     * The scale factor of the widget.
     */
    readonly scaleFactor: number
    /**
     * Whether the widget responds to input.
     */
    sensitive: boolean
    /**
     * Sets the text of tooltip to be the given string, which is marked up
     * with Pango markup.
     * 
     * Also see [method`Gtk`.Tooltip.set_markup].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipMarkup: string
    /**
     * Sets the text of tooltip to be the given string.
     * 
     * Also see [method`Gtk`.Tooltip.set_text].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipText: string
    /**
     * How to distribute vertical space if widget gets extra space.
     */
    valign: Gtk.Align
    /**
     * Whether to expand vertically.
     */
    vexpand: boolean
    /**
     * Whether to use the `vexpand` property.
     */
    vexpandSet: boolean
    /**
     * Whether the widget is visible.
     */
    visible: boolean
    /**
     * Override for width request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    widthRequest: number
    /* Properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole: Gtk.AccessibleRole
    /* Properties of GtkSource-5.GtkSource.StyleSchemeChooser */
    /**
     * Contains the currently selected style scheme.
     * 
     * The property can be set to change the current selection programmatically.
     */
    styleScheme: StyleScheme
    /* Fields of Gtk-4.0.Gtk.Widget */
    readonly parentInstance: GObject.InitiallyUnowned
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gtk-4.0.Gtk.Widget */
    /**
     * Enable or disable an action installed with
     * gtk_widget_class_install_action().
     */
    actionSetEnabled(actionName: string, enabled: boolean): void
    /**
     * For widgets that can be “activated” (buttons, menu items, etc.),
     * this function activates them.
     * 
     * The activation will emit the signal set using
     * [method`Gtk`.WidgetClass.set_activate_signal] during class initialization.
     * 
     * Activation is what happens when you press <kbd>Enter</kbd>
     * on a widget during key navigation.
     * 
     * If you wish to handle the activation keybinding yourself, it is
     * recommended to use [method`Gtk`.WidgetClass.add_shortcut] with an action
     * created with [ctor`Gtk`.SignalAction.new].
     * 
     * If `widget` isn't activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Looks up the action in the action groups associated with
     * `widget` and its ancestors, and activates it.
     * 
     * If the action is in an action group added with
     * [method`Gtk`.Widget.insert_action_group], the `name` is expected
     * to be prefixed with the prefix that was used when the group was
     * inserted.
     * 
     * The arguments must match the actions expected parameter type,
     * as returned by `g_action_get_parameter_type()`.
     */
    activateAction(name: string, args?: GLib.Variant | null): boolean
    /**
     * Activates the `default.activate` action from `widget`.
     */
    activateDefault(): void
    /**
     * Adds `controller` to `widget` so that it will receive events.
     * 
     * You will usually want to call this function right after
     * creating any kind of [class`Gtk`.EventController].
     */
    addController(controller: Gtk.EventController): void
    /**
     * Adds a style class to `widget`.
     * 
     * After calling this function, the widgets style will match
     * for `css_class,` according to CSS matching rules.
     * 
     * Use [method`Gtk`.Widget.remove_css_class] to remove the
     * style again.
     */
    addCssClass(cssClass: string): void
    /**
     * Adds a widget to the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. Note the
     * list of mnemonic labels for the widget is cleared when the
     * widget is destroyed, so the caller must make sure to update
     * its internal state at this point as well.
     */
    addMnemonicLabel(label: Gtk.Widget): void
    /**
     * Queues an animation frame update and adds a callback to be called
     * before each frame.
     * 
     * Until the tick callback is removed, it will be called frequently
     * (usually at the frame rate of the output device or as quickly as
     * the application can be repainted, whichever is slower). For this
     * reason, is most suitable for handling graphics that change every
     * frame or every few frames. The tick callback does not automatically
     * imply a relayout or repaint. If you want a repaint or relayout, and
     * aren’t changing widget properties that would trigger that (for example,
     * changing the text of a `GtkLabel`), then you will have to call
     * [method`Gtk`.Widget.queue_resize] or [method`Gtk`.Widget.queue_draw]
     * yourself.
     * 
     * [method`Gdk`.FrameClock.get_frame_time] should generally be used
     * for timing continuous animations and
     * [method`Gdk`.FrameTimings.get_predicted_presentation_time] if you are
     * trying to display isolated frames at particular times.
     * 
     * This is a more convenient alternative to connecting directly to the
     * [signal`Gdk`.FrameClock::update] signal of `GdkFrameClock`, since you
     * don't have to worry about when a `GdkFrameClock` is assigned to a widget.
     */
    addTickCallback(callback: Gtk.TickCallback): number
    /**
     * This function is only used by `GtkWidget` subclasses, to
     * assign a size, position and (optionally) baseline to their
     * child widgets.
     * 
     * In this function, the allocation and baseline may be adjusted.
     * The given allocation will be forced to be bigger than the
     * widget's minimum size, as well as at least 0×0 in size.
     * 
     * For a version that does not take a transform, see
     * [method`Gtk`.Widget.size_allocate].
     */
    allocate(width: number, height: number, baseline: number, transform?: Gsk.Transform | null): void
    /**
     * Called by widgets as the user moves around the window using
     * keyboard shortcuts.
     * 
     * The `direction` argument indicates what kind of motion is taking place (up,
     * down, left, right, tab forward, tab backward).
     * 
     * This function calls the [vfunc`Gtk`.Widget.focus] virtual function; widgets
     * can override the virtual function in order to implement appropriate focus
     * behavior.
     * 
     * The default `focus()` virtual function for a widget should return `TRUE` if
     * moving in `direction` left the focus on a focusable location inside that
     * widget, and `FALSE` if moving in `direction` moved the focus outside the
     * widget. When returning `TRUE`, widgets normallycall [method`Gtk`.Widget.grab_focus]
     * to place the focus accordingly; when returning `FALSE`, they don’t modify
     * the current focus location.
     * 
     * This function is used by custom widget implementations; if you're
     * writing an app, you’d use [method`Gtk`.Widget.grab_focus] to move
     * the focus to a particular widget.
     */
    childFocus(direction: Gtk.DirectionType): boolean
    /**
     * Computes the bounds for `widget` in the coordinate space of `target`.
     * 
     * FIXME: Explain what "bounds" are.
     * 
     * If the operation is successful, %TRUE is returned. If `widget` has no
     * bounds or the bounds cannot be expressed in `target'`s coordinate space
     * (for example if both widgets are in different windows), %FALSE is
     * returned and `bounds` is set to the zero rectangle.
     * 
     * It is valid for `widget` and `target` to be the same widget.
     */
    computeBounds(target: Gtk.Widget): [ /* returnType */ boolean, /* outBounds */ Graphene.Rect ]
    /**
     * Computes whether a container should give this widget
     * extra space when possible.
     * 
     * Containers should check this, rather than looking at
     * [method`Gtk`.Widget.get_hexpand] or [method`Gtk`.Widget.get_vexpand].
     * 
     * This function already checks whether the widget is visible, so
     * visibility does not need to be checked separately. Non-visible
     * widgets are not expanded.
     * 
     * The computed expand value uses either the expand setting explicitly
     * set on the widget itself, or, if none has been explicitly set,
     * the widget may expand if some of its children do.
     */
    computeExpand(orientation: Gtk.Orientation): boolean
    /**
     * Translates the given `point` in `widget'`s coordinates to coordinates
     * relative to `target’`s coordinate system.
     * 
     * In order to perform this operation, both widgets must share a
     * common ancestor.
     */
    computePoint(target: Gtk.Widget, point: Graphene.Point): [ /* returnType */ boolean, /* outPoint */ Graphene.Point ]
    /**
     * Computes a matrix suitable to describe a transformation from
     * `widget'`s coordinate system into `target'`s coordinate system.
     * 
     * The transform can not be computed in certain cases, for example
     * when `widget` and `target` do not share a common ancestor. In that
     * case `out_transform` gets set to the identity matrix.
     */
    computeTransform(target: Gtk.Widget): [ /* returnType */ boolean, /* outTransform */ Graphene.Matrix ]
    /**
     * Tests if the point at (`x,` `y)` is contained in `widget`.
     * 
     * The coordinates for (`x,` `y)` must be in widget coordinates, so
     * (0, 0) is assumed to be the top left of `widget'`s content area.
     */
    contains(x: number, y: number): boolean
    /**
     * Creates a new `PangoContext` with the appropriate font map,
     * font options, font description, and base direction for drawing
     * text for this widget.
     * 
     * See also [method`Gtk`.Widget.get_pango_context].
     */
    createPangoContext(): Pango.Context
    /**
     * Creates a new `PangoLayout` with the appropriate font map,
     * font description, and base direction for drawing text for
     * this widget.
     * 
     * If you keep a `PangoLayout` created in this way around,
     * you need to re-create it when the widget `PangoContext`
     * is replaced. This can be tracked by listening to changes
     * of the [property`Gtk`.Widget:root] property on the widget.
     */
    createPangoLayout(text?: string | null): Pango.Layout
    /**
     * Checks to see if a drag movement has passed the GTK drag threshold.
     */
    dragCheckThreshold(startX: number, startY: number, currentX: number, currentY: number): boolean
    /**
     * Notifies the user about an input-related error on this widget.
     * 
     * If the [property`Gtk`.Settings:gtk-error-bell] setting is %TRUE,
     * it calls [method`Gdk`.Surface.beep], otherwise it does nothing.
     * 
     * Note that the effect of [method`Gdk`.Surface.beep] can be configured
     * in many ways, depending on the windowing backend and the desktop
     * environment or window manager that is used.
     */
    errorBell(): void
    /**
     * Returns the baseline that has currently been allocated to `widget`.
     * 
     * This function is intended to be used when implementing handlers
     * for the `GtkWidget`Class.snapshot() function, and when allocating
     * child widgets in `GtkWidget`Class.size_allocate().
     */
    getAllocatedBaseline(): number
    /**
     * Returns the height that has currently been allocated to `widget`.
     */
    getAllocatedHeight(): number
    /**
     * Returns the width that has currently been allocated to `widget`.
     */
    getAllocatedWidth(): number
    /**
     * Retrieves the widget’s allocation.
     * 
     * Note, when implementing a layout container: a widget’s allocation
     * will be its “adjusted” allocation, that is, the widget’s parent
     * typically calls [method`Gtk`.Widget.size_allocate] with an allocation,
     * and that allocation is then adjusted (to handle margin
     * and alignment for example) before assignment to the widget.
     * [method`Gtk`.Widget.get_allocation] returns the adjusted allocation that
     * was actually assigned to the widget. The adjusted allocation is
     * guaranteed to be completely contained within the
     * [method`Gtk`.Widget.size_allocate] allocation, however.
     * 
     * So a layout container is guaranteed that its children stay inside
     * the assigned bounds, but not that they have exactly the bounds the
     * container assigned.
     */
    getAllocation(): /* allocation */ Gtk.Allocation
    /**
     * Gets the first ancestor of `widget` with type `widget_type`.
     * 
     * For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)`
     * gets the first `GtkBox` that’s an ancestor of `widget`. No
     * reference will be added to the returned widget; it should
     * not be unreferenced.
     * 
     * Note that unlike [method`Gtk`.Widget.is_ancestor], this function
     * considers `widget` to be an ancestor of itself.
     */
    getAncestor(widgetType: GObject.Type): Gtk.Widget | null
    /**
     * Determines whether the input focus can enter `widget` or any
     * of its children.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getCanFocus(): boolean
    /**
     * Queries whether `widget` can be the target of pointer events.
     */
    getCanTarget(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * 
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    getChildVisible(): boolean
    /**
     * Gets the clipboard object for `widget`.
     * 
     * This is a utility function to get the clipboard object for the
     * `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getClipboard(): Gdk.Clipboard
    /**
     * Returns the list of style classes applied to `widget`.
     */
    getCssClasses(): string[]
    /**
     * Returns the CSS name that is used for `self`.
     */
    getCssName(): string
    /**
     * Queries the cursor set on `widget`.
     * 
     * See [method`Gtk`.Widget.set_cursor] for details.
     */
    getCursor(): Gdk.Cursor | null
    /**
     * Gets the reading direction for a particular widget.
     * 
     * See [method`Gtk`.Widget.set_direction].
     */
    getDirection(): Gtk.TextDirection
    /**
     * Get the `GdkDisplay` for the toplevel window associated with
     * this widget.
     * 
     * This function can only be called after the widget has been
     * added to a widget hierarchy with a `GtkWindow` at the top.
     * 
     * In general, you should only create display specific
     * resources when a widget has been realized, and you should
     * free those resources when the widget is unrealized.
     */
    getDisplay(): Gdk.Display
    /**
     * Returns the widgets first child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getFirstChild(): Gtk.Widget | null
    /**
     * Returns the current focus child of `widget`.
     */
    getFocusChild(): Gtk.Widget | null
    /**
     * Returns whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * See [method`Gtk`.Widget.set_focus_on_click].
     */
    getFocusOnClick(): boolean
    /**
     * Determines whether `widget` can own the input focus.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getFocusable(): boolean
    /**
     * Gets the font map of `widget`.
     * 
     * See [method`Gtk`.Widget.set_font_map].
     */
    getFontMap(): Pango.FontMap | null
    /**
     * Returns the `cairo_font_options_t` of widget.
     * 
     * Seee [method`Gtk`.Widget.set_font_options].
     */
    getFontOptions(): cairo.FontOptions | null
    /**
     * Obtains the frame clock for a widget.
     * 
     * The frame clock is a global “ticker” that can be used to drive
     * animations and repaints. The most common reason to get the frame
     * clock is to call [method`Gdk`.FrameClock.get_frame_time], in order
     * to get a time to use for animating. For example you might record
     * the start of the animation with an initial value from
     * [method`Gdk`.FrameClock.get_frame_time], and then update the animation
     * by calling [method`Gdk`.FrameClock.get_frame_time] again during each repaint.
     * 
     * [method`Gdk`.FrameClock.request_phase] will result in a new frame on the
     * clock, but won’t necessarily repaint any widgets. To repaint a
     * widget, you have to use [method`Gtk`.Widget.queue_draw] which invalidates
     * the widget (thus scheduling it to receive a draw on the next
     * frame). gtk_widget_queue_draw() will also end up requesting a frame
     * on the appropriate frame clock.
     * 
     * A widget’s frame clock will not change while the widget is
     * mapped. Reparenting a widget (which implies a temporary unmap) can
     * change the widget’s frame clock.
     * 
     * Unrealized widgets do not have a frame clock.
     */
    getFrameClock(): Gdk.FrameClock | null
    /**
     * Gets the horizontal alignment of `widget`.
     * 
     * For backwards compatibility reasons this method will never return
     * %GTK_ALIGN_BASELINE, but instead it will convert it to
     * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
     * alignment.
     */
    getHalign(): Gtk.Align
    /**
     * Returns the current value of the `has-tooltip` property.
     */
    getHasTooltip(): boolean
    /**
     * Returns the content height of the widget.
     * 
     * This function returns the height passed to its
     * size-allocate implementation, which is the height you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getHeight(): number
    /**
     * Gets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Containers should use [method`Gtk`.Widget.compute_expand] rather
     * than this function, to see whether a widget, or any of its children,
     * has the expand flag set. If any child of a widget wants to
     * expand, the parent may ask to expand also.
     * 
     * This function only looks at the widget’s own hexpand flag, rather
     * than computing whether the entire widget tree rooted at this widget
     * wants to expand.
     */
    getHexpand(): boolean
    /**
     * Gets whether gtk_widget_set_hexpand() has been used
     * to explicitly set the expand flag on this widget.
     * 
     * If [property`Gtk`.Widget:hexpand] property is set, then it
     * overrides any computed expand value based on child widgets.
     * If `hexpand` is not set, then the expand value depends on
     * whether any children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    getHexpandSet(): boolean
    /**
     * Returns the widgets last child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getLastChild(): Gtk.Widget | null
    /**
     * Retrieves the layout manager used by `widget`.
     * 
     * See [method`Gtk`.Widget.set_layout_manager].
     */
    getLayoutManager(): Gtk.LayoutManager | null
    /**
     * Whether the widget is mapped.
     */
    getMapped(): boolean
    /**
     * Gets the bottom margin of `widget`.
     */
    getMarginBottom(): number
    /**
     * Gets the end margin of `widget`.
     */
    getMarginEnd(): number
    /**
     * Gets the start margin of `widget`.
     */
    getMarginStart(): number
    /**
     * Gets the top margin of `widget`.
     */
    getMarginTop(): number
    /**
     * Retrieves the name of a widget.
     * 
     * See [method`Gtk`.Widget.set_name] for the significance of widget names.
     */
    getName(): string
    /**
     * Returns the nearest `GtkNative` ancestor of `widget`.
     * 
     * This function will return %NULL if the widget is not
     * contained inside a widget tree with a native ancestor.
     * 
     * `GtkNative` widgets will return themselves here.
     */
    getNative(): Gtk.Native | null
    /**
     * Returns the widgets next sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getNextSibling(): Gtk.Widget | null
    /**
     * #Fetches the requested opacity for this widget.
     * 
     * See [method`Gtk`.Widget.set_opacity].
     */
    getOpacity(): number
    /**
     * Returns the widgets overflow value.
     */
    getOverflow(): Gtk.Overflow
    /**
     * Gets a `PangoContext` with the appropriate font map, font description,
     * and base direction for this widget.
     * 
     * Unlike the context returned by [method`Gtk`.Widget.create_pango_context],
     * this context is owned by the widget (it can be used until the screen
     * for the widget changes or the widget is removed from its toplevel),
     * and will be updated to match any changes to the widget’s attributes.
     * This can be tracked by listening to changes of the
     * [property`Gtk`.Widget:root] property on the widget.
     */
    getPangoContext(): Pango.Context
    /**
     * Returns the parent widget of `widget`.
     */
    getParent(): Gtk.Widget | null
    /**
     * Retrieves the minimum and natural size of a widget, taking
     * into account the widget’s preference for height-for-width management.
     * 
     * This is used to retrieve a suitable size by container widgets which do
     * not impose any restrictions on the child placement. It can be used
     * to deduce toplevel window and menu sizes as well as child widgets in
     * free-form containers such as `GtkFixed`.
     * 
     * Handle with care. Note that the natural height of a height-for-width
     * widget will generally be a smaller size than the minimum height, since
     * the required height for the natural width is generally smaller than the
     * required height for the minimum width.
     * 
     * Use [id`gtk_widget_measure]` if you want to support baseline alignment.
     */
    getPreferredSize(): [ /* minimumSize */ Gtk.Requisition | null, /* naturalSize */ Gtk.Requisition | null ]
    /**
     * Returns the widgets previous sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getPrevSibling(): Gtk.Widget | null
    /**
     * Gets the primary clipboard of `widget`.
     * 
     * This is a utility function to get the primary clipboard object
     * for the `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getPrimaryClipboard(): Gdk.Clipboard
    /**
     * Determines whether `widget` is realized.
     */
    getRealized(): boolean
    /**
     * Determines whether `widget` is always treated as the default widget
     * within its toplevel when it has the focus, even if another widget
     * is the default.
     * 
     * See [method`Gtk`.Widget.set_receives_default].
     */
    getReceivesDefault(): boolean
    /**
     * Gets whether the widget prefers a height-for-width layout
     * or a width-for-height layout.
     * 
     * Single-child widgets generally propagate the preference of
     * their child, more complex widgets need to request something
     * either in context of their children or in context of their
     * allocation capabilities.
     */
    getRequestMode(): Gtk.SizeRequestMode
    /**
     * Returns the `GtkRoot` widget of `widget`.
     * 
     * This function will return %NULL if the widget is not contained
     * inside a widget tree with a root widget.
     * 
     * `GtkRoot` widgets will return themselves here.
     */
    getRoot(): Gtk.Root | null
    /**
     * Retrieves the internal scale factor that maps from window
     * coordinates to the actual device pixels.
     * 
     * On traditional systems this is 1, on high density outputs,
     * it can be a higher value (typically 2).
     * 
     * See [method`Gdk`.Surface.get_scale_factor].
     */
    getScaleFactor(): number
    /**
     * Returns the widget’s sensitivity.
     * 
     * This function returns the value that has been set using
     * [method`Gtk`.Widget.set_sensitive]).
     * 
     * The effective sensitivity of a widget is however determined
     * by both its own and its parent widget’s sensitivity.
     * See [method`Gtk`.Widget.is_sensitive].
     */
    getSensitive(): boolean
    /**
     * Gets the settings object holding the settings used for this widget.
     * 
     * Note that this function can only be called when the `GtkWidget`
     * is attached to a toplevel, since the settings object is specific
     * to a particular `GdkDisplay`. If you want to monitor the widget for
     * changes in its settings, connect to the `notify::display` signal.
     */
    getSettings(): Gtk.Settings
    /**
     * Returns the content width or height of the widget.
     * 
     * Which dimension is returned depends on `orientation`.
     * 
     * This is equivalent to calling [method`Gtk`.Widget.get_width]
     * for %GTK_ORIENTATION_HORIZONTAL or [method`Gtk`.Widget.get_height]
     * for %GTK_ORIENTATION_VERTICAL, but can be used when
     * writing orientation-independent code, such as when
     * implementing [iface`Gtk`.Orientable] widgets.
     */
    getSize(orientation: Gtk.Orientation): number
    /**
     * Gets the size request that was explicitly set for the widget using
     * gtk_widget_set_size_request().
     * 
     * A value of -1 stored in `width` or `height` indicates that that
     * dimension has not been set explicitly and the natural requisition
     * of the widget will be used instead. See
     * [method`Gtk`.Widget.set_size_request]. To get the size a widget will
     * actually request, call [method`Gtk`.Widget.measure] instead of
     * this function.
     */
    getSizeRequest(): [ /* width */ number | null, /* height */ number | null ]
    /**
     * Returns the widget state as a flag set.
     * 
     * It is worth mentioning that the effective %GTK_STATE_FLAG_INSENSITIVE
     * state will be returned, that is, also based on parent insensitivity,
     * even if `widget` itself is sensitive.
     * 
     * Also note that if you are looking for a way to obtain the
     * [flags`Gtk`.StateFlags] to pass to a [class`Gtk`.StyleContext]
     * method, you should look at [method`Gtk`.StyleContext.get_state].
     */
    getStateFlags(): Gtk.StateFlags
    /**
     * Returns the style context associated to `widget`.
     * 
     * The returned object is guaranteed to be the same
     * for the lifetime of `widget`.
     */
    getStyleContext(): Gtk.StyleContext
    /**
     * Fetch an object build from the template XML for `widget_type` in
     * this `widget` instance.
     * 
     * This will only report children which were previously declared
     * with [method`Gtk`.WidgetClass.bind_template_child_full] or one of its
     * variants.
     * 
     * This function is only meant to be called for code which is private
     * to the `widget_type` which declared the child and is meant for language
     * bindings which cannot easily make use of the GObject structure offsets.
     */
    getTemplateChild(widgetType: GObject.Type, name: string): GObject.Object
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the tooltip has not been set using
     * [method`Gtk`.Widget.set_tooltip_markup], this
     * function returns %NULL.
     */
    getTooltipMarkup(): string | null
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the `widget'`s tooltip was set using
     * [method`Gtk`.Widget.set_tooltip_markup],
     * this function will return the escaped text.
     */
    getTooltipText(): string | null
    /**
     * Gets the vertical alignment of `widget`.
     */
    getValign(): Gtk.Align
    /**
     * Gets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.get_hexpand] for more detail.
     */
    getVexpand(): boolean
    /**
     * Gets whether gtk_widget_set_vexpand() has been used to
     * explicitly set the expand flag on this widget.
     * 
     * See [method`Gtk`.Widget.get_hexpand_set] for more detail.
     */
    getVexpandSet(): boolean
    /**
     * Determines whether the widget is visible.
     * 
     * If you want to take into account whether the widget’s
     * parent is also marked as visible, use
     * [method`Gtk`.Widget.is_visible] instead.
     * 
     * This function does not check if the widget is
     * obscured in any way.
     * 
     * See [method`Gtk`.Widget.set_visible].
     */
    getVisible(): boolean
    /**
     * Returns the content width of the widget.
     * 
     * This function returns the width passed to its
     * size-allocate implementation, which is the width you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getWidth(): number
    /**
     * Causes `widget` to have the keyboard focus for the `GtkWindow` it's inside.
     * 
     * If `widget` is not focusable, or its [vfunc`Gtk`.Widget.grab_focus]
     * implementation cannot transfer the focus to a descendant of `widget`
     * that is focusable, it will not take focus and %FALSE will be returned.
     * 
     * Calling [method`Gtk`.Widget.grab_focus] on an already focused widget
     * is allowed, should not have an effect, and return %TRUE.
     */
    grabFocus(): boolean
    /**
     * Returns whether `css_class` is currently applied to `widget`.
     */
    hasCssClass(cssClass: string): boolean
    /**
     * Determines if the widget should show a visible indication that
     * it has the global input focus.
     * 
     * This is a convenience function that takes into account whether
     * focus indication should currently be shown in the toplevel window
     * of `widget`. See [method`Gtk`.Window.get_focus_visible] for more
     * information about focus indication.
     * 
     * To find out if the widget has the global input focus, use
     * [method`Gtk`.Widget.has_focus].
     */
    hasVisibleFocus(): boolean
    /**
     * Reverses the effects of gtk_widget_show().
     * 
     * This is causing the widget to be hidden (invisible to the user).
     */
    hide(): void
    /**
     * Returns whether the widget is currently being destroyed.
     * 
     * This information can sometimes be used to avoid doing
     * unnecessary work.
     */
    inDestruction(): boolean
    /**
     * Creates and initializes child widgets defined in templates.
     * 
     * This function must be called in the instance initializer
     * for any class which assigned itself a template using
     * [method`Gtk`.WidgetClass.set_template].
     * 
     * It is important to call this function in the instance initializer
     * of a `GtkWidget` subclass and not in `GObject.constructed()` or
     * `GObject.constructor()` for two reasons:
     * 
     *  - derived widgets will assume that the composite widgets
     *    defined by its parent classes have been created in their
     *    relative instance initializers
     *  - when calling `g_object_new()` on a widget with composite templates,
     *    it’s important to build the composite widgets before the construct
     *    properties are set. Properties passed to `g_object_new()` should
     *    take precedence over properties set in the private template XML
     * 
     * A good rule of thumb is to call this function as the first thing in
     * an instance initialization function.
     */
    initTemplate(): void
    /**
     * Inserts `group` into `widget`.
     * 
     * Children of `widget` that implement [iface`Gtk`.Actionable] can
     * then be associated with actions in `group` by setting their
     * “action-name” to `prefix`.`action-name`.
     * 
     * Note that inheritance is defined for individual actions. I.e.
     * even if you insert a group with prefix `prefix,` actions with
     * the same prefix will still be inherited from the parent, unless
     * the group contains an action with the same name.
     * 
     * If `group` is %NULL, a previously inserted group for `name` is
     * removed from `widget`.
     */
    insertActionGroup(name: string, group?: Gio.ActionGroup | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed after `previous_sibling,` or at the beginning if
     * `previous_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_prev_sibling(widget)`
     * will return `previous_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this
     * function can also be used to reorder `widget` in the child widget
     * list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertAfter(parent: Gtk.Widget, previousSibling?: Gtk.Widget | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed before `next_sibling,` or at the end if
     * `next_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_next_sibling(widget)`
     * will return `next_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this function
     * can also be used to reorder `widget` in the child widget list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertBefore(parent: Gtk.Widget, nextSibling?: Gtk.Widget | null): void
    /**
     * Determines whether `widget` is somewhere inside `ancestor,`
     * possibly with intermediate containers.
     */
    isAncestor(ancestor: Gtk.Widget): boolean
    /**
     * Determines whether `widget` can be drawn to.
     * 
     * A widget can be drawn if it is mapped and visible.
     */
    isDrawable(): boolean
    /**
     * Determines if the widget is the focus widget within its
     * toplevel.
     * 
     * This does not mean that the [property`Gtk`.Widget:has-focus]
     * property is necessarily set; [property`Gtk`.Widget:has-focus]
     * will only be set if the toplevel widget additionally has the
     * global input focus.
     */
    isFocus(): boolean
    /**
     * Returns the widget’s effective sensitivity.
     * 
     * This means it is sensitive itself and also its
     * parent widget is sensitive.
     */
    isSensitive(): boolean
    /**
     * Determines whether the widget and all its parents are marked as
     * visible.
     * 
     * This function does not check if the widget is obscured in any way.
     * 
     * See also [method`Gtk`.Widget.get_visible] and
     * [method`Gtk`.Widget.set_visible].
     */
    isVisible(): boolean
    /**
     * Emits the `::keynav-failed` signal on the widget.
     * 
     * This function should be called whenever keyboard navigation
     * within a single widget hits a boundary.
     * 
     * The return value of this function should be interpreted
     * in a way similar to the return value of
     * [method`Gtk`.Widget.child_focus]. When %TRUE is returned,
     * stay in the widget, the failed keyboard  navigation is OK
     * and/or there is nowhere we can/should move the focus to.
     * When %FALSE is returned, the caller should continue with
     * keyboard navigation outside the widget, e.g. by calling
     * [method`Gtk`.Widget.child_focus] on the widget’s toplevel.
     * 
     * The default [signal`Gtk`.Widget::keynav-failed] handler returns
     * %FALSE for %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD.
     * For the other values of `GtkDirectionType` it returns %TRUE.
     * 
     * Whenever the default handler returns %TRUE, it also calls
     * [method`Gtk`.Widget.error_bell] to notify the user of the
     * failed keyboard navigation.
     * 
     * A use case for providing an own implementation of ::keynav-failed
     * (either by connecting to it or by overriding it) would be a row of
     * [class`Gtk`.Entry] widgets where the user should be able to navigate
     * the entire row with the cursor keys, as e.g. known from user
     * interfaces that require entering license keys.
     */
    keynavFailed(direction: Gtk.DirectionType): boolean
    /**
     * Returns the widgets for which this widget is the target of a
     * mnemonic.
     * 
     * Typically, these widgets will be labels. See, for example,
     * [method`Gtk`.Label.set_mnemonic_widget].
     * 
     * The widgets in the list are not individually referenced.
     * If you want to iterate through the list and perform actions
     * involving callbacks that might destroy the widgets, you
     * must call `g_list_foreach (result, (GFunc)g_object_ref, NULL)`
     * first, and then unref all the widgets afterwards.
     */
    listMnemonicLabels(): Gtk.Widget[]
    /**
     * Causes a widget to be mapped if it isn’t already.
     * 
     * This function is only for use in widget implementations.
     */
    map(): void
    /**
     * Measures `widget` in the orientation `orientation` and for the given `for_size`.
     * 
     * As an example, if `orientation` is %GTK_ORIENTATION_HORIZONTAL and `for_size`
     * is 300, this functions will compute the minimum and natural width of `widget`
     * if it is allocated at a height of 300 pixels.
     * 
     * See [GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management) for
     * a more details on implementing `GtkWidgetClass.measure()`.
     */
    measure(orientation: Gtk.Orientation, forSize: number): [ /* minimum */ number | null, /* natural */ number | null, /* minimumBaseline */ number | null, /* naturalBaseline */ number | null ]
    /**
     * Emits the ::mnemonic-activate signal.
     * 
     * See [signal`Gtk`.Widget::mnemonic-activate].
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Returns a `GListModel` to track the children of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track children and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeChildren(): Gio.ListModel
    /**
     * Returns a `GListModel` to track the [class`Gtk`.EventController]s
     * of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track controllers and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeControllers(): Gio.ListModel
    /**
     * Finds the descendant of `widget` closest to the point (`x,` `y)`.
     * 
     * The point must be given in widget coordinates, so (0, 0) is assumed
     * to be the top left of `widget'`s content area.
     * 
     * Usually widgets will return %NULL if the given coordinate is not
     * contained in `widget` checked via [method`Gtk`.Widget.contains].
     * Otherwise they will recursively try to find a child that does
     * not return %NULL. Widgets are however free to customize their
     * picking algorithm.
     * 
     * This function is used on the toplevel to determine the widget
     * below the mouse cursor for purposes of hover highlighting and
     * delivering events.
     */
    pick(x: number, y: number, flags: Gtk.PickFlags): Gtk.Widget | null
    /**
     * Flags the widget for a rerun of the [vfunc`Gtk`.Widget.size_allocate]
     * function.
     * 
     * Use this function instead of [method`Gtk`.Widget.queue_resize]
     * when the `widget'`s size request didn't change but it wants to
     * reposition its contents.
     * 
     * An example user of this function is [method`Gtk`.Widget.set_halign].
     * 
     * This function is only for use in widget implementations.
     */
    queueAllocate(): void
    /**
     * Schedules this widget to be redrawn in the paint phase
     * of the current or the next frame.
     * 
     * This means `widget'`s [vfunc`Gtk`.Widget.snapshot]
     * implementation will be called.
     */
    queueDraw(): void
    /**
     * Flags a widget to have its size renegotiated.
     * 
     * This should be called when a widget for some reason has a new
     * size request. For example, when you change the text in a
     * [class`Gtk`.Label], the label queues a resize to ensure there’s
     * enough space for the new text.
     * 
     * Note that you cannot call gtk_widget_queue_resize() on a widget
     * from inside its implementation of the [vfunc`Gtk`.Widget.size_allocate]
     * virtual method. Calls to gtk_widget_queue_resize() from inside
     * [vfunc`Gtk`.Widget.size_allocate] will be silently ignored.
     * 
     * This function is only for use in widget implementations.
     */
    queueResize(): void
    /**
     * Creates the GDK resources associated with a widget.
     * 
     * Normally realization happens implicitly; if you show a widget
     * and all its parent containers, then the widget will be realized
     * and mapped automatically.
     * 
     * Realizing a widget requires all the widget’s parent widgets to be
     * realized; calling this function realizes the widget’s parents
     * in addition to `widget` itself. If a widget is not yet inside a
     * toplevel window when you realize it, bad things will happen.
     * 
     * This function is primarily used in widget implementations, and
     * isn’t very useful otherwise. Many times when you think you might
     * need it, a better approach is to connect to a signal that will be
     * called after the widget is realized automatically, such as
     * [signal`Gtk`.Widget::realize].
     */
    realize(): void
    /**
     * Removes `controller` from `widget,` so that it doesn't process
     * events anymore.
     * 
     * It should not be used again.
     * 
     * Widgets will remove all event controllers automatically when they
     * are destroyed, there is normally no need to call this function.
     */
    removeController(controller: Gtk.EventController): void
    /**
     * Removes a style from `widget`.
     * 
     * After this, the style of `widget` will stop matching for `css_class`.
     */
    removeCssClass(cssClass: string): void
    /**
     * Removes a widget from the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. The widget must
     * have previously been added to the list with
     * [method`Gtk`.Widget.add_mnemonic_label].
     */
    removeMnemonicLabel(label: Gtk.Widget): void
    /**
     * Removes a tick callback previously registered with
     * gtk_widget_add_tick_callback().
     */
    removeTickCallback(id: number): void
    /**
     * Specifies whether the input focus can enter the widget
     * or any of its children.
     * 
     * Applications should set `can_focus` to %FALSE to mark a
     * widget as for pointer/touch use only.
     * 
     * Note that having `can_focus` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and focusable and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setCanFocus(canFocus: boolean): void
    /**
     * Sets whether `widget` can be the target of pointer events.
     */
    setCanTarget(canTarget: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its parent.
     * 
     * The child visibility can be set for widget before it is added
     * to a container with [method`Gtk`.Widget.set_parent], to avoid
     * mapping children unnecessary before immediately unmapping them.
     * However it will be reset to its default state of %TRUE when the
     * widget is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    setChildVisible(childVisible: boolean): void
    /**
     * Clear all style classes applied to `widget`
     * and replace them with `classes`.
     */
    setCssClasses(classes: string[]): void
    /**
     * Sets the cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * If the `cursor` is NULL, `widget` will use the cursor
     * inherited from the parent widget.
     */
    setCursor(cursor?: Gdk.Cursor | null): void
    /**
     * Sets a named cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * This is a utility function that creates a cursor via
     * [ctor`Gdk`.Cursor.new_from_name] and then sets it on `widget`
     * with [method`Gtk`.Widget.set_cursor]. See those functions for
     * details.
     * 
     * On top of that, this function allows `name` to be %NULL, which
     * will do the same as calling [method`Gtk`.Widget.set_cursor]
     * with a %NULL cursor.
     */
    setCursorFromName(name?: string | null): void
    /**
     * Sets the reading direction on a particular widget.
     * 
     * This direction controls the primary direction for widgets
     * containing text, and also the direction in which the children
     * of a container are packed. The ability to set the direction is
     * present in order so that correct localization into languages with
     * right-to-left reading directions can be done. Generally, applications
     * will let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitly
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by [func`Gtk`.Widget.set_default_direction] will be used.
     */
    setDirection(dir: Gtk.TextDirection): void
    /**
     * Set `child` as the current focus child of `widget`.
     * 
     * This function is only suitable for widget implementations.
     * If you want a certain widget to get the input focus, call
     * [method`Gtk`.Widget.grab_focus] on it.
     */
    setFocusChild(child?: Gtk.Widget | null): void
    /**
     * Sets whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * Making mouse clicks not grab focus is useful in places like
     * toolbars where you don’t want the keyboard focus removed from
     * the main area of the application.
     */
    setFocusOnClick(focusOnClick: boolean): void
    /**
     * Specifies whether `widget` can own the input focus.
     * 
     * Widget implementations should set `focusable` to %TRUE in
     * their init() function if they want to receive keyboard input.
     * 
     * Note that having `focusable` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and can-focus and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setFocusable(focusable: boolean): void
    /**
     * Sets the font map to use for Pango rendering.
     * 
     * The font map is the object that is used to look up fonts.
     * Setting a custom font map can be useful in special situations,
     * e.g. when you need to add application-specific fonts to the set
     * of available fonts.
     * 
     * When not set, the widget will inherit the font map from its parent.
     */
    setFontMap(fontMap?: Pango.FontMap | null): void
    /**
     * Sets the `cairo_font_options_t` used for Pango rendering
     * in this widget.
     * 
     * When not set, the default font options for the `GdkDisplay`
     * will be used.
     */
    setFontOptions(options?: cairo.FontOptions | null): void
    /**
     * Sets the horizontal alignment of `widget`.
     */
    setHalign(align: Gtk.Align): void
    /**
     * Sets the `has-tooltip` property on `widget` to `has_tooltip`.
     */
    setHasTooltip(hasTooltip: boolean): void
    /**
     * Sets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Call this function to set the expand flag if you would like your
     * widget to become larger horizontally when the window has extra
     * room.
     * 
     * By default, widgets automatically expand if any of their children
     * want to expand. (To see if a widget will automatically expand given
     * its current children and state, call [method`Gtk`.Widget.compute_expand].
     * A container can decide how the expandability of children affects the
     * expansion of the container by overriding the compute_expand virtual
     * method on `GtkWidget`.).
     * 
     * Setting hexpand explicitly with this function will override the
     * automatic expand behavior.
     * 
     * This function forces the widget to expand or not to expand,
     * regardless of children.  The override occurs because
     * [method`Gtk`.Widget.set_hexpand] sets the hexpand-set property (see
     * [method`Gtk`.Widget.set_hexpand_set]) which causes the widget’s hexpand
     * value to be used, rather than looking at children and widget state.
     */
    setHexpand(expand: boolean): void
    /**
     * Sets whether the hexpand flag will be used.
     * 
     * The [property`Gtk`.Widget:hexpand-set] property will be set
     * automatically when you call [method`Gtk`.Widget.set_hexpand]
     * to set hexpand, so the most likely reason to use this function
     * would be to unset an explicit expand flag.
     * 
     * If hexpand is set, then it overrides any computed
     * expand value based on child widgets. If hexpand is not
     * set, then the expand value depends on whether any
     * children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    setHexpandSet(set: boolean): void
    /**
     * Sets the layout manager delegate instance that provides an
     * implementation for measuring and allocating the children of `widget`.
     */
    setLayoutManager(layoutManager?: Gtk.LayoutManager | null): void
    /**
     * Sets the bottom margin of `widget`.
     */
    setMarginBottom(margin: number): void
    /**
     * Sets the end margin of `widget`.
     */
    setMarginEnd(margin: number): void
    /**
     * Sets the start margin of `widget`.
     */
    setMarginStart(margin: number): void
    /**
     * Sets the top margin of `widget`.
     */
    setMarginTop(margin: number): void
    /**
     * Sets a widgets name.
     * 
     * Setting a name allows you to refer to the widget from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for [class`Gtk`.StyleContext].
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     */
    setName(name: string): void
    /**
     * Request the `widget` to be rendered partially transparent.
     * 
     * An opacity of 0 is fully transparent and an opacity of 1
     * is fully opaque.
     * 
     * Opacity works on both toplevel widgets and child widgets, although
     * there are some limitations: For toplevel widgets, applying opacity
     * depends on the capabilities of the windowing system. On X11, this
     * has any effect only on X displays with a compositing manager,
     * see gdk_display_is_composited(). On Windows and Wayland it should
     * always work, although setting a window’s opacity after the window
     * has been shown may cause some flicker.
     * 
     * Note that the opacity is inherited through inclusion — if you set
     * a toplevel to be partially translucent, all of its content will
     * appear translucent, since it is ultimatively rendered on that
     * toplevel. The opacity value itself is not inherited by child
     * widgets (since that would make widgets deeper in the hierarchy
     * progressively more translucent). As a consequence, [class`Gtk`.Popover]s
     * and other [iface`Gtk`.Native] widgets with their own surface will use their
     * own opacity value, and thus by default appear non-translucent,
     * even if they are attached to a toplevel that is translucent.
     */
    setOpacity(opacity: number): void
    /**
     * Sets how `widget` treats content that is drawn outside the
     * widget's content area.
     * 
     * See the definition of [enum`Gtk`.Overflow] for details.
     * 
     * This setting is provided for widget implementations and
     * should not be used by application code.
     * 
     * The default value is %GTK_OVERFLOW_VISIBLE.
     */
    setOverflow(overflow: Gtk.Overflow): void
    /**
     * Sets `parent` as the parent widget of `widget`.
     * 
     * This takes care of details such as updating the state and style
     * of the child to reflect its new location and resizing the parent.
     * The opposite function is [method`Gtk`.Widget.unparent].
     * 
     * This function is useful only when implementing subclasses of
     * `GtkWidget`.
     */
    setParent(parent: Gtk.Widget): void
    /**
     * Specifies whether `widget` will be treated as the default
     * widget within its toplevel when it has the focus, even if
     * another widget is the default.
     */
    setReceivesDefault(receivesDefault: boolean): void
    /**
     * Sets the sensitivity of a widget.
     * 
     * A widget is sensitive if the user can interact with it.
     * Insensitive widgets are “grayed out” and the user can’t
     * interact with them. Insensitive widgets are known as
     * “inactive”, “disabled”, or “ghosted” in some other toolkits.
     */
    setSensitive(sensitive: boolean): void
    /**
     * Sets the minimum size of a widget.
     * 
     * That is, the widget’s size request will be at least `width`
     * by `height`. You can use this function to force a widget to
     * be larger than it normally would be.
     * 
     * In most cases, [method`Gtk`.Window.set_default_size] is a better
     * choice for toplevel windows than this function; setting the default
     * size will still allow users to shrink the window. Setting the size
     * request will force them to leave the window at least as large as
     * the size request.
     * 
     * Note the inherent danger of setting any fixed size - themes,
     * translations into other languages, different fonts, and user action
     * can all change the appropriate size for a given widget. So, it's
     * basically impossible to hardcode a size that will always be
     * correct.
     * 
     * The size request of a widget is the smallest size a widget can
     * accept while still functioning well and drawing itself correctly.
     * However in some strange cases a widget may be allocated less than
     * its requested size, and in many cases a widget may be allocated more
     * space than it requested.
     * 
     * If the size request in a given direction is -1 (unset), then
     * the “natural” size request of the widget will be used instead.
     * 
     * The size request set here does not include any margin from the
     * properties
     * [property`Gtk`.Widget:margin-start],
     * [property`Gtk`.Widget:margin-end],
     * [property`Gtk`.Widget:margin-top], and
     * [property`Gtk`.Widget:margin-bottom], but it does include pretty
     * much all other padding or border properties set by any subclass
     * of `GtkWidget`.
     */
    setSizeRequest(width: number, height: number): void
    /**
     * Turns on flag values in the current widget state.
     * 
     * Typical widget states are insensitive, prelighted, etc.
     * 
     * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
     * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set
     * the widget's direction, use [method`Gtk`.Widget.set_direction].
     * 
     * This function is for use in widget implementations.
     */
    setStateFlags(flags: Gtk.StateFlags, clear: boolean): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked
     * up with Pango markup.
     * 
     * This function will take care of setting the
     * [property`Gtk`.Widget:has-tooltip] as a side effect, and of the
     * default handler for the [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_markup].
     */
    setTooltipMarkup(markup?: string | null): void
    /**
     * Sets `text` as the contents of the tooltip.
     * 
     * If `text` contains any markup, it will be escaped.
     * 
     * This function will take care of setting
     * [property`Gtk`.Widget:has-tooltip] as a side effect,
     * and of the default handler for the
     * [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_text].
     */
    setTooltipText(text?: string | null): void
    /**
     * Sets the vertical alignment of `widget`.
     */
    setValign(align: Gtk.Align): void
    /**
     * Sets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.set_hexpand] for more detail.
     */
    setVexpand(expand: boolean): void
    /**
     * Sets whether the vexpand flag will be used.
     * 
     * See [method`Gtk`.Widget.set_hexpand_set] for more detail.
     */
    setVexpandSet(set: boolean): void
    /**
     * Sets the visibility state of `widget`.
     * 
     * Note that setting this to %TRUE doesn’t mean the widget is
     * actually viewable, see [method`Gtk`.Widget.get_visible].
     * 
     * This function simply calls [method`Gtk`.Widget.show] or
     * [method`Gtk`.Widget.hide] but is nicer to use when the
     * visibility of the widget depends on some condition.
     */
    setVisible(visible: boolean): void
    /**
     * Returns whether `widget` should contribute to
     * the measuring and allocation of its parent.
     * 
     * This is %FALSE for invisible children, but also
     * for children that have their own surface.
     */
    shouldLayout(): boolean
    /**
     * Flags a widget to be displayed.
     * 
     * Any widget that isn’t shown will not appear on the screen.
     * 
     * Remember that you have to show the containers containing a widget,
     * in addition to the widget itself, before it will appear onscreen.
     * 
     * When a toplevel container is shown, it is immediately realized and
     * mapped; other shown widgets are realized and mapped when their
     * toplevel container is realized and mapped.
     */
    show(): void
    /**
     * Allocates widget with a transformation that translates
     * the origin to the position in `allocation`.
     * 
     * This is a simple form of [method`Gtk`.Widget.allocate].
     */
    sizeAllocate(allocation: Gtk.Allocation, baseline: number): void
    /**
     * Snapshot the a child of `widget`.
     * 
     * When a widget receives a call to the snapshot function,
     * it must send synthetic [vfunc`Gtk`.Widget.snapshot] calls
     * to all children. This function provides a convenient way
     * of doing this. A widget, when it receives a call to its
     * [vfunc`Gtk`.Widget.snapshot] function, calls
     * gtk_widget_snapshot_child() once for each child, passing in
     * the `snapshot` the widget received.
     * 
     * gtk_widget_snapshot_child() takes care of translating the origin of
     * `snapshot,` and deciding whether the child needs to be snapshot.
     * 
     * This function does nothing for children that implement `GtkNative`.
     */
    snapshotChild(child: Gtk.Widget, snapshot: Gtk.Snapshot): void
    /**
     * Translate coordinates relative to `src_widget’`s allocation
     * to coordinates relative to `dest_widget’`s allocations.
     * 
     * In order to perform this operation, both widget must share
     * a common ancestor.
     */
    translateCoordinates(destWidget: Gtk.Widget, srcX: number, srcY: number): [ /* returnType */ boolean, /* destX */ number | null, /* destY */ number | null ]
    /**
     * Triggers a tooltip query on the display where the toplevel
     * of `widget` is located.
     */
    triggerTooltipQuery(): void
    /**
     * Causes a widget to be unmapped if it’s currently mapped.
     * 
     * This function is only for use in widget implementations.
     */
    unmap(): void
    /**
     * Dissociate `widget` from its parent.
     * 
     * This function is only for use in widget implementations,
     * typically in dispose.
     */
    unparent(): void
    /**
     * Causes a widget to be unrealized (frees all GDK resources
     * associated with the widget).
     * 
     * This function is only useful in widget implementations.
     */
    unrealize(): void
    /**
     * Turns off flag values for the current widget state.
     * 
     * See [method`Gtk`.Widget.set_state_flags].
     * 
     * This function is for use in widget implementations.
     */
    unsetStateFlags(flags: Gtk.StateFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Methods of Gtk-4.0.Gtk.Accessible */
    /**
     * Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
     */
    getAccessibleRole(): Gtk.AccessibleRole
    /**
     * Resets the accessible `property` to its default value.
     */
    resetProperty(property: Gtk.AccessibleProperty): void
    /**
     * Resets the accessible `relation` to its default value.
     */
    resetRelation(relation: Gtk.AccessibleRelation): void
    /**
     * Resets the accessible `state` to its default value.
     */
    resetState(state: Gtk.AccessibleState): void
    /**
     * Updates an array of accessible properties.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * property change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateProperty(properties: Gtk.AccessibleProperty[], values: any[]): void
    /**
     * Updates an array of accessible relations.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * relation change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateRelation(relations: Gtk.AccessibleRelation[], values: any[]): void
    /**
     * Updates an array of accessible states.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * state change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateState(states: Gtk.AccessibleState[], values: any[]): void
    /* Methods of Gtk-4.0.Gtk.Buildable */
    /**
     * Gets the ID of the `buildable` object.
     * 
     * `GtkBuilder` sets the name based on the ID attribute
     * of the <object> tag used to construct the `buildable`.
     */
    getBuildableId(): string | null
    /* Methods of GtkSource-5.GtkSource.StyleSchemeChooser */
    /**
     * Gets the currently-selected scheme.
     */
    getStyleScheme(): StyleScheme
    /**
     * Sets the scheme.
     */
    setStyleScheme(scheme: StyleScheme): void
    /* Signals of Gtk-4.0.Gtk.Widget */
    /**
     * Signals that all holders of a reference to the widget should release
     * the reference that they hold.
     * 
     * May result in finalization of the widget if all references are released.
     * 
     * This signal is not suitable for saving widget state.
     */
    connect(sigName: "destroy", callback: (() => void)): number
    on(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "destroy", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "destroy"): void
    /**
     * Emitted when the text direction of a widget changes.
     */
    connect(sigName: "direction-changed", callback: ((previousDirection: Gtk.TextDirection) => void)): number
    on(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void): NodeJS.EventEmitter
    emit(sigName: "direction-changed", previousDirection: Gtk.TextDirection): void
    /**
     * Emitted when `widget` is hidden.
     */
    connect(sigName: "hide", callback: (() => void)): number
    on(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "hide", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "hide"): void
    /**
     * Emitted if keyboard navigation fails.
     * 
     * See [method`Gtk`.Widget.keynav_failed] for details.
     */
    connect(sigName: "keynav-failed", callback: ((direction: Gtk.DirectionType) => boolean)): number
    on(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "keynav-failed", direction: Gtk.DirectionType): void
    /**
     * Emitted when `widget` is going to be mapped.
     * 
     * A widget is mapped when the widget is visible (which is controlled with
     * [property`Gtk`.Widget:visible]) and all its parents up to the toplevel widget
     * are also visible.
     * 
     * The ::map signal can be used to determine whether a widget will be drawn,
     * for instance it can resume an animation that was stopped during the
     * emission of [signal`Gtk`.Widget::unmap].
     */
    connect(sigName: "map", callback: (() => void)): number
    on(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "map", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "map"): void
    /**
     * Emitted when a widget is activated via a mnemonic.
     * 
     * The default handler for this signal activates `widget` if `group_cycling`
     * is %FALSE, or just makes `widget` grab focus if `group_cycling` is %TRUE.
     */
    connect(sigName: "mnemonic-activate", callback: ((groupCycling: boolean) => boolean)): number
    on(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "mnemonic-activate", groupCycling: boolean): void
    /**
     * Emitted when the focus is moved.
     */
    connect(sigName: "move-focus", callback: ((direction: Gtk.DirectionType) => void)): number
    on(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "move-focus", direction: Gtk.DirectionType): void
    /**
     * Emitted when the widgets tooltip is about to be shown.
     * 
     * This happens when the [property`Gtk`.Widget:has-tooltip] property
     * is %TRUE and the hover timeout has expired with the cursor hovering
     * "above" `widget;` or emitted when `widget` got focus in keyboard mode.
     * 
     * Using the given coordinates, the signal handler should determine
     * whether a tooltip should be shown for `widget`. If this is the case
     * %TRUE should be returned, %FALSE otherwise.  Note that if
     * `keyboard_mode` is %TRUE, the values of `x` and `y` are undefined and
     * should not be used.
     * 
     * The signal handler is free to manipulate `tooltip` with the therefore
     * destined function calls.
     */
    connect(sigName: "query-tooltip", callback: ((x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => boolean)): number
    on(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void): NodeJS.EventEmitter
    emit(sigName: "query-tooltip", x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip): void
    /**
     * Emitted when `widget` is associated with a `GdkSurface`.
     * 
     * This means that [method`Gtk`.Widget.realize] has been called
     * or the widget has been mapped (that is, it is going to be drawn).
     */
    connect(sigName: "realize", callback: (() => void)): number
    on(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "realize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "realize"): void
    /**
     * Emitted when `widget` is shown.
     */
    connect(sigName: "show", callback: (() => void)): number
    on(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "show"): void
    /**
     * Emitted when the widget state changes.
     * 
     * See [method`Gtk`.Widget.get_state_flags].
     */
    connect(sigName: "state-flags-changed", callback: ((flags: Gtk.StateFlags) => void)): number
    on(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void): NodeJS.EventEmitter
    emit(sigName: "state-flags-changed", flags: Gtk.StateFlags): void
    /**
     * Emitted when `widget` is going to be unmapped.
     * 
     * A widget is unmapped when either it or any of its parents up to the
     * toplevel widget have been set as hidden.
     * 
     * As ::unmap indicates that a widget will not be shown any longer,
     * it can be used to, for example, stop an animation on the widget.
     */
    connect(sigName: "unmap", callback: (() => void)): number
    on(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unmap", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unmap"): void
    /**
     * Emitted when the `GdkSurface` associated with `widget` is destroyed.
     * 
     * This means that [method`Gtk`.Widget.unrealize] has been called
     * or the widget has been unmapped (that is, it is going to be hidden).
     */
    connect(sigName: "unrealize", callback: (() => void)): number
    on(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unrealize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style-scheme", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style-scheme", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style-scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style-scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style-scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: StyleSchemeChooserWidget_ConstructProps)
    _init (config?: StyleSchemeChooserWidget_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): StyleSchemeChooserWidget
    static $gtype: GObject.Type
}
interface StyleSchemeManager_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.StyleSchemeManager */
    searchPath?: string[]
}
class StyleSchemeManager {
    /* Properties of GtkSource-5.GtkSource.StyleSchemeManager */
    readonly schemeIds: string[]
    searchPath: string[]
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.StyleSchemeManager */
    /**
     * Appends `path` to the list of directories where the `manager` looks for
     * style scheme files.
     * 
     * See [method`StyleSchemeManager`.set_search_path] for details.
     */
    appendSearchPath(path: string): void
    /**
     * Mark any currently cached information about the available style schems
     * as invalid.
     * 
     * All the available style schemes will be reloaded next time the `manager` is accessed.
     */
    forceRescan(): void
    /**
     * Looks up style scheme by id.
     */
    getScheme(schemeId: string): StyleScheme | null
    /**
     * Returns the ids of the available style schemes.
     */
    getSchemeIds(): string[] | null
    /**
     * Returns the current search path for the `manager`.
     * 
     * See [method`StyleSchemeManager`.set_search_path] for details.
     */
    getSearchPath(): string[]
    /**
     * Prepends `path` to the list of directories where the `manager` looks
     * for style scheme files.
     * 
     * See [method`StyleSchemeManager`.set_search_path] for details.
     */
    prependSearchPath(path: string): void
    /**
     * Sets the list of directories where the `manager` looks for
     * style scheme files.
     * 
     * If `path` is %NULL, the search path is reset to default.
     */
    setSearchPath(path?: string[] | null): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::scheme-ids", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scheme-ids", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scheme-ids", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scheme-ids", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scheme-ids", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::search-path", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::search-path", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::search-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::search-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::search-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: StyleSchemeManager_ConstructProps)
    _init (config?: StyleSchemeManager_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): StyleSchemeManager
    /**
     * Returns the default #GtkSourceStyleSchemeManager instance.
     */
    static getDefault(): StyleSchemeManager
    static $gtype: GObject.Type
}
interface StyleSchemePreview_ConstructProps extends Gtk.Widget_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.StyleSchemePreview */
    scheme?: StyleScheme
    selected?: boolean
    /* Constructor properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole?: Gtk.AccessibleRole
    /* Constructor properties of Gtk-4.0.Gtk.Actionable */
    actionName?: string
    actionTarget?: GLib.Variant
}
class StyleSchemePreview {
    /* Properties of GtkSource-5.GtkSource.StyleSchemePreview */
    selected: boolean
    /* Properties of Gtk-4.0.Gtk.Widget */
    /**
     * Whether the widget or any of its descendents can accept
     * the input focus.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    canFocus: boolean
    /**
     * Whether the widget can receive pointer events.
     */
    canTarget: boolean
    /**
     * A list of css classes applied to this widget.
     */
    cssClasses: string[]
    /**
     * The cursor used by `widget`.
     */
    cursor: Gdk.Cursor
    /**
     * Whether the widget should grab focus when it is clicked with the mouse.
     * 
     * This property is only relevant for widgets that can take focus.
     */
    focusOnClick: boolean
    /**
     * Whether this widget itself will accept the input focus.
     */
    focusable: boolean
    /**
     * How to distribute horizontal space if widget gets extra space.
     */
    halign: Gtk.Align
    /**
     * Whether the widget is the default widget.
     */
    readonly hasDefault: boolean
    /**
     * Whether the widget has the input focus.
     */
    readonly hasFocus: boolean
    /**
     * Enables or disables the emission of the ::query-tooltip signal on `widget`.
     * 
     * A value of %TRUE indicates that `widget` can have a tooltip, in this case
     * the widget will be queried using [signal`Gtk`.Widget::query-tooltip] to
     * determine whether it will provide a tooltip or not.
     */
    hasTooltip: boolean
    /**
     * Override for height request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    heightRequest: number
    /**
     * Whether to expand horizontally.
     */
    hexpand: boolean
    /**
     * Whether to use the `hexpand` property.
     */
    hexpandSet: boolean
    /**
     * The `GtkLayoutManager` instance to use to compute the preferred size
     * of the widget, and allocate its children.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    layoutManager: Gtk.LayoutManager
    /**
     * Margin on bottom side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginBottom: number
    /**
     * Margin on end of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginEnd: number
    /**
     * Margin on start of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginStart: number
    /**
     * Margin on top side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginTop: number
    /**
     * The name of the widget.
     */
    name: string
    /**
     * The requested opacity of the widget.
     */
    opacity: number
    /**
     * How content outside the widget's content area is treated.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    overflow: Gtk.Overflow
    /**
     * The parent widget of this widget.
     */
    readonly parent: Gtk.Widget
    /**
     * Whether the widget will receive the default action when it is focused.
     */
    receivesDefault: boolean
    /**
     * The `GtkRoot` widget of the widget tree containing this widget.
     * 
     * This will be %NULL if the widget is not contained in a root widget.
     */
    readonly root: Gtk.Root
    /**
     * The scale factor of the widget.
     */
    readonly scaleFactor: number
    /**
     * Whether the widget responds to input.
     */
    sensitive: boolean
    /**
     * Sets the text of tooltip to be the given string, which is marked up
     * with Pango markup.
     * 
     * Also see [method`Gtk`.Tooltip.set_markup].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipMarkup: string
    /**
     * Sets the text of tooltip to be the given string.
     * 
     * Also see [method`Gtk`.Tooltip.set_text].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipText: string
    /**
     * How to distribute vertical space if widget gets extra space.
     */
    valign: Gtk.Align
    /**
     * Whether to expand vertically.
     */
    vexpand: boolean
    /**
     * Whether to use the `vexpand` property.
     */
    vexpandSet: boolean
    /**
     * Whether the widget is visible.
     */
    visible: boolean
    /**
     * Override for width request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    widthRequest: number
    /* Properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole: Gtk.AccessibleRole
    /* Properties of Gtk-4.0.Gtk.Actionable */
    actionName: string
    actionTarget: GLib.Variant
    /* Fields of Gtk-4.0.Gtk.Widget */
    readonly parentInstance: GObject.InitiallyUnowned
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.StyleSchemePreview */
    /**
     * Gets the #GtkSourceStyleScheme previewed by the widget.
     */
    getScheme(): StyleScheme
    getSelected(): boolean
    setSelected(selected: boolean): void
    /* Methods of Gtk-4.0.Gtk.Widget */
    /**
     * Enable or disable an action installed with
     * gtk_widget_class_install_action().
     */
    actionSetEnabled(actionName: string, enabled: boolean): void
    /**
     * For widgets that can be “activated” (buttons, menu items, etc.),
     * this function activates them.
     * 
     * The activation will emit the signal set using
     * [method`Gtk`.WidgetClass.set_activate_signal] during class initialization.
     * 
     * Activation is what happens when you press <kbd>Enter</kbd>
     * on a widget during key navigation.
     * 
     * If you wish to handle the activation keybinding yourself, it is
     * recommended to use [method`Gtk`.WidgetClass.add_shortcut] with an action
     * created with [ctor`Gtk`.SignalAction.new].
     * 
     * If `widget` isn't activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Looks up the action in the action groups associated with
     * `widget` and its ancestors, and activates it.
     * 
     * If the action is in an action group added with
     * [method`Gtk`.Widget.insert_action_group], the `name` is expected
     * to be prefixed with the prefix that was used when the group was
     * inserted.
     * 
     * The arguments must match the actions expected parameter type,
     * as returned by `g_action_get_parameter_type()`.
     */
    activateAction(name: string, args?: GLib.Variant | null): boolean
    /**
     * Activates the `default.activate` action from `widget`.
     */
    activateDefault(): void
    /**
     * Adds `controller` to `widget` so that it will receive events.
     * 
     * You will usually want to call this function right after
     * creating any kind of [class`Gtk`.EventController].
     */
    addController(controller: Gtk.EventController): void
    /**
     * Adds a style class to `widget`.
     * 
     * After calling this function, the widgets style will match
     * for `css_class,` according to CSS matching rules.
     * 
     * Use [method`Gtk`.Widget.remove_css_class] to remove the
     * style again.
     */
    addCssClass(cssClass: string): void
    /**
     * Adds a widget to the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. Note the
     * list of mnemonic labels for the widget is cleared when the
     * widget is destroyed, so the caller must make sure to update
     * its internal state at this point as well.
     */
    addMnemonicLabel(label: Gtk.Widget): void
    /**
     * Queues an animation frame update and adds a callback to be called
     * before each frame.
     * 
     * Until the tick callback is removed, it will be called frequently
     * (usually at the frame rate of the output device or as quickly as
     * the application can be repainted, whichever is slower). For this
     * reason, is most suitable for handling graphics that change every
     * frame or every few frames. The tick callback does not automatically
     * imply a relayout or repaint. If you want a repaint or relayout, and
     * aren’t changing widget properties that would trigger that (for example,
     * changing the text of a `GtkLabel`), then you will have to call
     * [method`Gtk`.Widget.queue_resize] or [method`Gtk`.Widget.queue_draw]
     * yourself.
     * 
     * [method`Gdk`.FrameClock.get_frame_time] should generally be used
     * for timing continuous animations and
     * [method`Gdk`.FrameTimings.get_predicted_presentation_time] if you are
     * trying to display isolated frames at particular times.
     * 
     * This is a more convenient alternative to connecting directly to the
     * [signal`Gdk`.FrameClock::update] signal of `GdkFrameClock`, since you
     * don't have to worry about when a `GdkFrameClock` is assigned to a widget.
     */
    addTickCallback(callback: Gtk.TickCallback): number
    /**
     * This function is only used by `GtkWidget` subclasses, to
     * assign a size, position and (optionally) baseline to their
     * child widgets.
     * 
     * In this function, the allocation and baseline may be adjusted.
     * The given allocation will be forced to be bigger than the
     * widget's minimum size, as well as at least 0×0 in size.
     * 
     * For a version that does not take a transform, see
     * [method`Gtk`.Widget.size_allocate].
     */
    allocate(width: number, height: number, baseline: number, transform?: Gsk.Transform | null): void
    /**
     * Called by widgets as the user moves around the window using
     * keyboard shortcuts.
     * 
     * The `direction` argument indicates what kind of motion is taking place (up,
     * down, left, right, tab forward, tab backward).
     * 
     * This function calls the [vfunc`Gtk`.Widget.focus] virtual function; widgets
     * can override the virtual function in order to implement appropriate focus
     * behavior.
     * 
     * The default `focus()` virtual function for a widget should return `TRUE` if
     * moving in `direction` left the focus on a focusable location inside that
     * widget, and `FALSE` if moving in `direction` moved the focus outside the
     * widget. When returning `TRUE`, widgets normallycall [method`Gtk`.Widget.grab_focus]
     * to place the focus accordingly; when returning `FALSE`, they don’t modify
     * the current focus location.
     * 
     * This function is used by custom widget implementations; if you're
     * writing an app, you’d use [method`Gtk`.Widget.grab_focus] to move
     * the focus to a particular widget.
     */
    childFocus(direction: Gtk.DirectionType): boolean
    /**
     * Computes the bounds for `widget` in the coordinate space of `target`.
     * 
     * FIXME: Explain what "bounds" are.
     * 
     * If the operation is successful, %TRUE is returned. If `widget` has no
     * bounds or the bounds cannot be expressed in `target'`s coordinate space
     * (for example if both widgets are in different windows), %FALSE is
     * returned and `bounds` is set to the zero rectangle.
     * 
     * It is valid for `widget` and `target` to be the same widget.
     */
    computeBounds(target: Gtk.Widget): [ /* returnType */ boolean, /* outBounds */ Graphene.Rect ]
    /**
     * Computes whether a container should give this widget
     * extra space when possible.
     * 
     * Containers should check this, rather than looking at
     * [method`Gtk`.Widget.get_hexpand] or [method`Gtk`.Widget.get_vexpand].
     * 
     * This function already checks whether the widget is visible, so
     * visibility does not need to be checked separately. Non-visible
     * widgets are not expanded.
     * 
     * The computed expand value uses either the expand setting explicitly
     * set on the widget itself, or, if none has been explicitly set,
     * the widget may expand if some of its children do.
     */
    computeExpand(orientation: Gtk.Orientation): boolean
    /**
     * Translates the given `point` in `widget'`s coordinates to coordinates
     * relative to `target’`s coordinate system.
     * 
     * In order to perform this operation, both widgets must share a
     * common ancestor.
     */
    computePoint(target: Gtk.Widget, point: Graphene.Point): [ /* returnType */ boolean, /* outPoint */ Graphene.Point ]
    /**
     * Computes a matrix suitable to describe a transformation from
     * `widget'`s coordinate system into `target'`s coordinate system.
     * 
     * The transform can not be computed in certain cases, for example
     * when `widget` and `target` do not share a common ancestor. In that
     * case `out_transform` gets set to the identity matrix.
     */
    computeTransform(target: Gtk.Widget): [ /* returnType */ boolean, /* outTransform */ Graphene.Matrix ]
    /**
     * Tests if the point at (`x,` `y)` is contained in `widget`.
     * 
     * The coordinates for (`x,` `y)` must be in widget coordinates, so
     * (0, 0) is assumed to be the top left of `widget'`s content area.
     */
    contains(x: number, y: number): boolean
    /**
     * Creates a new `PangoContext` with the appropriate font map,
     * font options, font description, and base direction for drawing
     * text for this widget.
     * 
     * See also [method`Gtk`.Widget.get_pango_context].
     */
    createPangoContext(): Pango.Context
    /**
     * Creates a new `PangoLayout` with the appropriate font map,
     * font description, and base direction for drawing text for
     * this widget.
     * 
     * If you keep a `PangoLayout` created in this way around,
     * you need to re-create it when the widget `PangoContext`
     * is replaced. This can be tracked by listening to changes
     * of the [property`Gtk`.Widget:root] property on the widget.
     */
    createPangoLayout(text?: string | null): Pango.Layout
    /**
     * Checks to see if a drag movement has passed the GTK drag threshold.
     */
    dragCheckThreshold(startX: number, startY: number, currentX: number, currentY: number): boolean
    /**
     * Notifies the user about an input-related error on this widget.
     * 
     * If the [property`Gtk`.Settings:gtk-error-bell] setting is %TRUE,
     * it calls [method`Gdk`.Surface.beep], otherwise it does nothing.
     * 
     * Note that the effect of [method`Gdk`.Surface.beep] can be configured
     * in many ways, depending on the windowing backend and the desktop
     * environment or window manager that is used.
     */
    errorBell(): void
    /**
     * Returns the baseline that has currently been allocated to `widget`.
     * 
     * This function is intended to be used when implementing handlers
     * for the `GtkWidget`Class.snapshot() function, and when allocating
     * child widgets in `GtkWidget`Class.size_allocate().
     */
    getAllocatedBaseline(): number
    /**
     * Returns the height that has currently been allocated to `widget`.
     */
    getAllocatedHeight(): number
    /**
     * Returns the width that has currently been allocated to `widget`.
     */
    getAllocatedWidth(): number
    /**
     * Retrieves the widget’s allocation.
     * 
     * Note, when implementing a layout container: a widget’s allocation
     * will be its “adjusted” allocation, that is, the widget’s parent
     * typically calls [method`Gtk`.Widget.size_allocate] with an allocation,
     * and that allocation is then adjusted (to handle margin
     * and alignment for example) before assignment to the widget.
     * [method`Gtk`.Widget.get_allocation] returns the adjusted allocation that
     * was actually assigned to the widget. The adjusted allocation is
     * guaranteed to be completely contained within the
     * [method`Gtk`.Widget.size_allocate] allocation, however.
     * 
     * So a layout container is guaranteed that its children stay inside
     * the assigned bounds, but not that they have exactly the bounds the
     * container assigned.
     */
    getAllocation(): /* allocation */ Gtk.Allocation
    /**
     * Gets the first ancestor of `widget` with type `widget_type`.
     * 
     * For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)`
     * gets the first `GtkBox` that’s an ancestor of `widget`. No
     * reference will be added to the returned widget; it should
     * not be unreferenced.
     * 
     * Note that unlike [method`Gtk`.Widget.is_ancestor], this function
     * considers `widget` to be an ancestor of itself.
     */
    getAncestor(widgetType: GObject.Type): Gtk.Widget | null
    /**
     * Determines whether the input focus can enter `widget` or any
     * of its children.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getCanFocus(): boolean
    /**
     * Queries whether `widget` can be the target of pointer events.
     */
    getCanTarget(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * 
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    getChildVisible(): boolean
    /**
     * Gets the clipboard object for `widget`.
     * 
     * This is a utility function to get the clipboard object for the
     * `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getClipboard(): Gdk.Clipboard
    /**
     * Returns the list of style classes applied to `widget`.
     */
    getCssClasses(): string[]
    /**
     * Returns the CSS name that is used for `self`.
     */
    getCssName(): string
    /**
     * Queries the cursor set on `widget`.
     * 
     * See [method`Gtk`.Widget.set_cursor] for details.
     */
    getCursor(): Gdk.Cursor | null
    /**
     * Gets the reading direction for a particular widget.
     * 
     * See [method`Gtk`.Widget.set_direction].
     */
    getDirection(): Gtk.TextDirection
    /**
     * Get the `GdkDisplay` for the toplevel window associated with
     * this widget.
     * 
     * This function can only be called after the widget has been
     * added to a widget hierarchy with a `GtkWindow` at the top.
     * 
     * In general, you should only create display specific
     * resources when a widget has been realized, and you should
     * free those resources when the widget is unrealized.
     */
    getDisplay(): Gdk.Display
    /**
     * Returns the widgets first child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getFirstChild(): Gtk.Widget | null
    /**
     * Returns the current focus child of `widget`.
     */
    getFocusChild(): Gtk.Widget | null
    /**
     * Returns whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * See [method`Gtk`.Widget.set_focus_on_click].
     */
    getFocusOnClick(): boolean
    /**
     * Determines whether `widget` can own the input focus.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getFocusable(): boolean
    /**
     * Gets the font map of `widget`.
     * 
     * See [method`Gtk`.Widget.set_font_map].
     */
    getFontMap(): Pango.FontMap | null
    /**
     * Returns the `cairo_font_options_t` of widget.
     * 
     * Seee [method`Gtk`.Widget.set_font_options].
     */
    getFontOptions(): cairo.FontOptions | null
    /**
     * Obtains the frame clock for a widget.
     * 
     * The frame clock is a global “ticker” that can be used to drive
     * animations and repaints. The most common reason to get the frame
     * clock is to call [method`Gdk`.FrameClock.get_frame_time], in order
     * to get a time to use for animating. For example you might record
     * the start of the animation with an initial value from
     * [method`Gdk`.FrameClock.get_frame_time], and then update the animation
     * by calling [method`Gdk`.FrameClock.get_frame_time] again during each repaint.
     * 
     * [method`Gdk`.FrameClock.request_phase] will result in a new frame on the
     * clock, but won’t necessarily repaint any widgets. To repaint a
     * widget, you have to use [method`Gtk`.Widget.queue_draw] which invalidates
     * the widget (thus scheduling it to receive a draw on the next
     * frame). gtk_widget_queue_draw() will also end up requesting a frame
     * on the appropriate frame clock.
     * 
     * A widget’s frame clock will not change while the widget is
     * mapped. Reparenting a widget (which implies a temporary unmap) can
     * change the widget’s frame clock.
     * 
     * Unrealized widgets do not have a frame clock.
     */
    getFrameClock(): Gdk.FrameClock | null
    /**
     * Gets the horizontal alignment of `widget`.
     * 
     * For backwards compatibility reasons this method will never return
     * %GTK_ALIGN_BASELINE, but instead it will convert it to
     * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
     * alignment.
     */
    getHalign(): Gtk.Align
    /**
     * Returns the current value of the `has-tooltip` property.
     */
    getHasTooltip(): boolean
    /**
     * Returns the content height of the widget.
     * 
     * This function returns the height passed to its
     * size-allocate implementation, which is the height you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getHeight(): number
    /**
     * Gets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Containers should use [method`Gtk`.Widget.compute_expand] rather
     * than this function, to see whether a widget, or any of its children,
     * has the expand flag set. If any child of a widget wants to
     * expand, the parent may ask to expand also.
     * 
     * This function only looks at the widget’s own hexpand flag, rather
     * than computing whether the entire widget tree rooted at this widget
     * wants to expand.
     */
    getHexpand(): boolean
    /**
     * Gets whether gtk_widget_set_hexpand() has been used
     * to explicitly set the expand flag on this widget.
     * 
     * If [property`Gtk`.Widget:hexpand] property is set, then it
     * overrides any computed expand value based on child widgets.
     * If `hexpand` is not set, then the expand value depends on
     * whether any children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    getHexpandSet(): boolean
    /**
     * Returns the widgets last child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getLastChild(): Gtk.Widget | null
    /**
     * Retrieves the layout manager used by `widget`.
     * 
     * See [method`Gtk`.Widget.set_layout_manager].
     */
    getLayoutManager(): Gtk.LayoutManager | null
    /**
     * Whether the widget is mapped.
     */
    getMapped(): boolean
    /**
     * Gets the bottom margin of `widget`.
     */
    getMarginBottom(): number
    /**
     * Gets the end margin of `widget`.
     */
    getMarginEnd(): number
    /**
     * Gets the start margin of `widget`.
     */
    getMarginStart(): number
    /**
     * Gets the top margin of `widget`.
     */
    getMarginTop(): number
    /**
     * Retrieves the name of a widget.
     * 
     * See [method`Gtk`.Widget.set_name] for the significance of widget names.
     */
    getName(): string
    /**
     * Returns the nearest `GtkNative` ancestor of `widget`.
     * 
     * This function will return %NULL if the widget is not
     * contained inside a widget tree with a native ancestor.
     * 
     * `GtkNative` widgets will return themselves here.
     */
    getNative(): Gtk.Native | null
    /**
     * Returns the widgets next sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getNextSibling(): Gtk.Widget | null
    /**
     * #Fetches the requested opacity for this widget.
     * 
     * See [method`Gtk`.Widget.set_opacity].
     */
    getOpacity(): number
    /**
     * Returns the widgets overflow value.
     */
    getOverflow(): Gtk.Overflow
    /**
     * Gets a `PangoContext` with the appropriate font map, font description,
     * and base direction for this widget.
     * 
     * Unlike the context returned by [method`Gtk`.Widget.create_pango_context],
     * this context is owned by the widget (it can be used until the screen
     * for the widget changes or the widget is removed from its toplevel),
     * and will be updated to match any changes to the widget’s attributes.
     * This can be tracked by listening to changes of the
     * [property`Gtk`.Widget:root] property on the widget.
     */
    getPangoContext(): Pango.Context
    /**
     * Returns the parent widget of `widget`.
     */
    getParent(): Gtk.Widget | null
    /**
     * Retrieves the minimum and natural size of a widget, taking
     * into account the widget’s preference for height-for-width management.
     * 
     * This is used to retrieve a suitable size by container widgets which do
     * not impose any restrictions on the child placement. It can be used
     * to deduce toplevel window and menu sizes as well as child widgets in
     * free-form containers such as `GtkFixed`.
     * 
     * Handle with care. Note that the natural height of a height-for-width
     * widget will generally be a smaller size than the minimum height, since
     * the required height for the natural width is generally smaller than the
     * required height for the minimum width.
     * 
     * Use [id`gtk_widget_measure]` if you want to support baseline alignment.
     */
    getPreferredSize(): [ /* minimumSize */ Gtk.Requisition | null, /* naturalSize */ Gtk.Requisition | null ]
    /**
     * Returns the widgets previous sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getPrevSibling(): Gtk.Widget | null
    /**
     * Gets the primary clipboard of `widget`.
     * 
     * This is a utility function to get the primary clipboard object
     * for the `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getPrimaryClipboard(): Gdk.Clipboard
    /**
     * Determines whether `widget` is realized.
     */
    getRealized(): boolean
    /**
     * Determines whether `widget` is always treated as the default widget
     * within its toplevel when it has the focus, even if another widget
     * is the default.
     * 
     * See [method`Gtk`.Widget.set_receives_default].
     */
    getReceivesDefault(): boolean
    /**
     * Gets whether the widget prefers a height-for-width layout
     * or a width-for-height layout.
     * 
     * Single-child widgets generally propagate the preference of
     * their child, more complex widgets need to request something
     * either in context of their children or in context of their
     * allocation capabilities.
     */
    getRequestMode(): Gtk.SizeRequestMode
    /**
     * Returns the `GtkRoot` widget of `widget`.
     * 
     * This function will return %NULL if the widget is not contained
     * inside a widget tree with a root widget.
     * 
     * `GtkRoot` widgets will return themselves here.
     */
    getRoot(): Gtk.Root | null
    /**
     * Retrieves the internal scale factor that maps from window
     * coordinates to the actual device pixels.
     * 
     * On traditional systems this is 1, on high density outputs,
     * it can be a higher value (typically 2).
     * 
     * See [method`Gdk`.Surface.get_scale_factor].
     */
    getScaleFactor(): number
    /**
     * Returns the widget’s sensitivity.
     * 
     * This function returns the value that has been set using
     * [method`Gtk`.Widget.set_sensitive]).
     * 
     * The effective sensitivity of a widget is however determined
     * by both its own and its parent widget’s sensitivity.
     * See [method`Gtk`.Widget.is_sensitive].
     */
    getSensitive(): boolean
    /**
     * Gets the settings object holding the settings used for this widget.
     * 
     * Note that this function can only be called when the `GtkWidget`
     * is attached to a toplevel, since the settings object is specific
     * to a particular `GdkDisplay`. If you want to monitor the widget for
     * changes in its settings, connect to the `notify::display` signal.
     */
    getSettings(): Gtk.Settings
    /**
     * Returns the content width or height of the widget.
     * 
     * Which dimension is returned depends on `orientation`.
     * 
     * This is equivalent to calling [method`Gtk`.Widget.get_width]
     * for %GTK_ORIENTATION_HORIZONTAL or [method`Gtk`.Widget.get_height]
     * for %GTK_ORIENTATION_VERTICAL, but can be used when
     * writing orientation-independent code, such as when
     * implementing [iface`Gtk`.Orientable] widgets.
     */
    getSize(orientation: Gtk.Orientation): number
    /**
     * Gets the size request that was explicitly set for the widget using
     * gtk_widget_set_size_request().
     * 
     * A value of -1 stored in `width` or `height` indicates that that
     * dimension has not been set explicitly and the natural requisition
     * of the widget will be used instead. See
     * [method`Gtk`.Widget.set_size_request]. To get the size a widget will
     * actually request, call [method`Gtk`.Widget.measure] instead of
     * this function.
     */
    getSizeRequest(): [ /* width */ number | null, /* height */ number | null ]
    /**
     * Returns the widget state as a flag set.
     * 
     * It is worth mentioning that the effective %GTK_STATE_FLAG_INSENSITIVE
     * state will be returned, that is, also based on parent insensitivity,
     * even if `widget` itself is sensitive.
     * 
     * Also note that if you are looking for a way to obtain the
     * [flags`Gtk`.StateFlags] to pass to a [class`Gtk`.StyleContext]
     * method, you should look at [method`Gtk`.StyleContext.get_state].
     */
    getStateFlags(): Gtk.StateFlags
    /**
     * Returns the style context associated to `widget`.
     * 
     * The returned object is guaranteed to be the same
     * for the lifetime of `widget`.
     */
    getStyleContext(): Gtk.StyleContext
    /**
     * Fetch an object build from the template XML for `widget_type` in
     * this `widget` instance.
     * 
     * This will only report children which were previously declared
     * with [method`Gtk`.WidgetClass.bind_template_child_full] or one of its
     * variants.
     * 
     * This function is only meant to be called for code which is private
     * to the `widget_type` which declared the child and is meant for language
     * bindings which cannot easily make use of the GObject structure offsets.
     */
    getTemplateChild(widgetType: GObject.Type, name: string): GObject.Object
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the tooltip has not been set using
     * [method`Gtk`.Widget.set_tooltip_markup], this
     * function returns %NULL.
     */
    getTooltipMarkup(): string | null
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the `widget'`s tooltip was set using
     * [method`Gtk`.Widget.set_tooltip_markup],
     * this function will return the escaped text.
     */
    getTooltipText(): string | null
    /**
     * Gets the vertical alignment of `widget`.
     */
    getValign(): Gtk.Align
    /**
     * Gets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.get_hexpand] for more detail.
     */
    getVexpand(): boolean
    /**
     * Gets whether gtk_widget_set_vexpand() has been used to
     * explicitly set the expand flag on this widget.
     * 
     * See [method`Gtk`.Widget.get_hexpand_set] for more detail.
     */
    getVexpandSet(): boolean
    /**
     * Determines whether the widget is visible.
     * 
     * If you want to take into account whether the widget’s
     * parent is also marked as visible, use
     * [method`Gtk`.Widget.is_visible] instead.
     * 
     * This function does not check if the widget is
     * obscured in any way.
     * 
     * See [method`Gtk`.Widget.set_visible].
     */
    getVisible(): boolean
    /**
     * Returns the content width of the widget.
     * 
     * This function returns the width passed to its
     * size-allocate implementation, which is the width you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getWidth(): number
    /**
     * Causes `widget` to have the keyboard focus for the `GtkWindow` it's inside.
     * 
     * If `widget` is not focusable, or its [vfunc`Gtk`.Widget.grab_focus]
     * implementation cannot transfer the focus to a descendant of `widget`
     * that is focusable, it will not take focus and %FALSE will be returned.
     * 
     * Calling [method`Gtk`.Widget.grab_focus] on an already focused widget
     * is allowed, should not have an effect, and return %TRUE.
     */
    grabFocus(): boolean
    /**
     * Returns whether `css_class` is currently applied to `widget`.
     */
    hasCssClass(cssClass: string): boolean
    /**
     * Determines if the widget should show a visible indication that
     * it has the global input focus.
     * 
     * This is a convenience function that takes into account whether
     * focus indication should currently be shown in the toplevel window
     * of `widget`. See [method`Gtk`.Window.get_focus_visible] for more
     * information about focus indication.
     * 
     * To find out if the widget has the global input focus, use
     * [method`Gtk`.Widget.has_focus].
     */
    hasVisibleFocus(): boolean
    /**
     * Reverses the effects of gtk_widget_show().
     * 
     * This is causing the widget to be hidden (invisible to the user).
     */
    hide(): void
    /**
     * Returns whether the widget is currently being destroyed.
     * 
     * This information can sometimes be used to avoid doing
     * unnecessary work.
     */
    inDestruction(): boolean
    /**
     * Creates and initializes child widgets defined in templates.
     * 
     * This function must be called in the instance initializer
     * for any class which assigned itself a template using
     * [method`Gtk`.WidgetClass.set_template].
     * 
     * It is important to call this function in the instance initializer
     * of a `GtkWidget` subclass and not in `GObject.constructed()` or
     * `GObject.constructor()` for two reasons:
     * 
     *  - derived widgets will assume that the composite widgets
     *    defined by its parent classes have been created in their
     *    relative instance initializers
     *  - when calling `g_object_new()` on a widget with composite templates,
     *    it’s important to build the composite widgets before the construct
     *    properties are set. Properties passed to `g_object_new()` should
     *    take precedence over properties set in the private template XML
     * 
     * A good rule of thumb is to call this function as the first thing in
     * an instance initialization function.
     */
    initTemplate(): void
    /**
     * Inserts `group` into `widget`.
     * 
     * Children of `widget` that implement [iface`Gtk`.Actionable] can
     * then be associated with actions in `group` by setting their
     * “action-name” to `prefix`.`action-name`.
     * 
     * Note that inheritance is defined for individual actions. I.e.
     * even if you insert a group with prefix `prefix,` actions with
     * the same prefix will still be inherited from the parent, unless
     * the group contains an action with the same name.
     * 
     * If `group` is %NULL, a previously inserted group for `name` is
     * removed from `widget`.
     */
    insertActionGroup(name: string, group?: Gio.ActionGroup | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed after `previous_sibling,` or at the beginning if
     * `previous_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_prev_sibling(widget)`
     * will return `previous_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this
     * function can also be used to reorder `widget` in the child widget
     * list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertAfter(parent: Gtk.Widget, previousSibling?: Gtk.Widget | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed before `next_sibling,` or at the end if
     * `next_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_next_sibling(widget)`
     * will return `next_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this function
     * can also be used to reorder `widget` in the child widget list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertBefore(parent: Gtk.Widget, nextSibling?: Gtk.Widget | null): void
    /**
     * Determines whether `widget` is somewhere inside `ancestor,`
     * possibly with intermediate containers.
     */
    isAncestor(ancestor: Gtk.Widget): boolean
    /**
     * Determines whether `widget` can be drawn to.
     * 
     * A widget can be drawn if it is mapped and visible.
     */
    isDrawable(): boolean
    /**
     * Determines if the widget is the focus widget within its
     * toplevel.
     * 
     * This does not mean that the [property`Gtk`.Widget:has-focus]
     * property is necessarily set; [property`Gtk`.Widget:has-focus]
     * will only be set if the toplevel widget additionally has the
     * global input focus.
     */
    isFocus(): boolean
    /**
     * Returns the widget’s effective sensitivity.
     * 
     * This means it is sensitive itself and also its
     * parent widget is sensitive.
     */
    isSensitive(): boolean
    /**
     * Determines whether the widget and all its parents are marked as
     * visible.
     * 
     * This function does not check if the widget is obscured in any way.
     * 
     * See also [method`Gtk`.Widget.get_visible] and
     * [method`Gtk`.Widget.set_visible].
     */
    isVisible(): boolean
    /**
     * Emits the `::keynav-failed` signal on the widget.
     * 
     * This function should be called whenever keyboard navigation
     * within a single widget hits a boundary.
     * 
     * The return value of this function should be interpreted
     * in a way similar to the return value of
     * [method`Gtk`.Widget.child_focus]. When %TRUE is returned,
     * stay in the widget, the failed keyboard  navigation is OK
     * and/or there is nowhere we can/should move the focus to.
     * When %FALSE is returned, the caller should continue with
     * keyboard navigation outside the widget, e.g. by calling
     * [method`Gtk`.Widget.child_focus] on the widget’s toplevel.
     * 
     * The default [signal`Gtk`.Widget::keynav-failed] handler returns
     * %FALSE for %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD.
     * For the other values of `GtkDirectionType` it returns %TRUE.
     * 
     * Whenever the default handler returns %TRUE, it also calls
     * [method`Gtk`.Widget.error_bell] to notify the user of the
     * failed keyboard navigation.
     * 
     * A use case for providing an own implementation of ::keynav-failed
     * (either by connecting to it or by overriding it) would be a row of
     * [class`Gtk`.Entry] widgets where the user should be able to navigate
     * the entire row with the cursor keys, as e.g. known from user
     * interfaces that require entering license keys.
     */
    keynavFailed(direction: Gtk.DirectionType): boolean
    /**
     * Returns the widgets for which this widget is the target of a
     * mnemonic.
     * 
     * Typically, these widgets will be labels. See, for example,
     * [method`Gtk`.Label.set_mnemonic_widget].
     * 
     * The widgets in the list are not individually referenced.
     * If you want to iterate through the list and perform actions
     * involving callbacks that might destroy the widgets, you
     * must call `g_list_foreach (result, (GFunc)g_object_ref, NULL)`
     * first, and then unref all the widgets afterwards.
     */
    listMnemonicLabels(): Gtk.Widget[]
    /**
     * Causes a widget to be mapped if it isn’t already.
     * 
     * This function is only for use in widget implementations.
     */
    map(): void
    /**
     * Measures `widget` in the orientation `orientation` and for the given `for_size`.
     * 
     * As an example, if `orientation` is %GTK_ORIENTATION_HORIZONTAL and `for_size`
     * is 300, this functions will compute the minimum and natural width of `widget`
     * if it is allocated at a height of 300 pixels.
     * 
     * See [GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management) for
     * a more details on implementing `GtkWidgetClass.measure()`.
     */
    measure(orientation: Gtk.Orientation, forSize: number): [ /* minimum */ number | null, /* natural */ number | null, /* minimumBaseline */ number | null, /* naturalBaseline */ number | null ]
    /**
     * Emits the ::mnemonic-activate signal.
     * 
     * See [signal`Gtk`.Widget::mnemonic-activate].
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Returns a `GListModel` to track the children of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track children and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeChildren(): Gio.ListModel
    /**
     * Returns a `GListModel` to track the [class`Gtk`.EventController]s
     * of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track controllers and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeControllers(): Gio.ListModel
    /**
     * Finds the descendant of `widget` closest to the point (`x,` `y)`.
     * 
     * The point must be given in widget coordinates, so (0, 0) is assumed
     * to be the top left of `widget'`s content area.
     * 
     * Usually widgets will return %NULL if the given coordinate is not
     * contained in `widget` checked via [method`Gtk`.Widget.contains].
     * Otherwise they will recursively try to find a child that does
     * not return %NULL. Widgets are however free to customize their
     * picking algorithm.
     * 
     * This function is used on the toplevel to determine the widget
     * below the mouse cursor for purposes of hover highlighting and
     * delivering events.
     */
    pick(x: number, y: number, flags: Gtk.PickFlags): Gtk.Widget | null
    /**
     * Flags the widget for a rerun of the [vfunc`Gtk`.Widget.size_allocate]
     * function.
     * 
     * Use this function instead of [method`Gtk`.Widget.queue_resize]
     * when the `widget'`s size request didn't change but it wants to
     * reposition its contents.
     * 
     * An example user of this function is [method`Gtk`.Widget.set_halign].
     * 
     * This function is only for use in widget implementations.
     */
    queueAllocate(): void
    /**
     * Schedules this widget to be redrawn in the paint phase
     * of the current or the next frame.
     * 
     * This means `widget'`s [vfunc`Gtk`.Widget.snapshot]
     * implementation will be called.
     */
    queueDraw(): void
    /**
     * Flags a widget to have its size renegotiated.
     * 
     * This should be called when a widget for some reason has a new
     * size request. For example, when you change the text in a
     * [class`Gtk`.Label], the label queues a resize to ensure there’s
     * enough space for the new text.
     * 
     * Note that you cannot call gtk_widget_queue_resize() on a widget
     * from inside its implementation of the [vfunc`Gtk`.Widget.size_allocate]
     * virtual method. Calls to gtk_widget_queue_resize() from inside
     * [vfunc`Gtk`.Widget.size_allocate] will be silently ignored.
     * 
     * This function is only for use in widget implementations.
     */
    queueResize(): void
    /**
     * Creates the GDK resources associated with a widget.
     * 
     * Normally realization happens implicitly; if you show a widget
     * and all its parent containers, then the widget will be realized
     * and mapped automatically.
     * 
     * Realizing a widget requires all the widget’s parent widgets to be
     * realized; calling this function realizes the widget’s parents
     * in addition to `widget` itself. If a widget is not yet inside a
     * toplevel window when you realize it, bad things will happen.
     * 
     * This function is primarily used in widget implementations, and
     * isn’t very useful otherwise. Many times when you think you might
     * need it, a better approach is to connect to a signal that will be
     * called after the widget is realized automatically, such as
     * [signal`Gtk`.Widget::realize].
     */
    realize(): void
    /**
     * Removes `controller` from `widget,` so that it doesn't process
     * events anymore.
     * 
     * It should not be used again.
     * 
     * Widgets will remove all event controllers automatically when they
     * are destroyed, there is normally no need to call this function.
     */
    removeController(controller: Gtk.EventController): void
    /**
     * Removes a style from `widget`.
     * 
     * After this, the style of `widget` will stop matching for `css_class`.
     */
    removeCssClass(cssClass: string): void
    /**
     * Removes a widget from the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. The widget must
     * have previously been added to the list with
     * [method`Gtk`.Widget.add_mnemonic_label].
     */
    removeMnemonicLabel(label: Gtk.Widget): void
    /**
     * Removes a tick callback previously registered with
     * gtk_widget_add_tick_callback().
     */
    removeTickCallback(id: number): void
    /**
     * Specifies whether the input focus can enter the widget
     * or any of its children.
     * 
     * Applications should set `can_focus` to %FALSE to mark a
     * widget as for pointer/touch use only.
     * 
     * Note that having `can_focus` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and focusable and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setCanFocus(canFocus: boolean): void
    /**
     * Sets whether `widget` can be the target of pointer events.
     */
    setCanTarget(canTarget: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its parent.
     * 
     * The child visibility can be set for widget before it is added
     * to a container with [method`Gtk`.Widget.set_parent], to avoid
     * mapping children unnecessary before immediately unmapping them.
     * However it will be reset to its default state of %TRUE when the
     * widget is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    setChildVisible(childVisible: boolean): void
    /**
     * Clear all style classes applied to `widget`
     * and replace them with `classes`.
     */
    setCssClasses(classes: string[]): void
    /**
     * Sets the cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * If the `cursor` is NULL, `widget` will use the cursor
     * inherited from the parent widget.
     */
    setCursor(cursor?: Gdk.Cursor | null): void
    /**
     * Sets a named cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * This is a utility function that creates a cursor via
     * [ctor`Gdk`.Cursor.new_from_name] and then sets it on `widget`
     * with [method`Gtk`.Widget.set_cursor]. See those functions for
     * details.
     * 
     * On top of that, this function allows `name` to be %NULL, which
     * will do the same as calling [method`Gtk`.Widget.set_cursor]
     * with a %NULL cursor.
     */
    setCursorFromName(name?: string | null): void
    /**
     * Sets the reading direction on a particular widget.
     * 
     * This direction controls the primary direction for widgets
     * containing text, and also the direction in which the children
     * of a container are packed. The ability to set the direction is
     * present in order so that correct localization into languages with
     * right-to-left reading directions can be done. Generally, applications
     * will let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitly
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by [func`Gtk`.Widget.set_default_direction] will be used.
     */
    setDirection(dir: Gtk.TextDirection): void
    /**
     * Set `child` as the current focus child of `widget`.
     * 
     * This function is only suitable for widget implementations.
     * If you want a certain widget to get the input focus, call
     * [method`Gtk`.Widget.grab_focus] on it.
     */
    setFocusChild(child?: Gtk.Widget | null): void
    /**
     * Sets whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * Making mouse clicks not grab focus is useful in places like
     * toolbars where you don’t want the keyboard focus removed from
     * the main area of the application.
     */
    setFocusOnClick(focusOnClick: boolean): void
    /**
     * Specifies whether `widget` can own the input focus.
     * 
     * Widget implementations should set `focusable` to %TRUE in
     * their init() function if they want to receive keyboard input.
     * 
     * Note that having `focusable` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and can-focus and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setFocusable(focusable: boolean): void
    /**
     * Sets the font map to use for Pango rendering.
     * 
     * The font map is the object that is used to look up fonts.
     * Setting a custom font map can be useful in special situations,
     * e.g. when you need to add application-specific fonts to the set
     * of available fonts.
     * 
     * When not set, the widget will inherit the font map from its parent.
     */
    setFontMap(fontMap?: Pango.FontMap | null): void
    /**
     * Sets the `cairo_font_options_t` used for Pango rendering
     * in this widget.
     * 
     * When not set, the default font options for the `GdkDisplay`
     * will be used.
     */
    setFontOptions(options?: cairo.FontOptions | null): void
    /**
     * Sets the horizontal alignment of `widget`.
     */
    setHalign(align: Gtk.Align): void
    /**
     * Sets the `has-tooltip` property on `widget` to `has_tooltip`.
     */
    setHasTooltip(hasTooltip: boolean): void
    /**
     * Sets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Call this function to set the expand flag if you would like your
     * widget to become larger horizontally when the window has extra
     * room.
     * 
     * By default, widgets automatically expand if any of their children
     * want to expand. (To see if a widget will automatically expand given
     * its current children and state, call [method`Gtk`.Widget.compute_expand].
     * A container can decide how the expandability of children affects the
     * expansion of the container by overriding the compute_expand virtual
     * method on `GtkWidget`.).
     * 
     * Setting hexpand explicitly with this function will override the
     * automatic expand behavior.
     * 
     * This function forces the widget to expand or not to expand,
     * regardless of children.  The override occurs because
     * [method`Gtk`.Widget.set_hexpand] sets the hexpand-set property (see
     * [method`Gtk`.Widget.set_hexpand_set]) which causes the widget’s hexpand
     * value to be used, rather than looking at children and widget state.
     */
    setHexpand(expand: boolean): void
    /**
     * Sets whether the hexpand flag will be used.
     * 
     * The [property`Gtk`.Widget:hexpand-set] property will be set
     * automatically when you call [method`Gtk`.Widget.set_hexpand]
     * to set hexpand, so the most likely reason to use this function
     * would be to unset an explicit expand flag.
     * 
     * If hexpand is set, then it overrides any computed
     * expand value based on child widgets. If hexpand is not
     * set, then the expand value depends on whether any
     * children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    setHexpandSet(set: boolean): void
    /**
     * Sets the layout manager delegate instance that provides an
     * implementation for measuring and allocating the children of `widget`.
     */
    setLayoutManager(layoutManager?: Gtk.LayoutManager | null): void
    /**
     * Sets the bottom margin of `widget`.
     */
    setMarginBottom(margin: number): void
    /**
     * Sets the end margin of `widget`.
     */
    setMarginEnd(margin: number): void
    /**
     * Sets the start margin of `widget`.
     */
    setMarginStart(margin: number): void
    /**
     * Sets the top margin of `widget`.
     */
    setMarginTop(margin: number): void
    /**
     * Sets a widgets name.
     * 
     * Setting a name allows you to refer to the widget from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for [class`Gtk`.StyleContext].
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     */
    setName(name: string): void
    /**
     * Request the `widget` to be rendered partially transparent.
     * 
     * An opacity of 0 is fully transparent and an opacity of 1
     * is fully opaque.
     * 
     * Opacity works on both toplevel widgets and child widgets, although
     * there are some limitations: For toplevel widgets, applying opacity
     * depends on the capabilities of the windowing system. On X11, this
     * has any effect only on X displays with a compositing manager,
     * see gdk_display_is_composited(). On Windows and Wayland it should
     * always work, although setting a window’s opacity after the window
     * has been shown may cause some flicker.
     * 
     * Note that the opacity is inherited through inclusion — if you set
     * a toplevel to be partially translucent, all of its content will
     * appear translucent, since it is ultimatively rendered on that
     * toplevel. The opacity value itself is not inherited by child
     * widgets (since that would make widgets deeper in the hierarchy
     * progressively more translucent). As a consequence, [class`Gtk`.Popover]s
     * and other [iface`Gtk`.Native] widgets with their own surface will use their
     * own opacity value, and thus by default appear non-translucent,
     * even if they are attached to a toplevel that is translucent.
     */
    setOpacity(opacity: number): void
    /**
     * Sets how `widget` treats content that is drawn outside the
     * widget's content area.
     * 
     * See the definition of [enum`Gtk`.Overflow] for details.
     * 
     * This setting is provided for widget implementations and
     * should not be used by application code.
     * 
     * The default value is %GTK_OVERFLOW_VISIBLE.
     */
    setOverflow(overflow: Gtk.Overflow): void
    /**
     * Sets `parent` as the parent widget of `widget`.
     * 
     * This takes care of details such as updating the state and style
     * of the child to reflect its new location and resizing the parent.
     * The opposite function is [method`Gtk`.Widget.unparent].
     * 
     * This function is useful only when implementing subclasses of
     * `GtkWidget`.
     */
    setParent(parent: Gtk.Widget): void
    /**
     * Specifies whether `widget` will be treated as the default
     * widget within its toplevel when it has the focus, even if
     * another widget is the default.
     */
    setReceivesDefault(receivesDefault: boolean): void
    /**
     * Sets the sensitivity of a widget.
     * 
     * A widget is sensitive if the user can interact with it.
     * Insensitive widgets are “grayed out” and the user can’t
     * interact with them. Insensitive widgets are known as
     * “inactive”, “disabled”, or “ghosted” in some other toolkits.
     */
    setSensitive(sensitive: boolean): void
    /**
     * Sets the minimum size of a widget.
     * 
     * That is, the widget’s size request will be at least `width`
     * by `height`. You can use this function to force a widget to
     * be larger than it normally would be.
     * 
     * In most cases, [method`Gtk`.Window.set_default_size] is a better
     * choice for toplevel windows than this function; setting the default
     * size will still allow users to shrink the window. Setting the size
     * request will force them to leave the window at least as large as
     * the size request.
     * 
     * Note the inherent danger of setting any fixed size - themes,
     * translations into other languages, different fonts, and user action
     * can all change the appropriate size for a given widget. So, it's
     * basically impossible to hardcode a size that will always be
     * correct.
     * 
     * The size request of a widget is the smallest size a widget can
     * accept while still functioning well and drawing itself correctly.
     * However in some strange cases a widget may be allocated less than
     * its requested size, and in many cases a widget may be allocated more
     * space than it requested.
     * 
     * If the size request in a given direction is -1 (unset), then
     * the “natural” size request of the widget will be used instead.
     * 
     * The size request set here does not include any margin from the
     * properties
     * [property`Gtk`.Widget:margin-start],
     * [property`Gtk`.Widget:margin-end],
     * [property`Gtk`.Widget:margin-top], and
     * [property`Gtk`.Widget:margin-bottom], but it does include pretty
     * much all other padding or border properties set by any subclass
     * of `GtkWidget`.
     */
    setSizeRequest(width: number, height: number): void
    /**
     * Turns on flag values in the current widget state.
     * 
     * Typical widget states are insensitive, prelighted, etc.
     * 
     * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
     * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set
     * the widget's direction, use [method`Gtk`.Widget.set_direction].
     * 
     * This function is for use in widget implementations.
     */
    setStateFlags(flags: Gtk.StateFlags, clear: boolean): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked
     * up with Pango markup.
     * 
     * This function will take care of setting the
     * [property`Gtk`.Widget:has-tooltip] as a side effect, and of the
     * default handler for the [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_markup].
     */
    setTooltipMarkup(markup?: string | null): void
    /**
     * Sets `text` as the contents of the tooltip.
     * 
     * If `text` contains any markup, it will be escaped.
     * 
     * This function will take care of setting
     * [property`Gtk`.Widget:has-tooltip] as a side effect,
     * and of the default handler for the
     * [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_text].
     */
    setTooltipText(text?: string | null): void
    /**
     * Sets the vertical alignment of `widget`.
     */
    setValign(align: Gtk.Align): void
    /**
     * Sets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.set_hexpand] for more detail.
     */
    setVexpand(expand: boolean): void
    /**
     * Sets whether the vexpand flag will be used.
     * 
     * See [method`Gtk`.Widget.set_hexpand_set] for more detail.
     */
    setVexpandSet(set: boolean): void
    /**
     * Sets the visibility state of `widget`.
     * 
     * Note that setting this to %TRUE doesn’t mean the widget is
     * actually viewable, see [method`Gtk`.Widget.get_visible].
     * 
     * This function simply calls [method`Gtk`.Widget.show] or
     * [method`Gtk`.Widget.hide] but is nicer to use when the
     * visibility of the widget depends on some condition.
     */
    setVisible(visible: boolean): void
    /**
     * Returns whether `widget` should contribute to
     * the measuring and allocation of its parent.
     * 
     * This is %FALSE for invisible children, but also
     * for children that have their own surface.
     */
    shouldLayout(): boolean
    /**
     * Flags a widget to be displayed.
     * 
     * Any widget that isn’t shown will not appear on the screen.
     * 
     * Remember that you have to show the containers containing a widget,
     * in addition to the widget itself, before it will appear onscreen.
     * 
     * When a toplevel container is shown, it is immediately realized and
     * mapped; other shown widgets are realized and mapped when their
     * toplevel container is realized and mapped.
     */
    show(): void
    /**
     * Allocates widget with a transformation that translates
     * the origin to the position in `allocation`.
     * 
     * This is a simple form of [method`Gtk`.Widget.allocate].
     */
    sizeAllocate(allocation: Gtk.Allocation, baseline: number): void
    /**
     * Snapshot the a child of `widget`.
     * 
     * When a widget receives a call to the snapshot function,
     * it must send synthetic [vfunc`Gtk`.Widget.snapshot] calls
     * to all children. This function provides a convenient way
     * of doing this. A widget, when it receives a call to its
     * [vfunc`Gtk`.Widget.snapshot] function, calls
     * gtk_widget_snapshot_child() once for each child, passing in
     * the `snapshot` the widget received.
     * 
     * gtk_widget_snapshot_child() takes care of translating the origin of
     * `snapshot,` and deciding whether the child needs to be snapshot.
     * 
     * This function does nothing for children that implement `GtkNative`.
     */
    snapshotChild(child: Gtk.Widget, snapshot: Gtk.Snapshot): void
    /**
     * Translate coordinates relative to `src_widget’`s allocation
     * to coordinates relative to `dest_widget’`s allocations.
     * 
     * In order to perform this operation, both widget must share
     * a common ancestor.
     */
    translateCoordinates(destWidget: Gtk.Widget, srcX: number, srcY: number): [ /* returnType */ boolean, /* destX */ number | null, /* destY */ number | null ]
    /**
     * Triggers a tooltip query on the display where the toplevel
     * of `widget` is located.
     */
    triggerTooltipQuery(): void
    /**
     * Causes a widget to be unmapped if it’s currently mapped.
     * 
     * This function is only for use in widget implementations.
     */
    unmap(): void
    /**
     * Dissociate `widget` from its parent.
     * 
     * This function is only for use in widget implementations,
     * typically in dispose.
     */
    unparent(): void
    /**
     * Causes a widget to be unrealized (frees all GDK resources
     * associated with the widget).
     * 
     * This function is only useful in widget implementations.
     */
    unrealize(): void
    /**
     * Turns off flag values for the current widget state.
     * 
     * See [method`Gtk`.Widget.set_state_flags].
     * 
     * This function is for use in widget implementations.
     */
    unsetStateFlags(flags: Gtk.StateFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Methods of Gtk-4.0.Gtk.Accessible */
    /**
     * Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
     */
    getAccessibleRole(): Gtk.AccessibleRole
    /**
     * Resets the accessible `property` to its default value.
     */
    resetProperty(property: Gtk.AccessibleProperty): void
    /**
     * Resets the accessible `relation` to its default value.
     */
    resetRelation(relation: Gtk.AccessibleRelation): void
    /**
     * Resets the accessible `state` to its default value.
     */
    resetState(state: Gtk.AccessibleState): void
    /**
     * Updates an array of accessible properties.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * property change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateProperty(properties: Gtk.AccessibleProperty[], values: any[]): void
    /**
     * Updates an array of accessible relations.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * relation change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateRelation(relations: Gtk.AccessibleRelation[], values: any[]): void
    /**
     * Updates an array of accessible states.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * state change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateState(states: Gtk.AccessibleState[], values: any[]): void
    /* Methods of Gtk-4.0.Gtk.Actionable */
    /**
     * Gets the action name for `actionable`.
     */
    getActionName(): string | null
    /**
     * Gets the current target value of `actionable`.
     */
    getActionTargetValue(): GLib.Variant | null
    /**
     * Specifies the name of the action with which this widget should be
     * associated.
     * 
     * If `action_name` is %NULL then the widget will be unassociated from
     * any previous action.
     * 
     * Usually this function is used when the widget is located (or will be
     * located) within the hierarchy of a `GtkApplicationWindow`.
     * 
     * Names are of the form “win.save” or “app.quit” for actions on the
     * containing [class`ApplicationWindow]` or its associated [class`Application]`,
     * respectively. This is the same form used for actions in the [class`Gio`.Menu]
     * associated with the window.
     */
    setActionName(actionName?: string | null): void
    /**
     * Sets the target value of an actionable widget.
     * 
     * If `target_value` is %NULL then the target value is unset.
     * 
     * The target value has two purposes. First, it is used as the parameter
     * to activation of the action associated with the `GtkActionable` widget.
     * Second, it is used to determine if the widget should be rendered as
     * “active” — the widget is active if the state is equal to the given target.
     * 
     * Consider the example of associating a set of buttons with a [iface`Gio`.Action]
     * with string state in a typical “radio button” situation. Each button
     * will be associated with the same action, but with a different target
     * value for that action. Clicking on a particular button will activate
     * the action with the target of that button, which will typically cause
     * the action’s state to change to that value. Since the action’s state
     * is now equal to the target value of the button, the button will now
     * be rendered as active (and the other buttons, with different targets,
     * rendered inactive).
     */
    setActionTargetValue(targetValue?: GLib.Variant | null): void
    /**
     * Sets the action-name and associated string target value of an
     * actionable widget.
     * 
     * `detailed_action_name` is a string in the format accepted by
     * [func`Gio`.Action.parse_detailed_name].
     */
    setDetailedActionName(detailedActionName: string): void
    /* Methods of Gtk-4.0.Gtk.Buildable */
    /**
     * Gets the ID of the `buildable` object.
     * 
     * `GtkBuilder` sets the name based on the ID attribute
     * of the <object> tag used to construct the `buildable`.
     */
    getBuildableId(): string | null
    /* Signals of GtkSource-5.GtkSource.StyleSchemePreview */
    connect(sigName: "activate", callback: (() => void)): number
    on(sigName: "activate", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "activate", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "activate", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "activate"): void
    /* Signals of Gtk-4.0.Gtk.Widget */
    /**
     * Signals that all holders of a reference to the widget should release
     * the reference that they hold.
     * 
     * May result in finalization of the widget if all references are released.
     * 
     * This signal is not suitable for saving widget state.
     */
    connect(sigName: "destroy", callback: (() => void)): number
    on(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "destroy", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "destroy"): void
    /**
     * Emitted when the text direction of a widget changes.
     */
    connect(sigName: "direction-changed", callback: ((previousDirection: Gtk.TextDirection) => void)): number
    on(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void): NodeJS.EventEmitter
    emit(sigName: "direction-changed", previousDirection: Gtk.TextDirection): void
    /**
     * Emitted when `widget` is hidden.
     */
    connect(sigName: "hide", callback: (() => void)): number
    on(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "hide", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "hide"): void
    /**
     * Emitted if keyboard navigation fails.
     * 
     * See [method`Gtk`.Widget.keynav_failed] for details.
     */
    connect(sigName: "keynav-failed", callback: ((direction: Gtk.DirectionType) => boolean)): number
    on(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "keynav-failed", direction: Gtk.DirectionType): void
    /**
     * Emitted when `widget` is going to be mapped.
     * 
     * A widget is mapped when the widget is visible (which is controlled with
     * [property`Gtk`.Widget:visible]) and all its parents up to the toplevel widget
     * are also visible.
     * 
     * The ::map signal can be used to determine whether a widget will be drawn,
     * for instance it can resume an animation that was stopped during the
     * emission of [signal`Gtk`.Widget::unmap].
     */
    connect(sigName: "map", callback: (() => void)): number
    on(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "map", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "map"): void
    /**
     * Emitted when a widget is activated via a mnemonic.
     * 
     * The default handler for this signal activates `widget` if `group_cycling`
     * is %FALSE, or just makes `widget` grab focus if `group_cycling` is %TRUE.
     */
    connect(sigName: "mnemonic-activate", callback: ((groupCycling: boolean) => boolean)): number
    on(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "mnemonic-activate", groupCycling: boolean): void
    /**
     * Emitted when the focus is moved.
     */
    connect(sigName: "move-focus", callback: ((direction: Gtk.DirectionType) => void)): number
    on(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "move-focus", direction: Gtk.DirectionType): void
    /**
     * Emitted when the widgets tooltip is about to be shown.
     * 
     * This happens when the [property`Gtk`.Widget:has-tooltip] property
     * is %TRUE and the hover timeout has expired with the cursor hovering
     * "above" `widget;` or emitted when `widget` got focus in keyboard mode.
     * 
     * Using the given coordinates, the signal handler should determine
     * whether a tooltip should be shown for `widget`. If this is the case
     * %TRUE should be returned, %FALSE otherwise.  Note that if
     * `keyboard_mode` is %TRUE, the values of `x` and `y` are undefined and
     * should not be used.
     * 
     * The signal handler is free to manipulate `tooltip` with the therefore
     * destined function calls.
     */
    connect(sigName: "query-tooltip", callback: ((x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => boolean)): number
    on(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void): NodeJS.EventEmitter
    emit(sigName: "query-tooltip", x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip): void
    /**
     * Emitted when `widget` is associated with a `GdkSurface`.
     * 
     * This means that [method`Gtk`.Widget.realize] has been called
     * or the widget has been mapped (that is, it is going to be drawn).
     */
    connect(sigName: "realize", callback: (() => void)): number
    on(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "realize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "realize"): void
    /**
     * Emitted when `widget` is shown.
     */
    connect(sigName: "show", callback: (() => void)): number
    on(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "show"): void
    /**
     * Emitted when the widget state changes.
     * 
     * See [method`Gtk`.Widget.get_state_flags].
     */
    connect(sigName: "state-flags-changed", callback: ((flags: Gtk.StateFlags) => void)): number
    on(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void): NodeJS.EventEmitter
    emit(sigName: "state-flags-changed", flags: Gtk.StateFlags): void
    /**
     * Emitted when `widget` is going to be unmapped.
     * 
     * A widget is unmapped when either it or any of its parents up to the
     * toplevel widget have been set as hidden.
     * 
     * As ::unmap indicates that a widget will not be shown any longer,
     * it can be used to, for example, stop an animation on the widget.
     */
    connect(sigName: "unmap", callback: (() => void)): number
    on(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unmap", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unmap"): void
    /**
     * Emitted when the `GdkSurface` associated with `widget` is destroyed.
     * 
     * This means that [method`Gtk`.Widget.unrealize] has been called
     * or the widget has been unmapped (that is, it is going to be hidden).
     */
    connect(sigName: "unrealize", callback: (() => void)): number
    on(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unrealize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::selected", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selected", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::action-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::action-name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::action-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::action-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::action-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::action-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::action-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::action-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::action-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::action-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: StyleSchemePreview_ConstructProps)
    _init (config?: StyleSchemePreview_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(scheme: StyleScheme): StyleSchemePreview
    static $gtype: GObject.Type
}
interface Tag_ConstructProps extends Gtk.TextTag_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.Tag */
    /**
     * Whether to draw white spaces.
     * 
     * This property takes precedence over the value defined by the [class`SpaceDrawer]`'s
     * [property`SpaceDrawer:`matrix] property (only where the tag is applied).
     * 
     * Setting this property also changes [property`Tag:`draw-spaces-set] to
     * %TRUE.
     */
    drawSpaces?: boolean
    /**
     * Whether the [property`Tag:`draw-spaces] property is set and must be
     * taken into account.
     */
    drawSpacesSet?: boolean
}
class Tag {
    /* Properties of GtkSource-5.GtkSource.Tag */
    /**
     * Whether to draw white spaces.
     * 
     * This property takes precedence over the value defined by the [class`SpaceDrawer]`'s
     * [property`SpaceDrawer:`matrix] property (only where the tag is applied).
     * 
     * Setting this property also changes [property`Tag:`draw-spaces-set] to
     * %TRUE.
     */
    drawSpaces: boolean
    /**
     * Whether the [property`Tag:`draw-spaces] property is set and must be
     * taken into account.
     */
    drawSpacesSet: boolean
    /* Properties of Gtk-4.0.Gtk.TextTag */
    /**
     * Whether the margins accumulate or override each other.
     * 
     * When set to %TRUE the margins of this tag are added to the margins
     * of any other non-accumulative margins present. When set to %FALSE
     * the margins override one another (the default).
     */
    accumulativeMargin: boolean
    /**
     * Whether breaks are allowed.
     */
    allowBreaks: boolean
    allowBreaksSet: boolean
    /**
     * Background color as a string.
     */
    background: string
    /**
     * Whether the background color fills the entire line height
     * or only the height of the tagged characters.
     */
    backgroundFullHeight: boolean
    backgroundFullHeightSet: boolean
    /**
     * Background color as a `GdkRGBA`.
     */
    backgroundRgba: Gdk.RGBA
    backgroundSet: boolean
    /**
     * Text direction, e.g. right-to-left or left-to-right.
     */
    direction: Gtk.TextDirection
    /**
     * Whether the text can be modified by the user.
     */
    editable: boolean
    editableSet: boolean
    /**
     * Whether font fallback is enabled.
     * 
     * When set to %TRUE, other fonts will be substituted
     * where the current font is missing glyphs.
     */
    fallback: boolean
    fallbackSet: boolean
    /**
     * Name of the font family, e.g. Sans, Helvetica, Times, Monospace.
     */
    family: string
    familySet: boolean
    /**
     * Font description as string, e.g. \"Sans Italic 12\".
     * 
     * Note that the initial value of this property depends on
     * the internals of `PangoFontDescription`.
     */
    font: string
    /**
     * Font description as a `PangoFontDescription`.
     */
    fontDesc: Pango.FontDescription
    /**
     * OpenType font features, as a string.
     */
    fontFeatures: string
    fontFeaturesSet: boolean
    /**
     * Foreground color as a string.
     */
    foreground: string
    /**
     * Foreground color as a `GdkRGBA`.
     */
    foregroundRgba: Gdk.RGBA
    foregroundSet: boolean
    /**
     * Amount to indent the paragraph, in pixels.
     */
    indent: number
    indentSet: boolean
    /**
     * Whether to insert hyphens at breaks.
     */
    insertHyphens: boolean
    insertHyphensSet: boolean
    /**
     * Whether this text is hidden.
     * 
     * Note that there may still be problems with the support for invisible
     * text, in particular when navigating programmatically inside a buffer
     * containing invisible segments.
     */
    invisible: boolean
    invisibleSet: boolean
    /**
     * Left, right, or center justification.
     */
    justification: Gtk.Justification
    justificationSet: boolean
    /**
     * The language this text is in, as an ISO code.
     * 
     * Pango can use this as a hint when rendering the text.
     * If not set, an appropriate default will be used.
     * 
     * Note that the initial value of this property depends
     * on the current locale, see also [func`Gtk`.get_default_language].
     */
    language: string
    languageSet: boolean
    /**
     * Width of the left margin in pixels.
     */
    leftMargin: number
    leftMarginSet: boolean
    /**
     * Extra spacing between graphemes, in Pango units.
     */
    letterSpacing: number
    letterSpacingSet: boolean
    lineHeight: number
    lineHeightSet: boolean
    /**
     * Style of overline for this text.
     */
    overline: Pango.Overline
    /**
     * This property modifies the color of overlines.
     * 
     * If not set, overlines will use the foreground color.
     */
    overlineRgba: Gdk.RGBA
    overlineRgbaSet: boolean
    overlineSet: boolean
    /**
     * The paragraph background color as a string.
     */
    paragraphBackground: string
    /**
     * The paragraph background color as a `GdkRGBA`.
     */
    paragraphBackgroundRgba: Gdk.RGBA
    paragraphBackgroundSet: boolean
    /**
     * Pixels of blank space above paragraphs.
     */
    pixelsAboveLines: number
    pixelsAboveLinesSet: boolean
    /**
     * Pixels of blank space below paragraphs.
     */
    pixelsBelowLines: number
    pixelsBelowLinesSet: boolean
    /**
     * Pixels of blank space between wrapped lines in a paragraph.
     */
    pixelsInsideWrap: number
    pixelsInsideWrapSet: boolean
    /**
     * Width of the right margin, in pixels.
     */
    rightMargin: number
    rightMarginSet: boolean
    /**
     * Offset of text above the baseline, in Pango units.
     * 
     * Negative values go below the baseline.
     */
    rise: number
    riseSet: boolean
    /**
     * Font size as a scale factor relative to the default font size.
     * 
     * This properly adapts to theme changes, etc. so is recommended.
     * Pango predefines some scales such as %PANGO_SCALE_X_LARGE.
     */
    scale: number
    scaleSet: boolean
    /**
     * Whether this tag represents a single sentence.
     * 
     * This affects cursor movement.
     */
    sentence: boolean
    sentenceSet: boolean
    /**
     * How to render invisible characters.
     */
    showSpaces: Pango.ShowFlags
    showSpacesSet: boolean
    /**
     * Font size in Pango units.
     */
    size: number
    /**
     * Font size in points.
     */
    sizePoints: number
    sizeSet: boolean
    /**
     * Font stretch as a `PangoStretch`, e.g. %PANGO_STRETCH_CONDENSED.
     */
    stretch: Pango.Stretch
    stretchSet: boolean
    /**
     * Whether to strike through the text.
     */
    strikethrough: boolean
    /**
     * This property modifies the color of strikeouts.
     * 
     * If not set, strikeouts will use the foreground color.
     */
    strikethroughRgba: Gdk.RGBA
    /**
     * If the `strikethrough-rgba` property has been set.
     */
    strikethroughRgbaSet: boolean
    strikethroughSet: boolean
    /**
     * Font style as a `PangoStyle`, e.g. %PANGO_STYLE_ITALIC.
     */
    style: Pango.Style
    styleSet: boolean
    /**
     * Custom tabs for this text.
     */
    tabs: Pango.TabArray
    tabsSet: boolean
    /**
     * How to transform the text for display.
     */
    textTransform: Pango.TextTransform
    textTransformSet: boolean
    /**
     * Style of underline for this text.
     */
    underline: Pango.Underline
    /**
     * This property modifies the color of underlines.
     * 
     * If not set, underlines will use the foreground color.
     * 
     * If [property`Gtk`.TextTag:underline] is set to %PANGO_UNDERLINE_ERROR,
     * an alternate color may be applied instead of the foreground. Setting
     * this property will always override those defaults.
     */
    underlineRgba: Gdk.RGBA
    /**
     * If the `underline-rgba` property has been set.
     */
    underlineRgbaSet: boolean
    underlineSet: boolean
    /**
     * Font variant as a `PangoVariant`, e.g. %PANGO_VARIANT_SMALL_CAPS.
     */
    variant: Pango.Variant
    variantSet: boolean
    /**
     * Font weight as an integer.
     */
    weight: number
    weightSet: boolean
    /**
     * Whether this tag represents a single word.
     * 
     * This affects line breaks and cursor movement.
     */
    word: boolean
    wordSet: boolean
    /**
     * Whether to wrap lines never, at word boundaries, or
     * at character boundaries.
     */
    wrapMode: Gtk.WrapMode
    wrapModeSet: boolean
    /* Fields of Gtk-4.0.Gtk.TextTag */
    readonly parentInstance: GObject.Object
    readonly priv: Gtk.TextTagPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of Gtk-4.0.Gtk.TextTag */
    /**
     * Emits the [signal`Gtk`.TextTagTable::tag-changed] signal on the
     * `GtkTextTagTable` where the tag is included.
     * 
     * The signal is already emitted when setting a `GtkTextTag` property.
     * This function is useful for a `GtkTextTag` subclass.
     */
    changed(sizeChanged: boolean): void
    /**
     * Get the tag priority.
     */
    getPriority(): number
    /**
     * Sets the priority of a `GtkTextTag`.
     * 
     * Valid priorities start at 0 and go to one less than
     * [method`Gtk`.TextTagTable.get_size]. Each tag in a table
     * has a unique priority; setting the priority of one tag shifts
     * the priorities of all the other tags in the table to maintain
     * a unique priority for each tag.
     * 
     * Higher priority tags “win” if two tags both set the same text
     * attribute. When adding a tag to a tag table, it will be assigned
     * the highest priority in the table by default; so normally the
     * precedence of a set of tags is the order in which they were added
     * to the table, or created with [method`Gtk`.TextBuffer.create_tag],
     * which adds the tag to the buffer’s table automatically.
     */
    setPriority(priority: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::draw-spaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draw-spaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draw-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draw-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draw-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::draw-spaces-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draw-spaces-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::draw-spaces-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::draw-spaces-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::draw-spaces-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accumulative-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accumulative-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accumulative-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accumulative-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accumulative-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::allow-breaks", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::allow-breaks", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::allow-breaks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::allow-breaks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::allow-breaks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::allow-breaks-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::allow-breaks-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::allow-breaks-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::allow-breaks-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::allow-breaks-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::background", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::background-full-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-full-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::background-full-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::background-full-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::background-full-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::background-full-height-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-full-height-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::background-full-height-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::background-full-height-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::background-full-height-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::background-rgba", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-rgba", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::background-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::background-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::background-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::background-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::background-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::background-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::background-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::direction", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::direction", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::editable-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::editable-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::editable-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::editable-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::editable-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fallback", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fallback", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fallback", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fallback", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fallback", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::fallback-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fallback-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::fallback-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::fallback-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::fallback-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::family", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::family", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::family", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::family-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::family-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::family-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::family-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::family-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::font", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::font", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::font", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::font", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::font-desc", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font-desc", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::font-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::font-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::font-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::font-features", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font-features", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::font-features", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::font-features", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::font-features", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::font-features-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font-features-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::font-features-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::font-features-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::font-features-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::foreground", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::foreground", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::foreground", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::foreground", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::foreground", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::foreground-rgba", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::foreground-rgba", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::foreground-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::foreground-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::foreground-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::foreground-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::foreground-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::foreground-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::foreground-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::foreground-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::insert-hyphens", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::insert-hyphens", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::insert-hyphens", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::insert-hyphens", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::insert-hyphens", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::insert-hyphens-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::insert-hyphens-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::insert-hyphens-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::insert-hyphens-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::insert-hyphens-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::invisible", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::invisible", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::invisible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::invisible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::invisible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::invisible-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::invisible-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::invisible-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::invisible-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::invisible-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::justification", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::justification", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::justification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::justification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::justification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::justification-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::justification-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::justification-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::justification-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::justification-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::language", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::language", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::language-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::language-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::language-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::language-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::language-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::left-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::left-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::left-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::left-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::left-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::left-margin-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::left-margin-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::left-margin-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::left-margin-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::left-margin-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::letter-spacing", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::letter-spacing", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::letter-spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::letter-spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::letter-spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::letter-spacing-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::letter-spacing-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::letter-spacing-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::letter-spacing-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::letter-spacing-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::line-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::line-height", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::line-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::line-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::line-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::line-height-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::line-height-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::line-height-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::line-height-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::line-height-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overline", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overline", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overline-rgba", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overline-rgba", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overline-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overline-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overline-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overline-rgba-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overline-rgba-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overline-rgba-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overline-rgba-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overline-rgba-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overline-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overline-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overline-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overline-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overline-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::paragraph-background", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::paragraph-background", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::paragraph-background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::paragraph-background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::paragraph-background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::paragraph-background-rgba", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::paragraph-background-rgba", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::paragraph-background-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::paragraph-background-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::paragraph-background-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::paragraph-background-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::paragraph-background-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::paragraph-background-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::paragraph-background-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::paragraph-background-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pixels-above-lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-above-lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pixels-above-lines-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-above-lines-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pixels-above-lines-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pixels-above-lines-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pixels-above-lines-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pixels-below-lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-below-lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pixels-below-lines-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-below-lines-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pixels-below-lines-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pixels-below-lines-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pixels-below-lines-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pixels-inside-wrap", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-inside-wrap", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pixels-inside-wrap-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-inside-wrap-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pixels-inside-wrap-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pixels-inside-wrap-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pixels-inside-wrap-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::right-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::right-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::right-margin-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::right-margin-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::right-margin-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::right-margin-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::right-margin-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rise", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rise", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rise", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rise", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rise", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::rise-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rise-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::rise-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::rise-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::rise-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scale", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scale", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scale", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scale", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scale-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scale-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scale-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scale-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sentence", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sentence", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sentence", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sentence", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sentence", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sentence-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sentence-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sentence-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sentence-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sentence-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::show-spaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-spaces", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::show-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::show-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::show-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::show-spaces-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-spaces-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::show-spaces-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::show-spaces-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::show-spaces-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size-points", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size-points", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size-points", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size-points", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size-points", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::size-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::size-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::size-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::size-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::stretch", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stretch", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::stretch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::stretch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::stretch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::stretch-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stretch-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::stretch-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::stretch-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::stretch-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::strikethrough", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::strikethrough", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::strikethrough", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::strikethrough", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::strikethrough", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::strikethrough-rgba", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::strikethrough-rgba", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::strikethrough-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::strikethrough-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::strikethrough-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::strikethrough-rgba-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::strikethrough-rgba-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::strikethrough-rgba-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::strikethrough-rgba-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::strikethrough-rgba-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::strikethrough-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::strikethrough-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::strikethrough-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::strikethrough-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::strikethrough-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::style-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::style-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::style-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::style-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tabs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tabs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tabs-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tabs-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tabs-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tabs-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tabs-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-transform", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-transform", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-transform", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-transform", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-transform", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::text-transform-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-transform-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::text-transform-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::text-transform-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::text-transform-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::underline", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::underline", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::underline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::underline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::underline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::underline-rgba", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::underline-rgba", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::underline-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::underline-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::underline-rgba", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::underline-rgba-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::underline-rgba-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::underline-rgba-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::underline-rgba-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::underline-rgba-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::underline-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::underline-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::underline-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::underline-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::underline-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::variant", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::variant", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::variant", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::variant", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::variant", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::variant-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::variant-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::variant-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::variant-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::variant-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::weight", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::weight", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::weight", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::weight", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::weight", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::weight-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::weight-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::weight-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::weight-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::weight-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::word", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::word", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::word", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::word", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::word", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::word-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::word-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::word-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::word-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::word-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wrap-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wrap-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wrap-mode-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wrap-mode-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wrap-mode-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wrap-mode-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wrap-mode-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: Tag_ConstructProps)
    _init (config?: Tag_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(name?: string | null): Tag
    /* Function overloads */
    static new(name?: string | null): Tag
    static $gtype: GObject.Type
}
interface View_ConstructProps extends Gtk.TextView_ConstructProps {
    /* Constructor properties of GtkSource-5.GtkSource.View */
    autoIndent?: boolean
    /**
     * Draw a specific background pattern on the view.
     */
    backgroundPattern?: BackgroundPatternType
    /**
     * The property denotes if snippets should be
     * expanded when the user presses Tab after having typed a word
     * matching the snippets found in [class`SnippetManager]`.
     * 
     * The user may tab through focus-positions of the snippet if any
     * are available by pressing Tab repeatedly until the desired focus
     * position is selected.
     */
    enableSnippets?: boolean
    highlightCurrentLine?: boolean
    indentOnTab?: boolean
    /**
     * Width of an indentation step expressed in number of spaces.
     */
    indentWidth?: number
    /**
     * The property is a [iface`Indenter]` to use to indent
     * as the user types into the [class`View]`.
     */
    indenter?: Indenter
    insertSpacesInsteadOfTabs?: boolean
    /**
     * Position of the right margin.
     */
    rightMarginPosition?: number
    /**
     * Whether to display line mark pixbufs
     */
    showLineMarks?: boolean
    /**
     * Whether to display line numbers
     */
    showLineNumbers?: boolean
    /**
     * Whether to display the right margin.
     */
    showRightMargin?: boolean
    /**
     * Whether smart Backspace should be used.
     */
    smartBackspace?: boolean
    /**
     * Set the behavior of the HOME and END keys.
     */
    smartHomeEnd?: SmartHomeEndType
    /**
     * Width of a tab character expressed in number of spaces.
     */
    tabWidth?: number
    /* Constructor properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole?: Gtk.AccessibleRole
    /* Constructor properties of Gtk-4.0.Gtk.Scrollable */
    /**
     * Horizontal `GtkAdjustment` of the scrollable widget.
     * 
     * This adjustment is shared between the scrollable widget and its parent.
     */
    hadjustment?: Gtk.Adjustment
    /**
     * Determines when horizontal scrolling should start.
     */
    hscrollPolicy?: Gtk.ScrollablePolicy
    /**
     * Vertical `GtkAdjustment` of the scrollable widget.
     * 
     * This adjustment is shared between the scrollable widget and its parent.
     */
    vadjustment?: Gtk.Adjustment
    /**
     * Determines when vertical scrolling should start.
     */
    vscrollPolicy?: Gtk.ScrollablePolicy
}
class View {
    /* Properties of GtkSource-5.GtkSource.View */
    autoIndent: boolean
    /**
     * Draw a specific background pattern on the view.
     */
    backgroundPattern: BackgroundPatternType
    /**
     * The completion object associated with the view
     */
    readonly completion: Completion
    /**
     * The property denotes if snippets should be
     * expanded when the user presses Tab after having typed a word
     * matching the snippets found in [class`SnippetManager]`.
     * 
     * The user may tab through focus-positions of the snippet if any
     * are available by pressing Tab repeatedly until the desired focus
     * position is selected.
     */
    enableSnippets: boolean
    highlightCurrentLine: boolean
    indentOnTab: boolean
    /**
     * Width of an indentation step expressed in number of spaces.
     */
    indentWidth: number
    /**
     * The property is a [iface`Indenter]` to use to indent
     * as the user types into the [class`View]`.
     */
    indenter: Indenter
    insertSpacesInsteadOfTabs: boolean
    /**
     * Position of the right margin.
     */
    rightMarginPosition: number
    /**
     * Whether to display line mark pixbufs
     */
    showLineMarks: boolean
    /**
     * Whether to display line numbers
     */
    showLineNumbers: boolean
    /**
     * Whether to display the right margin.
     */
    showRightMargin: boolean
    /**
     * Whether smart Backspace should be used.
     */
    smartBackspace: boolean
    /**
     * Set the behavior of the HOME and END keys.
     */
    smartHomeEnd: SmartHomeEndType
    /**
     * The [class`SpaceDrawer]` object associated with the view.4
     */
    readonly spaceDrawer: SpaceDrawer
    /**
     * Width of a tab character expressed in number of spaces.
     */
    tabWidth: number
    /* Properties of Gtk-4.0.Gtk.TextView */
    /**
     * Whether Tab will result in a tab character being entered.
     */
    acceptsTab: boolean
    /**
     * The bottom margin for text in the text view.
     * 
     * Note that this property is confusingly named. In CSS terms,
     * the value set here is padding, and it is applied in addition
     * to the padding from the theme.
     * 
     * Don't confuse this property with [property`Gtk`.Widget:margin-bottom].
     */
    bottomMargin: number
    /**
     * The buffer which is displayed.
     */
    buffer: Gtk.TextBuffer
    /**
     * If the insertion cursor is shown.
     */
    cursorVisible: boolean
    editable: boolean
    /**
     * A menu model whose contents will be appended to the context menu.
     */
    extraMenu: Gio.MenuModel
    /**
     * Which IM (input method) module should be used for this text_view.
     * 
     * See [class`Gtk`.IMMulticontext].
     * 
     * Setting this to a non-%NULL value overrides the system-wide IM module
     * setting. See the GtkSettings [property`Gtk`.Settings:gtk-im-module] property.
     */
    imModule: string
    /**
     * Amount to indent the paragraph, in pixels.
     */
    indent: number
    /**
     * Additional hints (beyond [property`Gtk`.TextView:input-purpose])
     * that allow input methods to fine-tune their behaviour.
     */
    inputHints: Gtk.InputHints
    /**
     * The purpose of this text field.
     * 
     * This property can be used by on-screen keyboards and other input
     * methods to adjust their behaviour.
     */
    inputPurpose: Gtk.InputPurpose
    justification: Gtk.Justification
    /**
     * The default left margin for text in the text view.
     * 
     * Tags in the buffer may override the default.
     * 
     * Note that this property is confusingly named. In CSS terms,
     * the value set here is padding, and it is applied in addition
     * to the padding from the theme.
     */
    leftMargin: number
    /**
     * Whether text should be displayed in a monospace font.
     * 
     * If %TRUE, set the .monospace style class on the
     * text view to indicate that a monospace font is desired.
     */
    monospace: boolean
    /**
     * Whether entered text overwrites existing contents.
     */
    overwrite: boolean
    pixelsAboveLines: number
    pixelsBelowLines: number
    pixelsInsideWrap: number
    /**
     * The default right margin for text in the text view.
     * 
     * Tags in the buffer may override the default.
     * 
     * Note that this property is confusingly named. In CSS terms,
     * the value set here is padding, and it is applied in addition
     * to the padding from the theme.
     */
    rightMargin: number
    tabs: Pango.TabArray
    /**
     * The top margin for text in the text view.
     * 
     * Note that this property is confusingly named. In CSS terms,
     * the value set here is padding, and it is applied in addition
     * to the padding from the theme.
     * 
     * Don't confuse this property with [property`Gtk`.Widget:margin-top].
     */
    topMargin: number
    wrapMode: Gtk.WrapMode
    /* Properties of Gtk-4.0.Gtk.Widget */
    /**
     * Whether the widget or any of its descendents can accept
     * the input focus.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    canFocus: boolean
    /**
     * Whether the widget can receive pointer events.
     */
    canTarget: boolean
    /**
     * A list of css classes applied to this widget.
     */
    cssClasses: string[]
    /**
     * The cursor used by `widget`.
     */
    cursor: Gdk.Cursor
    /**
     * Whether the widget should grab focus when it is clicked with the mouse.
     * 
     * This property is only relevant for widgets that can take focus.
     */
    focusOnClick: boolean
    /**
     * Whether this widget itself will accept the input focus.
     */
    focusable: boolean
    /**
     * How to distribute horizontal space if widget gets extra space.
     */
    halign: Gtk.Align
    /**
     * Whether the widget is the default widget.
     */
    readonly hasDefault: boolean
    /**
     * Whether the widget has the input focus.
     */
    readonly hasFocus: boolean
    /**
     * Enables or disables the emission of the ::query-tooltip signal on `widget`.
     * 
     * A value of %TRUE indicates that `widget` can have a tooltip, in this case
     * the widget will be queried using [signal`Gtk`.Widget::query-tooltip] to
     * determine whether it will provide a tooltip or not.
     */
    hasTooltip: boolean
    /**
     * Override for height request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    heightRequest: number
    /**
     * Whether to expand horizontally.
     */
    hexpand: boolean
    /**
     * Whether to use the `hexpand` property.
     */
    hexpandSet: boolean
    /**
     * The `GtkLayoutManager` instance to use to compute the preferred size
     * of the widget, and allocate its children.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    layoutManager: Gtk.LayoutManager
    /**
     * Margin on bottom side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginBottom: number
    /**
     * Margin on end of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginEnd: number
    /**
     * Margin on start of widget, horizontally.
     * 
     * This property supports left-to-right and right-to-left text
     * directions.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginStart: number
    /**
     * Margin on top side of widget.
     * 
     * This property adds margin outside of the widget's normal size
     * request, the margin will be added in addition to the size from
     * [method`Gtk`.Widget.set_size_request] for example.
     */
    marginTop: number
    /**
     * The name of the widget.
     */
    name: string
    /**
     * The requested opacity of the widget.
     */
    opacity: number
    /**
     * How content outside the widget's content area is treated.
     * 
     * This property is meant to be set by widget implementations,
     * typically in their instance init function.
     */
    overflow: Gtk.Overflow
    /**
     * The parent widget of this widget.
     */
    readonly parent: Gtk.Widget
    /**
     * Whether the widget will receive the default action when it is focused.
     */
    receivesDefault: boolean
    /**
     * The `GtkRoot` widget of the widget tree containing this widget.
     * 
     * This will be %NULL if the widget is not contained in a root widget.
     */
    readonly root: Gtk.Root
    /**
     * The scale factor of the widget.
     */
    readonly scaleFactor: number
    /**
     * Whether the widget responds to input.
     */
    sensitive: boolean
    /**
     * Sets the text of tooltip to be the given string, which is marked up
     * with Pango markup.
     * 
     * Also see [method`Gtk`.Tooltip.set_markup].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipMarkup: string
    /**
     * Sets the text of tooltip to be the given string.
     * 
     * Also see [method`Gtk`.Tooltip.set_text].
     * 
     * This is a convenience property which will take care of getting the
     * tooltip shown if the given string is not %NULL:
     * [property`Gtk`.Widget:has-tooltip] will automatically be set to %TRUE
     * and there will be taken care of [signal`Gtk`.Widget::query-tooltip] in
     * the default signal handler.
     * 
     * Note that if both [property`Gtk`.Widget:tooltip-text] and
     * [property`Gtk`.Widget:tooltip-markup] are set, the last one wins.
     */
    tooltipText: string
    /**
     * How to distribute vertical space if widget gets extra space.
     */
    valign: Gtk.Align
    /**
     * Whether to expand vertically.
     */
    vexpand: boolean
    /**
     * Whether to use the `vexpand` property.
     */
    vexpandSet: boolean
    /**
     * Whether the widget is visible.
     */
    visible: boolean
    /**
     * Override for width request of the widget.
     * 
     * If this is -1, the natural request will be used.
     */
    widthRequest: number
    /* Properties of Gtk-4.0.Gtk.Accessible */
    /**
     * The accessible role of the given `GtkAccessible` implementation.
     * 
     * The accessible role cannot be changed once set.
     */
    accessibleRole: Gtk.AccessibleRole
    /* Properties of Gtk-4.0.Gtk.Scrollable */
    /**
     * Horizontal `GtkAdjustment` of the scrollable widget.
     * 
     * This adjustment is shared between the scrollable widget and its parent.
     */
    hadjustment: Gtk.Adjustment
    /**
     * Determines when horizontal scrolling should start.
     */
    hscrollPolicy: Gtk.ScrollablePolicy
    /**
     * Vertical `GtkAdjustment` of the scrollable widget.
     * 
     * This adjustment is shared between the scrollable widget and its parent.
     */
    vadjustment: Gtk.Adjustment
    /**
     * Determines when vertical scrolling should start.
     */
    vscrollPolicy: Gtk.ScrollablePolicy
    /* Fields of Gtk-4.0.Gtk.TextView */
    readonly parentInstance: Gtk.Widget
    /* Fields of GObject-2.0.GObject.InitiallyUnowned */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.View */
    /**
     * Returns whether auto-indentation of text is enabled.
     */
    getAutoIndent(): boolean
    /**
     * Returns the #GtkSourceBackgroundPatternType specifying if and how
     * the background pattern should be displayed for this `view`.
     */
    getBackgroundPattern(): BackgroundPatternType
    /**
     * Gets the [class`Completion]` associated with `view`.
     * 
     * The returned object is guaranteed to be the same for the lifetime of `view`.
     * Each `GtkSourceView` object has a different [class`Completion]`.
     */
    getCompletion(): Completion
    /**
     * Gets the [property`View:`enable-snippets] property.
     * 
     * If %TRUE, matching snippets found in the [class`SnippetManager]`
     * may be expanded when the user presses Tab after a word in the [class`View]`.
     */
    getEnableSnippets(): boolean
    /**
     * Returns the [class`Gutter]` object associated with `window_type` for `view`.
     * 
     * Only %GTK_TEXT_WINDOW_LEFT and %GTK_TEXT_WINDOW_RIGHT are supported,
     * respectively corresponding to the left and right gutter. The line numbers
     * and mark category icons are rendered in the left gutter.
     */
    getGutter(windowType: Gtk.TextWindowType): Gutter
    /**
     * Returns whether the current line is highlighted.
     */
    getHighlightCurrentLine(): boolean
    /**
     * Gets the [class`Hover]` associated with `view`.
     * 
     * The returned object is guaranteed to be the same for the lifetime of `view`.
     * Each [class`View]` object has a different [class`Hover]`.
     */
    getHover(): Hover
    /**
     * Returns whether when the tab key is pressed the current selection
     * should get indented instead of replaced with the `\t` character.
     */
    getIndentOnTab(): boolean
    /**
     * Returns the number of spaces to use for each step of indent.
     * 
     * See [method`View`.set_indent_width] for details.
     */
    getIndentWidth(): number
    /**
     * Gets the [property`View:`indenter] property.
     */
    getIndenter(): Indenter | null
    /**
     * Returns whether when inserting a tabulator character it should
     * be replaced by a group of space characters.
     */
    getInsertSpacesInsteadOfTabs(): boolean
    /**
     * Gets attributes and priority for the `category`.
     */
    getMarkAttributes(category: string, priority: number): MarkAttributes
    /**
     * Gets the position of the right margin in the given `view`.
     */
    getRightMarginPosition(): number
    /**
     * Returns whether line marks are displayed beside the text.
     */
    getShowLineMarks(): boolean
    /**
     * Returns whether line numbers are displayed beside the text.
     */
    getShowLineNumbers(): boolean
    /**
     * Returns whether a right margin is displayed.
     */
    getShowRightMargin(): boolean
    /**
     * Returns %TRUE if pressing the Backspace key will try to delete spaces
     * up to the previous tab stop.
     */
    getSmartBackspace(): boolean
    /**
     * Returns a [enum`SmartHomeEndType]` end value specifying
     * how the cursor will move when HOME and END keys are pressed.
     */
    getSmartHomeEnd(): SmartHomeEndType
    /**
     * Gets the [class`SpaceDrawer]` associated with `view`.
     * 
     * The returned object is guaranteed to be the same for the lifetime of `view`.
     * Each [class`View]` object has a different [class`SpaceDrawer]`.
     */
    getSpaceDrawer(): SpaceDrawer
    /**
     * Returns the width of tabulation in characters.
     */
    getTabWidth(): number
    /**
     * Determines the visual column at `iter` taking into consideration the
     * [property`View:`tab-width] of `view`.
     */
    getVisualColumn(iter: Gtk.TextIter): number
    /**
     * Inserts one indentation level at the beginning of the specified lines. The
     * empty lines are not indented.
     */
    indentLines(start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Inserts a new snippet at `location`
     * 
     * If another snippet was already active, it will be paused and the new
     * snippet will become active. Once the focus positions of `snippet` have
     * been exhausted, editing will return to the previous snippet.
     */
    pushSnippet(snippet: Snippet, location?: Gtk.TextIter | null): void
    /**
     * If %TRUE auto-indentation of text is enabled.
     * 
     * When Enter is pressed to create a new line, the auto-indentation inserts the
     * same indentation as the previous line. This is **not** a
     * "smart indentation" where an indentation level is added or removed depending
     * on the context.
     */
    setAutoIndent(enable: boolean): void
    /**
     * Set if and how the background pattern should be displayed.
     */
    setBackgroundPattern(backgroundPattern: BackgroundPatternType): void
    /**
     * Sets the [property`View:`enable-snippets] property.
     * 
     * If `enable_snippets` is %TRUE, matching snippets found in the
     * [class`SnippetManager]` may be expanded when the user presses
     * Tab after a word in the [class`View]`.
     */
    setEnableSnippets(enableSnippets: boolean): void
    /**
     * If `highlight` is %TRUE the current line will be highlighted.
     */
    setHighlightCurrentLine(highlight: boolean): void
    /**
     * If %TRUE, when the tab key is pressed when several lines are selected, the
     * selected lines are indented of one level instead of being replaced with a `\t`
     * character. Shift+Tab unindents the selection.
     * 
     * If the first or last line is not selected completely, it is also indented or
     * unindented.
     * 
     * When the selection doesn't span several lines, the tab key always replaces
     * the selection with a normal `\t` character.
     */
    setIndentOnTab(enable: boolean): void
    /**
     * Sets the number of spaces to use for each step of indent when the tab key is
     * pressed.
     * 
     * If `width` is -1, the value of the [property`View:`tab-width] property
     * will be used.
     * 
     * The [property`View:`indent-width] interacts with the
     * [property`View:`insert-spaces-instead-of-tabs] property and
     * [property`View:`tab-width]. An example will be clearer:
     * 
     * If the [property`View:`indent-width] is 4 and [property`View:`tab-width] is 8 and
     * [property`View:`insert-spaces-instead-of-tabs] is %FALSE, then pressing the tab
     * key at the beginning of a line will insert 4 spaces. So far so good. Pressing
     * the tab key a second time will remove the 4 spaces and insert a `\t` character
     * instead (since [property`View:`tab-width] is 8). On the other hand, if
     * [property`View:`insert-spaces-instead-of-tabs] is %TRUE, the second tab key
     * pressed will insert 4 more spaces for a total of 8 spaces in the
     * [class`Gtk`.TextBuffer].
     * 
     * The test-widget program (available in the GtkSourceView repository) may be
     * useful to better understand the indentation settings (enable the space
     * drawing!).
     */
    setIndentWidth(width: number): void
    /**
     * Sets the indenter for `view` to `indenter`.
     * 
     * Note that the indenter will not be used unless #GtkSourceView:auto-indent
     * has been set to %TRUE.
     */
    setIndenter(indenter?: Indenter | null): void
    /**
     * If %TRUE a tab key pressed is replaced by a group of space characters.
     * 
     * Of course it is still possible to insert a real `\t` programmatically with the
     * [class`Gtk`.TextBuffer] API.
     */
    setInsertSpacesInsteadOfTabs(enable: boolean): void
    /**
     * Sets attributes and priority for the `category`.
     */
    setMarkAttributes(category: string, attributes: MarkAttributes, priority: number): void
    /**
     * Sets the position of the right margin in the given `view`.
     */
    setRightMarginPosition(pos: number): void
    /**
     * If %TRUE line marks will be displayed beside the text.
     */
    setShowLineMarks(show: boolean): void
    /**
     * If %TRUE line numbers will be displayed beside the text.
     */
    setShowLineNumbers(show: boolean): void
    /**
     * If %TRUE a right margin is displayed.
     */
    setShowRightMargin(show: boolean): void
    /**
     * When set to %TRUE, pressing the Backspace key will try to delete spaces
     * up to the previous tab stop.
     */
    setSmartBackspace(smartBackspace: boolean): void
    /**
     * Set the desired movement of the cursor when HOME and END keys
     * are pressed.
     */
    setSmartHomeEnd(smartHomeEnd: SmartHomeEndType): void
    /**
     * Sets the width of tabulation in characters.
     * 
     * The #GtkTextBuffer still contains `\t` characters,
     * but they can take a different visual width in a [class`View]` widget.
     */
    setTabWidth(width: number): void
    /**
     * Removes one indentation level at the beginning of the
     * specified lines.
     */
    unindentLines(start: Gtk.TextIter, end: Gtk.TextIter): void
    /* Methods of Gtk-4.0.Gtk.TextView */
    /**
     * Adds a child widget in the text buffer, at the given `anchor`.
     */
    addChildAtAnchor(child: Gtk.Widget, anchor: Gtk.TextChildAnchor): void
    /**
     * Adds `child` at a fixed coordinate in the `GtkTextView`'s text window.
     * 
     * The `xpos` and `ypos` must be in buffer coordinates (see
     * [method`Gtk`.TextView.get_iter_location] to convert to
     * buffer coordinates).
     * 
     * `child` will scroll with the text view.
     * 
     * If instead you want a widget that will not move with the
     * `GtkTextView` contents see `GtkOverlay`.
     */
    addOverlay(child: Gtk.Widget, xpos: number, ypos: number): void
    /**
     * Moves the given `iter` backward by one display (wrapped) line.
     * 
     * A display line is different from a paragraph. Paragraphs are
     * separated by newlines or other paragraph separator characters.
     * Display lines are created by line-wrapping a paragraph. If
     * wrapping is turned off, display lines and paragraphs will be the
     * same. Display lines are divided differently for each view, since
     * they depend on the view’s width; paragraphs are the same in all
     * views, since they depend on the contents of the `GtkTextBuffer`.
     */
    backwardDisplayLine(iter: Gtk.TextIter): boolean
    /**
     * Moves the given `iter` backward to the next display line start.
     * 
     * A display line is different from a paragraph. Paragraphs are
     * separated by newlines or other paragraph separator characters.
     * Display lines are created by line-wrapping a paragraph. If
     * wrapping is turned off, display lines and paragraphs will be the
     * same. Display lines are divided differently for each view, since
     * they depend on the view’s width; paragraphs are the same in all
     * views, since they depend on the contents of the `GtkTextBuffer`.
     */
    backwardDisplayLineStart(iter: Gtk.TextIter): boolean
    /**
     * Converts buffer coordinates to window coordinates.
     */
    bufferToWindowCoords(win: Gtk.TextWindowType, bufferX: number, bufferY: number): [ /* windowX */ number | null, /* windowY */ number | null ]
    /**
     * Moves the given `iter` forward by one display (wrapped) line.
     * 
     * A display line is different from a paragraph. Paragraphs are
     * separated by newlines or other paragraph separator characters.
     * Display lines are created by line-wrapping a paragraph. If
     * wrapping is turned off, display lines and paragraphs will be the
     * same. Display lines are divided differently for each view, since
     * they depend on the view’s width; paragraphs are the same in all
     * views, since they depend on the contents of the `GtkTextBuffer`.
     */
    forwardDisplayLine(iter: Gtk.TextIter): boolean
    /**
     * Moves the given `iter` forward to the next display line end.
     * 
     * A display line is different from a paragraph. Paragraphs are
     * separated by newlines or other paragraph separator characters.
     * Display lines are created by line-wrapping a paragraph. If
     * wrapping is turned off, display lines and paragraphs will be the
     * same. Display lines are divided differently for each view, since
     * they depend on the view’s width; paragraphs are the same in all
     * views, since they depend on the contents of the `GtkTextBuffer`.
     */
    forwardDisplayLineEnd(iter: Gtk.TextIter): boolean
    /**
     * Returns whether pressing the <kbd>Tab</kbd> key inserts a tab characters.
     * 
     * See [method`Gtk`.TextView.set_accepts_tab].
     */
    getAcceptsTab(): boolean
    /**
     * Gets the bottom margin for text in the `text_view`.
     */
    getBottomMargin(): number
    /**
     * Returns the `GtkTextBuffer` being displayed by this text view.
     * 
     * The reference count on the buffer is not incremented; the caller
     * of this function won’t own a new reference.
     */
    getBuffer(): Gtk.TextBuffer
    /**
     * Determine the positions of the strong and weak cursors if the
     * insertion point is at `iter`.
     * 
     * The position of each cursor is stored as a zero-width rectangle.
     * The strong cursor location is the location where characters of
     * the directionality equal to the base direction of the paragraph
     * are inserted. The weak cursor location is the location where
     * characters of the directionality opposite to the base direction
     * of the paragraph are inserted.
     * 
     * If `iter` is %NULL, the actual cursor position is used.
     * 
     * Note that if `iter` happens to be the actual cursor position, and
     * there is currently an IM preedit sequence being entered, the
     * returned locations will be adjusted to account for the preedit
     * cursor’s offset within the preedit sequence.
     * 
     * The rectangle position is in buffer coordinates; use
     * [method`Gtk`.TextView.buffer_to_window_coords] to convert these
     * coordinates to coordinates for one of the windows in the text view.
     */
    getCursorLocations(iter?: Gtk.TextIter | null): [ /* strong */ Gdk.Rectangle | null, /* weak */ Gdk.Rectangle | null ]
    /**
     * Find out whether the cursor should be displayed.
     */
    getCursorVisible(): boolean
    /**
     * Returns the default editability of the `GtkTextView`.
     * 
     * Tags in the buffer may override this setting for some ranges of text.
     */
    getEditable(): boolean
    /**
     * Gets the menu model that gets added to the context menu
     * or %NULL if none has been set.
     */
    getExtraMenu(): Gio.MenuModel
    /**
     * Gets a `GtkWidget` that has previously been set as gutter.
     * 
     * See [method`Gtk`.TextView.set_gutter].
     * 
     * `win` must be one of %GTK_TEXT_WINDOW_LEFT, %GTK_TEXT_WINDOW_RIGHT,
     * %GTK_TEXT_WINDOW_TOP, or %GTK_TEXT_WINDOW_BOTTOM.
     */
    getGutter(win: Gtk.TextWindowType): Gtk.Widget | null
    /**
     * Gets the default indentation of paragraphs in `text_view`.
     * 
     * Tags in the view’s buffer may override the default.
     * The indentation may be negative.
     */
    getIndent(): number
    /**
     * Gets the `input-hints` of the `GtkTextView`.
     */
    getInputHints(): Gtk.InputHints
    /**
     * Gets the `input-purpose` of the `GtkTextView`.
     */
    getInputPurpose(): Gtk.InputPurpose
    /**
     * Retrieves the iterator at buffer coordinates `x` and `y`.
     * 
     * Buffer coordinates are coordinates for the entire buffer, not just
     * the currently-displayed portion. If you have coordinates from an
     * event, you have to convert those to buffer coordinates with
     * [method`Gtk`.TextView.window_to_buffer_coords].
     */
    getIterAtLocation(x: number, y: number): [ /* returnType */ boolean, /* iter */ Gtk.TextIter ]
    /**
     * Retrieves the iterator pointing to the character at buffer
     * coordinates `x` and `y`.
     * 
     * Buffer coordinates are coordinates for the entire buffer, not just
     * the currently-displayed portion. If you have coordinates from an event,
     * you have to convert those to buffer coordinates with
     * [method`Gtk`.TextView.window_to_buffer_coords].
     * 
     * Note that this is different from [method`Gtk`.TextView.get_iter_at_location],
     * which returns cursor locations, i.e. positions between characters.
     */
    getIterAtPosition(x: number, y: number): [ /* returnType */ boolean, /* iter */ Gtk.TextIter, /* trailing */ number | null ]
    /**
     * Gets a rectangle which roughly contains the character at `iter`.
     * 
     * The rectangle position is in buffer coordinates; use
     * [method`Gtk`.TextView.buffer_to_window_coords] to convert these
     * coordinates to coordinates for one of the windows in the text view.
     */
    getIterLocation(iter: Gtk.TextIter): /* location */ Gdk.Rectangle
    /**
     * Gets the default justification of paragraphs in `text_view`.
     * 
     * Tags in the buffer may override the default.
     */
    getJustification(): Gtk.Justification
    /**
     * Gets the default left margin size of paragraphs in the `text_view`.
     * 
     * Tags in the buffer may override the default.
     */
    getLeftMargin(): number
    /**
     * Gets the `GtkTextIter` at the start of the line containing
     * the coordinate `y`.
     * 
     * `y` is in buffer coordinates, convert from window coordinates with
     * [method`Gtk`.TextView.window_to_buffer_coords]. If non-%NULL,
     * `line_top` will be filled with the coordinate of the top edge
     * of the line.
     */
    getLineAtY(y: number): [ /* targetIter */ Gtk.TextIter, /* lineTop */ number ]
    /**
     * Gets the y coordinate of the top of the line containing `iter,`
     * and the height of the line.
     * 
     * The coordinate is a buffer coordinate; convert to window
     * coordinates with [method`Gtk`.TextView.buffer_to_window_coords].
     */
    getLineYrange(iter: Gtk.TextIter): [ /* y */ number, /* height */ number ]
    /**
     * Gets the `PangoContext` that is used for rendering LTR directed
     * text layouts.
     * 
     * The context may be replaced when CSS changes occur.
     */
    getLtrContext(): Pango.Context
    /**
     * Gets whether the `GtkTextView` uses monospace styling.
     */
    getMonospace(): boolean
    /**
     * Returns whether the `GtkTextView` is in overwrite mode or not.
     */
    getOverwrite(): boolean
    /**
     * Gets the default number of pixels to put above paragraphs.
     * 
     * Adding this function with [method`Gtk`.TextView.get_pixels_below_lines]
     * is equal to the line space between each paragraph.
     */
    getPixelsAboveLines(): number
    /**
     * Gets the default number of pixels to put below paragraphs.
     * 
     * The line space is the sum of the value returned by this function and
     * the value returned by [method`Gtk`.TextView.get_pixels_above_lines].
     */
    getPixelsBelowLines(): number
    /**
     * Gets the default number of pixels to put between wrapped lines
     * inside a paragraph.
     */
    getPixelsInsideWrap(): number
    /**
     * Gets the default right margin for text in `text_view`.
     * 
     * Tags in the buffer may override the default.
     */
    getRightMargin(): number
    /**
     * Gets the `PangoContext` that is used for rendering RTL directed
     * text layouts.
     * 
     * The context may be replaced when CSS changes occur.
     */
    getRtlContext(): Pango.Context
    /**
     * Gets the default tabs for `text_view`.
     * 
     * Tags in the buffer may override the defaults. The returned array
     * will be %NULL if “standard” (8-space) tabs are used. Free the
     * return value with [method`Pango`.TabArray.free].
     */
    getTabs(): Pango.TabArray | null
    /**
     * Gets the top margin for text in the `text_view`.
     */
    getTopMargin(): number
    /**
     * Fills `visible_rect` with the currently-visible
     * region of the buffer, in buffer coordinates.
     * 
     * Convert to window coordinates with
     * [method`Gtk`.TextView.buffer_to_window_coords].
     */
    getVisibleRect(): /* visibleRect */ Gdk.Rectangle
    /**
     * Gets the line wrapping for the view.
     */
    getWrapMode(): Gtk.WrapMode
    /**
     * Allow the `GtkTextView` input method to internally handle key press
     * and release events.
     * 
     * If this function returns %TRUE, then no further processing should be
     * done for this key event. See [method`Gtk`.IMContext.filter_keypress].
     * 
     * Note that you are expected to call this function from your handler
     * when overriding key event handling. This is needed in the case when
     * you need to insert your own key handling between the input method
     * and the default key event handling of the `GtkTextView`.
     * 
     * ```c
     * static gboolean
     * gtk_foo_bar_key_press_event (GtkWidget *widget,
     *                              GdkEvent  *event)
     * {
     *   guint keyval;
     * 
     *   gdk_event_get_keyval ((GdkEvent*)event, &keyval);
     * 
     *   if (keyval == GDK_KEY_Return || keyval == GDK_KEY_KP_Enter)
     *     {
     *       if (gtk_text_view_im_context_filter_keypress (GTK_TEXT_VIEW (widget), event))
     *         return TRUE;
     *     }
     * 
     *   // Do some stuff
     * 
     *   return GTK_WIDGET_CLASS (gtk_foo_bar_parent_class)->key_press_event (widget, event);
     * }
     * ```
     */
    imContextFilterKeypress(event: Gdk.Event): boolean
    /**
     * Moves a mark within the buffer so that it's
     * located within the currently-visible text area.
     */
    moveMarkOnscreen(mark: Gtk.TextMark): boolean
    /**
     * Updates the position of a child.
     * 
     * See [method`Gtk`.TextView.add_overlay].
     */
    moveOverlay(child: Gtk.Widget, xpos: number, ypos: number): void
    /**
     * Move the iterator a given number of characters visually, treating
     * it as the strong cursor position.
     * 
     * If `count` is positive, then the new strong cursor position will
     * be `count` positions to the right of the old cursor position.
     * If `count` is negative then the new strong cursor position will
     * be `count` positions to the left of the old cursor position.
     * 
     * In the presence of bi-directional text, the correspondence
     * between logical and visual order will depend on the direction
     * of the current run, and there may be jumps when the cursor
     * is moved off of the end of a run.
     */
    moveVisually(iter: Gtk.TextIter, count: number): boolean
    /**
     * Moves the cursor to the currently visible region of the
     * buffer.
     */
    placeCursorOnscreen(): boolean
    /**
     * Removes a child widget from `text_view`.
     */
    remove(child: Gtk.Widget): void
    /**
     * Ensures that the cursor is shown.
     * 
     * This also resets the time that it will stay blinking (or
     * visible, in case blinking is disabled).
     * 
     * This function should be called in response to user input
     * (e.g. from derived classes that override the textview's
     * event handlers).
     */
    resetCursorBlink(): void
    /**
     * Reset the input method context of the text view if needed.
     * 
     * This can be necessary in the case where modifying the buffer
     * would confuse on-going input method behavior.
     */
    resetImContext(): void
    /**
     * Scrolls `text_view` the minimum distance such that `mark` is contained
     * within the visible area of the widget.
     */
    scrollMarkOnscreen(mark: Gtk.TextMark): void
    /**
     * Scrolls `text_view` so that `iter` is on the screen in the position
     * indicated by `xalign` and `yalign`.
     * 
     * An alignment of 0.0 indicates left or top, 1.0 indicates right or
     * bottom, 0.5 means center. If `use_align` is %FALSE, the text scrolls
     * the minimal distance to get the mark onscreen, possibly not scrolling
     * at all. The effective screen for purposes of this function is reduced
     * by a margin of size `within_margin`.
     * 
     * Note that this function uses the currently-computed height of the
     * lines in the text buffer. Line heights are computed in an idle
     * handler; so this function may not have the desired effect if it’s
     * called before the height computations. To avoid oddness, consider
     * using [method`Gtk`.TextView.scroll_to_mark] which saves a point to be
     * scrolled to after line validation.
     */
    scrollToIter(iter: Gtk.TextIter, withinMargin: number, useAlign: boolean, xalign: number, yalign: number): boolean
    /**
     * Scrolls `text_view` so that `mark` is on the screen in the position
     * indicated by `xalign` and `yalign`.
     * 
     * An alignment of 0.0 indicates left or top, 1.0 indicates right or
     * bottom, 0.5 means center. If `use_align` is %FALSE, the text scrolls
     * the minimal distance to get the mark onscreen, possibly not scrolling
     * at all. The effective screen for purposes of this function is reduced
     * by a margin of size `within_margin`.
     */
    scrollToMark(mark: Gtk.TextMark, withinMargin: number, useAlign: boolean, xalign: number, yalign: number): void
    /**
     * Sets the behavior of the text widget when the <kbd>Tab</kbd> key is pressed.
     * 
     * If `accepts_tab` is %TRUE, a tab character is inserted. If `accepts_tab`
     * is %FALSE the keyboard focus is moved to the next widget in the focus
     * chain.
     */
    setAcceptsTab(acceptsTab: boolean): void
    /**
     * Sets the bottom margin for text in `text_view`.
     * 
     * Note that this function is confusingly named.
     * In CSS terms, the value set here is padding.
     */
    setBottomMargin(bottomMargin: number): void
    /**
     * Sets `buffer` as the buffer being displayed by `text_view`.
     * 
     * The previous buffer displayed by the text view is unreferenced, and
     * a reference is added to `buffer`. If you owned a reference to `buffer`
     * before passing it to this function, you must remove that reference
     * yourself; `GtkTextView` will not “adopt” it.
     */
    setBuffer(buffer?: Gtk.TextBuffer | null): void
    /**
     * Toggles whether the insertion point should be displayed.
     * 
     * A buffer with no editable text probably shouldn’t have a visible
     * cursor, so you may want to turn the cursor off.
     * 
     * Note that this property may be overridden by the
     * [property`GtkSettings:`gtk-keynav-use-caret] setting.
     */
    setCursorVisible(setting: boolean): void
    /**
     * Sets the default editability of the `GtkTextView`.
     * 
     * You can override this default setting with tags in the buffer,
     * using the “editable” attribute of tags.
     */
    setEditable(setting: boolean): void
    /**
     * Sets a menu model to add when constructing the context
     * menu for `text_view`.
     * 
     * You can pass %NULL to remove a previously set extra menu.
     */
    setExtraMenu(model?: Gio.MenuModel | null): void
    /**
     * Places `widget` into the gutter specified by `win`.
     * 
     * `win` must be one of %GTK_TEXT_WINDOW_LEFT, %GTK_TEXT_WINDOW_RIGHT,
     * %GTK_TEXT_WINDOW_TOP, or %GTK_TEXT_WINDOW_BOTTOM.
     */
    setGutter(win: Gtk.TextWindowType, widget?: Gtk.Widget | null): void
    /**
     * Sets the default indentation for paragraphs in `text_view`.
     * 
     * Tags in the buffer may override the default.
     */
    setIndent(indent: number): void
    /**
     * Sets the `input-hints` of the `GtkTextView`.
     * 
     * The `input-hints` allow input methods to fine-tune
     * their behaviour.
     */
    setInputHints(hints: Gtk.InputHints): void
    /**
     * Sets the `input-purpose` of the `GtkTextView`.
     * 
     * The `input-purpose` can be used by on-screen keyboards
     * and other input methods to adjust their behaviour.
     */
    setInputPurpose(purpose: Gtk.InputPurpose): void
    /**
     * Sets the default justification of text in `text_view`.
     * 
     * Tags in the view’s buffer may override the default.
     */
    setJustification(justification: Gtk.Justification): void
    /**
     * Sets the default left margin for text in `text_view`.
     * 
     * Tags in the buffer may override the default.
     * 
     * Note that this function is confusingly named.
     * In CSS terms, the value set here is padding.
     */
    setLeftMargin(leftMargin: number): void
    /**
     * Sets whether the `GtkTextView` should display text in
     * monospace styling.
     */
    setMonospace(monospace: boolean): void
    /**
     * Changes the `GtkTextView` overwrite mode.
     */
    setOverwrite(overwrite: boolean): void
    /**
     * Sets the default number of blank pixels above paragraphs in `text_view`.
     * 
     * Tags in the buffer for `text_view` may override the defaults.
     */
    setPixelsAboveLines(pixelsAboveLines: number): void
    /**
     * Sets the default number of pixels of blank space
     * to put below paragraphs in `text_view`.
     * 
     * May be overridden by tags applied to `text_view’`s buffer.
     */
    setPixelsBelowLines(pixelsBelowLines: number): void
    /**
     * Sets the default number of pixels of blank space to leave between
     * display/wrapped lines within a paragraph.
     * 
     * May be overridden by tags in `text_view’`s buffer.
     */
    setPixelsInsideWrap(pixelsInsideWrap: number): void
    /**
     * Sets the default right margin for text in the text view.
     * 
     * Tags in the buffer may override the default.
     * 
     * Note that this function is confusingly named.
     * In CSS terms, the value set here is padding.
     */
    setRightMargin(rightMargin: number): void
    /**
     * Sets the default tab stops for paragraphs in `text_view`.
     * 
     * Tags in the buffer may override the default.
     */
    setTabs(tabs: Pango.TabArray): void
    /**
     * Sets the top margin for text in `text_view`.
     * 
     * Note that this function is confusingly named.
     * In CSS terms, the value set here is padding.
     */
    setTopMargin(topMargin: number): void
    /**
     * Sets the line wrapping for the view.
     */
    setWrapMode(wrapMode: Gtk.WrapMode): void
    /**
     * Determines whether `iter` is at the start of a display line.
     * 
     * See [method`Gtk`.TextView.forward_display_line] for an
     * explanation of display lines vs. paragraphs.
     */
    startsDisplayLine(iter: Gtk.TextIter): boolean
    /**
     * Converts coordinates on the window identified by `win` to buffer
     * coordinates.
     */
    windowToBufferCoords(win: Gtk.TextWindowType, windowX: number, windowY: number): [ /* bufferX */ number | null, /* bufferY */ number | null ]
    /* Methods of Gtk-4.0.Gtk.Widget */
    /**
     * Enable or disable an action installed with
     * gtk_widget_class_install_action().
     */
    actionSetEnabled(actionName: string, enabled: boolean): void
    /**
     * For widgets that can be “activated” (buttons, menu items, etc.),
     * this function activates them.
     * 
     * The activation will emit the signal set using
     * [method`Gtk`.WidgetClass.set_activate_signal] during class initialization.
     * 
     * Activation is what happens when you press <kbd>Enter</kbd>
     * on a widget during key navigation.
     * 
     * If you wish to handle the activation keybinding yourself, it is
     * recommended to use [method`Gtk`.WidgetClass.add_shortcut] with an action
     * created with [ctor`Gtk`.SignalAction.new].
     * 
     * If `widget` isn't activatable, the function returns %FALSE.
     */
    activate(): boolean
    /**
     * Looks up the action in the action groups associated with
     * `widget` and its ancestors, and activates it.
     * 
     * If the action is in an action group added with
     * [method`Gtk`.Widget.insert_action_group], the `name` is expected
     * to be prefixed with the prefix that was used when the group was
     * inserted.
     * 
     * The arguments must match the actions expected parameter type,
     * as returned by `g_action_get_parameter_type()`.
     */
    activateAction(name: string, args?: GLib.Variant | null): boolean
    /**
     * Activates the `default.activate` action from `widget`.
     */
    activateDefault(): void
    /**
     * Adds `controller` to `widget` so that it will receive events.
     * 
     * You will usually want to call this function right after
     * creating any kind of [class`Gtk`.EventController].
     */
    addController(controller: Gtk.EventController): void
    /**
     * Adds a style class to `widget`.
     * 
     * After calling this function, the widgets style will match
     * for `css_class,` according to CSS matching rules.
     * 
     * Use [method`Gtk`.Widget.remove_css_class] to remove the
     * style again.
     */
    addCssClass(cssClass: string): void
    /**
     * Adds a widget to the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. Note the
     * list of mnemonic labels for the widget is cleared when the
     * widget is destroyed, so the caller must make sure to update
     * its internal state at this point as well.
     */
    addMnemonicLabel(label: Gtk.Widget): void
    /**
     * Queues an animation frame update and adds a callback to be called
     * before each frame.
     * 
     * Until the tick callback is removed, it will be called frequently
     * (usually at the frame rate of the output device or as quickly as
     * the application can be repainted, whichever is slower). For this
     * reason, is most suitable for handling graphics that change every
     * frame or every few frames. The tick callback does not automatically
     * imply a relayout or repaint. If you want a repaint or relayout, and
     * aren’t changing widget properties that would trigger that (for example,
     * changing the text of a `GtkLabel`), then you will have to call
     * [method`Gtk`.Widget.queue_resize] or [method`Gtk`.Widget.queue_draw]
     * yourself.
     * 
     * [method`Gdk`.FrameClock.get_frame_time] should generally be used
     * for timing continuous animations and
     * [method`Gdk`.FrameTimings.get_predicted_presentation_time] if you are
     * trying to display isolated frames at particular times.
     * 
     * This is a more convenient alternative to connecting directly to the
     * [signal`Gdk`.FrameClock::update] signal of `GdkFrameClock`, since you
     * don't have to worry about when a `GdkFrameClock` is assigned to a widget.
     */
    addTickCallback(callback: Gtk.TickCallback): number
    /**
     * This function is only used by `GtkWidget` subclasses, to
     * assign a size, position and (optionally) baseline to their
     * child widgets.
     * 
     * In this function, the allocation and baseline may be adjusted.
     * The given allocation will be forced to be bigger than the
     * widget's minimum size, as well as at least 0×0 in size.
     * 
     * For a version that does not take a transform, see
     * [method`Gtk`.Widget.size_allocate].
     */
    allocate(width: number, height: number, baseline: number, transform?: Gsk.Transform | null): void
    /**
     * Called by widgets as the user moves around the window using
     * keyboard shortcuts.
     * 
     * The `direction` argument indicates what kind of motion is taking place (up,
     * down, left, right, tab forward, tab backward).
     * 
     * This function calls the [vfunc`Gtk`.Widget.focus] virtual function; widgets
     * can override the virtual function in order to implement appropriate focus
     * behavior.
     * 
     * The default `focus()` virtual function for a widget should return `TRUE` if
     * moving in `direction` left the focus on a focusable location inside that
     * widget, and `FALSE` if moving in `direction` moved the focus outside the
     * widget. When returning `TRUE`, widgets normallycall [method`Gtk`.Widget.grab_focus]
     * to place the focus accordingly; when returning `FALSE`, they don’t modify
     * the current focus location.
     * 
     * This function is used by custom widget implementations; if you're
     * writing an app, you’d use [method`Gtk`.Widget.grab_focus] to move
     * the focus to a particular widget.
     */
    childFocus(direction: Gtk.DirectionType): boolean
    /**
     * Computes the bounds for `widget` in the coordinate space of `target`.
     * 
     * FIXME: Explain what "bounds" are.
     * 
     * If the operation is successful, %TRUE is returned. If `widget` has no
     * bounds or the bounds cannot be expressed in `target'`s coordinate space
     * (for example if both widgets are in different windows), %FALSE is
     * returned and `bounds` is set to the zero rectangle.
     * 
     * It is valid for `widget` and `target` to be the same widget.
     */
    computeBounds(target: Gtk.Widget): [ /* returnType */ boolean, /* outBounds */ Graphene.Rect ]
    /**
     * Computes whether a container should give this widget
     * extra space when possible.
     * 
     * Containers should check this, rather than looking at
     * [method`Gtk`.Widget.get_hexpand] or [method`Gtk`.Widget.get_vexpand].
     * 
     * This function already checks whether the widget is visible, so
     * visibility does not need to be checked separately. Non-visible
     * widgets are not expanded.
     * 
     * The computed expand value uses either the expand setting explicitly
     * set on the widget itself, or, if none has been explicitly set,
     * the widget may expand if some of its children do.
     */
    computeExpand(orientation: Gtk.Orientation): boolean
    /**
     * Translates the given `point` in `widget'`s coordinates to coordinates
     * relative to `target’`s coordinate system.
     * 
     * In order to perform this operation, both widgets must share a
     * common ancestor.
     */
    computePoint(target: Gtk.Widget, point: Graphene.Point): [ /* returnType */ boolean, /* outPoint */ Graphene.Point ]
    /**
     * Computes a matrix suitable to describe a transformation from
     * `widget'`s coordinate system into `target'`s coordinate system.
     * 
     * The transform can not be computed in certain cases, for example
     * when `widget` and `target` do not share a common ancestor. In that
     * case `out_transform` gets set to the identity matrix.
     */
    computeTransform(target: Gtk.Widget): [ /* returnType */ boolean, /* outTransform */ Graphene.Matrix ]
    /**
     * Tests if the point at (`x,` `y)` is contained in `widget`.
     * 
     * The coordinates for (`x,` `y)` must be in widget coordinates, so
     * (0, 0) is assumed to be the top left of `widget'`s content area.
     */
    contains(x: number, y: number): boolean
    /**
     * Creates a new `PangoContext` with the appropriate font map,
     * font options, font description, and base direction for drawing
     * text for this widget.
     * 
     * See also [method`Gtk`.Widget.get_pango_context].
     */
    createPangoContext(): Pango.Context
    /**
     * Creates a new `PangoLayout` with the appropriate font map,
     * font description, and base direction for drawing text for
     * this widget.
     * 
     * If you keep a `PangoLayout` created in this way around,
     * you need to re-create it when the widget `PangoContext`
     * is replaced. This can be tracked by listening to changes
     * of the [property`Gtk`.Widget:root] property on the widget.
     */
    createPangoLayout(text?: string | null): Pango.Layout
    /**
     * Checks to see if a drag movement has passed the GTK drag threshold.
     */
    dragCheckThreshold(startX: number, startY: number, currentX: number, currentY: number): boolean
    /**
     * Notifies the user about an input-related error on this widget.
     * 
     * If the [property`Gtk`.Settings:gtk-error-bell] setting is %TRUE,
     * it calls [method`Gdk`.Surface.beep], otherwise it does nothing.
     * 
     * Note that the effect of [method`Gdk`.Surface.beep] can be configured
     * in many ways, depending on the windowing backend and the desktop
     * environment or window manager that is used.
     */
    errorBell(): void
    /**
     * Returns the baseline that has currently been allocated to `widget`.
     * 
     * This function is intended to be used when implementing handlers
     * for the `GtkWidget`Class.snapshot() function, and when allocating
     * child widgets in `GtkWidget`Class.size_allocate().
     */
    getAllocatedBaseline(): number
    /**
     * Returns the height that has currently been allocated to `widget`.
     */
    getAllocatedHeight(): number
    /**
     * Returns the width that has currently been allocated to `widget`.
     */
    getAllocatedWidth(): number
    /**
     * Retrieves the widget’s allocation.
     * 
     * Note, when implementing a layout container: a widget’s allocation
     * will be its “adjusted” allocation, that is, the widget’s parent
     * typically calls [method`Gtk`.Widget.size_allocate] with an allocation,
     * and that allocation is then adjusted (to handle margin
     * and alignment for example) before assignment to the widget.
     * [method`Gtk`.Widget.get_allocation] returns the adjusted allocation that
     * was actually assigned to the widget. The adjusted allocation is
     * guaranteed to be completely contained within the
     * [method`Gtk`.Widget.size_allocate] allocation, however.
     * 
     * So a layout container is guaranteed that its children stay inside
     * the assigned bounds, but not that they have exactly the bounds the
     * container assigned.
     */
    getAllocation(): /* allocation */ Gtk.Allocation
    /**
     * Gets the first ancestor of `widget` with type `widget_type`.
     * 
     * For example, `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)`
     * gets the first `GtkBox` that’s an ancestor of `widget`. No
     * reference will be added to the returned widget; it should
     * not be unreferenced.
     * 
     * Note that unlike [method`Gtk`.Widget.is_ancestor], this function
     * considers `widget` to be an ancestor of itself.
     */
    getAncestor(widgetType: GObject.Type): Gtk.Widget | null
    /**
     * Determines whether the input focus can enter `widget` or any
     * of its children.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getCanFocus(): boolean
    /**
     * Queries whether `widget` can be the target of pointer events.
     */
    getCanTarget(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * 
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    getChildVisible(): boolean
    /**
     * Gets the clipboard object for `widget`.
     * 
     * This is a utility function to get the clipboard object for the
     * `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getClipboard(): Gdk.Clipboard
    /**
     * Returns the list of style classes applied to `widget`.
     */
    getCssClasses(): string[]
    /**
     * Returns the CSS name that is used for `self`.
     */
    getCssName(): string
    /**
     * Queries the cursor set on `widget`.
     * 
     * See [method`Gtk`.Widget.set_cursor] for details.
     */
    getCursor(): Gdk.Cursor | null
    /**
     * Gets the reading direction for a particular widget.
     * 
     * See [method`Gtk`.Widget.set_direction].
     */
    getDirection(): Gtk.TextDirection
    /**
     * Get the `GdkDisplay` for the toplevel window associated with
     * this widget.
     * 
     * This function can only be called after the widget has been
     * added to a widget hierarchy with a `GtkWindow` at the top.
     * 
     * In general, you should only create display specific
     * resources when a widget has been realized, and you should
     * free those resources when the widget is unrealized.
     */
    getDisplay(): Gdk.Display
    /**
     * Returns the widgets first child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getFirstChild(): Gtk.Widget | null
    /**
     * Returns the current focus child of `widget`.
     */
    getFocusChild(): Gtk.Widget | null
    /**
     * Returns whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * See [method`Gtk`.Widget.set_focus_on_click].
     */
    getFocusOnClick(): boolean
    /**
     * Determines whether `widget` can own the input focus.
     * 
     * See [method`Gtk`.Widget.set_focusable].
     */
    getFocusable(): boolean
    /**
     * Gets the font map of `widget`.
     * 
     * See [method`Gtk`.Widget.set_font_map].
     */
    getFontMap(): Pango.FontMap | null
    /**
     * Returns the `cairo_font_options_t` of widget.
     * 
     * Seee [method`Gtk`.Widget.set_font_options].
     */
    getFontOptions(): cairo.FontOptions | null
    /**
     * Obtains the frame clock for a widget.
     * 
     * The frame clock is a global “ticker” that can be used to drive
     * animations and repaints. The most common reason to get the frame
     * clock is to call [method`Gdk`.FrameClock.get_frame_time], in order
     * to get a time to use for animating. For example you might record
     * the start of the animation with an initial value from
     * [method`Gdk`.FrameClock.get_frame_time], and then update the animation
     * by calling [method`Gdk`.FrameClock.get_frame_time] again during each repaint.
     * 
     * [method`Gdk`.FrameClock.request_phase] will result in a new frame on the
     * clock, but won’t necessarily repaint any widgets. To repaint a
     * widget, you have to use [method`Gtk`.Widget.queue_draw] which invalidates
     * the widget (thus scheduling it to receive a draw on the next
     * frame). gtk_widget_queue_draw() will also end up requesting a frame
     * on the appropriate frame clock.
     * 
     * A widget’s frame clock will not change while the widget is
     * mapped. Reparenting a widget (which implies a temporary unmap) can
     * change the widget’s frame clock.
     * 
     * Unrealized widgets do not have a frame clock.
     */
    getFrameClock(): Gdk.FrameClock | null
    /**
     * Gets the horizontal alignment of `widget`.
     * 
     * For backwards compatibility reasons this method will never return
     * %GTK_ALIGN_BASELINE, but instead it will convert it to
     * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
     * alignment.
     */
    getHalign(): Gtk.Align
    /**
     * Returns the current value of the `has-tooltip` property.
     */
    getHasTooltip(): boolean
    /**
     * Returns the content height of the widget.
     * 
     * This function returns the height passed to its
     * size-allocate implementation, which is the height you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getHeight(): number
    /**
     * Gets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Containers should use [method`Gtk`.Widget.compute_expand] rather
     * than this function, to see whether a widget, or any of its children,
     * has the expand flag set. If any child of a widget wants to
     * expand, the parent may ask to expand also.
     * 
     * This function only looks at the widget’s own hexpand flag, rather
     * than computing whether the entire widget tree rooted at this widget
     * wants to expand.
     */
    getHexpand(): boolean
    /**
     * Gets whether gtk_widget_set_hexpand() has been used
     * to explicitly set the expand flag on this widget.
     * 
     * If [property`Gtk`.Widget:hexpand] property is set, then it
     * overrides any computed expand value based on child widgets.
     * If `hexpand` is not set, then the expand value depends on
     * whether any children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    getHexpandSet(): boolean
    /**
     * Returns the widgets last child.
     * 
     * This API is primarily meant for widget implementations.
     */
    getLastChild(): Gtk.Widget | null
    /**
     * Retrieves the layout manager used by `widget`.
     * 
     * See [method`Gtk`.Widget.set_layout_manager].
     */
    getLayoutManager(): Gtk.LayoutManager | null
    /**
     * Whether the widget is mapped.
     */
    getMapped(): boolean
    /**
     * Gets the bottom margin of `widget`.
     */
    getMarginBottom(): number
    /**
     * Gets the end margin of `widget`.
     */
    getMarginEnd(): number
    /**
     * Gets the start margin of `widget`.
     */
    getMarginStart(): number
    /**
     * Gets the top margin of `widget`.
     */
    getMarginTop(): number
    /**
     * Retrieves the name of a widget.
     * 
     * See [method`Gtk`.Widget.set_name] for the significance of widget names.
     */
    getName(): string
    /**
     * Returns the nearest `GtkNative` ancestor of `widget`.
     * 
     * This function will return %NULL if the widget is not
     * contained inside a widget tree with a native ancestor.
     * 
     * `GtkNative` widgets will return themselves here.
     */
    getNative(): Gtk.Native | null
    /**
     * Returns the widgets next sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getNextSibling(): Gtk.Widget | null
    /**
     * #Fetches the requested opacity for this widget.
     * 
     * See [method`Gtk`.Widget.set_opacity].
     */
    getOpacity(): number
    /**
     * Returns the widgets overflow value.
     */
    getOverflow(): Gtk.Overflow
    /**
     * Gets a `PangoContext` with the appropriate font map, font description,
     * and base direction for this widget.
     * 
     * Unlike the context returned by [method`Gtk`.Widget.create_pango_context],
     * this context is owned by the widget (it can be used until the screen
     * for the widget changes or the widget is removed from its toplevel),
     * and will be updated to match any changes to the widget’s attributes.
     * This can be tracked by listening to changes of the
     * [property`Gtk`.Widget:root] property on the widget.
     */
    getPangoContext(): Pango.Context
    /**
     * Returns the parent widget of `widget`.
     */
    getParent(): Gtk.Widget | null
    /**
     * Retrieves the minimum and natural size of a widget, taking
     * into account the widget’s preference for height-for-width management.
     * 
     * This is used to retrieve a suitable size by container widgets which do
     * not impose any restrictions on the child placement. It can be used
     * to deduce toplevel window and menu sizes as well as child widgets in
     * free-form containers such as `GtkFixed`.
     * 
     * Handle with care. Note that the natural height of a height-for-width
     * widget will generally be a smaller size than the minimum height, since
     * the required height for the natural width is generally smaller than the
     * required height for the minimum width.
     * 
     * Use [id`gtk_widget_measure]` if you want to support baseline alignment.
     */
    getPreferredSize(): [ /* minimumSize */ Gtk.Requisition | null, /* naturalSize */ Gtk.Requisition | null ]
    /**
     * Returns the widgets previous sibling.
     * 
     * This API is primarily meant for widget implementations.
     */
    getPrevSibling(): Gtk.Widget | null
    /**
     * Gets the primary clipboard of `widget`.
     * 
     * This is a utility function to get the primary clipboard object
     * for the `GdkDisplay` that `widget` is using.
     * 
     * Note that this function always works, even when `widget` is not
     * realized yet.
     */
    getPrimaryClipboard(): Gdk.Clipboard
    /**
     * Determines whether `widget` is realized.
     */
    getRealized(): boolean
    /**
     * Determines whether `widget` is always treated as the default widget
     * within its toplevel when it has the focus, even if another widget
     * is the default.
     * 
     * See [method`Gtk`.Widget.set_receives_default].
     */
    getReceivesDefault(): boolean
    /**
     * Gets whether the widget prefers a height-for-width layout
     * or a width-for-height layout.
     * 
     * Single-child widgets generally propagate the preference of
     * their child, more complex widgets need to request something
     * either in context of their children or in context of their
     * allocation capabilities.
     */
    getRequestMode(): Gtk.SizeRequestMode
    /**
     * Returns the `GtkRoot` widget of `widget`.
     * 
     * This function will return %NULL if the widget is not contained
     * inside a widget tree with a root widget.
     * 
     * `GtkRoot` widgets will return themselves here.
     */
    getRoot(): Gtk.Root | null
    /**
     * Retrieves the internal scale factor that maps from window
     * coordinates to the actual device pixels.
     * 
     * On traditional systems this is 1, on high density outputs,
     * it can be a higher value (typically 2).
     * 
     * See [method`Gdk`.Surface.get_scale_factor].
     */
    getScaleFactor(): number
    /**
     * Returns the widget’s sensitivity.
     * 
     * This function returns the value that has been set using
     * [method`Gtk`.Widget.set_sensitive]).
     * 
     * The effective sensitivity of a widget is however determined
     * by both its own and its parent widget’s sensitivity.
     * See [method`Gtk`.Widget.is_sensitive].
     */
    getSensitive(): boolean
    /**
     * Gets the settings object holding the settings used for this widget.
     * 
     * Note that this function can only be called when the `GtkWidget`
     * is attached to a toplevel, since the settings object is specific
     * to a particular `GdkDisplay`. If you want to monitor the widget for
     * changes in its settings, connect to the `notify::display` signal.
     */
    getSettings(): Gtk.Settings
    /**
     * Returns the content width or height of the widget.
     * 
     * Which dimension is returned depends on `orientation`.
     * 
     * This is equivalent to calling [method`Gtk`.Widget.get_width]
     * for %GTK_ORIENTATION_HORIZONTAL or [method`Gtk`.Widget.get_height]
     * for %GTK_ORIENTATION_VERTICAL, but can be used when
     * writing orientation-independent code, such as when
     * implementing [iface`Gtk`.Orientable] widgets.
     */
    getSize(orientation: Gtk.Orientation): number
    /**
     * Gets the size request that was explicitly set for the widget using
     * gtk_widget_set_size_request().
     * 
     * A value of -1 stored in `width` or `height` indicates that that
     * dimension has not been set explicitly and the natural requisition
     * of the widget will be used instead. See
     * [method`Gtk`.Widget.set_size_request]. To get the size a widget will
     * actually request, call [method`Gtk`.Widget.measure] instead of
     * this function.
     */
    getSizeRequest(): [ /* width */ number | null, /* height */ number | null ]
    /**
     * Returns the widget state as a flag set.
     * 
     * It is worth mentioning that the effective %GTK_STATE_FLAG_INSENSITIVE
     * state will be returned, that is, also based on parent insensitivity,
     * even if `widget` itself is sensitive.
     * 
     * Also note that if you are looking for a way to obtain the
     * [flags`Gtk`.StateFlags] to pass to a [class`Gtk`.StyleContext]
     * method, you should look at [method`Gtk`.StyleContext.get_state].
     */
    getStateFlags(): Gtk.StateFlags
    /**
     * Returns the style context associated to `widget`.
     * 
     * The returned object is guaranteed to be the same
     * for the lifetime of `widget`.
     */
    getStyleContext(): Gtk.StyleContext
    /**
     * Fetch an object build from the template XML for `widget_type` in
     * this `widget` instance.
     * 
     * This will only report children which were previously declared
     * with [method`Gtk`.WidgetClass.bind_template_child_full] or one of its
     * variants.
     * 
     * This function is only meant to be called for code which is private
     * to the `widget_type` which declared the child and is meant for language
     * bindings which cannot easily make use of the GObject structure offsets.
     */
    getTemplateChild(widgetType: GObject.Type, name: string): GObject.Object
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the tooltip has not been set using
     * [method`Gtk`.Widget.set_tooltip_markup], this
     * function returns %NULL.
     */
    getTooltipMarkup(): string | null
    /**
     * Gets the contents of the tooltip for `widget`.
     * 
     * If the `widget'`s tooltip was set using
     * [method`Gtk`.Widget.set_tooltip_markup],
     * this function will return the escaped text.
     */
    getTooltipText(): string | null
    /**
     * Gets the vertical alignment of `widget`.
     */
    getValign(): Gtk.Align
    /**
     * Gets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.get_hexpand] for more detail.
     */
    getVexpand(): boolean
    /**
     * Gets whether gtk_widget_set_vexpand() has been used to
     * explicitly set the expand flag on this widget.
     * 
     * See [method`Gtk`.Widget.get_hexpand_set] for more detail.
     */
    getVexpandSet(): boolean
    /**
     * Determines whether the widget is visible.
     * 
     * If you want to take into account whether the widget’s
     * parent is also marked as visible, use
     * [method`Gtk`.Widget.is_visible] instead.
     * 
     * This function does not check if the widget is
     * obscured in any way.
     * 
     * See [method`Gtk`.Widget.set_visible].
     */
    getVisible(): boolean
    /**
     * Returns the content width of the widget.
     * 
     * This function returns the width passed to its
     * size-allocate implementation, which is the width you
     * should be using in [vfunc`Gtk`.Widget.snapshot].
     * 
     * For pointer events, see [method`Gtk`.Widget.contains].
     */
    getWidth(): number
    /**
     * Causes `widget` to have the keyboard focus for the `GtkWindow` it's inside.
     * 
     * If `widget` is not focusable, or its [vfunc`Gtk`.Widget.grab_focus]
     * implementation cannot transfer the focus to a descendant of `widget`
     * that is focusable, it will not take focus and %FALSE will be returned.
     * 
     * Calling [method`Gtk`.Widget.grab_focus] on an already focused widget
     * is allowed, should not have an effect, and return %TRUE.
     */
    grabFocus(): boolean
    /**
     * Returns whether `css_class` is currently applied to `widget`.
     */
    hasCssClass(cssClass: string): boolean
    /**
     * Determines if the widget should show a visible indication that
     * it has the global input focus.
     * 
     * This is a convenience function that takes into account whether
     * focus indication should currently be shown in the toplevel window
     * of `widget`. See [method`Gtk`.Window.get_focus_visible] for more
     * information about focus indication.
     * 
     * To find out if the widget has the global input focus, use
     * [method`Gtk`.Widget.has_focus].
     */
    hasVisibleFocus(): boolean
    /**
     * Reverses the effects of gtk_widget_show().
     * 
     * This is causing the widget to be hidden (invisible to the user).
     */
    hide(): void
    /**
     * Returns whether the widget is currently being destroyed.
     * 
     * This information can sometimes be used to avoid doing
     * unnecessary work.
     */
    inDestruction(): boolean
    /**
     * Creates and initializes child widgets defined in templates.
     * 
     * This function must be called in the instance initializer
     * for any class which assigned itself a template using
     * [method`Gtk`.WidgetClass.set_template].
     * 
     * It is important to call this function in the instance initializer
     * of a `GtkWidget` subclass and not in `GObject.constructed()` or
     * `GObject.constructor()` for two reasons:
     * 
     *  - derived widgets will assume that the composite widgets
     *    defined by its parent classes have been created in their
     *    relative instance initializers
     *  - when calling `g_object_new()` on a widget with composite templates,
     *    it’s important to build the composite widgets before the construct
     *    properties are set. Properties passed to `g_object_new()` should
     *    take precedence over properties set in the private template XML
     * 
     * A good rule of thumb is to call this function as the first thing in
     * an instance initialization function.
     */
    initTemplate(): void
    /**
     * Inserts `group` into `widget`.
     * 
     * Children of `widget` that implement [iface`Gtk`.Actionable] can
     * then be associated with actions in `group` by setting their
     * “action-name” to `prefix`.`action-name`.
     * 
     * Note that inheritance is defined for individual actions. I.e.
     * even if you insert a group with prefix `prefix,` actions with
     * the same prefix will still be inherited from the parent, unless
     * the group contains an action with the same name.
     * 
     * If `group` is %NULL, a previously inserted group for `name` is
     * removed from `widget`.
     */
    insertActionGroup(name: string, group?: Gio.ActionGroup | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed after `previous_sibling,` or at the beginning if
     * `previous_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_prev_sibling(widget)`
     * will return `previous_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this
     * function can also be used to reorder `widget` in the child widget
     * list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertAfter(parent: Gtk.Widget, previousSibling?: Gtk.Widget | null): void
    /**
     * Inserts `widget` into the child widget list of `parent`.
     * 
     * It will be placed before `next_sibling,` or at the end if
     * `next_sibling` is %NULL.
     * 
     * After calling this function, `gtk_widget_get_next_sibling(widget)`
     * will return `next_sibling`.
     * 
     * If `parent` is already set as the parent widget of `widget,` this function
     * can also be used to reorder `widget` in the child widget list of `parent`.
     * 
     * This API is primarily meant for widget implementations; if you are
     * just using a widget, you *must* use its own API for adding children.
     */
    insertBefore(parent: Gtk.Widget, nextSibling?: Gtk.Widget | null): void
    /**
     * Determines whether `widget` is somewhere inside `ancestor,`
     * possibly with intermediate containers.
     */
    isAncestor(ancestor: Gtk.Widget): boolean
    /**
     * Determines whether `widget` can be drawn to.
     * 
     * A widget can be drawn if it is mapped and visible.
     */
    isDrawable(): boolean
    /**
     * Determines if the widget is the focus widget within its
     * toplevel.
     * 
     * This does not mean that the [property`Gtk`.Widget:has-focus]
     * property is necessarily set; [property`Gtk`.Widget:has-focus]
     * will only be set if the toplevel widget additionally has the
     * global input focus.
     */
    isFocus(): boolean
    /**
     * Returns the widget’s effective sensitivity.
     * 
     * This means it is sensitive itself and also its
     * parent widget is sensitive.
     */
    isSensitive(): boolean
    /**
     * Determines whether the widget and all its parents are marked as
     * visible.
     * 
     * This function does not check if the widget is obscured in any way.
     * 
     * See also [method`Gtk`.Widget.get_visible] and
     * [method`Gtk`.Widget.set_visible].
     */
    isVisible(): boolean
    /**
     * Emits the `::keynav-failed` signal on the widget.
     * 
     * This function should be called whenever keyboard navigation
     * within a single widget hits a boundary.
     * 
     * The return value of this function should be interpreted
     * in a way similar to the return value of
     * [method`Gtk`.Widget.child_focus]. When %TRUE is returned,
     * stay in the widget, the failed keyboard  navigation is OK
     * and/or there is nowhere we can/should move the focus to.
     * When %FALSE is returned, the caller should continue with
     * keyboard navigation outside the widget, e.g. by calling
     * [method`Gtk`.Widget.child_focus] on the widget’s toplevel.
     * 
     * The default [signal`Gtk`.Widget::keynav-failed] handler returns
     * %FALSE for %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD.
     * For the other values of `GtkDirectionType` it returns %TRUE.
     * 
     * Whenever the default handler returns %TRUE, it also calls
     * [method`Gtk`.Widget.error_bell] to notify the user of the
     * failed keyboard navigation.
     * 
     * A use case for providing an own implementation of ::keynav-failed
     * (either by connecting to it or by overriding it) would be a row of
     * [class`Gtk`.Entry] widgets where the user should be able to navigate
     * the entire row with the cursor keys, as e.g. known from user
     * interfaces that require entering license keys.
     */
    keynavFailed(direction: Gtk.DirectionType): boolean
    /**
     * Returns the widgets for which this widget is the target of a
     * mnemonic.
     * 
     * Typically, these widgets will be labels. See, for example,
     * [method`Gtk`.Label.set_mnemonic_widget].
     * 
     * The widgets in the list are not individually referenced.
     * If you want to iterate through the list and perform actions
     * involving callbacks that might destroy the widgets, you
     * must call `g_list_foreach (result, (GFunc)g_object_ref, NULL)`
     * first, and then unref all the widgets afterwards.
     */
    listMnemonicLabels(): Gtk.Widget[]
    /**
     * Causes a widget to be mapped if it isn’t already.
     * 
     * This function is only for use in widget implementations.
     */
    map(): void
    /**
     * Measures `widget` in the orientation `orientation` and for the given `for_size`.
     * 
     * As an example, if `orientation` is %GTK_ORIENTATION_HORIZONTAL and `for_size`
     * is 300, this functions will compute the minimum and natural width of `widget`
     * if it is allocated at a height of 300 pixels.
     * 
     * See [GtkWidget’s geometry management section](class.Widget.html#height-for-width-geometry-management) for
     * a more details on implementing `GtkWidgetClass.measure()`.
     */
    measure(orientation: Gtk.Orientation, forSize: number): [ /* minimum */ number | null, /* natural */ number | null, /* minimumBaseline */ number | null, /* naturalBaseline */ number | null ]
    /**
     * Emits the ::mnemonic-activate signal.
     * 
     * See [signal`Gtk`.Widget::mnemonic-activate].
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Returns a `GListModel` to track the children of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track children and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeChildren(): Gio.ListModel
    /**
     * Returns a `GListModel` to track the [class`Gtk`.EventController]s
     * of `widget`.
     * 
     * Calling this function will enable extra internal bookkeeping
     * to track controllers and emit signals on the returned listmodel.
     * It may slow down operations a lot.
     * 
     * Applications should try hard to avoid calling this function
     * because of the slowdowns.
     */
    observeControllers(): Gio.ListModel
    /**
     * Finds the descendant of `widget` closest to the point (`x,` `y)`.
     * 
     * The point must be given in widget coordinates, so (0, 0) is assumed
     * to be the top left of `widget'`s content area.
     * 
     * Usually widgets will return %NULL if the given coordinate is not
     * contained in `widget` checked via [method`Gtk`.Widget.contains].
     * Otherwise they will recursively try to find a child that does
     * not return %NULL. Widgets are however free to customize their
     * picking algorithm.
     * 
     * This function is used on the toplevel to determine the widget
     * below the mouse cursor for purposes of hover highlighting and
     * delivering events.
     */
    pick(x: number, y: number, flags: Gtk.PickFlags): Gtk.Widget | null
    /**
     * Flags the widget for a rerun of the [vfunc`Gtk`.Widget.size_allocate]
     * function.
     * 
     * Use this function instead of [method`Gtk`.Widget.queue_resize]
     * when the `widget'`s size request didn't change but it wants to
     * reposition its contents.
     * 
     * An example user of this function is [method`Gtk`.Widget.set_halign].
     * 
     * This function is only for use in widget implementations.
     */
    queueAllocate(): void
    /**
     * Schedules this widget to be redrawn in the paint phase
     * of the current or the next frame.
     * 
     * This means `widget'`s [vfunc`Gtk`.Widget.snapshot]
     * implementation will be called.
     */
    queueDraw(): void
    /**
     * Flags a widget to have its size renegotiated.
     * 
     * This should be called when a widget for some reason has a new
     * size request. For example, when you change the text in a
     * [class`Gtk`.Label], the label queues a resize to ensure there’s
     * enough space for the new text.
     * 
     * Note that you cannot call gtk_widget_queue_resize() on a widget
     * from inside its implementation of the [vfunc`Gtk`.Widget.size_allocate]
     * virtual method. Calls to gtk_widget_queue_resize() from inside
     * [vfunc`Gtk`.Widget.size_allocate] will be silently ignored.
     * 
     * This function is only for use in widget implementations.
     */
    queueResize(): void
    /**
     * Creates the GDK resources associated with a widget.
     * 
     * Normally realization happens implicitly; if you show a widget
     * and all its parent containers, then the widget will be realized
     * and mapped automatically.
     * 
     * Realizing a widget requires all the widget’s parent widgets to be
     * realized; calling this function realizes the widget’s parents
     * in addition to `widget` itself. If a widget is not yet inside a
     * toplevel window when you realize it, bad things will happen.
     * 
     * This function is primarily used in widget implementations, and
     * isn’t very useful otherwise. Many times when you think you might
     * need it, a better approach is to connect to a signal that will be
     * called after the widget is realized automatically, such as
     * [signal`Gtk`.Widget::realize].
     */
    realize(): void
    /**
     * Removes `controller` from `widget,` so that it doesn't process
     * events anymore.
     * 
     * It should not be used again.
     * 
     * Widgets will remove all event controllers automatically when they
     * are destroyed, there is normally no need to call this function.
     */
    removeController(controller: Gtk.EventController): void
    /**
     * Removes a style from `widget`.
     * 
     * After this, the style of `widget` will stop matching for `css_class`.
     */
    removeCssClass(cssClass: string): void
    /**
     * Removes a widget from the list of mnemonic labels for this widget.
     * 
     * See [method`Gtk`.Widget.list_mnemonic_labels]. The widget must
     * have previously been added to the list with
     * [method`Gtk`.Widget.add_mnemonic_label].
     */
    removeMnemonicLabel(label: Gtk.Widget): void
    /**
     * Removes a tick callback previously registered with
     * gtk_widget_add_tick_callback().
     */
    removeTickCallback(id: number): void
    /**
     * Specifies whether the input focus can enter the widget
     * or any of its children.
     * 
     * Applications should set `can_focus` to %FALSE to mark a
     * widget as for pointer/touch use only.
     * 
     * Note that having `can_focus` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and focusable and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setCanFocus(canFocus: boolean): void
    /**
     * Sets whether `widget` can be the target of pointer events.
     */
    setCanTarget(canTarget: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its parent.
     * 
     * The child visibility can be set for widget before it is added
     * to a container with [method`Gtk`.Widget.set_parent], to avoid
     * mapping children unnecessary before immediately unmapping them.
     * However it will be reset to its default state of %TRUE when the
     * widget is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations
     * and should never be called by an application.
     */
    setChildVisible(childVisible: boolean): void
    /**
     * Clear all style classes applied to `widget`
     * and replace them with `classes`.
     */
    setCssClasses(classes: string[]): void
    /**
     * Sets the cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * If the `cursor` is NULL, `widget` will use the cursor
     * inherited from the parent widget.
     */
    setCursor(cursor?: Gdk.Cursor | null): void
    /**
     * Sets a named cursor to be shown when pointer devices point
     * towards `widget`.
     * 
     * This is a utility function that creates a cursor via
     * [ctor`Gdk`.Cursor.new_from_name] and then sets it on `widget`
     * with [method`Gtk`.Widget.set_cursor]. See those functions for
     * details.
     * 
     * On top of that, this function allows `name` to be %NULL, which
     * will do the same as calling [method`Gtk`.Widget.set_cursor]
     * with a %NULL cursor.
     */
    setCursorFromName(name?: string | null): void
    /**
     * Sets the reading direction on a particular widget.
     * 
     * This direction controls the primary direction for widgets
     * containing text, and also the direction in which the children
     * of a container are packed. The ability to set the direction is
     * present in order so that correct localization into languages with
     * right-to-left reading directions can be done. Generally, applications
     * will let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitly
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by [func`Gtk`.Widget.set_default_direction] will be used.
     */
    setDirection(dir: Gtk.TextDirection): void
    /**
     * Set `child` as the current focus child of `widget`.
     * 
     * This function is only suitable for widget implementations.
     * If you want a certain widget to get the input focus, call
     * [method`Gtk`.Widget.grab_focus] on it.
     */
    setFocusChild(child?: Gtk.Widget | null): void
    /**
     * Sets whether the widget should grab focus when it is clicked
     * with the mouse.
     * 
     * Making mouse clicks not grab focus is useful in places like
     * toolbars where you don’t want the keyboard focus removed from
     * the main area of the application.
     */
    setFocusOnClick(focusOnClick: boolean): void
    /**
     * Specifies whether `widget` can own the input focus.
     * 
     * Widget implementations should set `focusable` to %TRUE in
     * their init() function if they want to receive keyboard input.
     * 
     * Note that having `focusable` be %TRUE is only one of the
     * necessary conditions for being focusable. A widget must
     * also be sensitive and can-focus and not have an ancestor
     * that is marked as not can-focus in order to receive input
     * focus.
     * 
     * See [method`Gtk`.Widget.grab_focus] for actually setting
     * the input focus on a widget.
     */
    setFocusable(focusable: boolean): void
    /**
     * Sets the font map to use for Pango rendering.
     * 
     * The font map is the object that is used to look up fonts.
     * Setting a custom font map can be useful in special situations,
     * e.g. when you need to add application-specific fonts to the set
     * of available fonts.
     * 
     * When not set, the widget will inherit the font map from its parent.
     */
    setFontMap(fontMap?: Pango.FontMap | null): void
    /**
     * Sets the `cairo_font_options_t` used for Pango rendering
     * in this widget.
     * 
     * When not set, the default font options for the `GdkDisplay`
     * will be used.
     */
    setFontOptions(options?: cairo.FontOptions | null): void
    /**
     * Sets the horizontal alignment of `widget`.
     */
    setHalign(align: Gtk.Align): void
    /**
     * Sets the `has-tooltip` property on `widget` to `has_tooltip`.
     */
    setHasTooltip(hasTooltip: boolean): void
    /**
     * Sets whether the widget would like any available extra horizontal
     * space.
     * 
     * When a user resizes a `GtkWindow`, widgets with expand=TRUE
     * generally receive the extra space. For example, a list or
     * scrollable area or document in your window would often be set to
     * expand.
     * 
     * Call this function to set the expand flag if you would like your
     * widget to become larger horizontally when the window has extra
     * room.
     * 
     * By default, widgets automatically expand if any of their children
     * want to expand. (To see if a widget will automatically expand given
     * its current children and state, call [method`Gtk`.Widget.compute_expand].
     * A container can decide how the expandability of children affects the
     * expansion of the container by overriding the compute_expand virtual
     * method on `GtkWidget`.).
     * 
     * Setting hexpand explicitly with this function will override the
     * automatic expand behavior.
     * 
     * This function forces the widget to expand or not to expand,
     * regardless of children.  The override occurs because
     * [method`Gtk`.Widget.set_hexpand] sets the hexpand-set property (see
     * [method`Gtk`.Widget.set_hexpand_set]) which causes the widget’s hexpand
     * value to be used, rather than looking at children and widget state.
     */
    setHexpand(expand: boolean): void
    /**
     * Sets whether the hexpand flag will be used.
     * 
     * The [property`Gtk`.Widget:hexpand-set] property will be set
     * automatically when you call [method`Gtk`.Widget.set_hexpand]
     * to set hexpand, so the most likely reason to use this function
     * would be to unset an explicit expand flag.
     * 
     * If hexpand is set, then it overrides any computed
     * expand value based on child widgets. If hexpand is not
     * set, then the expand value depends on whether any
     * children of the widget would like to expand.
     * 
     * There are few reasons to use this function, but it’s here
     * for completeness and consistency.
     */
    setHexpandSet(set: boolean): void
    /**
     * Sets the layout manager delegate instance that provides an
     * implementation for measuring and allocating the children of `widget`.
     */
    setLayoutManager(layoutManager?: Gtk.LayoutManager | null): void
    /**
     * Sets the bottom margin of `widget`.
     */
    setMarginBottom(margin: number): void
    /**
     * Sets the end margin of `widget`.
     */
    setMarginEnd(margin: number): void
    /**
     * Sets the start margin of `widget`.
     */
    setMarginStart(margin: number): void
    /**
     * Sets the top margin of `widget`.
     */
    setMarginTop(margin: number): void
    /**
     * Sets a widgets name.
     * 
     * Setting a name allows you to refer to the widget from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for [class`Gtk`.StyleContext].
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     */
    setName(name: string): void
    /**
     * Request the `widget` to be rendered partially transparent.
     * 
     * An opacity of 0 is fully transparent and an opacity of 1
     * is fully opaque.
     * 
     * Opacity works on both toplevel widgets and child widgets, although
     * there are some limitations: For toplevel widgets, applying opacity
     * depends on the capabilities of the windowing system. On X11, this
     * has any effect only on X displays with a compositing manager,
     * see gdk_display_is_composited(). On Windows and Wayland it should
     * always work, although setting a window’s opacity after the window
     * has been shown may cause some flicker.
     * 
     * Note that the opacity is inherited through inclusion — if you set
     * a toplevel to be partially translucent, all of its content will
     * appear translucent, since it is ultimatively rendered on that
     * toplevel. The opacity value itself is not inherited by child
     * widgets (since that would make widgets deeper in the hierarchy
     * progressively more translucent). As a consequence, [class`Gtk`.Popover]s
     * and other [iface`Gtk`.Native] widgets with their own surface will use their
     * own opacity value, and thus by default appear non-translucent,
     * even if they are attached to a toplevel that is translucent.
     */
    setOpacity(opacity: number): void
    /**
     * Sets how `widget` treats content that is drawn outside the
     * widget's content area.
     * 
     * See the definition of [enum`Gtk`.Overflow] for details.
     * 
     * This setting is provided for widget implementations and
     * should not be used by application code.
     * 
     * The default value is %GTK_OVERFLOW_VISIBLE.
     */
    setOverflow(overflow: Gtk.Overflow): void
    /**
     * Sets `parent` as the parent widget of `widget`.
     * 
     * This takes care of details such as updating the state and style
     * of the child to reflect its new location and resizing the parent.
     * The opposite function is [method`Gtk`.Widget.unparent].
     * 
     * This function is useful only when implementing subclasses of
     * `GtkWidget`.
     */
    setParent(parent: Gtk.Widget): void
    /**
     * Specifies whether `widget` will be treated as the default
     * widget within its toplevel when it has the focus, even if
     * another widget is the default.
     */
    setReceivesDefault(receivesDefault: boolean): void
    /**
     * Sets the sensitivity of a widget.
     * 
     * A widget is sensitive if the user can interact with it.
     * Insensitive widgets are “grayed out” and the user can’t
     * interact with them. Insensitive widgets are known as
     * “inactive”, “disabled”, or “ghosted” in some other toolkits.
     */
    setSensitive(sensitive: boolean): void
    /**
     * Sets the minimum size of a widget.
     * 
     * That is, the widget’s size request will be at least `width`
     * by `height`. You can use this function to force a widget to
     * be larger than it normally would be.
     * 
     * In most cases, [method`Gtk`.Window.set_default_size] is a better
     * choice for toplevel windows than this function; setting the default
     * size will still allow users to shrink the window. Setting the size
     * request will force them to leave the window at least as large as
     * the size request.
     * 
     * Note the inherent danger of setting any fixed size - themes,
     * translations into other languages, different fonts, and user action
     * can all change the appropriate size for a given widget. So, it's
     * basically impossible to hardcode a size that will always be
     * correct.
     * 
     * The size request of a widget is the smallest size a widget can
     * accept while still functioning well and drawing itself correctly.
     * However in some strange cases a widget may be allocated less than
     * its requested size, and in many cases a widget may be allocated more
     * space than it requested.
     * 
     * If the size request in a given direction is -1 (unset), then
     * the “natural” size request of the widget will be used instead.
     * 
     * The size request set here does not include any margin from the
     * properties
     * [property`Gtk`.Widget:margin-start],
     * [property`Gtk`.Widget:margin-end],
     * [property`Gtk`.Widget:margin-top], and
     * [property`Gtk`.Widget:margin-bottom], but it does include pretty
     * much all other padding or border properties set by any subclass
     * of `GtkWidget`.
     */
    setSizeRequest(width: number, height: number): void
    /**
     * Turns on flag values in the current widget state.
     * 
     * Typical widget states are insensitive, prelighted, etc.
     * 
     * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
     * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set
     * the widget's direction, use [method`Gtk`.Widget.set_direction].
     * 
     * This function is for use in widget implementations.
     */
    setStateFlags(flags: Gtk.StateFlags, clear: boolean): void
    /**
     * Sets `markup` as the contents of the tooltip, which is marked
     * up with Pango markup.
     * 
     * This function will take care of setting the
     * [property`Gtk`.Widget:has-tooltip] as a side effect, and of the
     * default handler for the [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_markup].
     */
    setTooltipMarkup(markup?: string | null): void
    /**
     * Sets `text` as the contents of the tooltip.
     * 
     * If `text` contains any markup, it will be escaped.
     * 
     * This function will take care of setting
     * [property`Gtk`.Widget:has-tooltip] as a side effect,
     * and of the default handler for the
     * [signal`Gtk`.Widget::query-tooltip] signal.
     * 
     * See also [method`Gtk`.Tooltip.set_text].
     */
    setTooltipText(text?: string | null): void
    /**
     * Sets the vertical alignment of `widget`.
     */
    setValign(align: Gtk.Align): void
    /**
     * Sets whether the widget would like any available extra vertical
     * space.
     * 
     * See [method`Gtk`.Widget.set_hexpand] for more detail.
     */
    setVexpand(expand: boolean): void
    /**
     * Sets whether the vexpand flag will be used.
     * 
     * See [method`Gtk`.Widget.set_hexpand_set] for more detail.
     */
    setVexpandSet(set: boolean): void
    /**
     * Sets the visibility state of `widget`.
     * 
     * Note that setting this to %TRUE doesn’t mean the widget is
     * actually viewable, see [method`Gtk`.Widget.get_visible].
     * 
     * This function simply calls [method`Gtk`.Widget.show] or
     * [method`Gtk`.Widget.hide] but is nicer to use when the
     * visibility of the widget depends on some condition.
     */
    setVisible(visible: boolean): void
    /**
     * Returns whether `widget` should contribute to
     * the measuring and allocation of its parent.
     * 
     * This is %FALSE for invisible children, but also
     * for children that have their own surface.
     */
    shouldLayout(): boolean
    /**
     * Flags a widget to be displayed.
     * 
     * Any widget that isn’t shown will not appear on the screen.
     * 
     * Remember that you have to show the containers containing a widget,
     * in addition to the widget itself, before it will appear onscreen.
     * 
     * When a toplevel container is shown, it is immediately realized and
     * mapped; other shown widgets are realized and mapped when their
     * toplevel container is realized and mapped.
     */
    show(): void
    /**
     * Allocates widget with a transformation that translates
     * the origin to the position in `allocation`.
     * 
     * This is a simple form of [method`Gtk`.Widget.allocate].
     */
    sizeAllocate(allocation: Gtk.Allocation, baseline: number): void
    /**
     * Snapshot the a child of `widget`.
     * 
     * When a widget receives a call to the snapshot function,
     * it must send synthetic [vfunc`Gtk`.Widget.snapshot] calls
     * to all children. This function provides a convenient way
     * of doing this. A widget, when it receives a call to its
     * [vfunc`Gtk`.Widget.snapshot] function, calls
     * gtk_widget_snapshot_child() once for each child, passing in
     * the `snapshot` the widget received.
     * 
     * gtk_widget_snapshot_child() takes care of translating the origin of
     * `snapshot,` and deciding whether the child needs to be snapshot.
     * 
     * This function does nothing for children that implement `GtkNative`.
     */
    snapshotChild(child: Gtk.Widget, snapshot: Gtk.Snapshot): void
    /**
     * Translate coordinates relative to `src_widget’`s allocation
     * to coordinates relative to `dest_widget’`s allocations.
     * 
     * In order to perform this operation, both widget must share
     * a common ancestor.
     */
    translateCoordinates(destWidget: Gtk.Widget, srcX: number, srcY: number): [ /* returnType */ boolean, /* destX */ number | null, /* destY */ number | null ]
    /**
     * Triggers a tooltip query on the display where the toplevel
     * of `widget` is located.
     */
    triggerTooltipQuery(): void
    /**
     * Causes a widget to be unmapped if it’s currently mapped.
     * 
     * This function is only for use in widget implementations.
     */
    unmap(): void
    /**
     * Dissociate `widget` from its parent.
     * 
     * This function is only for use in widget implementations,
     * typically in dispose.
     */
    unparent(): void
    /**
     * Causes a widget to be unrealized (frees all GDK resources
     * associated with the widget).
     * 
     * This function is only useful in widget implementations.
     */
    unrealize(): void
    /**
     * Turns off flag values for the current widget state.
     * 
     * See [method`Gtk`.Widget.set_state_flags].
     * 
     * This function is for use in widget implementations.
     */
    unsetStateFlags(flags: Gtk.StateFlags): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Methods of Gtk-4.0.Gtk.Accessible */
    /**
     * Retrieves the `GtkAccessibleRole` for the given `GtkAccessible`.
     */
    getAccessibleRole(): Gtk.AccessibleRole
    /**
     * Resets the accessible `property` to its default value.
     */
    resetProperty(property: Gtk.AccessibleProperty): void
    /**
     * Resets the accessible `relation` to its default value.
     */
    resetRelation(relation: Gtk.AccessibleRelation): void
    /**
     * Resets the accessible `state` to its default value.
     */
    resetState(state: Gtk.AccessibleState): void
    /**
     * Updates an array of accessible properties.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * property change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateProperty(properties: Gtk.AccessibleProperty[], values: any[]): void
    /**
     * Updates an array of accessible relations.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * relation change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateRelation(relations: Gtk.AccessibleRelation[], values: any[]): void
    /**
     * Updates an array of accessible states.
     * 
     * This function should be called by `GtkWidget` types whenever an accessible
     * state change must be communicated to assistive technologies.
     * 
     * This function is meant to be used by language bindings.
     */
    updateState(states: Gtk.AccessibleState[], values: any[]): void
    /* Methods of Gtk-4.0.Gtk.Buildable */
    /**
     * Gets the ID of the `buildable` object.
     * 
     * `GtkBuilder` sets the name based on the ID attribute
     * of the <object> tag used to construct the `buildable`.
     */
    getBuildableId(): string | null
    /* Methods of Gtk-4.0.Gtk.Scrollable */
    /**
     * Returns the size of a non-scrolling border around the
     * outside of the scrollable.
     * 
     * An example for this would be treeview headers. GTK can use
     * this information to display overlaid graphics, like the
     * overshoot indication, at the right position.
     */
    getBorder(): [ /* returnType */ boolean, /* border */ Gtk.Border ]
    /**
     * Retrieves the `GtkAdjustment` used for horizontal scrolling.
     */
    getHadjustment(): Gtk.Adjustment | null
    /**
     * Gets the horizontal `GtkScrollablePolicy`.
     */
    getHscrollPolicy(): Gtk.ScrollablePolicy
    /**
     * Retrieves the `GtkAdjustment` used for vertical scrolling.
     */
    getVadjustment(): Gtk.Adjustment | null
    /**
     * Gets the vertical `GtkScrollablePolicy`.
     */
    getVscrollPolicy(): Gtk.ScrollablePolicy
    /**
     * Sets the horizontal adjustment of the `GtkScrollable`.
     */
    setHadjustment(hadjustment?: Gtk.Adjustment | null): void
    /**
     * Sets the `GtkScrollablePolicy`.
     * 
     * The policy determines whether horizontal scrolling should start
     * below the minimum width or below the natural width.
     */
    setHscrollPolicy(policy: Gtk.ScrollablePolicy): void
    /**
     * Sets the vertical adjustment of the `GtkScrollable`.
     */
    setVadjustment(vadjustment?: Gtk.Adjustment | null): void
    /**
     * Sets the `GtkScrollablePolicy`.
     * 
     * The policy determines whether vertical scrolling should start
     * below the minimum height or below the natural height.
     */
    setVscrollPolicy(policy: Gtk.ScrollablePolicy): void
    /* Signals of GtkSource-5.GtkSource.View */
    /**
     * Keybinding signal to change case of the text at the current cursor position.
     */
    connect(sigName: "change-case", callback: ((caseType: ChangeCaseType) => void)): number
    on(sigName: "change-case", callback: (caseType: ChangeCaseType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "change-case", callback: (caseType: ChangeCaseType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "change-case", callback: (caseType: ChangeCaseType) => void): NodeJS.EventEmitter
    emit(sigName: "change-case", caseType: ChangeCaseType): void
    /**
     * Keybinding signal to edit a number at the current cursor position.
     */
    connect(sigName: "change-number", callback: ((count: number) => void)): number
    on(sigName: "change-number", callback: (count: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "change-number", callback: (count: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "change-number", callback: (count: number) => void): NodeJS.EventEmitter
    emit(sigName: "change-number", count: number): void
    /**
     * Keybinding signal to join the lines currently selected.
     */
    connect(sigName: "join-lines", callback: (() => void)): number
    on(sigName: "join-lines", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "join-lines", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "join-lines", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "join-lines"): void
    /**
     * Emitted when a line mark has been activated (for instance when there
     * was a button press in the line marks gutter).
     * 
     * You can use `iter` to determine on which line the activation took place.
     */
    connect(sigName: "line-mark-activated", callback: ((iter: Gtk.TextIter, button: number, state: Gdk.ModifierType, nPresses: number) => void)): number
    on(sigName: "line-mark-activated", callback: (iter: Gtk.TextIter, button: number, state: Gdk.ModifierType, nPresses: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "line-mark-activated", callback: (iter: Gtk.TextIter, button: number, state: Gdk.ModifierType, nPresses: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "line-mark-activated", callback: (iter: Gtk.TextIter, button: number, state: Gdk.ModifierType, nPresses: number) => void): NodeJS.EventEmitter
    emit(sigName: "line-mark-activated", iter: Gtk.TextIter, button: number, state: Gdk.ModifierType, nPresses: number): void
    /**
     * The signal is a keybinding which gets emitted when the user initiates moving a line.
     * 
     * The default binding key is Alt+Up/Down arrow. And moves the currently selected lines,
     * or the current line up or down by one line.
     */
    connect(sigName: "move-lines", callback: ((down: boolean) => void)): number
    on(sigName: "move-lines", callback: (down: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-lines", callback: (down: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-lines", callback: (down: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "move-lines", down: boolean): void
    /**
     * Keybinding signal to move the cursor to the matching bracket.
     */
    connect(sigName: "move-to-matching-bracket", callback: ((extendSelection: boolean) => void)): number
    on(sigName: "move-to-matching-bracket", callback: (extendSelection: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-to-matching-bracket", callback: (extendSelection: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-to-matching-bracket", callback: (extendSelection: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "move-to-matching-bracket", extendSelection: boolean): void
    /**
     * The signal is a keybinding which gets emitted when the user initiates moving a word.
     * 
     * The default binding key is Alt+Left/Right Arrow and moves the current selection, or the current
     * word by one word.
     */
    connect(sigName: "move-words", callback: ((count: number) => void)): number
    on(sigName: "move-words", callback: (count: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-words", callback: (count: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-words", callback: (count: number) => void): NodeJS.EventEmitter
    emit(sigName: "move-words", count: number): void
    /**
     * The signal is emitted to insert a new snippet into the view.
     * 
     * If another snippet was active, it will be paused until all focus positions of `snippet` have been exhausted.
     * 
     * `location` will be updated to point at the end of the snippet.
     */
    connect(sigName: "push-snippet", callback: ((snippet: Snippet, location: Gtk.TextIter) => void)): number
    on(sigName: "push-snippet", callback: (snippet: Snippet, location: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "push-snippet", callback: (snippet: Snippet, location: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "push-snippet", callback: (snippet: Snippet, location: Gtk.TextIter) => void): NodeJS.EventEmitter
    emit(sigName: "push-snippet", snippet: Snippet, location: Gtk.TextIter): void
    /**
     * The signal is a key binding signal which gets
     * emitted when the user requests a completion, by pressing
     * <keycombo><keycap>Control</keycap><keycap>space</keycap></keycombo>.
     * 
     * This will create a [class`CompletionContext]` with the activation
     * type as %GTK_SOURCE_COMPLETION_ACTIVATION_USER_REQUESTED.
     * 
     * Applications should not connect to it, but may emit it with
     * [func`GObject`.signal_emit_by_name] if they need to activate the completion by
     * another means, for example with another key binding or a menu entry.
     */
    connect(sigName: "show-completion", callback: (() => void)): number
    on(sigName: "show-completion", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show-completion", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show-completion", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "show-completion"): void
    /**
     * Emitted when a the cursor was moved according to the smart home end setting.
     * 
     * The signal is emitted after the cursor is moved, but
     * during the [signal`Gtk`.TextView::move-cursor] action. This can be used to find
     * out whether the cursor was moved by a normal home/end or by a smart
     * home/end.
     */
    connect(sigName: "smart-home-end", callback: ((iter: Gtk.TextIter, count: number) => void)): number
    on(sigName: "smart-home-end", callback: (iter: Gtk.TextIter, count: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "smart-home-end", callback: (iter: Gtk.TextIter, count: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "smart-home-end", callback: (iter: Gtk.TextIter, count: number) => void): NodeJS.EventEmitter
    emit(sigName: "smart-home-end", iter: Gtk.TextIter, count: number): void
    /* Signals of Gtk-4.0.Gtk.TextView */
    /**
     * Gets emitted when the user asks for it.
     * 
     * The ::backspace signal is a [keybinding signal](class.SignalAction.html).
     * 
     * The default bindings for this signal are
     * <kbd>Backspace</kbd> and <kbd>Shift</kbd>-<kbd>Backspace</kbd>.
     */
    connect(sigName: "backspace", callback: (() => void)): number
    on(sigName: "backspace", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "backspace", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "backspace", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "backspace"): void
    /**
     * Gets emitted to copy the selection to the clipboard.
     * 
     * The ::copy-clipboard signal is a [keybinding signal](class.SignalAction.html).
     * 
     * The default bindings for this signal are
     * <kbd>Ctrl</kbd>-<kbd>c</kbd> and
     * <kbd>Ctrl</kbd>-<kbd>Insert</kbd>.
     */
    connect(sigName: "copy-clipboard", callback: (() => void)): number
    on(sigName: "copy-clipboard", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "copy-clipboard", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "copy-clipboard", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "copy-clipboard"): void
    /**
     * Gets emitted to cut the selection to the clipboard.
     * 
     * The ::cut-clipboard signal is a [keybinding signal](class.SignalAction.html).
     * 
     * The default bindings for this signal are
     * <kbd>Ctrl</kbd>-<kbd>x</kbd> and
     * <kbd>Shift</kbd>-<kbd>Delete</kbd>.
     */
    connect(sigName: "cut-clipboard", callback: (() => void)): number
    on(sigName: "cut-clipboard", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "cut-clipboard", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "cut-clipboard", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "cut-clipboard"): void
    /**
     * Gets emitted when the user initiates a text deletion.
     * 
     * The ::delete-from-cursor signal is a [keybinding signal](class.SignalAction.html).
     * 
     * If the `type` is %GTK_DELETE_CHARS, GTK deletes the selection
     * if there is one, otherwise it deletes the requested number
     * of characters.
     * 
     * The default bindings for this signal are <kbd>Delete</kbd> for
     * deleting a character, <kbd>Ctrl</kbd>-<kbd>Delete</kbd> for
     * deleting a word and <kbd>Ctrl</kbd>-<kbd>Backspace</kbd> for
     * deleting a word backwards.
     */
    connect(sigName: "delete-from-cursor", callback: ((type: Gtk.DeleteType, count: number) => void)): number
    on(sigName: "delete-from-cursor", callback: (type: Gtk.DeleteType, count: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "delete-from-cursor", callback: (type: Gtk.DeleteType, count: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "delete-from-cursor", callback: (type: Gtk.DeleteType, count: number) => void): NodeJS.EventEmitter
    emit(sigName: "delete-from-cursor", type: Gtk.DeleteType, count: number): void
    /**
     * Emitted when the selection needs to be extended at `location`.
     */
    connect(sigName: "extend-selection", callback: ((granularity: Gtk.TextExtendSelection, location: Gtk.TextIter, start: Gtk.TextIter, end: Gtk.TextIter) => boolean)): number
    on(sigName: "extend-selection", callback: (granularity: Gtk.TextExtendSelection, location: Gtk.TextIter, start: Gtk.TextIter, end: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "extend-selection", callback: (granularity: Gtk.TextExtendSelection, location: Gtk.TextIter, start: Gtk.TextIter, end: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "extend-selection", callback: (granularity: Gtk.TextExtendSelection, location: Gtk.TextIter, start: Gtk.TextIter, end: Gtk.TextIter) => void): NodeJS.EventEmitter
    emit(sigName: "extend-selection", granularity: Gtk.TextExtendSelection, location: Gtk.TextIter, start: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Gets emitted when the user initiates the insertion of a
     * fixed string at the cursor.
     * 
     * The ::insert-at-cursor signal is a [keybinding signal](class.SignalAction.html).
     * 
     * This signal has no default bindings.
     */
    connect(sigName: "insert-at-cursor", callback: ((string: string) => void)): number
    on(sigName: "insert-at-cursor", callback: (string: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "insert-at-cursor", callback: (string: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "insert-at-cursor", callback: (string: string) => void): NodeJS.EventEmitter
    emit(sigName: "insert-at-cursor", string: string): void
    /**
     * Gets emitted to present the Emoji chooser for the `text_view`.
     * 
     * The ::insert-emoji signal is a [keybinding signal](class.SignalAction.html).
     * 
     * The default bindings for this signal are
     * <kbd>Ctrl</kbd>-<kbd>.</kbd> and
     * <kbd>Ctrl</kbd>-<kbd>;</kbd>
     */
    connect(sigName: "insert-emoji", callback: (() => void)): number
    on(sigName: "insert-emoji", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "insert-emoji", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "insert-emoji", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "insert-emoji"): void
    /**
     * Gets emitted when the user initiates a cursor movement.
     * 
     * The ::move-cursor signal is a [keybinding signal](class.SignalAction.html).
     * If the cursor is not visible in `text_view,` this signal causes
     * the viewport to be moved instead.
     * 
     * Applications should not connect to it, but may emit it with
     * g_signal_emit_by_name() if they need to control the cursor
     * programmatically.
     * 
     * 
     * The default bindings for this signal come in two variants,
     * the variant with the <kbd>Shift</kbd> modifier extends the
     * selection, the variant without it does not.
     * There are too many key combinations to list them all here.
     * 
     * - <kbd>←</kbd>, <kbd>→</kbd>, <kbd>↑</kbd>, <kbd>↓</kbd>
     *   move by individual characters/lines
     * - <kbd>Ctrl</kbd>-<kbd>→</kbd>, etc. move by words/paragraphs
     * - <kbd>Home</kbd>, <kbd>End</kbd> move to the ends of the buffer
     * - <kbd>PgUp</kbd>, <kbd>PgDn</kbd> move vertically by pages
     * - <kbd>Ctrl</kbd>-<kbd>PgUp</kbd>, <kbd>Ctrl</kbd>-<kbd>PgDn</kbd>
     *   move horizontally by pages
     */
    connect(sigName: "move-cursor", callback: ((step: Gtk.MovementStep, count: number, extendSelection: boolean) => void)): number
    on(sigName: "move-cursor", callback: (step: Gtk.MovementStep, count: number, extendSelection: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-cursor", callback: (step: Gtk.MovementStep, count: number, extendSelection: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-cursor", callback: (step: Gtk.MovementStep, count: number, extendSelection: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "move-cursor", step: Gtk.MovementStep, count: number, extendSelection: boolean): void
    /**
     * Gets emitted to move the viewport.
     * 
     * The ::move-viewport signal is a [keybinding signal](class.SignalAction.html),
     * which can be bound to key combinations to allow the user to move the viewport,
     * i.e. change what part of the text view is visible in a containing scrolled
     * window.
     * 
     * There are no default bindings for this signal.
     */
    connect(sigName: "move-viewport", callback: ((step: Gtk.ScrollStep, count: number) => void)): number
    on(sigName: "move-viewport", callback: (step: Gtk.ScrollStep, count: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-viewport", callback: (step: Gtk.ScrollStep, count: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-viewport", callback: (step: Gtk.ScrollStep, count: number) => void): NodeJS.EventEmitter
    emit(sigName: "move-viewport", step: Gtk.ScrollStep, count: number): void
    /**
     * Gets emitted to paste the contents of the clipboard
     * into the text view.
     * 
     * The ::paste-clipboard signal is a [keybinding signal](class.SignalAction.html).
     * 
     * The default bindings for this signal are
     * <kbd>Ctrl</kbd>-<kbd>v</kbd> and
     * <kbd>Shift</kbd>-<kbd>Insert</kbd>.
     */
    connect(sigName: "paste-clipboard", callback: (() => void)): number
    on(sigName: "paste-clipboard", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "paste-clipboard", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "paste-clipboard", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "paste-clipboard"): void
    /**
     * Emitted when preedit text of the active IM changes.
     * 
     * If an input method is used, the typed text will not immediately
     * be committed to the buffer. So if you are interested in the text,
     * connect to this signal.
     * 
     * This signal is only emitted if the text at the given position
     * is actually editable.
     */
    connect(sigName: "preedit-changed", callback: ((preedit: string) => void)): number
    on(sigName: "preedit-changed", callback: (preedit: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "preedit-changed", callback: (preedit: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "preedit-changed", callback: (preedit: string) => void): NodeJS.EventEmitter
    emit(sigName: "preedit-changed", preedit: string): void
    /**
     * Gets emitted to select or unselect the complete contents of the text view.
     * 
     * The ::select-all signal is a [keybinding signal](class.SignalAction.html).
     * 
     * The default bindings for this signal are
     * <kbd>Ctrl</kbd>-<kbd>a</kbd> and
     * <kbd>Ctrl</kbd>-<kbd>/</kbd> for selecting and
     * <kbd>Shift</kbd>-<kbd>Ctrl</kbd>-<kbd>a</kbd> and
     * <kbd>Ctrl</kbd>-<kbd>\</kbd> for unselecting.
     */
    connect(sigName: "select-all", callback: ((select: boolean) => void)): number
    on(sigName: "select-all", callback: (select: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "select-all", callback: (select: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "select-all", callback: (select: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "select-all", select: boolean): void
    /**
     * Gets emitted when the user initiates settings the "anchor" mark.
     * 
     * The ::set-anchor signal is a [keybinding signal](class.SignalAction.html)
     * which gets emitted when the user initiates setting the "anchor"
     * mark. The "anchor" mark gets placed at the same position as the
     * "insert" mark.
     * 
     * This signal has no default bindings.
     */
    connect(sigName: "set-anchor", callback: (() => void)): number
    on(sigName: "set-anchor", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-anchor", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-anchor", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "set-anchor"): void
    /**
     * Gets emitted to toggle the `cursor-visible` property.
     * 
     * The ::toggle-cursor-visible signal is a
     * [keybinding signal](class.SignalAction.html).
     * 
     * The default binding for this signal is <kbd>F7</kbd>.
     */
    connect(sigName: "toggle-cursor-visible", callback: (() => void)): number
    on(sigName: "toggle-cursor-visible", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "toggle-cursor-visible", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "toggle-cursor-visible", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "toggle-cursor-visible"): void
    /**
     * Gets emitted to toggle the overwrite mode of the text view.
     * 
     * The ::toggle-overwrite signal is a [keybinding signal](class.SignalAction.html).
     * 
     * The default binding for this signal is <kbd>Insert</kbd>.
     */
    connect(sigName: "toggle-overwrite", callback: (() => void)): number
    on(sigName: "toggle-overwrite", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "toggle-overwrite", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "toggle-overwrite", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "toggle-overwrite"): void
    /* Signals of Gtk-4.0.Gtk.Widget */
    /**
     * Signals that all holders of a reference to the widget should release
     * the reference that they hold.
     * 
     * May result in finalization of the widget if all references are released.
     * 
     * This signal is not suitable for saving widget state.
     */
    connect(sigName: "destroy", callback: (() => void)): number
    on(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "destroy", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "destroy", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "destroy"): void
    /**
     * Emitted when the text direction of a widget changes.
     */
    connect(sigName: "direction-changed", callback: ((previousDirection: Gtk.TextDirection) => void)): number
    on(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "direction-changed", callback: (previousDirection: Gtk.TextDirection) => void): NodeJS.EventEmitter
    emit(sigName: "direction-changed", previousDirection: Gtk.TextDirection): void
    /**
     * Emitted when `widget` is hidden.
     */
    connect(sigName: "hide", callback: (() => void)): number
    on(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "hide", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "hide", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "hide"): void
    /**
     * Emitted if keyboard navigation fails.
     * 
     * See [method`Gtk`.Widget.keynav_failed] for details.
     */
    connect(sigName: "keynav-failed", callback: ((direction: Gtk.DirectionType) => boolean)): number
    on(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "keynav-failed", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "keynav-failed", direction: Gtk.DirectionType): void
    /**
     * Emitted when `widget` is going to be mapped.
     * 
     * A widget is mapped when the widget is visible (which is controlled with
     * [property`Gtk`.Widget:visible]) and all its parents up to the toplevel widget
     * are also visible.
     * 
     * The ::map signal can be used to determine whether a widget will be drawn,
     * for instance it can resume an animation that was stopped during the
     * emission of [signal`Gtk`.Widget::unmap].
     */
    connect(sigName: "map", callback: (() => void)): number
    on(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "map", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "map", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "map"): void
    /**
     * Emitted when a widget is activated via a mnemonic.
     * 
     * The default handler for this signal activates `widget` if `group_cycling`
     * is %FALSE, or just makes `widget` grab focus if `group_cycling` is %TRUE.
     */
    connect(sigName: "mnemonic-activate", callback: ((groupCycling: boolean) => boolean)): number
    on(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "mnemonic-activate", callback: (groupCycling: boolean) => void): NodeJS.EventEmitter
    emit(sigName: "mnemonic-activate", groupCycling: boolean): void
    /**
     * Emitted when the focus is moved.
     */
    connect(sigName: "move-focus", callback: ((direction: Gtk.DirectionType) => void)): number
    on(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-focus", callback: (direction: Gtk.DirectionType) => void): NodeJS.EventEmitter
    emit(sigName: "move-focus", direction: Gtk.DirectionType): void
    /**
     * Emitted when the widgets tooltip is about to be shown.
     * 
     * This happens when the [property`Gtk`.Widget:has-tooltip] property
     * is %TRUE and the hover timeout has expired with the cursor hovering
     * "above" `widget;` or emitted when `widget` got focus in keyboard mode.
     * 
     * Using the given coordinates, the signal handler should determine
     * whether a tooltip should be shown for `widget`. If this is the case
     * %TRUE should be returned, %FALSE otherwise.  Note that if
     * `keyboard_mode` is %TRUE, the values of `x` and `y` are undefined and
     * should not be used.
     * 
     * The signal handler is free to manipulate `tooltip` with the therefore
     * destined function calls.
     */
    connect(sigName: "query-tooltip", callback: ((x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => boolean)): number
    on(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query-tooltip", callback: (x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip) => void): NodeJS.EventEmitter
    emit(sigName: "query-tooltip", x: number, y: number, keyboardMode: boolean, tooltip: Gtk.Tooltip): void
    /**
     * Emitted when `widget` is associated with a `GdkSurface`.
     * 
     * This means that [method`Gtk`.Widget.realize] has been called
     * or the widget has been mapped (that is, it is going to be drawn).
     */
    connect(sigName: "realize", callback: (() => void)): number
    on(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "realize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "realize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "realize"): void
    /**
     * Emitted when `widget` is shown.
     */
    connect(sigName: "show", callback: (() => void)): number
    on(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "show"): void
    /**
     * Emitted when the widget state changes.
     * 
     * See [method`Gtk`.Widget.get_state_flags].
     */
    connect(sigName: "state-flags-changed", callback: ((flags: Gtk.StateFlags) => void)): number
    on(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "state-flags-changed", callback: (flags: Gtk.StateFlags) => void): NodeJS.EventEmitter
    emit(sigName: "state-flags-changed", flags: Gtk.StateFlags): void
    /**
     * Emitted when `widget` is going to be unmapped.
     * 
     * A widget is unmapped when either it or any of its parents up to the
     * toplevel widget have been set as hidden.
     * 
     * As ::unmap indicates that a widget will not be shown any longer,
     * it can be used to, for example, stop an animation on the widget.
     */
    connect(sigName: "unmap", callback: (() => void)): number
    on(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unmap", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unmap", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unmap"): void
    /**
     * Emitted when the `GdkSurface` associated with `widget` is destroyed.
     * 
     * This means that [method`Gtk`.Widget.unrealize] has been called
     * or the widget has been unmapped (that is, it is going to be hidden).
     */
    connect(sigName: "unrealize", callback: (() => void)): number
    on(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unrealize", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unrealize", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "unrealize"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::auto-indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::auto-indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::auto-indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::auto-indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::background-pattern", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-pattern", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::background-pattern", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::background-pattern", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::background-pattern", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::completion", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::completion", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::completion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::completion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::completion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::enable-snippets", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-snippets", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::enable-snippets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::enable-snippets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::enable-snippets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::highlight-current-line", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::highlight-current-line", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::highlight-current-line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::highlight-current-line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::highlight-current-line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent-on-tab", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent-on-tab", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent-on-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent-on-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent-on-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indenter", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indenter", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indenter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indenter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indenter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::insert-spaces-instead-of-tabs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::insert-spaces-instead-of-tabs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::insert-spaces-instead-of-tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::insert-spaces-instead-of-tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::insert-spaces-instead-of-tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::right-margin-position", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::right-margin-position", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::right-margin-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::right-margin-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::right-margin-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::show-line-marks", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-line-marks", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::show-line-marks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::show-line-marks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::show-line-marks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::show-line-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-line-numbers", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::show-line-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::show-line-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::show-line-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::show-right-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-right-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::show-right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::show-right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::show-right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-backspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-backspace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-backspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-backspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-backspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::smart-home-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-home-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::smart-home-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::smart-home-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::smart-home-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::space-drawer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::space-drawer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::space-drawer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::space-drawer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::space-drawer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tab-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-width", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tab-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tab-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tab-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accepts-tab", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accepts-tab", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accepts-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accepts-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accepts-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::bottom-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bottom-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::bottom-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::bottom-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::bottom-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::buffer", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffer", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cursor-visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor-visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cursor-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cursor-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cursor-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::editable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::extra-menu", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::extra-menu", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::extra-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::extra-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::extra-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::im-module", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::im-module", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::im-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::im-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::im-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::input-hints", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-hints", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::input-hints", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::input-hints", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::input-hints", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::input-purpose", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-purpose", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::input-purpose", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::input-purpose", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::input-purpose", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::justification", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::justification", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::justification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::justification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::justification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::left-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::left-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::left-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::left-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::left-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::monospace", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::monospace", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::monospace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::monospace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::monospace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overwrite", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overwrite", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overwrite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overwrite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overwrite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pixels-above-lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-above-lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pixels-below-lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-below-lines", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::pixels-inside-wrap", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-inside-wrap", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::right-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::right-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tabs", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tabs", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::top-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::top-margin", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::top-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::top-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::top-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::wrap-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wrap-mode", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-target", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::can-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::css-classes", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::css-classes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::cursor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focusable", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::focusable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::layout-manager", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::layout-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overflow", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::overflow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accessible-role", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::accessible-role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hadjustment", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hadjustment", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::hscroll-policy", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hscroll-policy", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vadjustment", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vadjustment", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::vscroll-policy", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vscroll-policy", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: View_ConstructProps)
    _init (config?: View_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): View
    static newWithBuffer(buffer: Buffer): View
    /* Function overloads */
    static newWithBuffer(buffer: Gtk.TextBuffer): View
    static $gtype: GObject.Type
}
interface VimIMContext_ConstructProps extends Gtk.IMContext_ConstructProps {
}
class VimIMContext {
    /* Properties of GtkSource-5.GtkSource.VimIMContext */
    readonly commandBarText: string
    readonly commandText: string
    /* Properties of Gtk-4.0.Gtk.IMContext */
    /**
     * Additional hints that allow input methods to fine-tune
     * their behaviour.
     */
    inputHints: Gtk.InputHints
    /**
     * The purpose of the text field that the `GtkIMContext is connected to.
     * 
     * This property can be used by on-screen keyboards and other input
     * methods to adjust their behaviour.
     */
    inputPurpose: Gtk.InputPurpose
    /* Fields of Gtk-4.0.Gtk.IMContext */
    readonly parentInstance: GObject.Object
    /* Fields of GObject-2.0.GObject.Object */
    readonly gTypeInstance: GObject.TypeInstance
    /* Methods of GtkSource-5.GtkSource.VimIMContext */
    /**
     * Executes `command` as if it was typed into the command bar by the
     * user except that this does not emit the
     * [signal`VimIMContext:`:execute-command] signal.
     */
    executeCommand(command: string): void
    /**
     * Gets the current command-bar text as it is entered by the user.
     */
    getCommandBarText(): string
    /**
     * Gets the current command text as it is entered by the user.
     */
    getCommandText(): string
    /* Methods of Gtk-4.0.Gtk.IMContext */
    /**
     * Asks the widget that the input context is attached to delete
     * characters around the cursor position by emitting the
     * `::delete_surrounding` signal.
     * 
     * Note that `offset` and `n_chars` are in characters not in bytes
     * which differs from the usage other places in `GtkIMContext`.
     * 
     * In order to use this function, you should first call
     * [method`Gtk`.IMContext.get_surrounding] to get the current context,
     * and call this function immediately afterwards to make sure that you
     * know what you are deleting. You should also account for the fact
     * that even if the signal was handled, the input context might not
     * have deleted all the characters that were requested to be deleted.
     * 
     * This function is used by an input method that wants to make
     * subsitutions in the existing text in response to new input.
     * It is not useful for applications.
     */
    deleteSurrounding(offset: number, nChars: number): boolean
    /**
     * Allow an input method to forward key press and release events
     * to another input method without necessarily having a `GdkEvent`
     * available.
     */
    filterKey(press: boolean, surface: Gdk.Surface, device: Gdk.Device, time: number, keycode: number, state: Gdk.ModifierType, group: number): boolean
    /**
     * Allow an input method to internally handle key press and release
     * events.
     * 
     * If this function returns %TRUE, then no further processing
     * should be done for this key event.
     */
    filterKeypress(event: Gdk.Event): boolean
    /**
     * Notify the input method that the widget to which this
     * input context corresponds has gained focus.
     * 
     * The input method may, for example, change the displayed
     * feedback to reflect this change.
     */
    focusIn(): void
    /**
     * Notify the input method that the widget to which this
     * input context corresponds has lost focus.
     * 
     * The input method may, for example, change the displayed
     * feedback or reset the contexts state to reflect this change.
     */
    focusOut(): void
    /**
     * Retrieve the current preedit string for the input context,
     * and a list of attributes to apply to the string.
     * 
     * This string should be displayed inserted at the insertion point.
     */
    getPreeditString(): [ /* str */ string, /* attrs */ Pango.AttrList, /* cursorPos */ number ]
    /**
     * Retrieves context around the insertion point.
     * 
     * Input methods typically want context in order to constrain input text
     * based on existing text; this is important for languages such as Thai
     * where only some sequences of characters are allowed.
     * 
     * This function is implemented by emitting the
     * [signal`Gtk`.IMContext::retrieve-surrounding] signal on the input method;
     * in response to this signal, a widget should provide as much context as
     * is available, up to an entire paragraph, by calling
     * [method`Gtk`.IMContext.set_surrounding].
     * 
     * Note that there is no obligation for a widget to respond to the
     * `::retrieve-surrounding` signal, so input methods must be prepared to
     * function without context.
     */
    getSurrounding(): [ /* returnType */ boolean, /* text */ string, /* cursorIndex */ number ]
    /**
     * Retrieves context around the insertion point.
     * 
     * Input methods typically want context in order to constrain input
     * text based on existing text; this is important for languages such
     * as Thai where only some sequences of characters are allowed.
     * 
     * This function is implemented by emitting the
     * [signal`Gtk`.IMContext::retrieve-surrounding] signal on the input method;
     * in response to this signal, a widget should provide as much context as
     * is available, up to an entire paragraph, by calling
     * [method`Gtk`.IMContext.set_surrounding_with_selection].
     * 
     * Note that there is no obligation for a widget to respond to the
     * `::retrieve-surrounding` signal, so input methods must be prepared to
     * function without context.
     */
    getSurroundingWithSelection(): [ /* returnType */ boolean, /* text */ string, /* cursorIndex */ number, /* anchorIndex */ number ]
    /**
     * Notify the input method that a change such as a change in cursor
     * position has been made.
     * 
     * This will typically cause the input method to clear the preedit state.
     */
    reset(): void
    /**
     * Set the client widget for the input context.
     * 
     * This is the `GtkWidget` holding the input focus. This widget is
     * used in order to correctly position status windows, and may
     * also be used for purposes internal to the input method.
     */
    setClientWidget(widget?: Gtk.Widget | null): void
    /**
     * Notify the input method that a change in cursor
     * position has been made.
     * 
     * The location is relative to the client widget.
     */
    setCursorLocation(area: Gdk.Rectangle): void
    /**
     * Sets surrounding context around the insertion point and preedit
     * string.
     * 
     * This function is expected to be called in response to the
     * [signal`Gtk`.IMContext::retrieve-surrounding] signal, and will
     * likely have no effect if called at other times.
     */
    setSurrounding(text: string, len: number, cursorIndex: number): void
    /**
     * Sets surrounding context around the insertion point and preedit
     * string. This function is expected to be called in response to the
     * [signal`Gtk`.IMContext::retrieve_surrounding] signal, and will likely
     * have no effect if called at other times.
     */
    setSurroundingWithSelection(text: string, len: number, cursorIndex: number, anchorIndex: number): void
    /**
     * Sets whether the IM context should use the preedit string
     * to display feedback.
     * 
     * If `use_preedit` is %FALSE (default is %TRUE), then the IM context
     * may use some other method to display feedback, such as displaying
     * it in a child of the root window.
     */
    setUsePreedit(usePreedit: boolean): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bindProperty(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bindPropertyFull(sourceProperty: string, target: GObject.Object, targetProperty: string, flags: GObject.BindingFlags, transformTo: Function, transformFrom: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    forceFloating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freezeNotify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    getData(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    getProperty(propertyName: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    getQdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    isFloating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(propertyName: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notifyByPspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    refSink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    runDispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    setData(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    setProperty(propertyName: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    stealData(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    stealQdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thawNotify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watchClosure(closure: Function): void
    /* Signals of GtkSource-5.GtkSource.VimIMContext */
    /**
     * Requests the application open the file found at `path`.
     * 
     * If `path` is %NULL, then the current file should be reloaded from storage.
     * 
     * This may be executed in relation to the user running the
     * `:edit` or `:e` commands.
     */
    connect(sigName: "edit", callback: ((view: View, path?: string | null) => void)): number
    on(sigName: "edit", callback: (view: View, path?: string | null) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "edit", callback: (view: View, path?: string | null) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "edit", callback: (view: View, path?: string | null) => void): NodeJS.EventEmitter
    emit(sigName: "edit", view: View, path?: string | null): void
    /**
     * The signal is emitted when a command should be
     * executed. This might be something like `:wq` or `:e <path>`.
     * 
     * If the application chooses to implement this, it should return
     * %TRUE from this signal to indicate the command has been handled.
     */
    connect(sigName: "execute-command", callback: ((command: string) => boolean)): number
    on(sigName: "execute-command", callback: (command: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "execute-command", callback: (command: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "execute-command", callback: (command: string) => void): NodeJS.EventEmitter
    emit(sigName: "execute-command", command: string): void
    /**
     * Requests that the application format the text between
     * `begin` and `end`.
     */
    connect(sigName: "format-text", callback: ((begin: Gtk.TextIter, end: Gtk.TextIter) => void)): number
    on(sigName: "format-text", callback: (begin: Gtk.TextIter, end: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "format-text", callback: (begin: Gtk.TextIter, end: Gtk.TextIter) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "format-text", callback: (begin: Gtk.TextIter, end: Gtk.TextIter) => void): NodeJS.EventEmitter
    emit(sigName: "format-text", begin: Gtk.TextIter, end: Gtk.TextIter): void
    /**
     * Requests the application save the file.
     * 
     * If a filename was provided, it will be available to the signal handler as `path`.
     * This may be executed in relation to the user running the `:write` or `:w` commands.
     */
    connect(sigName: "write", callback: ((view: View, path?: string | null) => void)): number
    on(sigName: "write", callback: (view: View, path?: string | null) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "write", callback: (view: View, path?: string | null) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "write", callback: (view: View, path?: string | null) => void): NodeJS.EventEmitter
    emit(sigName: "write", view: View, path?: string | null): void
    /* Signals of Gtk-4.0.Gtk.IMContext */
    /**
     * The ::commit signal is emitted when a complete input sequence
     * has been entered by the user.
     * 
     * If the commit comes after a preediting sequence, the
     * ::commit signal is emitted after ::preedit-end.
     * 
     * This can be a single character immediately after a key press or
     * the final result of preediting.
     */
    connect(sigName: "commit", callback: ((str: string) => void)): number
    on(sigName: "commit", callback: (str: string) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "commit", callback: (str: string) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "commit", callback: (str: string) => void): NodeJS.EventEmitter
    emit(sigName: "commit", str: string): void
    /**
     * The ::delete-surrounding signal is emitted when the input method
     * needs to delete all or part of the context surrounding the cursor.
     */
    connect(sigName: "delete-surrounding", callback: ((offset: number, nChars: number) => boolean)): number
    on(sigName: "delete-surrounding", callback: (offset: number, nChars: number) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "delete-surrounding", callback: (offset: number, nChars: number) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "delete-surrounding", callback: (offset: number, nChars: number) => void): NodeJS.EventEmitter
    emit(sigName: "delete-surrounding", offset: number, nChars: number): void
    /**
     * The ::preedit-changed signal is emitted whenever the preedit sequence
     * currently being entered has changed.
     * 
     * It is also emitted at the end of a preedit sequence, in which case
     * [method`Gtk`.IMContext.get_preedit_string] returns the empty string.
     */
    connect(sigName: "preedit-changed", callback: (() => void)): number
    on(sigName: "preedit-changed", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "preedit-changed", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "preedit-changed", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "preedit-changed"): void
    /**
     * The ::preedit-end signal is emitted when a preediting sequence
     * has been completed or canceled.
     */
    connect(sigName: "preedit-end", callback: (() => void)): number
    on(sigName: "preedit-end", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "preedit-end", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "preedit-end", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "preedit-end"): void
    /**
     * The ::preedit-start signal is emitted when a new preediting sequence
     * starts.
     */
    connect(sigName: "preedit-start", callback: (() => void)): number
    on(sigName: "preedit-start", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "preedit-start", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "preedit-start", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "preedit-start"): void
    /**
     * The ::retrieve-surrounding signal is emitted when the input method
     * requires the context surrounding the cursor.
     * 
     * The callback should set the input method surrounding context by
     * calling the [method`Gtk`.IMContext.set_surrounding] method.
     */
    connect(sigName: "retrieve-surrounding", callback: (() => boolean)): number
    on(sigName: "retrieve-surrounding", callback: () => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "retrieve-surrounding", callback: () => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "retrieve-surrounding", callback: () => void): NodeJS.EventEmitter
    emit(sigName: "retrieve-surrounding"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify", callback: (pspec: GObject.ParamSpec) => void): NodeJS.EventEmitter
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::command-bar-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::command-bar-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::command-bar-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::command-bar-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::command-bar-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::command-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::command-text", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::command-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::command-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::command-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::input-hints", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-hints", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::input-hints", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::input-hints", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::input-hints", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: "notify::input-purpose", callback: ((pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-purpose", callback: ((pspec: GObject.ParamSpec) => void)): number
    on(sigName: "notify::input-purpose", callback: (...args: any[]) => void): NodeJS.EventEmitter
    once(sigName: "notify::input-purpose", callback: (...args: any[]) => void): NodeJS.EventEmitter
    off(sigName: "notify::input-purpose", callback: (...args: any[]) => void): NodeJS.EventEmitter
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    on(sigName: string, callback: any): NodeJS.EventEmitter
    once(sigName: string, callback: any): NodeJS.EventEmitter
    off(sigName: string, callback: any): NodeJS.EventEmitter
    static name: string
    constructor (config?: VimIMContext_ConstructProps)
    _init (config?: VimIMContext_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): VimIMContext
    static $gtype: GObject.Type
}
abstract class BufferClass {
    /* Fields of GtkSource-5.GtkSource.BufferClass */
    readonly parentClass: Gtk.TextBufferClass
    readonly bracketMatched: (buffer: Buffer, iter: Gtk.TextIter, state: BracketMatchType) => void
    static name: string
}
abstract class CompletionCellClass {
    /* Fields of GtkSource-5.GtkSource.CompletionCellClass */
    readonly parentClass: Gtk.WidgetClass
    static name: string
}
abstract class CompletionClass {
    /* Fields of GtkSource-5.GtkSource.CompletionClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class CompletionContextClass {
    /* Fields of GtkSource-5.GtkSource.CompletionContextClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class CompletionProposalInterface {
    /* Fields of GtkSource-5.GtkSource.CompletionProposalInterface */
    readonly parentIface: GObject.TypeInterface
    static name: string
}
abstract class CompletionProviderInterface {
    /* Fields of GtkSource-5.GtkSource.CompletionProviderInterface */
    readonly parentIface: GObject.TypeInterface
    readonly getTitle: (self: CompletionProvider) => string | null
    readonly getPriority: (self: CompletionProvider, context: CompletionContext) => number
    readonly isTrigger: (self: CompletionProvider, iter: Gtk.TextIter, ch: number) => boolean
    readonly keyActivates: (self: CompletionProvider, context: CompletionContext, proposal: CompletionProposal, keyval: number, state: Gdk.ModifierType) => boolean
    readonly populateAsync: (self: CompletionProvider, context: CompletionContext, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    readonly populateFinish: (self: CompletionProvider, result: Gio.AsyncResult) => Gio.ListModel
    readonly refilter: (self: CompletionProvider, context: CompletionContext, model: Gio.ListModel) => void
    readonly display: (self: CompletionProvider, context: CompletionContext, proposal: CompletionProposal, cell: CompletionCell) => void
    readonly activate: (self: CompletionProvider, context: CompletionContext, proposal: CompletionProposal) => void
    readonly listAlternates: (self: CompletionProvider, context: CompletionContext, proposal: CompletionProposal) => CompletionProposal[] | null
    static name: string
}
abstract class CompletionSnippetsClass {
    /* Fields of GtkSource-5.GtkSource.CompletionSnippetsClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class CompletionWordsClass {
    /* Fields of GtkSource-5.GtkSource.CompletionWordsClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class Encoding {
    /* Methods of GtkSource-5.GtkSource.Encoding */
    /**
     * Used by language bindings.
     */
    copy(): Encoding
    /**
     * Used by language bindings.
     */
    free(): void
    /**
     * Gets the character set of the #GtkSourceEncoding, such as "UTF-8" or
     * "ISO-8859-1".
     */
    getCharset(): string
    /**
     * Gets the name of the #GtkSourceEncoding such as "Unicode" or "Western".
     */
    getName(): string
    toString(): string
    static name: string
    /* Static methods and pseudo-constructors */
    /**
     * Gets all encodings.
     */
    static getAll(): Encoding[]
    /**
     * Gets the #GtkSourceEncoding for the current locale.
     * 
     * See also [func`GLib`.get_charset].
     */
    static getCurrent(): Encoding
    /**
     * Gets the list of default candidate encodings to try when loading a file.
     * 
     * See [method`FileLoader`.set_candidate_encodings].
     * 
     * This function returns a different list depending on the current locale (i.e.
     * language, country and default encoding). The UTF-8 encoding and the current
     * locale encoding are guaranteed to be present in the returned list.
     */
    static getDefaultCandidates(): Encoding[]
    /**
     * Gets a #GtkSourceEncoding from a character set such as "UTF-8" or
     * "ISO-8859-1".
     */
    static getFromCharset(charset: string): Encoding | null
    static getUtf8(): Encoding
}
abstract class FileClass {
    /* Fields of GtkSource-5.GtkSource.FileClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class FileLoaderClass {
    /* Fields of GtkSource-5.GtkSource.FileLoaderClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class FileSaverClass {
    /* Fields of GtkSource-5.GtkSource.FileSaverClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class GutterClass {
    /* Fields of GtkSource-5.GtkSource.GutterClass */
    readonly parentClass: Gtk.WidgetClass
    static name: string
}
abstract class GutterLinesClass {
    /* Fields of GtkSource-5.GtkSource.GutterLinesClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class GutterRendererClass {
    /* Fields of GtkSource-5.GtkSource.GutterRendererClass */
    readonly parentClass: Gtk.WidgetClass
    readonly queryData: (renderer: GutterRenderer, lines: GutterLines, line: number) => void
    readonly begin: (renderer: GutterRenderer, lines: GutterLines) => void
    readonly snapshotLine: (renderer: GutterRenderer, snapshot: Gtk.Snapshot, lines: GutterLines, line: number) => void
    readonly end: (renderer: GutterRenderer) => void
    readonly changeView: (renderer: GutterRenderer, oldView?: View | null) => void
    readonly changeBuffer: (renderer: GutterRenderer, oldBuffer?: Buffer | null) => void
    readonly queryActivatable: (renderer: GutterRenderer, iter: Gtk.TextIter, area: Gdk.Rectangle) => boolean
    readonly activate: (renderer: GutterRenderer, iter: Gtk.TextIter, area: Gdk.Rectangle, button: number, state: Gdk.ModifierType, nPresses: number) => void
    static name: string
}
abstract class GutterRendererPixbufClass {
    /* Fields of GtkSource-5.GtkSource.GutterRendererPixbufClass */
    readonly parentClass: GutterRendererClass
    static name: string
}
abstract class GutterRendererTextClass {
    /* Fields of GtkSource-5.GtkSource.GutterRendererTextClass */
    readonly parentClass: GutterRendererClass
    static name: string
}
abstract class HoverClass {
    /* Fields of GtkSource-5.GtkSource.HoverClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class HoverContextClass {
    /* Fields of GtkSource-5.GtkSource.HoverContextClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class HoverDisplayClass {
    /* Fields of GtkSource-5.GtkSource.HoverDisplayClass */
    readonly parentClass: Gtk.WidgetClass
    static name: string
}
abstract class HoverProviderInterface {
    /* Fields of GtkSource-5.GtkSource.HoverProviderInterface */
    readonly parentIface: GObject.TypeInterface
    readonly populate: (self: HoverProvider, context: HoverContext, display: HoverDisplay) => boolean
    readonly populateAsync: (self: HoverProvider, context: HoverContext, display: HoverDisplay, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null) => void
    readonly populateFinish: (self: HoverProvider, result: Gio.AsyncResult) => boolean
    static name: string
}
abstract class IndenterInterface {
    /* Fields of GtkSource-5.GtkSource.IndenterInterface */
    readonly parentIface: GObject.TypeInterface
    readonly isTrigger: (self: Indenter, view: View, location: Gtk.TextIter, state: Gdk.ModifierType, keyval: number) => boolean
    readonly indent: (self: Indenter, view: View, iter: Gtk.TextIter) => /* iter */ Gtk.TextIter
    static name: string
}
abstract class LanguageClass {
    /* Fields of GtkSource-5.GtkSource.LanguageClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class LanguageManagerClass {
    /* Fields of GtkSource-5.GtkSource.LanguageManagerClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class MapClass {
    /* Fields of GtkSource-5.GtkSource.MapClass */
    readonly parentClass: ViewClass
    static name: string
}
abstract class MarkAttributesClass {
    /* Fields of GtkSource-5.GtkSource.MarkAttributesClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class MarkClass {
    /* Fields of GtkSource-5.GtkSource.MarkClass */
    readonly parentClass: Gtk.TextMarkClass
    static name: string
}
abstract class PrintCompositorClass {
    /* Fields of GtkSource-5.GtkSource.PrintCompositorClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class RegionClass {
    /* Fields of GtkSource-5.GtkSource.RegionClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
class RegionIter {
    /* Methods of GtkSource-5.GtkSource.RegionIter */
    /**
     * Gets the subregion at this iterator.
     */
    getSubregion(): [ /* returnType */ boolean, /* start */ Gtk.TextIter | null, /* end */ Gtk.TextIter | null ]
    isEnd(): boolean
    /**
     * Moves `iter` to the next subregion.
     */
    next(): boolean
    static name: string
}
abstract class SearchContextClass {
    /* Fields of GtkSource-5.GtkSource.SearchContextClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class SearchSettingsClass {
    /* Fields of GtkSource-5.GtkSource.SearchSettingsClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class SnippetChunkClass {
    /* Fields of GtkSource-5.GtkSource.SnippetChunkClass */
    readonly parentClass: GObject.InitiallyUnownedClass
    static name: string
}
abstract class SnippetClass {
    /* Fields of GtkSource-5.GtkSource.SnippetClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class SnippetContextClass {
    /* Fields of GtkSource-5.GtkSource.SnippetContextClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class SnippetManagerClass {
    /* Fields of GtkSource-5.GtkSource.SnippetManagerClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class SpaceDrawerClass {
    /* Fields of GtkSource-5.GtkSource.SpaceDrawerClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class StyleClass {
    /* Fields of GtkSource-5.GtkSource.StyleClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class StyleSchemeChooserButtonClass {
    /* Fields of GtkSource-5.GtkSource.StyleSchemeChooserButtonClass */
    readonly parent: Gtk.ButtonClass
    static name: string
}
abstract class StyleSchemeChooserInterface {
    /* Fields of GtkSource-5.GtkSource.StyleSchemeChooserInterface */
    readonly baseInterface: GObject.TypeInterface
    readonly getStyleScheme: (chooser: StyleSchemeChooser) => StyleScheme
    readonly setStyleScheme: (chooser: StyleSchemeChooser, scheme: StyleScheme) => void
    static name: string
}
abstract class StyleSchemeChooserWidgetClass {
    /* Fields of GtkSource-5.GtkSource.StyleSchemeChooserWidgetClass */
    readonly parent: Gtk.WidgetClass
    static name: string
}
abstract class StyleSchemeClass {
    /* Fields of GtkSource-5.GtkSource.StyleSchemeClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class StyleSchemeManagerClass {
    /* Fields of GtkSource-5.GtkSource.StyleSchemeManagerClass */
    readonly parentClass: GObject.ObjectClass
    static name: string
}
abstract class StyleSchemePreviewClass {
    /* Fields of GtkSource-5.GtkSource.StyleSchemePreviewClass */
    readonly parentClass: Gtk.WidgetClass
    static name: string
}
abstract class TagClass {
    /* Fields of GtkSource-5.GtkSource.TagClass */
    readonly parentClass: Gtk.TextTagClass
    static name: string
}
abstract class ViewClass {
    /* Fields of GtkSource-5.GtkSource.ViewClass */
    readonly parentClass: Gtk.TextViewClass
    readonly lineMarkActivated: (view: View, iter: Gtk.TextIter, button: number, state: Gdk.ModifierType, nPresses: number) => void
    readonly showCompletion: (view: View) => void
    readonly moveLines: (view: View, down: boolean) => void
    readonly moveWords: (view: View, step: number) => void
    readonly pushSnippet: (view: View, snippet: Snippet, location?: Gtk.TextIter | null) => void
    static name: string
}
abstract class VimIMContextClass {
    /* Fields of GtkSource-5.GtkSource.VimIMContextClass */
    readonly parentClass: Gtk.IMContextClass
    static name: string
}
}
export default GtkSource;