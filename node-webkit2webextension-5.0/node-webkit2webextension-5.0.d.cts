
/*
 * Type Definitions for node-gtk (https://github.com/romgrk/node-gtk)
 *
 * These type definitions are automatically generated, do not edit them by hand.
 * If you found a bug fix it in ts-for-gir itself or create a bug report on https://github.com/gjsify/ts-for-gir
 */

import './node-webkit2webextension-5.0-import.d.ts';
    
/**
 * WebKit2WebExtension-5.0
 */

import type Soup from '@girs/node-soup-3.0';
import type Gio from '@girs/node-gio-2.0';
import type GObject from '@girs/node-gobject-2.0';
import type GLib from '@girs/node-glib-2.0';
import type JavaScriptCore from '@girs/node-javascriptcore-5.0';
import type Gtk from '@girs/node-gtk-4.0';
import type Gsk from '@girs/node-gsk-4.0';
import type Graphene from '@girs/node-graphene-1.0';
import type Gdk from '@girs/node-gdk-4.0';
import type cairo from '@girs/node-cairo-1.0';
import type PangoCairo from '@girs/node-pangocairo-1.0';
import type Pango from '@girs/node-pango-1.0';
import type HarfBuzz from '@girs/node-harfbuzz-0.0';
import type freetype2 from '@girs/node-freetype2-2.0';
import type GdkPixbuf from '@girs/node-gdkpixbuf-2.0';
import type GModule from '@girs/node-gmodule-2.0';

/**
 * Enum values used to denote the various levels of console messages.
 */
export enum ConsoleMessageLevel {
    /**
     * Information message.
     */
    INFO,
    /**
     * Log message.
     */
    LOG,
    /**
     * Warning message.
     */
    WARNING,
    /**
     * Error message.
     */
    ERROR,
    /**
     * Debug message.
     */
    DEBUG,
}
/**
 * Enum values used to denote the various sources of console messages.
 */
export enum ConsoleMessageSource {
    /**
     * Message produced by JavaScript.
     */
    JAVASCRIPT,
    /**
     * Network messages.
     */
    NETWORK,
    /**
     * Messages produced by console API.
     */
    CONSOLE_API,
    /**
     * Security messages.
     */
    SECURITY,
    /**
     * Other messages.
     */
    OTHER,
}
/**
 * Enum values used to denote the stock actions for
 * #WebKitContextMenuItem<!-- -->s
 */
export enum ContextMenuAction {
    /**
     * No action, used by separator menu items.
     */
    NO_ACTION,
    /**
     * Open current link.
     */
    OPEN_LINK,
    /**
     * Open current link in a new window.
     */
    OPEN_LINK_IN_NEW_WINDOW,
    /**
     * Download link destination.
     */
    DOWNLOAD_LINK_TO_DISK,
    /**
     * Copy link location to the clipboard.
     */
    COPY_LINK_TO_CLIPBOARD,
    /**
     * Open current image in a new window.
     */
    OPEN_IMAGE_IN_NEW_WINDOW,
    /**
     * Download current image.
     */
    DOWNLOAD_IMAGE_TO_DISK,
    /**
     * Copy current image to the clipboard.
     */
    COPY_IMAGE_TO_CLIPBOARD,
    /**
     * Copy current image location to the clipboard.
     */
    COPY_IMAGE_URL_TO_CLIPBOARD,
    /**
     * Open current frame in a new window.
     */
    OPEN_FRAME_IN_NEW_WINDOW,
    /**
     * Load the previous history item.
     */
    GO_BACK,
    /**
     * Load the next history item.
     */
    GO_FORWARD,
    /**
     * Stop any ongoing loading operation.
     */
    STOP,
    /**
     * Reload the contents of current view.
     */
    RELOAD,
    /**
     * Copy current selection the clipboard.
     */
    COPY,
    /**
     * Cut current selection to the clipboard.
     */
    CUT,
    /**
     * Paste clipboard contents.
     */
    PASTE,
    /**
     * Delete current selection.
     */
    DELETE,
    /**
     * Select all text.
     */
    SELECT_ALL,
    /**
     * Input methods menu.
     */
    INPUT_METHODS,
    /**
     * Unicode menu.
     */
    UNICODE,
    /**
     * A proposed replacement for a misspelled word.
     */
    SPELLING_GUESS,
    /**
     * An indicator that spellchecking found no proposed replacements.
     */
    NO_GUESSES_FOUND,
    /**
     * Causes the spellchecker to ignore the word for this session.
     */
    IGNORE_SPELLING,
    /**
     * Causes the spellchecker to add the word to the dictionary.
     */
    LEARN_SPELLING,
    /**
     * Ignore grammar.
     */
    IGNORE_GRAMMAR,
    /**
     * Font options menu.
     */
    FONT_MENU,
    /**
     * Bold.
     */
    BOLD,
    /**
     * Italic.
     */
    ITALIC,
    /**
     * Underline.
     */
    UNDERLINE,
    /**
     * Outline.
     */
    OUTLINE,
    /**
     * Open current element in the inspector.
     */
    INSPECT_ELEMENT,
    /**
     * Open current video element in a new window.
     */
    OPEN_VIDEO_IN_NEW_WINDOW,
    /**
     * Open current audio element in a new window.
     */
    OPEN_AUDIO_IN_NEW_WINDOW,
    /**
     * Copy video link location in to the clipboard.
     */
    COPY_VIDEO_LINK_TO_CLIPBOARD,
    /**
     * Copy audio link location in to the clipboard.
     */
    COPY_AUDIO_LINK_TO_CLIPBOARD,
    /**
     * Enable or disable media controls.
     */
    TOGGLE_MEDIA_CONTROLS,
    /**
     * Enable or disable media loop.
     */
    TOGGLE_MEDIA_LOOP,
    /**
     * Show current video element in fullscreen mode.
     */
    ENTER_VIDEO_FULLSCREEN,
    /**
     * Play current media element.
     */
    MEDIA_PLAY,
    /**
     * Pause current media element.
     */
    MEDIA_PAUSE,
    /**
     * Mute current media element.
     */
    MEDIA_MUTE,
    /**
     * Download video to disk. Since 2.2
     */
    DOWNLOAD_VIDEO_TO_DISK,
    /**
     * Download audio to disk. Since 2.2
     */
    DOWNLOAD_AUDIO_TO_DISK,
    /**
     * Insert an emoji. Since 2.26
     */
    INSERT_EMOJI,
    /**
     * Paste clipboard contents as plain text. Since 2.30
     */
    PASTE_AS_PLAIN_TEXT,
    /**
     * Custom action defined by applications.
     */
    CUSTOM,
}
/**
 * Used to indicate a particular stage in form submission. See
 * #WebKitWebPage::will-submit-form.
 */
export enum FormSubmissionStep {
    /**
     * indicates the form's
     * DOM submit event is about to be emitted.
     */
    SEND_DOM_EVENT,
    /**
     * indicates the form is about
     * to be submitted.
     */
    COMPLETE,
}
/**
 * Enum values used to denote errors happening when sending user messages.
 */
export enum UserMessageError {
    /**
     * The message was not handled by the receiver.
     */
    USER_MESSAGE_UNHANDLED_MESSAGE,
}
/**
 * Enum values with flags representing the context of a #WebKitHitTestResult.
 * @bitfield 
 */
export enum HitTestResultContext {
    /**
     * anywhere in the document.
     */
    DOCUMENT,
    /**
     * a hyperlink element.
     */
    LINK,
    /**
     * an image element.
     */
    IMAGE,
    /**
     * a video or audio element.
     */
    MEDIA,
    /**
     * an editable element
     */
    EDITABLE,
    /**
     * a scrollbar element.
     */
    SCROLLBAR,
    /**
     * a selected element. Since 2.8
     */
    SELECTION,
}
export const DOM_CSS_RULE_CHARSET_RULE: number
export const DOM_CSS_RULE_FONT_FACE_RULE: number
export const DOM_CSS_RULE_IMPORT_RULE: number
export const DOM_CSS_RULE_MEDIA_RULE: number
export const DOM_CSS_RULE_PAGE_RULE: number
export const DOM_CSS_RULE_STYLE_RULE: number
export const DOM_CSS_RULE_UNKNOWN_RULE: number
export const DOM_CSS_VALUE_CSS_CUSTOM: number
export const DOM_CSS_VALUE_CSS_INHERIT: number
export const DOM_CSS_VALUE_CSS_PRIMITIVE_VALUE: number
export const DOM_CSS_VALUE_CSS_VALUE_LIST: number
export const DOM_ELEMENT_ALLOW_KEYBOARD_INPUT: number
export const DOM_EVENT_AT_TARGET: number
export const DOM_EVENT_BLUR: number
export const DOM_EVENT_BUBBLING_PHASE: number
export const DOM_EVENT_CAPTURING_PHASE: number
export const DOM_EVENT_CHANGE: number
export const DOM_EVENT_CLICK: number
export const DOM_EVENT_DBLCLICK: number
export const DOM_EVENT_DRAGDROP: number
export const DOM_EVENT_FOCUS: number
export const DOM_EVENT_KEYDOWN: number
export const DOM_EVENT_KEYPRESS: number
export const DOM_EVENT_KEYUP: number
export const DOM_EVENT_MOUSEDOWN: number
export const DOM_EVENT_MOUSEDRAG: number
export const DOM_EVENT_MOUSEMOVE: number
export const DOM_EVENT_MOUSEOUT: number
export const DOM_EVENT_MOUSEOVER: number
export const DOM_EVENT_MOUSEUP: number
export const DOM_EVENT_NONE: number
export const DOM_EVENT_SELECT: number
export const DOM_KEYBOARD_EVENT_KEY_LOCATION_LEFT: number
export const DOM_KEYBOARD_EVENT_KEY_LOCATION_NUMPAD: number
export const DOM_KEYBOARD_EVENT_KEY_LOCATION_RIGHT: number
export const DOM_KEYBOARD_EVENT_KEY_LOCATION_STANDARD: number
export const DOM_NODE_ATTRIBUTE_NODE: number
export const DOM_NODE_CDATA_SECTION_NODE: number
export const DOM_NODE_COMMENT_NODE: number
export const DOM_NODE_DOCUMENT_FRAGMENT_NODE: number
export const DOM_NODE_DOCUMENT_NODE: number
export const DOM_NODE_DOCUMENT_POSITION_CONTAINED_BY: number
export const DOM_NODE_DOCUMENT_POSITION_CONTAINS: number
export const DOM_NODE_DOCUMENT_POSITION_DISCONNECTED: number
export const DOM_NODE_DOCUMENT_POSITION_FOLLOWING: number
export const DOM_NODE_DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number
export const DOM_NODE_DOCUMENT_POSITION_PRECEDING: number
export const DOM_NODE_DOCUMENT_TYPE_NODE: number
export const DOM_NODE_ELEMENT_NODE: number
export const DOM_NODE_ENTITY_NODE: number
export const DOM_NODE_ENTITY_REFERENCE_NODE: number
/**
 * Accept the node. Use this macro as return value of webkit_dom_node_filter_accept_node()
 * implementation to accept the given #WebKitDOMNode
 */
export const DOM_NODE_FILTER_ACCEPT: number
/**
 * Reject the node. Use this macro as return value of webkit_dom_node_filter_accept_node()
 * implementation to reject the given #WebKitDOMNode. The children of the given node will
 * be rejected too.
 */
export const DOM_NODE_FILTER_REJECT: number
/**
 * Show all nodes.
 */
export const DOM_NODE_FILTER_SHOW_ALL: number
/**
 * Show #WebKitDOMAttr nodes.
 */
export const DOM_NODE_FILTER_SHOW_ATTRIBUTE: number
/**
 * Show #WebKitDOMCDataSection nodes.
 */
export const DOM_NODE_FILTER_SHOW_CDATA_SECTION: number
/**
 * Show #WebKitDOMComment nodes.
 */
export const DOM_NODE_FILTER_SHOW_COMMENT: number
/**
 * Show #WebKitDOMDocument nodes.
 */
export const DOM_NODE_FILTER_SHOW_DOCUMENT: number
/**
 * Show #WebKitDOMDocumentFragment nodes.
 */
export const DOM_NODE_FILTER_SHOW_DOCUMENT_FRAGMENT: number
/**
 * Show #WebKitDOMDocumentType nodes.
 */
export const DOM_NODE_FILTER_SHOW_DOCUMENT_TYPE: number
/**
 * Show #WebKitDOMElement nodes.
 */
export const DOM_NODE_FILTER_SHOW_ELEMENT: number
/**
 * Show #WebKitDOMEntity nodes.
 */
export const DOM_NODE_FILTER_SHOW_ENTITY: number
/**
 * Show #WebKitDOMEntityReference nodes.
 */
export const DOM_NODE_FILTER_SHOW_ENTITY_REFERENCE: number
/**
 * Show #WebKitDOMNotation nodes.
 */
export const DOM_NODE_FILTER_SHOW_NOTATION: number
/**
 * Show #WebKitDOMProcessingInstruction nodes.
 */
export const DOM_NODE_FILTER_SHOW_PROCESSING_INSTRUCTION: number
/**
 * Show #WebKitDOMText nodes.
 */
export const DOM_NODE_FILTER_SHOW_TEXT: number
/**
 * Skip the node. Use this macro as return value of webkit_dom_node_filter_accept_node()
 * implementation to skip the given #WebKitDOMNode. The children of the given node will
 * not be skipped.
 */
export const DOM_NODE_FILTER_SKIP: number
export const DOM_NODE_PROCESSING_INSTRUCTION_NODE: number
export const DOM_NODE_TEXT_NODE: number
export const DOM_RANGE_END_TO_END: number
export const DOM_RANGE_END_TO_START: number
export const DOM_RANGE_NODE_AFTER: number
export const DOM_RANGE_NODE_BEFORE: number
export const DOM_RANGE_NODE_BEFORE_AND_AFTER: number
export const DOM_RANGE_NODE_INSIDE: number
export const DOM_RANGE_START_TO_END: number
export const DOM_RANGE_START_TO_START: number
export const DOM_XPATH_RESULT_ANY_TYPE: number
export const DOM_XPATH_RESULT_ANY_UNORDERED_NODE_TYPE: number
export const DOM_XPATH_RESULT_BOOLEAN_TYPE: number
export const DOM_XPATH_RESULT_FIRST_ORDERED_NODE_TYPE: number
export const DOM_XPATH_RESULT_NUMBER_TYPE: number
export const DOM_XPATH_RESULT_ORDERED_NODE_ITERATOR_TYPE: number
export const DOM_XPATH_RESULT_ORDERED_NODE_SNAPSHOT_TYPE: number
export const DOM_XPATH_RESULT_STRING_TYPE: number
export const DOM_XPATH_RESULT_UNORDERED_NODE_ITERATOR_TYPE: number
export const DOM_XPATH_RESULT_UNORDERED_NODE_SNAPSHOT_TYPE: number
/**
 * Type definition for a function that will be called to initialize
 * the web extension when the web process starts.
 * @callback 
 * @param extension a #WebKitWebExtension
 */
export interface WebExtensionInitializeFunction {
    (extension: WebExtension): void
}
/**
 * Type definition for a function that will be called to initialize
 * the web extensions when the web process starts, and which receives
 * as additional argument the user data set with
 * webkit_web_context_set_web_extensions_initialization_user_data().
 * @callback 
 * @param extension a #WebKitWebExtension
 * @param userData a #GVariant
 */
export interface WebExtensionInitializeWithUserDataFunction {
    (extension: WebExtension, userData: GLib.Variant): void
}
export module DOMEventTarget {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget

    __gtype__: number

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget

    // Has conflict: addEventListener(eventName: string, handler: GObject.TClosure, useCapture: boolean): boolean
    // Has conflict: dispatchEvent(event: DOMEvent): boolean
    // Has conflict: removeEventListener(eventName: string, handler: GObject.TClosure, useCapture: boolean): boolean

    // Own virtual methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget

    addEventListener(eventName: string, handler: GObject.TClosure, useCapture: boolean): boolean
    dispatchEvent(event: DOMEvent): boolean
    removeEventListener(eventName: string, handler: GObject.TClosure, useCapture: boolean): boolean

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMEventTarget extends GObject.Object {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTarget

    constructor(config?: DOMEventTarget.ConstructorProperties) 
    _init(config?: DOMEventTarget.ConstructorProperties): void
}

export module DOMNodeFilter {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface DOMNodeFilter {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeFilter

    __gtype__: number

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeFilter

    // Has conflict: acceptNode(node: DOMNode): number

    // Own virtual methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeFilter

    acceptNode(node: DOMNode): number

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeFilter

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMNodeFilter extends GObject.Object {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeFilter

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeFilter

    constructor(config?: DOMNodeFilter.ConstructorProperties) 
    _init(config?: DOMNodeFilter.ConstructorProperties): void
}

export module DOMXPathNSResolver {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface DOMXPathNSResolver {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathNSResolver

    __gtype__: number

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathNSResolver

    // Has conflict: lookupNamespaceUri(prefix: string): string | null

    // Own virtual methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathNSResolver

    lookupNamespaceUri(prefix: string): string | null

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathNSResolver

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMXPathNSResolver extends GObject.Object {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathNSResolver

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathNSResolver

    constructor(config?: DOMXPathNSResolver.ConstructorProperties) 
    _init(config?: DOMXPathNSResolver.ConstructorProperties): void
}

export module ContextMenu {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface ContextMenu {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenu

    __gtype__: number

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenu

    /**
     * Adds `item` at the end of the `menu`.
     * @param item the #WebKitContextMenuItem to add
     */
    append(item: ContextMenuItem): void
    /**
     * Gets the first item in the `menu`.
     * @returns the first #WebKitContextMenuItem of @menu,    or %NULL if the #WebKitContextMenu is empty.
     */
    first(): ContextMenuItem
    /**
     * Gets the item at the given position in the `menu`.
     * @param position the position of the item, counting from 0
     * @returns the #WebKitContextMenuItem at position @position in @menu,    or %NULL if the position is off the end of the @menu.
     */
    getItemAtPosition(position: number): ContextMenuItem
    /**
     * Returns the item list of `menu`.
     * @returns a #GList of    #WebKitContextMenuItem<!-- -->s
     */
    getItems(): ContextMenuItem[]
    /**
     * Gets the length of the `menu`.
     * @returns the number of #WebKitContextMenuItem<!-- -->s in @menu
     */
    getNItems(): number
    /**
     * Gets the user data of `menu`.
     * 
     * This function can be used from the UI Process to get user data previously set
     * from the Web Process with webkit_context_menu_set_user_data().
     * @returns the user data of @menu, or %NULL if @menu doesn't have user data
     */
    getUserData(): GLib.Variant
    /**
     * Inserts `item` into the `menu` at the given position.
     * 
     * If `position` is negative, or is larger than the number of items
     * in the #WebKitContextMenu, the item is added on to the end of
     * the `menu`. The first position is 0.
     * @param item the #WebKitContextMenuItem to add
     * @param position the position to insert the item
     */
    insert(item: ContextMenuItem, position: number): void
    /**
     * Gets the last item in the `menu`.
     * @returns the last #WebKitContextMenuItem of @menu,    or %NULL if the #WebKitContextMenu is empty.
     */
    last(): ContextMenuItem
    /**
     * Moves `item` to the given position in the `menu`.
     * 
     * If `position` is negative, or is larger than the number of items
     * in the #WebKitContextMenu, the item is added on to the end of
     * the `menu`.
     * The first position is 0.
     * @param item the #WebKitContextMenuItem to add
     * @param position the new position to move the item
     */
    moveItem(item: ContextMenuItem, position: number): void
    /**
     * Adds `item` at the beginning of the `menu`.
     * @param item the #WebKitContextMenuItem to add
     */
    prepend(item: ContextMenuItem): void
    /**
     * Removes `item` from the `menu`.
     * 
     * See also webkit_context_menu_remove_all() to remove all items.
     * @param item the #WebKitContextMenuItem to remove
     */
    remove(item: ContextMenuItem): void
    /**
     * Removes all items of the `menu`.
     */
    removeAll(): void
    /**
     * Sets user data to `menu`.
     * 
     * This function can be used from a Web Process extension to set user data
     * that can be retrieved from the UI Process using webkit_context_menu_get_user_data().
     * If the `user_data` #GVariant is floating, it is consumed.
     * @param userData a #GVariant
     */
    setUserData(userData: GLib.Variant): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenu

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

/**
 * Represents the context menu in a #WebKitWebView.
 * 
 * #WebKitContextMenu represents a context menu containing
 * #WebKitContextMenuItem<!-- -->s in a #WebKitWebView.
 * 
 * When a #WebKitWebView is about to display the context menu, it
 * emits the #WebKitWebView::context-menu signal, which has the
 * #WebKitContextMenu as an argument. You can modify it, adding new
 * submenus that you can create with webkit_context_menu_new(), adding
 * new #WebKitContextMenuItem<!-- -->s with
 * webkit_context_menu_prepend(), webkit_context_menu_append() or
 * webkit_context_menu_insert(), maybe after having removed the
 * existing ones with webkit_context_menu_remove_all().
 * @class 
 */
export class ContextMenu extends GObject.Object {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenu

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenu

    constructor(config?: ContextMenu.ConstructorProperties) 
    /**
     * Creates a new #WebKitContextMenu object.
     * 
     * Creates a new #WebKitContextMenu object to be used as a submenu of an existing
     * #WebKitContextMenu. The context menu of a #WebKitWebView is created by the view
     * and passed as an argument of #WebKitWebView::context-menu signal.
     * To add items to the menu use webkit_context_menu_prepend(),
     * webkit_context_menu_append() or webkit_context_menu_insert().
     * See also webkit_context_menu_new_with_items() to create a #WebKitContextMenu with
     * a list of initial items.
     * @constructor 
     * @returns The newly created #WebKitContextMenu object
     */
    constructor() 
    /**
     * Creates a new #WebKitContextMenu object.
     * 
     * Creates a new #WebKitContextMenu object to be used as a submenu of an existing
     * #WebKitContextMenu. The context menu of a #WebKitWebView is created by the view
     * and passed as an argument of #WebKitWebView::context-menu signal.
     * To add items to the menu use webkit_context_menu_prepend(),
     * webkit_context_menu_append() or webkit_context_menu_insert().
     * See also webkit_context_menu_new_with_items() to create a #WebKitContextMenu with
     * a list of initial items.
     * @constructor 
     * @returns The newly created #WebKitContextMenu object
     */
    static new(): ContextMenu
    /**
     * Creates a new #WebKitContextMenu object with the given items.
     * 
     * Creates a new #WebKitContextMenu object to be used as a submenu of an existing
     * #WebKitContextMenu with the given initial items.
     * See also webkit_context_menu_new()
     * @constructor 
     * @param items a #GList of #WebKitContextMenuItem
     * @returns The newly created #WebKitContextMenu object
     */
    static newWithItems(items: ContextMenuItem[]): ContextMenu
    _init(config?: ContextMenu.ConstructorProperties): void
}

export module ContextMenuItem {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.InitiallyUnowned.ConstructorProperties {
    }

}

export interface ContextMenuItem {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenuItem

    __gtype__: number

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenuItem

    /**
     * Gets the action associated to `item` as a #GAction.
     * @returns the #GAction associated to the #WebKitContextMenuItem,    or %NULL if @item is a separator.
     */
    getGaction(): Gio.Action
    /**
     * Gets the #WebKitContextMenuAction of `item`.
     * 
     * If the #WebKitContextMenuItem was not
     * created for a stock action %WEBKIT_CONTEXT_MENU_ACTION_CUSTOM will be
     * returned. If the #WebKitContextMenuItem is a separator %WEBKIT_CONTEXT_MENU_ACTION_NO_ACTION
     * will be returned.
     * @returns the #WebKitContextMenuAction of @item
     */
    getStockAction(): ContextMenuAction
    /**
     * Gets the submenu of `item`.
     * @returns the #WebKitContextMenu representing the submenu of    @item or %NULL if @item doesn't have a submenu.
     */
    getSubmenu(): ContextMenu
    /**
     * Checks whether `item` is a separator.
     * @returns %TRUE is @item is a separator or %FALSE otherwise
     */
    isSeparator(): boolean
    /**
     * Sets or replaces the `item` submenu.
     * 
     * If `submenu` is %NULL the current
     * submenu of `item` is removed.
     * @param submenu a #WebKitContextMenu
     */
    setSubmenu(submenu: ContextMenu | null): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenuItem

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

/**
 * One item of a #WebKitContextMenu.
 * 
 * The #WebKitContextMenu is composed of #WebKitContextMenuItem<!--
 * -->s. These items can be created from a #GtkAction, from a
 * #WebKitContextMenuAction or from a #WebKitContextMenuAction and a
 * label. These #WebKitContextMenuAction<!-- -->s denote stock actions
 * for the items. You can also create separators and submenus.
 * @class 
 */
export class ContextMenuItem extends GObject.InitiallyUnowned {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenuItem

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenuItem

    constructor(config?: ContextMenuItem.ConstructorProperties) 
    /**
     * Creates a new #WebKitContextMenuItem for the given `action` and `label`.
     * 
     * On activation
     * `target` will be passed as parameter to the callback.
     * @constructor 
     * @param action a #GAction
     * @param label the menu item label text
     * @param target a #GVariant to use as the action target
     * @returns the newly created #WebKitContextMenuItem object.
     */
    static newFromGaction(action: Gio.Action, label: string, target: GLib.Variant | null): ContextMenuItem
    /**
     * Creates a new #WebKitContextMenuItem for the given stock action.
     * 
     * Stock actions are handled automatically by WebKit so that, for example,
     * when a menu item created with a %WEBKIT_CONTEXT_MENU_ACTION_STOP is
     * activated the action associated will be handled by WebKit and the current
     * load operation will be stopped. You can get the #GAction of a
     * #WebKitContextMenuItem created with a #WebKitContextMenuAction with
     * webkit_context_menu_item_get_gaction() and connect to the #GSimpleAction::activate signal
     * to be notified when the item is activated, but you can't prevent the associated
     * action from being performed.
     * @constructor 
     * @param action a #WebKitContextMenuAction stock action
     * @returns the newly created #WebKitContextMenuItem object.
     */
    static newFromStockAction(action: ContextMenuAction): ContextMenuItem
    /**
     * Creates a new #WebKitContextMenuItem for the given stock action using the given `label`.
     * 
     * Stock actions have a predefined label, this method can be used to create a
     * #WebKitContextMenuItem for a #WebKitContextMenuAction but using a custom label.
     * @constructor 
     * @param action a #WebKitContextMenuAction stock action
     * @param label a custom label text to use instead of the predefined one
     * @returns the newly created #WebKitContextMenuItem object.
     */
    static newFromStockActionWithLabel(action: ContextMenuAction, label: string): ContextMenuItem
    /**
     * Creates a new #WebKitContextMenuItem representing a separator.
     * @constructor 
     * @returns the newly created #WebKitContextMenuItem object.
     */
    static newSeparator(): ContextMenuItem
    /**
     * Creates a new #WebKitContextMenuItem using the given `label` with a submenu.
     * @constructor 
     * @param label the menu item label text
     * @param submenu a #WebKitContextMenu to set
     * @returns the newly created #WebKitContextMenuItem object.
     */
    static newWithSubmenu(label: string, submenu: ContextMenu): ContextMenuItem
    _init(config?: ContextMenuItem.ConstructorProperties): void
}

export module DOMAttr {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMNode.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMAttr

        value?: string | null
    }

}

export interface DOMAttr extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMAttr

    readonly localName: string | null
    readonly name: string | null
    readonly namespaceUri: string | null
    readonly ownerElement: DOMElement
    readonly prefix: string | null
    readonly specified: boolean
    value: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMAttr

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMAttr

    getLocalName(): string | null
    getName(): string | null
    getNamespaceUri(): string | null
    getOwnerElement(): DOMElement
    getPrefix(): string | null
    getSpecified(): boolean
    getValue(): string | null
    setValue(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMAttr

    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::owner-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-element", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::specified", callback: (...args: any[]) => void): number
    on(sigName: "notify::specified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::specified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::specified", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMAttr extends DOMNode {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMAttr

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMAttr

    constructor(config?: DOMAttr.ConstructorProperties) 
    _init(config?: DOMAttr.ConstructorProperties): void
}

export module DOMBlob {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMBlob {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMBlob

    readonly size: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMBlob

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMBlob

    getSize(): number

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMBlob

    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMBlob extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMBlob

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMBlob

    constructor(config?: DOMBlob.ConstructorProperties) 
    _init(config?: DOMBlob.ConstructorProperties): void
}

export module DOMCDATASection {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMText.ConstructorProperties {
    }

}

export interface DOMCDATASection extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCDATASection

    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCDATASection

    parentInstance: any

    // Conflicting methods

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCDATASection

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::whole-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::whole-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::whole-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::whole-text", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMCDATASection extends DOMText {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCDATASection

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCDATASection

    constructor(config?: DOMCDATASection.ConstructorProperties) 
    _init(config?: DOMCDATASection.ConstructorProperties): void
}

export module DOMCSSRule {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRule

        cssText?: string | null
    }

}

export interface DOMCSSRule {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRule

    cssText: string | null
    readonly parentRule: DOMCSSRule
    readonly parentStyleSheet: DOMCSSStyleSheet
    readonly type: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRule

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRule

    getCssText(): string | null
    getParentRule(): DOMCSSRule
    getParentStyleSheet(): DOMCSSStyleSheet
    getRuleType(): number
    setCssText(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRule

    connect(sigName: "notify::css-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::css-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::css-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::css-text", ...args: any[]): void
    connect(sigName: "notify::parent-rule", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-rule", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-rule", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-rule", ...args: any[]): void
    connect(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-style-sheet", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMCSSRule extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRule

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRule

    constructor(config?: DOMCSSRule.ConstructorProperties) 
    _init(config?: DOMCSSRule.ConstructorProperties): void
}

export module DOMCSSRuleList {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMCSSRuleList {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRuleList

    readonly length: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRuleList

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRuleList

    getLength(): number
    item(index: number): DOMCSSRule

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRuleList

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMCSSRuleList extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRuleList

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRuleList

    constructor(config?: DOMCSSRuleList.ConstructorProperties) 
    _init(config?: DOMCSSRuleList.ConstructorProperties): void
}

export module DOMCSSStyleDeclaration {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleDeclaration

        cssText?: string | null
    }

}

export interface DOMCSSStyleDeclaration {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleDeclaration

    cssText: string | null
    readonly length: number
    readonly parentRule: DOMCSSRule
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleDeclaration

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleDeclaration

    getCssText(): string | null
    getLength(): number
    getParentRule(): DOMCSSRule
    getPropertyPriority(propertyName: string): string | null
    getPropertyShorthand(propertyName: string): string | null
    getPropertyValue(propertyName: string): string | null
    isPropertyImplicit(propertyName: string): boolean
    item(index: number): string | null
    removeProperty(propertyName: string): string | null
    setCssText(value: string): void
    setProperty(propertyName: string, value: string, priority: string): void

    // Overloads of setProperty

    /**
     * Sets a property on an object.
     * @param propertyName the name of the property to set
     * @param value the value
     */
    setProperty<T = any>(propertyName: string, value: T): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleDeclaration

    connect(sigName: "notify::css-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::css-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::css-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::css-text", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::parent-rule", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-rule", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-rule", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-rule", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMCSSStyleDeclaration extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleDeclaration

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleDeclaration

    constructor(config?: DOMCSSStyleDeclaration.ConstructorProperties) 
    _init(config?: DOMCSSStyleDeclaration.ConstructorProperties): void
}

export module DOMCSSStyleSheet {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMStyleSheet.ConstructorProperties {
    }

}

export interface DOMCSSStyleSheet {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleSheet

    readonly cssRules: DOMCSSRuleList
    readonly ownerRule: DOMCSSRule
    readonly rules: DOMCSSRuleList
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleSheet

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleSheet

    addRule(selector: string, style: string, index: number): number
    deleteRule(index: number): void
    getCssRules(): DOMCSSRuleList
    getOwnerRule(): DOMCSSRule
    getRules(): DOMCSSRuleList
    insertRule(rule: string, index: number): number
    removeRule(index: number): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleSheet

    connect(sigName: "notify::css-rules", callback: (...args: any[]) => void): number
    on(sigName: "notify::css-rules", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::css-rules", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::css-rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::css-rules", ...args: any[]): void
    connect(sigName: "notify::owner-rule", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-rule", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-rule", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-rule", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-rule", ...args: any[]): void
    connect(sigName: "notify::rules", callback: (...args: any[]) => void): number
    on(sigName: "notify::rules", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::rules", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::rules", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::disabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::href", callback: (...args: any[]) => void): number
    on(sigName: "notify::href", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::href", ...args: any[]): void
    connect(sigName: "notify::media", callback: (...args: any[]) => void): number
    on(sigName: "notify::media", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::media", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::media", ...args: any[]): void
    connect(sigName: "notify::owner-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-node", ...args: any[]): void
    connect(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-style-sheet", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMCSSStyleSheet extends DOMStyleSheet {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleSheet

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleSheet

    constructor(config?: DOMCSSStyleSheet.ConstructorProperties) 
    _init(config?: DOMCSSStyleSheet.ConstructorProperties): void
}

export module DOMCSSValue {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSValue

        cssText?: string | null
    }

}

export interface DOMCSSValue {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSValue

    cssText: string | null
    readonly cssValueType: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSValue

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSValue

    getCssText(): string | null
    getCssValueType(): number
    setCssText(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSValue

    connect(sigName: "notify::css-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::css-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::css-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::css-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::css-text", ...args: any[]): void
    connect(sigName: "notify::css-value-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::css-value-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::css-value-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::css-value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::css-value-type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMCSSValue extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSValue

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSValue

    constructor(config?: DOMCSSValue.ConstructorProperties) 
    _init(config?: DOMCSSValue.ConstructorProperties): void
}

export module DOMCharacterData {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMNode.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData

        data?: string | null
    }

}

export interface DOMCharacterData extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData

    data: string | null
    readonly length: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData

    appendData(data: string): void
    deleteData(offset: number, length: number): void
    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    getLength(): number
    insertData(offset: number, data: string): void
    replaceData(offset: number, length: number, data: string): void
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    substringData(offset: number, length: number): string | null

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData

    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMCharacterData extends DOMNode {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterData

    constructor(config?: DOMCharacterData.ConstructorProperties) 
    _init(config?: DOMCharacterData.ConstructorProperties): void
}

export module DOMClientRect {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMClientRect {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRect

    readonly bottom: number
    readonly height: number
    readonly left: number
    readonly right: number
    readonly top: number
    readonly width: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRect

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRect

    /**
     * Returns the bottom coordinate of `self,` relative to the viewport.
     * @returns A #gfloat
     */
    getBottom(): number
    /**
     * Returns the height of `self`.
     * @returns A #gfloat
     */
    getHeight(): number
    /**
     * Returns the left coordinate of `self,` relative to the viewport.
     * @returns A #gfloat
     */
    getLeft(): number
    /**
     * Returns the right coordinate of `self,` relative to the viewport.
     * @returns A #gfloat
     */
    getRight(): number
    /**
     * Returns the top coordinate of `self,` relative to the viewport.
     * @returns A #gfloat
     */
    getTop(): number
    /**
     * Returns the width of `self`.
     * @returns A #gfloat
     */
    getWidth(): number

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRect

    connect(sigName: "notify::bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bottom", ...args: any[]): void
    connect(sigName: "notify::height", callback: (...args: any[]) => void): number
    on(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height", ...args: any[]): void
    connect(sigName: "notify::left", callback: (...args: any[]) => void): number
    on(sigName: "notify::left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::left", ...args: any[]): void
    connect(sigName: "notify::right", callback: (...args: any[]) => void): number
    on(sigName: "notify::right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::right", ...args: any[]): void
    connect(sigName: "notify::top", callback: (...args: any[]) => void): number
    on(sigName: "notify::top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::top", ...args: any[]): void
    connect(sigName: "notify::width", callback: (...args: any[]) => void): number
    on(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMClientRect extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRect

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRect

    constructor(config?: DOMClientRect.ConstructorProperties) 
    _init(config?: DOMClientRect.ConstructorProperties): void
}

export module DOMClientRectList {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMClientRectList {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRectList

    readonly length: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRectList

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRectList

    /**
     * Returns the number of #WebKitDOMClientRect objects that `self` contains.
     * @returns A #gulong
     */
    getLength(): number
    /**
     * Returns the #WebKitDOMClientRect object that `self` contains at `index`.
     * @param index A #gulong
     * @returns A #WebKitDOMClientRect
     */
    item(index: number): DOMClientRect

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRectList

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMClientRectList extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRectList

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRectList

    constructor(config?: DOMClientRectList.ConstructorProperties) 
    _init(config?: DOMClientRectList.ConstructorProperties): void
}

export module DOMComment {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMCharacterData.ConstructorProperties {
    }

}

export interface DOMComment extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMComment

    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMComment

    parentInstance: any

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMComment

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMComment extends DOMCharacterData {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMComment

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMComment

    constructor(config?: DOMComment.ConstructorProperties) 
    _init(config?: DOMComment.ConstructorProperties): void
}

export module DOMDOMImplementation {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMDOMImplementation {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMImplementation

    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMImplementation

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMImplementation

    createCssStyleSheet(title: string, media: string): DOMCSSStyleSheet
    createDocument(namespaceURI: string | null, qualifiedName: string, doctype: DOMDocumentType | null): DOMDocument
    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DOMDocumentType
    createHtmlDocument(title: string): DOMHTMLDocument
    hasFeature(feature: string, version: string): boolean

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMImplementation

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMDOMImplementation extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMImplementation

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMImplementation

    constructor(config?: DOMDOMImplementation.ConstructorProperties) 
    _init(config?: DOMDOMImplementation.ConstructorProperties): void
}

export module DOMDOMSelection {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMDOMSelection {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMSelection

    readonly anchorNode: DOMNode
    readonly anchorOffset: number
    readonly baseNode: DOMNode
    readonly baseOffset: number
    readonly extentNode: DOMNode
    readonly extentOffset: number
    readonly focusNode: DOMNode
    readonly focusOffset: number
    readonly isCollapsed: boolean
    readonly rangeCount: number
    readonly type: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMSelection

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMSelection

    addRange(range: DOMRange): void
    collapse(node: DOMNode, offset: number): void
    collapseToEnd(): void
    collapseToStart(): void
    containsNode(node: DOMNode, allowPartial: boolean): boolean
    deleteFromDocument(): void
    empty(): void
    extend(node: DOMNode, offset: number): void
    getAnchorNode(): DOMNode
    getAnchorOffset(): number
    getBaseNode(): DOMNode
    getBaseOffset(): number
    getExtentNode(): DOMNode
    getExtentOffset(): number
    getFocusNode(): DOMNode
    getFocusOffset(): number
    getIsCollapsed(): boolean
    getRangeAt(index: number): DOMRange
    getRangeCount(): number
    getSelectionType(): string | null
    modify(alter: string, direction: string, granularity: string): void
    removeAllRanges(): void
    selectAllChildren(node: DOMNode): void
    setBaseAndExtent(baseNode: DOMNode, baseOffset: number, extentNode: DOMNode, extentOffset: number): void
    setPosition(node: DOMNode, offset: number): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMSelection

    connect(sigName: "notify::anchor-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::anchor-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anchor-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anchor-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anchor-node", ...args: any[]): void
    connect(sigName: "notify::anchor-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::anchor-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anchor-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anchor-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anchor-offset", ...args: any[]): void
    connect(sigName: "notify::base-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-node", ...args: any[]): void
    connect(sigName: "notify::base-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-offset", ...args: any[]): void
    connect(sigName: "notify::extent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::extent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::extent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::extent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::extent-node", ...args: any[]): void
    connect(sigName: "notify::extent-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::extent-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::extent-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::extent-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::extent-offset", ...args: any[]): void
    connect(sigName: "notify::focus-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-node", ...args: any[]): void
    connect(sigName: "notify::focus-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-offset", ...args: any[]): void
    connect(sigName: "notify::is-collapsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-collapsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-collapsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-collapsed", ...args: any[]): void
    connect(sigName: "notify::range-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::range-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::range-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::range-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::range-count", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMDOMSelection extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMSelection

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMSelection

    constructor(config?: DOMDOMSelection.ConstructorProperties) 
    _init(config?: DOMDOMSelection.ConstructorProperties): void
}

export module DOMDOMTokenList {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMTokenList

        value?: string | null
    }

}

export interface DOMDOMTokenList {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMTokenList

    readonly length: number
    value: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMTokenList

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMTokenList

    contains(token: string): boolean
    getLength(): number
    getValue(): string | null
    item(index: number): string | null
    replace(token: string, newToken: string): void
    setValue(value: string): void
    toggle(token: string, force: boolean): boolean

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMTokenList

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMDOMTokenList extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMTokenList

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMTokenList

    constructor(config?: DOMDOMTokenList.ConstructorProperties) 
    _init(config?: DOMDOMTokenList.ConstructorProperties): void
}

export module DOMDOMWindow {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMObject.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMWindow

        defaultStatus?: string | null
        name?: string | null
        status?: string | null
    }

}

export interface DOMDOMWindow extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMWindow

    readonly closed: boolean
    defaultStatus: string | null
    readonly devicePixelRatio: number
    readonly document: DOMDocument
    readonly frameElement: DOMElement
    readonly frames: DOMDOMWindow
    readonly innerHeight: number
    readonly innerWidth: number
    readonly length: number
    name: string | null
    readonly offscreenBuffering: boolean
    readonly opener: DOMDOMWindow
    readonly orientation: number
    readonly outerHeight: number
    readonly outerWidth: number
    readonly pageXOffset: number
    readonly pageYOffset: number
    readonly parent: DOMDOMWindow
    readonly screenLeft: number
    readonly screenTop: number
    readonly screenX: number
    readonly screenY: number
    readonly scrollX: number
    readonly scrollY: number
    readonly self: DOMDOMWindow
    status: string | null
    readonly top: DOMDOMWindow
    readonly window: DOMDOMWindow
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMWindow

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMWindow

    alert(message: string): void
    blur(): void
    captureEvents(): void
    close(): void
    confirm(message: string): boolean
    find(string: string, caseSensitive: boolean, backwards: boolean, wrap: boolean, wholeWord: boolean, searchInFrames: boolean, showDialog: boolean): boolean
    focus(): void
    getClosed(): boolean
    getComputedStyle(element: DOMElement, pseudoElement: string | null): DOMCSSStyleDeclaration
    getDefaultStatus(): string | null
    getDevicePixelRatio(): number
    getDocument(): DOMDocument
    getFrameElement(): DOMElement
    getFrames(): DOMDOMWindow
    getInnerHeight(): number
    getInnerWidth(): number
    getLength(): number
    getName(): string | null
    getOffscreenBuffering(): boolean
    getOpener(): DOMDOMWindow
    getOrientation(): number
    getOuterHeight(): number
    getOuterWidth(): number
    getPageXOffset(): number
    getPageYOffset(): number
    getParent(): DOMDOMWindow
    getScreenLeft(): number
    getScreenTop(): number
    getScreenX(): number
    getScreenY(): number
    getScrollX(): number
    getScrollY(): number
    getSelection(): DOMDOMSelection
    getSelf(): DOMDOMWindow
    getStatus(): string | null
    getTop(): DOMDOMWindow
    getWindow(): DOMDOMWindow
    moveBy(x: number, y: number): void
    moveTo(x: number, y: number): void
    print(): void
    prompt(message: string, defaultValue: string): string | null
    releaseEvents(): void
    resizeBy(x: number, y: number): void
    resizeTo(width: number, height: number): void
    scrollBy(x: number, y: number): void
    scrollTo(x: number, y: number): void
    setDefaultStatus(value: string): void
    setName(value: string): void
    setStatus(value: string): void
    stop(): void
    webkitMessageHandlersPostMessage(handler: string, message: string): boolean

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMWindow

    connect(sigName: "notify::closed", callback: (...args: any[]) => void): number
    on(sigName: "notify::closed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::closed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::closed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::closed", ...args: any[]): void
    connect(sigName: "notify::default-status", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-status", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-status", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-status", ...args: any[]): void
    connect(sigName: "notify::device-pixel-ratio", callback: (...args: any[]) => void): number
    on(sigName: "notify::device-pixel-ratio", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::device-pixel-ratio", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::device-pixel-ratio", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::device-pixel-ratio", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::frame-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::frame-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::frame-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::frame-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::frame-element", ...args: any[]): void
    connect(sigName: "notify::frames", callback: (...args: any[]) => void): number
    on(sigName: "notify::frames", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::frames", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::frames", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::frames", ...args: any[]): void
    connect(sigName: "notify::inner-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-height", ...args: any[]): void
    connect(sigName: "notify::inner-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-width", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::offscreen-buffering", callback: (...args: any[]) => void): number
    on(sigName: "notify::offscreen-buffering", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offscreen-buffering", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offscreen-buffering", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offscreen-buffering", ...args: any[]): void
    connect(sigName: "notify::opener", callback: (...args: any[]) => void): number
    on(sigName: "notify::opener", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opener", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opener", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opener", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: (...args: any[]) => void): number
    on(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::orientation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: "notify::outer-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-height", ...args: any[]): void
    connect(sigName: "notify::outer-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-width", ...args: any[]): void
    connect(sigName: "notify::page-x-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::page-x-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::page-x-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::page-x-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::page-x-offset", ...args: any[]): void
    connect(sigName: "notify::page-y-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::page-y-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::page-y-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::page-y-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::page-y-offset", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::screen-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::screen-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::screen-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::screen-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::screen-left", ...args: any[]): void
    connect(sigName: "notify::screen-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::screen-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::screen-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::screen-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::screen-top", ...args: any[]): void
    connect(sigName: "notify::screen-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::screen-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::screen-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::screen-x", ...args: any[]): void
    connect(sigName: "notify::screen-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::screen-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::screen-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::screen-y", ...args: any[]): void
    connect(sigName: "notify::scroll-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-x", ...args: any[]): void
    connect(sigName: "notify::scroll-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-y", ...args: any[]): void
    connect(sigName: "notify::self", callback: (...args: any[]) => void): number
    on(sigName: "notify::self", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::self", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::self", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::self", ...args: any[]): void
    connect(sigName: "notify::status", callback: (...args: any[]) => void): number
    on(sigName: "notify::status", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::status", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::status", ...args: any[]): void
    connect(sigName: "notify::top", callback: (...args: any[]) => void): number
    on(sigName: "notify::top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::top", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMDOMWindow extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMWindow

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMWindow

    constructor(config?: DOMDOMWindow.ConstructorProperties) 
    _init(config?: DOMDOMWindow.ConstructorProperties): void
}

export module DOMDocument {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMNode.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocument

        charset?: string | null
        cookie?: string | null
        designMode?: string | null
        dir?: string | null
        documentUri?: string | null
        selectedStylesheetSet?: string | null
        title?: string | null
        xmlStandalone?: boolean | null
        xmlVersion?: string | null
    }

}

export interface DOMDocument extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocument

    readonly activeElement: DOMElement
    readonly anchors: DOMHTMLCollection
    readonly applets: DOMHTMLCollection
    readonly body: DOMHTMLElement
    readonly characterSet: string | null
    charset: string | null
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly compatMode: string | null
    readonly contentType: string | null
    cookie: string | null
    readonly currentScript: DOMHTMLScriptElement
    readonly defaultView: DOMDOMWindow
    designMode: string | null
    dir: string | null
    readonly doctype: DOMDocumentType
    readonly documentElement: DOMElement
    documentUri: string | null
    readonly domain: string | null
    readonly embeds: DOMHTMLCollection
    readonly firstElementChild: DOMElement
    readonly forms: DOMHTMLCollection
    readonly head: DOMHTMLHeadElement
    readonly hidden: boolean
    readonly images: DOMHTMLCollection
    readonly implementation: DOMDOMImplementation
    readonly inputEncoding: string | null
    readonly lastElementChild: DOMElement
    readonly lastModified: string | null
    readonly links: DOMHTMLCollection
    readonly origin: string | null
    readonly plugins: DOMHTMLCollection
    readonly pointerLockElement: DOMElement
    readonly preferredStylesheetSet: string | null
    readonly readyState: string | null
    readonly referrer: string | null
    readonly scripts: DOMHTMLCollection
    readonly scrollingElement: DOMElement
    selectedStylesheetSet: string | null
    readonly styleSheets: DOMStyleSheetList
    title: string | null
    readonly url: string | null
    readonly visibilityState: string | null
    readonly webkitCurrentFullScreenElement: DOMElement
    readonly webkitFullScreenKeyboardInputAllowed: boolean
    readonly webkitFullscreenElement: DOMElement
    readonly webkitFullscreenEnabled: boolean
    readonly webkitIsFullScreen: boolean
    readonly xmlEncoding: string | null
    xmlStandalone: boolean
    xmlVersion: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocument

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocument

    adoptNode(source: DOMNode): DOMNode
    caretRangeFromPoint(x: number, y: number): DOMRange
    createAttribute(name: string): DOMAttr
    createAttributeNs(namespaceURI: string | null, qualifiedName: string): DOMAttr
    createCdataSection(data: string): DOMCDATASection
    createComment(data: string): DOMComment
    createCssStyleDeclaration(): DOMCSSStyleDeclaration
    createDocumentFragment(): DOMDocumentFragment
    createElement(tagName: string): DOMElement
    createElementNs(namespaceURI: string | null, qualifiedName: string): DOMElement
    /**
     * This function has been removed from the DOM spec and it just returns %NULL.
     * @param name A #gchar
     * @returns A #WebKitDOMEntityReference
     */
    createEntityReference(name: string | null): DOMEntityReference
    createEvent(eventType: string): DOMEvent
    createExpression(expression: string, resolver: DOMXPathNSResolver): DOMXPathExpression
    createNodeIterator(root: DOMNode, whatToShow: number, filter: DOMNodeFilter | null, expandEntityReferences: boolean): DOMNodeIterator
    createNsResolver(nodeResolver: DOMNode): DOMXPathNSResolver
    createProcessingInstruction(target: string, data: string): DOMProcessingInstruction
    createRange(): DOMRange
    createTextNode(data: string): DOMText
    createTreeWalker(root: DOMNode, whatToShow: number, filter: DOMNodeFilter | null, expandEntityReferences: boolean): DOMTreeWalker
    elementFromPoint(x: number, y: number): DOMElement
    evaluate(expression: string, contextNode: DOMNode, resolver: DOMXPathNSResolver | null, type: number, inResult: DOMXPathResult | null): DOMXPathResult
    execCommand(command: string, userInterface: boolean, value: string): boolean
    exitPointerLock(): void
    getActiveElement(): DOMElement
    getAnchors(): DOMHTMLCollection
    getApplets(): DOMHTMLCollection
    getBody(): DOMHTMLElement
    getCharacterSet(): string | null
    getCharset(): string | null
    getChildElementCount(): number
    getChildren(): DOMHTMLCollection
    getCompatMode(): string | null
    getContentType(): string | null
    getCookie(): string | null
    getCurrentScript(): DOMHTMLScriptElement
    getDefaultCharset(): string | null
    getDefaultView(): DOMDOMWindow
    getDesignMode(): string | null
    getDir(): string | null
    getDoctype(): DOMDocumentType
    getDocumentElement(): DOMElement
    getDocumentUri(): string | null
    getDomain(): string | null
    getElementById(elementId: string): DOMElement
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(classNames: string): DOMHTMLCollection
    getElementsByName(elementName: string): DOMNodeList
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(tagname: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getEmbeds(): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getForms(): DOMHTMLCollection
    getHead(): DOMHTMLHeadElement
    getHidden(): boolean
    getImages(): DOMHTMLCollection
    getImplementation(): DOMDOMImplementation
    getInputEncoding(): string | null
    getLastElementChild(): DOMElement
    getLastModified(): string | null
    getLinks(): DOMHTMLCollection
    getOrigin(): string | null
    getOverrideStyle(element: DOMElement, pseudoElement: string | null): DOMCSSStyleDeclaration
    getPlugins(): DOMHTMLCollection
    getPointerLockElement(): DOMElement
    /**
     * This function has been removed and does nothing.
     * @returns A #gchar
     */
    getPreferredStylesheetSet(): string | null
    getReadyState(): string | null
    getReferrer(): string | null
    getScripts(): DOMHTMLCollection
    getScrollingElement(): DOMElement
    /**
     * This function has been removed and does nothing.
     * @returns A #gchar
     */
    getSelectedStylesheetSet(): string | null
    getStyleSheets(): DOMStyleSheetList
    getTitle(): string | null
    getUrl(): string | null
    getVisibilityState(): string | null
    getWebkitCurrentFullscreenElement(): DOMElement
    getWebkitFullscreenElement(): DOMElement
    getWebkitFullscreenEnabled(): boolean
    getWebkitFullscreenKeyboardInputAllowed(): boolean
    getWebkitIsFullscreen(): boolean
    getXmlEncoding(): string | null
    getXmlStandalone(): boolean
    getXmlVersion(): string | null
    hasFocus(): boolean
    importNode(importedNode: DOMNode, deep: boolean): DOMNode
    queryCommandEnabled(command: string): boolean
    queryCommandIndeterm(command: string): boolean
    queryCommandState(command: string): boolean
    queryCommandSupported(command: string): boolean
    queryCommandValue(command: string): string | null
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    setBody(value: DOMHTMLElement): void
    setCharset(value: string): void
    setCookie(value: string): void
    setDesignMode(value: string): void
    setDir(value: string): void
    setDocumentUri(value: string): void
    /**
     * This function has been removed and does nothing.
     * @param value A #gchar
     */
    setSelectedStylesheetSet(value: string): void
    setTitle(value: string): void
    setXmlStandalone(value: boolean): void
    setXmlVersion(value: string): void
    webkitCancelFullscreen(): void
    webkitExitFullscreen(): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocument

    connect(sigName: "notify::active-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::active-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::active-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::active-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::active-element", ...args: any[]): void
    connect(sigName: "notify::anchors", callback: (...args: any[]) => void): number
    on(sigName: "notify::anchors", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anchors", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anchors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anchors", ...args: any[]): void
    connect(sigName: "notify::applets", callback: (...args: any[]) => void): number
    on(sigName: "notify::applets", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::applets", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::applets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::applets", ...args: any[]): void
    connect(sigName: "notify::body", callback: (...args: any[]) => void): number
    on(sigName: "notify::body", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::body", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::body", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::body", ...args: any[]): void
    connect(sigName: "notify::character-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-set", ...args: any[]): void
    connect(sigName: "notify::charset", callback: (...args: any[]) => void): number
    on(sigName: "notify::charset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::charset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::charset", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::compat-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compat-mode", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::cookie", callback: (...args: any[]) => void): number
    on(sigName: "notify::cookie", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cookie", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cookie", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cookie", ...args: any[]): void
    connect(sigName: "notify::current-script", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-script", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-script", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-script", ...args: any[]): void
    connect(sigName: "notify::default-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-view", ...args: any[]): void
    connect(sigName: "notify::design-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::design-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::design-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::design-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::design-mode", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::doctype", callback: (...args: any[]) => void): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::doctype", ...args: any[]): void
    connect(sigName: "notify::document-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-element", ...args: any[]): void
    connect(sigName: "notify::document-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-uri", ...args: any[]): void
    connect(sigName: "notify::domain", callback: (...args: any[]) => void): number
    on(sigName: "notify::domain", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::domain", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::domain", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::domain", ...args: any[]): void
    connect(sigName: "notify::embeds", callback: (...args: any[]) => void): number
    on(sigName: "notify::embeds", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::embeds", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::embeds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::embeds", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::forms", callback: (...args: any[]) => void): number
    on(sigName: "notify::forms", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::forms", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::forms", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::forms", ...args: any[]): void
    connect(sigName: "notify::head", callback: (...args: any[]) => void): number
    on(sigName: "notify::head", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::head", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::head", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::images", callback: (...args: any[]) => void): number
    on(sigName: "notify::images", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::images", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::images", ...args: any[]): void
    connect(sigName: "notify::implementation", callback: (...args: any[]) => void): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::implementation", ...args: any[]): void
    connect(sigName: "notify::input-encoding", callback: (...args: any[]) => void): number
    on(sigName: "notify::input-encoding", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::input-encoding", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::input-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::input-encoding", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::last-modified", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-modified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-modified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-modified", ...args: any[]): void
    connect(sigName: "notify::links", callback: (...args: any[]) => void): number
    on(sigName: "notify::links", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::links", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::links", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::links", ...args: any[]): void
    connect(sigName: "notify::origin", callback: (...args: any[]) => void): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::origin", ...args: any[]): void
    connect(sigName: "notify::plugins", callback: (...args: any[]) => void): number
    on(sigName: "notify::plugins", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::plugins", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::plugins", ...args: any[]): void
    connect(sigName: "notify::pointer-lock-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::pointer-lock-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pointer-lock-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pointer-lock-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pointer-lock-element", ...args: any[]): void
    connect(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::preferred-stylesheet-set", ...args: any[]): void
    connect(sigName: "notify::ready-state", callback: (...args: any[]) => void): number
    on(sigName: "notify::ready-state", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ready-state", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ready-state", ...args: any[]): void
    connect(sigName: "notify::referrer", callback: (...args: any[]) => void): number
    on(sigName: "notify::referrer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::referrer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::referrer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::referrer", ...args: any[]): void
    connect(sigName: "notify::scripts", callback: (...args: any[]) => void): number
    on(sigName: "notify::scripts", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scripts", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scripts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scripts", ...args: any[]): void
    connect(sigName: "notify::scrolling-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::scrolling-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scrolling-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scrolling-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scrolling-element", ...args: any[]): void
    connect(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selected-stylesheet-set", ...args: any[]): void
    connect(sigName: "notify::style-sheets", callback: (...args: any[]) => void): number
    on(sigName: "notify::style-sheets", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style-sheets", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style-sheets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style-sheets", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::url", callback: (...args: any[]) => void): number
    on(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::url", ...args: any[]): void
    connect(sigName: "notify::visibility-state", callback: (...args: any[]) => void): number
    on(sigName: "notify::visibility-state", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visibility-state", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visibility-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visibility-state", ...args: any[]): void
    connect(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-current-full-screen-element", ...args: any[]): void
    connect(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-full-screen-keyboard-input-allowed", ...args: any[]): void
    connect(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-fullscreen-element", ...args: any[]): void
    connect(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-fullscreen-enabled", ...args: any[]): void
    connect(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-is-full-screen", ...args: any[]): void
    connect(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): number
    on(sigName: "notify::xml-encoding", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::xml-encoding", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::xml-encoding", ...args: any[]): void
    connect(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): number
    on(sigName: "notify::xml-standalone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::xml-standalone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::xml-standalone", ...args: any[]): void
    connect(sigName: "notify::xml-version", callback: (...args: any[]) => void): number
    on(sigName: "notify::xml-version", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::xml-version", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::xml-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::xml-version", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMDocument extends DOMNode {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocument

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocument

    constructor(config?: DOMDocument.ConstructorProperties) 
    _init(config?: DOMDocument.ConstructorProperties): void
}

export module DOMDocumentFragment {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMNode.ConstructorProperties {
    }

}

export interface DOMDocumentFragment extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentFragment

    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly firstElementChild: DOMElement
    readonly lastElementChild: DOMElement
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentFragment

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentFragment

    getChildElementCount(): number
    getChildren(): DOMHTMLCollection
    getElementById(elementId: string): DOMElement
    getFirstElementChild(): DOMElement
    getLastElementChild(): DOMElement
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentFragment

    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMDocumentFragment extends DOMNode {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentFragment

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentFragment

    constructor(config?: DOMDocumentFragment.ConstructorProperties) 
    _init(config?: DOMDocumentFragment.ConstructorProperties): void
}

export module DOMDocumentType {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMNode.ConstructorProperties {
    }

}

export interface DOMDocumentType extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentType

    readonly entities: DOMNamedNodeMap
    readonly internalSubset: string | null
    readonly name: string | null
    readonly notations: DOMNamedNodeMap
    readonly publicId: string | null
    readonly systemId: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentType

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentType

    getEntities(): DOMNamedNodeMap
    getInternalSubset(): string | null
    getName(): string | null
    getNotations(): DOMNamedNodeMap
    getPublicId(): string | null
    getSystemId(): string | null

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentType

    connect(sigName: "notify::entities", callback: (...args: any[]) => void): number
    on(sigName: "notify::entities", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::entities", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::entities", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::entities", ...args: any[]): void
    connect(sigName: "notify::internal-subset", callback: (...args: any[]) => void): number
    on(sigName: "notify::internal-subset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::internal-subset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::internal-subset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::internal-subset", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::notations", callback: (...args: any[]) => void): number
    on(sigName: "notify::notations", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::notations", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::notations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::notations", ...args: any[]): void
    connect(sigName: "notify::public-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::public-id", ...args: any[]): void
    connect(sigName: "notify::system-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::system-id", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMDocumentType extends DOMNode {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentType

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentType

    constructor(config?: DOMDocumentType.ConstructorProperties) 
    _init(config?: DOMDocumentType.ConstructorProperties): void
}

export module DOMElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMNode.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement

        className?: string | null
        id?: string | null
        innerHtml?: string | null
        outerHtml?: string | null
        scrollLeft?: number | null
        scrollTop?: number | null
    }

}

export interface DOMElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement

    readonly attributes: DOMNamedNodeMap
    readonly childElementCount: number
    readonly children: DOMHTMLCollection
    readonly classList: DOMDOMTokenList
    className: string | null
    readonly clientHeight: number
    readonly clientLeft: number
    readonly clientTop: number
    readonly clientWidth: number
    readonly firstElementChild: DOMElement
    id: string | null
    innerHtml: string | null
    readonly lastElementChild: DOMElement
    readonly localName: string | null
    readonly namespaceUri: string | null
    readonly nextElementSibling: DOMElement
    readonly offsetHeight: number
    readonly offsetLeft: number
    readonly offsetParent: DOMElement
    readonly offsetTop: number
    readonly offsetWidth: number
    outerHtml: string | null
    readonly prefix: string | null
    readonly previousElementSibling: DOMElement
    readonly scrollHeight: number
    scrollLeft: number
    scrollTop: number
    readonly scrollWidth: number
    readonly style: DOMCSSStyleDeclaration
    readonly tagName: string | null
    readonly webkitRegionOverset: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement

    blur(): void
    closest(selectors: string): DOMElement
    focus(): void
    getAttribute(name: string): string | null
    getAttributeNode(name: string): DOMAttr
    getAttributeNodeNs(namespaceURI: string, localName: string): DOMAttr
    getAttributeNs(namespaceURI: string, localName: string): string | null
    getAttributes(): DOMNamedNodeMap
    /**
     * Returns a #WebKitDOMClientRect representing the size and position of `self`
     * relative to the viewport.
     * @returns A #WebKitDOMClientRect
     */
    getBoundingClientRect(): DOMClientRect
    getChildElementCount(): number
    getChildren(): DOMHTMLCollection
    getClassList(): DOMDOMTokenList
    getClassName(): string | null
    getClientHeight(): number
    getClientLeft(): number
    /**
     * Returns a collection of #WebKitDOMClientRect objects, each of which describe
     * the size and position of a CSS border box relative to the viewport.
     * @returns A #WebKitDOMClientRectList
     */
    getClientRects(): DOMClientRectList
    getClientTop(): number
    getClientWidth(): number
    getElementsByClassName(className: string): DOMNodeList
    getElementsByClassNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagName(tagName: string): DOMNodeList
    getElementsByTagNameAsHtmlCollection(name: string): DOMHTMLCollection
    getElementsByTagNameNs(namespaceUri: string, tagName: string): DOMNodeList
    getElementsByTagNameNsAsHtmlCollection(namespaceURI: string, localName: string): DOMHTMLCollection
    getFirstElementChild(): DOMElement
    getId(): string | null
    getInnerHtml(): string | null
    getLastElementChild(): DOMElement
    getLocalName(): string | null
    getNamespaceUri(): string | null
    getNextElementSibling(): DOMElement
    getOffsetHeight(): number
    getOffsetLeft(): number
    getOffsetParent(): DOMElement
    getOffsetTop(): number
    getOffsetWidth(): number
    getOuterHtml(): string | null
    getPrefix(): string | null
    getPreviousElementSibling(): DOMElement
    getScrollHeight(): number
    getScrollLeft(): number
    getScrollTop(): number
    getScrollWidth(): number
    getStyle(): DOMCSSStyleDeclaration
    getTagName(): string | null
    /**
     * CSS Regions support has been removed. This function does nothing.
     * @returns %NULL
     */
    getWebkitRegionOverset(): string | null
    hasAttribute(name: string): boolean
    hasAttributeNs(namespaceURI: string, localName: string): boolean
    hasAttributes(): boolean
    htmlInputElementGetAutoFilled(): boolean
    /**
     * Get whether `element` is an HTML text input element that has been edited by a user action.
     * @returns whether @element has been edited by a user action.
     */
    htmlInputElementIsUserEdited(): boolean
    /**
     * Set whether the element is an HTML input element that has been filled automatically.
     * If `element` is not an HTML input element this function does nothing.
     * @param autoFilled value to set
     */
    htmlInputElementSetAutoFilled(autoFilled: boolean): void
    /**
     * Set the value of an HTML input element as if it had been edited by
     * the user, triggering a change event. If `element` is not an HTML input
     * element this function does nothing.
     * @param value the text to set
     */
    htmlInputElementSetEditingValue(value: string): void
    insertAdjacentElement(where: string, element: DOMElement): DOMElement
    insertAdjacentHtml(where: string, html: string): void
    insertAdjacentText(where: string, text: string): void
    matches(selectors: string): boolean
    querySelector(selectors: string): DOMElement
    querySelectorAll(selectors: string): DOMNodeList
    remove(): void
    removeAttribute(name: string): void
    removeAttributeNode(oldAttr: DOMAttr): DOMAttr
    removeAttributeNs(namespaceURI: string, localName: string): void
    requestPointerLock(): void
    scrollByLines(lines: number): void
    scrollByPages(pages: number): void
    scrollIntoView(alignWithTop: boolean): void
    scrollIntoViewIfNeeded(centerIfNeeded: boolean): void
    setAttribute(name: string, value: string): void
    setAttributeNode(newAttr: DOMAttr): DOMAttr
    setAttributeNodeNs(newAttr: DOMAttr): DOMAttr
    setAttributeNs(namespaceURI: string | null, qualifiedName: string, value: string): void
    setClassName(value: string): void
    setId(value: string): void
    setInnerHtml(value: string): void
    setOuterHtml(value: string): void
    setScrollLeft(value: number): void
    setScrollTop(value: number): void
    webkitMatchesSelector(selectors: string): boolean
    webkitRequestFullscreen(): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement

    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMElement extends DOMNode {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElement

    constructor(config?: DOMElement.ConstructorProperties) 
    _init(config?: DOMElement.ConstructorProperties): void
}

export module DOMEntityReference {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMNode.ConstructorProperties {
    }

}

export interface DOMEntityReference extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEntityReference

    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEntityReference

    parentInstance: any

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEntityReference

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMEntityReference extends DOMNode {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEntityReference

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEntityReference

    constructor(config?: DOMEntityReference.ConstructorProperties) 
    _init(config?: DOMEntityReference.ConstructorProperties): void
}

export module DOMEvent {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent

        cancelBubble?: boolean | null
        returnValue?: boolean | null
    }

}

export interface DOMEvent {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent

    readonly bubbles: boolean
    cancelBubble: boolean
    readonly cancelable: boolean
    readonly currentTarget: DOMEventTarget
    readonly eventPhase: number
    returnValue: boolean
    readonly srcElement: DOMEventTarget
    readonly target: DOMEventTarget
    readonly timeStamp: number
    readonly type: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent

    getBubbles(): boolean
    getCancelBubble(): boolean
    getCancelable(): boolean
    getCurrentTarget(): DOMEventTarget
    getEventPhase(): number
    getEventType(): string | null
    getReturnValue(): boolean
    getSrcElement(): DOMEventTarget
    getTarget(): DOMEventTarget
    getTimeStamp(): number
    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void
    preventDefault(): void
    setCancelBubble(value: boolean): void
    setReturnValue(value: boolean): void
    stopPropagation(): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent

    connect(sigName: "notify::bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bubbles", ...args: any[]): void
    connect(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancel-bubble", ...args: any[]): void
    connect(sigName: "notify::cancelable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancelable", ...args: any[]): void
    connect(sigName: "notify::current-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-target", ...args: any[]): void
    connect(sigName: "notify::event-phase", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-phase", ...args: any[]): void
    connect(sigName: "notify::return-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::return-value", ...args: any[]): void
    connect(sigName: "notify::src-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::src-element", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::time-stamp", callback: (...args: any[]) => void): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::time-stamp", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMEvent extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEvent

    constructor(config?: DOMEvent.ConstructorProperties) 
    _init(config?: DOMEvent.ConstructorProperties): void
}

export module DOMFile {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMBlob.ConstructorProperties {
    }

}

export interface DOMFile {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFile

    readonly name: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFile

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFile

    getName(): string | null

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFile

    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMFile extends DOMBlob {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFile

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFile

    constructor(config?: DOMFile.ConstructorProperties) 
    _init(config?: DOMFile.ConstructorProperties): void
}

export module DOMFileList {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMFileList {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFileList

    readonly length: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFileList

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFileList

    getLength(): number
    item(index: number): DOMFile

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFileList

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMFileList extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFileList

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFileList

    constructor(config?: DOMFileList.ConstructorProperties) 
    _init(config?: DOMFileList.ConstructorProperties): void
}

export module DOMHTMLAnchorElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAnchorElement

        charset?: string | null
        coords?: string | null
        hash?: string | null
        host?: string | null
        hostname?: string | null
        href?: string | null
        hreflang?: string | null
        name?: string | null
        pathname?: string | null
        port?: string | null
        protocol?: string | null
        rel?: string | null
        rev?: string | null
        search?: string | null
        shape?: string | null
        target?: string | null
        text?: string | null
        type?: string | null
    }

}

export interface DOMHTMLAnchorElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAnchorElement

    charset: string | null
    coords: string | null
    hash: string | null
    host: string | null
    hostname: string | null
    href: string | null
    hreflang: string | null
    name: string | null
    pathname: string | null
    port: string | null
    protocol: string | null
    rel: string | null
    rev: string | null
    search: string | null
    shape: string | null
    target: string | null
    text: string | null
    type: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAnchorElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAnchorElement

    getCharset(): string | null
    getCoords(): string | null
    getHash(): string | null
    getHost(): string | null
    getHostname(): string | null
    getHref(): string | null
    getHreflang(): string | null
    getName(): string | null
    getPathname(): string | null
    getPort(): string | null
    getProtocol(): string | null
    getRel(): string | null
    getRev(): string | null
    getSearch(): string | null
    getShape(): string | null
    getTarget(): string | null
    getText(): string | null
    getTypeAttr(): string | null
    setCharset(value: string): void
    setCoords(value: string): void
    setHash(value: string): void
    setHost(value: string): void
    setHostname(value: string): void
    setHref(value: string): void
    setHreflang(value: string): void
    setName(value: string): void
    setPathname(value: string): void
    setPort(value: string): void
    setProtocol(value: string): void
    setRel(value: string): void
    setRev(value: string): void
    setSearch(value: string): void
    setShape(value: string): void
    setTarget(value: string): void
    setText(value: string): void
    setTypeAttr(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAnchorElement

    connect(sigName: "notify::charset", callback: (...args: any[]) => void): number
    on(sigName: "notify::charset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::charset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::charset", ...args: any[]): void
    connect(sigName: "notify::coords", callback: (...args: any[]) => void): number
    on(sigName: "notify::coords", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::coords", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::coords", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::coords", ...args: any[]): void
    connect(sigName: "notify::hash", callback: (...args: any[]) => void): number
    on(sigName: "notify::hash", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hash", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hash", ...args: any[]): void
    connect(sigName: "notify::host", callback: (...args: any[]) => void): number
    on(sigName: "notify::host", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::host", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::host", ...args: any[]): void
    connect(sigName: "notify::hostname", callback: (...args: any[]) => void): number
    on(sigName: "notify::hostname", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hostname", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hostname", ...args: any[]): void
    connect(sigName: "notify::href", callback: (...args: any[]) => void): number
    on(sigName: "notify::href", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::href", ...args: any[]): void
    connect(sigName: "notify::hreflang", callback: (...args: any[]) => void): number
    on(sigName: "notify::hreflang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hreflang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hreflang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hreflang", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::pathname", callback: (...args: any[]) => void): number
    on(sigName: "notify::pathname", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pathname", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pathname", ...args: any[]): void
    connect(sigName: "notify::port", callback: (...args: any[]) => void): number
    on(sigName: "notify::port", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::port", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::port", ...args: any[]): void
    connect(sigName: "notify::protocol", callback: (...args: any[]) => void): number
    on(sigName: "notify::protocol", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::protocol", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::protocol", ...args: any[]): void
    connect(sigName: "notify::rel", callback: (...args: any[]) => void): number
    on(sigName: "notify::rel", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::rel", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::rel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::rel", ...args: any[]): void
    connect(sigName: "notify::rev", callback: (...args: any[]) => void): number
    on(sigName: "notify::rev", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::rev", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::rev", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::rev", ...args: any[]): void
    connect(sigName: "notify::search", callback: (...args: any[]) => void): number
    on(sigName: "notify::search", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::search", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::search", ...args: any[]): void
    connect(sigName: "notify::shape", callback: (...args: any[]) => void): number
    on(sigName: "notify::shape", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::shape", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::shape", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::shape", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::text", callback: (...args: any[]) => void): number
    on(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLAnchorElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAnchorElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAnchorElement

    constructor(config?: DOMHTMLAnchorElement.ConstructorProperties) 
    _init(config?: DOMHTMLAnchorElement.ConstructorProperties): void
}

export module DOMHTMLAppletElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAppletElement

        align?: string | null
        alt?: string | null
        archive?: string | null
        code?: string | null
        codeBase?: string | null
        height?: string | null
        hspace?: number | null
        name?: string | null
        object?: string | null
        vspace?: number | null
        width?: string | null
    }

}

export interface DOMHTMLAppletElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAppletElement

    align: string | null
    alt: string | null
    archive: string | null
    code: string | null
    codeBase: string | null
    height: string | null
    hspace: number
    name: string | null
    object: string | null
    vspace: number
    width: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAppletElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAppletElement

    getAlign(): string | null
    getAlt(): string | null
    getArchive(): string | null
    getCode(): string | null
    getCodeBase(): string | null
    getHeight(): string | null
    getHspace(): number
    getName(): string | null
    getObject(): string | null
    getVspace(): number
    getWidth(): string | null
    setAlign(value: string): void
    setAlt(value: string): void
    setArchive(value: string): void
    setCode(value: string): void
    setCodeBase(value: string): void
    setHeight(value: string): void
    setHspace(value: number): void
    setName(value: string): void
    setObject(value: string): void
    setVspace(value: number): void
    setWidth(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAppletElement

    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::alt", callback: (...args: any[]) => void): number
    on(sigName: "notify::alt", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::alt", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::alt", ...args: any[]): void
    connect(sigName: "notify::archive", callback: (...args: any[]) => void): number
    on(sigName: "notify::archive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::archive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::archive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::archive", ...args: any[]): void
    connect(sigName: "notify::code", callback: (...args: any[]) => void): number
    on(sigName: "notify::code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::code", ...args: any[]): void
    connect(sigName: "notify::code-base", callback: (...args: any[]) => void): number
    on(sigName: "notify::code-base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::code-base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::code-base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::code-base", ...args: any[]): void
    connect(sigName: "notify::height", callback: (...args: any[]) => void): number
    on(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height", ...args: any[]): void
    connect(sigName: "notify::hspace", callback: (...args: any[]) => void): number
    on(sigName: "notify::hspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hspace", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::object", callback: (...args: any[]) => void): number
    on(sigName: "notify::object", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::object", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::object", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::object", ...args: any[]): void
    connect(sigName: "notify::vspace", callback: (...args: any[]) => void): number
    on(sigName: "notify::vspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vspace", ...args: any[]): void
    connect(sigName: "notify::width", callback: (...args: any[]) => void): number
    on(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLAppletElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAppletElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAppletElement

    constructor(config?: DOMHTMLAppletElement.ConstructorProperties) 
    _init(config?: DOMHTMLAppletElement.ConstructorProperties): void
}

export module DOMHTMLAreaElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAreaElement

        alt?: string | null
        coords?: string | null
        hash?: string | null
        host?: string | null
        hostname?: string | null
        href?: string | null
        noHref?: boolean | null
        pathname?: string | null
        port?: string | null
        protocol?: string | null
        search?: string | null
        shape?: string | null
        target?: string | null
    }

}

export interface DOMHTMLAreaElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAreaElement

    alt: string | null
    coords: string | null
    hash: string | null
    host: string | null
    hostname: string | null
    href: string | null
    noHref: boolean
    pathname: string | null
    port: string | null
    protocol: string | null
    search: string | null
    shape: string | null
    target: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAreaElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAreaElement

    getAlt(): string | null
    getCoords(): string | null
    getHash(): string | null
    getHost(): string | null
    getHostname(): string | null
    getHref(): string | null
    getNoHref(): boolean
    getPathname(): string | null
    getPort(): string | null
    getProtocol(): string | null
    getSearch(): string | null
    getShape(): string | null
    getTarget(): string | null
    setAlt(value: string): void
    setCoords(value: string): void
    setHash(value: string): void
    setHost(value: string): void
    setHostname(value: string): void
    setHref(value: string): void
    setNoHref(value: boolean): void
    setPathname(value: string): void
    setPort(value: string): void
    setProtocol(value: string): void
    setSearch(value: string): void
    setShape(value: string): void
    setTarget(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAreaElement

    connect(sigName: "notify::alt", callback: (...args: any[]) => void): number
    on(sigName: "notify::alt", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::alt", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::alt", ...args: any[]): void
    connect(sigName: "notify::coords", callback: (...args: any[]) => void): number
    on(sigName: "notify::coords", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::coords", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::coords", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::coords", ...args: any[]): void
    connect(sigName: "notify::hash", callback: (...args: any[]) => void): number
    on(sigName: "notify::hash", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hash", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hash", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hash", ...args: any[]): void
    connect(sigName: "notify::host", callback: (...args: any[]) => void): number
    on(sigName: "notify::host", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::host", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::host", ...args: any[]): void
    connect(sigName: "notify::hostname", callback: (...args: any[]) => void): number
    on(sigName: "notify::hostname", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hostname", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hostname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hostname", ...args: any[]): void
    connect(sigName: "notify::href", callback: (...args: any[]) => void): number
    on(sigName: "notify::href", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::href", ...args: any[]): void
    connect(sigName: "notify::no-href", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-href", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-href", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-href", ...args: any[]): void
    connect(sigName: "notify::pathname", callback: (...args: any[]) => void): number
    on(sigName: "notify::pathname", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pathname", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pathname", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pathname", ...args: any[]): void
    connect(sigName: "notify::port", callback: (...args: any[]) => void): number
    on(sigName: "notify::port", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::port", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::port", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::port", ...args: any[]): void
    connect(sigName: "notify::protocol", callback: (...args: any[]) => void): number
    on(sigName: "notify::protocol", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::protocol", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::protocol", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::protocol", ...args: any[]): void
    connect(sigName: "notify::search", callback: (...args: any[]) => void): number
    on(sigName: "notify::search", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::search", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::search", ...args: any[]): void
    connect(sigName: "notify::shape", callback: (...args: any[]) => void): number
    on(sigName: "notify::shape", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::shape", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::shape", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::shape", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLAreaElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAreaElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAreaElement

    constructor(config?: DOMHTMLAreaElement.ConstructorProperties) 
    _init(config?: DOMHTMLAreaElement.ConstructorProperties): void
}

export module DOMHTMLBRElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBRElement

        clear?: string | null
    }

}

export interface DOMHTMLBRElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBRElement

    clear: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBRElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBRElement

    getClear(): string | null
    setClear(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBRElement

    connect(sigName: "notify::clear", callback: (...args: any[]) => void): number
    on(sigName: "notify::clear", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::clear", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::clear", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::clear", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLBRElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBRElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBRElement

    constructor(config?: DOMHTMLBRElement.ConstructorProperties) 
    _init(config?: DOMHTMLBRElement.ConstructorProperties): void
}

export module DOMHTMLBaseElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseElement

        href?: string | null
        target?: string | null
    }

}

export interface DOMHTMLBaseElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseElement

    href: string | null
    target: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseElement

    getHref(): string | null
    getTarget(): string | null
    setHref(value: string): void
    setTarget(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseElement

    connect(sigName: "notify::href", callback: (...args: any[]) => void): number
    on(sigName: "notify::href", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::href", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLBaseElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseElement

    constructor(config?: DOMHTMLBaseElement.ConstructorProperties) 
    _init(config?: DOMHTMLBaseElement.ConstructorProperties): void
}

export module DOMHTMLBaseFontElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {
    }

}

export interface DOMHTMLBaseFontElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseFontElement

    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseFontElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseFontElement

    /**
     * This function has been removed from the DOM spec and it just returns %NULL.
     * @returns A #gchar
     */
    getColor(): string | null
    /**
     * This function has been removed from the DOM spec and it just returns %NULL.
     * @returns A #gchar
     */
    getFace(): string | null
    /**
     * This function has been removed from the DOM spec and it just returns 0.
     * @returns A #glong
     */
    getSize(): number
    /**
     * This function has been removed from the DOM spec and it does nothing.
     * @param value A #gchar
     */
    setColor(value: string): void
    /**
     * This function has been removed from the DOM spec and it does nothing.
     * @param value A #gchar
     */
    setFace(value: string): void
    /**
     * This function has been removed from the DOM spec and it does nothing.
     * @param value A #glong
     */
    setSize(value: number): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseFontElement

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLBaseFontElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseFontElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseFontElement

    constructor(config?: DOMHTMLBaseFontElement.ConstructorProperties) 
    _init(config?: DOMHTMLBaseFontElement.ConstructorProperties): void
}

export module DOMHTMLBodyElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBodyElement

        aLink?: string | null
        background?: string | null
        bgColor?: string | null
        link?: string | null
        text?: string | null
        vLink?: string | null
    }

}

export interface DOMHTMLBodyElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBodyElement

    aLink: string | null
    background: string | null
    bgColor: string | null
    link: string | null
    text: string | null
    vLink: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBodyElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBodyElement

    getALink(): string | null
    getBackground(): string | null
    getBgColor(): string | null
    getLink(): string | null
    getText(): string | null
    getVLink(): string | null
    setALink(value: string): void
    setBackground(value: string): void
    setBgColor(value: string): void
    setLink(value: string): void
    setText(value: string): void
    setVLink(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBodyElement

    connect(sigName: "notify::a-link", callback: (...args: any[]) => void): number
    on(sigName: "notify::a-link", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::a-link", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::a-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::a-link", ...args: any[]): void
    connect(sigName: "notify::background", callback: (...args: any[]) => void): number
    on(sigName: "notify::background", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::background", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::background", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::background", ...args: any[]): void
    connect(sigName: "notify::bg-color", callback: (...args: any[]) => void): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bg-color", ...args: any[]): void
    connect(sigName: "notify::link", callback: (...args: any[]) => void): number
    on(sigName: "notify::link", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::link", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::link", ...args: any[]): void
    connect(sigName: "notify::text", callback: (...args: any[]) => void): number
    on(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::v-link", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-link", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-link", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-link", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-link", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLBodyElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBodyElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBodyElement

    constructor(config?: DOMHTMLBodyElement.ConstructorProperties) 
    _init(config?: DOMHTMLBodyElement.ConstructorProperties): void
}

export module DOMHTMLButtonElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLButtonElement

        autofocus?: boolean | null
        disabled?: boolean | null
        name?: string | null
        type?: string | null
        value?: string | null
    }

}

export interface DOMHTMLButtonElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLButtonElement

    autofocus: boolean
    disabled: boolean
    readonly form: DOMHTMLFormElement
    name: string | null
    type: string | null
    value: string | null
    readonly willValidate: boolean
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLButtonElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLButtonElement

    getAutofocus(): boolean
    getButtonType(): string | null
    getDisabled(): boolean
    getForm(): DOMHTMLFormElement
    getName(): string | null
    getValue(): string | null
    getWillValidate(): boolean
    setAutofocus(value: boolean): void
    setButtonType(value: string): void
    setDisabled(value: boolean): void
    setName(value: string): void
    setValue(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLButtonElement

    connect(sigName: "notify::autofocus", callback: (...args: any[]) => void): number
    on(sigName: "notify::autofocus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::autofocus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::autofocus", ...args: any[]): void
    connect(sigName: "notify::disabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::form", callback: (...args: any[]) => void): number
    on(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::form", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::will-validate", callback: (...args: any[]) => void): number
    on(sigName: "notify::will-validate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::will-validate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::will-validate", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLButtonElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLButtonElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLButtonElement

    constructor(config?: DOMHTMLButtonElement.ConstructorProperties) 
    _init(config?: DOMHTMLButtonElement.ConstructorProperties): void
}

export module DOMHTMLCanvasElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCanvasElement

        height?: number | null
        width?: number | null
    }

}

export interface DOMHTMLCanvasElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCanvasElement

    height: number
    width: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCanvasElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCanvasElement

    getHeight(): number
    getWidth(): number
    setHeight(value: number): void
    setWidth(value: number): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCanvasElement

    connect(sigName: "notify::height", callback: (...args: any[]) => void): number
    on(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height", ...args: any[]): void
    connect(sigName: "notify::width", callback: (...args: any[]) => void): number
    on(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLCanvasElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCanvasElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCanvasElement

    constructor(config?: DOMHTMLCanvasElement.ConstructorProperties) 
    _init(config?: DOMHTMLCanvasElement.ConstructorProperties): void
}

export module DOMHTMLCollection {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMHTMLCollection {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCollection

    readonly length: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCollection

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCollection

    getLength(): number
    item(index: number): DOMNode
    namedItem(name: string): DOMNode

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCollection

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLCollection extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCollection

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCollection

    constructor(config?: DOMHTMLCollection.ConstructorProperties) 
    _init(config?: DOMHTMLCollection.ConstructorProperties): void
}

export module DOMHTMLDListElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDListElement

        compact?: boolean | null
    }

}

export interface DOMHTMLDListElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDListElement

    compact: boolean
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDListElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDListElement

    getCompact(): boolean
    setCompact(value: boolean): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDListElement

    connect(sigName: "notify::compact", callback: (...args: any[]) => void): number
    on(sigName: "notify::compact", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compact", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compact", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLDListElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDListElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDListElement

    constructor(config?: DOMHTMLDListElement.ConstructorProperties) 
    _init(config?: DOMHTMLDListElement.ConstructorProperties): void
}

export module DOMHTMLDirectoryElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDirectoryElement

        compact?: boolean | null
    }

}

export interface DOMHTMLDirectoryElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDirectoryElement

    compact: boolean
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDirectoryElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDirectoryElement

    getCompact(): boolean
    setCompact(value: boolean): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDirectoryElement

    connect(sigName: "notify::compact", callback: (...args: any[]) => void): number
    on(sigName: "notify::compact", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compact", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compact", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLDirectoryElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDirectoryElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDirectoryElement

    constructor(config?: DOMHTMLDirectoryElement.ConstructorProperties) 
    _init(config?: DOMHTMLDirectoryElement.ConstructorProperties): void
}

export module DOMHTMLDivElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDivElement

        align?: string | null
    }

}

export interface DOMHTMLDivElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDivElement

    align: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDivElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDivElement

    getAlign(): string | null
    setAlign(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDivElement

    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLDivElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDivElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDivElement

    constructor(config?: DOMHTMLDivElement.ConstructorProperties) 
    _init(config?: DOMHTMLDivElement.ConstructorProperties): void
}

export module DOMHTMLDocument {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMDocument.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDocument

        alinkColor?: string | null
        bgColor?: string | null
        dir?: string | null
        fgColor?: string | null
        linkColor?: string | null
        vlinkColor?: string | null
    }

}

export interface DOMHTMLDocument extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDocument

    alinkColor: string | null
    bgColor: string | null
    dir: string | null
    fgColor: string | null
    readonly height: number
    linkColor: string | null
    vlinkColor: string | null
    readonly width: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDocument

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDocument

    captureEvents(): void
    clear(): void
    close(): void
    getAlinkColor(): string | null
    getBgColor(): string | null
    getCompatMode(): string | null
    getDesignMode(): string | null
    getDir(): string | null
    getEmbeds(): DOMHTMLCollection
    getFgColor(): string | null
    getHeight(): number
    getLinkColor(): string | null
    getPlugins(): DOMHTMLCollection
    getScripts(): DOMHTMLCollection
    getVlinkColor(): string | null
    getWidth(): number
    releaseEvents(): void
    setAlinkColor(value: string): void
    setBgColor(value: string): void
    setDesignMode(value: string): void
    setDir(value: string): void
    setFgColor(value: string): void
    setLinkColor(value: string): void
    setVlinkColor(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDocument

    connect(sigName: "notify::alink-color", callback: (...args: any[]) => void): number
    on(sigName: "notify::alink-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::alink-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::alink-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::alink-color", ...args: any[]): void
    connect(sigName: "notify::bg-color", callback: (...args: any[]) => void): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bg-color", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::fg-color", callback: (...args: any[]) => void): number
    on(sigName: "notify::fg-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::fg-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::fg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::fg-color", ...args: any[]): void
    connect(sigName: "notify::height", callback: (...args: any[]) => void): number
    on(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height", ...args: any[]): void
    connect(sigName: "notify::link-color", callback: (...args: any[]) => void): number
    on(sigName: "notify::link-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::link-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::link-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::link-color", ...args: any[]): void
    connect(sigName: "notify::vlink-color", callback: (...args: any[]) => void): number
    on(sigName: "notify::vlink-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vlink-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vlink-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vlink-color", ...args: any[]): void
    connect(sigName: "notify::width", callback: (...args: any[]) => void): number
    on(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::active-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::active-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::active-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::active-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::active-element", ...args: any[]): void
    connect(sigName: "notify::anchors", callback: (...args: any[]) => void): number
    on(sigName: "notify::anchors", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anchors", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anchors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anchors", ...args: any[]): void
    connect(sigName: "notify::applets", callback: (...args: any[]) => void): number
    on(sigName: "notify::applets", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::applets", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::applets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::applets", ...args: any[]): void
    connect(sigName: "notify::body", callback: (...args: any[]) => void): number
    on(sigName: "notify::body", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::body", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::body", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::body", ...args: any[]): void
    connect(sigName: "notify::character-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-set", ...args: any[]): void
    connect(sigName: "notify::charset", callback: (...args: any[]) => void): number
    on(sigName: "notify::charset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::charset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::charset", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::compat-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compat-mode", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::cookie", callback: (...args: any[]) => void): number
    on(sigName: "notify::cookie", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cookie", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cookie", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cookie", ...args: any[]): void
    connect(sigName: "notify::current-script", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-script", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-script", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-script", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-script", ...args: any[]): void
    connect(sigName: "notify::default-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-view", ...args: any[]): void
    connect(sigName: "notify::design-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::design-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::design-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::design-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::design-mode", ...args: any[]): void
    connect(sigName: "notify::doctype", callback: (...args: any[]) => void): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::doctype", ...args: any[]): void
    connect(sigName: "notify::document-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-element", ...args: any[]): void
    connect(sigName: "notify::document-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-uri", ...args: any[]): void
    connect(sigName: "notify::domain", callback: (...args: any[]) => void): number
    on(sigName: "notify::domain", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::domain", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::domain", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::domain", ...args: any[]): void
    connect(sigName: "notify::embeds", callback: (...args: any[]) => void): number
    on(sigName: "notify::embeds", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::embeds", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::embeds", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::embeds", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::forms", callback: (...args: any[]) => void): number
    on(sigName: "notify::forms", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::forms", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::forms", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::forms", ...args: any[]): void
    connect(sigName: "notify::head", callback: (...args: any[]) => void): number
    on(sigName: "notify::head", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::head", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::head", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::images", callback: (...args: any[]) => void): number
    on(sigName: "notify::images", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::images", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::images", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::images", ...args: any[]): void
    connect(sigName: "notify::implementation", callback: (...args: any[]) => void): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::implementation", ...args: any[]): void
    connect(sigName: "notify::input-encoding", callback: (...args: any[]) => void): number
    on(sigName: "notify::input-encoding", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::input-encoding", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::input-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::input-encoding", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::last-modified", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-modified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-modified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-modified", ...args: any[]): void
    connect(sigName: "notify::links", callback: (...args: any[]) => void): number
    on(sigName: "notify::links", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::links", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::links", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::links", ...args: any[]): void
    connect(sigName: "notify::origin", callback: (...args: any[]) => void): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::origin", ...args: any[]): void
    connect(sigName: "notify::plugins", callback: (...args: any[]) => void): number
    on(sigName: "notify::plugins", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::plugins", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::plugins", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::plugins", ...args: any[]): void
    connect(sigName: "notify::pointer-lock-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::pointer-lock-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pointer-lock-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pointer-lock-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pointer-lock-element", ...args: any[]): void
    connect(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::preferred-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::preferred-stylesheet-set", ...args: any[]): void
    connect(sigName: "notify::ready-state", callback: (...args: any[]) => void): number
    on(sigName: "notify::ready-state", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ready-state", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ready-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ready-state", ...args: any[]): void
    connect(sigName: "notify::referrer", callback: (...args: any[]) => void): number
    on(sigName: "notify::referrer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::referrer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::referrer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::referrer", ...args: any[]): void
    connect(sigName: "notify::scripts", callback: (...args: any[]) => void): number
    on(sigName: "notify::scripts", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scripts", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scripts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scripts", ...args: any[]): void
    connect(sigName: "notify::scrolling-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::scrolling-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scrolling-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scrolling-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scrolling-element", ...args: any[]): void
    connect(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selected-stylesheet-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selected-stylesheet-set", ...args: any[]): void
    connect(sigName: "notify::style-sheets", callback: (...args: any[]) => void): number
    on(sigName: "notify::style-sheets", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style-sheets", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style-sheets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style-sheets", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::url", callback: (...args: any[]) => void): number
    on(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::url", ...args: any[]): void
    connect(sigName: "notify::visibility-state", callback: (...args: any[]) => void): number
    on(sigName: "notify::visibility-state", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visibility-state", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visibility-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visibility-state", ...args: any[]): void
    connect(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-current-full-screen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-current-full-screen-element", ...args: any[]): void
    connect(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-full-screen-keyboard-input-allowed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-full-screen-keyboard-input-allowed", ...args: any[]): void
    connect(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-fullscreen-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-fullscreen-element", ...args: any[]): void
    connect(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-fullscreen-enabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-fullscreen-enabled", ...args: any[]): void
    connect(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-is-full-screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-is-full-screen", ...args: any[]): void
    connect(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): number
    on(sigName: "notify::xml-encoding", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::xml-encoding", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::xml-encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::xml-encoding", ...args: any[]): void
    connect(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): number
    on(sigName: "notify::xml-standalone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::xml-standalone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::xml-standalone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::xml-standalone", ...args: any[]): void
    connect(sigName: "notify::xml-version", callback: (...args: any[]) => void): number
    on(sigName: "notify::xml-version", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::xml-version", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::xml-version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::xml-version", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLDocument extends DOMDocument {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDocument

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDocument

    constructor(config?: DOMHTMLDocument.ConstructorProperties) 
    _init(config?: DOMHTMLDocument.ConstructorProperties): void
}

export module DOMHTMLElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement

        accessKey?: string | null
        contentEditable?: string | null
        dir?: string | null
        draggable?: boolean | null
        hidden?: boolean | null
        innerText?: string | null
        lang?: string | null
        outerText?: string | null
        spellcheck?: boolean | null
        tabIndex?: number | null
        title?: string | null
        translate?: boolean | null
        webkitdropzone?: string | null
    }

}

export interface DOMHTMLElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement

    accessKey: string | null
    contentEditable: string | null
    dir: string | null
    draggable: boolean
    hidden: boolean
    innerText: string | null
    readonly isContentEditable: boolean
    lang: string | null
    outerText: string | null
    spellcheck: boolean
    tabIndex: number
    title: string | null
    translate: boolean
    webkitdropzone: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement

    click(): void
    getAccessKey(): string | null
    getChildren(): DOMHTMLCollection
    getContentEditable(): string | null
    getDir(): string | null
    getDraggable(): boolean
    getHidden(): boolean
    getInnerHtml(): string | null
    getInnerText(): string | null
    getIsContentEditable(): boolean
    getLang(): string | null
    getOuterHtml(): string | null
    getOuterText(): string | null
    getSpellcheck(): boolean
    getTabIndex(): number
    getTitle(): string | null
    getTranslate(): boolean
    getWebkitdropzone(): string | null
    setAccessKey(value: string): void
    setContentEditable(value: string): void
    setDir(value: string): void
    setDraggable(value: boolean): void
    setHidden(value: boolean): void
    setInnerHtml(contents: string): void
    setInnerText(value: string): void
    setLang(value: string): void
    setOuterHtml(contents: string): void
    setOuterText(value: string): void
    setSpellcheck(value: boolean): void
    setTabIndex(value: number): void
    setTitle(value: string): void
    setTranslate(value: boolean): void
    setWebkitdropzone(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement

    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLElement extends DOMElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElement

    constructor(config?: DOMHTMLElement.ConstructorProperties) 
    _init(config?: DOMHTMLElement.ConstructorProperties): void
}

export module DOMHTMLEmbedElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLEmbedElement

        align?: string | null
        height?: number | null
        name?: string | null
        src?: string | null
        type?: string | null
        width?: number | null
    }

}

export interface DOMHTMLEmbedElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLEmbedElement

    align: string | null
    height: number
    name: string | null
    src: string | null
    type: string | null
    width: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLEmbedElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLEmbedElement

    getAlign(): string | null
    getHeight(): number
    getName(): string | null
    getSrc(): string | null
    getTypeAttr(): string | null
    getWidth(): number
    setAlign(value: string): void
    setHeight(value: number): void
    setName(value: string): void
    setSrc(value: string): void
    setTypeAttr(value: string): void
    setWidth(value: number): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLEmbedElement

    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::height", callback: (...args: any[]) => void): number
    on(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::src", callback: (...args: any[]) => void): number
    on(sigName: "notify::src", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::src", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::width", callback: (...args: any[]) => void): number
    on(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLEmbedElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLEmbedElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLEmbedElement

    constructor(config?: DOMHTMLEmbedElement.ConstructorProperties) 
    _init(config?: DOMHTMLEmbedElement.ConstructorProperties): void
}

export module DOMHTMLFieldSetElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {
    }

}

export interface DOMHTMLFieldSetElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFieldSetElement

    readonly form: DOMHTMLFormElement
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFieldSetElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFieldSetElement

    getForm(): DOMHTMLFormElement

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFieldSetElement

    connect(sigName: "notify::form", callback: (...args: any[]) => void): number
    on(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::form", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLFieldSetElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFieldSetElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFieldSetElement

    constructor(config?: DOMHTMLFieldSetElement.ConstructorProperties) 
    _init(config?: DOMHTMLFieldSetElement.ConstructorProperties): void
}

export module DOMHTMLFontElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFontElement

        color?: string | null
        face?: string | null
        size?: string | null
    }

}

export interface DOMHTMLFontElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFontElement

    color: string | null
    face: string | null
    size: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFontElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFontElement

    getColor(): string | null
    getFace(): string | null
    getSize(): string | null
    setColor(value: string): void
    setFace(value: string): void
    setSize(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFontElement

    connect(sigName: "notify::color", callback: (...args: any[]) => void): number
    on(sigName: "notify::color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::color", ...args: any[]): void
    connect(sigName: "notify::face", callback: (...args: any[]) => void): number
    on(sigName: "notify::face", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::face", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::face", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::face", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLFontElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFontElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFontElement

    constructor(config?: DOMHTMLFontElement.ConstructorProperties) 
    _init(config?: DOMHTMLFontElement.ConstructorProperties): void
}

export module DOMHTMLFormElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFormElement

        acceptCharset?: string | null
        action?: string | null
        encoding?: string | null
        enctype?: string | null
        method?: string | null
        name?: string | null
        target?: string | null
    }

}

export interface DOMHTMLFormElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFormElement

    acceptCharset: string | null
    action: string | null
    readonly elements: DOMHTMLCollection
    encoding: string | null
    enctype: string | null
    readonly length: number
    method: string | null
    name: string | null
    target: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFormElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFormElement

    getAcceptCharset(): string | null
    getAction(): string | null
    getElements(): DOMHTMLCollection
    getEncoding(): string | null
    getEnctype(): string | null
    getLength(): number
    getMethod(): string | null
    getName(): string | null
    getTarget(): string | null
    reset(): void
    setAcceptCharset(value: string): void
    setAction(value: string): void
    setEncoding(value: string): void
    setEnctype(value: string): void
    setMethod(value: string): void
    setName(value: string): void
    setTarget(value: string): void
    submit(): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFormElement

    connect(sigName: "notify::accept-charset", callback: (...args: any[]) => void): number
    on(sigName: "notify::accept-charset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::accept-charset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::accept-charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::accept-charset", ...args: any[]): void
    connect(sigName: "notify::action", callback: (...args: any[]) => void): number
    on(sigName: "notify::action", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::action", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::action", ...args: any[]): void
    connect(sigName: "notify::elements", callback: (...args: any[]) => void): number
    on(sigName: "notify::elements", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::elements", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::elements", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::elements", ...args: any[]): void
    connect(sigName: "notify::encoding", callback: (...args: any[]) => void): number
    on(sigName: "notify::encoding", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::encoding", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::encoding", ...args: any[]): void
    connect(sigName: "notify::enctype", callback: (...args: any[]) => void): number
    on(sigName: "notify::enctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::enctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::enctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::enctype", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::method", callback: (...args: any[]) => void): number
    on(sigName: "notify::method", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::method", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::method", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::method", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLFormElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFormElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFormElement

    constructor(config?: DOMHTMLFormElement.ConstructorProperties) 
    _init(config?: DOMHTMLFormElement.ConstructorProperties): void
}

export module DOMHTMLFrameElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameElement

        frameBorder?: string | null
        longDesc?: string | null
        marginHeight?: string | null
        marginWidth?: string | null
        name?: string | null
        noResize?: boolean | null
        scrolling?: string | null
        src?: string | null
    }

}

export interface DOMHTMLFrameElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameElement

    readonly contentDocument: DOMDocument
    readonly contentWindow: DOMDOMWindow
    frameBorder: string | null
    readonly height: number
    longDesc: string | null
    marginHeight: string | null
    marginWidth: string | null
    name: string | null
    noResize: boolean
    scrolling: string | null
    src: string | null
    readonly width: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameElement

    getContentDocument(): DOMDocument
    getContentWindow(): DOMDOMWindow
    getFrameBorder(): string | null
    getHeight(): number
    getLongDesc(): string | null
    getMarginHeight(): string | null
    getMarginWidth(): string | null
    getName(): string | null
    getNoResize(): boolean
    getScrolling(): string | null
    getSrc(): string | null
    getWidth(): number
    setFrameBorder(value: string): void
    setLongDesc(value: string): void
    setMarginHeight(value: string): void
    setMarginWidth(value: string): void
    setName(value: string): void
    setNoResize(value: boolean): void
    setScrolling(value: string): void
    setSrc(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameElement

    connect(sigName: "notify::content-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-document", ...args: any[]): void
    connect(sigName: "notify::content-window", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-window", ...args: any[]): void
    connect(sigName: "notify::frame-border", callback: (...args: any[]) => void): number
    on(sigName: "notify::frame-border", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::frame-border", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::frame-border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::frame-border", ...args: any[]): void
    connect(sigName: "notify::height", callback: (...args: any[]) => void): number
    on(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height", ...args: any[]): void
    connect(sigName: "notify::long-desc", callback: (...args: any[]) => void): number
    on(sigName: "notify::long-desc", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::long-desc", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::long-desc", ...args: any[]): void
    connect(sigName: "notify::margin-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-height", ...args: any[]): void
    connect(sigName: "notify::margin-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-width", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-resize", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-resize", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-resize", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-resize", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-resize", ...args: any[]): void
    connect(sigName: "notify::scrolling", callback: (...args: any[]) => void): number
    on(sigName: "notify::scrolling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scrolling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scrolling", ...args: any[]): void
    connect(sigName: "notify::src", callback: (...args: any[]) => void): number
    on(sigName: "notify::src", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::src", ...args: any[]): void
    connect(sigName: "notify::width", callback: (...args: any[]) => void): number
    on(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLFrameElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameElement

    constructor(config?: DOMHTMLFrameElement.ConstructorProperties) 
    _init(config?: DOMHTMLFrameElement.ConstructorProperties): void
}

export module DOMHTMLFrameSetElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameSetElement

        cols?: string | null
        rows?: string | null
    }

}

export interface DOMHTMLFrameSetElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameSetElement

    cols: string | null
    rows: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameSetElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameSetElement

    getCols(): string | null
    getRows(): string | null
    setCols(value: string): void
    setRows(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameSetElement

    connect(sigName: "notify::cols", callback: (...args: any[]) => void): number
    on(sigName: "notify::cols", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cols", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cols", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cols", ...args: any[]): void
    connect(sigName: "notify::rows", callback: (...args: any[]) => void): number
    on(sigName: "notify::rows", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::rows", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::rows", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLFrameSetElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameSetElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameSetElement

    constructor(config?: DOMHTMLFrameSetElement.ConstructorProperties) 
    _init(config?: DOMHTMLFrameSetElement.ConstructorProperties): void
}

export module DOMHTMLHRElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHRElement

        align?: string | null
        noShade?: boolean | null
        size?: string | null
        width?: string | null
    }

}

export interface DOMHTMLHRElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHRElement

    align: string | null
    noShade: boolean
    size: string | null
    width: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHRElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHRElement

    getAlign(): string | null
    getNoShade(): boolean
    getSize(): string | null
    getWidth(): string | null
    setAlign(value: string): void
    setNoShade(value: boolean): void
    setSize(value: string): void
    setWidth(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHRElement

    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::no-shade", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-shade", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-shade", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-shade", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-shade", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::width", callback: (...args: any[]) => void): number
    on(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLHRElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHRElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHRElement

    constructor(config?: DOMHTMLHRElement.ConstructorProperties) 
    _init(config?: DOMHTMLHRElement.ConstructorProperties): void
}

export module DOMHTMLHeadElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadElement

        profile?: string | null
    }

}

export interface DOMHTMLHeadElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadElement

    profile: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadElement

    getProfile(): string | null
    setProfile(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadElement

    connect(sigName: "notify::profile", callback: (...args: any[]) => void): number
    on(sigName: "notify::profile", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::profile", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::profile", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::profile", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLHeadElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadElement

    constructor(config?: DOMHTMLHeadElement.ConstructorProperties) 
    _init(config?: DOMHTMLHeadElement.ConstructorProperties): void
}

export module DOMHTMLHeadingElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadingElement

        align?: string | null
    }

}

export interface DOMHTMLHeadingElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadingElement

    align: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadingElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadingElement

    getAlign(): string | null
    setAlign(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadingElement

    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLHeadingElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadingElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadingElement

    constructor(config?: DOMHTMLHeadingElement.ConstructorProperties) 
    _init(config?: DOMHTMLHeadingElement.ConstructorProperties): void
}

export module DOMHTMLHtmlElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHtmlElement

        version?: string | null
    }

}

export interface DOMHTMLHtmlElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHtmlElement

    version: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHtmlElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHtmlElement

    getVersion(): string | null
    setVersion(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHtmlElement

    connect(sigName: "notify::version", callback: (...args: any[]) => void): number
    on(sigName: "notify::version", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::version", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::version", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::version", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLHtmlElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHtmlElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHtmlElement

    constructor(config?: DOMHTMLHtmlElement.ConstructorProperties) 
    _init(config?: DOMHTMLHtmlElement.ConstructorProperties): void
}

export module DOMHTMLIFrameElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLIFrameElement

        align?: string | null
        frameBorder?: string | null
        height?: string | null
        longDesc?: string | null
        marginHeight?: string | null
        marginWidth?: string | null
        name?: string | null
        scrolling?: string | null
        src?: string | null
        width?: string | null
    }

}

export interface DOMHTMLIFrameElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLIFrameElement

    align: string | null
    readonly contentDocument: DOMDocument
    readonly contentWindow: DOMDOMWindow
    frameBorder: string | null
    height: string | null
    longDesc: string | null
    marginHeight: string | null
    marginWidth: string | null
    name: string | null
    scrolling: string | null
    src: string | null
    width: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLIFrameElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLIFrameElement

    getAlign(): string | null
    getContentDocument(): DOMDocument
    getContentWindow(): DOMDOMWindow
    getFrameBorder(): string | null
    getHeight(): string | null
    getLongDesc(): string | null
    getMarginHeight(): string | null
    getMarginWidth(): string | null
    getName(): string | null
    getScrolling(): string | null
    getSrc(): string | null
    getWidth(): string | null
    setAlign(value: string): void
    setFrameBorder(value: string): void
    setHeight(value: string): void
    setLongDesc(value: string): void
    setMarginHeight(value: string): void
    setMarginWidth(value: string): void
    setName(value: string): void
    setScrolling(value: string): void
    setSrc(value: string): void
    setWidth(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLIFrameElement

    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::content-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-document", ...args: any[]): void
    connect(sigName: "notify::content-window", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-window", ...args: any[]): void
    connect(sigName: "notify::frame-border", callback: (...args: any[]) => void): number
    on(sigName: "notify::frame-border", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::frame-border", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::frame-border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::frame-border", ...args: any[]): void
    connect(sigName: "notify::height", callback: (...args: any[]) => void): number
    on(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height", ...args: any[]): void
    connect(sigName: "notify::long-desc", callback: (...args: any[]) => void): number
    on(sigName: "notify::long-desc", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::long-desc", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::long-desc", ...args: any[]): void
    connect(sigName: "notify::margin-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-height", ...args: any[]): void
    connect(sigName: "notify::margin-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-width", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::scrolling", callback: (...args: any[]) => void): number
    on(sigName: "notify::scrolling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scrolling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scrolling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scrolling", ...args: any[]): void
    connect(sigName: "notify::src", callback: (...args: any[]) => void): number
    on(sigName: "notify::src", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::src", ...args: any[]): void
    connect(sigName: "notify::width", callback: (...args: any[]) => void): number
    on(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLIFrameElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLIFrameElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLIFrameElement

    constructor(config?: DOMHTMLIFrameElement.ConstructorProperties) 
    _init(config?: DOMHTMLIFrameElement.ConstructorProperties): void
}

export module DOMHTMLImageElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLImageElement

        align?: string | null
        alt?: string | null
        border?: string | null
        height?: number | null
        hspace?: number | null
        isMap?: boolean | null
        longDesc?: string | null
        lowsrc?: string | null
        name?: string | null
        src?: string | null
        useMap?: string | null
        vspace?: number | null
        width?: number | null
    }

}

export interface DOMHTMLImageElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLImageElement

    align: string | null
    alt: string | null
    border: string | null
    readonly complete: boolean
    height: number
    hspace: number
    isMap: boolean
    longDesc: string | null
    lowsrc: string | null
    name: string | null
    readonly naturalHeight: number
    readonly naturalWidth: number
    src: string | null
    useMap: string | null
    vspace: number
    width: number
    readonly x: number
    readonly y: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLImageElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLImageElement

    getAlign(): string | null
    getAlt(): string | null
    getBorder(): string | null
    getComplete(): boolean
    getHeight(): number
    getHspace(): number
    getIsMap(): boolean
    getLongDesc(): string | null
    getLowsrc(): string | null
    getName(): string | null
    getNaturalHeight(): number
    getNaturalWidth(): number
    getSrc(): string | null
    getUseMap(): string | null
    getVspace(): number
    getWidth(): number
    getX(): number
    getY(): number
    setAlign(value: string): void
    setAlt(value: string): void
    setBorder(value: string): void
    setHeight(value: number): void
    setHspace(value: number): void
    setIsMap(value: boolean): void
    setLongDesc(value: string): void
    setLowsrc(value: string): void
    setName(value: string): void
    setSrc(value: string): void
    setUseMap(value: string): void
    setVspace(value: number): void
    setWidth(value: number): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLImageElement

    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::alt", callback: (...args: any[]) => void): number
    on(sigName: "notify::alt", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::alt", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::alt", ...args: any[]): void
    connect(sigName: "notify::border", callback: (...args: any[]) => void): number
    on(sigName: "notify::border", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border", ...args: any[]): void
    connect(sigName: "notify::complete", callback: (...args: any[]) => void): number
    on(sigName: "notify::complete", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::complete", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::complete", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::complete", ...args: any[]): void
    connect(sigName: "notify::height", callback: (...args: any[]) => void): number
    on(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height", ...args: any[]): void
    connect(sigName: "notify::hspace", callback: (...args: any[]) => void): number
    on(sigName: "notify::hspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hspace", ...args: any[]): void
    connect(sigName: "notify::is-map", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-map", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-map", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-map", ...args: any[]): void
    connect(sigName: "notify::long-desc", callback: (...args: any[]) => void): number
    on(sigName: "notify::long-desc", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::long-desc", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::long-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::long-desc", ...args: any[]): void
    connect(sigName: "notify::lowsrc", callback: (...args: any[]) => void): number
    on(sigName: "notify::lowsrc", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lowsrc", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lowsrc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lowsrc", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::natural-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::natural-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::natural-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::natural-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::natural-height", ...args: any[]): void
    connect(sigName: "notify::natural-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::natural-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::natural-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::natural-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::natural-width", ...args: any[]): void
    connect(sigName: "notify::src", callback: (...args: any[]) => void): number
    on(sigName: "notify::src", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::src", ...args: any[]): void
    connect(sigName: "notify::use-map", callback: (...args: any[]) => void): number
    on(sigName: "notify::use-map", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::use-map", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::use-map", ...args: any[]): void
    connect(sigName: "notify::vspace", callback: (...args: any[]) => void): number
    on(sigName: "notify::vspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vspace", ...args: any[]): void
    connect(sigName: "notify::width", callback: (...args: any[]) => void): number
    on(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width", ...args: any[]): void
    connect(sigName: "notify::x", callback: (...args: any[]) => void): number
    on(sigName: "notify::x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::x", ...args: any[]): void
    connect(sigName: "notify::y", callback: (...args: any[]) => void): number
    on(sigName: "notify::y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::y", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLImageElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLImageElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLImageElement

    constructor(config?: DOMHTMLImageElement.ConstructorProperties) 
    _init(config?: DOMHTMLImageElement.ConstructorProperties): void
}

export module DOMHTMLInputElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLInputElement

        accept?: string | null
        align?: string | null
        alt?: string | null
        autofocus?: boolean | null
        capture?: string | null
        checked?: boolean | null
        defaultChecked?: boolean | null
        defaultValue?: string | null
        disabled?: boolean | null
        height?: number | null
        indeterminate?: boolean | null
        maxLength?: number | null
        multiple?: boolean | null
        name?: string | null
        readOnly?: boolean | null
        size?: number | null
        src?: string | null
        type?: string | null
        useMap?: string | null
        value?: string | null
        width?: number | null
    }

}

export interface DOMHTMLInputElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLInputElement

    accept: string | null
    align: string | null
    alt: string | null
    autofocus: boolean
    capture: string | null
    checked: boolean
    defaultChecked: boolean
    defaultValue: string | null
    disabled: boolean
    readonly files: DOMFileList
    readonly form: DOMHTMLFormElement
    height: number
    indeterminate: boolean
    maxLength: number
    multiple: boolean
    name: string | null
    readOnly: boolean
    size: number
    src: string | null
    type: string | null
    useMap: string | null
    value: string | null
    width: number
    readonly willValidate: boolean
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLInputElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLInputElement

    getAccept(): string | null
    getAlign(): string | null
    getAlt(): string | null
    getAutoFilled(): boolean
    getAutofocus(): boolean
    getCapture(): boolean
    getCaptureType(): string | null
    getChecked(): boolean
    getDefaultChecked(): boolean
    getDefaultValue(): string | null
    getDisabled(): boolean
    getFiles(): DOMFileList
    getForm(): DOMHTMLFormElement
    getHeight(): number
    getIndeterminate(): boolean
    getInputType(): string | null
    getMaxLength(): number
    getMultiple(): boolean
    getName(): string | null
    getReadOnly(): boolean
    getSize(): number
    getSrc(): string | null
    getUseMap(): string | null
    getValue(): string | null
    getWidth(): number
    getWillValidate(): boolean
    isEdited(): boolean
    select(): void
    setAccept(value: string): void
    setAlign(value: string): void
    setAlt(value: string): void
    setAutoFilled(value: boolean): void
    setAutofocus(value: boolean): void
    setCaptureType(value: string): void
    setChecked(value: boolean): void
    setDefaultChecked(value: boolean): void
    setDefaultValue(value: string): void
    setDisabled(value: boolean): void
    setEditingValue(value: string): void
    setFiles(value: DOMFileList): void
    setHeight(value: number): void
    setIndeterminate(value: boolean): void
    setInputType(value: string): void
    setMaxLength(value: number): void
    setMultiple(value: boolean): void
    setName(value: string): void
    setReadOnly(value: boolean): void
    setSize(value: number): void
    setSrc(value: string): void
    setUseMap(value: string): void
    setValue(value: string): void
    setWidth(value: number): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLInputElement

    connect(sigName: "notify::accept", callback: (...args: any[]) => void): number
    on(sigName: "notify::accept", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::accept", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::accept", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::accept", ...args: any[]): void
    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::alt", callback: (...args: any[]) => void): number
    on(sigName: "notify::alt", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::alt", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::alt", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::alt", ...args: any[]): void
    connect(sigName: "notify::autofocus", callback: (...args: any[]) => void): number
    on(sigName: "notify::autofocus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::autofocus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::autofocus", ...args: any[]): void
    connect(sigName: "notify::capture", callback: (...args: any[]) => void): number
    on(sigName: "notify::capture", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::capture", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::capture", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::capture", ...args: any[]): void
    connect(sigName: "notify::checked", callback: (...args: any[]) => void): number
    on(sigName: "notify::checked", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::checked", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::checked", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::checked", ...args: any[]): void
    connect(sigName: "notify::default-checked", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-checked", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-checked", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-checked", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-checked", ...args: any[]): void
    connect(sigName: "notify::default-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-value", ...args: any[]): void
    connect(sigName: "notify::disabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::files", callback: (...args: any[]) => void): number
    on(sigName: "notify::files", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::files", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::files", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::files", ...args: any[]): void
    connect(sigName: "notify::form", callback: (...args: any[]) => void): number
    on(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::form", ...args: any[]): void
    connect(sigName: "notify::height", callback: (...args: any[]) => void): number
    on(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height", ...args: any[]): void
    connect(sigName: "notify::indeterminate", callback: (...args: any[]) => void): number
    on(sigName: "notify::indeterminate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indeterminate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indeterminate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indeterminate", ...args: any[]): void
    connect(sigName: "notify::max-length", callback: (...args: any[]) => void): number
    on(sigName: "notify::max-length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::max-length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::max-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::max-length", ...args: any[]): void
    connect(sigName: "notify::multiple", callback: (...args: any[]) => void): number
    on(sigName: "notify::multiple", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::multiple", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::multiple", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::src", callback: (...args: any[]) => void): number
    on(sigName: "notify::src", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::src", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::use-map", callback: (...args: any[]) => void): number
    on(sigName: "notify::use-map", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::use-map", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::use-map", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::width", callback: (...args: any[]) => void): number
    on(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width", ...args: any[]): void
    connect(sigName: "notify::will-validate", callback: (...args: any[]) => void): number
    on(sigName: "notify::will-validate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::will-validate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::will-validate", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLInputElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLInputElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLInputElement

    constructor(config?: DOMHTMLInputElement.ConstructorProperties) 
    _init(config?: DOMHTMLInputElement.ConstructorProperties): void
}

export module DOMHTMLLIElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLIElement

        type?: string | null
        value?: number | null
    }

}

export interface DOMHTMLLIElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLIElement

    type: string | null
    value: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLIElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLIElement

    getTypeAttr(): string | null
    getValue(): number
    setTypeAttr(value: string): void
    setValue(value: number): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLIElement

    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLLIElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLIElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLIElement

    constructor(config?: DOMHTMLLIElement.ConstructorProperties) 
    _init(config?: DOMHTMLLIElement.ConstructorProperties): void
}

export module DOMHTMLLabelElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLabelElement

        htmlFor?: string | null
    }

}

export interface DOMHTMLLabelElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLabelElement

    readonly form: DOMHTMLFormElement
    htmlFor: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLabelElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLabelElement

    getForm(): DOMHTMLFormElement
    getHtmlFor(): string | null
    setHtmlFor(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLabelElement

    connect(sigName: "notify::form", callback: (...args: any[]) => void): number
    on(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::form", ...args: any[]): void
    connect(sigName: "notify::html-for", callback: (...args: any[]) => void): number
    on(sigName: "notify::html-for", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::html-for", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::html-for", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::html-for", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLLabelElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLabelElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLabelElement

    constructor(config?: DOMHTMLLabelElement.ConstructorProperties) 
    _init(config?: DOMHTMLLabelElement.ConstructorProperties): void
}

export module DOMHTMLLegendElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLegendElement

        align?: string | null
    }

}

export interface DOMHTMLLegendElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLegendElement

    align: string | null
    readonly form: DOMHTMLFormElement
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLegendElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLegendElement

    getAlign(): string | null
    getForm(): DOMHTMLFormElement
    setAlign(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLegendElement

    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::form", callback: (...args: any[]) => void): number
    on(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::form", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLLegendElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLegendElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLegendElement

    constructor(config?: DOMHTMLLegendElement.ConstructorProperties) 
    _init(config?: DOMHTMLLegendElement.ConstructorProperties): void
}

export module DOMHTMLLinkElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLinkElement

        charset?: string | null
        disabled?: boolean | null
        href?: string | null
        hreflang?: string | null
        media?: string | null
        rel?: string | null
        rev?: string | null
        target?: string | null
        type?: string | null
    }

}

export interface DOMHTMLLinkElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLinkElement

    charset: string | null
    disabled: boolean
    href: string | null
    hreflang: string | null
    media: string | null
    rel: string | null
    rev: string | null
    readonly sheet: DOMStyleSheet
    readonly sizes: DOMDOMTokenList
    target: string | null
    type: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLinkElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLinkElement

    getCharset(): string | null
    getDisabled(): boolean
    getHref(): string | null
    getHreflang(): string | null
    getMedia(): string | null
    getRel(): string | null
    getRev(): string | null
    getSheet(): DOMStyleSheet
    getSizes(): DOMDOMTokenList
    getTarget(): string | null
    getTypeAttr(): string | null
    setCharset(value: string): void
    setDisabled(value: boolean): void
    setHref(value: string): void
    setHreflang(value: string): void
    setMedia(value: string): void
    setRel(value: string): void
    setRev(value: string): void
    setSizes(value: string): void
    setTarget(value: string): void
    setTypeAttr(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLinkElement

    connect(sigName: "notify::charset", callback: (...args: any[]) => void): number
    on(sigName: "notify::charset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::charset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::charset", ...args: any[]): void
    connect(sigName: "notify::disabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::href", callback: (...args: any[]) => void): number
    on(sigName: "notify::href", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::href", ...args: any[]): void
    connect(sigName: "notify::hreflang", callback: (...args: any[]) => void): number
    on(sigName: "notify::hreflang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hreflang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hreflang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hreflang", ...args: any[]): void
    connect(sigName: "notify::media", callback: (...args: any[]) => void): number
    on(sigName: "notify::media", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::media", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::media", ...args: any[]): void
    connect(sigName: "notify::rel", callback: (...args: any[]) => void): number
    on(sigName: "notify::rel", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::rel", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::rel", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::rel", ...args: any[]): void
    connect(sigName: "notify::rev", callback: (...args: any[]) => void): number
    on(sigName: "notify::rev", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::rev", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::rev", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::rev", ...args: any[]): void
    connect(sigName: "notify::sheet", callback: (...args: any[]) => void): number
    on(sigName: "notify::sheet", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sheet", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sheet", ...args: any[]): void
    connect(sigName: "notify::sizes", callback: (...args: any[]) => void): number
    on(sigName: "notify::sizes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sizes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sizes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sizes", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLLinkElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLinkElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLinkElement

    constructor(config?: DOMHTMLLinkElement.ConstructorProperties) 
    _init(config?: DOMHTMLLinkElement.ConstructorProperties): void
}

export module DOMHTMLMapElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMapElement

        name?: string | null
    }

}

export interface DOMHTMLMapElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMapElement

    readonly areas: DOMHTMLCollection
    name: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMapElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMapElement

    getAreas(): DOMHTMLCollection
    getName(): string | null
    setName(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMapElement

    connect(sigName: "notify::areas", callback: (...args: any[]) => void): number
    on(sigName: "notify::areas", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::areas", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::areas", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::areas", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLMapElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMapElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMapElement

    constructor(config?: DOMHTMLMapElement.ConstructorProperties) 
    _init(config?: DOMHTMLMapElement.ConstructorProperties): void
}

export module DOMHTMLMarqueeElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {
    }

}

export interface DOMHTMLMarqueeElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMarqueeElement

    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMarqueeElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMarqueeElement

    start(): void
    stop(): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMarqueeElement

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLMarqueeElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMarqueeElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMarqueeElement

    constructor(config?: DOMHTMLMarqueeElement.ConstructorProperties) 
    _init(config?: DOMHTMLMarqueeElement.ConstructorProperties): void
}

export module DOMHTMLMenuElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMenuElement

        compact?: boolean | null
    }

}

export interface DOMHTMLMenuElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMenuElement

    compact: boolean
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMenuElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMenuElement

    getCompact(): boolean
    setCompact(value: boolean): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMenuElement

    connect(sigName: "notify::compact", callback: (...args: any[]) => void): number
    on(sigName: "notify::compact", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compact", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compact", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLMenuElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMenuElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMenuElement

    constructor(config?: DOMHTMLMenuElement.ConstructorProperties) 
    _init(config?: DOMHTMLMenuElement.ConstructorProperties): void
}

export module DOMHTMLMetaElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMetaElement

        content?: string | null
        httpEquiv?: string | null
        name?: string | null
        scheme?: string | null
    }

}

export interface DOMHTMLMetaElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMetaElement

    content: string | null
    httpEquiv: string | null
    name: string | null
    scheme: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMetaElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMetaElement

    getContent(): string | null
    getHttpEquiv(): string | null
    getName(): string | null
    getScheme(): string | null
    setContent(value: string): void
    setHttpEquiv(value: string): void
    setName(value: string): void
    setScheme(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMetaElement

    connect(sigName: "notify::content", callback: (...args: any[]) => void): number
    on(sigName: "notify::content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content", ...args: any[]): void
    connect(sigName: "notify::http-equiv", callback: (...args: any[]) => void): number
    on(sigName: "notify::http-equiv", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::http-equiv", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::http-equiv", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::http-equiv", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::scheme", callback: (...args: any[]) => void): number
    on(sigName: "notify::scheme", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scheme", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scheme", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLMetaElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMetaElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMetaElement

    constructor(config?: DOMHTMLMetaElement.ConstructorProperties) 
    _init(config?: DOMHTMLMetaElement.ConstructorProperties): void
}

export module DOMHTMLModElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLModElement

        cite?: string | null
        dateTime?: string | null
    }

}

export interface DOMHTMLModElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLModElement

    cite: string | null
    dateTime: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLModElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLModElement

    getCite(): string | null
    getDateTime(): string | null
    setCite(value: string): void
    setDateTime(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLModElement

    connect(sigName: "notify::cite", callback: (...args: any[]) => void): number
    on(sigName: "notify::cite", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cite", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cite", ...args: any[]): void
    connect(sigName: "notify::date-time", callback: (...args: any[]) => void): number
    on(sigName: "notify::date-time", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::date-time", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::date-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::date-time", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLModElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLModElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLModElement

    constructor(config?: DOMHTMLModElement.ConstructorProperties) 
    _init(config?: DOMHTMLModElement.ConstructorProperties): void
}

export module DOMHTMLOListElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOListElement

        compact?: boolean | null
        start?: number | null
        type?: string | null
    }

}

export interface DOMHTMLOListElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOListElement

    compact: boolean
    start: number
    type: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOListElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOListElement

    getCompact(): boolean
    getStart(): number
    getTypeAttr(): string | null
    setCompact(value: boolean): void
    setStart(value: number): void
    setTypeAttr(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOListElement

    connect(sigName: "notify::compact", callback: (...args: any[]) => void): number
    on(sigName: "notify::compact", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compact", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compact", ...args: any[]): void
    connect(sigName: "notify::start", callback: (...args: any[]) => void): number
    on(sigName: "notify::start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::start", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLOListElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOListElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOListElement

    constructor(config?: DOMHTMLOListElement.ConstructorProperties) 
    _init(config?: DOMHTMLOListElement.ConstructorProperties): void
}

export module DOMHTMLObjectElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLObjectElement

        align?: string | null
        archive?: string | null
        border?: string | null
        code?: string | null
        codeBase?: string | null
        codeType?: string | null
        data?: string | null
        declare?: boolean | null
        height?: string | null
        hspace?: number | null
        name?: string | null
        standby?: string | null
        type?: string | null
        useMap?: string | null
        vspace?: number | null
        width?: string | null
    }

}

export interface DOMHTMLObjectElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLObjectElement

    align: string | null
    archive: string | null
    border: string | null
    code: string | null
    codeBase: string | null
    codeType: string | null
    readonly contentDocument: DOMDocument
    data: string | null
    declare: boolean
    readonly form: DOMHTMLFormElement
    height: string | null
    hspace: number
    name: string | null
    standby: string | null
    type: string | null
    useMap: string | null
    vspace: number
    width: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLObjectElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLObjectElement

    getAlign(): string | null
    getArchive(): string | null
    getBorder(): string | null
    getCode(): string | null
    getCodeBase(): string | null
    getCodeType(): string | null
    getContentDocument(): DOMDocument
    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    getDeclare(): boolean
    getForm(): DOMHTMLFormElement
    getHeight(): string | null
    getHspace(): number
    getName(): string | null
    getStandby(): string | null
    getTypeAttr(): string | null
    getUseMap(): string | null
    getVspace(): number
    getWidth(): string | null
    setAlign(value: string): void
    setArchive(value: string): void
    setBorder(value: string): void
    setCode(value: string): void
    setCodeBase(value: string): void
    setCodeType(value: string): void
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    setDeclare(value: boolean): void
    setHeight(value: string): void
    setHspace(value: number): void
    setName(value: string): void
    setStandby(value: string): void
    setTypeAttr(value: string): void
    setUseMap(value: string): void
    setVspace(value: number): void
    setWidth(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLObjectElement

    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::archive", callback: (...args: any[]) => void): number
    on(sigName: "notify::archive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::archive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::archive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::archive", ...args: any[]): void
    connect(sigName: "notify::border", callback: (...args: any[]) => void): number
    on(sigName: "notify::border", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border", ...args: any[]): void
    connect(sigName: "notify::code", callback: (...args: any[]) => void): number
    on(sigName: "notify::code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::code", ...args: any[]): void
    connect(sigName: "notify::code-base", callback: (...args: any[]) => void): number
    on(sigName: "notify::code-base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::code-base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::code-base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::code-base", ...args: any[]): void
    connect(sigName: "notify::code-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::code-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::code-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::code-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::code-type", ...args: any[]): void
    connect(sigName: "notify::content-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-document", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::declare", callback: (...args: any[]) => void): number
    on(sigName: "notify::declare", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::declare", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::declare", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::declare", ...args: any[]): void
    connect(sigName: "notify::form", callback: (...args: any[]) => void): number
    on(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::form", ...args: any[]): void
    connect(sigName: "notify::height", callback: (...args: any[]) => void): number
    on(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height", ...args: any[]): void
    connect(sigName: "notify::hspace", callback: (...args: any[]) => void): number
    on(sigName: "notify::hspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hspace", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::standby", callback: (...args: any[]) => void): number
    on(sigName: "notify::standby", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::standby", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::standby", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::standby", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::use-map", callback: (...args: any[]) => void): number
    on(sigName: "notify::use-map", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::use-map", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::use-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::use-map", ...args: any[]): void
    connect(sigName: "notify::vspace", callback: (...args: any[]) => void): number
    on(sigName: "notify::vspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vspace", ...args: any[]): void
    connect(sigName: "notify::width", callback: (...args: any[]) => void): number
    on(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLObjectElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLObjectElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLObjectElement

    constructor(config?: DOMHTMLObjectElement.ConstructorProperties) 
    _init(config?: DOMHTMLObjectElement.ConstructorProperties): void
}

export module DOMHTMLOptGroupElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptGroupElement

        disabled?: boolean | null
        label?: string | null
    }

}

export interface DOMHTMLOptGroupElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptGroupElement

    disabled: boolean
    label: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptGroupElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptGroupElement

    getDisabled(): boolean
    getLabel(): string | null
    setDisabled(value: boolean): void
    setLabel(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptGroupElement

    connect(sigName: "notify::disabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::label", callback: (...args: any[]) => void): number
    on(sigName: "notify::label", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::label", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLOptGroupElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptGroupElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptGroupElement

    constructor(config?: DOMHTMLOptGroupElement.ConstructorProperties) 
    _init(config?: DOMHTMLOptGroupElement.ConstructorProperties): void
}

export module DOMHTMLOptionElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionElement

        defaultSelected?: boolean | null
        disabled?: boolean | null
        label?: string | null
        selected?: boolean | null
        value?: string | null
    }

}

export interface DOMHTMLOptionElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionElement

    defaultSelected: boolean
    disabled: boolean
    readonly form: DOMHTMLFormElement
    readonly index: number
    label: string | null
    selected: boolean
    readonly text: string | null
    value: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionElement

    getDefaultSelected(): boolean
    getDisabled(): boolean
    getForm(): DOMHTMLFormElement
    getIndex(): number
    getLabel(): string | null
    getSelected(): boolean
    getText(): string | null
    getValue(): string | null
    setDefaultSelected(value: boolean): void
    setDisabled(value: boolean): void
    setLabel(value: string): void
    setSelected(value: boolean): void
    setValue(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionElement

    connect(sigName: "notify::default-selected", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-selected", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-selected", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-selected", ...args: any[]): void
    connect(sigName: "notify::disabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::form", callback: (...args: any[]) => void): number
    on(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::form", ...args: any[]): void
    connect(sigName: "notify::index", callback: (...args: any[]) => void): number
    on(sigName: "notify::index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::index", ...args: any[]): void
    connect(sigName: "notify::label", callback: (...args: any[]) => void): number
    on(sigName: "notify::label", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::label", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::selected", callback: (...args: any[]) => void): number
    on(sigName: "notify::selected", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selected", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selected", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selected", ...args: any[]): void
    connect(sigName: "notify::text", callback: (...args: any[]) => void): number
    on(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLOptionElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionElement

    constructor(config?: DOMHTMLOptionElement.ConstructorProperties) 
    _init(config?: DOMHTMLOptionElement.ConstructorProperties): void
}

export module DOMHTMLOptionsCollection {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMHTMLCollection.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionsCollection

        selectedIndex?: number | null
    }

}

export interface DOMHTMLOptionsCollection {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionsCollection

    readonly length: number
    selectedIndex: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionsCollection

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionsCollection

    getLength(): number
    getSelectedIndex(): number
    namedItem(name: string): DOMNode
    setSelectedIndex(value: number): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionsCollection

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::selected-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::selected-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selected-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selected-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selected-index", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLOptionsCollection extends DOMHTMLCollection {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionsCollection

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionsCollection

    constructor(config?: DOMHTMLOptionsCollection.ConstructorProperties) 
    _init(config?: DOMHTMLOptionsCollection.ConstructorProperties): void
}

export module DOMHTMLParagraphElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParagraphElement

        align?: string | null
    }

}

export interface DOMHTMLParagraphElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParagraphElement

    align: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParagraphElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParagraphElement

    getAlign(): string | null
    setAlign(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParagraphElement

    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLParagraphElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParagraphElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParagraphElement

    constructor(config?: DOMHTMLParagraphElement.ConstructorProperties) 
    _init(config?: DOMHTMLParagraphElement.ConstructorProperties): void
}

export module DOMHTMLParamElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParamElement

        name?: string | null
        type?: string | null
        value?: string | null
        valueType?: string | null
    }

}

export interface DOMHTMLParamElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParamElement

    name: string | null
    type: string | null
    value: string | null
    valueType: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParamElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParamElement

    getName(): string | null
    getTypeAttr(): string | null
    getValue(): string | null
    getValueType(): string | null
    setName(value: string): void
    setTypeAttr(value: string): void
    setValue(value: string): void
    setValueType(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParamElement

    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::value-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::value-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value-type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLParamElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParamElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParamElement

    constructor(config?: DOMHTMLParamElement.ConstructorProperties) 
    _init(config?: DOMHTMLParamElement.ConstructorProperties): void
}

export module DOMHTMLPreElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLPreElement

        width?: number | null
        wrap?: boolean | null
    }

}

export interface DOMHTMLPreElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLPreElement

    width: number
    wrap: boolean
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLPreElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLPreElement

    getWidth(): number
    getWrap(): boolean
    setWidth(value: number): void
    setWrap(value: boolean): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLPreElement

    connect(sigName: "notify::width", callback: (...args: any[]) => void): number
    on(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width", ...args: any[]): void
    connect(sigName: "notify::wrap", callback: (...args: any[]) => void): number
    on(sigName: "notify::wrap", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::wrap", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::wrap", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLPreElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLPreElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLPreElement

    constructor(config?: DOMHTMLPreElement.ConstructorProperties) 
    _init(config?: DOMHTMLPreElement.ConstructorProperties): void
}

export module DOMHTMLQuoteElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLQuoteElement

        cite?: string | null
    }

}

export interface DOMHTMLQuoteElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLQuoteElement

    cite: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLQuoteElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLQuoteElement

    getCite(): string | null
    setCite(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLQuoteElement

    connect(sigName: "notify::cite", callback: (...args: any[]) => void): number
    on(sigName: "notify::cite", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cite", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cite", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLQuoteElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLQuoteElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLQuoteElement

    constructor(config?: DOMHTMLQuoteElement.ConstructorProperties) 
    _init(config?: DOMHTMLQuoteElement.ConstructorProperties): void
}

export module DOMHTMLScriptElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLScriptElement

        charset?: string | null
        defer?: boolean | null
        event?: string | null
        htmlFor?: string | null
        src?: string | null
        text?: string | null
        type?: string | null
    }

}

export interface DOMHTMLScriptElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLScriptElement

    charset: string | null
    defer: boolean
    event: string | null
    htmlFor: string | null
    src: string | null
    text: string | null
    type: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLScriptElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLScriptElement

    getCharset(): string | null
    getDefer(): boolean
    getEvent(): string | null
    getHtmlFor(): string | null
    getSrc(): string | null
    getText(): string | null
    getTypeAttr(): string | null
    setCharset(value: string): void
    setDefer(value: boolean): void
    setEvent(value: string): void
    setHtmlFor(value: string): void
    setSrc(value: string): void
    setText(value: string): void
    setTypeAttr(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLScriptElement

    connect(sigName: "notify::charset", callback: (...args: any[]) => void): number
    on(sigName: "notify::charset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::charset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::charset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::charset", ...args: any[]): void
    connect(sigName: "notify::defer", callback: (...args: any[]) => void): number
    on(sigName: "notify::defer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::defer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::defer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::defer", ...args: any[]): void
    connect(sigName: "notify::event", callback: (...args: any[]) => void): number
    on(sigName: "notify::event", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event", ...args: any[]): void
    connect(sigName: "notify::html-for", callback: (...args: any[]) => void): number
    on(sigName: "notify::html-for", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::html-for", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::html-for", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::html-for", ...args: any[]): void
    connect(sigName: "notify::src", callback: (...args: any[]) => void): number
    on(sigName: "notify::src", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::src", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::src", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::src", ...args: any[]): void
    connect(sigName: "notify::text", callback: (...args: any[]) => void): number
    on(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLScriptElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLScriptElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLScriptElement

    constructor(config?: DOMHTMLScriptElement.ConstructorProperties) 
    _init(config?: DOMHTMLScriptElement.ConstructorProperties): void
}

export module DOMHTMLSelectElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLSelectElement

        autofocus?: boolean | null
        disabled?: boolean | null
        length?: number | null
        multiple?: boolean | null
        name?: string | null
        selectedIndex?: number | null
        size?: number | null
        value?: string | null
    }

}

export interface DOMHTMLSelectElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLSelectElement

    autofocus: boolean
    disabled: boolean
    readonly form: DOMHTMLFormElement
    length: number
    multiple: boolean
    name: string | null
    readonly options: DOMHTMLOptionsCollection
    selectedIndex: number
    size: number
    readonly type: string | null
    value: string | null
    readonly willValidate: boolean
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLSelectElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLSelectElement

    add(element: DOMHTMLElement, before: DOMHTMLElement): void
    getAutofocus(): boolean
    getDisabled(): boolean
    getForm(): DOMHTMLFormElement
    getLength(): number
    getMultiple(): boolean
    getName(): string | null
    getOptions(): DOMHTMLOptionsCollection
    getSelectType(): string | null
    getSelectedIndex(): number
    getSize(): number
    getValue(): string | null
    getWillValidate(): boolean
    item(index: number): DOMNode
    namedItem(name: string): DOMNode
    remove(index: number): void

    // Overloads of remove

    remove(): void
    setAutofocus(value: boolean): void
    setDisabled(value: boolean): void
    setLength(value: number): void
    setMultiple(value: boolean): void
    setName(value: string): void
    setSelectedIndex(value: number): void
    setSize(value: number): void
    setValue(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLSelectElement

    connect(sigName: "notify::autofocus", callback: (...args: any[]) => void): number
    on(sigName: "notify::autofocus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::autofocus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::autofocus", ...args: any[]): void
    connect(sigName: "notify::disabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::form", callback: (...args: any[]) => void): number
    on(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::form", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::multiple", callback: (...args: any[]) => void): number
    on(sigName: "notify::multiple", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::multiple", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::multiple", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::multiple", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::options", callback: (...args: any[]) => void): number
    on(sigName: "notify::options", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::options", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::options", ...args: any[]): void
    connect(sigName: "notify::selected-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::selected-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selected-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selected-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selected-index", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::will-validate", callback: (...args: any[]) => void): number
    on(sigName: "notify::will-validate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::will-validate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::will-validate", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLSelectElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLSelectElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLSelectElement

    constructor(config?: DOMHTMLSelectElement.ConstructorProperties) 
    _init(config?: DOMHTMLSelectElement.ConstructorProperties): void
}

export module DOMHTMLStyleElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLStyleElement

        disabled?: boolean | null
        media?: string | null
        type?: string | null
    }

}

export interface DOMHTMLStyleElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLStyleElement

    disabled: boolean
    media: string | null
    readonly sheet: DOMStyleSheet
    type: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLStyleElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLStyleElement

    getDisabled(): boolean
    getMedia(): string | null
    getSheet(): DOMStyleSheet
    getTypeAttr(): string | null
    setDisabled(value: boolean): void
    setMedia(value: string): void
    setTypeAttr(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLStyleElement

    connect(sigName: "notify::disabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::media", callback: (...args: any[]) => void): number
    on(sigName: "notify::media", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::media", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::media", ...args: any[]): void
    connect(sigName: "notify::sheet", callback: (...args: any[]) => void): number
    on(sigName: "notify::sheet", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sheet", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sheet", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLStyleElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLStyleElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLStyleElement

    constructor(config?: DOMHTMLStyleElement.ConstructorProperties) 
    _init(config?: DOMHTMLStyleElement.ConstructorProperties): void
}

export module DOMHTMLTableCaptionElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCaptionElement

        align?: string | null
    }

}

export interface DOMHTMLTableCaptionElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCaptionElement

    align: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCaptionElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCaptionElement

    getAlign(): string | null
    setAlign(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCaptionElement

    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLTableCaptionElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCaptionElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCaptionElement

    constructor(config?: DOMHTMLTableCaptionElement.ConstructorProperties) 
    _init(config?: DOMHTMLTableCaptionElement.ConstructorProperties): void
}

export module DOMHTMLTableCellElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCellElement

        abbr?: string | null
        align?: string | null
        axis?: string | null
        bgColor?: string | null
        ch?: string | null
        chOff?: string | null
        colSpan?: number | null
        headers?: string | null
        height?: string | null
        noWrap?: boolean | null
        rowSpan?: number | null
        scope?: string | null
        vAlign?: string | null
        width?: string | null
    }

}

export interface DOMHTMLTableCellElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCellElement

    abbr: string | null
    align: string | null
    axis: string | null
    bgColor: string | null
    readonly cellIndex: number
    ch: string | null
    chOff: string | null
    colSpan: number
    headers: string | null
    height: string | null
    noWrap: boolean
    rowSpan: number
    scope: string | null
    vAlign: string | null
    width: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCellElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCellElement

    getAbbr(): string | null
    getAlign(): string | null
    getAxis(): string | null
    getBgColor(): string | null
    getCellIndex(): number
    getCh(): string | null
    getChOff(): string | null
    getColSpan(): number
    getHeaders(): string | null
    getHeight(): string | null
    getNoWrap(): boolean
    getRowSpan(): number
    getScope(): string | null
    getVAlign(): string | null
    getWidth(): string | null
    setAbbr(value: string): void
    setAlign(value: string): void
    setAxis(value: string): void
    setBgColor(value: string): void
    setCh(value: string): void
    setChOff(value: string): void
    setColSpan(value: number): void
    setHeaders(value: string): void
    setHeight(value: string): void
    setNoWrap(value: boolean): void
    setRowSpan(value: number): void
    setScope(value: string): void
    setVAlign(value: string): void
    setWidth(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCellElement

    connect(sigName: "notify::abbr", callback: (...args: any[]) => void): number
    on(sigName: "notify::abbr", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::abbr", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::abbr", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::abbr", ...args: any[]): void
    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::axis", callback: (...args: any[]) => void): number
    on(sigName: "notify::axis", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::axis", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::axis", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::axis", ...args: any[]): void
    connect(sigName: "notify::bg-color", callback: (...args: any[]) => void): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bg-color", ...args: any[]): void
    connect(sigName: "notify::cell-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::cell-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cell-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cell-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cell-index", ...args: any[]): void
    connect(sigName: "notify::ch", callback: (...args: any[]) => void): number
    on(sigName: "notify::ch", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ch", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ch", ...args: any[]): void
    connect(sigName: "notify::ch-off", callback: (...args: any[]) => void): number
    on(sigName: "notify::ch-off", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ch-off", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ch-off", ...args: any[]): void
    connect(sigName: "notify::col-span", callback: (...args: any[]) => void): number
    on(sigName: "notify::col-span", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::col-span", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::col-span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::col-span", ...args: any[]): void
    connect(sigName: "notify::headers", callback: (...args: any[]) => void): number
    on(sigName: "notify::headers", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::headers", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::headers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::headers", ...args: any[]): void
    connect(sigName: "notify::height", callback: (...args: any[]) => void): number
    on(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height", ...args: any[]): void
    connect(sigName: "notify::no-wrap", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-wrap", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-wrap", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-wrap", ...args: any[]): void
    connect(sigName: "notify::row-span", callback: (...args: any[]) => void): number
    on(sigName: "notify::row-span", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::row-span", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::row-span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::row-span", ...args: any[]): void
    connect(sigName: "notify::scope", callback: (...args: any[]) => void): number
    on(sigName: "notify::scope", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scope", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scope", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scope", ...args: any[]): void
    connect(sigName: "notify::v-align", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-align", ...args: any[]): void
    connect(sigName: "notify::width", callback: (...args: any[]) => void): number
    on(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLTableCellElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCellElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCellElement

    constructor(config?: DOMHTMLTableCellElement.ConstructorProperties) 
    _init(config?: DOMHTMLTableCellElement.ConstructorProperties): void
}

export module DOMHTMLTableColElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableColElement

        align?: string | null
        ch?: string | null
        chOff?: string | null
        span?: number | null
        vAlign?: string | null
        width?: string | null
    }

}

export interface DOMHTMLTableColElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableColElement

    align: string | null
    ch: string | null
    chOff: string | null
    span: number
    vAlign: string | null
    width: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableColElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableColElement

    getAlign(): string | null
    getCh(): string | null
    getChOff(): string | null
    getSpan(): number
    getVAlign(): string | null
    getWidth(): string | null
    setAlign(value: string): void
    setCh(value: string): void
    setChOff(value: string): void
    setSpan(value: number): void
    setVAlign(value: string): void
    setWidth(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableColElement

    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::ch", callback: (...args: any[]) => void): number
    on(sigName: "notify::ch", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ch", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ch", ...args: any[]): void
    connect(sigName: "notify::ch-off", callback: (...args: any[]) => void): number
    on(sigName: "notify::ch-off", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ch-off", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ch-off", ...args: any[]): void
    connect(sigName: "notify::span", callback: (...args: any[]) => void): number
    on(sigName: "notify::span", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::span", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::span", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::span", ...args: any[]): void
    connect(sigName: "notify::v-align", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-align", ...args: any[]): void
    connect(sigName: "notify::width", callback: (...args: any[]) => void): number
    on(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLTableColElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableColElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableColElement

    constructor(config?: DOMHTMLTableColElement.ConstructorProperties) 
    _init(config?: DOMHTMLTableColElement.ConstructorProperties): void
}

export module DOMHTMLTableElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableElement

        align?: string | null
        bgColor?: string | null
        border?: string | null
        cellPadding?: string | null
        cellSpacing?: string | null
        rules?: string | null
        summary?: string | null
        width?: string | null
    }

}

export interface DOMHTMLTableElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableElement

    align: string | null
    bgColor: string | null
    border: string | null
    readonly caption: DOMHTMLTableCaptionElement
    cellPadding: string | null
    cellSpacing: string | null
    readonly rows: DOMHTMLCollection
    rules: string | null
    summary: string | null
    readonly tBodies: DOMHTMLCollection
    readonly tFoot: DOMHTMLTableSectionElement
    readonly tHead: DOMHTMLTableSectionElement
    width: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableElement

    createCaption(): DOMHTMLElement
    createTFoot(): DOMHTMLElement
    createTHead(): DOMHTMLElement
    deleteCaption(): void
    deleteRow(index: number): void
    deleteTFoot(): void
    deleteTHead(): void
    getAlign(): string | null
    getBgColor(): string | null
    getBorder(): string | null
    getCaption(): DOMHTMLTableCaptionElement
    getCellPadding(): string | null
    getCellSpacing(): string | null
    getRows(): DOMHTMLCollection
    getRules(): string | null
    getSummary(): string | null
    getTBodies(): DOMHTMLCollection
    getTFoot(): DOMHTMLTableSectionElement
    getTHead(): DOMHTMLTableSectionElement
    getWidth(): string | null
    insertRow(index: number): DOMHTMLElement
    setAlign(value: string): void
    setBgColor(value: string): void
    setBorder(value: string): void
    setCaption(value: DOMHTMLTableCaptionElement): void
    setCellPadding(value: string): void
    setCellSpacing(value: string): void
    setRules(value: string): void
    setSummary(value: string): void
    setTFoot(value: DOMHTMLTableSectionElement): void
    setTHead(value: DOMHTMLTableSectionElement): void
    setWidth(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableElement

    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::bg-color", callback: (...args: any[]) => void): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bg-color", ...args: any[]): void
    connect(sigName: "notify::border", callback: (...args: any[]) => void): number
    on(sigName: "notify::border", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border", ...args: any[]): void
    connect(sigName: "notify::caption", callback: (...args: any[]) => void): number
    on(sigName: "notify::caption", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::caption", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::caption", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::caption", ...args: any[]): void
    connect(sigName: "notify::cell-padding", callback: (...args: any[]) => void): number
    on(sigName: "notify::cell-padding", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cell-padding", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cell-padding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cell-padding", ...args: any[]): void
    connect(sigName: "notify::cell-spacing", callback: (...args: any[]) => void): number
    on(sigName: "notify::cell-spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cell-spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cell-spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cell-spacing", ...args: any[]): void
    connect(sigName: "notify::rows", callback: (...args: any[]) => void): number
    on(sigName: "notify::rows", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::rows", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::rows", ...args: any[]): void
    connect(sigName: "notify::rules", callback: (...args: any[]) => void): number
    on(sigName: "notify::rules", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::rules", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::rules", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::rules", ...args: any[]): void
    connect(sigName: "notify::summary", callback: (...args: any[]) => void): number
    on(sigName: "notify::summary", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::summary", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::summary", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::summary", ...args: any[]): void
    connect(sigName: "notify::t-bodies", callback: (...args: any[]) => void): number
    on(sigName: "notify::t-bodies", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::t-bodies", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::t-bodies", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::t-bodies", ...args: any[]): void
    connect(sigName: "notify::t-foot", callback: (...args: any[]) => void): number
    on(sigName: "notify::t-foot", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::t-foot", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::t-foot", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::t-foot", ...args: any[]): void
    connect(sigName: "notify::t-head", callback: (...args: any[]) => void): number
    on(sigName: "notify::t-head", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::t-head", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::t-head", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::t-head", ...args: any[]): void
    connect(sigName: "notify::width", callback: (...args: any[]) => void): number
    on(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLTableElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableElement

    constructor(config?: DOMHTMLTableElement.ConstructorProperties) 
    _init(config?: DOMHTMLTableElement.ConstructorProperties): void
}

export module DOMHTMLTableRowElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableRowElement

        align?: string | null
        bgColor?: string | null
        ch?: string | null
        chOff?: string | null
        vAlign?: string | null
    }

}

export interface DOMHTMLTableRowElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableRowElement

    align: string | null
    bgColor: string | null
    readonly cells: DOMHTMLCollection
    ch: string | null
    chOff: string | null
    readonly rowIndex: number
    readonly sectionRowIndex: number
    vAlign: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableRowElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableRowElement

    deleteCell(index: number): void
    getAlign(): string | null
    getBgColor(): string | null
    getCells(): DOMHTMLCollection
    getCh(): string | null
    getChOff(): string | null
    getRowIndex(): number
    getSectionRowIndex(): number
    getVAlign(): string | null
    insertCell(index: number): DOMHTMLElement
    setAlign(value: string): void
    setBgColor(value: string): void
    setCh(value: string): void
    setChOff(value: string): void
    setVAlign(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableRowElement

    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::bg-color", callback: (...args: any[]) => void): number
    on(sigName: "notify::bg-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bg-color", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bg-color", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bg-color", ...args: any[]): void
    connect(sigName: "notify::cells", callback: (...args: any[]) => void): number
    on(sigName: "notify::cells", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cells", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cells", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cells", ...args: any[]): void
    connect(sigName: "notify::ch", callback: (...args: any[]) => void): number
    on(sigName: "notify::ch", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ch", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ch", ...args: any[]): void
    connect(sigName: "notify::ch-off", callback: (...args: any[]) => void): number
    on(sigName: "notify::ch-off", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ch-off", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ch-off", ...args: any[]): void
    connect(sigName: "notify::row-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::row-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::row-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::row-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::row-index", ...args: any[]): void
    connect(sigName: "notify::section-row-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::section-row-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::section-row-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::section-row-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::section-row-index", ...args: any[]): void
    connect(sigName: "notify::v-align", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-align", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLTableRowElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableRowElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableRowElement

    constructor(config?: DOMHTMLTableRowElement.ConstructorProperties) 
    _init(config?: DOMHTMLTableRowElement.ConstructorProperties): void
}

export module DOMHTMLTableSectionElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableSectionElement

        align?: string | null
        ch?: string | null
        chOff?: string | null
        vAlign?: string | null
    }

}

export interface DOMHTMLTableSectionElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableSectionElement

    align: string | null
    ch: string | null
    chOff: string | null
    readonly rows: DOMHTMLCollection
    vAlign: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableSectionElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableSectionElement

    deleteRow(index: number): void
    getAlign(): string | null
    getCh(): string | null
    getChOff(): string | null
    getRows(): DOMHTMLCollection
    getVAlign(): string | null
    insertRow(index: number): DOMHTMLElement
    setAlign(value: string): void
    setCh(value: string): void
    setChOff(value: string): void
    setVAlign(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableSectionElement

    connect(sigName: "notify::align", callback: (...args: any[]) => void): number
    on(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align", ...args: any[]): void
    connect(sigName: "notify::ch", callback: (...args: any[]) => void): number
    on(sigName: "notify::ch", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ch", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ch", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ch", ...args: any[]): void
    connect(sigName: "notify::ch-off", callback: (...args: any[]) => void): number
    on(sigName: "notify::ch-off", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ch-off", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ch-off", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ch-off", ...args: any[]): void
    connect(sigName: "notify::rows", callback: (...args: any[]) => void): number
    on(sigName: "notify::rows", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::rows", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::rows", ...args: any[]): void
    connect(sigName: "notify::v-align", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-align", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-align", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-align", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLTableSectionElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableSectionElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableSectionElement

    constructor(config?: DOMHTMLTableSectionElement.ConstructorProperties) 
    _init(config?: DOMHTMLTableSectionElement.ConstructorProperties): void
}

export module DOMHTMLTextAreaElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTextAreaElement

        autofocus?: boolean | null
        cols?: number | null
        defaultValue?: string | null
        disabled?: boolean | null
        name?: string | null
        readOnly?: boolean | null
        rows?: number | null
        selectionEnd?: number | null
        selectionStart?: number | null
        value?: string | null
    }

}

export interface DOMHTMLTextAreaElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTextAreaElement

    autofocus: boolean
    cols: number
    defaultValue: string | null
    disabled: boolean
    readonly form: DOMHTMLFormElement
    name: string | null
    readOnly: boolean
    rows: number
    selectionEnd: number
    selectionStart: number
    readonly type: string | null
    value: string | null
    readonly willValidate: boolean
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTextAreaElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTextAreaElement

    getAreaType(): string | null
    getAutofocus(): boolean
    getCols(): number
    getDefaultValue(): string | null
    getDisabled(): boolean
    getForm(): DOMHTMLFormElement
    getName(): string | null
    getReadOnly(): boolean
    getRows(): number
    getSelectionEnd(): number
    getSelectionStart(): number
    getValue(): string | null
    getWillValidate(): boolean
    isEdited(): boolean
    select(): void
    setAutofocus(value: boolean): void
    setCols(value: number): void
    setDefaultValue(value: string): void
    setDisabled(value: boolean): void
    setName(value: string): void
    setReadOnly(value: boolean): void
    setRows(value: number): void
    setSelectionEnd(value: number): void
    setSelectionRange(start: number, end: number, direction: string): void
    setSelectionStart(value: number): void
    setValue(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTextAreaElement

    connect(sigName: "notify::autofocus", callback: (...args: any[]) => void): number
    on(sigName: "notify::autofocus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::autofocus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::autofocus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::autofocus", ...args: any[]): void
    connect(sigName: "notify::cols", callback: (...args: any[]) => void): number
    on(sigName: "notify::cols", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cols", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cols", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cols", ...args: any[]): void
    connect(sigName: "notify::default-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-value", ...args: any[]): void
    connect(sigName: "notify::disabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::form", callback: (...args: any[]) => void): number
    on(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::form", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::rows", callback: (...args: any[]) => void): number
    on(sigName: "notify::rows", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::rows", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::rows", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::rows", ...args: any[]): void
    connect(sigName: "notify::selection-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::selection-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selection-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selection-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selection-end", ...args: any[]): void
    connect(sigName: "notify::selection-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::selection-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selection-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selection-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selection-start", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::will-validate", callback: (...args: any[]) => void): number
    on(sigName: "notify::will-validate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::will-validate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::will-validate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::will-validate", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLTextAreaElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTextAreaElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTextAreaElement

    constructor(config?: DOMHTMLTextAreaElement.ConstructorProperties) 
    _init(config?: DOMHTMLTextAreaElement.ConstructorProperties): void
}

export module DOMHTMLTitleElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTitleElement

        text?: string | null
    }

}

export interface DOMHTMLTitleElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTitleElement

    text: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTitleElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTitleElement

    getText(): string | null
    setText(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTitleElement

    connect(sigName: "notify::text", callback: (...args: any[]) => void): number
    on(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLTitleElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTitleElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTitleElement

    constructor(config?: DOMHTMLTitleElement.ConstructorProperties) 
    _init(config?: DOMHTMLTitleElement.ConstructorProperties): void
}

export module DOMHTMLUListElement {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMHTMLElement.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLUListElement

        compact?: boolean | null
        type?: string | null
    }

}

export interface DOMHTMLUListElement extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLUListElement

    compact: boolean
    type: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLUListElement

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLUListElement

    getCompact(): boolean
    getTypeAttr(): string | null
    setCompact(value: boolean): void
    setTypeAttr(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLUListElement

    connect(sigName: "notify::compact", callback: (...args: any[]) => void): number
    on(sigName: "notify::compact", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compact", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compact", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compact", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::access-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::access-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::access-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::access-key", ...args: any[]): void
    connect(sigName: "notify::content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-editable", ...args: any[]): void
    connect(sigName: "notify::dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dir", ...args: any[]): void
    connect(sigName: "notify::draggable", callback: (...args: any[]) => void): number
    on(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draggable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draggable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draggable", ...args: any[]): void
    connect(sigName: "notify::hidden", callback: (...args: any[]) => void): number
    on(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hidden", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hidden", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hidden", ...args: any[]): void
    connect(sigName: "notify::inner-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-text", ...args: any[]): void
    connect(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-content-editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-content-editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-content-editable", ...args: any[]): void
    connect(sigName: "notify::lang", callback: (...args: any[]) => void): number
    on(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::lang", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::lang", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::lang", ...args: any[]): void
    connect(sigName: "notify::outer-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-text", ...args: any[]): void
    connect(sigName: "notify::spellcheck", callback: (...args: any[]) => void): number
    on(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spellcheck", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spellcheck", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spellcheck", ...args: any[]): void
    connect(sigName: "notify::tab-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-index", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::translate", callback: (...args: any[]) => void): number
    on(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::translate", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::translate", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::translate", ...args: any[]): void
    connect(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkitdropzone", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkitdropzone", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::client-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-height", ...args: any[]): void
    connect(sigName: "notify::client-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-left", ...args: any[]): void
    connect(sigName: "notify::client-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-top", ...args: any[]): void
    connect(sigName: "notify::client-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-width", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::inner-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-html", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::offset-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-height", ...args: any[]): void
    connect(sigName: "notify::offset-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-left", ...args: any[]): void
    connect(sigName: "notify::offset-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-parent", ...args: any[]): void
    connect(sigName: "notify::offset-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-top", ...args: any[]): void
    connect(sigName: "notify::offset-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-width", ...args: any[]): void
    connect(sigName: "notify::outer-html", callback: (...args: any[]) => void): number
    on(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::outer-html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::outer-html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::outer-html", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::scroll-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-height", ...args: any[]): void
    connect(sigName: "notify::scroll-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-left", ...args: any[]): void
    connect(sigName: "notify::scroll-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-top", ...args: any[]): void
    connect(sigName: "notify::scroll-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-width", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): number
    on(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::webkit-region-overset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::webkit-region-overset", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMHTMLUListElement extends DOMHTMLElement {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLUListElement

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLUListElement

    constructor(config?: DOMHTMLUListElement.ConstructorProperties) 
    _init(config?: DOMHTMLUListElement.ConstructorProperties): void
}

export module DOMKeyboardEvent {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMUIEvent.ConstructorProperties {
    }

}

export interface DOMKeyboardEvent {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMKeyboardEvent

    readonly altGraphKey: boolean
    readonly altKey: boolean
    readonly ctrlKey: boolean
    readonly keyIdentifier: string | null
    readonly keyLocation: number
    readonly metaKey: boolean
    readonly shiftKey: boolean
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMKeyboardEvent

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMKeyboardEvent

    getAltGraphKey(): boolean
    getAltKey(): boolean
    getCtrlKey(): boolean
    getKeyIdentifier(): string | null
    getKeyLocation(): number
    getMetaKey(): boolean
    getModifierState(keyIdentifierArg: string): boolean
    getShiftKey(): boolean
    initKeyboardEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, keyIdentifier: string, location: number, ctrlKey: boolean, altKey: boolean, shiftKey: boolean, metaKey: boolean, altGraphKey: boolean): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMKeyboardEvent

    connect(sigName: "notify::alt-graph-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::alt-graph-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::alt-graph-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::alt-graph-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::alt-graph-key", ...args: any[]): void
    connect(sigName: "notify::alt-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::alt-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::alt-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::alt-key", ...args: any[]): void
    connect(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::ctrl-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ctrl-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ctrl-key", ...args: any[]): void
    connect(sigName: "notify::key-identifier", callback: (...args: any[]) => void): number
    on(sigName: "notify::key-identifier", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::key-identifier", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::key-identifier", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::key-identifier", ...args: any[]): void
    connect(sigName: "notify::key-location", callback: (...args: any[]) => void): number
    on(sigName: "notify::key-location", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::key-location", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::key-location", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::key-location", ...args: any[]): void
    connect(sigName: "notify::meta-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::meta-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::meta-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::meta-key", ...args: any[]): void
    connect(sigName: "notify::shift-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::shift-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::shift-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::shift-key", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::char-code", callback: (...args: any[]) => void): number
    on(sigName: "notify::char-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::char-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::char-code", ...args: any[]): void
    connect(sigName: "notify::detail", callback: (...args: any[]) => void): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::detail", ...args: any[]): void
    connect(sigName: "notify::key-code", callback: (...args: any[]) => void): number
    on(sigName: "notify::key-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::key-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::key-code", ...args: any[]): void
    connect(sigName: "notify::layer-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::layer-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::layer-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::layer-x", ...args: any[]): void
    connect(sigName: "notify::layer-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::layer-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::layer-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::layer-y", ...args: any[]): void
    connect(sigName: "notify::page-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::page-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::page-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::page-x", ...args: any[]): void
    connect(sigName: "notify::page-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::page-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::page-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::page-y", ...args: any[]): void
    connect(sigName: "notify::view", callback: (...args: any[]) => void): number
    on(sigName: "notify::view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::view", ...args: any[]): void
    connect(sigName: "notify::bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bubbles", ...args: any[]): void
    connect(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancel-bubble", ...args: any[]): void
    connect(sigName: "notify::cancelable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancelable", ...args: any[]): void
    connect(sigName: "notify::current-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-target", ...args: any[]): void
    connect(sigName: "notify::event-phase", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-phase", ...args: any[]): void
    connect(sigName: "notify::return-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::return-value", ...args: any[]): void
    connect(sigName: "notify::src-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::src-element", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::time-stamp", callback: (...args: any[]) => void): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::time-stamp", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMKeyboardEvent extends DOMUIEvent {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMKeyboardEvent

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMKeyboardEvent

    constructor(config?: DOMKeyboardEvent.ConstructorProperties) 
    _init(config?: DOMKeyboardEvent.ConstructorProperties): void
}

export module DOMMediaList {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMediaList

        mediaText?: string | null
    }

}

export interface DOMMediaList {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMediaList

    readonly length: number
    mediaText: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMediaList

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMediaList

    appendMedium(newMedium: string): void
    deleteMedium(oldMedium: string): void
    getLength(): number
    getMediaText(): string | null
    item(index: number): string | null
    setMediaText(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMediaList

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::media-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::media-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::media-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::media-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::media-text", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMMediaList extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMediaList

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMediaList

    constructor(config?: DOMMediaList.ConstructorProperties) 
    _init(config?: DOMMediaList.ConstructorProperties): void
}

export module DOMMouseEvent {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMUIEvent.ConstructorProperties {
    }

}

export interface DOMMouseEvent {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMouseEvent

    readonly altKey: boolean
    readonly button: number
    readonly clientX: number
    readonly clientY: number
    readonly ctrlKey: boolean
    readonly fromElement: DOMNode
    readonly metaKey: boolean
    readonly offsetX: number
    readonly offsetY: number
    readonly relatedTarget: DOMEventTarget
    readonly screenX: number
    readonly screenY: number
    readonly shiftKey: boolean
    readonly toElement: DOMNode
    readonly x: number
    readonly y: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMouseEvent

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMouseEvent

    getAltKey(): boolean
    getButton(): number
    getClientX(): number
    getClientY(): number
    getCtrlKey(): boolean
    getFromElement(): DOMNode
    getMetaKey(): boolean
    getOffsetX(): number
    getOffsetY(): number
    getRelatedTarget(): DOMEventTarget
    getScreenX(): number
    getScreenY(): number
    getShiftKey(): boolean
    getToElement(): DOMNode
    getX(): number
    getY(): number
    initMouseEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, detail: number, screenX: number, screenY: number, clientX: number, clientY: number, ctrlKey: boolean, altKey: boolean, shiftKey: boolean, metaKey: boolean, button: number, relatedTarget: DOMEventTarget): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMouseEvent

    connect(sigName: "notify::alt-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::alt-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::alt-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::alt-key", ...args: any[]): void
    connect(sigName: "notify::button", callback: (...args: any[]) => void): number
    on(sigName: "notify::button", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::button", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::button", ...args: any[]): void
    connect(sigName: "notify::client-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-x", ...args: any[]): void
    connect(sigName: "notify::client-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-y", ...args: any[]): void
    connect(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::ctrl-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ctrl-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ctrl-key", ...args: any[]): void
    connect(sigName: "notify::from-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::from-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::from-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::from-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::from-element", ...args: any[]): void
    connect(sigName: "notify::meta-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::meta-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::meta-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::meta-key", ...args: any[]): void
    connect(sigName: "notify::offset-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-x", ...args: any[]): void
    connect(sigName: "notify::offset-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-y", ...args: any[]): void
    connect(sigName: "notify::related-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::related-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::related-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::related-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::related-target", ...args: any[]): void
    connect(sigName: "notify::screen-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::screen-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::screen-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::screen-x", ...args: any[]): void
    connect(sigName: "notify::screen-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::screen-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::screen-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::screen-y", ...args: any[]): void
    connect(sigName: "notify::shift-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::shift-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::shift-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::shift-key", ...args: any[]): void
    connect(sigName: "notify::to-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::to-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::to-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::to-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::to-element", ...args: any[]): void
    connect(sigName: "notify::x", callback: (...args: any[]) => void): number
    on(sigName: "notify::x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::x", ...args: any[]): void
    connect(sigName: "notify::y", callback: (...args: any[]) => void): number
    on(sigName: "notify::y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::y", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::char-code", callback: (...args: any[]) => void): number
    on(sigName: "notify::char-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::char-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::char-code", ...args: any[]): void
    connect(sigName: "notify::detail", callback: (...args: any[]) => void): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::detail", ...args: any[]): void
    connect(sigName: "notify::key-code", callback: (...args: any[]) => void): number
    on(sigName: "notify::key-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::key-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::key-code", ...args: any[]): void
    connect(sigName: "notify::layer-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::layer-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::layer-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::layer-x", ...args: any[]): void
    connect(sigName: "notify::layer-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::layer-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::layer-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::layer-y", ...args: any[]): void
    connect(sigName: "notify::page-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::page-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::page-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::page-x", ...args: any[]): void
    connect(sigName: "notify::page-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::page-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::page-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::page-y", ...args: any[]): void
    connect(sigName: "notify::view", callback: (...args: any[]) => void): number
    on(sigName: "notify::view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::view", ...args: any[]): void
    connect(sigName: "notify::bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bubbles", ...args: any[]): void
    connect(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancel-bubble", ...args: any[]): void
    connect(sigName: "notify::cancelable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancelable", ...args: any[]): void
    connect(sigName: "notify::current-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-target", ...args: any[]): void
    connect(sigName: "notify::event-phase", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-phase", ...args: any[]): void
    connect(sigName: "notify::return-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::return-value", ...args: any[]): void
    connect(sigName: "notify::src-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::src-element", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::time-stamp", callback: (...args: any[]) => void): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::time-stamp", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMMouseEvent extends DOMUIEvent {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMouseEvent

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMouseEvent

    constructor(config?: DOMMouseEvent.ConstructorProperties) 
    _init(config?: DOMMouseEvent.ConstructorProperties): void
}

export module DOMNamedNodeMap {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMNamedNodeMap {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNamedNodeMap

    readonly length: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNamedNodeMap

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNamedNodeMap

    getLength(): number
    getNamedItem(name: string): DOMNode
    getNamedItemNs(namespaceURI: string, localName: string): DOMNode
    item(index: number): DOMNode
    removeNamedItem(name: string): DOMNode
    removeNamedItemNs(namespaceURI: string, localName: string): DOMNode
    setNamedItem(node: DOMNode): DOMNode
    setNamedItemNs(node: DOMNode): DOMNode

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNamedNodeMap

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMNamedNodeMap extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNamedNodeMap

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNamedNodeMap

    constructor(config?: DOMNamedNodeMap.ConstructorProperties) 
    _init(config?: DOMNamedNodeMap.ConstructorProperties): void
}

export module DOMNode {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMObject.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode

        nodeValue?: string | null
        textContent?: string | null
    }

}

export interface DOMNode extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode

    readonly baseUri: string | null
    readonly childNodes: DOMNodeList
    readonly firstChild: DOMNode
    readonly lastChild: DOMNode
    readonly nextSibling: DOMNode
    readonly nodeName: string | null
    readonly nodeType: number
    nodeValue: string | null
    readonly ownerDocument: DOMDocument
    readonly parentElement: DOMElement
    readonly parentNode: DOMNode
    readonly previousSibling: DOMNode
    textContent: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode

    appendChild(newChild: DOMNode): DOMNode
    cloneNode(deep: boolean): DOMNode
    cloneNodeWithError(deep: boolean): DOMNode
    compareDocumentPosition(other: DOMNode): number
    contains(other: DOMNode): boolean
    getBaseUri(): string | null
    getChildNodes(): DOMNodeList
    getFirstChild(): DOMNode
    getLastChild(): DOMNode
    getLocalName(): string | null
    getNamespaceUri(): string | null
    getNextSibling(): DOMNode
    getNodeName(): string | null
    getNodeType(): number
    getNodeValue(): string | null
    getOwnerDocument(): DOMDocument
    getParentElement(): DOMElement
    getParentNode(): DOMNode
    getPrefix(): string | null
    getPreviousSibling(): DOMNode
    getTextContent(): string | null
    hasChildNodes(): boolean
    insertBefore(newChild: DOMNode, refChild: DOMNode | null): DOMNode
    isDefaultNamespace(namespaceURI: string): boolean
    isEqualNode(other: DOMNode): boolean
    isSameNode(other: DOMNode): boolean
    isSupported(feature: string, version: string): boolean
    lookupNamespaceUri(prefix: string): string | null
    lookupPrefix(namespaceURI: string): string | null
    normalize(): void
    removeChild(oldChild: DOMNode): DOMNode
    replaceChild(newChild: DOMNode, oldChild: DOMNode): DOMNode
    setNodeValue(value: string): void
    setPrefix(value: string): void
    setTextContent(value: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode

    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMNode extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNode

    constructor(config?: DOMNode.ConstructorProperties) 
    _init(config?: DOMNode.ConstructorProperties): void
    /**
     * Get the #WebKitDOMNode for the DOM node referenced by `value`.
     * @param value a #JSCValue
     * @returns a #WebKitDOMNode, or %NULL if @value doesn't reference a DOM node.
     */
    static forJsValue(value: JavaScriptCore.Value): DOMNode
}

export module DOMNodeIterator {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMNodeIterator {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeIterator

    readonly filter: DOMNodeFilter
    readonly pointerBeforeReferenceNode: boolean
    readonly referenceNode: DOMNode
    readonly root: DOMNode
    readonly whatToShow: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeIterator

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeIterator

    detach(): void
    /**
     * This function has been removed from the DOM spec and it just returns %FALSE.
     * @returns A #gboolean                                                                                                                                                                       *
     */
    getExpandEntityReferences(): boolean
    getFilter(): DOMNodeFilter
    getPointerBeforeReferenceNode(): boolean
    getReferenceNode(): DOMNode
    getRoot(): DOMNode
    getWhatToShow(): number
    nextNode(): DOMNode
    previousNode(): DOMNode

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeIterator

    connect(sigName: "notify::filter", callback: (...args: any[]) => void): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::filter", ...args: any[]): void
    connect(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pointer-before-reference-node", ...args: any[]): void
    connect(sigName: "notify::reference-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::reference-node", ...args: any[]): void
    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::what-to-show", callback: (...args: any[]) => void): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::what-to-show", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMNodeIterator extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeIterator

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeIterator

    constructor(config?: DOMNodeIterator.ConstructorProperties) 
    _init(config?: DOMNodeIterator.ConstructorProperties): void
}

export module DOMNodeList {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMNodeList {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeList

    readonly length: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeList

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeList

    getLength(): number
    item(index: number): DOMNode

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeList

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMNodeList extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeList

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeList

    constructor(config?: DOMNodeList.ConstructorProperties) 
    _init(config?: DOMNodeList.ConstructorProperties): void
}

export module DOMObject {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject

        coreObject?: any | null
    }

}

export interface DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject

    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject

    parentInstance: GObject.Object
    coreObject: any

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMObject extends GObject.Object {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObject

    constructor(config?: DOMObject.ConstructorProperties) 
    _init(config?: DOMObject.ConstructorProperties): void
}

export module DOMProcessingInstruction {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMCharacterData.ConstructorProperties {
    }

}

export interface DOMProcessingInstruction extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMProcessingInstruction

    readonly sheet: DOMStyleSheet
    readonly target: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMProcessingInstruction

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMProcessingInstruction

    getSheet(): DOMStyleSheet
    getTarget(): string | null

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMProcessingInstruction

    connect(sigName: "notify::sheet", callback: (...args: any[]) => void): number
    on(sigName: "notify::sheet", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sheet", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sheet", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMProcessingInstruction extends DOMCharacterData {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMProcessingInstruction

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMProcessingInstruction

    constructor(config?: DOMProcessingInstruction.ConstructorProperties) 
    _init(config?: DOMProcessingInstruction.ConstructorProperties): void
}

export module DOMRange {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMRange {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMRange

    readonly collapsed: boolean
    readonly commonAncestorContainer: DOMNode
    readonly endContainer: DOMNode
    readonly endOffset: number
    readonly startContainer: DOMNode
    readonly startOffset: number
    readonly text: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMRange

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMRange

    cloneContents(): DOMDocumentFragment
    cloneRange(): DOMRange
    collapse(toStart: boolean): void
    compareBoundaryPoints(how: number, sourceRange: DOMRange): number
    compareNode(refNode: DOMNode): number
    comparePoint(refNode: DOMNode, offset: number): number
    createContextualFragment(html: string): DOMDocumentFragment
    deleteContents(): void
    detach(): void
    expand(unit: string): void
    extractContents(): DOMDocumentFragment
    getCollapsed(): boolean
    getCommonAncestorContainer(): DOMNode
    getEndContainer(): DOMNode
    getEndOffset(): number
    getStartContainer(): DOMNode
    getStartOffset(): number
    getText(): string | null
    insertNode(newNode: DOMNode): void
    intersectsNode(refNode: DOMNode): boolean
    isPointInRange(refNode: DOMNode, offset: number): boolean
    selectNode(refNode: DOMNode): void
    selectNodeContents(refNode: DOMNode): void
    setEnd(refNode: DOMNode, offset: number): void
    setEndAfter(refNode: DOMNode): void
    setEndBefore(refNode: DOMNode): void
    setStart(refNode: DOMNode, offset: number): void
    setStartAfter(refNode: DOMNode): void
    setStartBefore(refNode: DOMNode): void
    surroundContents(newParent: DOMNode): void
    toString(): string | null

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMRange

    connect(sigName: "notify::collapsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::collapsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::collapsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::collapsed", ...args: any[]): void
    connect(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): number
    on(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::common-ancestor-container", ...args: any[]): void
    connect(sigName: "notify::end-container", callback: (...args: any[]) => void): number
    on(sigName: "notify::end-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::end-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::end-container", ...args: any[]): void
    connect(sigName: "notify::end-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::end-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::end-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::end-offset", ...args: any[]): void
    connect(sigName: "notify::start-container", callback: (...args: any[]) => void): number
    on(sigName: "notify::start-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::start-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::start-container", ...args: any[]): void
    connect(sigName: "notify::start-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::start-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::start-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::start-offset", ...args: any[]): void
    connect(sigName: "notify::text", callback: (...args: any[]) => void): number
    on(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMRange extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMRange

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMRange

    constructor(config?: DOMRange.ConstructorProperties) 
    _init(config?: DOMRange.ConstructorProperties): void
}

export module DOMStyleSheet {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheet

        disabled?: boolean | null
    }

}

export interface DOMStyleSheet {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheet

    disabled: boolean
    readonly href: string | null
    readonly media: DOMMediaList
    readonly ownerNode: DOMNode
    readonly parentStyleSheet: DOMStyleSheet
    readonly title: string | null
    readonly type: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheet

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheet

    getContentType(): string | null
    getDisabled(): boolean
    getHref(): string | null
    getMedia(): DOMMediaList
    getOwnerNode(): DOMNode
    getParentStyleSheet(): DOMStyleSheet
    getTitle(): string | null
    setDisabled(value: boolean): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheet

    connect(sigName: "notify::disabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::href", callback: (...args: any[]) => void): number
    on(sigName: "notify::href", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::href", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::href", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::href", ...args: any[]): void
    connect(sigName: "notify::media", callback: (...args: any[]) => void): number
    on(sigName: "notify::media", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::media", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::media", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::media", ...args: any[]): void
    connect(sigName: "notify::owner-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-node", ...args: any[]): void
    connect(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-style-sheet", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-style-sheet", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMStyleSheet extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheet

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheet

    constructor(config?: DOMStyleSheet.ConstructorProperties) 
    _init(config?: DOMStyleSheet.ConstructorProperties): void
}

export module DOMStyleSheetList {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMStyleSheetList {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheetList

    readonly length: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheetList

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheetList

    getLength(): number
    item(index: number): DOMStyleSheet

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheetList

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMStyleSheetList extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheetList

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheetList

    constructor(config?: DOMStyleSheetList.ConstructorProperties) 
    _init(config?: DOMStyleSheetList.ConstructorProperties): void
}

export module DOMText {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEventTarget.ConstructorProperties, DOMCharacterData.ConstructorProperties {
    }

}

export interface DOMText extends DOMEventTarget {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMText

    readonly wholeText: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMText

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMText

    getWholeText(): string | null
    replaceWholeText(content: string): DOMText
    splitText(offset: number): DOMText

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMText

    connect(sigName: "notify::whole-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::whole-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::whole-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::whole-text", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMText extends DOMCharacterData {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMText

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMText

    constructor(config?: DOMText.ConstructorProperties) 
    _init(config?: DOMText.ConstructorProperties): void
}

export module DOMTreeWalker {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMTreeWalker {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMTreeWalker

    readonly currentNode: DOMNode
    readonly filter: DOMNodeFilter
    readonly root: DOMNode
    readonly whatToShow: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMTreeWalker

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMTreeWalker

    firstChild(): DOMNode
    getCurrentNode(): DOMNode
    /**
     * This function has been removed from the DOM spec and it just returns %FALSE.
     * @returns A #gboolean
     */
    getExpandEntityReferences(): boolean
    getFilter(): DOMNodeFilter
    getRoot(): DOMNode
    getWhatToShow(): number
    lastChild(): DOMNode
    nextNode(): DOMNode
    nextSibling(): DOMNode
    parentNode(): DOMNode
    previousNode(): DOMNode
    previousSibling(): DOMNode
    setCurrentNode(value: DOMNode): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMTreeWalker

    connect(sigName: "notify::current-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-node", ...args: any[]): void
    connect(sigName: "notify::filter", callback: (...args: any[]) => void): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::filter", ...args: any[]): void
    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::what-to-show", callback: (...args: any[]) => void): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::what-to-show", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMTreeWalker extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMTreeWalker

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMTreeWalker

    constructor(config?: DOMTreeWalker.ConstructorProperties) 
    _init(config?: DOMTreeWalker.ConstructorProperties): void
}

export module DOMUIEvent {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMEvent.ConstructorProperties {
    }

}

export interface DOMUIEvent {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent

    readonly charCode: number
    readonly detail: number
    readonly keyCode: number
    readonly layerX: number
    readonly layerY: number
    readonly pageX: number
    readonly pageY: number
    readonly view: DOMDOMWindow
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent

    getCharCode(): number
    getDetail(): number
    getKeyCode(): number
    getLayerX(): number
    getLayerY(): number
    getPageX(): number
    getPageY(): number
    getView(): DOMDOMWindow
    initUiEvent(type: string, canBubble: boolean, cancelable: boolean, view: DOMDOMWindow, detail: number): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent

    connect(sigName: "notify::char-code", callback: (...args: any[]) => void): number
    on(sigName: "notify::char-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::char-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::char-code", ...args: any[]): void
    connect(sigName: "notify::detail", callback: (...args: any[]) => void): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::detail", ...args: any[]): void
    connect(sigName: "notify::key-code", callback: (...args: any[]) => void): number
    on(sigName: "notify::key-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::key-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::key-code", ...args: any[]): void
    connect(sigName: "notify::layer-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::layer-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::layer-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::layer-x", ...args: any[]): void
    connect(sigName: "notify::layer-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::layer-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::layer-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::layer-y", ...args: any[]): void
    connect(sigName: "notify::page-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::page-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::page-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::page-x", ...args: any[]): void
    connect(sigName: "notify::page-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::page-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::page-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::page-y", ...args: any[]): void
    connect(sigName: "notify::view", callback: (...args: any[]) => void): number
    on(sigName: "notify::view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::view", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bubbles", ...args: any[]): void
    connect(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancel-bubble", ...args: any[]): void
    connect(sigName: "notify::cancelable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancelable", ...args: any[]): void
    connect(sigName: "notify::current-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-target", ...args: any[]): void
    connect(sigName: "notify::event-phase", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-phase", ...args: any[]): void
    connect(sigName: "notify::return-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::return-value", ...args: any[]): void
    connect(sigName: "notify::src-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::src-element", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::time-stamp", callback: (...args: any[]) => void): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::time-stamp", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMUIEvent extends DOMEvent {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEvent

    constructor(config?: DOMUIEvent.ConstructorProperties) 
    _init(config?: DOMUIEvent.ConstructorProperties): void
}

export module DOMWheelEvent {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMMouseEvent.ConstructorProperties {
    }

}

export interface DOMWheelEvent {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMWheelEvent

    readonly wheelDelta: number
    readonly wheelDeltaX: number
    readonly wheelDeltaY: number
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMWheelEvent

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMWheelEvent

    getWheelDelta(): number
    getWheelDeltaX(): number
    getWheelDeltaY(): number
    initWheelEvent(wheelDeltaX: number, wheelDeltaY: number, view: DOMDOMWindow, screenX: number, screenY: number, clientX: number, clientY: number, ctrlKey: boolean, altKey: boolean, shiftKey: boolean, metaKey: boolean): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMWheelEvent

    connect(sigName: "notify::wheel-delta", callback: (...args: any[]) => void): number
    on(sigName: "notify::wheel-delta", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::wheel-delta", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::wheel-delta", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::wheel-delta", ...args: any[]): void
    connect(sigName: "notify::wheel-delta-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::wheel-delta-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::wheel-delta-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::wheel-delta-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::wheel-delta-x", ...args: any[]): void
    connect(sigName: "notify::wheel-delta-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::wheel-delta-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::wheel-delta-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::wheel-delta-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::wheel-delta-y", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::alt-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::alt-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::alt-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::alt-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::alt-key", ...args: any[]): void
    connect(sigName: "notify::button", callback: (...args: any[]) => void): number
    on(sigName: "notify::button", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::button", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::button", ...args: any[]): void
    connect(sigName: "notify::client-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-x", ...args: any[]): void
    connect(sigName: "notify::client-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-y", ...args: any[]): void
    connect(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::ctrl-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ctrl-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ctrl-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ctrl-key", ...args: any[]): void
    connect(sigName: "notify::from-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::from-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::from-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::from-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::from-element", ...args: any[]): void
    connect(sigName: "notify::meta-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::meta-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::meta-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::meta-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::meta-key", ...args: any[]): void
    connect(sigName: "notify::offset-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-x", ...args: any[]): void
    connect(sigName: "notify::offset-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::offset-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::offset-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::offset-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::offset-y", ...args: any[]): void
    connect(sigName: "notify::related-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::related-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::related-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::related-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::related-target", ...args: any[]): void
    connect(sigName: "notify::screen-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::screen-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::screen-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::screen-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::screen-x", ...args: any[]): void
    connect(sigName: "notify::screen-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::screen-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::screen-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::screen-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::screen-y", ...args: any[]): void
    connect(sigName: "notify::shift-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::shift-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::shift-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::shift-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::shift-key", ...args: any[]): void
    connect(sigName: "notify::to-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::to-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::to-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::to-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::to-element", ...args: any[]): void
    connect(sigName: "notify::x", callback: (...args: any[]) => void): number
    on(sigName: "notify::x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::x", ...args: any[]): void
    connect(sigName: "notify::y", callback: (...args: any[]) => void): number
    on(sigName: "notify::y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::y", ...args: any[]): void
    connect(sigName: "notify::char-code", callback: (...args: any[]) => void): number
    on(sigName: "notify::char-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::char-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::char-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::char-code", ...args: any[]): void
    connect(sigName: "notify::detail", callback: (...args: any[]) => void): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::detail", ...args: any[]): void
    connect(sigName: "notify::key-code", callback: (...args: any[]) => void): number
    on(sigName: "notify::key-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::key-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::key-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::key-code", ...args: any[]): void
    connect(sigName: "notify::layer-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::layer-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::layer-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::layer-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::layer-x", ...args: any[]): void
    connect(sigName: "notify::layer-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::layer-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::layer-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::layer-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::layer-y", ...args: any[]): void
    connect(sigName: "notify::page-x", callback: (...args: any[]) => void): number
    on(sigName: "notify::page-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::page-x", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::page-x", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::page-x", ...args: any[]): void
    connect(sigName: "notify::page-y", callback: (...args: any[]) => void): number
    on(sigName: "notify::page-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::page-y", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::page-y", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::page-y", ...args: any[]): void
    connect(sigName: "notify::view", callback: (...args: any[]) => void): number
    on(sigName: "notify::view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::view", ...args: any[]): void
    connect(sigName: "notify::bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bubbles", ...args: any[]): void
    connect(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancel-bubble", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancel-bubble", ...args: any[]): void
    connect(sigName: "notify::cancelable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancelable", ...args: any[]): void
    connect(sigName: "notify::current-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-target", ...args: any[]): void
    connect(sigName: "notify::event-phase", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-phase", ...args: any[]): void
    connect(sigName: "notify::return-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::return-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::return-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::return-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::return-value", ...args: any[]): void
    connect(sigName: "notify::src-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::src-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::src-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::src-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::src-element", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::time-stamp", callback: (...args: any[]) => void): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::time-stamp", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMWheelEvent extends DOMMouseEvent {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMWheelEvent

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMWheelEvent

    constructor(config?: DOMWheelEvent.ConstructorProperties) 
    _init(config?: DOMWheelEvent.ConstructorProperties): void
}

export module DOMXPathExpression {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMXPathExpression {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathExpression

    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathExpression

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathExpression

    evaluate(contextNode: DOMNode, type: number, inResult: DOMXPathResult): DOMXPathResult

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathExpression

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMXPathExpression extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathExpression

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathExpression

    constructor(config?: DOMXPathExpression.ConstructorProperties) 
    _init(config?: DOMXPathExpression.ConstructorProperties): void
}

export module DOMXPathResult {

    // Constructor properties interface

    export interface ConstructorProperties extends DOMObject.ConstructorProperties {
    }

}

export interface DOMXPathResult {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathResult

    readonly booleanValue: boolean
    readonly invalidIteratorState: boolean
    readonly numberValue: number
    readonly resultType: number
    readonly singleNodeValue: DOMNode
    readonly snapshotLength: number
    readonly stringValue: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathResult

    parentInstance: any

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathResult

    getBooleanValue(): boolean
    getInvalidIteratorState(): boolean
    getNumberValue(): number
    getResultType(): number
    getSingleNodeValue(): DOMNode
    getSnapshotLength(): number
    getStringValue(): string | null
    iterateNext(): DOMNode
    snapshotItem(index: number): DOMNode

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathResult

    connect(sigName: "notify::boolean-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::boolean-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::boolean-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::boolean-value", ...args: any[]): void
    connect(sigName: "notify::invalid-iterator-state", callback: (...args: any[]) => void): number
    on(sigName: "notify::invalid-iterator-state", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::invalid-iterator-state", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::invalid-iterator-state", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::invalid-iterator-state", ...args: any[]): void
    connect(sigName: "notify::number-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::number-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::number-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::number-value", ...args: any[]): void
    connect(sigName: "notify::result-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::result-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::result-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::result-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::result-type", ...args: any[]): void
    connect(sigName: "notify::single-node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::single-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::single-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::single-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::single-node-value", ...args: any[]): void
    connect(sigName: "notify::snapshot-length", callback: (...args: any[]) => void): number
    on(sigName: "notify::snapshot-length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::snapshot-length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::snapshot-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::snapshot-length", ...args: any[]): void
    connect(sigName: "notify::string-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::string-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::string-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::string-value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class DOMXPathResult extends DOMObject {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathResult

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathResult

    constructor(config?: DOMXPathResult.ConstructorProperties) 
    _init(config?: DOMXPathResult.ConstructorProperties): void
}

export module Frame {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface Frame {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.Frame

    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.Frame

    parent: GObject.Object

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.Frame

    /**
     * Gets the process-unique identifier of this #WebKitFrame. No other
     * frame in the same web process will have the same ID; however, frames
     * in other web processes may.
     * @returns the identifier of @frame
     */
    getId(): number
    /**
     * Get the JavaScript execution context of `frame`. Use this function to bridge
     * between the WebKit and JavaScriptCore APIs.
     * @returns the #JSCContext for the JavaScript execution context of @frame.
     */
    getJsContext(): JavaScriptCore.Context
    /**
     * Get the JavaScript execution context of `frame` for the given #WebKitScriptWorld.
     * @param world a #WebKitScriptWorld
     * @returns the #JSCContext for the JavaScript execution context of @frame for @world.
     */
    getJsContextForScriptWorld(world: ScriptWorld): JavaScriptCore.Context
    /**
     * Get a #JSCValue referencing the given DOM object. The value is created in the JavaScript execution
     * context of `frame`.
     * @param domObject a #WebKitDOMObject
     * @returns the #JSCValue referencing @dom_object.
     */
    getJsValueForDomObject(domObject: DOMObject): JavaScriptCore.Value
    /**
     * Get a #JSCValue referencing the given DOM object. The value is created in the JavaScript execution
     * context of `frame` for the given #WebKitScriptWorld.
     * @param domObject a #WebKitDOMObject
     * @param world a #WebKitScriptWorld
     * @returns the #JSCValue referencing @dom_object
     */
    getJsValueForDomObjectInScriptWorld(domObject: DOMObject, world: ScriptWorld): JavaScriptCore.Value
    /**
     * Gets the current active URI of `frame`.
     * @returns the current active URI of @frame or %NULL if nothing has been    loaded yet.
     */
    getUri(): string
    /**
     * Gets whether `frame` is the main frame of a #WebKitWebPage
     * @returns %TRUE if @frame is a main frame or %FALSE otherwise
     */
    isMainFrame(): boolean

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.Frame

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

/**
 * A web page frame.
 * 
 * Each `WebKitWebPage` has at least one main frame, and can have any number
 * of subframes.
 * @class 
 */
export class Frame extends GObject.Object {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.Frame

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.Frame

    constructor(config?: Frame.ConstructorProperties) 
    _init(config?: Frame.ConstructorProperties): void
}

export module HitTestResult {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.HitTestResult

        /**
         * Bitmask of #WebKitHitTestResultContext flags representing
         * the context of the #WebKitHitTestResult.
         */
        context?: number | null
        /**
         * The URI of the image if flag %WEBKIT_HIT_TEST_RESULT_CONTEXT_IMAGE
         * is present in #WebKitHitTestResult:context
         */
        imageUri?: string | null
        /**
         * The label of the link if flag %WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK
         * is present in #WebKitHitTestResult:context
         */
        linkLabel?: string | null
        /**
         * The title of the link if flag %WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK
         * is present in #WebKitHitTestResult:context
         */
        linkTitle?: string | null
        /**
         * The URI of the link if flag %WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK
         * is present in #WebKitHitTestResult:context
         */
        linkUri?: string | null
        /**
         * The URI of the media if flag %WEBKIT_HIT_TEST_RESULT_CONTEXT_MEDIA
         * is present in #WebKitHitTestResult:context
         */
        mediaUri?: string | null
    }

}

export interface HitTestResult {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.HitTestResult

    /**
     * Bitmask of #WebKitHitTestResultContext flags representing
     * the context of the #WebKitHitTestResult.
     */
    readonly context: number
    /**
     * The URI of the image if flag %WEBKIT_HIT_TEST_RESULT_CONTEXT_IMAGE
     * is present in #WebKitHitTestResult:context
     */
    readonly imageUri: string | null
    /**
     * The label of the link if flag %WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK
     * is present in #WebKitHitTestResult:context
     */
    readonly linkLabel: string | null
    /**
     * The title of the link if flag %WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK
     * is present in #WebKitHitTestResult:context
     */
    readonly linkTitle: string | null
    /**
     * The URI of the link if flag %WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK
     * is present in #WebKitHitTestResult:context
     */
    readonly linkUri: string | null
    /**
     * The URI of the media if flag %WEBKIT_HIT_TEST_RESULT_CONTEXT_MEDIA
     * is present in #WebKitHitTestResult:context
     */
    readonly mediaUri: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.HitTestResult

    parent: GObject.Object

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.HitTestResult

    /**
     * Gets whether %WEBKIT_HIT_TEST_RESULT_CONTEXT_EDITABLE flag is present in
     * #WebKitHitTestResult:context.
     * @returns %TRUE if there's an editable element at the coordinates of the @hit_test_result,    or %FALSE otherwise
     */
    contextIsEditable(): boolean
    /**
     * Gets whether %WEBKIT_HIT_TEST_RESULT_CONTEXT_IMAGE flag is present in
     * #WebKitHitTestResult:context.
     * @returns %TRUE if there's an image element in the coordinates of the Hit Test,    or %FALSE otherwise
     */
    contextIsImage(): boolean
    /**
     * Gets whether %WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK flag is present in
     * #WebKitHitTestResult:context.
     * @returns %TRUE if there's a link element in the coordinates of the Hit Test,    or %FALSE otherwise
     */
    contextIsLink(): boolean
    /**
     * Gets whether %WEBKIT_HIT_TEST_RESULT_CONTEXT_MEDIA flag is present in
     * #WebKitHitTestResult:context.
     * @returns %TRUE if there's a media element in the coordinates of the Hit Test,    or %FALSE otherwise
     */
    contextIsMedia(): boolean
    /**
     * Gets whether %WEBKIT_HIT_TEST_RESULT_CONTEXT_SCROLLBAR flag is present in
     * #WebKitHitTestResult:context.
     * @returns %TRUE if there's a scrollbar element at the coordinates of the @hit_test_result,    or %FALSE otherwise
     */
    contextIsScrollbar(): boolean
    /**
     * Gets whether %WEBKIT_HIT_TEST_RESULT_CONTEXT_SELECTION flag is present in
     * #WebKitHitTestResult:context.
     * @returns %TRUE if there's a selected element at the coordinates of the @hit_test_result,    or %FALSE otherwise
     */
    contextIsSelection(): boolean
    /**
     * Gets the value of the #WebKitHitTestResult:context property.
     * @returns a bitmask of #WebKitHitTestResultContext flags
     */
    getContext(): number
    /**
     * Gets the value of the #WebKitHitTestResult:image-uri property.
     * @returns the URI of the image element in the coordinates of the Hit Test,    or %NULL if there isn't an image element in @hit_test_result context
     */
    getImageUri(): string
    /**
     * Gets the value of the #WebKitHitTestResult:link-label property.
     * @returns the label of the link element in the coordinates of the Hit Test,    or %NULL if there isn't a link element in @hit_test_result context or the    link element doesn't have a label
     */
    getLinkLabel(): string
    /**
     * Gets the value of the #WebKitHitTestResult:link-title property.
     * @returns the title of the link element in the coordinates of the Hit Test,    or %NULL if there isn't a link element in @hit_test_result context or the    link element doesn't have a title
     */
    getLinkTitle(): string
    /**
     * Gets the value of the #WebKitHitTestResult:link-uri property.
     * @returns the URI of the link element in the coordinates of the Hit Test,    or %NULL if there isn't a link element in @hit_test_result context
     */
    getLinkUri(): string
    /**
     * Gets the value of the #WebKitHitTestResult:media-uri property.
     * @returns the URI of the media element in the coordinates of the Hit Test,    or %NULL if there isn't a media element in @hit_test_result context
     */
    getMediaUri(): string

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.HitTestResult

    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::image-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::image-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::image-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::image-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::image-uri", ...args: any[]): void
    connect(sigName: "notify::link-label", callback: (...args: any[]) => void): number
    on(sigName: "notify::link-label", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::link-label", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::link-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::link-label", ...args: any[]): void
    connect(sigName: "notify::link-title", callback: (...args: any[]) => void): number
    on(sigName: "notify::link-title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::link-title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::link-title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::link-title", ...args: any[]): void
    connect(sigName: "notify::link-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::link-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::link-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::link-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::link-uri", ...args: any[]): void
    connect(sigName: "notify::media-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::media-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::media-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::media-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::media-uri", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

/**
 * Result of a Hit Test.
 * 
 * A Hit Test is an operation to get context information about a given
 * point in a #WebKitWebView. #WebKitHitTestResult represents the
 * result of a Hit Test. It provides context information about what is
 * at the coordinates of the Hit Test, such as if there's a link,
 * an image or a media.
 * 
 * You can get the context of the HitTestResult with
 * webkit_hit_test_result_get_context() that returns a bitmask of
 * #WebKitHitTestResultContext flags. You can also use
 * webkit_hit_test_result_context_is_link(), webkit_hit_test_result_context_is_image() and
 * webkit_hit_test_result_context_is_media() to determine whether there's
 * a link, image or a media element at the coordinates of the Hit Test.
 * Note that it's possible that several #WebKitHitTestResultContext flags
 * are active at the same time, for example if there's a link containing an image.
 * 
 * When the mouse is moved over a #WebKitWebView a Hit Test is performed
 * for the mouse coordinates and #WebKitWebView::mouse-target-changed
 * signal is emitted with a #WebKitHitTestResult.
 * @class 
 */
export class HitTestResult extends GObject.Object {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.HitTestResult

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.HitTestResult

    constructor(config?: HitTestResult.ConstructorProperties) 
    _init(config?: HitTestResult.ConstructorProperties): void
}

export module ScriptWorld {

    // Signal callback interfaces

    /**
     * Signal callback interface for `window-object-cleared`
     */
    export interface WindowObjectClearedSignalCallback {
        (page: WebPage, frame: Frame): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface ScriptWorld {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.ScriptWorld

    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.ScriptWorld

    parent: GObject.Object
    priv: ScriptWorldPrivate

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.ScriptWorld

    /**
     * Get the name of a #WebKitScriptWorld.
     * @returns the name of @world
     */
    getName(): string

    // Own signals of WebKit2WebExtension-5.0.WebKit2WebExtension.ScriptWorld

    connect(sigName: "window-object-cleared", callback: ScriptWorld.WindowObjectClearedSignalCallback): number
    on(sigName: "window-object-cleared", callback: ScriptWorld.WindowObjectClearedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "window-object-cleared", callback: ScriptWorld.WindowObjectClearedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "window-object-cleared", callback: ScriptWorld.WindowObjectClearedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "window-object-cleared", frame: Frame, ...args: any[]): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.ScriptWorld

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

export class ScriptWorld extends GObject.Object {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.ScriptWorld

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.ScriptWorld

    constructor(config?: ScriptWorld.ConstructorProperties) 
    /**
     * Creates a new isolated #WebKitScriptWorld. Scripts executed in
     * isolated worlds have access to the DOM but not to other variable
     * or functions created by the page.
     * The #WebKitScriptWorld is created with a generated unique name. Use
     * webkit_script_world_new_with_name() if you want to create it with a
     * custom name.
     * You can get the JavaScript execution context of a #WebKitScriptWorld
     * for a given #WebKitFrame with webkit_frame_get_javascript_context_for_script_world().
     * @constructor 
     * @returns a new isolated #WebKitScriptWorld
     */
    constructor() 
    /**
     * Creates a new isolated #WebKitScriptWorld. Scripts executed in
     * isolated worlds have access to the DOM but not to other variable
     * or functions created by the page.
     * The #WebKitScriptWorld is created with a generated unique name. Use
     * webkit_script_world_new_with_name() if you want to create it with a
     * custom name.
     * You can get the JavaScript execution context of a #WebKitScriptWorld
     * for a given #WebKitFrame with webkit_frame_get_javascript_context_for_script_world().
     * @constructor 
     * @returns a new isolated #WebKitScriptWorld
     */
    static new(): ScriptWorld
    /**
     * Creates a new isolated #WebKitScriptWorld with a name. Scripts executed in
     * isolated worlds have access to the DOM but not to other variable
     * or functions created by the page.
     * You can get the JavaScript execution context of a #WebKitScriptWorld
     * for a given #WebKitFrame with webkit_frame_get_javascript_context_for_script_world().
     * @constructor 
     * @param name a name for the script world
     * @returns a new isolated #WebKitScriptWorld
     */
    static newWithName(name: string): ScriptWorld
    _init(config?: ScriptWorld.ConstructorProperties): void
    /**
     * Get the default #WebKitScriptWorld. This is the normal script world
     * where all scripts are executed by default.
     * You can get the JavaScript execution context of a #WebKitScriptWorld
     * for a given #WebKitFrame with webkit_frame_get_javascript_context_for_script_world().
     * @returns the default #WebKitScriptWorld
     */
    static getDefault(): ScriptWorld
}

export module URIRequest {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.URIRequest

        /**
         * The URI to which the request will be made.
         */
        uri?: string | null
    }

}

export interface URIRequest {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.URIRequest

    /**
     * The URI to which the request will be made.
     */
    uri: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.URIRequest

    parent: GObject.Object

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.URIRequest

    /**
     * Get the HTTP headers of a #WebKitURIRequest as a #SoupMessageHeaders.
     * @returns a #SoupMessageHeaders with the HTTP headers of @request    or %NULL if @request is not an HTTP request.
     */
    getHttpHeaders(): Soup.MessageHeaders
    /**
     * Get the HTTP method of the #WebKitURIRequest.
     * @returns the HTTP method of the #WebKitURIRequest or %NULL if @request is not    an HTTP request.
     */
    getHttpMethod(): string
    /**
     * Obtains the request URI.
     * @returns request URI, as a string.
     */
    getUri(): string
    /**
     * Set the URI of `request`
     * @param uri an URI
     */
    setUri(uri: string): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.URIRequest

    connect(sigName: "notify::uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::uri", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

/**
 * Represents a URI request.
 * 
 * A #WebKitURIRequest can be created with a URI using the
 * webkit_uri_request_new() method, and you can get the URI of an
 * existing request with the webkit_uri_request_get_uri() one.
 * @class 
 */
export class URIRequest extends GObject.Object {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.URIRequest

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.URIRequest

    constructor(config?: URIRequest.ConstructorProperties) 
    /**
     * Creates a new #WebKitURIRequest for the given URI.
     * @constructor 
     * @param uri an URI
     * @returns a new #WebKitURIRequest
     */
    constructor(uri: string) 
    /**
     * Creates a new #WebKitURIRequest for the given URI.
     * @constructor 
     * @param uri an URI
     * @returns a new #WebKitURIRequest
     */
    static new(uri: string): URIRequest
    _init(config?: URIRequest.ConstructorProperties): void
}

export module URIResponse {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface URIResponse {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.URIResponse

    /**
     * The expected content length of the response.
     */
    readonly contentLength: number
    /**
     * The HTTP headers of the response, or %NULL if the response is not an HTTP response.
     */
    readonly httpHeaders: Soup.MessageHeaders
    /**
     * The MIME type of the response.
     */
    readonly mimeType: string | null
    /**
     * The status code of the response as returned by the server.
     */
    readonly statusCode: number
    /**
     * The suggested filename for the URI response.
     */
    readonly suggestedFilename: string | null
    /**
     * The URI for which the response was made.
     */
    readonly uri: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.URIResponse

    parent: GObject.Object

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.URIResponse

    /**
     * Get the expected content length of the #WebKitURIResponse.
     * 
     * It can be 0 if the server provided an incorrect or missing Content-Length.
     * @returns the expected content length of @response.
     */
    getContentLength(): number
    /**
     * Get the HTTP headers of a #WebKitURIResponse as a #SoupMessageHeaders.
     * @returns a #SoupMessageHeaders with the HTTP headers of @response    or %NULL if @response is not an HTTP response.
     */
    getHttpHeaders(): Soup.MessageHeaders
    /**
     * Gets the MIME type of the response.
     * @returns MIME type, as a string.
     */
    getMimeType(): string
    /**
     * Get the status code of the #WebKitURIResponse.
     * 
     * Get the status code of the #WebKitURIResponse as returned by
     * the server. It will normally be a #SoupKnownStatusCode, for
     * example %SOUP_STATUS_OK, though the server can respond with any
     * unsigned integer.
     * @returns the status code of @response
     */
    getStatusCode(): number
    /**
     * Get the suggested filename for `response`.
     * 
     * Get the suggested filename for `response,` as specified by
     * the 'Content-Disposition' HTTP header, or %NULL if it's not
     * present.
     * @returns the suggested filename or %NULL if    the 'Content-Disposition' HTTP header is not present.
     */
    getSuggestedFilename(): string
    /**
     * Gets the URI which resulted in the response.
     * @returns response URI, as a string.
     */
    getUri(): string

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.URIResponse

    connect(sigName: "notify::content-length", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-length", ...args: any[]): void
    connect(sigName: "notify::http-headers", callback: (...args: any[]) => void): number
    on(sigName: "notify::http-headers", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::http-headers", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::http-headers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::http-headers", ...args: any[]): void
    connect(sigName: "notify::mime-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::mime-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::mime-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::mime-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::mime-type", ...args: any[]): void
    connect(sigName: "notify::status-code", callback: (...args: any[]) => void): number
    on(sigName: "notify::status-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::status-code", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::status-code", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::status-code", ...args: any[]): void
    connect(sigName: "notify::suggested-filename", callback: (...args: any[]) => void): number
    on(sigName: "notify::suggested-filename", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::suggested-filename", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::suggested-filename", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::suggested-filename", ...args: any[]): void
    connect(sigName: "notify::uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::uri", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

/**
 * Represents an URI response.
 * 
 * A #WebKitURIResponse contains information such as the URI, the
 * status code, the content length, the mime type, the HTTP status or
 * the suggested filename.
 * @class 
 */
export class URIResponse extends GObject.Object {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.URIResponse

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.URIResponse

    constructor(config?: URIResponse.ConstructorProperties) 
    _init(config?: URIResponse.ConstructorProperties): void
}

export module UserMessage {

    // Constructor properties interface

    export interface ConstructorProperties extends GObject.InitiallyUnowned.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.UserMessage

        /**
         * The UNIX file descriptors of the user message.
         */
        fdList?: Gio.UnixFDList | null
        /**
         * The name of the user message.
         */
        name?: string | null
        /**
         * The parameters of the user message as a #GVariant, or %NULL
         * if the message doesn't include parameters. Note that only complete types are
         * allowed.
         */
        parameters?: GLib.Variant | null
    }

}

export interface UserMessage {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.UserMessage

    /**
     * The UNIX file descriptors of the user message.
     */
    readonly fdList: Gio.UnixFDList
    /**
     * The name of the user message.
     */
    readonly name: string | null
    /**
     * The parameters of the user message as a #GVariant, or %NULL
     * if the message doesn't include parameters. Note that only complete types are
     * allowed.
     */
    readonly parameters: GLib.Variant
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.UserMessage

    parent: GObject.InitiallyUnowned

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.UserMessage

    /**
     * Get the `message` list of file descritpor.
     * @returns the message list of file descriptors
     */
    getFdList(): Gio.UnixFDList | null
    /**
     * Get the `message` name.
     * @returns the message name
     */
    getName(): string
    /**
     * Get the `message` parameters.
     * @returns the message parameters
     */
    getParameters(): GLib.Variant | null
    /**
     * Send a reply to an user message.
     * 
     * If `reply` is floating, it's consumed.
     * You can only send a reply to a #WebKitUserMessage that has been
     * received.
     * @param reply a #WebKitUserMessage to send as reply
     */
    sendReply(reply: UserMessage): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.UserMessage

    connect(sigName: "notify::fd-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::fd-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::fd-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::fd-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::fd-list", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::parameters", callback: (...args: any[]) => void): number
    on(sigName: "notify::parameters", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parameters", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parameters", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parameters", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

/**
 * Message that can be sent between the UI process and web extensions.
 * 
 * A WebKitUserMessage is a message that can be used for the communication between the UI process
 * and web extensions. A WebKitUserMessage always has a name, and it can also include parameters and
 * UNIX file descriptors. Messages can be sent from a #WebKitWebContext to all #WebKitWebExtension<!-- -->s,
 * from a #WebKitWebExtension to its corresponding #WebKitWebContext, and from a #WebKitWebView to its
 * corresponding #WebKitWebPage (and vice versa). One to one messages can be replied to directly with
 * webkit_user_message_send_reply().
 * @class 
 */
export class UserMessage extends GObject.InitiallyUnowned {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.UserMessage

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.UserMessage

    constructor(config?: UserMessage.ConstructorProperties) 
    /**
     * Create a new #WebKitUserMessage with `name`.
     * @constructor 
     * @param name the message name
     * @param parameters the message parameters as a #GVariant, or %NULL
     * @returns the newly created #WebKitUserMessage object.
     */
    constructor(name: string, parameters: GLib.Variant | null) 
    /**
     * Create a new #WebKitUserMessage with `name`.
     * @constructor 
     * @param name the message name
     * @param parameters the message parameters as a #GVariant, or %NULL
     * @returns the newly created #WebKitUserMessage object.
     */
    static new(name: string, parameters: GLib.Variant | null): UserMessage
    /**
     * Create a new #WebKitUserMessage including also a list of UNIX file descriptors to be sent.
     * @constructor 
     * @param name the message name
     * @param parameters the message parameters as a #GVariant
     * @param fdList the message file descriptors
     * @returns the newly created #WebKitUserMessage object.
     */
    static newWithFdList(name: string, parameters: GLib.Variant | null, fdList: Gio.UnixFDList | null): UserMessage
    _init(config?: UserMessage.ConstructorProperties): void
    /**
     * Gets the quark for the domain of user message errors.
     * @returns user message error domain.
     */
    static errorQuark(): GLib.Quark
}

export module WebEditor {

    // Signal callback interfaces

    /**
     * Signal callback interface for `selection-changed`
     */
    export interface SelectionChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface WebEditor {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebEditor

    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.WebEditor

    parent: GObject.Object
    priv: WebEditorPrivate

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.WebEditor

    /**
     * Gets the #WebKitWebPage that is associated with the #WebKitWebEditor that can
     * be used to access the #WebKitDOMDocument currently loaded into it.
     * @returns the associated #WebKitWebPage
     */
    getPage(): WebPage

    // Own signals of WebKit2WebExtension-5.0.WebKit2WebExtension.WebEditor

    connect(sigName: "selection-changed", callback: WebEditor.SelectionChangedSignalCallback): number
    on(sigName: "selection-changed", callback: WebEditor.SelectionChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "selection-changed", callback: WebEditor.SelectionChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "selection-changed", callback: WebEditor.SelectionChangedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "selection-changed", ...args: any[]): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.WebEditor

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

/**
 * Access to editing capabilities of a #WebKitWebPage.
 * 
 * The WebKitWebEditor provides access to various editing capabilities of
 * a #WebKitWebPage such as a possibility to react to the current selection in
 * #WebKitWebPage.
 * @class 
 */
export class WebEditor extends GObject.Object {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebEditor

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.WebEditor

    constructor(config?: WebEditor.ConstructorProperties) 
    _init(config?: WebEditor.ConstructorProperties): void
}

export module WebExtension {

    // Signal callback interfaces

    /**
     * Signal callback interface for `page-created`
     */
    export interface PageCreatedSignalCallback {
        (webPage: WebPage): void
    }

    /**
     * Signal callback interface for `user-message-received`
     */
    export interface UserMessageReceivedSignalCallback {
        (message: UserMessage): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface WebExtension {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebExtension

    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.WebExtension

    parent: GObject.Object
    priv: WebExtensionPrivate

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.WebExtension

    /**
     * Get the web page of the given `page_id`.
     * @param pageId the identifier of the #WebKitWebPage to get
     * @returns the #WebKitWebPage for the given @page_id, or %NULL if the    identifier doesn't correspond to an existing web page.
     */
    getPage(pageId: number): WebPage
    /**
     * Send `message` to the #WebKitWebContext corresponding to `extension`. If `message` is floating, it's consumed.
     * 
     * If you don't expect any reply, or you simply want to ignore it, you can pass %NULL as `calback`.
     * When the operation is finished, `callback` will be called. You can then call
     * webkit_web_extension_send_message_to_context_finish() to get the message reply.
     * @param message a #WebKitUserMessage
     * @param cancellable a #GCancellable or %NULL to ignore
     * @param callback (nullable): A #GAsyncReadyCallback to call when the request is satisfied or %NULL
     */
    sendMessageToContext(message: UserMessage, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finish an asynchronous operation started with webkit_web_extension_send_message_to_context().
     * @param result a #GAsyncResult
     * @returns a #WebKitUserMessage with the reply or %NULL in case of error.
     */
    sendMessageToContextFinish(result: Gio.AsyncResult): UserMessage

    // Own signals of WebKit2WebExtension-5.0.WebKit2WebExtension.WebExtension

    connect(sigName: "page-created", callback: WebExtension.PageCreatedSignalCallback): number
    on(sigName: "page-created", callback: WebExtension.PageCreatedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "page-created", callback: WebExtension.PageCreatedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "page-created", callback: WebExtension.PageCreatedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "page-created", ...args: any[]): void
    connect(sigName: "user-message-received", callback: WebExtension.UserMessageReceivedSignalCallback): number
    on(sigName: "user-message-received", callback: WebExtension.UserMessageReceivedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "user-message-received", callback: WebExtension.UserMessageReceivedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "user-message-received", callback: WebExtension.UserMessageReceivedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "user-message-received", ...args: any[]): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.WebExtension

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

/**
 * Represents an extension of the WebProcess.
 * 
 * WebKitWebExtension is a loadable module for the WebProcess. It allows you to execute code in the
 * WebProcess and being able to use the DOM API, to change any request or to inject custom
 * JavaScript code, for example.
 * 
 * To create a WebKitWebExtension you should write a module with an initialization function that could
 * be either webkit_web_extension_initialize() with prototype #WebKitWebExtensionInitializeFunction or
 * webkit_web_extension_initialize_with_user_data() with prototype #WebKitWebExtensionInitializeWithUserDataFunction.
 * This function has to be public and it has to use the #G_MODULE_EXPORT macro. It is called when the
 * web process is initialized.
 * 
 * ```c
 * static void
 * web_page_created_callback (WebKitWebExtension *extension,
 *                            WebKitWebPage      *web_page,
 *                            gpointer            user_data)
 * {
 *     g_print ("Page %d created for %s\n",
 *              webkit_web_page_get_id (web_page),
 *              webkit_web_page_get_uri (web_page));
 * }
 * 
 * G_MODULE_EXPORT void
 * webkit_web_extension_initialize (WebKitWebExtension *extension)
 * {
 *     g_signal_connect (extension, "page-created",
 *                       G_CALLBACK (web_page_created_callback),
 *                       NULL);
 * }
 * ```
 * 
 * The previous piece of code shows a trivial example of an extension that notifies when
 * a #WebKitWebPage is created.
 * 
 * WebKit has to know where it can find the created WebKitWebExtension. To do so you
 * should use the webkit_web_context_set_web_extensions_directory() function. The signal
 * #WebKitWebContext::initialize-web-extensions is the recommended place to call it.
 * 
 * To provide the initialization data used by the webkit_web_extension_initialize_with_user_data()
 * function, you have to call webkit_web_context_set_web_extensions_initialization_user_data() with
 * the desired data as parameter. You can see an example of this in the following piece of code:
 * 
 * ```c
 * #define WEB_EXTENSIONS_DIRECTORY // ...
 * 
 * static void
 * initialize_web_extensions (WebKitWebContext *context,
 *                            gpointer          user_data)
 * {
 *   // Web Extensions get a different ID for each Web Process
 *   static guint32 unique_id = 0;
 * 
 *   webkit_web_context_set_web_extensions_directory (
 *      context, WEB_EXTENSIONS_DIRECTORY);
 *   webkit_web_context_set_web_extensions_initialization_user_data (
 *      context, g_variant_new_uint32 (unique_id++));
 * }
 * 
 * int main (int argc, char **argv)
 * {
 *   g_signal_connect (webkit_web_context_get_default (),
 *                    "initialize-web-extensions",
 *                     G_CALLBACK (initialize_web_extensions),
 *                     NULL);
 * 
 *   GtkWidget *view = webkit_web_view_new ();
 * 
 *   // ...
 * }
 * ```
 * @class 
 */
export class WebExtension extends GObject.Object {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebExtension

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.WebExtension

    constructor(config?: WebExtension.ConstructorProperties) 
    _init(config?: WebExtension.ConstructorProperties): void
}

export module WebHitTestResult {

    // Constructor properties interface

    export interface ConstructorProperties extends HitTestResult.ConstructorProperties {

        // Own constructor properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebHitTestResult

        /**
         * The #WebKitDOMNode
         */
        node?: DOMNode | null
    }

}

export interface WebHitTestResult {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebHitTestResult

    /**
     * The #WebKitDOMNode
     */
    readonly node: DOMNode
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.WebHitTestResult

    parent: HitTestResult & GObject.Object
    priv: WebHitTestResultPrivate

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.WebHitTestResult

    /**
     * Get the #WebKitDOMNode in the coordinates of the Hit Test.
     * @returns a #WebKitDOMNode
     */
    getNode(): DOMNode

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.WebHitTestResult

    connect(sigName: "notify::node", callback: (...args: any[]) => void): number
    on(sigName: "notify::node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::image-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::image-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::image-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::image-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::image-uri", ...args: any[]): void
    connect(sigName: "notify::link-label", callback: (...args: any[]) => void): number
    on(sigName: "notify::link-label", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::link-label", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::link-label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::link-label", ...args: any[]): void
    connect(sigName: "notify::link-title", callback: (...args: any[]) => void): number
    on(sigName: "notify::link-title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::link-title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::link-title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::link-title", ...args: any[]): void
    connect(sigName: "notify::link-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::link-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::link-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::link-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::link-uri", ...args: any[]): void
    connect(sigName: "notify::media-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::media-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::media-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::media-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::media-uri", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

/**
 * Result of a Hit Test (Web Process Extensions).
 * 
 * WebKitWebHitTestResult extends #WebKitHitTestResult to provide information
 * about the #WebKitDOMNode in the coordinates of the Hit Test.
 * @class 
 */
export class WebHitTestResult extends HitTestResult {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebHitTestResult

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.WebHitTestResult

    constructor(config?: WebHitTestResult.ConstructorProperties) 
    _init(config?: WebHitTestResult.ConstructorProperties): void
}

export module WebPage {

    // Signal callback interfaces

    /**
     * Signal callback interface for `console-message-sent`
     */
    export interface ConsoleMessageSentSignalCallback {
        (consoleMessage: ConsoleMessage): void
    }

    /**
     * Signal callback interface for `context-menu`
     */
    export interface ContextMenuSignalCallback {
        (contextMenu: ContextMenu, hitTestResult: WebHitTestResult): boolean
    }

    /**
     * Signal callback interface for `document-loaded`
     */
    export interface DocumentLoadedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `form-controls-associated`
     */
    export interface FormControlsAssociatedSignalCallback {
        (elements: DOMElement[]): void
    }

    /**
     * Signal callback interface for `form-controls-associated-for-frame`
     */
    export interface FormControlsAssociatedForFrameSignalCallback {
        (elements: DOMElement[], frame: Frame): void
    }

    /**
     * Signal callback interface for `send-request`
     */
    export interface SendRequestSignalCallback {
        (request: URIRequest, redirectedResponse: URIResponse): boolean
    }

    /**
     * Signal callback interface for `user-message-received`
     */
    export interface UserMessageReceivedSignalCallback {
        (message: UserMessage): boolean
    }

    /**
     * Signal callback interface for `will-submit-form`
     */
    export interface WillSubmitFormSignalCallback {
        (form: DOMElement, step: FormSubmissionStep, sourceFrame: Frame, targetFrame: Frame, textFieldNames: string[], textFieldValues: string[]): void
    }


    // Constructor properties interface

    export interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

export interface WebPage {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebPage

    /**
     * The current active URI of the #WebKitWebPage.
     */
    readonly uri: string | null
    __gtype__: number

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.WebPage

    parent: GObject.Object

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.WebPage

    /**
     * Get the #WebKitDOMDocument currently loaded in `web_page`
     * @returns the #WebKitDOMDocument currently loaded, or %NULL    if no document is currently loaded.
     */
    getDomDocument(): DOMDocument
    /**
     * Gets the #WebKitWebEditor of a #WebKitWebPage.
     * @returns the #WebKitWebEditor
     */
    getEditor(): WebEditor
    /**
     * Get the identifier of the #WebKitWebPage
     * @returns the identifier of @web_page
     */
    getId(): number
    /**
     * Returns the main frame of a #WebKitWebPage.
     * @returns the #WebKitFrame that is the main frame of @web_page
     */
    getMainFrame(): Frame
    /**
     * Returns the current active URI of `web_page`.
     * 
     * You can monitor the active URI by connecting to the notify::uri
     * signal of `web_page`.
     * @returns the current active URI of @web_view or %NULL if nothing has been    loaded yet.
     */
    getUri(): string
    /**
     * Send `message` to the #WebKitWebView corresponding to `web_page`. If `message` is floating, it's consumed.
     * 
     * If you don't expect any reply, or you simply want to ignore it, you can pass %NULL as `callback`.
     * When the operation is finished, `callback` will be called. You can then call
     * webkit_web_page_send_message_to_view_finish() to get the message reply.
     * @param message a #WebKitUserMessage
     * @param cancellable a #GCancellable or %NULL to ignore
     * @param callback (nullable): A #GAsyncReadyCallback to call when the request is satisfied or %NULL
     */
    sendMessageToView(message: UserMessage, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finish an asynchronous operation started with webkit_web_page_send_message_to_view().
     * @param result a #GAsyncResult
     * @returns a #WebKitUserMessage with the reply or %NULL in case of error.
     */
    sendMessageToViewFinish(result: Gio.AsyncResult): UserMessage

    // Own signals of WebKit2WebExtension-5.0.WebKit2WebExtension.WebPage

    connect(sigName: "console-message-sent", callback: WebPage.ConsoleMessageSentSignalCallback): number
    on(sigName: "console-message-sent", callback: WebPage.ConsoleMessageSentSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "console-message-sent", callback: WebPage.ConsoleMessageSentSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "console-message-sent", callback: WebPage.ConsoleMessageSentSignalCallback): NodeJS.EventEmitter
    emit(sigName: "console-message-sent", ...args: any[]): void
    connect(sigName: "context-menu", callback: WebPage.ContextMenuSignalCallback): number
    on(sigName: "context-menu", callback: WebPage.ContextMenuSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "context-menu", callback: WebPage.ContextMenuSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "context-menu", callback: WebPage.ContextMenuSignalCallback): NodeJS.EventEmitter
    emit(sigName: "context-menu", hitTestResult: WebHitTestResult, ...args: any[]): void
    connect(sigName: "document-loaded", callback: WebPage.DocumentLoadedSignalCallback): number
    on(sigName: "document-loaded", callback: WebPage.DocumentLoadedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "document-loaded", callback: WebPage.DocumentLoadedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "document-loaded", callback: WebPage.DocumentLoadedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "document-loaded", ...args: any[]): void
    connect(sigName: "form-controls-associated", callback: WebPage.FormControlsAssociatedSignalCallback): number
    on(sigName: "form-controls-associated", callback: WebPage.FormControlsAssociatedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "form-controls-associated", callback: WebPage.FormControlsAssociatedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "form-controls-associated", callback: WebPage.FormControlsAssociatedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "form-controls-associated", ...args: any[]): void
    connect(sigName: "form-controls-associated-for-frame", callback: WebPage.FormControlsAssociatedForFrameSignalCallback): number
    on(sigName: "form-controls-associated-for-frame", callback: WebPage.FormControlsAssociatedForFrameSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "form-controls-associated-for-frame", callback: WebPage.FormControlsAssociatedForFrameSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "form-controls-associated-for-frame", callback: WebPage.FormControlsAssociatedForFrameSignalCallback): NodeJS.EventEmitter
    emit(sigName: "form-controls-associated-for-frame", frame: Frame, ...args: any[]): void
    connect(sigName: "send-request", callback: WebPage.SendRequestSignalCallback): number
    on(sigName: "send-request", callback: WebPage.SendRequestSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "send-request", callback: WebPage.SendRequestSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "send-request", callback: WebPage.SendRequestSignalCallback): NodeJS.EventEmitter
    emit(sigName: "send-request", redirectedResponse: URIResponse, ...args: any[]): void
    connect(sigName: "user-message-received", callback: WebPage.UserMessageReceivedSignalCallback): number
    on(sigName: "user-message-received", callback: WebPage.UserMessageReceivedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "user-message-received", callback: WebPage.UserMessageReceivedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "user-message-received", callback: WebPage.UserMessageReceivedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "user-message-received", ...args: any[]): void
    connect(sigName: "will-submit-form", callback: WebPage.WillSubmitFormSignalCallback): number
    on(sigName: "will-submit-form", callback: WebPage.WillSubmitFormSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "will-submit-form", callback: WebPage.WillSubmitFormSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "will-submit-form", callback: WebPage.WillSubmitFormSignalCallback): NodeJS.EventEmitter
    emit(sigName: "will-submit-form", step: FormSubmissionStep, sourceFrame: Frame, targetFrame: Frame, textFieldNames: string[], textFieldValues: string[], ...args: any[]): void

    // Class property signals of WebKit2WebExtension-5.0.WebKit2WebExtension.WebPage

    connect(sigName: "notify::uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::uri", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

/**
 * A loaded web page.
 * @class 
 */
export class WebPage extends GObject.Object {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebPage

    static name: string

    // Constructors of WebKit2WebExtension-5.0.WebKit2WebExtension.WebPage

    constructor(config?: WebPage.ConstructorProperties) 
    _init(config?: WebPage.ConstructorProperties): void
}

export interface ConsoleMessage {

    // Owm methods of WebKit2WebExtension-5.0.WebKit2WebExtension.ConsoleMessage

    /**
     * Make a copy of `console_message`.
     * @returns A copy of passed in #WebKitConsoleMessage
     */
    copy(): ConsoleMessage
    /**
     * Free the #WebKitConsoleMessage
     */
    free(): void
    /**
     * Gets the log level of a #WebKitConsoleMessage
     * @returns a #WebKitConsoleMessageLevel indicating the log level of @console_message
     */
    getLevel(): ConsoleMessageLevel
    /**
     * Gets the line number of a #WebKitConsoleMessage
     * @returns the line number of @console_message
     */
    getLine(): number
    /**
     * Gets the source of a #WebKitConsoleMessage
     * @returns a #WebKitConsoleMessageSource indicating the source of @console_message
     */
    getSource(): ConsoleMessageSource
    /**
     * Gets the source identifier of a #WebKitConsoleMessage
     * @returns the source identifier of @console_message
     */
    getSourceId(): string
    /**
     * Gets the text message of a #WebKitConsoleMessage
     * @returns the text message of @console_message
     */
    getText(): string
}

export class ConsoleMessage {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.ConsoleMessage

    static name: string
}

export interface ContextMenuClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenuClass

    parentClass: GObject.ObjectClass
}

export abstract class ContextMenuClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenuClass

    static name: string
}

export interface ContextMenuItemClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenuItemClass

    parentClass: GObject.InitiallyUnownedClass
}

export abstract class ContextMenuItemClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenuItemClass

    static name: string
}

export interface ContextMenuItemPrivate {
}

export class ContextMenuItemPrivate {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenuItemPrivate

    static name: string
}

export interface ContextMenuPrivate {
}

export class ContextMenuPrivate {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.ContextMenuPrivate

    static name: string
}

export interface DOMAttrClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMAttrClass

    parentClass: DOMNodeClass
}

export abstract class DOMAttrClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMAttrClass

    static name: string
}

export interface DOMBlobClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMBlobClass

    parentClass: DOMObjectClass
}

export abstract class DOMBlobClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMBlobClass

    static name: string
}

export interface DOMCDATASectionClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCDATASectionClass

    parentClass: DOMTextClass
}

export abstract class DOMCDATASectionClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCDATASectionClass

    static name: string
}

export interface DOMCSSRuleClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRuleClass

    parentClass: DOMObjectClass
}

export abstract class DOMCSSRuleClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRuleClass

    static name: string
}

export interface DOMCSSRuleListClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRuleListClass

    parentClass: DOMObjectClass
}

export abstract class DOMCSSRuleListClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSRuleListClass

    static name: string
}

export interface DOMCSSStyleDeclarationClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleDeclarationClass

    parentClass: DOMObjectClass
}

export abstract class DOMCSSStyleDeclarationClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleDeclarationClass

    static name: string
}

export interface DOMCSSStyleSheetClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleSheetClass

    parentClass: DOMStyleSheetClass
}

export abstract class DOMCSSStyleSheetClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSStyleSheetClass

    static name: string
}

export interface DOMCSSValueClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSValueClass

    parentClass: DOMObjectClass
}

export abstract class DOMCSSValueClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCSSValueClass

    static name: string
}

export interface DOMCharacterDataClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterDataClass

    parentClass: DOMNodeClass
}

export abstract class DOMCharacterDataClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCharacterDataClass

    static name: string
}

export interface DOMClientRectClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRectClass

    parentClass: DOMObjectClass
}

export abstract class DOMClientRectClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRectClass

    static name: string
}

export interface DOMClientRectListClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRectListClass

    parentClass: DOMObjectClass
}

export abstract class DOMClientRectListClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMClientRectListClass

    static name: string
}

export interface DOMCommentClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCommentClass

    parentClass: DOMCharacterDataClass
}

export abstract class DOMCommentClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMCommentClass

    static name: string
}

export interface DOMDOMImplementationClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMImplementationClass

    parentClass: DOMObjectClass
}

export abstract class DOMDOMImplementationClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMImplementationClass

    static name: string
}

export interface DOMDOMSelectionClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMSelectionClass

    parentClass: DOMObjectClass
}

export abstract class DOMDOMSelectionClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMSelectionClass

    static name: string
}

export interface DOMDOMTokenListClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMTokenListClass

    parentClass: DOMObjectClass
}

export abstract class DOMDOMTokenListClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMTokenListClass

    static name: string
}

export interface DOMDOMWindowClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMWindowClass

    parentClass: DOMObjectClass
}

export abstract class DOMDOMWindowClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDOMWindowClass

    static name: string
}

export interface DOMDocumentClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentClass

    parentClass: DOMNodeClass
}

export abstract class DOMDocumentClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentClass

    static name: string
}

export interface DOMDocumentFragmentClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentFragmentClass

    parentClass: DOMNodeClass
}

export abstract class DOMDocumentFragmentClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentFragmentClass

    static name: string
}

export interface DOMDocumentTypeClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentTypeClass

    parentClass: DOMNodeClass
}

export abstract class DOMDocumentTypeClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMDocumentTypeClass

    static name: string
}

export interface DOMElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElementClass

    parentClass: DOMNodeClass
}

export abstract class DOMElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMElementClass

    static name: string
}

export interface DOMEntityReferenceClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEntityReferenceClass

    parentClass: DOMNodeClass
}

export abstract class DOMEntityReferenceClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEntityReferenceClass

    static name: string
}

export interface DOMEventClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventClass

    parentClass: DOMObjectClass
}

export abstract class DOMEventClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventClass

    static name: string
}

export interface DOMEventTargetIface {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTargetIface

    gIface: GObject.TypeInterface
    dispatchEvent: (target: DOMEventTarget, event: DOMEvent) => boolean
    addEventListener: (target: DOMEventTarget, eventName: string, handler: GObject.TClosure, useCapture: boolean) => boolean
    removeEventListener: (target: DOMEventTarget, eventName: string, handler: GObject.TClosure, useCapture: boolean) => boolean
}

export abstract class DOMEventTargetIface {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMEventTargetIface

    static name: string
}

export interface DOMFileClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFileClass

    parentClass: DOMBlobClass
}

export abstract class DOMFileClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFileClass

    static name: string
}

export interface DOMFileListClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFileListClass

    parentClass: DOMObjectClass
}

export abstract class DOMFileListClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMFileListClass

    static name: string
}

export interface DOMHTMLAnchorElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAnchorElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLAnchorElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAnchorElementClass

    static name: string
}

export interface DOMHTMLAppletElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAppletElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLAppletElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAppletElementClass

    static name: string
}

export interface DOMHTMLAreaElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAreaElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLAreaElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLAreaElementClass

    static name: string
}

export interface DOMHTMLBRElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBRElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLBRElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBRElementClass

    static name: string
}

export interface DOMHTMLBaseElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLBaseElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseElementClass

    static name: string
}

export interface DOMHTMLBaseFontElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseFontElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLBaseFontElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBaseFontElementClass

    static name: string
}

export interface DOMHTMLBodyElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBodyElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLBodyElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLBodyElementClass

    static name: string
}

export interface DOMHTMLButtonElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLButtonElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLButtonElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLButtonElementClass

    static name: string
}

export interface DOMHTMLCanvasElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCanvasElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLCanvasElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCanvasElementClass

    static name: string
}

export interface DOMHTMLCollectionClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCollectionClass

    parentClass: DOMObjectClass
}

export abstract class DOMHTMLCollectionClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLCollectionClass

    static name: string
}

export interface DOMHTMLDListElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDListElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLDListElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDListElementClass

    static name: string
}

export interface DOMHTMLDirectoryElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDirectoryElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLDirectoryElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDirectoryElementClass

    static name: string
}

export interface DOMHTMLDivElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDivElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLDivElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDivElementClass

    static name: string
}

export interface DOMHTMLDocumentClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDocumentClass

    parentClass: DOMDocumentClass
}

export abstract class DOMHTMLDocumentClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLDocumentClass

    static name: string
}

export interface DOMHTMLElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElementClass

    parentClass: DOMElementClass
}

export abstract class DOMHTMLElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLElementClass

    static name: string
}

export interface DOMHTMLEmbedElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLEmbedElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLEmbedElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLEmbedElementClass

    static name: string
}

export interface DOMHTMLFieldSetElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFieldSetElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLFieldSetElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFieldSetElementClass

    static name: string
}

export interface DOMHTMLFontElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFontElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLFontElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFontElementClass

    static name: string
}

export interface DOMHTMLFormElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFormElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLFormElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFormElementClass

    static name: string
}

export interface DOMHTMLFrameElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLFrameElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameElementClass

    static name: string
}

export interface DOMHTMLFrameSetElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameSetElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLFrameSetElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLFrameSetElementClass

    static name: string
}

export interface DOMHTMLHRElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHRElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLHRElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHRElementClass

    static name: string
}

export interface DOMHTMLHeadElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLHeadElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadElementClass

    static name: string
}

export interface DOMHTMLHeadingElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadingElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLHeadingElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHeadingElementClass

    static name: string
}

export interface DOMHTMLHtmlElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHtmlElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLHtmlElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLHtmlElementClass

    static name: string
}

export interface DOMHTMLIFrameElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLIFrameElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLIFrameElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLIFrameElementClass

    static name: string
}

export interface DOMHTMLImageElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLImageElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLImageElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLImageElementClass

    static name: string
}

export interface DOMHTMLInputElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLInputElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLInputElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLInputElementClass

    static name: string
}

export interface DOMHTMLLIElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLIElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLLIElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLIElementClass

    static name: string
}

export interface DOMHTMLLabelElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLabelElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLLabelElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLabelElementClass

    static name: string
}

export interface DOMHTMLLegendElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLegendElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLLegendElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLegendElementClass

    static name: string
}

export interface DOMHTMLLinkElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLinkElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLLinkElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLLinkElementClass

    static name: string
}

export interface DOMHTMLMapElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMapElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLMapElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMapElementClass

    static name: string
}

export interface DOMHTMLMarqueeElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMarqueeElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLMarqueeElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMarqueeElementClass

    static name: string
}

export interface DOMHTMLMenuElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMenuElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLMenuElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMenuElementClass

    static name: string
}

export interface DOMHTMLMetaElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMetaElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLMetaElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLMetaElementClass

    static name: string
}

export interface DOMHTMLModElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLModElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLModElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLModElementClass

    static name: string
}

export interface DOMHTMLOListElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOListElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLOListElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOListElementClass

    static name: string
}

export interface DOMHTMLObjectElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLObjectElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLObjectElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLObjectElementClass

    static name: string
}

export interface DOMHTMLOptGroupElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptGroupElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLOptGroupElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptGroupElementClass

    static name: string
}

export interface DOMHTMLOptionElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLOptionElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionElementClass

    static name: string
}

export interface DOMHTMLOptionsCollectionClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionsCollectionClass

    parentClass: DOMHTMLCollectionClass
}

export abstract class DOMHTMLOptionsCollectionClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLOptionsCollectionClass

    static name: string
}

export interface DOMHTMLParagraphElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParagraphElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLParagraphElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParagraphElementClass

    static name: string
}

export interface DOMHTMLParamElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParamElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLParamElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLParamElementClass

    static name: string
}

export interface DOMHTMLPreElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLPreElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLPreElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLPreElementClass

    static name: string
}

export interface DOMHTMLQuoteElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLQuoteElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLQuoteElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLQuoteElementClass

    static name: string
}

export interface DOMHTMLScriptElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLScriptElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLScriptElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLScriptElementClass

    static name: string
}

export interface DOMHTMLSelectElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLSelectElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLSelectElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLSelectElementClass

    static name: string
}

export interface DOMHTMLStyleElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLStyleElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLStyleElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLStyleElementClass

    static name: string
}

export interface DOMHTMLTableCaptionElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCaptionElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLTableCaptionElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCaptionElementClass

    static name: string
}

export interface DOMHTMLTableCellElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCellElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLTableCellElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableCellElementClass

    static name: string
}

export interface DOMHTMLTableColElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableColElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLTableColElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableColElementClass

    static name: string
}

export interface DOMHTMLTableElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLTableElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableElementClass

    static name: string
}

export interface DOMHTMLTableRowElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableRowElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLTableRowElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableRowElementClass

    static name: string
}

export interface DOMHTMLTableSectionElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableSectionElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLTableSectionElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTableSectionElementClass

    static name: string
}

export interface DOMHTMLTextAreaElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTextAreaElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLTextAreaElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTextAreaElementClass

    static name: string
}

export interface DOMHTMLTitleElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTitleElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLTitleElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLTitleElementClass

    static name: string
}

export interface DOMHTMLUListElementClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLUListElementClass

    parentClass: DOMHTMLElementClass
}

export abstract class DOMHTMLUListElementClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMHTMLUListElementClass

    static name: string
}

export interface DOMKeyboardEventClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMKeyboardEventClass

    parentClass: DOMUIEventClass
}

export abstract class DOMKeyboardEventClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMKeyboardEventClass

    static name: string
}

export interface DOMMediaListClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMediaListClass

    parentClass: DOMObjectClass
}

export abstract class DOMMediaListClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMediaListClass

    static name: string
}

export interface DOMMouseEventClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMouseEventClass

    parentClass: DOMUIEventClass
}

export abstract class DOMMouseEventClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMMouseEventClass

    static name: string
}

export interface DOMNamedNodeMapClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNamedNodeMapClass

    parentClass: DOMObjectClass
}

export abstract class DOMNamedNodeMapClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNamedNodeMapClass

    static name: string
}

export interface DOMNodeClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeClass

    parentClass: DOMObjectClass
}

export abstract class DOMNodeClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeClass

    static name: string
}

export interface DOMNodeFilterIface {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeFilterIface

    gIface: GObject.TypeInterface
    acceptNode: (filter: DOMNodeFilter, node: DOMNode) => number
}

export abstract class DOMNodeFilterIface {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeFilterIface

    static name: string
}

export interface DOMNodeIteratorClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeIteratorClass

    parentClass: DOMObjectClass
}

export abstract class DOMNodeIteratorClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeIteratorClass

    static name: string
}

export interface DOMNodeListClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeListClass

    parentClass: DOMObjectClass
}

export abstract class DOMNodeListClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMNodeListClass

    static name: string
}

export interface DOMObjectClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObjectClass

    parentClass: GObject.ObjectClass
}

export abstract class DOMObjectClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMObjectClass

    static name: string
}

export interface DOMProcessingInstructionClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMProcessingInstructionClass

    parentClass: DOMCharacterDataClass
}

export abstract class DOMProcessingInstructionClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMProcessingInstructionClass

    static name: string
}

export interface DOMRangeClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMRangeClass

    parentClass: DOMObjectClass
}

export abstract class DOMRangeClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMRangeClass

    static name: string
}

export interface DOMStyleSheetClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheetClass

    parentClass: DOMObjectClass
}

export abstract class DOMStyleSheetClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheetClass

    static name: string
}

export interface DOMStyleSheetListClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheetListClass

    parentClass: DOMObjectClass
}

export abstract class DOMStyleSheetListClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMStyleSheetListClass

    static name: string
}

export interface DOMTextClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMTextClass

    parentClass: DOMCharacterDataClass
}

export abstract class DOMTextClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMTextClass

    static name: string
}

export interface DOMTreeWalkerClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMTreeWalkerClass

    parentClass: DOMObjectClass
}

export abstract class DOMTreeWalkerClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMTreeWalkerClass

    static name: string
}

export interface DOMUIEventClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEventClass

    parentClass: DOMEventClass
}

export abstract class DOMUIEventClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMUIEventClass

    static name: string
}

export interface DOMWheelEventClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMWheelEventClass

    parentClass: DOMMouseEventClass
}

export abstract class DOMWheelEventClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMWheelEventClass

    static name: string
}

export interface DOMXPathExpressionClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathExpressionClass

    parentClass: DOMObjectClass
}

export abstract class DOMXPathExpressionClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathExpressionClass

    static name: string
}

export interface DOMXPathNSResolverIface {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathNSResolverIface

    gIface: GObject.TypeInterface
    lookupNamespaceUri: (resolver: DOMXPathNSResolver, prefix: string) => string | null
}

export abstract class DOMXPathNSResolverIface {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathNSResolverIface

    static name: string
}

export interface DOMXPathResultClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathResultClass

    parentClass: DOMObjectClass
}

export abstract class DOMXPathResultClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.DOMXPathResultClass

    static name: string
}

export interface FrameClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.FrameClass

    parentClass: GObject.ObjectClass
}

export abstract class FrameClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.FrameClass

    static name: string
}

export interface FramePrivate {
}

export class FramePrivate {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.FramePrivate

    static name: string
}

export interface HitTestResultClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.HitTestResultClass

    parentClass: GObject.ObjectClass
}

export abstract class HitTestResultClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.HitTestResultClass

    static name: string
}

export interface HitTestResultPrivate {
}

export class HitTestResultPrivate {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.HitTestResultPrivate

    static name: string
}

export interface ScriptWorldClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.ScriptWorldClass

    parentClass: GObject.ObjectClass
}

export abstract class ScriptWorldClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.ScriptWorldClass

    static name: string
}

export interface ScriptWorldPrivate {
}

export class ScriptWorldPrivate {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.ScriptWorldPrivate

    static name: string
}

export interface URIRequestClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.URIRequestClass

    parentClass: GObject.ObjectClass
}

export abstract class URIRequestClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.URIRequestClass

    static name: string
}

export interface URIRequestPrivate {
}

export class URIRequestPrivate {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.URIRequestPrivate

    static name: string
}

export interface URIResponseClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.URIResponseClass

    parentClass: GObject.ObjectClass
}

export abstract class URIResponseClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.URIResponseClass

    static name: string
}

export interface URIResponsePrivate {
}

export class URIResponsePrivate {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.URIResponsePrivate

    static name: string
}

export interface UserMessageClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.UserMessageClass

    parentClass: GObject.InitiallyUnownedClass
}

export abstract class UserMessageClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.UserMessageClass

    static name: string
}

export interface UserMessagePrivate {
}

export class UserMessagePrivate {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.UserMessagePrivate

    static name: string
}

export interface WebEditorClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.WebEditorClass

    parentClass: GObject.ObjectClass
}

export abstract class WebEditorClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebEditorClass

    static name: string
}

export interface WebEditorPrivate {
}

export class WebEditorPrivate {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebEditorPrivate

    static name: string
}

export interface WebExtensionClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.WebExtensionClass

    parentClass: GObject.ObjectClass
}

export abstract class WebExtensionClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebExtensionClass

    static name: string
}

export interface WebExtensionPrivate {
}

export class WebExtensionPrivate {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebExtensionPrivate

    static name: string
}

export interface WebHitTestResultClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.WebHitTestResultClass

    parentClass: HitTestResultClass
}

export abstract class WebHitTestResultClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebHitTestResultClass

    static name: string
}

export interface WebHitTestResultPrivate {
}

export class WebHitTestResultPrivate {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebHitTestResultPrivate

    static name: string
}

export interface WebPageClass {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension.WebPageClass

    parentClass: GObject.ObjectClass
}

export abstract class WebPageClass {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebPageClass

    static name: string
}

export interface WebPagePrivate {
}

export class WebPagePrivate {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension.WebPagePrivate

    static name: string
}

export interface _ContextMenu {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension._ContextMenu

    parent: GObject.Object
}

export class _ContextMenu {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension._ContextMenu

    static name: string
}

export interface _ContextMenuItem {

    // Own fields of WebKit2WebExtension-5.0.WebKit2WebExtension._ContextMenuItem

    parent: GObject.InitiallyUnowned
    priv: ContextMenuItemPrivate
}

export class _ContextMenuItem {

    // Own properties of WebKit2WebExtension-5.0.WebKit2WebExtension._ContextMenuItem

    static name: string
}

// END