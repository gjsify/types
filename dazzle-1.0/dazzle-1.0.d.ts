
/*
 * Type Definitions for Gjs (https://gjs.guide/)
 *
 * These type definitions are automatically generated, do not edit them by hand.
 * If you found a bug fix it in `ts-for-gir` or create a bug report on https://github.com/gjsify/ts-for-gir
 */

import './dazzle-1.0-ambient.d.ts';
import './dazzle-1.0-import.d.ts';
/**
 * Dazzle-1.0
 */

import type Gtk from '@girs/gtk-3.0';
import type xlib from '@girs/xlib-2.0';
import type Gdk from '@girs/gdk-3.0';
import type cairo from '@girs/cairo-1.0';
import type GObject from '@girs/gobject-2.0';
import type GLib from '@girs/glib-2.0';
import type Pango from '@girs/pango-1.0';
import type HarfBuzz from '@girs/harfbuzz-0.0';
import type freetype2 from '@girs/freetype2-2.0';
import type Gio from '@girs/gio-2.0';
import type GdkPixbuf from '@girs/gdkpixbuf-2.0';
import type GModule from '@girs/gmodule-2.0';
import type Atk from '@girs/atk-1.0';

export namespace Dazzle {

enum AnimationMode {
    LINEAR,
    EASE_IN_QUAD,
    EASE_IN_OUT_QUAD,
    EASE_OUT_QUAD,
    EASE_IN_CUBIC,
    EASE_OUT_CUBIC,
    EASE_IN_OUT_CUBIC,
}
enum DockRevealerTransitionType {
    NONE,
    SLIDE_RIGHT,
    SLIDE_LEFT,
    SLIDE_UP,
    SLIDE_DOWN,
}
enum ShortcutMatch {
    NONE,
    EQUAL,
    PARTIAL,
}
/**
 * DzlShortcutType specifies the kind of shortcut that is being described.
 * More values may be added to this enumeration over time.
 */
enum ShortcutType {
    /**
     * The shortcut is a keyboard accelerator. The #DzlShortcutsShortcut:accelerator
     *   property will be used.
     */
    ACCELERATOR,
    /**
     * The shortcut is a pinch gesture. GTK+ provides an icon and subtitle.
     */
    GESTURE_PINCH,
    /**
     * The shortcut is a stretch gesture. GTK+ provides an icon and subtitle.
     */
    GESTURE_STRETCH,
    /**
     * The shortcut is a clockwise rotation gesture. GTK+ provides an icon and subtitle.
     */
    GESTURE_ROTATE_CLOCKWISE,
    /**
     * The shortcut is a counterclockwise rotation gesture. GTK+ provides an icon and subtitle.
     */
    GESTURE_ROTATE_COUNTERCLOCKWISE,
    /**
     * The shortcut is a two-finger swipe gesture. GTK+ provides an icon and subtitle.
     */
    GESTURE_TWO_FINGER_SWIPE_LEFT,
    /**
     * The shortcut is a two-finger swipe gesture. GTK+ provides an icon and subtitle.
     */
    GESTURE_TWO_FINGER_SWIPE_RIGHT,
    /**
     * The shortcut is a gesture. The #DzlShortcutsShortcut:icon property will be
     *   used.
     */
    GESTURE,
}
enum SliderPosition {
    NONE,
    TOP,
    RIGHT,
    BOTTOM,
    LEFT,
}
enum ThreeGridColumn {
    LEFT,
    CENTER,
    RIGHT,
}
enum TitlebarAnimation {
    HIDDEN,
    SHOWING,
    SHOWN,
    HIDING,
}
enum TreeDropPosition {
    INTO,
    BEFORE,
    AFTER,
}
const COUNTER_REQUIRES_ATOMIC: number
const DOCK_BIN_STYLE_CLASS_PINNED: string
const ENABLE_TRACE: number
/**
 * Dzl major version component (e.g. 1 if %DZL_VERSION is 1.2.3)
 */
const MAJOR_VERSION: number
/**
 * Dzl micro version component (e.g. 3 if %DZL_VERSION is 1.2.3)
 */
const MICRO_VERSION: number
/**
 * Dzl minor version component (e.g. 2 if %DZL_VERSION is 1.2.3)
 */
const MINOR_VERSION: number
/**
 * Dazzle version, encoded as a string, useful for printing and
 * concatenation.
 */
const VERSION_S: string
/**
 * `cr` a cairo context
 * Creates a region from the extents of the context's current clip area.
 * @param cr 
 * @returns A #CairoRegion.
 */
function cairo_region_create_from_clip_extents(cr: cairo.Context): cairo.Region
/**
 * Adds a rounded rectangle to `cr'`s current path.
 * @param cr a cairo context
 * @param rect a #GdkRectangle to draw
 * @param x_radius the radius of the corners on the X axis
 * @param y_radius the radius of the corners on the Y axis
 */
function cairo_rounded_rectangle(cr: cairo.Context, rect: Gdk.Rectangle, x_radius: number, y_radius: number): void
/**
 * If both `self` and `other` are not %NULL, then the cancellation of
 * `other` will be propagated to `self` if `other` is cancelled.
 * 
 * If `self` and `other` are the same, `self` is returned and no additional
 * chaining will occur.
 * 
 * If `self` and `other` are %NULL, then %NULL is returned.
 * If `self` is non-%NULL, it will be returned.
 * If `self` is %NULL and `other` is non-%NULL, other will be
 * returned. This is useful to succinctly chain cancellables like:
 * 
 * 
 * ```
 * cancellable = dzl_cancellable_chain (cancellable, self->cancellable);
 * ```
 * 
 * @param self a #GCancellable or %NULL
 * @param other a #GCancellable or %NULL
 * @returns a #GCancellable or %NULL
 */
function cancellable_chain(self?: (Gio.Cancellable | null), other?: (Gio.Cancellable | null)): (Gio.Cancellable | null)
function counter_arena_get_default(): CounterArena
/**
 * Create a list of valid uri's from a uri-list drop.
 * @param selection_data the #GtkSelectionData from drag_data_received
 * @returns a string array which will hold the uris or   %NULL if there were no valid uris. g_strfreev should be used when   the string array is no longer used
 */
function dnd_get_uri_list(selection_data: Gtk.SelectionData): string[]
function file_manager_show(file: Gio.File): boolean
/**
 * Creates a new frame source that will execute when the timeout interval
 * for the source has elapsed. The timing will try to synchronize based
 * on the end time of the animation.
 * @param frames_per_sec Target frames per second.
 * @param callback A #GSourceFunc to execute.
 * @returns A source id that can be removed with g_source_remove().
 */
function frame_source_add(frames_per_sec: number, callback: GLib.SourceFunc): number
function frame_source_add_full(priority: number, frames_per_sec: number, callback: GLib.SourceFunc): number
function fuzzy_highlight(str: string, query: string, case_sensitive: boolean): string
/**
 * Helper function to create a human-friendly string describing approximately
 * how long ago a #GDateTime is.
 * @param self A #GDateTime
 * @returns A newly allocated string describing the   date and time imprecisely such as "Yesterday".
 */
function g_date_time_format_for_display(self: GLib.DateTime): string
/**
 * Creates a string describing the time span in hours, minutes, and seconds.
 * For example, a time span of three and a half minutes would be "3:30".
 * 2 days, 3 hours, 6 minutes, and 20 seconds would be "51:06:20".
 * @param span the span of time
 * @returns A newly allocated string describing the time span.
 */
function g_time_span_to_label(span: GLib.TimeSpan): string
/**
 * A #GBindingTransformFunc to transform a time span into a string label using
 * dzl_g_time_span_to_label().
 * @param binding 
 * @param from_value 
 * @param to_value 
 * @param user_data 
 */
function g_time_span_to_label_mapping(binding: GObject.Binding, from_value: GObject.Value, to_value: GObject.Value, user_data?: (any | null)): boolean
function g_variant_hash(data?: (any | null)): number
function get_current_cpu_call(): number
/**
 * This function will binary search the contents of `store` looking for the
 * location to insert a new row.
 * 
 * `compare_column` must be the index of a column that is a %G_TYPE_POINTER,
 * %G_TYPE_BOXED or %G_TYPE_OBJECT based column.
 * 
 * `compare_func` will be called with `key` as the first parameter and the
 * value from the #GtkListStore row as the second parameter. The third and
 * final parameter is `compare_data`.
 * @param store A #GtkListStore
 * @param key A key to compare to when binary searching
 * @param compare_column the column containing the data to compare
 * @param compare_func A callback to compare
 */
function gtk_list_store_insert_sorted(store: Gtk.ListStore, key: (any | null), compare_column: number, compare_func: GLib.CompareDataFunc): Gtk.TreeIter
/**
 * Like gtk_text_buffer_remove_tag() but allows specifying that the tags
 * should be removed one at a time to avoid over-damaging the views
 * displaying `buffer`.
 * @param buffer 
 * @param tag 
 * @param start 
 * @param end 
 * @param minimal_damage 
 */
function gtk_text_buffer_remove_tag(buffer: Gtk.TextBuffer, tag: Gtk.TextTag, start: Gtk.TextIter, end: Gtk.TextIter, minimal_damage: boolean): void
function gtk_widget_action(widget: Gtk.Widget, group: string, name: string, param: GLib.Variant): boolean
function gtk_widget_action_with_string(widget: Gtk.Widget, group: string, name: string, param: string): boolean
function gtk_widget_add_style_class(widget: Gtk.Widget, class_name: string): void
/**
 * Tries to locate a widget in a hierarchy given it's #GType.
 * 
 * There is not an efficient implementation of this method, so use it
 * only when the hierarchy of widgets is small.
 * @param widget 
 * @param type 
 * @returns A widget or %NULL
 */
function gtk_widget_find_child_typed(widget: Gtk.Widget, type: GObject.GType): (Gtk.Widget | null)
/**
 * This is similar to gtk_widget_get_ancestor(), but looks for relatives
 * via properties such as #GtkPopover:relative-to and others.
 * @param widget a #GtkWidget
 * @param relative_type the type of widget to locate
 * @returns A #GtkWidget or %NULL.
 */
function gtk_widget_get_relative(widget: Gtk.Widget, relative_type: GObject.GType): (Gtk.Widget | null)
function gtk_widget_hide_with_fade(widget: Gtk.Widget): void
/**
 * This function is like gtk_widget_is_ancestor() except that it checks
 * various relative widgets that are not in the direct hierarchy of
 * widgets. That includes #GtkMenu:attach-widget,
 * #GtkPopover:relative-to, and #GtkWindow:transient-for.
 * @param widget a #GtkWidget
 * @param ancestor a #GtkWidget that might be an ancestor
 * @returns %TRUE if @ancestor is an ancestor or relative for @widget.
 */
function gtk_widget_is_ancestor_or_relative(widget: Gtk.Widget, ancestor: Gtk.Widget): boolean
/**
 * This function will find all of the actions on `from_widget` in various
 * groups and add them to `widget`. As this just copies the action groups
 * over, note that it does not allow for muxing items within the same
 * group.
 * 
 * You should specify a key for `mux_key` so that if the same mux key is
 * seen again, the previous muxings will be removed.
 * @param widget a #GtkWidget
 * @param from_widget A #GtkWidget containing the groups to copy
 * @param mux_key a unique key to represent the muxing
 */
function gtk_widget_mux_action_groups(widget: Gtk.Widget, from_widget: Gtk.Widget, mux_key?: (string | null)): void
function gtk_widget_remove_style_class(widget: Gtk.Widget, class_name: string): void
function gtk_widget_show_with_fade(widget: Gtk.Widget): void
function levenshtein(needle: string, haystack: string): number
function overlay_add_child(self: DockOverlay, child: Gtk.Widget, type: string): void
/**
 * This function will generate CSS suitable for Gtk's CSS engine
 * based on the properties of the #PangoFontDescription.
 * @param font_desc 
 * @returns A newly allocated string containing the    CSS describing the font description.
 */
function pango_font_description_to_css(font_desc: Pango.FontDescription): string
/**
 * Creates a shade of the color `rgba` by multiplying its saturation and lightness by `k`.
 * 
 * Values of `k` greater than 1 will make the color brighter, while values less than 1 will make it
 * darker. The alpha value will remain the same.
 * @param rgba a #GdkRGBA to shade
 * @param k the factor by which to shade the input color
 */
function rgba_shade(rgba: Gdk.RGBA, k: number): Gdk.RGBA
function shortcut_chord_equal(data1?: (any | null), data2?: (any | null)): boolean
function shortcut_chord_hash(data?: (any | null)): number
function shortcut_chord_table_get_type(): GObject.GType
interface CounterForeachFunc {
    (counter: Counter): void
}
interface DirectoryModelVisibleFunc {
    (self: DirectoryModel, directory: Gio.File, file_info: Gio.FileInfo): boolean
}
interface ListModelFilterFunc<A = GObject.Object> {
    (object: A): boolean
}
interface RecursiveIgnoreFunc {
    (file: Gio.File): boolean
}
interface ShortcutChordTableForeach {
    (chord: ShortcutChord, chord_data?: (any | null)): void
}
interface StackListCreateWidgetFunc<A = GObject.Object> {
    (item: A): Gtk.Widget
}
interface SuggestionPositionFunc {
    (entry: SuggestionEntry, area: Gdk.Rectangle, is_absolute: boolean): void
}
interface TaskCacheCallback {
    (self: TaskCache, key: (any | null), task: Gio.Task): void
}
interface TreeFilterFunc {
    (tree: Tree, node: TreeNode): boolean
}
interface TreeFindFunc {
    (tree: Tree, node: TreeNode, child: TreeNode): boolean
}
interface TreeNodeCompareFunc {
    (a: TreeNode, b: TreeNode): number
}
interface TrieTraverseFunc {
    (dzl_trie: Trie, key: string, value?: (any | null)): boolean
}
enum FileTransferFlags {
    NONE,
    MOVE,
}
enum PropertiesFlags {
    NONE,
    STATEFUL_BOOLEANS,
}
enum ShortcutPhase {
    DISPATCH,
    /**
     * Indicates the capture phase of the shortcut
     *   activation. This allows parent widgets to intercept the keybinding before
     *   it is dispatched to the target #GdkWindow.
     */
    CAPTURE,
    BUBBLE,
    GLOBAL,
}
enum TabStyle {
    ICONS,
    TEXT,
    BOTH,
}
module Animation {

    // Signal callback interfaces

    interface Tick {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProps extends GObject.InitiallyUnowned.ConstructorProps {
duration: number;
    frame_clock: Gdk.FrameClock;
    frameClock: Gdk.FrameClock;
    mode: AnimationMode;
    target: GObject.Object;
    }

}

class Animation extends GObject.InitiallyUnowned {

    // Own properties of Dazzle.Animation

    /**
     * The "duration" property is the total number of milliseconds that the
     * animation should run before being completed.
     */
    set duration(val: number);
    set frame_clock(val: Gdk.FrameClock);
    set frameClock(val: Gdk.FrameClock);
    /**
     * The "mode" property is the Alpha function that should be used to
     * determine the offset within the animation based on the current
     * offset in the animations duration.
     */
    set mode(val: AnimationMode);
    /**
     * The "target" property is the #GObject that should have its properties
     * animated.
     */
    set target(val: GObject.Object);

    // Constructors of Dazzle.Animation


constructor(properties?: Partial<Animation.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own signals of Dazzle.Animation

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'tick', callback: ((_source: this) => void)): number
    connect_after(signal: 'tick', callback: ((_source: this) => void)): number
    emit(signal: 'tick'): void

    // Own static methods of Dazzle.Animation

    static calculate_duration(monitor: Gdk.Monitor, from_value: number, to_value: number): number

    // Own methods of Dazzle.Animation

    /**
     * Adds a new property to the set of properties to be animated during the
     * lifetime of the animation.
     * 
     * Side effects: None.
     * @param pspec A #ParamSpec of @target or a #GtkWidget<!-- -->'s parent.
     * @param value The new value for the property at the end of the animation.
     */
    add_property(pspec: GObject.ParamSpec, value: GObject.Value): void
    /**
     * Start the animation. When the animation stops, the internal reference will
     * be dropped and the animation may be finalized.
     * 
     * Side effects: None.
     */
    start(): void
    /**
     * Stops a running animation. The internal reference to the animation is
     * dropped and therefore may cause the object to finalize.
     * 
     * As a convenience, this function accepts %NULL for `animation` but
     * does nothing if that should occur.
     */
    stop(): void
}

module Application {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Application.ConstructorProps, Gio.ActionGroup.ConstructorProps, Gio.ActionMap.ConstructorProps {
menu_manager: MenuManager;
    menuManager: MenuManager;
    shortcut_manager: ShortcutManager;
    shortcutManager: ShortcutManager;
    theme_manager: ThemeManager;
    themeManager: ThemeManager;
    }

}

class Application extends Gtk.Application implements Gio.ActionGroup, Gio.ActionMap {

    // Own properties of Dazzle.Application

    get menu_manager(): MenuManager;
    get menuManager(): MenuManager;
    get shortcut_manager(): ShortcutManager;
    get shortcutManager(): ShortcutManager;
    get theme_manager(): ThemeManager;
    get themeManager(): ThemeManager;

    // Constructors of Dazzle.Application


constructor(properties?: Partial<Application.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](application_id: string, flags: Gio.ApplicationFlags): Application;
// Conflicted with Gtk.Application.new

static ["new"](...args: never[]): any;

    // Own virtual methods of Dazzle.Application

    /**
     * This adds `resource_path` to the list of "automatic resources".
     * 
     * If `resource_path` starts with "resource://", then the corresponding
     * #GResources path will be searched for resources. Otherwise, `resource_path`
     * should be a path to a location on disk.
     * 
     * The #DzlApplication will locate resources such as CSS themes, icons, and
     * keyboard shortcuts using `resource_path`.
     * @param resource_path the location of the resources.
     */
    vfunc_add_resources(resource_path: string): void
    /**
     * This attempts to undo as many side-effects as possible from a call to
     * dzl_application_add_resources().
     * @param resource_path the location of the resources.
     */
    vfunc_remove_resources(resource_path: string): void

    // Own methods of Dazzle.Application

    /**
     * This adds `resource_path` to the list of "automatic resources".
     * 
     * If `resource_path` starts with "resource://", then the corresponding
     * #GResources path will be searched for resources. Otherwise, `resource_path`
     * should be a path to a location on disk.
     * 
     * The #DzlApplication will locate resources such as CSS themes, icons, and
     * keyboard shortcuts using `resource_path`.
     * @param resource_path the location of the resources.
     */
    add_resources(resource_path: string): void
    /**
     * Similar to gtk_application_get_menu_by_id() but takes into account
     * menu merging which could have occurred upon loading plugins.
     * @param menu_id the id of the menu to locate
     * @returns A #GMenu
     */
    get_menu_by_id(menu_id: string): Gio.Menu
    /**
     * Gets the menu manager for the application.
     * @returns A #DzlMenuManager
     */
    get_menu_manager(): MenuManager
    /**
     * Gets the #DzlShortcutManager for the application.
     * @returns A #DzlShortcutManager
     */
    get_shortcut_manager(): ShortcutManager
    /**
     * Get the theme manager for the application.
     * @returns A #DzlThemeManager
     */
    get_theme_manager(): ThemeManager
    /**
     * This attempts to undo as many side-effects as possible from a call to
     * dzl_application_add_resources().
     * @param resource_path the location of the resources.
     */
    remove_resources(resource_path: string): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ApplicationWindow {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.ApplicationWindow.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gio.ActionGroup.ConstructorProps, Gio.ActionMap.ConstructorProps, Gtk.Buildable.ConstructorProps {
fullscreen: boolean | any;
    titlebar_animation: TitlebarAnimation;
    titlebarAnimation: TitlebarAnimation;
    }

}

class ApplicationWindow extends Gtk.ApplicationWindow implements Atk.ImplementorIface, Gio.ActionGroup, Gio.ActionMap, Gtk.Buildable {

    // Own properties of Dazzle.ApplicationWindow

    /**
     * The "fullscreen" property denotes if the window is in the fullscreen
     * state. The titlebar of the #DzlApplicationWindow contains a revealer
     * which will be repurposed into a floating bar while the window is in
     * the fullscreen mode.
     * 
     * Set this property to %FALSE to unfullscreen.
     */
// This accessor conflicts with a property or field in a parent class or interface.
     fullscreen: boolean | any;
    get titlebar_animation(): TitlebarAnimation;
    get titlebarAnimation(): TitlebarAnimation;

    // Constructors of Dazzle.ApplicationWindow


constructor(properties?: Partial<ApplicationWindow.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own virtual methods of Dazzle.ApplicationWindow

    /**
     * Gets if the window is in the fullscreen state.
     */
    vfunc_get_fullscreen(): boolean
    /**
     * Sets the #DzlApplicationWindow into either the fullscreen or unfullscreen
     * state based on `fullscreen`.
     * 
     * The titlebar for the window is contained within a #GtkRevealer which is
     * repurposed as a floating bar when the application is in fullscreen mode.
     * 
     * See dzl_application_window_get_fullscreen() to get the current fullscreen
     * state.
     * @param fullscreen if the window should be in the fullscreen state
     */
    vfunc_set_fullscreen(fullscreen: boolean): void

    // Own methods of Dazzle.ApplicationWindow

    /**
     * Gets if the window is in the fullscreen state.
     * @returns %TRUE if @self is fullscreen, otherwise %FALSE.
     */
    get_fullscreen(): boolean
    /**
     * Gets the titlebar for the window, if there is one.
     * @returns A #GtkWidget or %NULL
     */
    get_titlebar(): Gtk.Widget
    get_titlebar(...args: never[]): any
    get_titlebar_animation(): TitlebarAnimation
    /**
     * Sets the #DzlApplicationWindow into either the fullscreen or unfullscreen
     * state based on `fullscreen`.
     * 
     * The titlebar for the window is contained within a #GtkRevealer which is
     * repurposed as a floating bar when the application is in fullscreen mode.
     * 
     * See dzl_application_window_get_fullscreen() to get the current fullscreen
     * state.
     * @param fullscreen if the window should be in the fullscreen state
     */
    set_fullscreen(fullscreen: boolean): void
    /**
     * Sets the titlebar for the window.
     * 
     * Generally, you want to do this from your GTK ui template by setting
     * the &lt;child type="titlebar"&gt;
     * @param titlebar 
     */
    set_titlebar(titlebar: Gtk.Widget): void
    set_titlebar(...args: never[]): any

// Inherited methods
/**
 * Emits the #GActionGroup::action-added signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 */
action_added(action_name: string): void
/**
 * Emits the #GActionGroup::action-enabled-changed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 * @param enabled whether or not the action is now enabled
 */
action_enabled_changed(action_name: string, enabled: boolean): void
/**
 * Emits the #GActionGroup::action-removed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 */
action_removed(action_name: string): void
/**
 * Emits the #GActionGroup::action-state-changed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 * @param state the new state of the named action
 */
action_state_changed(action_name: string, state: GLib.Variant): void
/**
 * Activate the named action within `action_group`.
 * 
 * If the action is expecting a parameter, then the correct type of
 * parameter must be given as `parameter`.  If the action is expecting no
 * parameters then `parameter` must be %NULL.  See
 * g_action_group_get_action_parameter_type().
 * 
 * If the #GActionGroup implementation supports asynchronous remote
 * activation over D-Bus, this call may return before the relevant
 * D-Bus traffic has been sent, or any replies have been received. In
 * order to block on such asynchronous activation calls,
 * g_dbus_connection_flush() should be called prior to the code, which
 * depends on the result of the action activation. Without flushing
 * the D-Bus connection, there is no guarantee that the action would
 * have been activated.
 * 
 * The following code which runs in a remote app instance, shows an
 * example of a "quit" action being activated on the primary app
 * instance over D-Bus. Here g_dbus_connection_flush() is called
 * before `exit()`. Without g_dbus_connection_flush(), the "quit" action
 * may fail to be activated on the primary instance.
 * 
 * 
 * ```c
 * // call "quit" action on primary instance
 * g_action_group_activate_action (G_ACTION_GROUP (app), "quit", NULL);
 * 
 * // make sure the action is activated now
 * g_dbus_connection_flush (...);
 * 
 * g_debug ("application has been terminated. exiting.");
 * 
 * exit (0);
 * ```
 * 
 * @param action_name the name of the action to activate
 * @param parameter parameters to the activation
 */
activate_action(action_name: string, parameter?: (GLib.Variant | null)): void
/**
 * Request for the state of the named action within `action_group` to be
 * changed to `value`.
 * 
 * The action must be stateful and `value` must be of the correct type.
 * See g_action_group_get_action_state_type().
 * 
 * This call merely requests a change.  The action may refuse to change
 * its state or may change its state to something other than `value`.
 * See g_action_group_get_action_state_hint().
 * 
 * If the `value` GVariant is floating, it is consumed.
 * @param action_name the name of the action to request the change on
 * @param value the new state
 */
change_action_state(action_name: string, value: GLib.Variant): void
/**
 * Checks if the named action within `action_group` is currently enabled.
 * 
 * An action must be enabled in order to be activated or in order to
 * have its state changed from outside callers.
 * @param action_name the name of the action to query
 * @returns whether or not the action is currently enabled
 */
get_action_enabled(action_name: string): boolean
/**
 * Queries the type of the parameter that must be given when activating
 * the named action within `action_group`.
 * 
 * When activating the action using g_action_group_activate_action(),
 * the #GVariant given to that function must be of the type returned
 * by this function.
 * 
 * In the case that this function returns %NULL, you must not give any
 * #GVariant, but %NULL instead.
 * 
 * The parameter type of a particular action will never change but it is
 * possible for an action to be removed and for a new action to be added
 * with the same name but a different parameter type.
 * @param action_name the name of the action to query
 * @returns the parameter type
 */
get_action_parameter_type(action_name: string): (GLib.VariantType | null)
/**
 * Queries the current state of the named action within `action_group`.
 * 
 * If the action is not stateful then %NULL will be returned.  If the
 * action is stateful then the type of the return value is the type
 * given by g_action_group_get_action_state_type().
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @param action_name the name of the action to query
 * @returns the current state of the action
 */
get_action_state(action_name: string): (GLib.Variant | null)
/**
 * Requests a hint about the valid range of values for the state of the
 * named action within `action_group`.
 * 
 * If %NULL is returned it either means that the action is not stateful
 * or that there is no hint about the valid range of values for the
 * state of the action.
 * 
 * If a #GVariant array is returned then each item in the array is a
 * possible value for the state.  If a #GVariant pair (ie: two-tuple) is
 * returned then the tuple specifies the inclusive lower and upper bound
 * of valid values for the state.
 * 
 * In any case, the information is merely a hint.  It may be possible to
 * have a state value outside of the hinted range and setting a value
 * within the range may fail.
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @param action_name the name of the action to query
 * @returns the state range hint
 */
get_action_state_hint(action_name: string): (GLib.Variant | null)
/**
 * Queries the type of the state of the named action within
 * `action_group`.
 * 
 * If the action is stateful then this function returns the
 * #GVariantType of the state.  All calls to
 * g_action_group_change_action_state() must give a #GVariant of this
 * type and g_action_group_get_action_state() will return a #GVariant
 * of the same type.
 * 
 * If the action is not stateful then this function will return %NULL.
 * In that case, g_action_group_get_action_state() will return %NULL
 * and you must not call g_action_group_change_action_state().
 * 
 * The state type of a particular action will never change but it is
 * possible for an action to be removed and for a new action to be added
 * with the same name but a different state type.
 * @param action_name the name of the action to query
 * @returns the state type, if the action is stateful
 */
get_action_state_type(action_name: string): (GLib.VariantType | null)
/**
 * Checks if the named action exists within `action_group`.
 * @param action_name the name of the action to check for
 * @returns whether the named action exists
 */
has_action(action_name: string): boolean
/**
 * Lists the actions contained within `action_group`.
 * 
 * The caller is responsible for freeing the list with g_strfreev() when
 * it is no longer required.
 * @returns a %NULL-terminated array of the names of the actions in the group
 */
list_actions(): string[]
/**
 * Queries all aspects of the named action within an `action_group`.
 * 
 * This function acquires the information available from
 * g_action_group_has_action(), g_action_group_get_action_enabled(),
 * g_action_group_get_action_parameter_type(),
 * g_action_group_get_action_state_type(),
 * g_action_group_get_action_state_hint() and
 * g_action_group_get_action_state() with a single function call.
 * 
 * This provides two main benefits.
 * 
 * The first is the improvement in efficiency that comes with not having
 * to perform repeated lookups of the action in order to discover
 * different things about it.  The second is that implementing
 * #GActionGroup can now be done by only overriding this one virtual
 * function.
 * 
 * The interface provides a default implementation of this function that
 * calls the individual functions, as required, to fetch the
 * information.  The interface also provides default implementations of
 * those functions that call this function.  All implementations,
 * therefore, must override either this function or all of the others.
 * 
 * If the action exists, %TRUE is returned and any of the requested
 * fields (as indicated by having a non-%NULL reference passed in) are
 * filled.  If the action doesn't exist, %FALSE is returned and the
 * fields may or may not have been modified.
 * @param action_name the name of an action in the group
 * @returns %TRUE if the action exists, else %FALSE
 */
query_action(action_name: string): [boolean, boolean, GLib.VariantType | null, GLib.VariantType | null, GLib.Variant | null, GLib.Variant | null]
/**
 * Emits the #GActionGroup::action-added signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 */
vfunc_action_added(action_name: string): void
/**
 * Emits the #GActionGroup::action-enabled-changed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 * @param enabled whether or not the action is now enabled
 */
vfunc_action_enabled_changed(action_name: string, enabled: boolean): void
/**
 * Emits the #GActionGroup::action-removed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 */
vfunc_action_removed(action_name: string): void
/**
 * Emits the #GActionGroup::action-state-changed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 * @param state the new state of the named action
 */
vfunc_action_state_changed(action_name: string, state: GLib.Variant): void
/**
 * Activate the named action within `action_group`.
 * 
 * If the action is expecting a parameter, then the correct type of
 * parameter must be given as `parameter`.  If the action is expecting no
 * parameters then `parameter` must be %NULL.  See
 * g_action_group_get_action_parameter_type().
 * 
 * If the #GActionGroup implementation supports asynchronous remote
 * activation over D-Bus, this call may return before the relevant
 * D-Bus traffic has been sent, or any replies have been received. In
 * order to block on such asynchronous activation calls,
 * g_dbus_connection_flush() should be called prior to the code, which
 * depends on the result of the action activation. Without flushing
 * the D-Bus connection, there is no guarantee that the action would
 * have been activated.
 * 
 * The following code which runs in a remote app instance, shows an
 * example of a "quit" action being activated on the primary app
 * instance over D-Bus. Here g_dbus_connection_flush() is called
 * before `exit()`. Without g_dbus_connection_flush(), the "quit" action
 * may fail to be activated on the primary instance.
 * 
 * 
 * ```c
 * // call "quit" action on primary instance
 * g_action_group_activate_action (G_ACTION_GROUP (app), "quit", NULL);
 * 
 * // make sure the action is activated now
 * g_dbus_connection_flush (...);
 * 
 * g_debug ("application has been terminated. exiting.");
 * 
 * exit (0);
 * ```
 * 
 * @param action_name the name of the action to activate
 * @param parameter parameters to the activation
 */
vfunc_activate_action(action_name: string, parameter?: (GLib.Variant | null)): void
/**
 * Request for the state of the named action within `action_group` to be
 * changed to `value`.
 * 
 * The action must be stateful and `value` must be of the correct type.
 * See g_action_group_get_action_state_type().
 * 
 * This call merely requests a change.  The action may refuse to change
 * its state or may change its state to something other than `value`.
 * See g_action_group_get_action_state_hint().
 * 
 * If the `value` GVariant is floating, it is consumed.
 * @param action_name the name of the action to request the change on
 * @param value the new state
 */
vfunc_change_action_state(action_name: string, value: GLib.Variant): void
/**
 * Checks if the named action within `action_group` is currently enabled.
 * 
 * An action must be enabled in order to be activated or in order to
 * have its state changed from outside callers.
 * @param action_name the name of the action to query
 */
vfunc_get_action_enabled(action_name: string): boolean
/**
 * Queries the type of the parameter that must be given when activating
 * the named action within `action_group`.
 * 
 * When activating the action using g_action_group_activate_action(),
 * the #GVariant given to that function must be of the type returned
 * by this function.
 * 
 * In the case that this function returns %NULL, you must not give any
 * #GVariant, but %NULL instead.
 * 
 * The parameter type of a particular action will never change but it is
 * possible for an action to be removed and for a new action to be added
 * with the same name but a different parameter type.
 * @param action_name the name of the action to query
 */
vfunc_get_action_parameter_type(action_name: string): (GLib.VariantType | null)
/**
 * Queries the current state of the named action within `action_group`.
 * 
 * If the action is not stateful then %NULL will be returned.  If the
 * action is stateful then the type of the return value is the type
 * given by g_action_group_get_action_state_type().
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @param action_name the name of the action to query
 */
vfunc_get_action_state(action_name: string): (GLib.Variant | null)
/**
 * Requests a hint about the valid range of values for the state of the
 * named action within `action_group`.
 * 
 * If %NULL is returned it either means that the action is not stateful
 * or that there is no hint about the valid range of values for the
 * state of the action.
 * 
 * If a #GVariant array is returned then each item in the array is a
 * possible value for the state.  If a #GVariant pair (ie: two-tuple) is
 * returned then the tuple specifies the inclusive lower and upper bound
 * of valid values for the state.
 * 
 * In any case, the information is merely a hint.  It may be possible to
 * have a state value outside of the hinted range and setting a value
 * within the range may fail.
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @param action_name the name of the action to query
 */
vfunc_get_action_state_hint(action_name: string): (GLib.Variant | null)
/**
 * Queries the type of the state of the named action within
 * `action_group`.
 * 
 * If the action is stateful then this function returns the
 * #GVariantType of the state.  All calls to
 * g_action_group_change_action_state() must give a #GVariant of this
 * type and g_action_group_get_action_state() will return a #GVariant
 * of the same type.
 * 
 * If the action is not stateful then this function will return %NULL.
 * In that case, g_action_group_get_action_state() will return %NULL
 * and you must not call g_action_group_change_action_state().
 * 
 * The state type of a particular action will never change but it is
 * possible for an action to be removed and for a new action to be added
 * with the same name but a different state type.
 * @param action_name the name of the action to query
 */
vfunc_get_action_state_type(action_name: string): (GLib.VariantType | null)
/**
 * Checks if the named action exists within `action_group`.
 * @param action_name the name of the action to check for
 */
vfunc_has_action(action_name: string): boolean
/**
 * Lists the actions contained within `action_group`.
 * 
 * The caller is responsible for freeing the list with g_strfreev() when
 * it is no longer required.
 */
vfunc_list_actions(): string[]
/**
 * Queries all aspects of the named action within an `action_group`.
 * 
 * This function acquires the information available from
 * g_action_group_has_action(), g_action_group_get_action_enabled(),
 * g_action_group_get_action_parameter_type(),
 * g_action_group_get_action_state_type(),
 * g_action_group_get_action_state_hint() and
 * g_action_group_get_action_state() with a single function call.
 * 
 * This provides two main benefits.
 * 
 * The first is the improvement in efficiency that comes with not having
 * to perform repeated lookups of the action in order to discover
 * different things about it.  The second is that implementing
 * #GActionGroup can now be done by only overriding this one virtual
 * function.
 * 
 * The interface provides a default implementation of this function that
 * calls the individual functions, as required, to fetch the
 * information.  The interface also provides default implementations of
 * those functions that call this function.  All implementations,
 * therefore, must override either this function or all of the others.
 * 
 * If the action exists, %TRUE is returned and any of the requested
 * fields (as indicated by having a non-%NULL reference passed in) are
 * filled.  If the action doesn't exist, %FALSE is returned and the
 * fields may or may not have been modified.
 * @param action_name the name of an action in the group
 */
vfunc_query_action(action_name: string): [boolean, boolean, GLib.VariantType | null, GLib.VariantType | null, GLib.Variant | null, GLib.Variant | null]
/**
 * Adds an action to the `action_map`.
 * 
 * If the action map already contains an action with the same name
 * as `action` then the old action is dropped from the action map.
 * 
 * The action map takes its own reference on `action`.
 * @param action a #GAction
 */
add_action(action: Gio.Action): void
/**
 * A convenience function for creating multiple #GSimpleAction instances
 * and adding them to a #GActionMap.
 * 
 * Each action is constructed as per one #GActionEntry.
 * 
 * 
 * ```c
 * static void
 * activate_quit (GSimpleAction *simple,
 *                GVariant      *parameter,
 *                gpointer       user_data)
 * {
 *   exit (0);
 * }
 * 
 * static void
 * activate_print_string (GSimpleAction *simple,
 *                        GVariant      *parameter,
 *                        gpointer       user_data)
 * {
 *   g_print ("%s\n", g_variant_get_string (parameter, NULL));
 * }
 * 
 * static GActionGroup *
 * create_action_group (void)
 * {
 *   const GActionEntry entries[] = {
 *     { "quit",         activate_quit              },
 *     { "print-string", activate_print_string, "s" }
 *   };
 *   GSimpleActionGroup *group;
 * 
 *   group = g_simple_action_group_new ();
 *   g_action_map_add_action_entries (G_ACTION_MAP (group), entries, G_N_ELEMENTS (entries), NULL);
 * 
 *   return G_ACTION_GROUP (group);
 * }
 * ```
 * 
 * @param entries a pointer to           the first item in an array of #GActionEntry structs
 * @param user_data the user data for signal connections
 */
add_action_entries(entries: Gio.ActionEntry[], user_data?: (any | null)): void
/**
 * Looks up the action with the name `action_name` in `action_map`.
 * 
 * If no such action exists, returns %NULL.
 * @param action_name the name of an action
 * @returns a #GAction, or %NULL
 */
lookup_action(action_name: string): (Gio.Action | null)
/**
 * Removes the named action from the action map.
 * 
 * If no action of this name is in the map then nothing happens.
 * @param action_name the name of the action
 */
remove_action(action_name: string): void
/**
 * Remove actions from a #GActionMap. This is meant as the reverse of
 * g_action_map_add_action_entries().
 * 
 * 
 * 
 * ```c
 * static const GActionEntry entries[] = {
 *     { "quit",         activate_quit              },
 *     { "print-string", activate_print_string, "s" }
 * };
 * 
 * void
 * add_actions (GActionMap *map)
 * {
 *   g_action_map_add_action_entries (map, entries, G_N_ELEMENTS (entries), NULL);
 * }
 * 
 * void
 * remove_actions (GActionMap *map)
 * {
 *   g_action_map_remove_action_entries (map, entries, G_N_ELEMENTS (entries));
 * }
 * ```
 * 
 * @param entries a pointer to           the first item in an array of #GActionEntry structs
 */
remove_action_entries(entries: Gio.ActionEntry[]): void
/**
 * Adds an action to the `action_map`.
 * 
 * If the action map already contains an action with the same name
 * as `action` then the old action is dropped from the action map.
 * 
 * The action map takes its own reference on `action`.
 * @param action a #GAction
 */
vfunc_add_action(action: Gio.Action): void
/**
 * Looks up the action with the name `action_name` in `action_map`.
 * 
 * If no such action exists, returns %NULL.
 * @param action_name the name of an action
 */
vfunc_lookup_action(action_name: string): (Gio.Action | null)
/**
 * Removes the named action from the action map.
 * 
 * If no action of this name is in the map then nothing happens.
 * @param action_name the name of the action
 */
vfunc_remove_action(action_name: string): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module Bin {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {

    }

}

class Bin extends Gtk.Bin implements Atk.ImplementorIface, Gtk.Buildable {

    // Constructors of Dazzle.Bin


constructor(properties?: Partial<Bin.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): Bin;

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module BindingGroup {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
source: GObject.Object;
    }

}

/**
 * #DzlBindingGroup manages to simplify the process of binding
 * many properties from a #GObject as a group. As such there is no API
 * to unbind a property from the group.
 * 
 * In particular, this allows you to change the source instance for the
 * bindings. This automatically causes the unbinding of the properties
 * from the old instance and binding to the new instance.
 * 
 * This should not be confused with #GtkBindingGroup.
 */
class BindingGroup extends GObject.Object {

    // Own properties of Dazzle.BindingGroup

    /**
     * The source object used for binding properties.
     */
    get source(): GObject.Object;
    set source(val: GObject.Object);

    // Constructors of Dazzle.BindingGroup


constructor(properties?: Partial<BindingGroup.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): BindingGroup;

    // Own methods of Dazzle.BindingGroup

    /**
     * Creates a binding between `source_property` on the source object
     * and `target_property` on `target`. Whenever the `source_property`
     * is changed the `target_property` is updated using the same value.
     * The binding flags #G_BINDING_SYNC_CREATE is automatically specified.
     * 
     * See: g_object_bind_property().
     * @param source_property the property on the source to bind
     * @param target the target #GObject
     * @param target_property the property on @target to bind
     * @param flags the flags used to create the #GBinding
     */
    bind(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): void
    /**
     * Creates a binding between `source_property` on the source object and
     * `target_property` on `target,` allowing you to set the transformation
     * functions to be used by the binding. The binding flags
     * #G_BINDING_SYNC_CREATE is automatically specified.
     * 
     * See: g_object_bind_property_full().
     * @param source_property the property on the source to bind
     * @param target the target #GObject
     * @param target_property the property on @target to bind
     * @param flags the flags used to create the #GBinding
     * @param transform_to the transformation function     from the source object to the @target, or %NULL to use the default
     * @param transform_from the transformation function     from the @target to the source object, or %NULL to use the default
     */
    bind_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null)): void
    /**
     * Creates a binding between `source_property` on the source object and
     * `target_property` on `target,` allowing you to set the transformation
     * functions to be used by the binding. The binding flags
     * #G_BINDING_SYNC_CREATE is automatically specified.
     * 
     * This function is the language bindings friendly version of
     * dzl_binding_group_bind_property_full(), using #GClosures
     * instead of function pointers.
     * 
     * See: g_object_bind_property_with_closures().
     * @param source_property the property on the source to bind
     * @param target the target #GObject
     * @param target_property the property on @target to bind
     * @param flags the flags used to create the #GBinding
     * @param transform_to a #GClosure wrapping the     transformation function from the source object to the @target,     or %NULL to use the default
     * @param transform_from a #GClosure wrapping the     transformation function from the @target to the source object,     or %NULL to use the default
     */
    bind_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.Closure | null), transform_from?: (GObject.Closure | null)): void
    /**
     * Gets the source object used for binding properties.
     * @returns the source object.
     */
    get_source<T = GObject.Object>(): T
    /**
     * Sets `source` as the source object used for creating property
     * bindings. If there is already a source object all bindings from it
     * will be removed.
     * 
     * Note: All properties that have been bound must exist on `source`.
     * @param source the source #GObject
     */
    set_source(source?: (GObject.Object | null)): void
}

module BoldingLabel {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Label.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
bold: boolean;
    }

}

class BoldingLabel extends Gtk.Label implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.BoldingLabel

    set bold(val: boolean);

    // Constructors of Dazzle.BoldingLabel


constructor(properties?: Partial<BoldingLabel.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](str: string, bold: boolean): BoldingLabel;
// Conflicted with Gtk.Label.new

static ["new"](...args: never[]): any;

static new_with_mnemonic(str: string, bold: boolean): BoldingLabel;
// Conflicted with Gtk.Label.new_with_mnemonic

static new_with_mnemonic(...args: never[]): any;

    // Own methods of Dazzle.BoldingLabel

    set_bold(bold: boolean): void
    set_weight(weight: Pango.Weight): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module Box {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Box.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.Orientable.ConstructorProps {
max_width_request: number;
    maxWidthRequest: number;
    }

}

class Box extends Gtk.Box implements Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Dazzle.Box

    get max_width_request(): number;
    set max_width_request(val: number);
    get maxWidthRequest(): number;
    set maxWidthRequest(val: number);

    // Constructors of Dazzle.Box


constructor(properties?: Partial<Box.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): Box;

    // Own methods of Dazzle.Box

    get_max_width_request(): number
    /**
     * Gets the nth child of `self`.
     * @param nth the index of the child starting from 0
     * @returns A #GtkWidget or %NULL
     */
    get_nth_child(nth: number): (Gtk.Widget | null)
    set_max_width_request(max_width_request: number): void

// Inherited properties
/**
 * The orientation of the orientable.
 */
get orientation(): Gtk.Orientation;
set orientation(val: Gtk.Orientation);

// Inherited methods
/**
 * Retrieves the orientation of the `orientable`.
 * @returns the orientation of the @orientable.
 */
get_orientation(): Gtk.Orientation
/**
 * Sets the orientation of the `orientable`.
 * @param orientation the orientable’s new orientation.
 */
set_orientation(orientation: Gtk.Orientation): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module BoxTheatric {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
alpha: number;
    background: string;
    height: number;
    icon: Gio.Icon;
    surface: any;
    target: Gtk.Widget;
    width: number;
    x: number;
    y: number;
    }

}

class BoxTheatric extends GObject.Object {

    // Own properties of Dazzle.BoxTheatric

    get alpha(): number;
    set alpha(val: number);
    get background(): string;
    set background(val: string);
    get height(): number;
    set height(val: number);
    get icon(): Gio.Icon;
    set icon(val: Gio.Icon);
    set surface(val: any);
    get target(): Gtk.Widget;
    get width(): number;
    set width(val: number);
    get x(): number;
    set x(val: number);
    get y(): number;
    set y(val: number);

    // Constructors of Dazzle.BoxTheatric


constructor(properties?: Partial<BoxTheatric.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;

}

module CenteringBin {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
max_width_request: number;
    maxWidthRequest: number;
    }

}

/**
 * First off, you probably want to use GtkBox with a center widget instead
 * of this widget. However, the case where this widget is useful is when
 * you cannot control your layout within the width of the toplevel, but
 * still want your child centered within the toplevel.
 * 
 * This is done by translating coordinates of the widget with respect to
 * the toplevel and anchoring the child at TRUE_CENTER-(alloc.width/2).
 */
class CenteringBin extends Gtk.Bin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.CenteringBin

    get max_width_request(): number;
    set max_width_request(val: number);
    get maxWidthRequest(): number;
    set maxWidthRequest(val: number);

    // Constructors of Dazzle.CenteringBin


constructor(properties?: Partial<CenteringBin.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): CenteringBin;

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ChildPropertyAction {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps, Gio.Action.ConstructorProps {
child: Gtk.Widget;
    child_property_name: string;
    childPropertyName: string;
    container: Gtk.Container;
    }

}

class ChildPropertyAction extends GObject.Object implements Gio.Action {

    // Own properties of Dazzle.ChildPropertyAction

    get child(): Gtk.Widget;
    get child_property_name(): string;
    get childPropertyName(): string;
    get container(): Gtk.Container;

    // Constructors of Dazzle.ChildPropertyAction


constructor(properties?: Partial<ChildPropertyAction.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own static methods of Dazzle.ChildPropertyAction

    /**
     * This creates a new #GAction that will change when the underlying child
     * property of `container` changes for `child`.
     * @param name the name of the action
     * @param container the container of the widget
     * @param child the widget for the child property
     * @param child_property_name the name of the child property
     */
    static ["new"](name: string, container: Gtk.Container, child: Gtk.Widget, child_property_name: string): Gio.Action

// Inherited properties
/**
 * If `action` is currently enabled.
 * 
 * If the action is disabled then calls to g_action_activate() and
 * g_action_change_state() have no effect.
 */
get enabled(): boolean;
/**
 * The name of the action.  This is mostly meaningful for identifying
 * the action once it has been added to a #GActionGroup. It is immutable.
 */
get name(): string;
/**
 * The type of the parameter that must be given when activating the
 * action. This is immutable, and may be %NULL if no parameter is needed when
 * activating the action.
 */
get parameter_type(): GLib.VariantType;
/**
 * The type of the parameter that must be given when activating the
 * action. This is immutable, and may be %NULL if no parameter is needed when
 * activating the action.
 */
get parameterType(): GLib.VariantType;
/**
 * The state of the action, or %NULL if the action is stateless.
 */
get state(): GLib.Variant;
/**
 * The #GVariantType of the state that the action has, or %NULL if the
 * action is stateless. This is immutable.
 */
get state_type(): GLib.VariantType;
/**
 * The #GVariantType of the state that the action has, or %NULL if the
 * action is stateless. This is immutable.
 */
get stateType(): GLib.VariantType;

// Inherited methods
/**
 * Activates the action.
 * 
 * `parameter` must be the correct type of parameter for the action (ie:
 * the parameter type given at construction time).  If the parameter
 * type was %NULL then `parameter` must also be %NULL.
 * 
 * If the `parameter` GVariant is floating, it is consumed.
 * @param parameter the parameter to the activation
 */
activate(parameter?: (GLib.Variant | null)): void
/**
 * Request for the state of `action` to be changed to `value`.
 * 
 * The action must be stateful and `value` must be of the correct type.
 * See g_action_get_state_type().
 * 
 * This call merely requests a change.  The action may refuse to change
 * its state or may change its state to something other than `value`.
 * See g_action_get_state_hint().
 * 
 * If the `value` GVariant is floating, it is consumed.
 * @param value the new state
 */
change_state(value: GLib.Variant): void
/**
 * Checks if `action` is currently enabled.
 * 
 * An action must be enabled in order to be activated or in order to
 * have its state changed from outside callers.
 * @returns whether the action is enabled
 */
get_enabled(): boolean
/**
 * Queries the name of `action`.
 * @returns the name of the action
 */
get_name(): string
/**
 * Queries the type of the parameter that must be given when activating
 * `action`.
 * 
 * When activating the action using g_action_activate(), the #GVariant
 * given to that function must be of the type returned by this function.
 * 
 * In the case that this function returns %NULL, you must not give any
 * #GVariant, but %NULL instead.
 * @returns the parameter type
 */
get_parameter_type(): (GLib.VariantType | null)
/**
 * Queries the current state of `action`.
 * 
 * If the action is not stateful then %NULL will be returned.  If the
 * action is stateful then the type of the return value is the type
 * given by g_action_get_state_type().
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @returns the current state of the action
 */
get_state(): (GLib.Variant | null)
/**
 * Requests a hint about the valid range of values for the state of
 * `action`.
 * 
 * If %NULL is returned it either means that the action is not stateful
 * or that there is no hint about the valid range of values for the
 * state of the action.
 * 
 * If a #GVariant array is returned then each item in the array is a
 * possible value for the state.  If a #GVariant pair (ie: two-tuple) is
 * returned then the tuple specifies the inclusive lower and upper bound
 * of valid values for the state.
 * 
 * In any case, the information is merely a hint.  It may be possible to
 * have a state value outside of the hinted range and setting a value
 * within the range may fail.
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @returns the state range hint
 */
get_state_hint(): (GLib.Variant | null)
/**
 * Queries the type of the state of `action`.
 * 
 * If the action is stateful (e.g. created with
 * g_simple_action_new_stateful()) then this function returns the
 * #GVariantType of the state.  This is the type of the initial value
 * given as the state. All calls to g_action_change_state() must give a
 * #GVariant of this type and g_action_get_state() will return a
 * #GVariant of the same type.
 * 
 * If the action is not stateful (e.g. created with g_simple_action_new())
 * then this function will return %NULL. In that case, g_action_get_state()
 * will return %NULL and you must not call g_action_change_state().
 * @returns the state type, if the action is stateful
 */
get_state_type(): (GLib.VariantType | null)
/**
 * Activates the action.
 * 
 * `parameter` must be the correct type of parameter for the action (ie:
 * the parameter type given at construction time).  If the parameter
 * type was %NULL then `parameter` must also be %NULL.
 * 
 * If the `parameter` GVariant is floating, it is consumed.
 * @param parameter the parameter to the activation
 */
vfunc_activate(parameter?: (GLib.Variant | null)): void
/**
 * Request for the state of `action` to be changed to `value`.
 * 
 * The action must be stateful and `value` must be of the correct type.
 * See g_action_get_state_type().
 * 
 * This call merely requests a change.  The action may refuse to change
 * its state or may change its state to something other than `value`.
 * See g_action_get_state_hint().
 * 
 * If the `value` GVariant is floating, it is consumed.
 * @param value the new state
 */
vfunc_change_state(value: GLib.Variant): void
/**
 * Checks if `action` is currently enabled.
 * 
 * An action must be enabled in order to be activated or in order to
 * have its state changed from outside callers.
 */
vfunc_get_enabled(): boolean
/**
 * Queries the name of `action`.
 */
vfunc_get_name(): string
/**
 * Queries the type of the parameter that must be given when activating
 * `action`.
 * 
 * When activating the action using g_action_activate(), the #GVariant
 * given to that function must be of the type returned by this function.
 * 
 * In the case that this function returns %NULL, you must not give any
 * #GVariant, but %NULL instead.
 */
vfunc_get_parameter_type(): (GLib.VariantType | null)
/**
 * Queries the current state of `action`.
 * 
 * If the action is not stateful then %NULL will be returned.  If the
 * action is stateful then the type of the return value is the type
 * given by g_action_get_state_type().
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 */
vfunc_get_state(): (GLib.Variant | null)
/**
 * Requests a hint about the valid range of values for the state of
 * `action`.
 * 
 * If %NULL is returned it either means that the action is not stateful
 * or that there is no hint about the valid range of values for the
 * state of the action.
 * 
 * If a #GVariant array is returned then each item in the array is a
 * possible value for the state.  If a #GVariant pair (ie: two-tuple) is
 * returned then the tuple specifies the inclusive lower and upper bound
 * of valid values for the state.
 * 
 * In any case, the information is merely a hint.  It may be possible to
 * have a state value outside of the hinted range and setting a value
 * within the range may fail.
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 */
vfunc_get_state_hint(): (GLib.Variant | null)
/**
 * Queries the type of the state of `action`.
 * 
 * If the action is stateful (e.g. created with
 * g_simple_action_new_stateful()) then this function returns the
 * #GVariantType of the state.  This is the type of the initial value
 * given as the state. All calls to g_action_change_state() must give a
 * #GVariant of this type and g_action_get_state() will return a
 * #GVariant of the same type.
 * 
 * If the action is not stateful (e.g. created with g_simple_action_new())
 * then this function will return %NULL. In that case, g_action_get_state()
 * will return %NULL and you must not call g_action_change_state().
 */
vfunc_get_state_type(): (GLib.VariantType | null)
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ColumnLayout {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Container.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
column_spacing: number;
    columnSpacing: number;
    column_width: number;
    columnWidth: number;
    max_columns: number;
    maxColumns: number;
    row_spacing: number;
    rowSpacing: number;
    }

}

class ColumnLayout extends Gtk.Container implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.ColumnLayout

    get column_spacing(): number;
    set column_spacing(val: number);
    get columnSpacing(): number;
    set columnSpacing(val: number);
    get column_width(): number;
    set column_width(val: number);
    get columnWidth(): number;
    set columnWidth(val: number);
    get max_columns(): number;
    set max_columns(val: number);
    get maxColumns(): number;
    set maxColumns(val: number);
    get row_spacing(): number;
    set row_spacing(val: number);
    get rowSpacing(): number;
    set rowSpacing(val: number);

    // Constructors of Dazzle.ColumnLayout


constructor(properties?: Partial<ColumnLayout.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): ColumnLayout;

    // Own methods of Dazzle.ColumnLayout

    get_column_spacing(): number
    get_column_width(): number
    get_max_columns(): number
    get_row_spacing(): number
    set_column_spacing(column_spacing: number): void
    set_column_width(column_width: number): void
    set_max_columns(max_columns: number): void
    set_row_spacing(row_spacing: number): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module CountersWindow {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Window.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {

    }

}

class CountersWindow extends Gtk.Window implements Atk.ImplementorIface, Gtk.Buildable {

    // Constructors of Dazzle.CountersWindow


constructor(properties?: Partial<CountersWindow.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): CountersWindow;

    // Own methods of Dazzle.CountersWindow

    /**
     * Gets the currently viewed arena, if any.
     * @returns A #DzlCounterArena or %NULL.
     */
    get_arena(): (CounterArena | null)
    set_arena(arena: CounterArena): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module CpuGraph {

    // Constructor properties interface

    interface ConstructorProps extends GraphView.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
max_samples: number;
    maxSamples: number;
    timespan: number;
    }

}

class CpuGraph extends GraphView implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.CpuGraph

    get max_samples(): number;
    get maxSamples(): number;
    get timespan(): number;

    // Constructors of Dazzle.CpuGraph


constructor(properties?: Partial<CpuGraph.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static new_full(timespan: number, max_samples: number): CpuGraph;

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module CpuModel {

    // Constructor properties interface

    interface ConstructorProps extends GraphModel.ConstructorProps {

    }

}

class CpuModel extends GraphModel {

    // Constructors of Dazzle.CpuModel


constructor(properties?: Partial<CpuModel.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): CpuModel;
}

module CssProvider {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.CssProvider.ConstructorProps, Gtk.StyleProvider.ConstructorProps {
base_path: string;
    basePath: string;
    }

}

class CssProvider extends Gtk.CssProvider implements Gtk.StyleProvider {

    // Own properties of Dazzle.CssProvider

    get base_path(): string;
    get basePath(): string;

    // Constructors of Dazzle.CssProvider


constructor(properties?: Partial<CssProvider.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](base_path: string): CssProvider;
// Conflicted with Gtk.CssProvider.new

static ["new"](...args: never[]): any;

// Inherited methods
/**
 * Returns the #GtkIconFactory defined to be in use for `path,` or %NULL if none
 * is defined.
 * @param path #GtkWidgetPath to query
 * @returns The icon factory to use for @path, or %NULL
 */
get_icon_factory(path: Gtk.WidgetPath): (Gtk.IconFactory | null)
/**
 * Returns the style settings affecting a widget defined by `path,` or %NULL if
 * `provider` doesn’t contemplate styling `path`.
 * @param path #GtkWidgetPath to query
 * @returns a #GtkStyleProperties containing the style settings affecting @path
 */
get_style(path: Gtk.WidgetPath): (Gtk.StyleProperties | null)
/**
 * Looks up a widget style property as defined by `provider` for
 * the widget represented by `path`.
 * @param path #GtkWidgetPath to query
 * @param state state to query the style property for
 * @param pspec The #GParamSpec to query
 * @returns %TRUE if the property was found and has a value, %FALSE otherwise
 */
get_style_property(path: Gtk.WidgetPath, state: Gtk.StateFlags, pspec: GObject.ParamSpec): [boolean, unknown]
/**
 * Returns the #GtkIconFactory defined to be in use for `path,` or %NULL if none
 * is defined.
 * @param path #GtkWidgetPath to query
 */
vfunc_get_icon_factory(path: Gtk.WidgetPath): (Gtk.IconFactory | null)
/**
 * Returns the style settings affecting a widget defined by `path,` or %NULL if
 * `provider` doesn’t contemplate styling `path`.
 * @param path #GtkWidgetPath to query
 */
vfunc_get_style(path: Gtk.WidgetPath): (Gtk.StyleProperties | null)
/**
 * Looks up a widget style property as defined by `provider` for
 * the widget represented by `path`.
 * @param path #GtkWidgetPath to query
 * @param state state to query the style property for
 * @param pspec The #GParamSpec to query
 */
vfunc_get_style_property(path: Gtk.WidgetPath, state: Gtk.StateFlags, pspec: GObject.ParamSpec): [boolean, unknown]
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module DirectoryModel {

    // Constructor properties interface

    interface ConstructorProps<A extends GObject.Object = GObject.Object> extends GObject.Object.ConstructorProps, Gio.ListModel.ConstructorProps {
directory: Gio.File;
    }

}

class DirectoryModel<A extends GObject.Object = GObject.Object> extends GObject.Object implements Gio.ListModel<A> {

    // Own properties of Dazzle.DirectoryModel

    get directory(): Gio.File;
    set directory(val: Gio.File);

    // Constructors of Dazzle.DirectoryModel


constructor(properties?: Partial<DirectoryModel.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own static methods of Dazzle.DirectoryModel

    /**
     * Creates a new #DzlDirectoryModel using `directory` as the directory to monitor.
     * @param directory A #GFile
     */
    static ["new"](directory: Gio.File): Gio.ListModel

    // Own methods of Dazzle.DirectoryModel

    /**
     * Gets the directory the model is observing.
     * @returns A #GFile
     */
    get_directory(): Gio.File
    set_directory(directory: Gio.File): void
    set_visible_func(visible_func: DirectoryModelVisibleFunc): void

// Inherited methods
/**
 * Gets the type of the items in `list`.
 * 
 * All items returned from g_list_model_get_item() are of the type
 * returned by this function, or a subtype, or if the type is an
 * interface, they are an implementation of that interface.
 * 
 * The item type of a #GListModel can not change during the life of the
 * model.
 * @returns the #GType of the items contained in @list.
 */
get_item_type(): GObject.GType
/**
 * Gets the number of items in `list`.
 * 
 * Depending on the model implementation, calling this function may be
 * less efficient than iterating the list with increasing values for
 * `position` until g_list_model_get_item() returns %NULL.
 * @returns the number of items in @list.
 */
get_n_items(): number
/**
 * Get the item at `position`.
 * 
 * If `position` is greater than the number of items in `list,` %NULL is
 * returned.
 * 
 * %NULL is never returned for an index that is smaller than the length
 * of the list.
 * 
 * This function is meant to be used by language bindings in place
 * of g_list_model_get_item().
 * 
 * See also: g_list_model_get_n_items()
 * @param position the position of the item to fetch
 * @returns the object at @position.
 */
get_item(position: number): (A | null)
/**
 * Emits the #GListModel::items-changed signal on `list`.
 * 
 * This function should only be called by classes implementing
 * #GListModel. It has to be called after the internal representation
 * of `list` has been updated, because handlers connected to this signal
 * might query the new state of the list.
 * 
 * Implementations must only make changes to the model (as visible to
 * its consumer) in places that will not cause problems for that
 * consumer.  For models that are driven directly by a write API (such
 * as #GListStore), changes can be reported in response to uses of that
 * API.  For models that represent remote data, changes should only be
 * made from a fresh mainloop dispatch.  It is particularly not
 * permitted to make changes in response to a call to the #GListModel
 * consumer API.
 * 
 * Stated another way: in general, it is assumed that code making a
 * series of accesses to the model via the API, without returning to the
 * mainloop, and without calling other code, will continue to view the
 * same contents of the model.
 * @param position the position at which @list changed
 * @param removed the number of items removed
 * @param added the number of items added
 */
items_changed(position: number, removed: number, added: number): void
/**
 * Get the item at `position`. If `position` is greater than the number of
 * items in `list,` %NULL is returned.
 * 
 * %NULL is never returned for an index that is smaller than the length
 * of the list.  See g_list_model_get_n_items().
 * @param position the position of the item to fetch
 */
vfunc_get_item(position: number): (A | null)
/**
 * Gets the type of the items in `list`.
 * 
 * All items returned from g_list_model_get_item() are of the type
 * returned by this function, or a subtype, or if the type is an
 * interface, they are an implementation of that interface.
 * 
 * The item type of a #GListModel can not change during the life of the
 * model.
 */
vfunc_get_item_type(): GObject.GType
/**
 * Gets the number of items in `list`.
 * 
 * Depending on the model implementation, calling this function may be
 * less efficient than iterating the list with increasing values for
 * `position` until g_list_model_get_item() returns %NULL.
 */
vfunc_get_n_items(): number
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module DirectoryReaper {

    // Signal callback interfaces

    interface RemoveFile {
        (file: Gio.File): void
    }


    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {

    }

}

class DirectoryReaper extends GObject.Object {

    // Constructors of Dazzle.DirectoryReaper


constructor(properties?: Partial<DirectoryReaper.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): DirectoryReaper;

    // Own signals of Dazzle.DirectoryReaper

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'remove-file', callback: ((_source: this, file: Gio.File) => void)): number
    connect_after(signal: 'remove-file', callback: ((_source: this, file: Gio.File) => void)): number
    emit(signal: 'remove-file', file: Gio.File): void

    // Own methods of Dazzle.DirectoryReaper

    add_directory(directory: Gio.File, min_age: GLib.TimeSpan): void
    add_file(file: Gio.File, min_age: GLib.TimeSpan): void
    add_glob(directory: Gio.File, glob: string, min_age: GLib.TimeSpan): void
    execute(cancellable?: (Gio.Cancellable | null)): boolean
    execute_async(cancellable?: (Gio.Cancellable | null), callback?: (Gio.AsyncReadyCallback<this> | null)): void
    execute_finish(result: Gio.AsyncResult): boolean
}

module DockBin {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Container.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Dock.ConstructorProps, DockItem.ConstructorProps, Gtk.Buildable.ConstructorProps {
bottom_visible: boolean;
    bottomVisible: boolean;
    left_visible: boolean;
    leftVisible: boolean;
    right_visible: boolean;
    rightVisible: boolean;
    top_visible: boolean;
    topVisible: boolean;
    }

}

class DockBin extends Gtk.Container implements Atk.ImplementorIface, Dock, DockItem, Gtk.Buildable {

    // Own properties of Dazzle.DockBin

    get bottom_visible(): boolean;
    set bottom_visible(val: boolean);
    get bottomVisible(): boolean;
    set bottomVisible(val: boolean);
    get left_visible(): boolean;
    set left_visible(val: boolean);
    get leftVisible(): boolean;
    set leftVisible(val: boolean);
    get right_visible(): boolean;
    set right_visible(val: boolean);
    get rightVisible(): boolean;
    set rightVisible(val: boolean);
    get top_visible(): boolean;
    set top_visible(val: boolean);
    get topVisible(): boolean;
    set topVisible(val: boolean);

    // Constructors of Dazzle.DockBin


constructor(properties?: Partial<DockBin.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): DockBin;

    // Own methods of Dazzle.DockBin

    get_bottom_edge(): Gtk.Widget
    /**
     * Gets the center widget for the dock.
     * @returns A #GtkWidget or %NULL.
     */
    get_center_widget(): (Gtk.Widget | null)
    get_left_edge(): Gtk.Widget
    get_right_edge(): Gtk.Widget
    get_top_edge(): Gtk.Widget

// Inherited properties
get manager(): DockManager;
set manager(val: DockManager);
get border_width(): number;
set border_width(val: number);
get borderWidth(): number;
set borderWidth(val: number);
set child(val: Gtk.Widget);
get resize_mode(): Gtk.ResizeMode;
set resize_mode(val: Gtk.ResizeMode);
get resizeMode(): Gtk.ResizeMode;
set resizeMode(val: Gtk.ResizeMode);
get app_paintable(): boolean;
set app_paintable(val: boolean);
get appPaintable(): boolean;
set appPaintable(val: boolean);
get can_default(): boolean;
set can_default(val: boolean);
get canDefault(): boolean;
set canDefault(val: boolean);
get can_focus(): boolean;
set can_focus(val: boolean);
get canFocus(): boolean;
set canFocus(val: boolean);
get composite_child(): boolean;
get compositeChild(): boolean;
/**
 * Whether the widget is double buffered.
 */
get double_buffered(): boolean;
set double_buffered(val: boolean);
/**
 * Whether the widget is double buffered.
 */
get doubleBuffered(): boolean;
set doubleBuffered(val: boolean);
get events(): Gdk.EventMask;
set events(val: Gdk.EventMask);
/**
 * Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
 */
get expand(): boolean;
set expand(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focus_on_click(): boolean;
set focus_on_click(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focusOnClick(): boolean;
set focusOnClick(val: boolean);
/**
 * How to distribute horizontal space if widget gets extra space, see #GtkAlign
 */
get halign(): Gtk.Align;
set halign(val: Gtk.Align);
get has_default(): boolean;
set has_default(val: boolean);
get hasDefault(): boolean;
set hasDefault(val: boolean);
get has_focus(): boolean;
set has_focus(val: boolean);
get hasFocus(): boolean;
set hasFocus(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get has_tooltip(): boolean;
set has_tooltip(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get hasTooltip(): boolean;
set hasTooltip(val: boolean);
get height_request(): number;
set height_request(val: number);
get heightRequest(): number;
set heightRequest(val: number);
/**
 * Whether to expand horizontally. See gtk_widget_set_hexpand().
 */
get hexpand(): boolean;
set hexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpand_set(): boolean;
set hexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpandSet(): boolean;
set hexpandSet(val: boolean);
get is_focus(): boolean;
set is_focus(val: boolean);
get isFocus(): boolean;
set isFocus(val: boolean);
/**
 * Sets all four sides' margin at once. If read, returns max
 * margin on any side.
 */
get margin(): number;
set margin(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_bottom(): number;
set margin_bottom(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginBottom(): number;
set marginBottom(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_end(): number;
set margin_end(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginEnd(): number;
set marginEnd(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_left(): number;
set margin_left(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginLeft(): number;
set marginLeft(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_right(): number;
set margin_right(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginRight(): number;
set marginRight(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_start(): number;
set margin_start(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginStart(): number;
set marginStart(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_top(): number;
set margin_top(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginTop(): number;
set marginTop(val: number);
get name(): string;
set name(val: string);
get no_show_all(): boolean;
set no_show_all(val: boolean);
get noShowAll(): boolean;
set noShowAll(val: boolean);
/**
 * The requested opacity of the widget. See gtk_widget_set_opacity() for
 * more details about window opacity.
 * 
 * Before 3.8 this was only available in GtkWindow
 */
get opacity(): number;
set opacity(val: number);
get parent(): Gtk.Container;
set parent(val: Gtk.Container);
get receives_default(): boolean;
set receives_default(val: boolean);
get receivesDefault(): boolean;
set receivesDefault(val: boolean);
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scale_factor(): number;
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scaleFactor(): number;
get sensitive(): boolean;
set sensitive(val: boolean);
/**
 * The style of the widget, which contains information about how it will look (colors, etc).
 */
get style(): Gtk.Style;
set style(val: Gtk.Style);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_markup(): string;
set tooltip_markup(val: string);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipMarkup(): string;
set tooltipMarkup(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_text(): string;
set tooltip_text(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipText(): string;
set tooltipText(val: string);
/**
 * How to distribute vertical space if widget gets extra space, see #GtkAlign
 */
get valign(): Gtk.Align;
set valign(val: Gtk.Align);
/**
 * Whether to expand vertically. See gtk_widget_set_vexpand().
 */
get vexpand(): boolean;
set vexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpand_set(): boolean;
set vexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpandSet(): boolean;
set vexpandSet(val: boolean);
get visible(): boolean;
set visible(val: boolean);
get width_request(): number;
set width_request(val: number);
get widthRequest(): number;
set widthRequest(val: number);
/**
 * The widget's window if it is realized, %NULL otherwise.
 */
get window(): Gdk.Window;

// Inherited methods
adopt(child: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 * @returns %TRUE if the dock item was closed
 */
close(): boolean
/**
 * Emits the #DzlDockItem::presented signal.
 * 
 * Containers should emit this when their descendant has been presented as the
 * current visible child. This allows dock items to do lazy initialization of
 * content once the widgetry is visible to the user.
 * 
 * Currently, this is best effort, as there are a number of situations that
 * make covering all cases problematic.
 */
emit_presented(): void
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 * @returns %TRUE if the dock item can be closed by the user, otherwise %FALSE.
 */
get_can_close(): boolean
get_can_minimize(): boolean
get_child_visible(child: DockItem): boolean
get_child_visible(...args: never[]): any
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 * @returns A #DzlDockmanager.
 */
get_manager(): (DockManager | null)
/**
 * Gets the parent #DzlDockItem, or %NULL.
 * @returns A #DzlDockItem or %NULL.
 */
get_parent(): (DockItem | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_title(): (string | null)
has_widgets(): boolean
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 * @returns %TRUE if @child was minimized. Otherwise %FALSE and @position   may be updated to a suggested position.
 */
minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
needs_attention(): void
/**
 * This widget will walk the widget hierarchy to ensure that the
 * dock item is visible to the user.
 */
present(): void
present_child(child: DockItem): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 * @returns a #GIcon or %NULL
 */
ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
release(child: DockItem): void
set_child_visible(child: DockItem, child_visible: boolean): void
set_child_visible(...args: never[]): any
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
set_manager(manager?: (DockManager | null)): void
update_visibility(): void
vfunc_can_minimize(descendant: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 */
vfunc_close(): boolean
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 */
vfunc_get_can_close(): boolean
vfunc_get_child_visible(child: DockItem): boolean
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 */
vfunc_get_manager(): (DockManager | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_title(): (string | null)
vfunc_manager_set(old_manager: DockManager): void
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 */
vfunc_minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
vfunc_needs_attention(): void
vfunc_present_child(child: DockItem): void
vfunc_presented(): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 */
vfunc_ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
vfunc_release(child: DockItem): void
vfunc_set_child_visible(child: DockItem, child_visible: boolean): void
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
vfunc_set_manager(manager?: (DockManager | null)): void
vfunc_update_visibility(): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
/**
 * Adds `widget` to `container`. Typically used for simple containers
 * such as #GtkWindow, #GtkFrame, or #GtkButton; for more complicated
 * layout containers such as #GtkBox or #GtkGrid, this function will
 * pick default packing parameters that may not be correct.  So
 * consider functions such as gtk_box_pack_start() and
 * gtk_grid_attach() as an alternative to gtk_container_add() in
 * those cases. A widget may be added to only one container at a time;
 * you can’t place the same widget inside two different containers.
 * 
 * Note that some containers, such as #GtkScrolledWindow or #GtkListBox,
 * may add intermediate children between the added widget and the
 * container.
 * @param widget a widget to be placed inside @container
 */
add(widget: Gtk.Widget): void
check_resize(): void
/**
 * Gets the value of a child property for `child` and `container`.
 * @param child a widget which is a child of @container
 * @param property_name the name of the property to get
 * @param value a location to return the value
 */
child_get_property(child: Gtk.Widget, property_name: string, value: GObject.Value): void
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties]
 * `child_property` on the child.
 * 
 * This is an analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_widget_child_notify().
 * @param child the child widget
 * @param child_property the name of a child property installed on     the class of @container
 */
child_notify(child: Gtk.Widget, child_property: string): void
child_notify(...args: never[]): any
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] specified by
 * `pspec` on the child.
 * 
 * This is an analogue of g_object_notify_by_pspec() for child properties.
 * @param child the child widget
 * @param pspec the #GParamSpec of a child property instealled on     the class of @container
 */
child_notify_by_pspec(child: Gtk.Widget, pspec: GObject.ParamSpec): void
/**
 * Sets a child property for `child` and `container`.
 * @param child a widget which is a child of @container
 * @param property_name the name of the property to set
 * @param value the value to set the property to
 */
child_set_property(child: Gtk.Widget, property_name: string, value: GObject.Value): void
/**
 * Returns the type of the children supported by the container.
 * 
 * Note that this may return %G_TYPE_NONE to indicate that no more
 * children can be added, e.g. for a #GtkPaned which already has two
 * children.
 * @returns a #GType.
 */
child_type(): GObject.GType
/**
 * Invokes `callback` on each direct child of `container,` including
 * children that are considered “internal” (implementation details
 * of the container). “Internal” children generally weren’t added
 * by the user of the container, but were added by the container
 * implementation itself.
 * 
 * Most applications should use gtk_container_foreach(), rather
 * than gtk_container_forall().
 * @param callback a callback
 */
forall(callback: Gtk.Callback): void
/**
 * Invokes `callback` on each non-internal child of `container`.
 * See gtk_container_forall() for details on what constitutes
 * an “internal” child. For all practical purposes, this function
 * should iterate over precisely those child widgets that were
 * added to the container by the application with explicit add()
 * calls.
 * 
 * It is permissible to remove the child from the `callback` handler.
 * 
 * Most applications should use gtk_container_foreach(),
 * rather than gtk_container_forall().
 * @param callback a callback
 */
foreach(callback: Gtk.Callback): void
/**
 * Retrieves the border width of the container. See
 * gtk_container_set_border_width().
 * @returns the current border width
 */
get_border_width(): number
/**
 * Returns the container’s non-internal children. See
 * gtk_container_forall() for details on what constitutes an "internal" child.
 * @returns a newly-allocated list of the container’s non-internal children.
 */
get_children(): Gtk.Widget[]
/**
 * Retrieves the focus chain of the container, if one has been
 * set explicitly. If no focus chain has been explicitly
 * set, GTK+ computes the focus chain based on the positions
 * of the children. In that case, GTK+ stores %NULL in
 * `focusable_widgets` and returns %FALSE.
 * @returns %TRUE if the focus chain of the container has been set explicitly.
 */
get_focus_chain(): [boolean, Gtk.Widget[]]
/**
 * Returns the current focus child widget inside `container`. This is not the
 * currently focused widget. That can be obtained by calling
 * gtk_window_get_focus().
 * @returns The child widget which will receive the          focus inside @container when the @container is focused,          or %NULL if none is set.
 */
get_focus_child(): (Gtk.Widget | null)
/**
 * Retrieves the horizontal focus adjustment for the container. See
 * gtk_container_set_focus_hadjustment ().
 * @returns the horizontal focus adjustment, or %NULL if   none has been set.
 */
get_focus_hadjustment(): (Gtk.Adjustment | null)
/**
 * Retrieves the vertical focus adjustment for the container. See
 * gtk_container_set_focus_vadjustment().
 * @returns the vertical focus adjustment, or   %NULL if none has been set.
 */
get_focus_vadjustment(): (Gtk.Adjustment | null)
/**
 * Returns a newly created widget path representing all the widget hierarchy
 * from the toplevel down to and including `child`.
 * @param child a child of @container
 * @returns A newly created #GtkWidgetPath
 */
get_path_for_child(child: Gtk.Widget): Gtk.WidgetPath
/**
 * Returns the resize mode for the container. See
 * gtk_container_set_resize_mode ().
 * @returns the current resize mode
 */
get_resize_mode(): Gtk.ResizeMode
/**
 * When a container receives a call to the draw function, it must send
 * synthetic #GtkWidget::draw calls to all children that don’t have their
 * own #GdkWindows. This function provides a convenient way of doing this.
 * A container, when it receives a call to its #GtkWidget::draw function,
 * calls gtk_container_propagate_draw() once for each child, passing in
 * the `cr` the container received.
 * 
 * gtk_container_propagate_draw() takes care of translating the origin of `cr,`
 * and deciding whether the draw needs to be sent to the child. It is a
 * convenient and optimized way of getting the same effect as calling
 * gtk_widget_draw() on the child directly.
 * 
 * In most cases, a container can simply either inherit the
 * #GtkWidget::draw implementation from #GtkContainer, or do some drawing
 * and then chain to the ::draw implementation from #GtkContainer.
 * @param child a child of @container
 * @param cr Cairo context as passed to the container. If you want to use @cr   in container’s draw function, consider using cairo_save() and   cairo_restore() before calling this function.
 */
propagate_draw(child: Gtk.Widget, cr: cairo.Context): void
/**
 * Removes `widget` from `container`. `widget` must be inside `container`.
 * Note that `container` will own a reference to `widget,` and that this
 * may be the last reference held; so removing a widget from its
 * container can destroy that widget. If you want to use `widget`
 * again, you need to add a reference to it before removing it from
 * a container, using g_object_ref(). If you don’t want to use `widget`
 * again it’s usually more efficient to simply destroy it directly
 * using gtk_widget_destroy() since this will remove it from the
 * container and help break any circular reference count cycles.
 * @param widget a current child of @container
 */
remove(widget: Gtk.Widget): void
resize_children(): void
/**
 * Sets the border width of the container.
 * 
 * The border width of a container is the amount of space to leave
 * around the outside of the container. The only exception to this is
 * #GtkWindow; because toplevel windows can’t leave space outside,
 * they leave the space inside. The border is added on all sides of
 * the container. To add space to only one side, use a specific
 * #GtkWidget:margin property on the child widget, for example
 * #GtkWidget:margin-top.
 * @param border_width amount of blank space to leave outside   the container. Valid values are in the range 0-65535 pixels.
 */
set_border_width(border_width: number): void
/**
 * Sets a focus chain, overriding the one computed automatically by GTK+.
 * 
 * In principle each widget in the chain should be a descendant of the
 * container, but this is not enforced by this method, since it’s allowed
 * to set the focus chain before you pack the widgets, or have a widget
 * in the chain that isn’t always packed. The necessary checks are done
 * when the focus chain is actually traversed.
 * @param focusable_widgets the new focus chain
 */
set_focus_chain(focusable_widgets: Gtk.Widget[]): void
/**
 * Sets, or unsets if `child` is %NULL, the focused child of `container`.
 * 
 * This function emits the GtkContainer::set_focus_child signal of
 * `container`. Implementations of #GtkContainer can override the
 * default behaviour by overriding the class closure of this signal.
 * 
 * This is function is mostly meant to be used by widgets. Applications can use
 * gtk_widget_grab_focus() to manually set the focus to a specific widget.
 * @param child a #GtkWidget, or %NULL
 */
set_focus_child(child?: (Gtk.Widget | null)): void
/**
 * Hooks up an adjustment to focus handling in a container, so when a child
 * of the container is focused, the adjustment is scrolled to show that
 * widget. This function sets the horizontal alignment.
 * See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining
 * the adjustment and gtk_container_set_focus_vadjustment() for setting
 * the vertical adjustment.
 * 
 * The adjustments have to be in pixel units and in the same coordinate
 * system as the allocation for immediate children of the container.
 * @param adjustment an adjustment which should be adjusted when the focus is   moved among the descendents of @container
 */
set_focus_hadjustment(adjustment: Gtk.Adjustment): void
/**
 * Hooks up an adjustment to focus handling in a container, so when a
 * child of the container is focused, the adjustment is scrolled to
 * show that widget. This function sets the vertical alignment. See
 * gtk_scrolled_window_get_vadjustment() for a typical way of obtaining
 * the adjustment and gtk_container_set_focus_hadjustment() for setting
 * the horizontal adjustment.
 * 
 * The adjustments have to be in pixel units and in the same coordinate
 * system as the allocation for immediate children of the container.
 * @param adjustment an adjustment which should be adjusted when the focus   is moved among the descendents of @container
 */
set_focus_vadjustment(adjustment: Gtk.Adjustment): void
/**
 * Sets the `reallocate_redraws` flag of the container to the given value.
 * 
 * Containers requesting reallocation redraws get automatically
 * redrawn if any of their children changed allocation.
 * @param needs_redraws the new value for the container’s @reallocate_redraws flag
 */
set_reallocate_redraws(needs_redraws: boolean): void
/**
 * Sets the resize mode for the container.
 * 
 * The resize mode of a container determines whether a resize request
 * will be passed to the container’s parent, queued for later execution
 * or executed immediately.
 * @param resize_mode the new resize mode
 */
set_resize_mode(resize_mode: Gtk.ResizeMode): void
/**
 * Removes a focus chain explicitly set with gtk_container_set_focus_chain().
 */
unset_focus_chain(): void
/**
 * Adds `widget` to `container`. Typically used for simple containers
 * such as #GtkWindow, #GtkFrame, or #GtkButton; for more complicated
 * layout containers such as #GtkBox or #GtkGrid, this function will
 * pick default packing parameters that may not be correct.  So
 * consider functions such as gtk_box_pack_start() and
 * gtk_grid_attach() as an alternative to gtk_container_add() in
 * those cases. A widget may be added to only one container at a time;
 * you can’t place the same widget inside two different containers.
 * 
 * Note that some containers, such as #GtkScrolledWindow or #GtkListBox,
 * may add intermediate children between the added widget and the
 * container.
 * @param widget a widget to be placed inside @container
 */
vfunc_add(widget: Gtk.Widget): void
vfunc_check_resize(): void
/**
 * Returns the type of the children supported by the container.
 * 
 * Note that this may return %G_TYPE_NONE to indicate that no more
 * children can be added, e.g. for a #GtkPaned which already has two
 * children.
 */
vfunc_child_type(): GObject.GType
vfunc_composite_name(child: Gtk.Widget): string
/**
 * Invokes `callback` on each direct child of `container,` including
 * children that are considered “internal” (implementation details
 * of the container). “Internal” children generally weren’t added
 * by the user of the container, but were added by the container
 * implementation itself.
 * 
 * Most applications should use gtk_container_foreach(), rather
 * than gtk_container_forall().
 * @param include_internals 
 * @param callback a callback
 */
vfunc_forall(include_internals: boolean, callback: Gtk.Callback): void
vfunc_get_child_property(child: Gtk.Widget, property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Returns a newly created widget path representing all the widget hierarchy
 * from the toplevel down to and including `child`.
 * @param child a child of @container
 */
vfunc_get_path_for_child(child: Gtk.Widget): Gtk.WidgetPath
/**
 * Removes `widget` from `container`. `widget` must be inside `container`.
 * Note that `container` will own a reference to `widget,` and that this
 * may be the last reference held; so removing a widget from its
 * container can destroy that widget. If you want to use `widget`
 * again, you need to add a reference to it before removing it from
 * a container, using g_object_ref(). If you don’t want to use `widget`
 * again it’s usually more efficient to simply destroy it directly
 * using gtk_widget_destroy() since this will remove it from the
 * container and help break any circular reference count cycles.
 * @param widget a current child of @container
 */
vfunc_remove(widget: Gtk.Widget): void
vfunc_set_child_property(child: Gtk.Widget, property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Sets, or unsets if `child` is %NULL, the focused child of `container`.
 * 
 * This function emits the GtkContainer::set_focus_child signal of
 * `container`. Implementations of #GtkContainer can override the
 * default behaviour by overriding the class closure of this signal.
 * 
 * This is function is mostly meant to be used by widgets. Applications can use
 * gtk_widget_grab_focus() to manually set the focus to a specific widget.
 * @param child a #GtkWidget, or %NULL
 */
vfunc_set_focus_child(child?: (Gtk.Widget | null)): void
/**
 * For widgets that can be “activated” (buttons, menu items, etc.)
 * this function activates them. Activation is what happens when you
 * press Enter on a widget during key navigation. If `widget` isn't
 * activatable, the function returns %FALSE.
 * @returns %TRUE if the widget was activatable
 */
activate(): boolean
/**
 * Installs an accelerator for this `widget` in `accel_group` that causes
 * `accel_signal` to be emitted if the accelerator is activated.
 * The `accel_group` needs to be added to the widget’s toplevel via
 * gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
 * Accelerators added through this function are not user changeable during
 * runtime. If you want to support accelerators that can be changed by the
 * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
 * gtk_menu_item_set_accel_path() instead.
 * @param accel_signal widget signal to emit on accelerator activation
 * @param accel_group accel group for this widget, added to its toplevel
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @param accel_flags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
 */
add_accelerator(accel_signal: string, accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): void
/**
 * Adds the device events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_device_events() for details.
 * @param device a #GdkDevice
 * @param events an event mask, see #GdkEventMask
 */
add_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Adds the events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_events() and the
 * [input handling overview][event-masks] for details.
 * @param events an event mask, see #GdkEventMask
 */
add_events(events: number): void
/**
 * Adds a widget to the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
 * list of mnemonic labels for the widget is cleared when the
 * widget is destroyed, so the caller must make sure to update
 * its internal state at this point as well, by using a connection
 * to the #GtkWidget::destroy signal or a weak notifier.
 * @param label a #GtkWidget that acts as a mnemonic label for @widget
 */
add_mnemonic_label(label: Gtk.Widget): void
/**
 * Queues an animation frame update and adds a callback to be called
 * before each frame. Until the tick callback is removed, it will be
 * called frequently (usually at the frame rate of the output device
 * or as quickly as the application can be repainted, whichever is
 * slower). For this reason, is most suitable for handling graphics
 * that change every frame or every few frames. The tick callback does
 * not automatically imply a relayout or repaint. If you want a
 * repaint or relayout, and aren’t changing widget properties that
 * would trigger that (for example, changing the text of a #GtkLabel),
 * then you will have to call gtk_widget_queue_resize() or
 * gtk_widget_queue_draw_area() yourself.
 * 
 * gdk_frame_clock_get_frame_time() should generally be used for timing
 * continuous animations and
 * gdk_frame_timings_get_predicted_presentation_time() if you are
 * trying to display isolated frames at particular times.
 * 
 * This is a more convenient alternative to connecting directly to the
 * #GdkFrameClock::update signal of #GdkFrameClock, since you don't
 * have to worry about when a #GdkFrameClock is assigned to a widget.
 * @param callback function to call for updating animations
 * @returns an id for the connection of this callback. Remove the callback     by passing it to gtk_widget_remove_tick_callback()
 */
add_tick_callback(callback: Gtk.TickCallback): number
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 * @returns %TRUE if the accelerator can be activated.
 */
can_activate_accel(signal_id: number): boolean
/**
 * This function is used by custom widget implementations; if you're
 * writing an app, you’d use gtk_widget_grab_focus() to move the focus
 * to a particular widget, and gtk_container_set_focus_chain() to
 * change the focus tab order. So you may want to investigate those
 * functions instead.
 * 
 * gtk_widget_child_focus() is called by containers as the user moves
 * around the window using keyboard shortcuts. `direction` indicates
 * what kind of motion is taking place (up, down, left, right, tab
 * forward, tab backward). gtk_widget_child_focus() emits the
 * #GtkWidget::focus signal; widgets override the default handler
 * for this signal in order to implement appropriate focus behavior.
 * 
 * The default ::focus handler for a widget should return %TRUE if
 * moving in `direction` left the focus on a focusable location inside
 * that widget, and %FALSE if moving in `direction` moved the focus
 * outside the widget. If returning %TRUE, widgets normally
 * call gtk_widget_grab_focus() to place the focus accordingly;
 * if returning %FALSE, they don’t modify the current focus location.
 * @param direction direction of focus movement
 * @returns %TRUE if focus ended up inside @widget
 */
child_focus(direction: Gtk.DirectionType): boolean
/**
 * Same as gtk_widget_path(), but always uses the name of a widget’s type,
 * never uses a custom name set with gtk_widget_set_name().
 */
class_path(): [number, string, string]
/**
 * Computes whether a container should give this widget extra space
 * when possible. Containers should check this, rather than
 * looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
 * 
 * This function already checks whether the widget is visible, so
 * visibility does not need to be checked separately. Non-visible
 * widgets are not expanded.
 * 
 * The computed expand value uses either the expand setting explicitly
 * set on the widget itself, or, if none has been explicitly set,
 * the widget may expand if some of its children do.
 * @param orientation expand direction
 * @returns whether widget tree rooted here should be expanded
 */
compute_expand(orientation: Gtk.Orientation): boolean
/**
 * Creates a new #PangoContext with the appropriate font map,
 * font options, font description, and base direction for drawing
 * text for this widget. See also gtk_widget_get_pango_context().
 * @returns the new #PangoContext
 */
create_pango_context(): Pango.Context
/**
 * Creates a new #PangoLayout with the appropriate font map,
 * font description, and base direction for drawing text for
 * this widget.
 * 
 * If you keep a #PangoLayout created in this way around, you need
 * to re-create it when the widget #PangoContext is replaced.
 * This can be tracked by using the #GtkWidget::screen-changed signal
 * on the widget.
 * @param text text to set on the layout (can be %NULL)
 * @returns the new #PangoLayout
 */
create_pango_layout(text?: (string | null)): Pango.Layout
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
destroy(): void
/**
 * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
 * %NULL.  It’s intended to be used as a callback connected to the
 * “destroy” signal of a widget. You connect gtk_widget_destroyed()
 * as a signal handler, and pass the address of your widget variable
 * as user data. Then when the widget is destroyed, the variable will
 * be set to %NULL. Useful for example to avoid multiple copies
 * of the same dialog.
 * @param widget_pointer address of a variable that contains @widget
 */
destroyed(widget_pointer: Gtk.Widget): Gtk.Widget
/**
 * Returns %TRUE if `device` has been shadowed by a GTK+
 * device grab on another widget, so it would stop sending
 * events to `widget`. This may be used in the
 * #GtkWidget::grab-notify signal to check for specific
 * devices. See gtk_device_grab_add().
 * @param device a #GdkDevice
 * @returns %TRUE if there is an ongoing grab on @device          by another #GtkWidget than @widget.
 */
device_is_shadowed(device: Gdk.Device): boolean
/**
 * This function is equivalent to gtk_drag_begin_with_coordinates(),
 * passing -1, -1 as coordinates.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @returns the context for this drag
 */
drag_begin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: (Gdk.Event | null)): Gdk.DragContext
/**
 * Initiates a drag on the source side. The function only needs to be used
 * when the application is starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is %NULL, then %GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used to get information about the drag.
 * 
 * Generally there are three cases when you want to start a drag by hand by
 * calling this function:
 * 
 * 1. During a #GtkWidget::button-press-event handler, if you want to start a drag
 * immediately when the user presses the mouse button.  Pass the `event`
 * that you have in your #GtkWidget::button-press-event handler.
 * 
 * 2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
 * when the mouse moves past a certain threshold distance after a button-press.
 * Pass the `event` that you have in your #GtkWidget::motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).
 * If you really cannot pass a real event, pass %NULL instead.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @param x The initial x coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @param y The initial y coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @returns the context for this drag
 */
drag_begin_with_coordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: (Gdk.Event | null), x: number, y: number): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param start_x X coordinate of start of drag
 * @param start_y Y coordinate of start of drag
 * @param current_x current X coordinate
 * @param current_y current Y coordinate
 * @returns %TRUE if the drag threshold has been passed.
 */
drag_check_threshold(start_x: number, start_y: number, current_x: number, current_y: number): boolean
/**
 * Add the image targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_uri_targets(): void
/**
 * Looks for a match between the supported targets of `context` and the
 * `dest_target_list,` returning the first matching target, otherwise
 * returning %GDK_NONE. `dest_target_list` should usually be the return
 * value from gtk_drag_dest_get_target_list(), but some widgets may
 * have different valid targets for different parts of the widget; in
 * that case, they will have to implement a drag_motion handler that
 * passes the correct target list to this function.
 * @param context drag context
 * @param target_list list of droppable targets, or %NULL to use    gtk_drag_dest_get_target_list (@widget).
 * @returns first target that the source offers     and the dest can accept, or %GDK_NONE
 */
drag_dest_find_target(context: Gdk.DragContext, target_list?: (Gtk.TargetList | null)): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_dest_get_target_list(): (Gtk.TargetList | null)
/**
 * Returns whether the widget has been configured to always
 * emit #GtkWidget::drag-motion signals.
 * @returns %TRUE if the widget always emits   #GtkWidget::drag-motion events
 */
drag_dest_get_track_motion(): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget’s drag-and-drop signals
 * (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget’s #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget::drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget::drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There’s no way to set a default action here, you can use the
 * #GtkWidget::drag-motion callback for that. Here’s an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * 
 * ```c
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of     #GtkTargetEntrys indicating the drop types that this @widget will     accept, or %NULL. Later you can access the list with     gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this @widget.
 */
drag_dest_set(flags: Gtk.DestDefaults, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets this widget as a proxy for drops to another window.
 * @param proxy_window the window to which to forward drag events
 * @param protocol the drag protocol which the @proxy_window accepts   (You can use gdk_drag_get_protocol() to determine this)
 * @param use_coordinates If %TRUE, send the same coordinates to the   destination, because it is an embedded   subwindow.
 */
drag_dest_set_proxy(proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param target_list list of droppable targets, or %NULL for none
 */
drag_dest_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Tells the widget to emit #GtkWidget::drag-motion and
 * #GtkWidget::drag-leave events regardless of the targets and the
 * %GTK_DEST_DEFAULT_MOTION flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param track_motion whether to accept all targets
 */
drag_dest_set_track_motion(track_motion: boolean): void
/**
 * Clears information about a drop destination set with
 * gtk_drag_dest_set(). The widget will no longer receive
 * notification of drags.
 */
drag_dest_unset(): void
/**
 * Gets the data associated with a drag. When the data
 * is received or the retrieval fails, GTK+ will emit a
 * #GtkWidget::drag-data-received signal. Failure of the retrieval
 * is indicated by the length field of the `selection_data`
 * signal parameter being negative. However, when gtk_drag_get_data()
 * is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
 * then the widget will not receive notification of failed
 * drops.
 * @param context the drag context
 * @param target the target (form of the data) to retrieve
 * @param time_ a timestamp for retrieving the data. This will   generally be the time received in a #GtkWidget::drag-motion   or #GtkWidget::drag-drop signal
 */
drag_get_data(context: Gdk.DragContext, target: Gdk.Atom, time_: number): void
/**
 * Highlights a widget as a currently hovered drop target.
 * To end the highlight, call gtk_drag_unhighlight().
 * GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
 */
drag_highlight(): void
/**
 * Add the writable image targets supported by #GtkSelectionData to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_uri_targets(): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_source_get_target_list(): (Gtk.TargetList | null)
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param start_button_mask the bitmask of buttons that can start the drag
 * @param targets the table of targets     that the drag will support, may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
drag_source_set(start_button_mask: Gdk.ModifierType, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to `icon`. See the docs for #GtkIconTheme for more details.
 * @param icon A #GIcon
 */
drag_source_set_icon_gicon(icon: Gio.Icon): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param icon_name name of icon to use
 */
drag_source_set_icon_name(icon_name: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
drag_source_set_icon_pixbuf(pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param stock_id the ID of the stock icon to use
 */
drag_source_set_icon_stock(stock_id: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param target_list list of draggable targets, or %NULL for none
 */
drag_source_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Undoes the effects of gtk_drag_source_set().
 */
drag_source_unset(): void
/**
 * Removes a highlight set by gtk_drag_highlight() from
 * a widget.
 */
drag_unhighlight(): void
/**
 * Draws `widget` to `cr`. The top left corner of the widget will be
 * drawn to the currently set origin point of `cr`.
 * 
 * You should pass a cairo context as `cr` argument that is in an
 * original state. Otherwise the resulting drawing is undefined. For
 * example changing the operator using cairo_set_operator() or the
 * line width using cairo_set_line_width() might have unwanted side
 * effects.
 * You may however change the context’s transform matrix - like with
 * cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
 * region with cairo_clip() prior to calling this function. Also, it
 * is fine to modify the context with cairo_save() and
 * cairo_push_group() prior to calling this function.
 * 
 * Note that special-purpose widgets may contain special code for
 * rendering to the screen and might appear differently on screen
 * and when rendered using gtk_widget_draw().
 * @param cr a cairo context to draw to
 */
draw(cr: cairo.Context): void
/**
 * Ensures that `widget` has a style (`widget->`style).
 * 
 * Not a very useful function; most of the time, if you
 * want the style, the widget is realized, and realized
 * widgets are guaranteed to have a style already.
 */
ensure_style(): void
/**
 * Notifies the user about an input-related error on this widget.
 * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
 * gdk_window_beep(), otherwise it does nothing.
 * 
 * Note that the effect of gdk_window_beep() can be configured in many
 * ways, depending on the windowing backend and the desktop environment
 * or window manager that is used.
 */
error_bell(): void
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 * @returns return from the event signal emission (%TRUE if               the event was handled)
 */
event(event: Gdk.Event): boolean
/**
 * Stops emission of #GtkWidget::child-notify signals on `widget`. The
 * signals are queued until gtk_widget_thaw_child_notify() is called
 * on `widget`.
 * 
 * This is the analogue of g_object_freeze_notify() for child properties.
 */
freeze_child_notify(): void
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 * @returns the #AtkObject associated with @widget
 */
get_accessible(): Atk.Object
/**
 * Retrieves the #GActionGroup that was registered using `prefix`. The resulting
 * #GActionGroup may have been registered to `widget` or any #GtkWidget in its
 * ancestry.
 * 
 * If no action group was found matching `prefix,` then %NULL is returned.
 * @param prefix The “prefix” of the action group.
 * @returns A #GActionGroup or %NULL.
 */
get_action_group(prefix: string): (Gio.ActionGroup | null)
/**
 * Returns the baseline that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function, and when allocating child
 * widgets in #GtkWidget::size_allocate.
 * @returns the baseline of the @widget, or -1 if none
 */
get_allocated_baseline(): number
/**
 * Returns the height that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the height of the @widget
 */
get_allocated_height(): number
/**
 * Retrieves the widget’s allocated size.
 * 
 * This function returns the last values passed to
 * gtk_widget_size_allocate_with_baseline(). The value differs from
 * the size returned in gtk_widget_get_allocation() in that functions
 * like gtk_widget_set_halign() can adjust the allocation, but not
 * the value returned by this function.
 * 
 * If a widget is not visible, its allocated size is 0.
 */
get_allocated_size(): [Gtk.Allocation, number]
/**
 * Returns the width that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the width of the @widget
 */
get_allocated_width(): number
/**
 * Retrieves the widget’s allocation.
 * 
 * Note, when implementing a #GtkContainer: a widget’s allocation will
 * be its “adjusted” allocation, that is, the widget’s parent
 * container typically calls gtk_widget_size_allocate() with an
 * allocation, and that allocation is then adjusted (to handle margin
 * and alignment for example) before assignment to the widget.
 * gtk_widget_get_allocation() returns the adjusted allocation that
 * was actually assigned to the widget. The adjusted allocation is
 * guaranteed to be completely contained within the
 * gtk_widget_size_allocate() allocation, however. So a #GtkContainer
 * is guaranteed that its children stay inside the assigned bounds,
 * but not that they have exactly the bounds the container assigned.
 * There is no way to get the original allocation assigned by
 * gtk_widget_size_allocate(), since it isn’t stored; if a container
 * implementation needs that information it will have to track it itself.
 */
get_allocation(): Gtk.Allocation
/**
 * Gets the first ancestor of `widget` with type `widget_type`. For example,
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
 * the first #GtkBox that’s an ancestor of `widget`. No reference will be
 * added to the returned widget; it should not be unreferenced. See note
 * about checking for a toplevel #GtkWindow in the docs for
 * gtk_widget_get_toplevel().
 * 
 * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
 * considers `widget` to be an ancestor of itself.
 * @param widget_type ancestor type
 * @returns the ancestor widget, or %NULL if not found
 */
get_ancestor(widget_type: GObject.GType): (Gtk.Widget | null)
/**
 * Determines whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * See gtk_widget_set_app_paintable()
 * @returns %TRUE if the widget is app paintable
 */
get_app_paintable(): boolean
/**
 * Determines whether `widget` can be a default widget. See
 * gtk_widget_set_can_default().
 * @returns %TRUE if @widget can be a default widget, %FALSE otherwise
 */
get_can_default(): boolean
/**
 * Determines whether `widget` can own the input focus. See
 * gtk_widget_set_can_focus().
 * @returns %TRUE if @widget can own the input focus, %FALSE otherwise
 */
get_can_focus(): boolean
/**
 * This function is only for use in widget implementations. Obtains
 * `widget->`requisition, unless someone has forced a particular
 * geometry on the widget (e.g. with gtk_widget_set_size_request()),
 * in which case it returns that geometry instead of the widget's
 * requisition.
 * 
 * This function differs from gtk_widget_size_request() in that
 * it retrieves the last size request value from `widget->`requisition,
 * while gtk_widget_size_request() actually calls the "size_request" method
 * on `widget` to compute the size request and fill in `widget->`requisition,
 * and only then returns `widget->`requisition.
 * 
 * Because this function does not call the “size_request” method, it
 * can only be used when you know that `widget->`requisition is
 * up-to-date, that is, gtk_widget_size_request() has been called
 * since the last time a resize was queued. In general, only container
 * implementations have this information; applications should use
 * gtk_widget_size_request().
 */
get_child_requisition(): Gtk.Requisition
/**
 * Retrieves the widget’s clip area.
 * 
 * The clip area is the area in which all of `widget'`s drawing will
 * happen. Other toolkits call it the bounding box.
 * 
 * Historically, in GTK+ the clip area has been equal to the allocation
 * retrieved via gtk_widget_get_allocation().
 */
get_clip(): Gtk.Allocation
/**
 * Returns the clipboard object for the given selection to
 * be used with `widget`. `widget` must have a #GdkDisplay
 * associated with it, so must be attached to a toplevel
 * window.
 * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
 * @returns the appropriate clipboard object. If no             clipboard already exists, a new one will             be created. Once a clipboard object has             been created, it is persistent for all time.
 */
get_clipboard(selection: Gdk.Atom): Gtk.Clipboard
/**
 * Obtains the composite name of a widget.
 * @returns the composite name of @widget, or %NULL if @widget is not   a composite child. The string should be freed when it is no   longer needed.
 */
get_composite_name(): string
/**
 * Returns whether `device` can interact with `widget` and its
 * children. See gtk_widget_set_device_enabled().
 * @param device a #GdkDevice
 * @returns %TRUE is @device is enabled for @widget
 */
get_device_enabled(device: Gdk.Device): boolean
/**
 * Returns the events mask for the widget corresponding to an specific device. These
 * are the events that the widget will receive when `device` operates on it.
 * @param device a #GdkDevice
 * @returns device event mask for @widget
 */
get_device_events(device: Gdk.Device): Gdk.EventMask
/**
 * Gets the reading direction for a particular widget. See
 * gtk_widget_set_direction().
 * @returns the reading direction for the widget.
 */
get_direction(): Gtk.TextDirection
/**
 * Get the #GdkDisplay for the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow at the top.
 * 
 * In general, you should only create display specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkDisplay for the toplevel for this widget.
 */
get_display(): Gdk.Display
/**
 * Determines whether the widget is double buffered.
 * 
 * See gtk_widget_set_double_buffered()
 * @returns %TRUE if the widget is double buffered
 */
get_double_buffered(): boolean
/**
 * Returns the event mask (see #GdkEventMask) for the widget. These are the
 * events that the widget will receive.
 * 
 * Note: Internally, the widget event mask will be the logical OR of the event
 * mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
 * event mask necessary to cater for every #GtkEventController created for the
 * widget.
 * @returns event mask for @widget
 */
get_events(): number
/**
 * Returns whether the widget should grab focus when it is clicked with the mouse.
 * See gtk_widget_set_focus_on_click().
 * @returns %TRUE if the widget should grab focus when it is clicked with               the mouse.
 */
get_focus_on_click(): boolean
/**
 * Gets the font map that has been set with gtk_widget_set_font_map().
 * @returns A #PangoFontMap, or %NULL
 */
get_font_map(): (Pango.FontMap | null)
/**
 * Returns the #cairo_font_options_t used for Pango rendering. When not set,
 * the defaults font options for the #GdkScreen will be used.
 * @returns the #cairo_font_options_t or %NULL if not set
 */
get_font_options(): (cairo.FontOptions | null)
/**
 * Obtains the frame clock for a widget. The frame clock is a global
 * “ticker” that can be used to drive animations and repaints.  The
 * most common reason to get the frame clock is to call
 * gdk_frame_clock_get_frame_time(), in order to get a time to use for
 * animating. For example you might record the start of the animation
 * with an initial value from gdk_frame_clock_get_frame_time(), and
 * then update the animation by calling
 * gdk_frame_clock_get_frame_time() again during each repaint.
 * 
 * gdk_frame_clock_request_phase() will result in a new frame on the
 * clock, but won’t necessarily repaint any widgets. To repaint a
 * widget, you have to use gtk_widget_queue_draw() which invalidates
 * the widget (thus scheduling it to receive a draw on the next
 * frame). gtk_widget_queue_draw() will also end up requesting a frame
 * on the appropriate frame clock.
 * 
 * A widget’s frame clock will not change while the widget is
 * mapped. Reparenting a widget (which implies a temporary unmap) can
 * change the widget’s frame clock.
 * 
 * Unrealized widgets do not have a frame clock.
 * @returns a #GdkFrameClock, or %NULL if widget is unrealized
 */
get_frame_clock(): (Gdk.FrameClock | null)
/**
 * Gets the value of the #GtkWidget:halign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
 * alignment.
 * @returns the horizontal alignment of @widget
 */
get_halign(): Gtk.Align
/**
 * Returns the current value of the has-tooltip property.  See
 * #GtkWidget:has-tooltip for more information.
 * @returns current value of has-tooltip on @widget.
 */
get_has_tooltip(): boolean
/**
 * Determines whether `widget` has a #GdkWindow of its own. See
 * gtk_widget_set_has_window().
 * @returns %TRUE if @widget has a window, %FALSE otherwise
 */
get_has_window(): boolean
/**
 * Gets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Containers should use gtk_widget_compute_expand() rather than
 * this function, to see whether a widget, or any of its children,
 * has the expand flag set. If any child of a widget wants to
 * expand, the parent may ask to expand also.
 * 
 * This function only looks at the widget’s own hexpand flag, rather
 * than computing whether the entire widget tree rooted at this widget
 * wants to expand.
 * @returns whether hexpand flag is set
 */
get_hexpand(): boolean
/**
 * Gets whether gtk_widget_set_hexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @returns whether hexpand has been explicitly set
 */
get_hexpand_set(): boolean
/**
 * Whether the widget is mapped.
 * @returns %TRUE if the widget is mapped, %FALSE otherwise.
 */
get_mapped(): boolean
/**
 * Gets the value of the #GtkWidget:margin-bottom property.
 * @returns The bottom margin of @widget
 */
get_margin_bottom(): number
/**
 * Gets the value of the #GtkWidget:margin-end property.
 * @returns The end margin of @widget
 */
get_margin_end(): number
/**
 * Gets the value of the #GtkWidget:margin-left property.
 * @returns The left margin of @widget
 */
get_margin_left(): number
/**
 * Gets the value of the #GtkWidget:margin-right property.
 * @returns The right margin of @widget
 */
get_margin_right(): number
/**
 * Gets the value of the #GtkWidget:margin-start property.
 * @returns The start margin of @widget
 */
get_margin_start(): number
/**
 * Gets the value of the #GtkWidget:margin-top property.
 * @returns The top margin of @widget
 */
get_margin_top(): number
/**
 * Returns the modifier mask the `widget’`s windowing system backend
 * uses for a particular purpose.
 * 
 * See gdk_keymap_get_modifier_mask().
 * @param intent the use case for the modifier mask
 * @returns the modifier mask used for @intent.
 */
get_modifier_mask(intent: Gdk.ModifierIntent): Gdk.ModifierType
/**
 * Returns the current modifier style for the widget. (As set by
 * gtk_widget_modify_style().) If no style has previously set, a new
 * #GtkRcStyle will be created with all values unset, and set as the
 * modifier style for the widget. If you make changes to this rc
 * style, you must call gtk_widget_modify_style(), passing in the
 * returned rc style, to make sure that your changes take effect.
 * 
 * Caution: passing the style back to gtk_widget_modify_style() will
 * normally end up destroying it, because gtk_widget_modify_style() copies
 * the passed-in style and sets the copy as the new modifier style,
 * thus dropping any reference to the old modifier style. Add a reference
 * to the modifier style if you want to keep it alive.
 * @returns the modifier style for the widget.     This rc style is owned by the widget. If you want to keep a     pointer to value this around, you must add a refcount using     g_object_ref().
 */
get_modifier_style(): Gtk.RcStyle
/**
 * Retrieves the name of a widget. See gtk_widget_set_name() for the
 * significance of widget names.
 * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
 */
get_name(): string
/**
 * Returns the current value of the #GtkWidget:no-show-all property,
 * which determines whether calls to gtk_widget_show_all()
 * will affect this widget.
 * @returns the current value of the “no-show-all” property.
 */
get_no_show_all(): boolean
/**
 * Fetches the requested opacity for this widget.
 * See gtk_widget_set_opacity().
 * @returns the requested opacity for this widget.
 */
get_opacity(): number
/**
 * Gets a #PangoContext with the appropriate font map, font description,
 * and base direction for this widget. Unlike the context returned
 * by gtk_widget_create_pango_context(), this context is owned by
 * the widget (it can be used until the screen for the widget changes
 * or the widget is removed from its toplevel), and will be updated to
 * match any changes to the widget’s attributes. This can be tracked
 * by using the #GtkWidget::screen-changed signal on the widget.
 * @returns the #PangoContext for the widget.
 */
get_pango_context(): Pango.Context
/**
 * Gets `widget’`s parent window, or %NULL if it does not have one.
 * @returns the parent window of @widget, or %NULL if it does not have a parent window.
 */
get_parent_window(): (Gdk.Window | null)
/**
 * Returns the #GtkWidgetPath representing `widget,` if the widget
 * is not connected to a toplevel widget, a partial path will be
 * created.
 * @returns The #GtkWidgetPath representing @widget
 */
get_path(): Gtk.WidgetPath
/**
 * Obtains the location of the mouse pointer in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(); and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 */
get_pointer(): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves the minimum and natural size of a widget, taking
 * into account the widget’s preference for height-for-width management.
 * 
 * This is used to retrieve a suitable size by container widgets which do
 * not impose any restrictions on the child placement. It can be used
 * to deduce toplevel window and menu sizes as well as child widgets in
 * free-form containers such as GtkLayout.
 * 
 * Handle with care. Note that the natural height of a height-for-width
 * widget will generally be a smaller size than the minimum height, since the required
 * height for the natural width is generally smaller than the required height for
 * the minimum width.
 * 
 * Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
 * baseline alignment.
 */
get_preferred_size(): [Gtk.Requisition | null, Gtk.Requisition | null]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
get_preferred_width_for_height(height: number): [number, number]
/**
 * Determines whether `widget` is realized.
 * @returns %TRUE if @widget is realized, %FALSE otherwise
 */
get_realized(): boolean
/**
 * Determines whether `widget` is always treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_set_receives_default().
 * @returns %TRUE if @widget acts as the default widget when focused,               %FALSE otherwise
 */
get_receives_default(): boolean
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 * @returns The #GtkSizeRequestMode preferred by @widget.
 */
get_request_mode(): Gtk.SizeRequestMode
/**
 * Retrieves the widget’s requisition.
 * 
 * This function should only be used by widget implementations in
 * order to figure whether the widget’s requisition has actually
 * changed after some internal state change (so that they can call
 * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
 * 
 * Normally, gtk_widget_size_request() should be used.
 */
get_requisition(): Gtk.Requisition
/**
 * Get the root window where this widget is located. This function can
 * only be called after the widget has been added to a widget
 * hierarchy with #GtkWindow at the top.
 * 
 * The root window is useful for such purposes as creating a popup
 * #GdkWindow associated with the window. In general, you should only
 * create display specific resources when a widget has been realized,
 * and you should free those resources when the widget is unrealized.
 * @returns the #GdkWindow root window for the toplevel for this widget.
 */
get_root_window(): Gdk.Window
/**
 * Retrieves the internal scale factor that maps from window coordinates
 * to the actual device pixels. On traditional systems this is 1, on
 * high density outputs, it can be a higher value (typically 2).
 * 
 * See gdk_window_get_scale_factor().
 * @returns the scale factor for @widget
 */
get_scale_factor(): number
/**
 * Get the #GdkScreen from the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow
 * at the top.
 * 
 * In general, you should only create screen specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkScreen for the toplevel for this widget.
 */
get_screen(): Gdk.Screen
/**
 * Returns the widget’s sensitivity (in the sense of returning
 * the value that has been set using gtk_widget_set_sensitive()).
 * 
 * The effective sensitivity of a widget is however determined by both its
 * own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
 * @returns %TRUE if the widget is sensitive
 */
get_sensitive(): boolean
/**
 * Gets the settings object holding the settings used for this widget.
 * 
 * Note that this function can only be called when the #GtkWidget
 * is attached to a toplevel, since the settings object is specific
 * to a particular #GdkScreen.
 * @returns the relevant #GtkSettings object
 */
get_settings(): Gtk.Settings
/**
 * Gets the size request that was explicitly set for the widget using
 * gtk_widget_set_size_request(). A value of -1 stored in `width` or
 * `height` indicates that that dimension has not been set explicitly
 * and the natural requisition of the widget will be used instead. See
 * gtk_widget_set_size_request(). To get the size a widget will
 * actually request, call gtk_widget_get_preferred_size() instead of
 * this function.
 */
get_size_request(): [number, number]
/**
 * Returns the widget’s state. See gtk_widget_set_state().
 * @returns the state of @widget.
 */
get_state(): Gtk.StateType
/**
 * Returns the widget state as a flag set. It is worth mentioning
 * that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
 * returned, that is, also based on parent insensitivity, even if
 * `widget` itself is sensitive.
 * 
 * Also note that if you are looking for a way to obtain the
 * #GtkStateFlags to pass to a #GtkStyleContext method, you
 * should look at gtk_style_context_get_state().
 * @returns The state flags for widget
 */
get_state_flags(): Gtk.StateFlags
/**
 * Simply an accessor function that returns `widget->`style.
 * @returns the widget’s #GtkStyle
 */
get_style(): Gtk.Style
/**
 * Returns the style context associated to `widget`. The returned object is
 * guaranteed to be the same for the lifetime of `widget`.
 * @returns a #GtkStyleContext. This memory is owned by @widget and          must not be freed.
 */
get_style_context(): Gtk.StyleContext
/**
 * Returns %TRUE if `widget` is multiple pointer aware. See
 * gtk_widget_set_support_multidevice() for more information.
 * @returns %TRUE if @widget is multidevice aware.
 */
get_support_multidevice(): boolean
/**
 * Fetch an object build from the template XML for `widget_type` in this `widget` instance.
 * 
 * This will only report children which were previously declared with
 * gtk_widget_class_bind_template_child_full() or one of its
 * variants.
 * 
 * This function is only meant to be called for code which is private to the `widget_type` which
 * declared the child and is meant for language bindings which cannot easily make use
 * of the GObject structure offsets.
 * @param widget_type The #GType to get a template child for
 * @param name The “id” of the child defined in the template XML
 * @returns The object built in the template XML with the id @name
 */
get_template_child<T = GObject.Object>(widget_type: GObject.GType, name: string): T
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_markup(): (string | null)
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_text(): (string | null)
/**
 * Returns the #GtkWindow of the current tooltip. This can be the
 * GtkWindow created by default, or the custom tooltip window set
 * using gtk_widget_set_tooltip_window().
 * @returns The #GtkWindow of the current tooltip.
 */
get_tooltip_window(): Gtk.Window
/**
 * This function returns the topmost widget in the container hierarchy
 * `widget` is a part of. If `widget` has no parent widgets, it will be
 * returned as the topmost widget. No reference will be added to the
 * returned widget; it should not be unreferenced.
 * 
 * Note the difference in behavior vs. gtk_widget_get_ancestor();
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
 * would return
 * %NULL if `widget` wasn’t inside a toplevel window, and if the
 * window was inside a #GtkWindow-derived widget which was in turn
 * inside the toplevel #GtkWindow. While the second case may
 * seem unlikely, it actually happens when a #GtkPlug is embedded
 * inside a #GtkSocket within the same application.
 * 
 * To reliably find the toplevel #GtkWindow, use
 * gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
 * on the result. For instance, to get the title of a widget's toplevel
 * window, one might use:
 * 
 * ```c
 * static const char *
 * get_widget_toplevel_title (GtkWidget *widget)
 * {
 *   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 *   if (GTK_IS_WINDOW (toplevel))
 *     {
 *       return gtk_window_get_title (GTK_WINDOW (toplevel));
 *     }
 * 
 *   return NULL;
 * }
 * ```
 * 
 * @returns the topmost ancestor of @widget, or @widget itself    if there’s no ancestor.
 */
get_toplevel(): Gtk.Widget
/**
 * Gets the value of the #GtkWidget:valign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. If your widget want to support baseline aligned
 * children it must use gtk_widget_get_valign_with_baseline(), or
 * `g_object_get (widget, "valign", &value, NULL)`, which will
 * also report the true value.
 * @returns the vertical alignment of @widget, ignoring baseline alignment
 */
get_valign(): Gtk.Align
/**
 * Gets the value of the #GtkWidget:valign property, including
 * %GTK_ALIGN_BASELINE.
 * @returns the vertical alignment of @widget
 */
get_valign_with_baseline(): Gtk.Align
/**
 * Gets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_get_hexpand() for more detail.
 * @returns whether vexpand flag is set
 */
get_vexpand(): boolean
/**
 * Gets whether gtk_widget_set_vexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * See gtk_widget_get_hexpand_set() for more detail.
 * @returns whether vexpand has been explicitly set
 */
get_vexpand_set(): boolean
/**
 * Determines whether the widget is visible. If you want to
 * take into account whether the widget’s parent is also marked as
 * visible, use gtk_widget_is_visible() instead.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See gtk_widget_set_visible().
 * @returns %TRUE if the widget is visible
 */
get_visible(): boolean
/**
 * Gets the visual that will be used to render `widget`.
 * @returns the visual for @widget
 */
get_visual(): Gdk.Visual
/**
 * Returns the widget’s window if it is realized, %NULL otherwise
 * @returns @widget’s window.
 */
get_window(): (Gdk.Window | null)
/**
 * Makes `widget` the current grabbed widget.
 * 
 * This means that interaction with other widgets in the same
 * application is blocked and mouse as well as keyboard events
 * are delivered to this widget.
 * 
 * If `widget` is not sensitive, it is not set as the current
 * grabbed widget and this function does nothing.
 */
grab_add(): void
/**
 * Causes `widget` to become the default widget. `widget` must be able to be
 * a default widget; typically you would ensure this yourself
 * by calling gtk_widget_set_can_default() with a %TRUE value.
 * The default widget is activated when
 * the user presses Enter in a window. Default widgets must be
 * activatable, that is, gtk_widget_activate() should affect them. Note
 * that #GtkEntry widgets require the “activates-default” property
 * set to %TRUE before they activate the default widget when Enter
 * is pressed and the #GtkEntry is focused.
 */
grab_default(): void
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
grab_focus(): void
/**
 * Removes the grab from the given widget.
 * 
 * You have to pair calls to gtk_grab_add() and gtk_grab_remove().
 * 
 * If `widget` does not have the grab, this function does nothing.
 */
grab_remove(): void
/**
 * Determines whether the widget is currently grabbing events, so it
 * is the only widget receiving input events (keyboard and mouse).
 * 
 * See also gtk_grab_add().
 * @returns %TRUE if the widget is in the grab_widgets stack
 */
has_grab(): boolean
/**
 * Determines if the widget style has been looked up through the rc mechanism.
 * @returns %TRUE if the widget has been looked up through the rc   mechanism, %FALSE otherwise.
 */
has_rc_style(): boolean
/**
 * Checks whether there is a #GdkScreen is associated with
 * this widget. All toplevel widgets have an associated
 * screen, and all widgets added into a hierarchy with a toplevel
 * window at the top.
 * @returns %TRUE if there is a #GdkScreen associated   with the widget.
 */
has_screen(): boolean
/**
 * Determines if the widget should show a visible indication that
 * it has the global input focus. This is a convenience function for
 * use in ::draw handlers that takes into account whether focus
 * indication should currently be shown in the toplevel window of
 * `widget`. See gtk_window_get_focus_visible() for more information
 * about focus indication.
 * 
 * To find out if the widget has the global input focus, use
 * gtk_widget_has_focus().
 * @returns %TRUE if the widget should display a “focus rectangle”
 */
has_visible_focus(): boolean
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
hide(): void
/**
 * Utility function; intended to be connected to the #GtkWidget::delete-event
 * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
 * argument, then returns %TRUE. If connected to ::delete-event, the
 * result is that clicking the close button for a window (on the
 * window frame, top right corner usually) will hide but not destroy
 * the window. By default, GTK+ destroys windows when ::delete-event
 * is received.
 * @returns %TRUE
 */
hide_on_delete(): boolean
/**
 * Returns whether the widget is currently being destroyed.
 * This information can sometimes be used to avoid doing
 * unnecessary work.
 * @returns %TRUE if @widget is being destroyed
 */
in_destruction(): boolean
/**
 * Creates and initializes child widgets defined in templates. This
 * function must be called in the instance initializer for any
 * class which assigned itself a template using gtk_widget_class_set_template()
 * 
 * It is important to call this function in the instance initializer
 * of a #GtkWidget subclass and not in #GObject.constructed() or
 * #GObject.constructor() for two reasons.
 * 
 * One reason is that generally derived widgets will assume that parent
 * class composite widgets have been created in their instance
 * initializers.
 * 
 * Another reason is that when calling g_object_new() on a widget with
 * composite templates, it’s important to build the composite widgets
 * before the construct properties are set. Properties passed to g_object_new()
 * should take precedence over properties set in the private template XML.
 */
init_template(): void
/**
 * Sets an input shape for this widget’s GDK window. This allows for
 * windows which react to mouse click in a nonrectangular region, see
 * gdk_window_input_shape_combine_region() for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
input_shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Inserts `group` into `widget`. Children of `widget` that implement
 * #GtkActionable can then be associated with actions in `group` by
 * setting their “action-name” to
 * `prefix`.`action-name`.
 * 
 * If `group` is %NULL, a previously inserted group for `name` is removed
 * from `widget`.
 * @param name the prefix for actions in @group
 * @param group a #GActionGroup, or %NULL
 */
insert_action_group(name: string, group?: (Gio.ActionGroup | null)): void
/**
 * Computes the intersection of a `widget’`s area and `area,` storing
 * the intersection in `intersection,` and returns %TRUE if there was
 * an intersection.  `intersection` may be %NULL if you’re only
 * interested in whether there was an intersection.
 * @param area a rectangle
 * @returns %TRUE if there was an intersection
 */
intersect(area: Gdk.Rectangle): [boolean, Gdk.Rectangle | null]
/**
 * Determines whether `widget` is somewhere inside `ancestor,` possibly with
 * intermediate containers.
 * @param ancestor another #GtkWidget
 * @returns %TRUE if @ancestor contains @widget as a child,    grandchild, great grandchild, etc.
 */
is_ancestor(ancestor: Gtk.Widget): boolean
/**
 * Whether `widget` can rely on having its alpha channel
 * drawn correctly. On X11 this function returns whether a
 * compositing manager is running for `widget’`s screen.
 * 
 * Please note that the semantics of this call will change
 * in the future if used on a widget that has a composited
 * window in its hierarchy (as set by gdk_window_set_composited()).
 * @returns %TRUE if the widget can rely on its alpha channel being drawn correctly.
 */
is_composited(): boolean
/**
 * Determines whether `widget` can be drawn to. A widget can be drawn
 * to if it is mapped and visible.
 * @returns %TRUE if @widget is drawable, %FALSE otherwise
 */
is_drawable(): boolean
/**
 * Returns the widget’s effective sensitivity, which means
 * it is sensitive itself and also its parent widget is sensitive
 * @returns %TRUE if the widget is effectively sensitive
 */
is_sensitive(): boolean
/**
 * Determines whether `widget` is a toplevel widget.
 * 
 * Currently only #GtkWindow and #GtkInvisible (and out-of-process
 * #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
 * widget.
 * @returns %TRUE if @widget is a toplevel, %FALSE otherwise
 */
is_toplevel(): boolean
/**
 * Determines whether the widget and all its parents are marked as
 * visible.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See also gtk_widget_get_visible() and gtk_widget_set_visible()
 * @returns %TRUE if the widget and all its parents are visible
 */
is_visible(): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 * @returns %TRUE if stopping keyboard navigation is fine, %FALSE               if the emitting widget should try to handle the keyboard               navigation attempt in its parent container(s).
 */
keynav_failed(direction: Gtk.DirectionType): boolean
/**
 * Lists the closures used by `widget` for accelerator group connections
 * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
 * The closures can be used to monitor accelerator changes on `widget,`
 * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
 * #GtkAccelGroup of a closure which can be found out with
 * gtk_accel_group_from_accel_closure().
 * @returns a newly allocated #GList of closures
 */
list_accel_closures(): GObject.Closure[]
/**
 * Retrieves a %NULL-terminated array of strings containing the prefixes of
 * #GActionGroup's available to `widget`.
 * @returns a %NULL-terminated array of strings.
 */
list_action_prefixes(): string[]
/**
 * Returns a newly allocated list of the widgets, normally labels, for
 * which this widget is the target of a mnemonic (see for example,
 * gtk_label_set_mnemonic_widget()).
 * 
 * The widgets in the list are not individually referenced. If you
 * want to iterate through the list and perform actions involving
 * callbacks that might destroy the widgets, you
 * must call `g_list_foreach (result,
 * (GFunc)g_object_ref, NULL)` first, and then unref all the
 * widgets afterwards.
 * @returns the list of  mnemonic labels; free this list  with g_list_free() when you are done with it.
 */
list_mnemonic_labels(): Gtk.Widget[]
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
map(): void
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 * @returns %TRUE if the signal has been handled
 */
mnemonic_activate(group_cycling: boolean): boolean
/**
 * Sets the base color for a widget in a particular state.
 * All other style values are left untouched. The base color
 * is the background color used along with the text color
 * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
 * and #GtkTextView. See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > base color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the base color on that.
 * @param state the state for which to set the base color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_base().
 */
modify_base(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > background color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the background color on that.
 * @param state the state for which to set the background color
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_bg().
 */
modify_bg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the #GtkWidget
 * cursor-color and secondary-cursor-color
 * style properties.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param primary the color to use for primary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_cursor().
 * @param secondary the color to use for secondary cursor (does     not need to be allocated), or %NULL to undo the effect of     previous calls to of gtk_widget_modify_cursor().
 */
modify_cursor(primary?: (Gdk.Color | null), secondary?: (Gdk.Color | null)): void
/**
 * Sets the foreground color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the foreground color
 * @param color the color to assign (does not need to be allocated),     or %NULL to undo the effect of previous calls to     of gtk_widget_modify_fg().
 */
modify_fg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the font to use for a widget.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param font_desc the font description to use, or %NULL     to undo the effect of previous calls to gtk_widget_modify_font()
 */
modify_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Modifies style values on the widget.
 * 
 * Modifications made using this technique take precedence over
 * style values set via an RC file, however, they will be overridden
 * if a style is explicitly set on the widget using gtk_widget_set_style().
 * The #GtkRcStyle-struct is designed so each field can either be
 * set or unset, so it is possible, using this function, to modify some
 * style values and leave the others unchanged.
 * 
 * Note that modifications made with this function are not cumulative
 * with previous calls to gtk_widget_modify_style() or with such
 * functions as gtk_widget_modify_fg(). If you wish to retain
 * previous values, you must first call gtk_widget_get_modifier_style(),
 * make your modifications to the returned style, then call
 * gtk_widget_modify_style() with that style. On the other hand,
 * if you first call gtk_widget_modify_style(), subsequent calls
 * to such functions gtk_widget_modify_fg() will have a cumulative
 * effect with the initial modifications.
 * @param style the #GtkRcStyle-struct holding the style modifications
 */
modify_style(style: Gtk.RcStyle): void
/**
 * Sets the text color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * The text color is the foreground color used along with the
 * base color (see gtk_widget_modify_base()) for widgets such
 * as #GtkEntry and #GtkTextView.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the text color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_text().
 */
modify_text(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color to use for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color().
 * @param state the state for which to set the background color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_background_color()
 */
override_background_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the color to use for a widget.
 * 
 * All other style values are left untouched.
 * 
 * This function does not act recursively. Setting the color of a
 * container does not affect its children. Note that some widgets that
 * you may not think of as containers, for instance #GtkButtons,
 * are actually containers.
 * 
 * This API is mostly meant as a quick way for applications to
 * change a widget appearance. If you are developing a widgets
 * library and intend this change to be themeable, it is better
 * done by setting meaningful CSS classes in your
 * widget/container implementation through gtk_style_context_add_class().
 * 
 * This way, your widget library can install a #GtkCssProvider
 * with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
 * to provide a default styling for those widgets that need so, and
 * this theming may fully overridden by the user’s theme.
 * 
 * Note that for complex widgets this may bring in undesired
 * results (such as uniform background color everywhere), in
 * these cases it is better to fully style such widgets through a
 * #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
 * priority.
 * @param state the state for which to set the color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_color()
 */
override_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the
 * cursor-color and secondary-cursor-color
 * style properties. All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * Note that the underlying properties have the #GdkColor type,
 * so the alpha value in `primary` and `secondary` will be ignored.
 * @param cursor the color to use for primary cursor (does not need to be     allocated), or %NULL to undo the effect of previous calls to     of gtk_widget_override_cursor().
 * @param secondary_cursor the color to use for secondary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_override_cursor().
 */
override_cursor(cursor?: (Gdk.RGBA | null), secondary_cursor?: (Gdk.RGBA | null)): void
/**
 * Sets the font to use for a widget. All other style values are
 * left untouched. See gtk_widget_override_color().
 * @param font_desc the font description to use, or %NULL to undo     the effect of previous calls to gtk_widget_override_font()
 */
override_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Sets a symbolic color for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color() for overriding the foreground
 * or background color.
 * @param name the name of the symbolic color to modify
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to gtk_widget_override_symbolic_color()
 */
override_symbolic_color(name: string, color?: (Gdk.RGBA | null)): void
/**
 * Obtains the full path to `widget`. The path is simply the name of a
 * widget and all its parents in the container hierarchy, separated by
 * periods. The name of a widget comes from
 * gtk_widget_get_name(). Paths are used to apply styles to a widget
 * in gtkrc configuration files. Widget names are the type of the
 * widget by default (e.g. “GtkButton”) or can be set to an
 * application-specific value with gtk_widget_set_name(). By setting
 * the name of a widget, you allow users or theme authors to apply
 * styles to that specific widget in their gtkrc
 * file. `path_reversed_p` fills in the path in reverse order,
 * i.e. starting with `widget’`s name instead of starting with the name
 * of `widget’`s outermost ancestor.
 */
path(): [number, string, string]
/**
 * This function is only for use in widget implementations.
 * 
 * Flags the widget for a rerun of the GtkWidgetClass::size_allocate
 * function. Use this function instead of gtk_widget_queue_resize()
 * when the `widget'`s size request didn't change but it wants to
 * reposition its contents.
 * 
 * An example user of this function is gtk_widget_set_halign().
 */
queue_allocate(): void
/**
 * Mark `widget` as needing to recompute its expand flags. Call
 * this function when setting legacy expand child properties
 * on the child of a container.
 * 
 * See gtk_widget_compute_expand().
 */
queue_compute_expand(): void
/**
 * Equivalent to calling gtk_widget_queue_draw_area() for the
 * entire area of a widget.
 */
queue_draw(): void
/**
 * Convenience function that calls gtk_widget_queue_draw_region() on
 * the region created from the given coordinates.
 * 
 * The region here is specified in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(), and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 * 
 * `width` or `height` may be 0, in this case this function does
 * nothing. Negative values for `width` and `height` are not allowed.
 * @param x x coordinate of upper-left corner of rectangle to redraw
 * @param y y coordinate of upper-left corner of rectangle to redraw
 * @param width width of region to draw
 * @param height height of region to draw
 */
queue_draw_area(x: number, y: number, width: number, height: number): void
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
queue_draw_region(region: cairo.Region): void
/**
 * This function is only for use in widget implementations.
 * Flags a widget to have its size renegotiated; should
 * be called when a widget for some reason has a new size request.
 * For example, when you change the text in a #GtkLabel, #GtkLabel
 * queues a resize to ensure there’s enough space for the new text.
 * 
 * Note that you cannot call gtk_widget_queue_resize() on a widget
 * from inside its implementation of the GtkWidgetClass::size_allocate
 * virtual method. Calls to gtk_widget_queue_resize() from inside
 * GtkWidgetClass::size_allocate will be silently ignored.
 */
queue_resize(): void
/**
 * This function works like gtk_widget_queue_resize(),
 * except that the widget is not invalidated.
 */
queue_resize_no_redraw(): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
realize(): void
/**
 * Computes the intersection of a `widget’`s area and `region,` returning
 * the intersection. The result may be empty, use cairo_region_is_empty() to
 * check.
 * @param region a #cairo_region_t, in the same coordinate system as          @widget->allocation. That is, relative to @widget->window          for widgets which return %FALSE from gtk_widget_get_has_window();          relative to the parent window of @widget->window otherwise.
 * @returns A newly allocated region holding the intersection of @widget     and @region.
 */
region_intersect(region: cairo.Region): cairo.Region
/**
 * Registers a #GdkWindow with the widget and sets it up so that
 * the widget receives events for it. Call gtk_widget_unregister_window()
 * when destroying the window.
 * 
 * Before 3.8 you needed to call gdk_window_set_user_data() directly to set
 * this up. This is now deprecated and you should use gtk_widget_register_window()
 * instead. Old code will keep working as is, although some new features like
 * transparency might not work perfectly.
 * @param window a #GdkWindow
 */
register_window(window: Gdk.Window): void
/**
 * Removes an accelerator from `widget,` previously installed with
 * gtk_widget_add_accelerator().
 * @param accel_group accel group for this widget
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @returns whether an accelerator was installed and could be removed
 */
remove_accelerator(accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType): boolean
/**
 * Removes a widget from the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
 * must have previously been added to the list with
 * gtk_widget_add_mnemonic_label().
 * @param label a #GtkWidget that was previously set as a mnemonic label for         @widget with gtk_widget_add_mnemonic_label().
 */
remove_mnemonic_label(label: Gtk.Widget): void
/**
 * Removes a tick callback previously registered with
 * gtk_widget_add_tick_callback().
 * @param id an id returned by gtk_widget_add_tick_callback()
 */
remove_tick_callback(id: number): void
/**
 * A convenience function that uses the theme settings for `widget`
 * to look up `stock_id` and render it to a pixbuf. `stock_id` should
 * be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size`
 * should be a size such as #GTK_ICON_SIZE_MENU. `detail` should be a
 * string that identifies the widget or code doing the rendering, so
 * that theme engines can special-case rendering for that widget or
 * code.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be
 * freed after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @param detail render detail to pass to theme engine
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon(stock_id: string, size: number, detail?: (string | null)): (GdkPixbuf.Pixbuf | null)
/**
 * A convenience function that uses the theme engine and style
 * settings for `widget` to look up `stock_id` and render it to
 * a pixbuf. `stock_id` should be a stock icon ID such as
 * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
 * such as #GTK_ICON_SIZE_MENU.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be freed
 * after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon_pixbuf(stock_id: string, size: number): (GdkPixbuf.Pixbuf | null)
/**
 * Moves a widget from one #GtkContainer to another, handling reference
 * count issues to avoid destroying the widget.
 * @param new_parent a #GtkContainer to move the widget into
 */
reparent(new_parent: Gtk.Widget): void
/**
 * Reset the styles of `widget` and all descendents, so when
 * they are looked up again, they get the correct values
 * for the currently loaded RC file settings.
 * 
 * This function is not useful for applications.
 */
reset_rc_styles(): void
/**
 * Updates the style context of `widget` and all descendants
 * by updating its widget path. #GtkContainers may want
 * to use this on a child when reordering it in a way that a different
 * style might apply to it. See also gtk_container_get_path_for_child().
 */
reset_style(): void
/**
 * Very rarely-used function. This function is used to emit
 * an expose event on a widget. This function is not normally used
 * directly. The only time it is used is when propagating an expose
 * event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
 * and that is normally done using gtk_container_propagate_draw().
 * 
 * If you want to force an area of a window to be redrawn,
 * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
 * To cause the redraw to be done immediately, follow that call
 * with a call to gdk_window_process_updates().
 * @param event a expose #GdkEvent
 * @returns return from the event signal emission (%TRUE if   the event was handled)
 */
send_expose(event: Gdk.Event): number
/**
 * Sends the focus change `event` to `widget`
 * 
 * This function is not meant to be used by applications. The only time it
 * should be used is when it is necessary for a #GtkWidget to assign focus
 * to a widget that is semantically owned by the first widget even though
 * it’s not a direct child - for instance, a search entry in a floating
 * window similar to the quick search in #GtkTreeView.
 * 
 * An example of its usage is:
 * 
 * 
 * ```c
 *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
 * 
 *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
 *   fevent->focus_change.in = TRUE;
 *   fevent->focus_change.window = _gtk_widget_get_window (widget);
 *   if (fevent->focus_change.window != NULL)
 *     g_object_ref (fevent->focus_change.window);
 * 
 *   gtk_widget_send_focus_change (widget, fevent);
 * 
 *   gdk_event_free (event);
 * ```
 * 
 * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
 * @returns the return value from the event signal emission: %TRUE   if the event was handled, and %FALSE otherwise
 */
send_focus_change(event: Gdk.Event): boolean
/**
 * Given an accelerator group, `accel_group,` and an accelerator path,
 * `accel_path,` sets up an accelerator in `accel_group` so whenever the
 * key binding that is defined for `accel_path` is pressed, `widget`
 * will be activated.  This removes any accelerators (for any
 * accelerator group) installed by previous calls to
 * gtk_widget_set_accel_path(). Associating accelerators with
 * paths allows them to be modified by the user and the modifications
 * to be saved for future use. (See gtk_accel_map_save().)
 * 
 * This function is a low level function that would most likely
 * be used by a menu creation system like #GtkUIManager. If you
 * use #GtkUIManager, setting up accelerator paths will be done
 * automatically.
 * 
 * Even when you you aren’t using #GtkUIManager, if you only want to
 * set up accelerators on menu items gtk_menu_item_set_accel_path()
 * provides a somewhat more convenient interface.
 * 
 * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
 * pass a static string, you can save some memory by interning it first with
 * g_intern_static_string().
 * @param accel_path path used to look up the accelerator
 * @param accel_group a #GtkAccelGroup.
 */
set_accel_path(accel_path?: (string | null), accel_group?: (Gtk.AccelGroup | null)): void
/**
 * Sets the widget’s allocation.  This should not be used
 * directly, but from within a widget’s size_allocate method.
 * 
 * The allocation set should be the “adjusted” or actual
 * allocation. If you’re implementing a #GtkContainer, you want to use
 * gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
 * The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
 * allocation inside gtk_widget_size_allocate() to create an adjusted
 * allocation.
 * @param allocation a pointer to a #GtkAllocation to copy from
 */
set_allocation(allocation: Gtk.Allocation): void
/**
 * Sets whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * This is a hint to the widget and does not affect the behavior of
 * the GTK+ core; many widgets ignore this flag entirely. For widgets
 * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
 * the effect is to suppress default themed drawing of the widget's
 * background. (Children of the widget will still be drawn.) The application
 * is then entirely responsible for drawing the widget background.
 * 
 * Note that the background is still drawn when the widget is mapped.
 * @param app_paintable %TRUE if the application will paint on the widget
 */
set_app_paintable(app_paintable: boolean): void
/**
 * Specifies whether `widget` can be a default widget. See
 * gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param can_default whether or not @widget can be a default widget.
 */
set_can_default(can_default: boolean): void
/**
 * Specifies whether `widget` can own the input focus. See
 * gtk_widget_grab_focus() for actually setting the input focus on a
 * widget.
 * @param can_focus whether or not @widget can own the input focus.
 */
set_can_focus(can_focus: boolean): void
/**
 * Sets the widget’s clip.  This must not be used directly,
 * but from within a widget’s size_allocate method.
 * It must be called after gtk_widget_set_allocation() (or after chaining up
 * to the parent class), because that function resets the clip.
 * 
 * The clip set should be the area that `widget` draws on. If `widget` is a
 * #GtkContainer, the area must contain all children's clips.
 * 
 * If this function is not called by `widget` during a ::size-allocate handler,
 * the clip will be set to `widget'`s allocation.
 * @param clip a pointer to a #GtkAllocation to copy from
 */
set_clip(clip: Gtk.Allocation): void
/**
 * Sets a widgets composite name. The widget must be
 * a composite child of its parent; see gtk_widget_push_composite_child().
 * @param name the name to set
 */
set_composite_name(name: string): void
/**
 * Enables or disables a #GdkDevice to interact with `widget`
 * and all its children.
 * 
 * It does so by descending through the #GdkWindow hierarchy
 * and enabling the same mask that is has for core events
 * (i.e. the one that gdk_window_get_events() returns).
 * @param device a #GdkDevice
 * @param enabled whether to enable the device
 */
set_device_enabled(device: Gdk.Device, enabled: boolean): void
/**
 * Sets the device event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive from `device`. Keep
 * in mind that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_device_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with windowless widgets (which return
 * %FALSE from gtk_widget_get_has_window());
 * to get events on those widgets, place them inside a #GtkEventBox
 * and receive events on the event box.
 * @param device a #GdkDevice
 * @param events event mask
 */
set_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Sets the reading direction on a particular widget. This direction
 * controls the primary direction for widgets containing text,
 * and also the direction in which the children of a container are
 * packed. The ability to set the direction is present in order
 * so that correct localization into languages with right-to-left
 * reading directions can be done. Generally, applications will
 * let the default reading direction present, except for containers
 * where the containers are arranged in an order that is explicitly
 * visual rather than logical (such as buttons for text justification).
 * 
 * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
 * set by gtk_widget_set_default_direction() will be used.
 * @param dir the new direction
 */
set_direction(dir: Gtk.TextDirection): void
/**
 * Widgets are double buffered by default; you can use this function
 * to turn off the buffering. “Double buffered” simply means that
 * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
 * automatically around expose events sent to the
 * widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
 * window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
 * buffer to the screen. The result is that users see the window
 * update in one smooth step, and don’t see individual graphics
 * primitives being rendered.
 * 
 * In very simple terms, double buffered widgets don’t flicker,
 * so you would only use this function to turn off double buffering
 * if you had special needs and really knew what you were doing.
 * 
 * Note: if you turn off double-buffering, you have to handle
 * expose events, since even the clearing to the background color or
 * pixmap will not happen automatically (as it is done in
 * gdk_window_begin_draw_frame()).
 * 
 * In 3.10 GTK and GDK have been restructured for translucent drawing. Since
 * then expose events for double-buffered widgets are culled into a single
 * event to the toplevel GDK window. If you now unset double buffering, you
 * will cause a separate rendering pass for every widget. This will likely
 * cause rendering problems - in particular related to stacking - and usually
 * increases rendering times significantly.
 * @param double_buffered %TRUE to double-buffer a widget
 */
set_double_buffered(double_buffered: boolean): void
/**
 * Sets the event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive. Keep in mind
 * that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with widgets that have no window.
 * (See gtk_widget_get_has_window()).  To get events on those widgets,
 * place them inside a #GtkEventBox and receive events on the event
 * box.
 * @param events event mask
 */
set_events(events: number): void
/**
 * Sets whether the widget should grab focus when it is clicked with the mouse.
 * Making mouse clicks not grab focus is useful in places like toolbars where
 * you don’t want the keyboard focus removed from the main area of the
 * application.
 * @param focus_on_click whether the widget should grab focus when clicked with the mouse
 */
set_focus_on_click(focus_on_click: boolean): void
/**
 * Sets the font map to use for Pango rendering. When not set, the widget
 * will inherit the font map from its parent.
 * @param font_map a #PangoFontMap, or %NULL to unset any previously     set font map
 */
set_font_map(font_map?: (Pango.FontMap | null)): void
/**
 * Sets the #cairo_font_options_t used for Pango rendering in this widget.
 * When not set, the default font options for the #GdkScreen will be used.
 * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
 */
set_font_options(options?: (cairo.FontOptions | null)): void
/**
 * Sets the horizontal alignment of `widget`.
 * See the #GtkWidget:halign property.
 * @param align the horizontal alignment
 */
set_halign(align: Gtk.Align): void
/**
 * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
 * #GtkWidget:has-tooltip for more information.
 * @param has_tooltip whether or not @widget has a tooltip.
 */
set_has_tooltip(has_tooltip: boolean): void
/**
 * Specifies whether `widget` has a #GdkWindow of its own. Note that
 * all realized widgets have a non-%NULL “window” pointer
 * (gtk_widget_get_window() never returns a %NULL window when a widget
 * is realized), but for many of them it’s actually the #GdkWindow of
 * one of its parent widgets. Widgets that do not create a %window for
 * themselves in #GtkWidget::realize must announce this by
 * calling this function with `has_window` = %FALSE.
 * 
 * This function should only be called by widget implementations,
 * and they should call it in their init() function.
 * @param has_window whether or not @widget has a window.
 */
set_has_window(has_window: boolean): void
/**
 * Sets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Call this function to set the expand flag if you would like your
 * widget to become larger horizontally when the window has extra
 * room.
 * 
 * By default, widgets automatically expand if any of their children
 * want to expand. (To see if a widget will automatically expand given
 * its current children and state, call gtk_widget_compute_expand(). A
 * container can decide how the expandability of children affects the
 * expansion of the container by overriding the compute_expand virtual
 * method on #GtkWidget.).
 * 
 * Setting hexpand explicitly with this function will override the
 * automatic expand behavior.
 * 
 * This function forces the widget to expand or not to expand,
 * regardless of children.  The override occurs because
 * gtk_widget_set_hexpand() sets the hexpand-set property (see
 * gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
 * value to be used, rather than looking at children and widget state.
 * @param expand whether to expand
 */
set_hexpand(expand: boolean): void
/**
 * Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
 * be used.
 * 
 * The hexpand-set property will be set automatically when you call
 * gtk_widget_set_hexpand() to set hexpand, so the most likely
 * reason to use this function would be to unset an explicit expand
 * flag.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @param set value for hexpand-set property
 */
set_hexpand_set(set: boolean): void
/**
 * Marks the widget as being mapped.
 * 
 * This function should only ever be called in a derived widget's
 * “map” or “unmap” implementation.
 * @param mapped %TRUE to mark the widget as mapped
 */
set_mapped(mapped: boolean): void
/**
 * Sets the bottom margin of `widget`.
 * See the #GtkWidget:margin-bottom property.
 * @param margin the bottom margin
 */
set_margin_bottom(margin: number): void
/**
 * Sets the end margin of `widget`.
 * See the #GtkWidget:margin-end property.
 * @param margin the end margin
 */
set_margin_end(margin: number): void
/**
 * Sets the left margin of `widget`.
 * See the #GtkWidget:margin-left property.
 * @param margin the left margin
 */
set_margin_left(margin: number): void
/**
 * Sets the right margin of `widget`.
 * See the #GtkWidget:margin-right property.
 * @param margin the right margin
 */
set_margin_right(margin: number): void
/**
 * Sets the start margin of `widget`.
 * See the #GtkWidget:margin-start property.
 * @param margin the start margin
 */
set_margin_start(margin: number): void
/**
 * Sets the top margin of `widget`.
 * See the #GtkWidget:margin-top property.
 * @param margin the top margin
 */
set_margin_top(margin: number): void
/**
 * Widgets can be named, which allows you to refer to them from a
 * CSS file. You can apply a style to widgets with a particular name
 * in the CSS file. See the documentation for the CSS syntax (on the
 * same page as the docs for #GtkStyleContext).
 * 
 * Note that the CSS syntax has certain special characters to delimit
 * and represent elements in a selector (period, #, >, *...), so using
 * these will make your widget impossible to match by name. Any combination
 * of alphanumeric symbols, dashes and underscores will suffice.
 * @param name name for the widget
 */
set_name(name: string): void
/**
 * Sets the #GtkWidget:no-show-all property, which determines whether
 * calls to gtk_widget_show_all() will affect this widget.
 * 
 * This is mostly for use in constructing widget hierarchies with externally
 * controlled visibility, see #GtkUIManager.
 * @param no_show_all the new value for the “no-show-all” property
 */
set_no_show_all(no_show_all: boolean): void
/**
 * Request the `widget` to be rendered partially transparent,
 * with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
 * are clamped to the [0,1] range.).
 * This works on both toplevel widget, and child widgets, although there
 * are some limitations:
 * 
 * For toplevel widgets this depends on the capabilities of the windowing
 * system. On X11 this has any effect only on X screens with a compositing manager
 * running. See gtk_widget_is_composited(). On Windows it should work
 * always, although setting a window’s opacity after the window has been
 * shown causes it to flicker once on Windows.
 * 
 * For child widgets it doesn’t work if any affected widget has a native window, or
 * disables double buffering.
 * @param opacity desired opacity, between 0 and 1
 */
set_opacity(opacity: number): void
/**
 * This function is useful only when implementing subclasses of
 * #GtkContainer.
 * Sets the container as the parent of `widget,` and takes care of
 * some details such as updating the state and style of the child
 * to reflect its new location. The opposite function is
 * gtk_widget_unparent().
 * @param parent parent container
 */
set_parent(parent: Gtk.Widget): void
/**
 * Sets a non default parent window for `widget`.
 * 
 * For #GtkWindow classes, setting a `parent_window` effects whether
 * the window is a toplevel window or can be embedded into other
 * widgets.
 * 
 * For #GtkWindow classes, this needs to be called before the
 * window is realized.
 * @param parent_window the new parent window.
 */
set_parent_window(parent_window: Gdk.Window): void
/**
 * Marks the widget as being realized. This function must only be
 * called after all #GdkWindows for the `widget` have been created
 * and registered.
 * 
 * This function should only ever be called in a derived widget's
 * “realize” or “unrealize” implementation.
 * @param realized %TRUE to mark the widget as realized
 */
set_realized(realized: boolean): void
/**
 * Specifies whether `widget` will be treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param receives_default whether or not @widget can be a default widget.
 */
set_receives_default(receives_default: boolean): void
/**
 * Sets whether the entire widget is queued for drawing when its size
 * allocation changes. By default, this setting is %TRUE and
 * the entire widget is redrawn on every size change. If your widget
 * leaves the upper left unchanged when made bigger, turning this
 * setting off will improve performance.
 * 
 * Note that for widgets where gtk_widget_get_has_window() is %FALSE
 * setting this flag to %FALSE turns off all allocation on resizing:
 * the widget will not even redraw if its position changes; this is to
 * allow containers that don’t draw anything to avoid excess
 * invalidations. If you set this flag on a widget with no window that
 * does draw on `widget->`window, you are
 * responsible for invalidating both the old and new allocation of the
 * widget when the widget is moved and responsible for invalidating
 * regions newly when the widget increases size.
 * @param redraw_on_allocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
 */
set_redraw_on_allocate(redraw_on_allocate: boolean): void
/**
 * Sets the sensitivity of a widget. A widget is sensitive if the user
 * can interact with it. Insensitive widgets are “grayed out” and the
 * user can’t interact with them. Insensitive widgets are known as
 * “inactive”, “disabled”, or “ghosted” in some other toolkits.
 * @param sensitive %TRUE to make the widget sensitive
 */
set_sensitive(sensitive: boolean): void
/**
 * Sets the minimum size of a widget; that is, the widget’s size
 * request will be at least `width` by `height`. You can use this
 * function to force a widget to be larger than it normally would be.
 * 
 * In most cases, gtk_window_set_default_size() is a better choice for
 * toplevel windows than this function; setting the default size will
 * still allow users to shrink the window. Setting the size request
 * will force them to leave the window at least as large as the size
 * request. When dealing with window sizes,
 * gtk_window_set_geometry_hints() can be a useful function as well.
 * 
 * Note the inherent danger of setting any fixed size - themes,
 * translations into other languages, different fonts, and user action
 * can all change the appropriate size for a given widget. So, it's
 * basically impossible to hardcode a size that will always be
 * correct.
 * 
 * The size request of a widget is the smallest size a widget can
 * accept while still functioning well and drawing itself correctly.
 * However in some strange cases a widget may be allocated less than
 * its requested size, and in many cases a widget may be allocated more
 * space than it requested.
 * 
 * If the size request in a given direction is -1 (unset), then
 * the “natural” size request of the widget will be used instead.
 * 
 * The size request set here does not include any margin from the
 * #GtkWidget properties margin-left, margin-right, margin-top, and
 * margin-bottom, but it does include pretty much all other padding
 * or border properties set by any subclass of #GtkWidget.
 * @param width width @widget should request, or -1 to unset
 * @param height height @widget should request, or -1 to unset
 */
set_size_request(width: number, height: number): void
/**
 * This function is for use in widget implementations. Sets the state
 * of a widget (insensitive, prelighted, etc.) Usually you should set
 * the state using wrapper functions such as gtk_widget_set_sensitive().
 * @param state new state for @widget
 */
set_state(state: Gtk.StateType): void
/**
 * This function is for use in widget implementations. Turns on flag
 * values in the current widget state (insensitive, prelighted, etc.).
 * 
 * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
 * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
 * direction, use gtk_widget_set_direction().
 * 
 * It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
 * will be propagated down to all non-internal children if `widget` is a
 * #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
 * down to all #GtkContainer children by different means than turning on the
 * state flag down the hierarchy, both gtk_widget_get_state_flags() and
 * gtk_widget_is_sensitive() will make use of these.
 * @param flags State flags to turn on
 * @param clear Whether to clear state before turning on @flags
 */
set_state_flags(flags: Gtk.StateFlags, clear: boolean): void
/**
 * Used to set the #GtkStyle for a widget (`widget->`style). Since
 * GTK 3, this function does nothing, the passed in style is ignored.
 * @param style a #GtkStyle, or %NULL to remove the effect     of a previous call to gtk_widget_set_style() and go back to     the default style
 */
set_style(style?: (Gtk.Style | null)): void
/**
 * Enables or disables multiple pointer awareness. If this setting is %TRUE,
 * `widget` will start receiving multiple, per device enter/leave events. Note
 * that if custom #GdkWindows are created in #GtkWidget::realize,
 * gdk_window_set_support_multidevice() will have to be called manually on them.
 * @param support_multidevice %TRUE to support input from multiple devices.
 */
set_support_multidevice(support_multidevice: boolean): void
/**
 * Sets `markup` as the contents of the tooltip, which is marked up with
 *  the [Pango text markup language][PangoMarkupFormat].
 * 
 * This function will take care of setting #GtkWidget:has-tooltip to %TRUE
 * and of the default handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-markup property and
 * gtk_tooltip_set_markup().
 * @param markup the contents of the tooltip for @widget, or %NULL
 */
set_tooltip_markup(markup?: (string | null)): void
/**
 * Sets `text` as the contents of the tooltip. This function will take
 * care of setting #GtkWidget:has-tooltip to %TRUE and of the default
 * handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
 * @param text the contents of the tooltip for @widget
 */
set_tooltip_text(text?: (string | null)): void
/**
 * Replaces the default window used for displaying
 * tooltips with `custom_window`. GTK+ will take care of showing and
 * hiding `custom_window` at the right moment, to behave likewise as
 * the default tooltip window. If `custom_window` is %NULL, the default
 * tooltip window will be used.
 * @param custom_window a #GtkWindow, or %NULL
 */
set_tooltip_window(custom_window?: (Gtk.Window | null)): void
/**
 * Sets the vertical alignment of `widget`.
 * See the #GtkWidget:valign property.
 * @param align the vertical alignment
 */
set_valign(align: Gtk.Align): void
/**
 * Sets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_set_hexpand() for more detail.
 * @param expand whether to expand
 */
set_vexpand(expand: boolean): void
/**
 * Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
 * be used.
 * 
 * See gtk_widget_set_hexpand_set() for more detail.
 * @param set value for vexpand-set property
 */
set_vexpand_set(set: boolean): void
/**
 * Sets the visibility state of `widget`. Note that setting this to
 * %TRUE doesn’t mean the widget is actually viewable, see
 * gtk_widget_get_visible().
 * 
 * This function simply calls gtk_widget_show() or gtk_widget_hide()
 * but is nicer to use when the visibility of the widget depends on
 * some condition.
 * @param visible whether the widget should be shown or not
 */
set_visible(visible: boolean): void
/**
 * Sets the visual that should be used for by widget and its children for
 * creating #GdkWindows. The visual must be on the same #GdkScreen as
 * returned by gtk_widget_get_screen(), so handling the
 * #GtkWidget::screen-changed signal is necessary.
 * 
 * Setting a new `visual` will not cause `widget` to recreate its windows,
 * so you should call this function before `widget` is realized.
 * @param visual visual to be used or %NULL to unset a previous one
 */
set_visual(visual?: (Gdk.Visual | null)): void
/**
 * Sets a widget’s window. This function should only be used in a
 * widget’s #GtkWidget::realize implementation. The %window passed is
 * usually either new window created with gdk_window_new(), or the
 * window of its parent widget as returned by
 * gtk_widget_get_parent_window().
 * 
 * Widgets must indicate whether they will create their own #GdkWindow
 * by calling gtk_widget_set_has_window(). This is usually done in the
 * widget’s init() function.
 * 
 * Note that this function does not add any reference to `window`.
 * @param window a #GdkWindow
 */
set_window(window: Gdk.Window): void
/**
 * Sets a shape for this widget’s GDK window. This allows for
 * transparent windows etc., see gdk_window_shape_combine_region()
 * for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
show_all(): void
/**
 * Shows a widget. If the widget is an unmapped toplevel widget
 * (i.e. a #GtkWindow that has not yet been shown), enter the main
 * loop and wait for the window to actually be mapped. Be careful;
 * because the main loop is running, anything can happen during
 * this function.
 */
show_now(): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
size_allocate(allocation: Gtk.Allocation): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size,
 * position and (optionally) baseline to their child widgets.
 * 
 * In this function, the allocation and baseline may be adjusted. It
 * will be forced to a 1x1 minimum size, and the
 * adjust_size_allocation virtual and adjust_baseline_allocation
 * methods on the child will be used to adjust the allocation and
 * baseline. Standard adjustments include removing the widget's
 * margins, and applying the widget’s #GtkWidget:halign and
 * #GtkWidget:valign properties.
 * 
 * If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
 * baseline argument is ignored and -1 is used instead.
 * @param allocation position and size to be allocated to @widget
 * @param baseline The baseline of the child, or -1
 */
size_allocate_with_baseline(allocation: Gtk.Allocation, baseline: number): void
/**
 * This function is typically used when implementing a #GtkContainer
 * subclass.  Obtains the preferred size of a widget. The container
 * uses this information to arrange its child widgets and decide what
 * size allocations to give them with gtk_widget_size_allocate().
 * 
 * You can also call this function from an application, with some
 * caveats. Most notably, getting a size request requires the widget
 * to be associated with a screen, because font information may be
 * needed. Multihead-aware applications should keep this in mind.
 * 
 * Also remember that the size request is not necessarily the size
 * a widget will actually be allocated.
 */
size_request(): Gtk.Requisition
/**
 * This function attaches the widget’s #GtkStyle to the widget's
 * #GdkWindow. It is a replacement for
 * 
 * 
 * ```
 * widget->style = gtk_style_attach (widget->style, widget->window);
 * ```
 * 
 * 
 * and should only ever be called in a derived widget’s “realize”
 * implementation which does not chain up to its parent class'
 * “realize” implementation, because one of the parent classes
 * (finally #GtkWidget) would attach the style itself.
 */
style_attach(): void
/**
 * Gets the value of a style property of `widget`.
 * @param property_name the name of a style property
 * @param value location to return the property value
 */
style_get_property(property_name: string, value: GObject.Value): void
/**
 * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
 * This causes all queued #GtkWidget::child-notify signals on `widget` to be
 * emitted.
 */
thaw_child_notify(): void
/**
 * Translate coordinates relative to `src_widget’`s allocation to coordinates
 * relative to `dest_widget’`s allocations. In order to perform this
 * operation, both widgets must be realized, and must share a common
 * toplevel.
 * @param dest_widget a #GtkWidget
 * @param src_x X position relative to @src_widget
 * @param src_y Y position relative to @src_widget
 * @returns %FALSE if either widget was not realized, or there   was no common ancestor. In this case, nothing is stored in   *@dest_x and *@dest_y. Otherwise %TRUE.
 */
translate_coordinates(dest_widget: Gtk.Widget, src_x: number, src_y: number): [boolean, number, number]
/**
 * Triggers a tooltip query on the display where the toplevel of `widget`
 * is located. See gtk_tooltip_trigger_tooltip_query() for more
 * information.
 */
trigger_tooltip_query(): void
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
unmap(): void
/**
 * This function is only for use in widget implementations.
 * Should be called by implementations of the remove method
 * on #GtkContainer, to dissociate a child from the container.
 */
unparent(): void
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
unrealize(): void
/**
 * Unregisters a #GdkWindow from the widget that was previously set up with
 * gtk_widget_register_window(). You need to call this when the window is
 * no longer used by the widget, such as when you destroy it.
 * @param window a #GdkWindow
 */
unregister_window(window: Gdk.Window): void
/**
 * This function is for use in widget implementations. Turns off flag
 * values for the current widget state (insensitive, prelighted, etc.).
 * See gtk_widget_set_state_flags().
 * @param flags State flags to turn off
 */
unset_state_flags(flags: Gtk.StateFlags): void
vfunc_adjust_baseline_allocation(baseline: number): void
vfunc_adjust_baseline_request(minimum_baseline: number, natural_baseline: number): void
vfunc_adjust_size_allocation(orientation: Gtk.Orientation, minimum_size: number, natural_size: number, allocated_pos: number, allocated_size: number): void
vfunc_adjust_size_request(orientation: Gtk.Orientation, minimum_size: number, natural_size: number): void
vfunc_button_press_event(event: Gdk.EventButton): boolean
vfunc_button_release_event(event: Gdk.EventButton): boolean
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 */
vfunc_can_activate_accel(signal_id: number): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
vfunc_child_notify(child_property: GObject.ParamSpec): void
vfunc_composited_changed(): void
vfunc_compute_expand(hexpand_p: boolean, vexpand_p: boolean): void
vfunc_configure_event(event: Gdk.EventConfigure): boolean
vfunc_damage_event(event: Gdk.EventExpose): boolean
vfunc_delete_event(event: Gdk.EventAny): boolean
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
vfunc_destroy(): void
vfunc_destroy_event(event: Gdk.EventAny): boolean
vfunc_direction_changed(previous_direction: Gtk.TextDirection): void
vfunc_dispatch_child_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_drag_begin(context: Gdk.DragContext): void
vfunc_drag_data_delete(context: Gdk.DragContext): void
vfunc_drag_data_get(context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_data_received(context: Gdk.DragContext, x: number, y: number, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_drop(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_drag_end(context: Gdk.DragContext): void
vfunc_drag_failed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
vfunc_drag_leave(context: Gdk.DragContext, time_: number): void
vfunc_drag_motion(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_draw(cr: cairo.Context): boolean
vfunc_enter_notify_event(event: Gdk.EventCrossing): boolean
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 */
vfunc_event(event: Gdk.Event): boolean
vfunc_focus(direction: Gtk.DirectionType): boolean
vfunc_focus_in_event(event: Gdk.EventFocus): boolean
vfunc_focus_out_event(event: Gdk.EventFocus): boolean
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 */
vfunc_get_accessible(): Atk.Object
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
vfunc_get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
vfunc_get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
vfunc_get_preferred_width_for_height(height: number): [number, number]
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 */
vfunc_get_request_mode(): Gtk.SizeRequestMode
vfunc_grab_broken_event(event: Gdk.EventGrabBroken): boolean
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
vfunc_grab_focus(): void
vfunc_grab_notify(was_grabbed: boolean): void
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
vfunc_hide(): void
vfunc_hierarchy_changed(previous_toplevel: Gtk.Widget): void
vfunc_key_press_event(event: Gdk.EventKey): boolean
vfunc_key_release_event(event: Gdk.EventKey): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 */
vfunc_keynav_failed(direction: Gtk.DirectionType): boolean
vfunc_leave_notify_event(event: Gdk.EventCrossing): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
vfunc_map(): void
vfunc_map_event(event: Gdk.EventAny): boolean
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 */
vfunc_mnemonic_activate(group_cycling: boolean): boolean
vfunc_motion_notify_event(event: Gdk.EventMotion): boolean
vfunc_move_focus(direction: Gtk.DirectionType): void
vfunc_parent_set(previous_parent: Gtk.Widget): void
vfunc_popup_menu(): boolean
vfunc_property_notify_event(event: Gdk.EventProperty): boolean
vfunc_proximity_in_event(event: Gdk.EventProximity): boolean
vfunc_proximity_out_event(event: Gdk.EventProximity): boolean
vfunc_query_tooltip(x: number, y: number, keyboard_tooltip: boolean, tooltip: Gtk.Tooltip): boolean
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
vfunc_queue_draw_region(region: cairo.Region): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
vfunc_realize(): void
vfunc_screen_changed(previous_screen: Gdk.Screen): void
vfunc_scroll_event(event: Gdk.EventScroll): boolean
vfunc_selection_clear_event(event: Gdk.EventSelection): boolean
vfunc_selection_get(selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_selection_notify_event(event: Gdk.EventSelection): boolean
vfunc_selection_received(selection_data: Gtk.SelectionData, time_: number): void
vfunc_selection_request_event(event: Gdk.EventSelection): boolean
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
vfunc_show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
vfunc_show_all(): void
vfunc_show_help(help_type: Gtk.WidgetHelpType): boolean
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
vfunc_size_allocate(allocation: Gtk.Allocation): void
vfunc_state_changed(previous_state: Gtk.StateType): void
vfunc_state_flags_changed(previous_state_flags: Gtk.StateFlags): void
vfunc_style_set(previous_style: Gtk.Style): void
vfunc_style_updated(): void
vfunc_touch_event(event: Gdk.EventTouch): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
vfunc_unmap(): void
vfunc_unmap_event(event: Gdk.EventAny): boolean
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
vfunc_unrealize(): void
vfunc_visibility_notify_event(event: Gdk.EventVisibility): boolean
vfunc_window_state_event(event: Gdk.EventWindowState): boolean
}

module DockBinEdge {

    // Signal callback interfaces

    interface MoveToBinChild {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProps extends DockRevealer.ConstructorProps, Atk.ImplementorIface.ConstructorProps, DockItem.ConstructorProps, Gtk.Buildable.ConstructorProps {
edge: Gtk.PositionType;
    }

}

class DockBinEdge extends DockRevealer implements Atk.ImplementorIface, DockItem, Gtk.Buildable {

    // Own properties of Dazzle.DockBinEdge

    get edge(): Gtk.PositionType;
    set edge(val: Gtk.PositionType);

    // Constructors of Dazzle.DockBinEdge


constructor(properties?: Partial<DockBinEdge.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own signals of Dazzle.DockBinEdge

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'move-to-bin-child', callback: ((_source: this) => void)): number
    connect_after(signal: 'move-to-bin-child', callback: ((_source: this) => void)): number
    emit(signal: 'move-to-bin-child'): void

    // Own virtual methods of Dazzle.DockBinEdge

    vfunc_move_to_bin_child(): void

    // Own methods of Dazzle.DockBinEdge

    get_edge(): Gtk.PositionType

// Inherited properties
get app_paintable(): boolean;
set app_paintable(val: boolean);
get appPaintable(): boolean;
set appPaintable(val: boolean);
get can_default(): boolean;
set can_default(val: boolean);
get canDefault(): boolean;
set canDefault(val: boolean);
get can_focus(): boolean;
set can_focus(val: boolean);
get canFocus(): boolean;
set canFocus(val: boolean);
get composite_child(): boolean;
get compositeChild(): boolean;
/**
 * Whether the widget is double buffered.
 */
get double_buffered(): boolean;
set double_buffered(val: boolean);
/**
 * Whether the widget is double buffered.
 */
get doubleBuffered(): boolean;
set doubleBuffered(val: boolean);
get events(): Gdk.EventMask;
set events(val: Gdk.EventMask);
/**
 * Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
 */
get expand(): boolean;
set expand(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focus_on_click(): boolean;
set focus_on_click(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focusOnClick(): boolean;
set focusOnClick(val: boolean);
/**
 * How to distribute horizontal space if widget gets extra space, see #GtkAlign
 */
get halign(): Gtk.Align;
set halign(val: Gtk.Align);
get has_default(): boolean;
set has_default(val: boolean);
get hasDefault(): boolean;
set hasDefault(val: boolean);
get has_focus(): boolean;
set has_focus(val: boolean);
get hasFocus(): boolean;
set hasFocus(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get has_tooltip(): boolean;
set has_tooltip(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get hasTooltip(): boolean;
set hasTooltip(val: boolean);
get height_request(): number;
set height_request(val: number);
get heightRequest(): number;
set heightRequest(val: number);
/**
 * Whether to expand horizontally. See gtk_widget_set_hexpand().
 */
get hexpand(): boolean;
set hexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpand_set(): boolean;
set hexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpandSet(): boolean;
set hexpandSet(val: boolean);
get is_focus(): boolean;
set is_focus(val: boolean);
get isFocus(): boolean;
set isFocus(val: boolean);
/**
 * Sets all four sides' margin at once. If read, returns max
 * margin on any side.
 */
get margin(): number;
set margin(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_bottom(): number;
set margin_bottom(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginBottom(): number;
set marginBottom(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_end(): number;
set margin_end(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginEnd(): number;
set marginEnd(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_left(): number;
set margin_left(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginLeft(): number;
set marginLeft(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_right(): number;
set margin_right(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginRight(): number;
set marginRight(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_start(): number;
set margin_start(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginStart(): number;
set marginStart(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_top(): number;
set margin_top(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginTop(): number;
set marginTop(val: number);
get name(): string;
set name(val: string);
get no_show_all(): boolean;
set no_show_all(val: boolean);
get noShowAll(): boolean;
set noShowAll(val: boolean);
/**
 * The requested opacity of the widget. See gtk_widget_set_opacity() for
 * more details about window opacity.
 * 
 * Before 3.8 this was only available in GtkWindow
 */
get opacity(): number;
set opacity(val: number);
get parent(): Gtk.Container;
set parent(val: Gtk.Container);
get receives_default(): boolean;
set receives_default(val: boolean);
get receivesDefault(): boolean;
set receivesDefault(val: boolean);
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scale_factor(): number;
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scaleFactor(): number;
get sensitive(): boolean;
set sensitive(val: boolean);
/**
 * The style of the widget, which contains information about how it will look (colors, etc).
 */
get style(): Gtk.Style;
set style(val: Gtk.Style);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_markup(): string;
set tooltip_markup(val: string);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipMarkup(): string;
set tooltipMarkup(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_text(): string;
set tooltip_text(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipText(): string;
set tooltipText(val: string);
/**
 * How to distribute vertical space if widget gets extra space, see #GtkAlign
 */
get valign(): Gtk.Align;
set valign(val: Gtk.Align);
/**
 * Whether to expand vertically. See gtk_widget_set_vexpand().
 */
get vexpand(): boolean;
set vexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpand_set(): boolean;
set vexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpandSet(): boolean;
set vexpandSet(val: boolean);
get visible(): boolean;
set visible(val: boolean);
get width_request(): number;
set width_request(val: number);
get widthRequest(): number;
set widthRequest(val: number);
/**
 * The widget's window if it is realized, %NULL otherwise.
 */
get window(): Gdk.Window;

// Inherited methods
adopt(child: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 * @returns %TRUE if the dock item was closed
 */
close(): boolean
/**
 * Emits the #DzlDockItem::presented signal.
 * 
 * Containers should emit this when their descendant has been presented as the
 * current visible child. This allows dock items to do lazy initialization of
 * content once the widgetry is visible to the user.
 * 
 * Currently, this is best effort, as there are a number of situations that
 * make covering all cases problematic.
 */
emit_presented(): void
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 * @returns %TRUE if the dock item can be closed by the user, otherwise %FALSE.
 */
get_can_close(): boolean
get_can_minimize(): boolean
get_child_visible(child: DockItem): boolean
get_child_visible(...args: never[]): any
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 * @returns A #DzlDockmanager.
 */
get_manager(): (DockManager | null)
/**
 * Gets the parent #DzlDockItem, or %NULL.
 * @returns A #DzlDockItem or %NULL.
 */
get_parent(): (DockItem | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_title(): (string | null)
has_widgets(): boolean
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 * @returns %TRUE if @child was minimized. Otherwise %FALSE and @position   may be updated to a suggested position.
 */
minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
needs_attention(): void
/**
 * This widget will walk the widget hierarchy to ensure that the
 * dock item is visible to the user.
 */
present(): void
present_child(child: DockItem): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 * @returns a #GIcon or %NULL
 */
ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
release(child: DockItem): void
set_child_visible(child: DockItem, child_visible: boolean): void
set_child_visible(...args: never[]): any
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
set_manager(manager?: (DockManager | null)): void
update_visibility(): void
vfunc_can_minimize(descendant: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 */
vfunc_close(): boolean
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 */
vfunc_get_can_close(): boolean
vfunc_get_child_visible(child: DockItem): boolean
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 */
vfunc_get_manager(): (DockManager | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_title(): (string | null)
vfunc_manager_set(old_manager: DockManager): void
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 */
vfunc_minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
vfunc_needs_attention(): void
vfunc_present_child(child: DockItem): void
vfunc_presented(): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 */
vfunc_ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
vfunc_release(child: DockItem): void
vfunc_set_child_visible(child: DockItem, child_visible: boolean): void
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
vfunc_set_manager(manager?: (DockManager | null)): void
vfunc_update_visibility(): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
/**
 * For widgets that can be “activated” (buttons, menu items, etc.)
 * this function activates them. Activation is what happens when you
 * press Enter on a widget during key navigation. If `widget` isn't
 * activatable, the function returns %FALSE.
 * @returns %TRUE if the widget was activatable
 */
activate(): boolean
/**
 * Installs an accelerator for this `widget` in `accel_group` that causes
 * `accel_signal` to be emitted if the accelerator is activated.
 * The `accel_group` needs to be added to the widget’s toplevel via
 * gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
 * Accelerators added through this function are not user changeable during
 * runtime. If you want to support accelerators that can be changed by the
 * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
 * gtk_menu_item_set_accel_path() instead.
 * @param accel_signal widget signal to emit on accelerator activation
 * @param accel_group accel group for this widget, added to its toplevel
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @param accel_flags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
 */
add_accelerator(accel_signal: string, accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): void
/**
 * Adds the device events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_device_events() for details.
 * @param device a #GdkDevice
 * @param events an event mask, see #GdkEventMask
 */
add_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Adds the events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_events() and the
 * [input handling overview][event-masks] for details.
 * @param events an event mask, see #GdkEventMask
 */
add_events(events: number): void
/**
 * Adds a widget to the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
 * list of mnemonic labels for the widget is cleared when the
 * widget is destroyed, so the caller must make sure to update
 * its internal state at this point as well, by using a connection
 * to the #GtkWidget::destroy signal or a weak notifier.
 * @param label a #GtkWidget that acts as a mnemonic label for @widget
 */
add_mnemonic_label(label: Gtk.Widget): void
/**
 * Queues an animation frame update and adds a callback to be called
 * before each frame. Until the tick callback is removed, it will be
 * called frequently (usually at the frame rate of the output device
 * or as quickly as the application can be repainted, whichever is
 * slower). For this reason, is most suitable for handling graphics
 * that change every frame or every few frames. The tick callback does
 * not automatically imply a relayout or repaint. If you want a
 * repaint or relayout, and aren’t changing widget properties that
 * would trigger that (for example, changing the text of a #GtkLabel),
 * then you will have to call gtk_widget_queue_resize() or
 * gtk_widget_queue_draw_area() yourself.
 * 
 * gdk_frame_clock_get_frame_time() should generally be used for timing
 * continuous animations and
 * gdk_frame_timings_get_predicted_presentation_time() if you are
 * trying to display isolated frames at particular times.
 * 
 * This is a more convenient alternative to connecting directly to the
 * #GdkFrameClock::update signal of #GdkFrameClock, since you don't
 * have to worry about when a #GdkFrameClock is assigned to a widget.
 * @param callback function to call for updating animations
 * @returns an id for the connection of this callback. Remove the callback     by passing it to gtk_widget_remove_tick_callback()
 */
add_tick_callback(callback: Gtk.TickCallback): number
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 * @returns %TRUE if the accelerator can be activated.
 */
can_activate_accel(signal_id: number): boolean
/**
 * This function is used by custom widget implementations; if you're
 * writing an app, you’d use gtk_widget_grab_focus() to move the focus
 * to a particular widget, and gtk_container_set_focus_chain() to
 * change the focus tab order. So you may want to investigate those
 * functions instead.
 * 
 * gtk_widget_child_focus() is called by containers as the user moves
 * around the window using keyboard shortcuts. `direction` indicates
 * what kind of motion is taking place (up, down, left, right, tab
 * forward, tab backward). gtk_widget_child_focus() emits the
 * #GtkWidget::focus signal; widgets override the default handler
 * for this signal in order to implement appropriate focus behavior.
 * 
 * The default ::focus handler for a widget should return %TRUE if
 * moving in `direction` left the focus on a focusable location inside
 * that widget, and %FALSE if moving in `direction` moved the focus
 * outside the widget. If returning %TRUE, widgets normally
 * call gtk_widget_grab_focus() to place the focus accordingly;
 * if returning %FALSE, they don’t modify the current focus location.
 * @param direction direction of focus movement
 * @returns %TRUE if focus ended up inside @widget
 */
child_focus(direction: Gtk.DirectionType): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
child_notify(child_property: string): void
child_notify(...args: never[]): any
/**
 * Same as gtk_widget_path(), but always uses the name of a widget’s type,
 * never uses a custom name set with gtk_widget_set_name().
 */
class_path(): [number, string, string]
/**
 * Computes whether a container should give this widget extra space
 * when possible. Containers should check this, rather than
 * looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
 * 
 * This function already checks whether the widget is visible, so
 * visibility does not need to be checked separately. Non-visible
 * widgets are not expanded.
 * 
 * The computed expand value uses either the expand setting explicitly
 * set on the widget itself, or, if none has been explicitly set,
 * the widget may expand if some of its children do.
 * @param orientation expand direction
 * @returns whether widget tree rooted here should be expanded
 */
compute_expand(orientation: Gtk.Orientation): boolean
/**
 * Creates a new #PangoContext with the appropriate font map,
 * font options, font description, and base direction for drawing
 * text for this widget. See also gtk_widget_get_pango_context().
 * @returns the new #PangoContext
 */
create_pango_context(): Pango.Context
/**
 * Creates a new #PangoLayout with the appropriate font map,
 * font description, and base direction for drawing text for
 * this widget.
 * 
 * If you keep a #PangoLayout created in this way around, you need
 * to re-create it when the widget #PangoContext is replaced.
 * This can be tracked by using the #GtkWidget::screen-changed signal
 * on the widget.
 * @param text text to set on the layout (can be %NULL)
 * @returns the new #PangoLayout
 */
create_pango_layout(text?: (string | null)): Pango.Layout
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
destroy(): void
/**
 * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
 * %NULL.  It’s intended to be used as a callback connected to the
 * “destroy” signal of a widget. You connect gtk_widget_destroyed()
 * as a signal handler, and pass the address of your widget variable
 * as user data. Then when the widget is destroyed, the variable will
 * be set to %NULL. Useful for example to avoid multiple copies
 * of the same dialog.
 * @param widget_pointer address of a variable that contains @widget
 */
destroyed(widget_pointer: Gtk.Widget): Gtk.Widget
/**
 * Returns %TRUE if `device` has been shadowed by a GTK+
 * device grab on another widget, so it would stop sending
 * events to `widget`. This may be used in the
 * #GtkWidget::grab-notify signal to check for specific
 * devices. See gtk_device_grab_add().
 * @param device a #GdkDevice
 * @returns %TRUE if there is an ongoing grab on @device          by another #GtkWidget than @widget.
 */
device_is_shadowed(device: Gdk.Device): boolean
/**
 * This function is equivalent to gtk_drag_begin_with_coordinates(),
 * passing -1, -1 as coordinates.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @returns the context for this drag
 */
drag_begin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: (Gdk.Event | null)): Gdk.DragContext
/**
 * Initiates a drag on the source side. The function only needs to be used
 * when the application is starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is %NULL, then %GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used to get information about the drag.
 * 
 * Generally there are three cases when you want to start a drag by hand by
 * calling this function:
 * 
 * 1. During a #GtkWidget::button-press-event handler, if you want to start a drag
 * immediately when the user presses the mouse button.  Pass the `event`
 * that you have in your #GtkWidget::button-press-event handler.
 * 
 * 2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
 * when the mouse moves past a certain threshold distance after a button-press.
 * Pass the `event` that you have in your #GtkWidget::motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).
 * If you really cannot pass a real event, pass %NULL instead.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @param x The initial x coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @param y The initial y coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @returns the context for this drag
 */
drag_begin_with_coordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: (Gdk.Event | null), x: number, y: number): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param start_x X coordinate of start of drag
 * @param start_y Y coordinate of start of drag
 * @param current_x current X coordinate
 * @param current_y current Y coordinate
 * @returns %TRUE if the drag threshold has been passed.
 */
drag_check_threshold(start_x: number, start_y: number, current_x: number, current_y: number): boolean
/**
 * Add the image targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_uri_targets(): void
/**
 * Looks for a match between the supported targets of `context` and the
 * `dest_target_list,` returning the first matching target, otherwise
 * returning %GDK_NONE. `dest_target_list` should usually be the return
 * value from gtk_drag_dest_get_target_list(), but some widgets may
 * have different valid targets for different parts of the widget; in
 * that case, they will have to implement a drag_motion handler that
 * passes the correct target list to this function.
 * @param context drag context
 * @param target_list list of droppable targets, or %NULL to use    gtk_drag_dest_get_target_list (@widget).
 * @returns first target that the source offers     and the dest can accept, or %GDK_NONE
 */
drag_dest_find_target(context: Gdk.DragContext, target_list?: (Gtk.TargetList | null)): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_dest_get_target_list(): (Gtk.TargetList | null)
/**
 * Returns whether the widget has been configured to always
 * emit #GtkWidget::drag-motion signals.
 * @returns %TRUE if the widget always emits   #GtkWidget::drag-motion events
 */
drag_dest_get_track_motion(): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget’s drag-and-drop signals
 * (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget’s #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget::drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget::drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There’s no way to set a default action here, you can use the
 * #GtkWidget::drag-motion callback for that. Here’s an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * 
 * ```c
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of     #GtkTargetEntrys indicating the drop types that this @widget will     accept, or %NULL. Later you can access the list with     gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this @widget.
 */
drag_dest_set(flags: Gtk.DestDefaults, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets this widget as a proxy for drops to another window.
 * @param proxy_window the window to which to forward drag events
 * @param protocol the drag protocol which the @proxy_window accepts   (You can use gdk_drag_get_protocol() to determine this)
 * @param use_coordinates If %TRUE, send the same coordinates to the   destination, because it is an embedded   subwindow.
 */
drag_dest_set_proxy(proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param target_list list of droppable targets, or %NULL for none
 */
drag_dest_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Tells the widget to emit #GtkWidget::drag-motion and
 * #GtkWidget::drag-leave events regardless of the targets and the
 * %GTK_DEST_DEFAULT_MOTION flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param track_motion whether to accept all targets
 */
drag_dest_set_track_motion(track_motion: boolean): void
/**
 * Clears information about a drop destination set with
 * gtk_drag_dest_set(). The widget will no longer receive
 * notification of drags.
 */
drag_dest_unset(): void
/**
 * Gets the data associated with a drag. When the data
 * is received or the retrieval fails, GTK+ will emit a
 * #GtkWidget::drag-data-received signal. Failure of the retrieval
 * is indicated by the length field of the `selection_data`
 * signal parameter being negative. However, when gtk_drag_get_data()
 * is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
 * then the widget will not receive notification of failed
 * drops.
 * @param context the drag context
 * @param target the target (form of the data) to retrieve
 * @param time_ a timestamp for retrieving the data. This will   generally be the time received in a #GtkWidget::drag-motion   or #GtkWidget::drag-drop signal
 */
drag_get_data(context: Gdk.DragContext, target: Gdk.Atom, time_: number): void
/**
 * Highlights a widget as a currently hovered drop target.
 * To end the highlight, call gtk_drag_unhighlight().
 * GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
 */
drag_highlight(): void
/**
 * Add the writable image targets supported by #GtkSelectionData to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_uri_targets(): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_source_get_target_list(): (Gtk.TargetList | null)
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param start_button_mask the bitmask of buttons that can start the drag
 * @param targets the table of targets     that the drag will support, may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
drag_source_set(start_button_mask: Gdk.ModifierType, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to `icon`. See the docs for #GtkIconTheme for more details.
 * @param icon A #GIcon
 */
drag_source_set_icon_gicon(icon: Gio.Icon): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param icon_name name of icon to use
 */
drag_source_set_icon_name(icon_name: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
drag_source_set_icon_pixbuf(pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param stock_id the ID of the stock icon to use
 */
drag_source_set_icon_stock(stock_id: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param target_list list of draggable targets, or %NULL for none
 */
drag_source_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Undoes the effects of gtk_drag_source_set().
 */
drag_source_unset(): void
/**
 * Removes a highlight set by gtk_drag_highlight() from
 * a widget.
 */
drag_unhighlight(): void
/**
 * Draws `widget` to `cr`. The top left corner of the widget will be
 * drawn to the currently set origin point of `cr`.
 * 
 * You should pass a cairo context as `cr` argument that is in an
 * original state. Otherwise the resulting drawing is undefined. For
 * example changing the operator using cairo_set_operator() or the
 * line width using cairo_set_line_width() might have unwanted side
 * effects.
 * You may however change the context’s transform matrix - like with
 * cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
 * region with cairo_clip() prior to calling this function. Also, it
 * is fine to modify the context with cairo_save() and
 * cairo_push_group() prior to calling this function.
 * 
 * Note that special-purpose widgets may contain special code for
 * rendering to the screen and might appear differently on screen
 * and when rendered using gtk_widget_draw().
 * @param cr a cairo context to draw to
 */
draw(cr: cairo.Context): void
/**
 * Ensures that `widget` has a style (`widget->`style).
 * 
 * Not a very useful function; most of the time, if you
 * want the style, the widget is realized, and realized
 * widgets are guaranteed to have a style already.
 */
ensure_style(): void
/**
 * Notifies the user about an input-related error on this widget.
 * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
 * gdk_window_beep(), otherwise it does nothing.
 * 
 * Note that the effect of gdk_window_beep() can be configured in many
 * ways, depending on the windowing backend and the desktop environment
 * or window manager that is used.
 */
error_bell(): void
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 * @returns return from the event signal emission (%TRUE if               the event was handled)
 */
event(event: Gdk.Event): boolean
/**
 * Stops emission of #GtkWidget::child-notify signals on `widget`. The
 * signals are queued until gtk_widget_thaw_child_notify() is called
 * on `widget`.
 * 
 * This is the analogue of g_object_freeze_notify() for child properties.
 */
freeze_child_notify(): void
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 * @returns the #AtkObject associated with @widget
 */
get_accessible(): Atk.Object
/**
 * Retrieves the #GActionGroup that was registered using `prefix`. The resulting
 * #GActionGroup may have been registered to `widget` or any #GtkWidget in its
 * ancestry.
 * 
 * If no action group was found matching `prefix,` then %NULL is returned.
 * @param prefix The “prefix” of the action group.
 * @returns A #GActionGroup or %NULL.
 */
get_action_group(prefix: string): (Gio.ActionGroup | null)
/**
 * Returns the baseline that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function, and when allocating child
 * widgets in #GtkWidget::size_allocate.
 * @returns the baseline of the @widget, or -1 if none
 */
get_allocated_baseline(): number
/**
 * Returns the height that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the height of the @widget
 */
get_allocated_height(): number
/**
 * Retrieves the widget’s allocated size.
 * 
 * This function returns the last values passed to
 * gtk_widget_size_allocate_with_baseline(). The value differs from
 * the size returned in gtk_widget_get_allocation() in that functions
 * like gtk_widget_set_halign() can adjust the allocation, but not
 * the value returned by this function.
 * 
 * If a widget is not visible, its allocated size is 0.
 */
get_allocated_size(): [Gtk.Allocation, number]
/**
 * Returns the width that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the width of the @widget
 */
get_allocated_width(): number
/**
 * Retrieves the widget’s allocation.
 * 
 * Note, when implementing a #GtkContainer: a widget’s allocation will
 * be its “adjusted” allocation, that is, the widget’s parent
 * container typically calls gtk_widget_size_allocate() with an
 * allocation, and that allocation is then adjusted (to handle margin
 * and alignment for example) before assignment to the widget.
 * gtk_widget_get_allocation() returns the adjusted allocation that
 * was actually assigned to the widget. The adjusted allocation is
 * guaranteed to be completely contained within the
 * gtk_widget_size_allocate() allocation, however. So a #GtkContainer
 * is guaranteed that its children stay inside the assigned bounds,
 * but not that they have exactly the bounds the container assigned.
 * There is no way to get the original allocation assigned by
 * gtk_widget_size_allocate(), since it isn’t stored; if a container
 * implementation needs that information it will have to track it itself.
 */
get_allocation(): Gtk.Allocation
/**
 * Gets the first ancestor of `widget` with type `widget_type`. For example,
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
 * the first #GtkBox that’s an ancestor of `widget`. No reference will be
 * added to the returned widget; it should not be unreferenced. See note
 * about checking for a toplevel #GtkWindow in the docs for
 * gtk_widget_get_toplevel().
 * 
 * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
 * considers `widget` to be an ancestor of itself.
 * @param widget_type ancestor type
 * @returns the ancestor widget, or %NULL if not found
 */
get_ancestor(widget_type: GObject.GType): (Gtk.Widget | null)
/**
 * Determines whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * See gtk_widget_set_app_paintable()
 * @returns %TRUE if the widget is app paintable
 */
get_app_paintable(): boolean
/**
 * Determines whether `widget` can be a default widget. See
 * gtk_widget_set_can_default().
 * @returns %TRUE if @widget can be a default widget, %FALSE otherwise
 */
get_can_default(): boolean
/**
 * Determines whether `widget` can own the input focus. See
 * gtk_widget_set_can_focus().
 * @returns %TRUE if @widget can own the input focus, %FALSE otherwise
 */
get_can_focus(): boolean
/**
 * This function is only for use in widget implementations. Obtains
 * `widget->`requisition, unless someone has forced a particular
 * geometry on the widget (e.g. with gtk_widget_set_size_request()),
 * in which case it returns that geometry instead of the widget's
 * requisition.
 * 
 * This function differs from gtk_widget_size_request() in that
 * it retrieves the last size request value from `widget->`requisition,
 * while gtk_widget_size_request() actually calls the "size_request" method
 * on `widget` to compute the size request and fill in `widget->`requisition,
 * and only then returns `widget->`requisition.
 * 
 * Because this function does not call the “size_request” method, it
 * can only be used when you know that `widget->`requisition is
 * up-to-date, that is, gtk_widget_size_request() has been called
 * since the last time a resize was queued. In general, only container
 * implementations have this information; applications should use
 * gtk_widget_size_request().
 */
get_child_requisition(): Gtk.Requisition
/**
 * Retrieves the widget’s clip area.
 * 
 * The clip area is the area in which all of `widget'`s drawing will
 * happen. Other toolkits call it the bounding box.
 * 
 * Historically, in GTK+ the clip area has been equal to the allocation
 * retrieved via gtk_widget_get_allocation().
 */
get_clip(): Gtk.Allocation
/**
 * Returns the clipboard object for the given selection to
 * be used with `widget`. `widget` must have a #GdkDisplay
 * associated with it, so must be attached to a toplevel
 * window.
 * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
 * @returns the appropriate clipboard object. If no             clipboard already exists, a new one will             be created. Once a clipboard object has             been created, it is persistent for all time.
 */
get_clipboard(selection: Gdk.Atom): Gtk.Clipboard
/**
 * Obtains the composite name of a widget.
 * @returns the composite name of @widget, or %NULL if @widget is not   a composite child. The string should be freed when it is no   longer needed.
 */
get_composite_name(): string
/**
 * Returns whether `device` can interact with `widget` and its
 * children. See gtk_widget_set_device_enabled().
 * @param device a #GdkDevice
 * @returns %TRUE is @device is enabled for @widget
 */
get_device_enabled(device: Gdk.Device): boolean
/**
 * Returns the events mask for the widget corresponding to an specific device. These
 * are the events that the widget will receive when `device` operates on it.
 * @param device a #GdkDevice
 * @returns device event mask for @widget
 */
get_device_events(device: Gdk.Device): Gdk.EventMask
/**
 * Gets the reading direction for a particular widget. See
 * gtk_widget_set_direction().
 * @returns the reading direction for the widget.
 */
get_direction(): Gtk.TextDirection
/**
 * Get the #GdkDisplay for the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow at the top.
 * 
 * In general, you should only create display specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkDisplay for the toplevel for this widget.
 */
get_display(): Gdk.Display
/**
 * Determines whether the widget is double buffered.
 * 
 * See gtk_widget_set_double_buffered()
 * @returns %TRUE if the widget is double buffered
 */
get_double_buffered(): boolean
/**
 * Returns the event mask (see #GdkEventMask) for the widget. These are the
 * events that the widget will receive.
 * 
 * Note: Internally, the widget event mask will be the logical OR of the event
 * mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
 * event mask necessary to cater for every #GtkEventController created for the
 * widget.
 * @returns event mask for @widget
 */
get_events(): number
/**
 * Returns whether the widget should grab focus when it is clicked with the mouse.
 * See gtk_widget_set_focus_on_click().
 * @returns %TRUE if the widget should grab focus when it is clicked with               the mouse.
 */
get_focus_on_click(): boolean
/**
 * Gets the font map that has been set with gtk_widget_set_font_map().
 * @returns A #PangoFontMap, or %NULL
 */
get_font_map(): (Pango.FontMap | null)
/**
 * Returns the #cairo_font_options_t used for Pango rendering. When not set,
 * the defaults font options for the #GdkScreen will be used.
 * @returns the #cairo_font_options_t or %NULL if not set
 */
get_font_options(): (cairo.FontOptions | null)
/**
 * Obtains the frame clock for a widget. The frame clock is a global
 * “ticker” that can be used to drive animations and repaints.  The
 * most common reason to get the frame clock is to call
 * gdk_frame_clock_get_frame_time(), in order to get a time to use for
 * animating. For example you might record the start of the animation
 * with an initial value from gdk_frame_clock_get_frame_time(), and
 * then update the animation by calling
 * gdk_frame_clock_get_frame_time() again during each repaint.
 * 
 * gdk_frame_clock_request_phase() will result in a new frame on the
 * clock, but won’t necessarily repaint any widgets. To repaint a
 * widget, you have to use gtk_widget_queue_draw() which invalidates
 * the widget (thus scheduling it to receive a draw on the next
 * frame). gtk_widget_queue_draw() will also end up requesting a frame
 * on the appropriate frame clock.
 * 
 * A widget’s frame clock will not change while the widget is
 * mapped. Reparenting a widget (which implies a temporary unmap) can
 * change the widget’s frame clock.
 * 
 * Unrealized widgets do not have a frame clock.
 * @returns a #GdkFrameClock, or %NULL if widget is unrealized
 */
get_frame_clock(): (Gdk.FrameClock | null)
/**
 * Gets the value of the #GtkWidget:halign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
 * alignment.
 * @returns the horizontal alignment of @widget
 */
get_halign(): Gtk.Align
/**
 * Returns the current value of the has-tooltip property.  See
 * #GtkWidget:has-tooltip for more information.
 * @returns current value of has-tooltip on @widget.
 */
get_has_tooltip(): boolean
/**
 * Determines whether `widget` has a #GdkWindow of its own. See
 * gtk_widget_set_has_window().
 * @returns %TRUE if @widget has a window, %FALSE otherwise
 */
get_has_window(): boolean
/**
 * Gets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Containers should use gtk_widget_compute_expand() rather than
 * this function, to see whether a widget, or any of its children,
 * has the expand flag set. If any child of a widget wants to
 * expand, the parent may ask to expand also.
 * 
 * This function only looks at the widget’s own hexpand flag, rather
 * than computing whether the entire widget tree rooted at this widget
 * wants to expand.
 * @returns whether hexpand flag is set
 */
get_hexpand(): boolean
/**
 * Gets whether gtk_widget_set_hexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @returns whether hexpand has been explicitly set
 */
get_hexpand_set(): boolean
/**
 * Whether the widget is mapped.
 * @returns %TRUE if the widget is mapped, %FALSE otherwise.
 */
get_mapped(): boolean
/**
 * Gets the value of the #GtkWidget:margin-bottom property.
 * @returns The bottom margin of @widget
 */
get_margin_bottom(): number
/**
 * Gets the value of the #GtkWidget:margin-end property.
 * @returns The end margin of @widget
 */
get_margin_end(): number
/**
 * Gets the value of the #GtkWidget:margin-left property.
 * @returns The left margin of @widget
 */
get_margin_left(): number
/**
 * Gets the value of the #GtkWidget:margin-right property.
 * @returns The right margin of @widget
 */
get_margin_right(): number
/**
 * Gets the value of the #GtkWidget:margin-start property.
 * @returns The start margin of @widget
 */
get_margin_start(): number
/**
 * Gets the value of the #GtkWidget:margin-top property.
 * @returns The top margin of @widget
 */
get_margin_top(): number
/**
 * Returns the modifier mask the `widget’`s windowing system backend
 * uses for a particular purpose.
 * 
 * See gdk_keymap_get_modifier_mask().
 * @param intent the use case for the modifier mask
 * @returns the modifier mask used for @intent.
 */
get_modifier_mask(intent: Gdk.ModifierIntent): Gdk.ModifierType
/**
 * Returns the current modifier style for the widget. (As set by
 * gtk_widget_modify_style().) If no style has previously set, a new
 * #GtkRcStyle will be created with all values unset, and set as the
 * modifier style for the widget. If you make changes to this rc
 * style, you must call gtk_widget_modify_style(), passing in the
 * returned rc style, to make sure that your changes take effect.
 * 
 * Caution: passing the style back to gtk_widget_modify_style() will
 * normally end up destroying it, because gtk_widget_modify_style() copies
 * the passed-in style and sets the copy as the new modifier style,
 * thus dropping any reference to the old modifier style. Add a reference
 * to the modifier style if you want to keep it alive.
 * @returns the modifier style for the widget.     This rc style is owned by the widget. If you want to keep a     pointer to value this around, you must add a refcount using     g_object_ref().
 */
get_modifier_style(): Gtk.RcStyle
/**
 * Retrieves the name of a widget. See gtk_widget_set_name() for the
 * significance of widget names.
 * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
 */
get_name(): string
/**
 * Returns the current value of the #GtkWidget:no-show-all property,
 * which determines whether calls to gtk_widget_show_all()
 * will affect this widget.
 * @returns the current value of the “no-show-all” property.
 */
get_no_show_all(): boolean
/**
 * Fetches the requested opacity for this widget.
 * See gtk_widget_set_opacity().
 * @returns the requested opacity for this widget.
 */
get_opacity(): number
/**
 * Gets a #PangoContext with the appropriate font map, font description,
 * and base direction for this widget. Unlike the context returned
 * by gtk_widget_create_pango_context(), this context is owned by
 * the widget (it can be used until the screen for the widget changes
 * or the widget is removed from its toplevel), and will be updated to
 * match any changes to the widget’s attributes. This can be tracked
 * by using the #GtkWidget::screen-changed signal on the widget.
 * @returns the #PangoContext for the widget.
 */
get_pango_context(): Pango.Context
/**
 * Gets `widget’`s parent window, or %NULL if it does not have one.
 * @returns the parent window of @widget, or %NULL if it does not have a parent window.
 */
get_parent_window(): (Gdk.Window | null)
/**
 * Returns the #GtkWidgetPath representing `widget,` if the widget
 * is not connected to a toplevel widget, a partial path will be
 * created.
 * @returns The #GtkWidgetPath representing @widget
 */
get_path(): Gtk.WidgetPath
/**
 * Obtains the location of the mouse pointer in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(); and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 */
get_pointer(): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves the minimum and natural size of a widget, taking
 * into account the widget’s preference for height-for-width management.
 * 
 * This is used to retrieve a suitable size by container widgets which do
 * not impose any restrictions on the child placement. It can be used
 * to deduce toplevel window and menu sizes as well as child widgets in
 * free-form containers such as GtkLayout.
 * 
 * Handle with care. Note that the natural height of a height-for-width
 * widget will generally be a smaller size than the minimum height, since the required
 * height for the natural width is generally smaller than the required height for
 * the minimum width.
 * 
 * Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
 * baseline alignment.
 */
get_preferred_size(): [Gtk.Requisition | null, Gtk.Requisition | null]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
get_preferred_width_for_height(height: number): [number, number]
/**
 * Determines whether `widget` is realized.
 * @returns %TRUE if @widget is realized, %FALSE otherwise
 */
get_realized(): boolean
/**
 * Determines whether `widget` is always treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_set_receives_default().
 * @returns %TRUE if @widget acts as the default widget when focused,               %FALSE otherwise
 */
get_receives_default(): boolean
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 * @returns The #GtkSizeRequestMode preferred by @widget.
 */
get_request_mode(): Gtk.SizeRequestMode
/**
 * Retrieves the widget’s requisition.
 * 
 * This function should only be used by widget implementations in
 * order to figure whether the widget’s requisition has actually
 * changed after some internal state change (so that they can call
 * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
 * 
 * Normally, gtk_widget_size_request() should be used.
 */
get_requisition(): Gtk.Requisition
/**
 * Get the root window where this widget is located. This function can
 * only be called after the widget has been added to a widget
 * hierarchy with #GtkWindow at the top.
 * 
 * The root window is useful for such purposes as creating a popup
 * #GdkWindow associated with the window. In general, you should only
 * create display specific resources when a widget has been realized,
 * and you should free those resources when the widget is unrealized.
 * @returns the #GdkWindow root window for the toplevel for this widget.
 */
get_root_window(): Gdk.Window
/**
 * Retrieves the internal scale factor that maps from window coordinates
 * to the actual device pixels. On traditional systems this is 1, on
 * high density outputs, it can be a higher value (typically 2).
 * 
 * See gdk_window_get_scale_factor().
 * @returns the scale factor for @widget
 */
get_scale_factor(): number
/**
 * Get the #GdkScreen from the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow
 * at the top.
 * 
 * In general, you should only create screen specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkScreen for the toplevel for this widget.
 */
get_screen(): Gdk.Screen
/**
 * Returns the widget’s sensitivity (in the sense of returning
 * the value that has been set using gtk_widget_set_sensitive()).
 * 
 * The effective sensitivity of a widget is however determined by both its
 * own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
 * @returns %TRUE if the widget is sensitive
 */
get_sensitive(): boolean
/**
 * Gets the settings object holding the settings used for this widget.
 * 
 * Note that this function can only be called when the #GtkWidget
 * is attached to a toplevel, since the settings object is specific
 * to a particular #GdkScreen.
 * @returns the relevant #GtkSettings object
 */
get_settings(): Gtk.Settings
/**
 * Gets the size request that was explicitly set for the widget using
 * gtk_widget_set_size_request(). A value of -1 stored in `width` or
 * `height` indicates that that dimension has not been set explicitly
 * and the natural requisition of the widget will be used instead. See
 * gtk_widget_set_size_request(). To get the size a widget will
 * actually request, call gtk_widget_get_preferred_size() instead of
 * this function.
 */
get_size_request(): [number, number]
/**
 * Returns the widget’s state. See gtk_widget_set_state().
 * @returns the state of @widget.
 */
get_state(): Gtk.StateType
/**
 * Returns the widget state as a flag set. It is worth mentioning
 * that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
 * returned, that is, also based on parent insensitivity, even if
 * `widget` itself is sensitive.
 * 
 * Also note that if you are looking for a way to obtain the
 * #GtkStateFlags to pass to a #GtkStyleContext method, you
 * should look at gtk_style_context_get_state().
 * @returns The state flags for widget
 */
get_state_flags(): Gtk.StateFlags
/**
 * Simply an accessor function that returns `widget->`style.
 * @returns the widget’s #GtkStyle
 */
get_style(): Gtk.Style
/**
 * Returns the style context associated to `widget`. The returned object is
 * guaranteed to be the same for the lifetime of `widget`.
 * @returns a #GtkStyleContext. This memory is owned by @widget and          must not be freed.
 */
get_style_context(): Gtk.StyleContext
/**
 * Returns %TRUE if `widget` is multiple pointer aware. See
 * gtk_widget_set_support_multidevice() for more information.
 * @returns %TRUE if @widget is multidevice aware.
 */
get_support_multidevice(): boolean
/**
 * Fetch an object build from the template XML for `widget_type` in this `widget` instance.
 * 
 * This will only report children which were previously declared with
 * gtk_widget_class_bind_template_child_full() or one of its
 * variants.
 * 
 * This function is only meant to be called for code which is private to the `widget_type` which
 * declared the child and is meant for language bindings which cannot easily make use
 * of the GObject structure offsets.
 * @param widget_type The #GType to get a template child for
 * @param name The “id” of the child defined in the template XML
 * @returns The object built in the template XML with the id @name
 */
get_template_child<T = GObject.Object>(widget_type: GObject.GType, name: string): T
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_markup(): (string | null)
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_text(): (string | null)
/**
 * Returns the #GtkWindow of the current tooltip. This can be the
 * GtkWindow created by default, or the custom tooltip window set
 * using gtk_widget_set_tooltip_window().
 * @returns The #GtkWindow of the current tooltip.
 */
get_tooltip_window(): Gtk.Window
/**
 * This function returns the topmost widget in the container hierarchy
 * `widget` is a part of. If `widget` has no parent widgets, it will be
 * returned as the topmost widget. No reference will be added to the
 * returned widget; it should not be unreferenced.
 * 
 * Note the difference in behavior vs. gtk_widget_get_ancestor();
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
 * would return
 * %NULL if `widget` wasn’t inside a toplevel window, and if the
 * window was inside a #GtkWindow-derived widget which was in turn
 * inside the toplevel #GtkWindow. While the second case may
 * seem unlikely, it actually happens when a #GtkPlug is embedded
 * inside a #GtkSocket within the same application.
 * 
 * To reliably find the toplevel #GtkWindow, use
 * gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
 * on the result. For instance, to get the title of a widget's toplevel
 * window, one might use:
 * 
 * ```c
 * static const char *
 * get_widget_toplevel_title (GtkWidget *widget)
 * {
 *   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 *   if (GTK_IS_WINDOW (toplevel))
 *     {
 *       return gtk_window_get_title (GTK_WINDOW (toplevel));
 *     }
 * 
 *   return NULL;
 * }
 * ```
 * 
 * @returns the topmost ancestor of @widget, or @widget itself    if there’s no ancestor.
 */
get_toplevel(): Gtk.Widget
/**
 * Gets the value of the #GtkWidget:valign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. If your widget want to support baseline aligned
 * children it must use gtk_widget_get_valign_with_baseline(), or
 * `g_object_get (widget, "valign", &value, NULL)`, which will
 * also report the true value.
 * @returns the vertical alignment of @widget, ignoring baseline alignment
 */
get_valign(): Gtk.Align
/**
 * Gets the value of the #GtkWidget:valign property, including
 * %GTK_ALIGN_BASELINE.
 * @returns the vertical alignment of @widget
 */
get_valign_with_baseline(): Gtk.Align
/**
 * Gets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_get_hexpand() for more detail.
 * @returns whether vexpand flag is set
 */
get_vexpand(): boolean
/**
 * Gets whether gtk_widget_set_vexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * See gtk_widget_get_hexpand_set() for more detail.
 * @returns whether vexpand has been explicitly set
 */
get_vexpand_set(): boolean
/**
 * Determines whether the widget is visible. If you want to
 * take into account whether the widget’s parent is also marked as
 * visible, use gtk_widget_is_visible() instead.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See gtk_widget_set_visible().
 * @returns %TRUE if the widget is visible
 */
get_visible(): boolean
/**
 * Gets the visual that will be used to render `widget`.
 * @returns the visual for @widget
 */
get_visual(): Gdk.Visual
/**
 * Returns the widget’s window if it is realized, %NULL otherwise
 * @returns @widget’s window.
 */
get_window(): (Gdk.Window | null)
/**
 * Makes `widget` the current grabbed widget.
 * 
 * This means that interaction with other widgets in the same
 * application is blocked and mouse as well as keyboard events
 * are delivered to this widget.
 * 
 * If `widget` is not sensitive, it is not set as the current
 * grabbed widget and this function does nothing.
 */
grab_add(): void
/**
 * Causes `widget` to become the default widget. `widget` must be able to be
 * a default widget; typically you would ensure this yourself
 * by calling gtk_widget_set_can_default() with a %TRUE value.
 * The default widget is activated when
 * the user presses Enter in a window. Default widgets must be
 * activatable, that is, gtk_widget_activate() should affect them. Note
 * that #GtkEntry widgets require the “activates-default” property
 * set to %TRUE before they activate the default widget when Enter
 * is pressed and the #GtkEntry is focused.
 */
grab_default(): void
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
grab_focus(): void
/**
 * Removes the grab from the given widget.
 * 
 * You have to pair calls to gtk_grab_add() and gtk_grab_remove().
 * 
 * If `widget` does not have the grab, this function does nothing.
 */
grab_remove(): void
/**
 * Determines whether the widget is currently grabbing events, so it
 * is the only widget receiving input events (keyboard and mouse).
 * 
 * See also gtk_grab_add().
 * @returns %TRUE if the widget is in the grab_widgets stack
 */
has_grab(): boolean
/**
 * Determines if the widget style has been looked up through the rc mechanism.
 * @returns %TRUE if the widget has been looked up through the rc   mechanism, %FALSE otherwise.
 */
has_rc_style(): boolean
/**
 * Checks whether there is a #GdkScreen is associated with
 * this widget. All toplevel widgets have an associated
 * screen, and all widgets added into a hierarchy with a toplevel
 * window at the top.
 * @returns %TRUE if there is a #GdkScreen associated   with the widget.
 */
has_screen(): boolean
/**
 * Determines if the widget should show a visible indication that
 * it has the global input focus. This is a convenience function for
 * use in ::draw handlers that takes into account whether focus
 * indication should currently be shown in the toplevel window of
 * `widget`. See gtk_window_get_focus_visible() for more information
 * about focus indication.
 * 
 * To find out if the widget has the global input focus, use
 * gtk_widget_has_focus().
 * @returns %TRUE if the widget should display a “focus rectangle”
 */
has_visible_focus(): boolean
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
hide(): void
/**
 * Utility function; intended to be connected to the #GtkWidget::delete-event
 * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
 * argument, then returns %TRUE. If connected to ::delete-event, the
 * result is that clicking the close button for a window (on the
 * window frame, top right corner usually) will hide but not destroy
 * the window. By default, GTK+ destroys windows when ::delete-event
 * is received.
 * @returns %TRUE
 */
hide_on_delete(): boolean
/**
 * Returns whether the widget is currently being destroyed.
 * This information can sometimes be used to avoid doing
 * unnecessary work.
 * @returns %TRUE if @widget is being destroyed
 */
in_destruction(): boolean
/**
 * Creates and initializes child widgets defined in templates. This
 * function must be called in the instance initializer for any
 * class which assigned itself a template using gtk_widget_class_set_template()
 * 
 * It is important to call this function in the instance initializer
 * of a #GtkWidget subclass and not in #GObject.constructed() or
 * #GObject.constructor() for two reasons.
 * 
 * One reason is that generally derived widgets will assume that parent
 * class composite widgets have been created in their instance
 * initializers.
 * 
 * Another reason is that when calling g_object_new() on a widget with
 * composite templates, it’s important to build the composite widgets
 * before the construct properties are set. Properties passed to g_object_new()
 * should take precedence over properties set in the private template XML.
 */
init_template(): void
/**
 * Sets an input shape for this widget’s GDK window. This allows for
 * windows which react to mouse click in a nonrectangular region, see
 * gdk_window_input_shape_combine_region() for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
input_shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Inserts `group` into `widget`. Children of `widget` that implement
 * #GtkActionable can then be associated with actions in `group` by
 * setting their “action-name” to
 * `prefix`.`action-name`.
 * 
 * If `group` is %NULL, a previously inserted group for `name` is removed
 * from `widget`.
 * @param name the prefix for actions in @group
 * @param group a #GActionGroup, or %NULL
 */
insert_action_group(name: string, group?: (Gio.ActionGroup | null)): void
/**
 * Computes the intersection of a `widget’`s area and `area,` storing
 * the intersection in `intersection,` and returns %TRUE if there was
 * an intersection.  `intersection` may be %NULL if you’re only
 * interested in whether there was an intersection.
 * @param area a rectangle
 * @returns %TRUE if there was an intersection
 */
intersect(area: Gdk.Rectangle): [boolean, Gdk.Rectangle | null]
/**
 * Determines whether `widget` is somewhere inside `ancestor,` possibly with
 * intermediate containers.
 * @param ancestor another #GtkWidget
 * @returns %TRUE if @ancestor contains @widget as a child,    grandchild, great grandchild, etc.
 */
is_ancestor(ancestor: Gtk.Widget): boolean
/**
 * Whether `widget` can rely on having its alpha channel
 * drawn correctly. On X11 this function returns whether a
 * compositing manager is running for `widget’`s screen.
 * 
 * Please note that the semantics of this call will change
 * in the future if used on a widget that has a composited
 * window in its hierarchy (as set by gdk_window_set_composited()).
 * @returns %TRUE if the widget can rely on its alpha channel being drawn correctly.
 */
is_composited(): boolean
/**
 * Determines whether `widget` can be drawn to. A widget can be drawn
 * to if it is mapped and visible.
 * @returns %TRUE if @widget is drawable, %FALSE otherwise
 */
is_drawable(): boolean
/**
 * Returns the widget’s effective sensitivity, which means
 * it is sensitive itself and also its parent widget is sensitive
 * @returns %TRUE if the widget is effectively sensitive
 */
is_sensitive(): boolean
/**
 * Determines whether `widget` is a toplevel widget.
 * 
 * Currently only #GtkWindow and #GtkInvisible (and out-of-process
 * #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
 * widget.
 * @returns %TRUE if @widget is a toplevel, %FALSE otherwise
 */
is_toplevel(): boolean
/**
 * Determines whether the widget and all its parents are marked as
 * visible.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See also gtk_widget_get_visible() and gtk_widget_set_visible()
 * @returns %TRUE if the widget and all its parents are visible
 */
is_visible(): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 * @returns %TRUE if stopping keyboard navigation is fine, %FALSE               if the emitting widget should try to handle the keyboard               navigation attempt in its parent container(s).
 */
keynav_failed(direction: Gtk.DirectionType): boolean
/**
 * Lists the closures used by `widget` for accelerator group connections
 * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
 * The closures can be used to monitor accelerator changes on `widget,`
 * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
 * #GtkAccelGroup of a closure which can be found out with
 * gtk_accel_group_from_accel_closure().
 * @returns a newly allocated #GList of closures
 */
list_accel_closures(): GObject.Closure[]
/**
 * Retrieves a %NULL-terminated array of strings containing the prefixes of
 * #GActionGroup's available to `widget`.
 * @returns a %NULL-terminated array of strings.
 */
list_action_prefixes(): string[]
/**
 * Returns a newly allocated list of the widgets, normally labels, for
 * which this widget is the target of a mnemonic (see for example,
 * gtk_label_set_mnemonic_widget()).
 * 
 * The widgets in the list are not individually referenced. If you
 * want to iterate through the list and perform actions involving
 * callbacks that might destroy the widgets, you
 * must call `g_list_foreach (result,
 * (GFunc)g_object_ref, NULL)` first, and then unref all the
 * widgets afterwards.
 * @returns the list of  mnemonic labels; free this list  with g_list_free() when you are done with it.
 */
list_mnemonic_labels(): Gtk.Widget[]
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
map(): void
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 * @returns %TRUE if the signal has been handled
 */
mnemonic_activate(group_cycling: boolean): boolean
/**
 * Sets the base color for a widget in a particular state.
 * All other style values are left untouched. The base color
 * is the background color used along with the text color
 * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
 * and #GtkTextView. See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > base color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the base color on that.
 * @param state the state for which to set the base color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_base().
 */
modify_base(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > background color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the background color on that.
 * @param state the state for which to set the background color
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_bg().
 */
modify_bg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the #GtkWidget
 * cursor-color and secondary-cursor-color
 * style properties.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param primary the color to use for primary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_cursor().
 * @param secondary the color to use for secondary cursor (does     not need to be allocated), or %NULL to undo the effect of     previous calls to of gtk_widget_modify_cursor().
 */
modify_cursor(primary?: (Gdk.Color | null), secondary?: (Gdk.Color | null)): void
/**
 * Sets the foreground color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the foreground color
 * @param color the color to assign (does not need to be allocated),     or %NULL to undo the effect of previous calls to     of gtk_widget_modify_fg().
 */
modify_fg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the font to use for a widget.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param font_desc the font description to use, or %NULL     to undo the effect of previous calls to gtk_widget_modify_font()
 */
modify_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Modifies style values on the widget.
 * 
 * Modifications made using this technique take precedence over
 * style values set via an RC file, however, they will be overridden
 * if a style is explicitly set on the widget using gtk_widget_set_style().
 * The #GtkRcStyle-struct is designed so each field can either be
 * set or unset, so it is possible, using this function, to modify some
 * style values and leave the others unchanged.
 * 
 * Note that modifications made with this function are not cumulative
 * with previous calls to gtk_widget_modify_style() or with such
 * functions as gtk_widget_modify_fg(). If you wish to retain
 * previous values, you must first call gtk_widget_get_modifier_style(),
 * make your modifications to the returned style, then call
 * gtk_widget_modify_style() with that style. On the other hand,
 * if you first call gtk_widget_modify_style(), subsequent calls
 * to such functions gtk_widget_modify_fg() will have a cumulative
 * effect with the initial modifications.
 * @param style the #GtkRcStyle-struct holding the style modifications
 */
modify_style(style: Gtk.RcStyle): void
/**
 * Sets the text color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * The text color is the foreground color used along with the
 * base color (see gtk_widget_modify_base()) for widgets such
 * as #GtkEntry and #GtkTextView.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the text color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_text().
 */
modify_text(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color to use for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color().
 * @param state the state for which to set the background color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_background_color()
 */
override_background_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the color to use for a widget.
 * 
 * All other style values are left untouched.
 * 
 * This function does not act recursively. Setting the color of a
 * container does not affect its children. Note that some widgets that
 * you may not think of as containers, for instance #GtkButtons,
 * are actually containers.
 * 
 * This API is mostly meant as a quick way for applications to
 * change a widget appearance. If you are developing a widgets
 * library and intend this change to be themeable, it is better
 * done by setting meaningful CSS classes in your
 * widget/container implementation through gtk_style_context_add_class().
 * 
 * This way, your widget library can install a #GtkCssProvider
 * with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
 * to provide a default styling for those widgets that need so, and
 * this theming may fully overridden by the user’s theme.
 * 
 * Note that for complex widgets this may bring in undesired
 * results (such as uniform background color everywhere), in
 * these cases it is better to fully style such widgets through a
 * #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
 * priority.
 * @param state the state for which to set the color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_color()
 */
override_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the
 * cursor-color and secondary-cursor-color
 * style properties. All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * Note that the underlying properties have the #GdkColor type,
 * so the alpha value in `primary` and `secondary` will be ignored.
 * @param cursor the color to use for primary cursor (does not need to be     allocated), or %NULL to undo the effect of previous calls to     of gtk_widget_override_cursor().
 * @param secondary_cursor the color to use for secondary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_override_cursor().
 */
override_cursor(cursor?: (Gdk.RGBA | null), secondary_cursor?: (Gdk.RGBA | null)): void
/**
 * Sets the font to use for a widget. All other style values are
 * left untouched. See gtk_widget_override_color().
 * @param font_desc the font description to use, or %NULL to undo     the effect of previous calls to gtk_widget_override_font()
 */
override_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Sets a symbolic color for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color() for overriding the foreground
 * or background color.
 * @param name the name of the symbolic color to modify
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to gtk_widget_override_symbolic_color()
 */
override_symbolic_color(name: string, color?: (Gdk.RGBA | null)): void
/**
 * Obtains the full path to `widget`. The path is simply the name of a
 * widget and all its parents in the container hierarchy, separated by
 * periods. The name of a widget comes from
 * gtk_widget_get_name(). Paths are used to apply styles to a widget
 * in gtkrc configuration files. Widget names are the type of the
 * widget by default (e.g. “GtkButton”) or can be set to an
 * application-specific value with gtk_widget_set_name(). By setting
 * the name of a widget, you allow users or theme authors to apply
 * styles to that specific widget in their gtkrc
 * file. `path_reversed_p` fills in the path in reverse order,
 * i.e. starting with `widget’`s name instead of starting with the name
 * of `widget’`s outermost ancestor.
 */
path(): [number, string, string]
/**
 * This function is only for use in widget implementations.
 * 
 * Flags the widget for a rerun of the GtkWidgetClass::size_allocate
 * function. Use this function instead of gtk_widget_queue_resize()
 * when the `widget'`s size request didn't change but it wants to
 * reposition its contents.
 * 
 * An example user of this function is gtk_widget_set_halign().
 */
queue_allocate(): void
/**
 * Mark `widget` as needing to recompute its expand flags. Call
 * this function when setting legacy expand child properties
 * on the child of a container.
 * 
 * See gtk_widget_compute_expand().
 */
queue_compute_expand(): void
/**
 * Equivalent to calling gtk_widget_queue_draw_area() for the
 * entire area of a widget.
 */
queue_draw(): void
/**
 * Convenience function that calls gtk_widget_queue_draw_region() on
 * the region created from the given coordinates.
 * 
 * The region here is specified in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(), and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 * 
 * `width` or `height` may be 0, in this case this function does
 * nothing. Negative values for `width` and `height` are not allowed.
 * @param x x coordinate of upper-left corner of rectangle to redraw
 * @param y y coordinate of upper-left corner of rectangle to redraw
 * @param width width of region to draw
 * @param height height of region to draw
 */
queue_draw_area(x: number, y: number, width: number, height: number): void
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
queue_draw_region(region: cairo.Region): void
/**
 * This function is only for use in widget implementations.
 * Flags a widget to have its size renegotiated; should
 * be called when a widget for some reason has a new size request.
 * For example, when you change the text in a #GtkLabel, #GtkLabel
 * queues a resize to ensure there’s enough space for the new text.
 * 
 * Note that you cannot call gtk_widget_queue_resize() on a widget
 * from inside its implementation of the GtkWidgetClass::size_allocate
 * virtual method. Calls to gtk_widget_queue_resize() from inside
 * GtkWidgetClass::size_allocate will be silently ignored.
 */
queue_resize(): void
/**
 * This function works like gtk_widget_queue_resize(),
 * except that the widget is not invalidated.
 */
queue_resize_no_redraw(): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
realize(): void
/**
 * Computes the intersection of a `widget’`s area and `region,` returning
 * the intersection. The result may be empty, use cairo_region_is_empty() to
 * check.
 * @param region a #cairo_region_t, in the same coordinate system as          @widget->allocation. That is, relative to @widget->window          for widgets which return %FALSE from gtk_widget_get_has_window();          relative to the parent window of @widget->window otherwise.
 * @returns A newly allocated region holding the intersection of @widget     and @region.
 */
region_intersect(region: cairo.Region): cairo.Region
/**
 * Registers a #GdkWindow with the widget and sets it up so that
 * the widget receives events for it. Call gtk_widget_unregister_window()
 * when destroying the window.
 * 
 * Before 3.8 you needed to call gdk_window_set_user_data() directly to set
 * this up. This is now deprecated and you should use gtk_widget_register_window()
 * instead. Old code will keep working as is, although some new features like
 * transparency might not work perfectly.
 * @param window a #GdkWindow
 */
register_window(window: Gdk.Window): void
/**
 * Removes an accelerator from `widget,` previously installed with
 * gtk_widget_add_accelerator().
 * @param accel_group accel group for this widget
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @returns whether an accelerator was installed and could be removed
 */
remove_accelerator(accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType): boolean
/**
 * Removes a widget from the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
 * must have previously been added to the list with
 * gtk_widget_add_mnemonic_label().
 * @param label a #GtkWidget that was previously set as a mnemonic label for         @widget with gtk_widget_add_mnemonic_label().
 */
remove_mnemonic_label(label: Gtk.Widget): void
/**
 * Removes a tick callback previously registered with
 * gtk_widget_add_tick_callback().
 * @param id an id returned by gtk_widget_add_tick_callback()
 */
remove_tick_callback(id: number): void
/**
 * A convenience function that uses the theme settings for `widget`
 * to look up `stock_id` and render it to a pixbuf. `stock_id` should
 * be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size`
 * should be a size such as #GTK_ICON_SIZE_MENU. `detail` should be a
 * string that identifies the widget or code doing the rendering, so
 * that theme engines can special-case rendering for that widget or
 * code.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be
 * freed after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @param detail render detail to pass to theme engine
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon(stock_id: string, size: number, detail?: (string | null)): (GdkPixbuf.Pixbuf | null)
/**
 * A convenience function that uses the theme engine and style
 * settings for `widget` to look up `stock_id` and render it to
 * a pixbuf. `stock_id` should be a stock icon ID such as
 * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
 * such as #GTK_ICON_SIZE_MENU.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be freed
 * after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon_pixbuf(stock_id: string, size: number): (GdkPixbuf.Pixbuf | null)
/**
 * Moves a widget from one #GtkContainer to another, handling reference
 * count issues to avoid destroying the widget.
 * @param new_parent a #GtkContainer to move the widget into
 */
reparent(new_parent: Gtk.Widget): void
/**
 * Reset the styles of `widget` and all descendents, so when
 * they are looked up again, they get the correct values
 * for the currently loaded RC file settings.
 * 
 * This function is not useful for applications.
 */
reset_rc_styles(): void
/**
 * Updates the style context of `widget` and all descendants
 * by updating its widget path. #GtkContainers may want
 * to use this on a child when reordering it in a way that a different
 * style might apply to it. See also gtk_container_get_path_for_child().
 */
reset_style(): void
/**
 * Very rarely-used function. This function is used to emit
 * an expose event on a widget. This function is not normally used
 * directly. The only time it is used is when propagating an expose
 * event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
 * and that is normally done using gtk_container_propagate_draw().
 * 
 * If you want to force an area of a window to be redrawn,
 * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
 * To cause the redraw to be done immediately, follow that call
 * with a call to gdk_window_process_updates().
 * @param event a expose #GdkEvent
 * @returns return from the event signal emission (%TRUE if   the event was handled)
 */
send_expose(event: Gdk.Event): number
/**
 * Sends the focus change `event` to `widget`
 * 
 * This function is not meant to be used by applications. The only time it
 * should be used is when it is necessary for a #GtkWidget to assign focus
 * to a widget that is semantically owned by the first widget even though
 * it’s not a direct child - for instance, a search entry in a floating
 * window similar to the quick search in #GtkTreeView.
 * 
 * An example of its usage is:
 * 
 * 
 * ```c
 *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
 * 
 *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
 *   fevent->focus_change.in = TRUE;
 *   fevent->focus_change.window = _gtk_widget_get_window (widget);
 *   if (fevent->focus_change.window != NULL)
 *     g_object_ref (fevent->focus_change.window);
 * 
 *   gtk_widget_send_focus_change (widget, fevent);
 * 
 *   gdk_event_free (event);
 * ```
 * 
 * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
 * @returns the return value from the event signal emission: %TRUE   if the event was handled, and %FALSE otherwise
 */
send_focus_change(event: Gdk.Event): boolean
/**
 * Given an accelerator group, `accel_group,` and an accelerator path,
 * `accel_path,` sets up an accelerator in `accel_group` so whenever the
 * key binding that is defined for `accel_path` is pressed, `widget`
 * will be activated.  This removes any accelerators (for any
 * accelerator group) installed by previous calls to
 * gtk_widget_set_accel_path(). Associating accelerators with
 * paths allows them to be modified by the user and the modifications
 * to be saved for future use. (See gtk_accel_map_save().)
 * 
 * This function is a low level function that would most likely
 * be used by a menu creation system like #GtkUIManager. If you
 * use #GtkUIManager, setting up accelerator paths will be done
 * automatically.
 * 
 * Even when you you aren’t using #GtkUIManager, if you only want to
 * set up accelerators on menu items gtk_menu_item_set_accel_path()
 * provides a somewhat more convenient interface.
 * 
 * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
 * pass a static string, you can save some memory by interning it first with
 * g_intern_static_string().
 * @param accel_path path used to look up the accelerator
 * @param accel_group a #GtkAccelGroup.
 */
set_accel_path(accel_path?: (string | null), accel_group?: (Gtk.AccelGroup | null)): void
/**
 * Sets the widget’s allocation.  This should not be used
 * directly, but from within a widget’s size_allocate method.
 * 
 * The allocation set should be the “adjusted” or actual
 * allocation. If you’re implementing a #GtkContainer, you want to use
 * gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
 * The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
 * allocation inside gtk_widget_size_allocate() to create an adjusted
 * allocation.
 * @param allocation a pointer to a #GtkAllocation to copy from
 */
set_allocation(allocation: Gtk.Allocation): void
/**
 * Sets whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * This is a hint to the widget and does not affect the behavior of
 * the GTK+ core; many widgets ignore this flag entirely. For widgets
 * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
 * the effect is to suppress default themed drawing of the widget's
 * background. (Children of the widget will still be drawn.) The application
 * is then entirely responsible for drawing the widget background.
 * 
 * Note that the background is still drawn when the widget is mapped.
 * @param app_paintable %TRUE if the application will paint on the widget
 */
set_app_paintable(app_paintable: boolean): void
/**
 * Specifies whether `widget` can be a default widget. See
 * gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param can_default whether or not @widget can be a default widget.
 */
set_can_default(can_default: boolean): void
/**
 * Specifies whether `widget` can own the input focus. See
 * gtk_widget_grab_focus() for actually setting the input focus on a
 * widget.
 * @param can_focus whether or not @widget can own the input focus.
 */
set_can_focus(can_focus: boolean): void
/**
 * Sets the widget’s clip.  This must not be used directly,
 * but from within a widget’s size_allocate method.
 * It must be called after gtk_widget_set_allocation() (or after chaining up
 * to the parent class), because that function resets the clip.
 * 
 * The clip set should be the area that `widget` draws on. If `widget` is a
 * #GtkContainer, the area must contain all children's clips.
 * 
 * If this function is not called by `widget` during a ::size-allocate handler,
 * the clip will be set to `widget'`s allocation.
 * @param clip a pointer to a #GtkAllocation to copy from
 */
set_clip(clip: Gtk.Allocation): void
/**
 * Sets a widgets composite name. The widget must be
 * a composite child of its parent; see gtk_widget_push_composite_child().
 * @param name the name to set
 */
set_composite_name(name: string): void
/**
 * Enables or disables a #GdkDevice to interact with `widget`
 * and all its children.
 * 
 * It does so by descending through the #GdkWindow hierarchy
 * and enabling the same mask that is has for core events
 * (i.e. the one that gdk_window_get_events() returns).
 * @param device a #GdkDevice
 * @param enabled whether to enable the device
 */
set_device_enabled(device: Gdk.Device, enabled: boolean): void
/**
 * Sets the device event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive from `device`. Keep
 * in mind that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_device_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with windowless widgets (which return
 * %FALSE from gtk_widget_get_has_window());
 * to get events on those widgets, place them inside a #GtkEventBox
 * and receive events on the event box.
 * @param device a #GdkDevice
 * @param events event mask
 */
set_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Sets the reading direction on a particular widget. This direction
 * controls the primary direction for widgets containing text,
 * and also the direction in which the children of a container are
 * packed. The ability to set the direction is present in order
 * so that correct localization into languages with right-to-left
 * reading directions can be done. Generally, applications will
 * let the default reading direction present, except for containers
 * where the containers are arranged in an order that is explicitly
 * visual rather than logical (such as buttons for text justification).
 * 
 * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
 * set by gtk_widget_set_default_direction() will be used.
 * @param dir the new direction
 */
set_direction(dir: Gtk.TextDirection): void
/**
 * Widgets are double buffered by default; you can use this function
 * to turn off the buffering. “Double buffered” simply means that
 * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
 * automatically around expose events sent to the
 * widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
 * window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
 * buffer to the screen. The result is that users see the window
 * update in one smooth step, and don’t see individual graphics
 * primitives being rendered.
 * 
 * In very simple terms, double buffered widgets don’t flicker,
 * so you would only use this function to turn off double buffering
 * if you had special needs and really knew what you were doing.
 * 
 * Note: if you turn off double-buffering, you have to handle
 * expose events, since even the clearing to the background color or
 * pixmap will not happen automatically (as it is done in
 * gdk_window_begin_draw_frame()).
 * 
 * In 3.10 GTK and GDK have been restructured for translucent drawing. Since
 * then expose events for double-buffered widgets are culled into a single
 * event to the toplevel GDK window. If you now unset double buffering, you
 * will cause a separate rendering pass for every widget. This will likely
 * cause rendering problems - in particular related to stacking - and usually
 * increases rendering times significantly.
 * @param double_buffered %TRUE to double-buffer a widget
 */
set_double_buffered(double_buffered: boolean): void
/**
 * Sets the event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive. Keep in mind
 * that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with widgets that have no window.
 * (See gtk_widget_get_has_window()).  To get events on those widgets,
 * place them inside a #GtkEventBox and receive events on the event
 * box.
 * @param events event mask
 */
set_events(events: number): void
/**
 * Sets whether the widget should grab focus when it is clicked with the mouse.
 * Making mouse clicks not grab focus is useful in places like toolbars where
 * you don’t want the keyboard focus removed from the main area of the
 * application.
 * @param focus_on_click whether the widget should grab focus when clicked with the mouse
 */
set_focus_on_click(focus_on_click: boolean): void
/**
 * Sets the font map to use for Pango rendering. When not set, the widget
 * will inherit the font map from its parent.
 * @param font_map a #PangoFontMap, or %NULL to unset any previously     set font map
 */
set_font_map(font_map?: (Pango.FontMap | null)): void
/**
 * Sets the #cairo_font_options_t used for Pango rendering in this widget.
 * When not set, the default font options for the #GdkScreen will be used.
 * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
 */
set_font_options(options?: (cairo.FontOptions | null)): void
/**
 * Sets the horizontal alignment of `widget`.
 * See the #GtkWidget:halign property.
 * @param align the horizontal alignment
 */
set_halign(align: Gtk.Align): void
/**
 * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
 * #GtkWidget:has-tooltip for more information.
 * @param has_tooltip whether or not @widget has a tooltip.
 */
set_has_tooltip(has_tooltip: boolean): void
/**
 * Specifies whether `widget` has a #GdkWindow of its own. Note that
 * all realized widgets have a non-%NULL “window” pointer
 * (gtk_widget_get_window() never returns a %NULL window when a widget
 * is realized), but for many of them it’s actually the #GdkWindow of
 * one of its parent widgets. Widgets that do not create a %window for
 * themselves in #GtkWidget::realize must announce this by
 * calling this function with `has_window` = %FALSE.
 * 
 * This function should only be called by widget implementations,
 * and they should call it in their init() function.
 * @param has_window whether or not @widget has a window.
 */
set_has_window(has_window: boolean): void
/**
 * Sets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Call this function to set the expand flag if you would like your
 * widget to become larger horizontally when the window has extra
 * room.
 * 
 * By default, widgets automatically expand if any of their children
 * want to expand. (To see if a widget will automatically expand given
 * its current children and state, call gtk_widget_compute_expand(). A
 * container can decide how the expandability of children affects the
 * expansion of the container by overriding the compute_expand virtual
 * method on #GtkWidget.).
 * 
 * Setting hexpand explicitly with this function will override the
 * automatic expand behavior.
 * 
 * This function forces the widget to expand or not to expand,
 * regardless of children.  The override occurs because
 * gtk_widget_set_hexpand() sets the hexpand-set property (see
 * gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
 * value to be used, rather than looking at children and widget state.
 * @param expand whether to expand
 */
set_hexpand(expand: boolean): void
/**
 * Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
 * be used.
 * 
 * The hexpand-set property will be set automatically when you call
 * gtk_widget_set_hexpand() to set hexpand, so the most likely
 * reason to use this function would be to unset an explicit expand
 * flag.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @param set value for hexpand-set property
 */
set_hexpand_set(set: boolean): void
/**
 * Marks the widget as being mapped.
 * 
 * This function should only ever be called in a derived widget's
 * “map” or “unmap” implementation.
 * @param mapped %TRUE to mark the widget as mapped
 */
set_mapped(mapped: boolean): void
/**
 * Sets the bottom margin of `widget`.
 * See the #GtkWidget:margin-bottom property.
 * @param margin the bottom margin
 */
set_margin_bottom(margin: number): void
/**
 * Sets the end margin of `widget`.
 * See the #GtkWidget:margin-end property.
 * @param margin the end margin
 */
set_margin_end(margin: number): void
/**
 * Sets the left margin of `widget`.
 * See the #GtkWidget:margin-left property.
 * @param margin the left margin
 */
set_margin_left(margin: number): void
/**
 * Sets the right margin of `widget`.
 * See the #GtkWidget:margin-right property.
 * @param margin the right margin
 */
set_margin_right(margin: number): void
/**
 * Sets the start margin of `widget`.
 * See the #GtkWidget:margin-start property.
 * @param margin the start margin
 */
set_margin_start(margin: number): void
/**
 * Sets the top margin of `widget`.
 * See the #GtkWidget:margin-top property.
 * @param margin the top margin
 */
set_margin_top(margin: number): void
/**
 * Widgets can be named, which allows you to refer to them from a
 * CSS file. You can apply a style to widgets with a particular name
 * in the CSS file. See the documentation for the CSS syntax (on the
 * same page as the docs for #GtkStyleContext).
 * 
 * Note that the CSS syntax has certain special characters to delimit
 * and represent elements in a selector (period, #, >, *...), so using
 * these will make your widget impossible to match by name. Any combination
 * of alphanumeric symbols, dashes and underscores will suffice.
 * @param name name for the widget
 */
set_name(name: string): void
/**
 * Sets the #GtkWidget:no-show-all property, which determines whether
 * calls to gtk_widget_show_all() will affect this widget.
 * 
 * This is mostly for use in constructing widget hierarchies with externally
 * controlled visibility, see #GtkUIManager.
 * @param no_show_all the new value for the “no-show-all” property
 */
set_no_show_all(no_show_all: boolean): void
/**
 * Request the `widget` to be rendered partially transparent,
 * with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
 * are clamped to the [0,1] range.).
 * This works on both toplevel widget, and child widgets, although there
 * are some limitations:
 * 
 * For toplevel widgets this depends on the capabilities of the windowing
 * system. On X11 this has any effect only on X screens with a compositing manager
 * running. See gtk_widget_is_composited(). On Windows it should work
 * always, although setting a window’s opacity after the window has been
 * shown causes it to flicker once on Windows.
 * 
 * For child widgets it doesn’t work if any affected widget has a native window, or
 * disables double buffering.
 * @param opacity desired opacity, between 0 and 1
 */
set_opacity(opacity: number): void
/**
 * This function is useful only when implementing subclasses of
 * #GtkContainer.
 * Sets the container as the parent of `widget,` and takes care of
 * some details such as updating the state and style of the child
 * to reflect its new location. The opposite function is
 * gtk_widget_unparent().
 * @param parent parent container
 */
set_parent(parent: Gtk.Widget): void
/**
 * Sets a non default parent window for `widget`.
 * 
 * For #GtkWindow classes, setting a `parent_window` effects whether
 * the window is a toplevel window or can be embedded into other
 * widgets.
 * 
 * For #GtkWindow classes, this needs to be called before the
 * window is realized.
 * @param parent_window the new parent window.
 */
set_parent_window(parent_window: Gdk.Window): void
/**
 * Marks the widget as being realized. This function must only be
 * called after all #GdkWindows for the `widget` have been created
 * and registered.
 * 
 * This function should only ever be called in a derived widget's
 * “realize” or “unrealize” implementation.
 * @param realized %TRUE to mark the widget as realized
 */
set_realized(realized: boolean): void
/**
 * Specifies whether `widget` will be treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param receives_default whether or not @widget can be a default widget.
 */
set_receives_default(receives_default: boolean): void
/**
 * Sets whether the entire widget is queued for drawing when its size
 * allocation changes. By default, this setting is %TRUE and
 * the entire widget is redrawn on every size change. If your widget
 * leaves the upper left unchanged when made bigger, turning this
 * setting off will improve performance.
 * 
 * Note that for widgets where gtk_widget_get_has_window() is %FALSE
 * setting this flag to %FALSE turns off all allocation on resizing:
 * the widget will not even redraw if its position changes; this is to
 * allow containers that don’t draw anything to avoid excess
 * invalidations. If you set this flag on a widget with no window that
 * does draw on `widget->`window, you are
 * responsible for invalidating both the old and new allocation of the
 * widget when the widget is moved and responsible for invalidating
 * regions newly when the widget increases size.
 * @param redraw_on_allocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
 */
set_redraw_on_allocate(redraw_on_allocate: boolean): void
/**
 * Sets the sensitivity of a widget. A widget is sensitive if the user
 * can interact with it. Insensitive widgets are “grayed out” and the
 * user can’t interact with them. Insensitive widgets are known as
 * “inactive”, “disabled”, or “ghosted” in some other toolkits.
 * @param sensitive %TRUE to make the widget sensitive
 */
set_sensitive(sensitive: boolean): void
/**
 * Sets the minimum size of a widget; that is, the widget’s size
 * request will be at least `width` by `height`. You can use this
 * function to force a widget to be larger than it normally would be.
 * 
 * In most cases, gtk_window_set_default_size() is a better choice for
 * toplevel windows than this function; setting the default size will
 * still allow users to shrink the window. Setting the size request
 * will force them to leave the window at least as large as the size
 * request. When dealing with window sizes,
 * gtk_window_set_geometry_hints() can be a useful function as well.
 * 
 * Note the inherent danger of setting any fixed size - themes,
 * translations into other languages, different fonts, and user action
 * can all change the appropriate size for a given widget. So, it's
 * basically impossible to hardcode a size that will always be
 * correct.
 * 
 * The size request of a widget is the smallest size a widget can
 * accept while still functioning well and drawing itself correctly.
 * However in some strange cases a widget may be allocated less than
 * its requested size, and in many cases a widget may be allocated more
 * space than it requested.
 * 
 * If the size request in a given direction is -1 (unset), then
 * the “natural” size request of the widget will be used instead.
 * 
 * The size request set here does not include any margin from the
 * #GtkWidget properties margin-left, margin-right, margin-top, and
 * margin-bottom, but it does include pretty much all other padding
 * or border properties set by any subclass of #GtkWidget.
 * @param width width @widget should request, or -1 to unset
 * @param height height @widget should request, or -1 to unset
 */
set_size_request(width: number, height: number): void
/**
 * This function is for use in widget implementations. Sets the state
 * of a widget (insensitive, prelighted, etc.) Usually you should set
 * the state using wrapper functions such as gtk_widget_set_sensitive().
 * @param state new state for @widget
 */
set_state(state: Gtk.StateType): void
/**
 * This function is for use in widget implementations. Turns on flag
 * values in the current widget state (insensitive, prelighted, etc.).
 * 
 * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
 * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
 * direction, use gtk_widget_set_direction().
 * 
 * It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
 * will be propagated down to all non-internal children if `widget` is a
 * #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
 * down to all #GtkContainer children by different means than turning on the
 * state flag down the hierarchy, both gtk_widget_get_state_flags() and
 * gtk_widget_is_sensitive() will make use of these.
 * @param flags State flags to turn on
 * @param clear Whether to clear state before turning on @flags
 */
set_state_flags(flags: Gtk.StateFlags, clear: boolean): void
/**
 * Used to set the #GtkStyle for a widget (`widget->`style). Since
 * GTK 3, this function does nothing, the passed in style is ignored.
 * @param style a #GtkStyle, or %NULL to remove the effect     of a previous call to gtk_widget_set_style() and go back to     the default style
 */
set_style(style?: (Gtk.Style | null)): void
/**
 * Enables or disables multiple pointer awareness. If this setting is %TRUE,
 * `widget` will start receiving multiple, per device enter/leave events. Note
 * that if custom #GdkWindows are created in #GtkWidget::realize,
 * gdk_window_set_support_multidevice() will have to be called manually on them.
 * @param support_multidevice %TRUE to support input from multiple devices.
 */
set_support_multidevice(support_multidevice: boolean): void
/**
 * Sets `markup` as the contents of the tooltip, which is marked up with
 *  the [Pango text markup language][PangoMarkupFormat].
 * 
 * This function will take care of setting #GtkWidget:has-tooltip to %TRUE
 * and of the default handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-markup property and
 * gtk_tooltip_set_markup().
 * @param markup the contents of the tooltip for @widget, or %NULL
 */
set_tooltip_markup(markup?: (string | null)): void
/**
 * Sets `text` as the contents of the tooltip. This function will take
 * care of setting #GtkWidget:has-tooltip to %TRUE and of the default
 * handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
 * @param text the contents of the tooltip for @widget
 */
set_tooltip_text(text?: (string | null)): void
/**
 * Replaces the default window used for displaying
 * tooltips with `custom_window`. GTK+ will take care of showing and
 * hiding `custom_window` at the right moment, to behave likewise as
 * the default tooltip window. If `custom_window` is %NULL, the default
 * tooltip window will be used.
 * @param custom_window a #GtkWindow, or %NULL
 */
set_tooltip_window(custom_window?: (Gtk.Window | null)): void
/**
 * Sets the vertical alignment of `widget`.
 * See the #GtkWidget:valign property.
 * @param align the vertical alignment
 */
set_valign(align: Gtk.Align): void
/**
 * Sets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_set_hexpand() for more detail.
 * @param expand whether to expand
 */
set_vexpand(expand: boolean): void
/**
 * Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
 * be used.
 * 
 * See gtk_widget_set_hexpand_set() for more detail.
 * @param set value for vexpand-set property
 */
set_vexpand_set(set: boolean): void
/**
 * Sets the visibility state of `widget`. Note that setting this to
 * %TRUE doesn’t mean the widget is actually viewable, see
 * gtk_widget_get_visible().
 * 
 * This function simply calls gtk_widget_show() or gtk_widget_hide()
 * but is nicer to use when the visibility of the widget depends on
 * some condition.
 * @param visible whether the widget should be shown or not
 */
set_visible(visible: boolean): void
/**
 * Sets the visual that should be used for by widget and its children for
 * creating #GdkWindows. The visual must be on the same #GdkScreen as
 * returned by gtk_widget_get_screen(), so handling the
 * #GtkWidget::screen-changed signal is necessary.
 * 
 * Setting a new `visual` will not cause `widget` to recreate its windows,
 * so you should call this function before `widget` is realized.
 * @param visual visual to be used or %NULL to unset a previous one
 */
set_visual(visual?: (Gdk.Visual | null)): void
/**
 * Sets a widget’s window. This function should only be used in a
 * widget’s #GtkWidget::realize implementation. The %window passed is
 * usually either new window created with gdk_window_new(), or the
 * window of its parent widget as returned by
 * gtk_widget_get_parent_window().
 * 
 * Widgets must indicate whether they will create their own #GdkWindow
 * by calling gtk_widget_set_has_window(). This is usually done in the
 * widget’s init() function.
 * 
 * Note that this function does not add any reference to `window`.
 * @param window a #GdkWindow
 */
set_window(window: Gdk.Window): void
/**
 * Sets a shape for this widget’s GDK window. This allows for
 * transparent windows etc., see gdk_window_shape_combine_region()
 * for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
show_all(): void
/**
 * Shows a widget. If the widget is an unmapped toplevel widget
 * (i.e. a #GtkWindow that has not yet been shown), enter the main
 * loop and wait for the window to actually be mapped. Be careful;
 * because the main loop is running, anything can happen during
 * this function.
 */
show_now(): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
size_allocate(allocation: Gtk.Allocation): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size,
 * position and (optionally) baseline to their child widgets.
 * 
 * In this function, the allocation and baseline may be adjusted. It
 * will be forced to a 1x1 minimum size, and the
 * adjust_size_allocation virtual and adjust_baseline_allocation
 * methods on the child will be used to adjust the allocation and
 * baseline. Standard adjustments include removing the widget's
 * margins, and applying the widget’s #GtkWidget:halign and
 * #GtkWidget:valign properties.
 * 
 * If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
 * baseline argument is ignored and -1 is used instead.
 * @param allocation position and size to be allocated to @widget
 * @param baseline The baseline of the child, or -1
 */
size_allocate_with_baseline(allocation: Gtk.Allocation, baseline: number): void
/**
 * This function is typically used when implementing a #GtkContainer
 * subclass.  Obtains the preferred size of a widget. The container
 * uses this information to arrange its child widgets and decide what
 * size allocations to give them with gtk_widget_size_allocate().
 * 
 * You can also call this function from an application, with some
 * caveats. Most notably, getting a size request requires the widget
 * to be associated with a screen, because font information may be
 * needed. Multihead-aware applications should keep this in mind.
 * 
 * Also remember that the size request is not necessarily the size
 * a widget will actually be allocated.
 */
size_request(): Gtk.Requisition
/**
 * This function attaches the widget’s #GtkStyle to the widget's
 * #GdkWindow. It is a replacement for
 * 
 * 
 * ```
 * widget->style = gtk_style_attach (widget->style, widget->window);
 * ```
 * 
 * 
 * and should only ever be called in a derived widget’s “realize”
 * implementation which does not chain up to its parent class'
 * “realize” implementation, because one of the parent classes
 * (finally #GtkWidget) would attach the style itself.
 */
style_attach(): void
/**
 * Gets the value of a style property of `widget`.
 * @param property_name the name of a style property
 * @param value location to return the property value
 */
style_get_property(property_name: string, value: GObject.Value): void
/**
 * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
 * This causes all queued #GtkWidget::child-notify signals on `widget` to be
 * emitted.
 */
thaw_child_notify(): void
/**
 * Translate coordinates relative to `src_widget’`s allocation to coordinates
 * relative to `dest_widget’`s allocations. In order to perform this
 * operation, both widgets must be realized, and must share a common
 * toplevel.
 * @param dest_widget a #GtkWidget
 * @param src_x X position relative to @src_widget
 * @param src_y Y position relative to @src_widget
 * @returns %FALSE if either widget was not realized, or there   was no common ancestor. In this case, nothing is stored in   *@dest_x and *@dest_y. Otherwise %TRUE.
 */
translate_coordinates(dest_widget: Gtk.Widget, src_x: number, src_y: number): [boolean, number, number]
/**
 * Triggers a tooltip query on the display where the toplevel of `widget`
 * is located. See gtk_tooltip_trigger_tooltip_query() for more
 * information.
 */
trigger_tooltip_query(): void
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
unmap(): void
/**
 * This function is only for use in widget implementations.
 * Should be called by implementations of the remove method
 * on #GtkContainer, to dissociate a child from the container.
 */
unparent(): void
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
unrealize(): void
/**
 * Unregisters a #GdkWindow from the widget that was previously set up with
 * gtk_widget_register_window(). You need to call this when the window is
 * no longer used by the widget, such as when you destroy it.
 * @param window a #GdkWindow
 */
unregister_window(window: Gdk.Window): void
/**
 * This function is for use in widget implementations. Turns off flag
 * values for the current widget state (insensitive, prelighted, etc.).
 * See gtk_widget_set_state_flags().
 * @param flags State flags to turn off
 */
unset_state_flags(flags: Gtk.StateFlags): void
vfunc_adjust_baseline_allocation(baseline: number): void
vfunc_adjust_baseline_request(minimum_baseline: number, natural_baseline: number): void
vfunc_adjust_size_allocation(orientation: Gtk.Orientation, minimum_size: number, natural_size: number, allocated_pos: number, allocated_size: number): void
vfunc_adjust_size_request(orientation: Gtk.Orientation, minimum_size: number, natural_size: number): void
vfunc_button_press_event(event: Gdk.EventButton): boolean
vfunc_button_release_event(event: Gdk.EventButton): boolean
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 */
vfunc_can_activate_accel(signal_id: number): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
vfunc_child_notify(child_property: GObject.ParamSpec): void
vfunc_composited_changed(): void
vfunc_compute_expand(hexpand_p: boolean, vexpand_p: boolean): void
vfunc_configure_event(event: Gdk.EventConfigure): boolean
vfunc_damage_event(event: Gdk.EventExpose): boolean
vfunc_delete_event(event: Gdk.EventAny): boolean
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
vfunc_destroy(): void
vfunc_destroy_event(event: Gdk.EventAny): boolean
vfunc_direction_changed(previous_direction: Gtk.TextDirection): void
vfunc_dispatch_child_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_drag_begin(context: Gdk.DragContext): void
vfunc_drag_data_delete(context: Gdk.DragContext): void
vfunc_drag_data_get(context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_data_received(context: Gdk.DragContext, x: number, y: number, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_drop(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_drag_end(context: Gdk.DragContext): void
vfunc_drag_failed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
vfunc_drag_leave(context: Gdk.DragContext, time_: number): void
vfunc_drag_motion(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_draw(cr: cairo.Context): boolean
vfunc_enter_notify_event(event: Gdk.EventCrossing): boolean
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 */
vfunc_event(event: Gdk.Event): boolean
vfunc_focus(direction: Gtk.DirectionType): boolean
vfunc_focus_in_event(event: Gdk.EventFocus): boolean
vfunc_focus_out_event(event: Gdk.EventFocus): boolean
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 */
vfunc_get_accessible(): Atk.Object
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
vfunc_get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
vfunc_get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
vfunc_get_preferred_width_for_height(height: number): [number, number]
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 */
vfunc_get_request_mode(): Gtk.SizeRequestMode
vfunc_grab_broken_event(event: Gdk.EventGrabBroken): boolean
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
vfunc_grab_focus(): void
vfunc_grab_notify(was_grabbed: boolean): void
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
vfunc_hide(): void
vfunc_hierarchy_changed(previous_toplevel: Gtk.Widget): void
vfunc_key_press_event(event: Gdk.EventKey): boolean
vfunc_key_release_event(event: Gdk.EventKey): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 */
vfunc_keynav_failed(direction: Gtk.DirectionType): boolean
vfunc_leave_notify_event(event: Gdk.EventCrossing): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
vfunc_map(): void
vfunc_map_event(event: Gdk.EventAny): boolean
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 */
vfunc_mnemonic_activate(group_cycling: boolean): boolean
vfunc_motion_notify_event(event: Gdk.EventMotion): boolean
vfunc_move_focus(direction: Gtk.DirectionType): void
vfunc_parent_set(previous_parent: Gtk.Widget): void
vfunc_popup_menu(): boolean
vfunc_property_notify_event(event: Gdk.EventProperty): boolean
vfunc_proximity_in_event(event: Gdk.EventProximity): boolean
vfunc_proximity_out_event(event: Gdk.EventProximity): boolean
vfunc_query_tooltip(x: number, y: number, keyboard_tooltip: boolean, tooltip: Gtk.Tooltip): boolean
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
vfunc_queue_draw_region(region: cairo.Region): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
vfunc_realize(): void
vfunc_screen_changed(previous_screen: Gdk.Screen): void
vfunc_scroll_event(event: Gdk.EventScroll): boolean
vfunc_selection_clear_event(event: Gdk.EventSelection): boolean
vfunc_selection_get(selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_selection_notify_event(event: Gdk.EventSelection): boolean
vfunc_selection_received(selection_data: Gtk.SelectionData, time_: number): void
vfunc_selection_request_event(event: Gdk.EventSelection): boolean
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
vfunc_show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
vfunc_show_all(): void
vfunc_show_help(help_type: Gtk.WidgetHelpType): boolean
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
vfunc_size_allocate(allocation: Gtk.Allocation): void
vfunc_state_changed(previous_state: Gtk.StateType): void
vfunc_state_flags_changed(previous_state_flags: Gtk.StateFlags): void
vfunc_style_set(previous_style: Gtk.Style): void
vfunc_style_updated(): void
vfunc_touch_event(event: Gdk.EventTouch): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
vfunc_unmap(): void
vfunc_unmap_event(event: Gdk.EventAny): boolean
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
vfunc_unrealize(): void
vfunc_visibility_notify_event(event: Gdk.EventVisibility): boolean
vfunc_window_state_event(event: Gdk.EventWindowState): boolean
}

module DockManager {

    // Signal callback interfaces

    interface RegisterDock {
        (object: Dock): void
    }

    interface UnregisterDock {
        (object: Dock): void
    }


    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {

    }

}

class DockManager extends GObject.Object {

    // Constructors of Dazzle.DockManager


constructor(properties?: Partial<DockManager.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): DockManager;

    // Own signals of Dazzle.DockManager

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'register-dock', callback: ((_source: this, object: Dock) => void)): number
    connect_after(signal: 'register-dock', callback: ((_source: this, object: Dock) => void)): number
    emit(signal: 'register-dock', object: Dock): void
    connect(signal: 'unregister-dock', callback: ((_source: this, object: Dock) => void)): number
    connect_after(signal: 'unregister-dock', callback: ((_source: this, object: Dock) => void)): number
    emit(signal: 'unregister-dock', object: Dock): void

    // Own virtual methods of Dazzle.DockManager

    vfunc_register_dock(dock: Dock): void
    vfunc_unregister_dock(dock: Dock): void

    // Own methods of Dazzle.DockManager

    /**
     * Requests that the transient grab monitoring stop until
     * dzl_dock_manager_unpause_grabs() is called.
     * 
     * This might be useful while setting up UI so that you don't focus
     * something unexpectedly.
     * 
     * This function may be called multiple times and after an equivalent
     * number of calls to dzl_dock_manager_unpause_grabs(), transient
     * grab monitoring will continue.
     */
    pause_grabs(): void
    register_dock(dock: Dock): void
    release_transient_grab(): void
    /**
     * Unpauses a previous call to dzl_dock_manager_pause_grabs().
     * 
     * Once the pause count returns to zero, transient grab monitoring
     * will be restored.
     */
    unpause_grabs(): void
    unregister_dock(dock: Dock): void
}

module DockOverlay {

    // Signal callback interfaces

    interface HideEdges {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProps extends Gtk.EventBox.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Dock.ConstructorProps, DockItem.ConstructorProps, Gtk.Buildable.ConstructorProps {

    }

}

class DockOverlay extends Gtk.EventBox implements Atk.ImplementorIface, Dock, DockItem, Gtk.Buildable {

    // Constructors of Dazzle.DockOverlay


constructor(properties?: Partial<DockOverlay.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): DockOverlay;

    // Own signals of Dazzle.DockOverlay

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'hide-edges', callback: ((_source: this) => void)): number
    connect_after(signal: 'hide-edges', callback: ((_source: this) => void)): number
    emit(signal: 'hide-edges'): void

    // Own virtual methods of Dazzle.DockOverlay

    vfunc_hide_edges(): void

    // Own methods of Dazzle.DockOverlay

    get_edge(position: Gtk.PositionType): DockOverlayEdge
    get_edge_adjustment(position: Gtk.PositionType): Gtk.Adjustment

// Inherited properties
get manager(): DockManager;
set manager(val: DockManager);
get border_width(): number;
set border_width(val: number);
get borderWidth(): number;
set borderWidth(val: number);
set child(val: Gtk.Widget);
get resize_mode(): Gtk.ResizeMode;
set resize_mode(val: Gtk.ResizeMode);
get resizeMode(): Gtk.ResizeMode;
set resizeMode(val: Gtk.ResizeMode);
get app_paintable(): boolean;
set app_paintable(val: boolean);
get appPaintable(): boolean;
set appPaintable(val: boolean);
get can_default(): boolean;
set can_default(val: boolean);
get canDefault(): boolean;
set canDefault(val: boolean);
get can_focus(): boolean;
set can_focus(val: boolean);
get canFocus(): boolean;
set canFocus(val: boolean);
get composite_child(): boolean;
get compositeChild(): boolean;
/**
 * Whether the widget is double buffered.
 */
get double_buffered(): boolean;
set double_buffered(val: boolean);
/**
 * Whether the widget is double buffered.
 */
get doubleBuffered(): boolean;
set doubleBuffered(val: boolean);
get events(): Gdk.EventMask;
set events(val: Gdk.EventMask);
/**
 * Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
 */
get expand(): boolean;
set expand(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focus_on_click(): boolean;
set focus_on_click(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focusOnClick(): boolean;
set focusOnClick(val: boolean);
/**
 * How to distribute horizontal space if widget gets extra space, see #GtkAlign
 */
get halign(): Gtk.Align;
set halign(val: Gtk.Align);
get has_default(): boolean;
set has_default(val: boolean);
get hasDefault(): boolean;
set hasDefault(val: boolean);
get has_focus(): boolean;
set has_focus(val: boolean);
get hasFocus(): boolean;
set hasFocus(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get has_tooltip(): boolean;
set has_tooltip(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get hasTooltip(): boolean;
set hasTooltip(val: boolean);
get height_request(): number;
set height_request(val: number);
get heightRequest(): number;
set heightRequest(val: number);
/**
 * Whether to expand horizontally. See gtk_widget_set_hexpand().
 */
get hexpand(): boolean;
set hexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpand_set(): boolean;
set hexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpandSet(): boolean;
set hexpandSet(val: boolean);
get is_focus(): boolean;
set is_focus(val: boolean);
get isFocus(): boolean;
set isFocus(val: boolean);
/**
 * Sets all four sides' margin at once. If read, returns max
 * margin on any side.
 */
get margin(): number;
set margin(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_bottom(): number;
set margin_bottom(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginBottom(): number;
set marginBottom(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_end(): number;
set margin_end(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginEnd(): number;
set marginEnd(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_left(): number;
set margin_left(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginLeft(): number;
set marginLeft(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_right(): number;
set margin_right(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginRight(): number;
set marginRight(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_start(): number;
set margin_start(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginStart(): number;
set marginStart(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_top(): number;
set margin_top(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginTop(): number;
set marginTop(val: number);
get name(): string;
set name(val: string);
get no_show_all(): boolean;
set no_show_all(val: boolean);
get noShowAll(): boolean;
set noShowAll(val: boolean);
/**
 * The requested opacity of the widget. See gtk_widget_set_opacity() for
 * more details about window opacity.
 * 
 * Before 3.8 this was only available in GtkWindow
 */
get opacity(): number;
set opacity(val: number);
get parent(): Gtk.Container;
set parent(val: Gtk.Container);
get receives_default(): boolean;
set receives_default(val: boolean);
get receivesDefault(): boolean;
set receivesDefault(val: boolean);
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scale_factor(): number;
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scaleFactor(): number;
get sensitive(): boolean;
set sensitive(val: boolean);
/**
 * The style of the widget, which contains information about how it will look (colors, etc).
 */
get style(): Gtk.Style;
set style(val: Gtk.Style);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_markup(): string;
set tooltip_markup(val: string);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipMarkup(): string;
set tooltipMarkup(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_text(): string;
set tooltip_text(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipText(): string;
set tooltipText(val: string);
/**
 * How to distribute vertical space if widget gets extra space, see #GtkAlign
 */
get valign(): Gtk.Align;
set valign(val: Gtk.Align);
/**
 * Whether to expand vertically. See gtk_widget_set_vexpand().
 */
get vexpand(): boolean;
set vexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpand_set(): boolean;
set vexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpandSet(): boolean;
set vexpandSet(val: boolean);
get visible(): boolean;
set visible(val: boolean);
get width_request(): number;
set width_request(val: number);
get widthRequest(): number;
set widthRequest(val: number);
/**
 * The widget's window if it is realized, %NULL otherwise.
 */
get window(): Gdk.Window;

// Inherited methods
adopt(child: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 * @returns %TRUE if the dock item was closed
 */
close(): boolean
/**
 * Emits the #DzlDockItem::presented signal.
 * 
 * Containers should emit this when their descendant has been presented as the
 * current visible child. This allows dock items to do lazy initialization of
 * content once the widgetry is visible to the user.
 * 
 * Currently, this is best effort, as there are a number of situations that
 * make covering all cases problematic.
 */
emit_presented(): void
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 * @returns %TRUE if the dock item can be closed by the user, otherwise %FALSE.
 */
get_can_close(): boolean
get_can_minimize(): boolean
get_child_visible(child: DockItem): boolean
get_child_visible(...args: never[]): any
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 * @returns A #DzlDockmanager.
 */
get_manager(): (DockManager | null)
/**
 * Gets the parent #DzlDockItem, or %NULL.
 * @returns A #DzlDockItem or %NULL.
 */
get_parent(): (DockItem | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_title(): (string | null)
has_widgets(): boolean
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 * @returns %TRUE if @child was minimized. Otherwise %FALSE and @position   may be updated to a suggested position.
 */
minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
needs_attention(): void
/**
 * This widget will walk the widget hierarchy to ensure that the
 * dock item is visible to the user.
 */
present(): void
present_child(child: DockItem): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 * @returns a #GIcon or %NULL
 */
ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
release(child: DockItem): void
set_child_visible(child: DockItem, child_visible: boolean): void
set_child_visible(...args: never[]): any
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
set_manager(manager?: (DockManager | null)): void
update_visibility(): void
vfunc_can_minimize(descendant: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 */
vfunc_close(): boolean
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 */
vfunc_get_can_close(): boolean
vfunc_get_child_visible(child: DockItem): boolean
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 */
vfunc_get_manager(): (DockManager | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_title(): (string | null)
vfunc_manager_set(old_manager: DockManager): void
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 */
vfunc_minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
vfunc_needs_attention(): void
vfunc_present_child(child: DockItem): void
vfunc_presented(): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 */
vfunc_ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
vfunc_release(child: DockItem): void
vfunc_set_child_visible(child: DockItem, child_visible: boolean): void
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
vfunc_set_manager(manager?: (DockManager | null)): void
vfunc_update_visibility(): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
/**
 * Adds `widget` to `container`. Typically used for simple containers
 * such as #GtkWindow, #GtkFrame, or #GtkButton; for more complicated
 * layout containers such as #GtkBox or #GtkGrid, this function will
 * pick default packing parameters that may not be correct.  So
 * consider functions such as gtk_box_pack_start() and
 * gtk_grid_attach() as an alternative to gtk_container_add() in
 * those cases. A widget may be added to only one container at a time;
 * you can’t place the same widget inside two different containers.
 * 
 * Note that some containers, such as #GtkScrolledWindow or #GtkListBox,
 * may add intermediate children between the added widget and the
 * container.
 * @param widget a widget to be placed inside @container
 */
add(widget: Gtk.Widget): void
check_resize(): void
/**
 * Gets the value of a child property for `child` and `container`.
 * @param child a widget which is a child of @container
 * @param property_name the name of the property to get
 * @param value a location to return the value
 */
child_get_property(child: Gtk.Widget, property_name: string, value: GObject.Value): void
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties]
 * `child_property` on the child.
 * 
 * This is an analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_widget_child_notify().
 * @param child the child widget
 * @param child_property the name of a child property installed on     the class of @container
 */
child_notify(child: Gtk.Widget, child_property: string): void
child_notify(...args: never[]): any
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] specified by
 * `pspec` on the child.
 * 
 * This is an analogue of g_object_notify_by_pspec() for child properties.
 * @param child the child widget
 * @param pspec the #GParamSpec of a child property instealled on     the class of @container
 */
child_notify_by_pspec(child: Gtk.Widget, pspec: GObject.ParamSpec): void
/**
 * Sets a child property for `child` and `container`.
 * @param child a widget which is a child of @container
 * @param property_name the name of the property to set
 * @param value the value to set the property to
 */
child_set_property(child: Gtk.Widget, property_name: string, value: GObject.Value): void
/**
 * Returns the type of the children supported by the container.
 * 
 * Note that this may return %G_TYPE_NONE to indicate that no more
 * children can be added, e.g. for a #GtkPaned which already has two
 * children.
 * @returns a #GType.
 */
child_type(): GObject.GType
/**
 * Invokes `callback` on each direct child of `container,` including
 * children that are considered “internal” (implementation details
 * of the container). “Internal” children generally weren’t added
 * by the user of the container, but were added by the container
 * implementation itself.
 * 
 * Most applications should use gtk_container_foreach(), rather
 * than gtk_container_forall().
 * @param callback a callback
 */
forall(callback: Gtk.Callback): void
/**
 * Invokes `callback` on each non-internal child of `container`.
 * See gtk_container_forall() for details on what constitutes
 * an “internal” child. For all practical purposes, this function
 * should iterate over precisely those child widgets that were
 * added to the container by the application with explicit add()
 * calls.
 * 
 * It is permissible to remove the child from the `callback` handler.
 * 
 * Most applications should use gtk_container_foreach(),
 * rather than gtk_container_forall().
 * @param callback a callback
 */
foreach(callback: Gtk.Callback): void
/**
 * Retrieves the border width of the container. See
 * gtk_container_set_border_width().
 * @returns the current border width
 */
get_border_width(): number
/**
 * Returns the container’s non-internal children. See
 * gtk_container_forall() for details on what constitutes an "internal" child.
 * @returns a newly-allocated list of the container’s non-internal children.
 */
get_children(): Gtk.Widget[]
/**
 * Retrieves the focus chain of the container, if one has been
 * set explicitly. If no focus chain has been explicitly
 * set, GTK+ computes the focus chain based on the positions
 * of the children. In that case, GTK+ stores %NULL in
 * `focusable_widgets` and returns %FALSE.
 * @returns %TRUE if the focus chain of the container has been set explicitly.
 */
get_focus_chain(): [boolean, Gtk.Widget[]]
/**
 * Returns the current focus child widget inside `container`. This is not the
 * currently focused widget. That can be obtained by calling
 * gtk_window_get_focus().
 * @returns The child widget which will receive the          focus inside @container when the @container is focused,          or %NULL if none is set.
 */
get_focus_child(): (Gtk.Widget | null)
/**
 * Retrieves the horizontal focus adjustment for the container. See
 * gtk_container_set_focus_hadjustment ().
 * @returns the horizontal focus adjustment, or %NULL if   none has been set.
 */
get_focus_hadjustment(): (Gtk.Adjustment | null)
/**
 * Retrieves the vertical focus adjustment for the container. See
 * gtk_container_set_focus_vadjustment().
 * @returns the vertical focus adjustment, or   %NULL if none has been set.
 */
get_focus_vadjustment(): (Gtk.Adjustment | null)
/**
 * Returns a newly created widget path representing all the widget hierarchy
 * from the toplevel down to and including `child`.
 * @param child a child of @container
 * @returns A newly created #GtkWidgetPath
 */
get_path_for_child(child: Gtk.Widget): Gtk.WidgetPath
/**
 * Returns the resize mode for the container. See
 * gtk_container_set_resize_mode ().
 * @returns the current resize mode
 */
get_resize_mode(): Gtk.ResizeMode
/**
 * When a container receives a call to the draw function, it must send
 * synthetic #GtkWidget::draw calls to all children that don’t have their
 * own #GdkWindows. This function provides a convenient way of doing this.
 * A container, when it receives a call to its #GtkWidget::draw function,
 * calls gtk_container_propagate_draw() once for each child, passing in
 * the `cr` the container received.
 * 
 * gtk_container_propagate_draw() takes care of translating the origin of `cr,`
 * and deciding whether the draw needs to be sent to the child. It is a
 * convenient and optimized way of getting the same effect as calling
 * gtk_widget_draw() on the child directly.
 * 
 * In most cases, a container can simply either inherit the
 * #GtkWidget::draw implementation from #GtkContainer, or do some drawing
 * and then chain to the ::draw implementation from #GtkContainer.
 * @param child a child of @container
 * @param cr Cairo context as passed to the container. If you want to use @cr   in container’s draw function, consider using cairo_save() and   cairo_restore() before calling this function.
 */
propagate_draw(child: Gtk.Widget, cr: cairo.Context): void
/**
 * Removes `widget` from `container`. `widget` must be inside `container`.
 * Note that `container` will own a reference to `widget,` and that this
 * may be the last reference held; so removing a widget from its
 * container can destroy that widget. If you want to use `widget`
 * again, you need to add a reference to it before removing it from
 * a container, using g_object_ref(). If you don’t want to use `widget`
 * again it’s usually more efficient to simply destroy it directly
 * using gtk_widget_destroy() since this will remove it from the
 * container and help break any circular reference count cycles.
 * @param widget a current child of @container
 */
remove(widget: Gtk.Widget): void
resize_children(): void
/**
 * Sets the border width of the container.
 * 
 * The border width of a container is the amount of space to leave
 * around the outside of the container. The only exception to this is
 * #GtkWindow; because toplevel windows can’t leave space outside,
 * they leave the space inside. The border is added on all sides of
 * the container. To add space to only one side, use a specific
 * #GtkWidget:margin property on the child widget, for example
 * #GtkWidget:margin-top.
 * @param border_width amount of blank space to leave outside   the container. Valid values are in the range 0-65535 pixels.
 */
set_border_width(border_width: number): void
/**
 * Sets a focus chain, overriding the one computed automatically by GTK+.
 * 
 * In principle each widget in the chain should be a descendant of the
 * container, but this is not enforced by this method, since it’s allowed
 * to set the focus chain before you pack the widgets, or have a widget
 * in the chain that isn’t always packed. The necessary checks are done
 * when the focus chain is actually traversed.
 * @param focusable_widgets the new focus chain
 */
set_focus_chain(focusable_widgets: Gtk.Widget[]): void
/**
 * Sets, or unsets if `child` is %NULL, the focused child of `container`.
 * 
 * This function emits the GtkContainer::set_focus_child signal of
 * `container`. Implementations of #GtkContainer can override the
 * default behaviour by overriding the class closure of this signal.
 * 
 * This is function is mostly meant to be used by widgets. Applications can use
 * gtk_widget_grab_focus() to manually set the focus to a specific widget.
 * @param child a #GtkWidget, or %NULL
 */
set_focus_child(child?: (Gtk.Widget | null)): void
/**
 * Hooks up an adjustment to focus handling in a container, so when a child
 * of the container is focused, the adjustment is scrolled to show that
 * widget. This function sets the horizontal alignment.
 * See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining
 * the adjustment and gtk_container_set_focus_vadjustment() for setting
 * the vertical adjustment.
 * 
 * The adjustments have to be in pixel units and in the same coordinate
 * system as the allocation for immediate children of the container.
 * @param adjustment an adjustment which should be adjusted when the focus is   moved among the descendents of @container
 */
set_focus_hadjustment(adjustment: Gtk.Adjustment): void
/**
 * Hooks up an adjustment to focus handling in a container, so when a
 * child of the container is focused, the adjustment is scrolled to
 * show that widget. This function sets the vertical alignment. See
 * gtk_scrolled_window_get_vadjustment() for a typical way of obtaining
 * the adjustment and gtk_container_set_focus_hadjustment() for setting
 * the horizontal adjustment.
 * 
 * The adjustments have to be in pixel units and in the same coordinate
 * system as the allocation for immediate children of the container.
 * @param adjustment an adjustment which should be adjusted when the focus   is moved among the descendents of @container
 */
set_focus_vadjustment(adjustment: Gtk.Adjustment): void
/**
 * Sets the `reallocate_redraws` flag of the container to the given value.
 * 
 * Containers requesting reallocation redraws get automatically
 * redrawn if any of their children changed allocation.
 * @param needs_redraws the new value for the container’s @reallocate_redraws flag
 */
set_reallocate_redraws(needs_redraws: boolean): void
/**
 * Sets the resize mode for the container.
 * 
 * The resize mode of a container determines whether a resize request
 * will be passed to the container’s parent, queued for later execution
 * or executed immediately.
 * @param resize_mode the new resize mode
 */
set_resize_mode(resize_mode: Gtk.ResizeMode): void
/**
 * Removes a focus chain explicitly set with gtk_container_set_focus_chain().
 */
unset_focus_chain(): void
/**
 * Adds `widget` to `container`. Typically used for simple containers
 * such as #GtkWindow, #GtkFrame, or #GtkButton; for more complicated
 * layout containers such as #GtkBox or #GtkGrid, this function will
 * pick default packing parameters that may not be correct.  So
 * consider functions such as gtk_box_pack_start() and
 * gtk_grid_attach() as an alternative to gtk_container_add() in
 * those cases. A widget may be added to only one container at a time;
 * you can’t place the same widget inside two different containers.
 * 
 * Note that some containers, such as #GtkScrolledWindow or #GtkListBox,
 * may add intermediate children between the added widget and the
 * container.
 * @param widget a widget to be placed inside @container
 */
vfunc_add(widget: Gtk.Widget): void
vfunc_check_resize(): void
/**
 * Returns the type of the children supported by the container.
 * 
 * Note that this may return %G_TYPE_NONE to indicate that no more
 * children can be added, e.g. for a #GtkPaned which already has two
 * children.
 */
vfunc_child_type(): GObject.GType
vfunc_composite_name(child: Gtk.Widget): string
/**
 * Invokes `callback` on each direct child of `container,` including
 * children that are considered “internal” (implementation details
 * of the container). “Internal” children generally weren’t added
 * by the user of the container, but were added by the container
 * implementation itself.
 * 
 * Most applications should use gtk_container_foreach(), rather
 * than gtk_container_forall().
 * @param include_internals 
 * @param callback a callback
 */
vfunc_forall(include_internals: boolean, callback: Gtk.Callback): void
vfunc_get_child_property(child: Gtk.Widget, property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Returns a newly created widget path representing all the widget hierarchy
 * from the toplevel down to and including `child`.
 * @param child a child of @container
 */
vfunc_get_path_for_child(child: Gtk.Widget): Gtk.WidgetPath
/**
 * Removes `widget` from `container`. `widget` must be inside `container`.
 * Note that `container` will own a reference to `widget,` and that this
 * may be the last reference held; so removing a widget from its
 * container can destroy that widget. If you want to use `widget`
 * again, you need to add a reference to it before removing it from
 * a container, using g_object_ref(). If you don’t want to use `widget`
 * again it’s usually more efficient to simply destroy it directly
 * using gtk_widget_destroy() since this will remove it from the
 * container and help break any circular reference count cycles.
 * @param widget a current child of @container
 */
vfunc_remove(widget: Gtk.Widget): void
vfunc_set_child_property(child: Gtk.Widget, property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Sets, or unsets if `child` is %NULL, the focused child of `container`.
 * 
 * This function emits the GtkContainer::set_focus_child signal of
 * `container`. Implementations of #GtkContainer can override the
 * default behaviour by overriding the class closure of this signal.
 * 
 * This is function is mostly meant to be used by widgets. Applications can use
 * gtk_widget_grab_focus() to manually set the focus to a specific widget.
 * @param child a #GtkWidget, or %NULL
 */
vfunc_set_focus_child(child?: (Gtk.Widget | null)): void
/**
 * For widgets that can be “activated” (buttons, menu items, etc.)
 * this function activates them. Activation is what happens when you
 * press Enter on a widget during key navigation. If `widget` isn't
 * activatable, the function returns %FALSE.
 * @returns %TRUE if the widget was activatable
 */
activate(): boolean
/**
 * Installs an accelerator for this `widget` in `accel_group` that causes
 * `accel_signal` to be emitted if the accelerator is activated.
 * The `accel_group` needs to be added to the widget’s toplevel via
 * gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
 * Accelerators added through this function are not user changeable during
 * runtime. If you want to support accelerators that can be changed by the
 * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
 * gtk_menu_item_set_accel_path() instead.
 * @param accel_signal widget signal to emit on accelerator activation
 * @param accel_group accel group for this widget, added to its toplevel
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @param accel_flags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
 */
add_accelerator(accel_signal: string, accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): void
/**
 * Adds the device events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_device_events() for details.
 * @param device a #GdkDevice
 * @param events an event mask, see #GdkEventMask
 */
add_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Adds the events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_events() and the
 * [input handling overview][event-masks] for details.
 * @param events an event mask, see #GdkEventMask
 */
add_events(events: number): void
/**
 * Adds a widget to the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
 * list of mnemonic labels for the widget is cleared when the
 * widget is destroyed, so the caller must make sure to update
 * its internal state at this point as well, by using a connection
 * to the #GtkWidget::destroy signal or a weak notifier.
 * @param label a #GtkWidget that acts as a mnemonic label for @widget
 */
add_mnemonic_label(label: Gtk.Widget): void
/**
 * Queues an animation frame update and adds a callback to be called
 * before each frame. Until the tick callback is removed, it will be
 * called frequently (usually at the frame rate of the output device
 * or as quickly as the application can be repainted, whichever is
 * slower). For this reason, is most suitable for handling graphics
 * that change every frame or every few frames. The tick callback does
 * not automatically imply a relayout or repaint. If you want a
 * repaint or relayout, and aren’t changing widget properties that
 * would trigger that (for example, changing the text of a #GtkLabel),
 * then you will have to call gtk_widget_queue_resize() or
 * gtk_widget_queue_draw_area() yourself.
 * 
 * gdk_frame_clock_get_frame_time() should generally be used for timing
 * continuous animations and
 * gdk_frame_timings_get_predicted_presentation_time() if you are
 * trying to display isolated frames at particular times.
 * 
 * This is a more convenient alternative to connecting directly to the
 * #GdkFrameClock::update signal of #GdkFrameClock, since you don't
 * have to worry about when a #GdkFrameClock is assigned to a widget.
 * @param callback function to call for updating animations
 * @returns an id for the connection of this callback. Remove the callback     by passing it to gtk_widget_remove_tick_callback()
 */
add_tick_callback(callback: Gtk.TickCallback): number
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 * @returns %TRUE if the accelerator can be activated.
 */
can_activate_accel(signal_id: number): boolean
/**
 * This function is used by custom widget implementations; if you're
 * writing an app, you’d use gtk_widget_grab_focus() to move the focus
 * to a particular widget, and gtk_container_set_focus_chain() to
 * change the focus tab order. So you may want to investigate those
 * functions instead.
 * 
 * gtk_widget_child_focus() is called by containers as the user moves
 * around the window using keyboard shortcuts. `direction` indicates
 * what kind of motion is taking place (up, down, left, right, tab
 * forward, tab backward). gtk_widget_child_focus() emits the
 * #GtkWidget::focus signal; widgets override the default handler
 * for this signal in order to implement appropriate focus behavior.
 * 
 * The default ::focus handler for a widget should return %TRUE if
 * moving in `direction` left the focus on a focusable location inside
 * that widget, and %FALSE if moving in `direction` moved the focus
 * outside the widget. If returning %TRUE, widgets normally
 * call gtk_widget_grab_focus() to place the focus accordingly;
 * if returning %FALSE, they don’t modify the current focus location.
 * @param direction direction of focus movement
 * @returns %TRUE if focus ended up inside @widget
 */
child_focus(direction: Gtk.DirectionType): boolean
/**
 * Same as gtk_widget_path(), but always uses the name of a widget’s type,
 * never uses a custom name set with gtk_widget_set_name().
 */
class_path(): [number, string, string]
/**
 * Computes whether a container should give this widget extra space
 * when possible. Containers should check this, rather than
 * looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
 * 
 * This function already checks whether the widget is visible, so
 * visibility does not need to be checked separately. Non-visible
 * widgets are not expanded.
 * 
 * The computed expand value uses either the expand setting explicitly
 * set on the widget itself, or, if none has been explicitly set,
 * the widget may expand if some of its children do.
 * @param orientation expand direction
 * @returns whether widget tree rooted here should be expanded
 */
compute_expand(orientation: Gtk.Orientation): boolean
/**
 * Creates a new #PangoContext with the appropriate font map,
 * font options, font description, and base direction for drawing
 * text for this widget. See also gtk_widget_get_pango_context().
 * @returns the new #PangoContext
 */
create_pango_context(): Pango.Context
/**
 * Creates a new #PangoLayout with the appropriate font map,
 * font description, and base direction for drawing text for
 * this widget.
 * 
 * If you keep a #PangoLayout created in this way around, you need
 * to re-create it when the widget #PangoContext is replaced.
 * This can be tracked by using the #GtkWidget::screen-changed signal
 * on the widget.
 * @param text text to set on the layout (can be %NULL)
 * @returns the new #PangoLayout
 */
create_pango_layout(text?: (string | null)): Pango.Layout
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
destroy(): void
/**
 * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
 * %NULL.  It’s intended to be used as a callback connected to the
 * “destroy” signal of a widget. You connect gtk_widget_destroyed()
 * as a signal handler, and pass the address of your widget variable
 * as user data. Then when the widget is destroyed, the variable will
 * be set to %NULL. Useful for example to avoid multiple copies
 * of the same dialog.
 * @param widget_pointer address of a variable that contains @widget
 */
destroyed(widget_pointer: Gtk.Widget): Gtk.Widget
/**
 * Returns %TRUE if `device` has been shadowed by a GTK+
 * device grab on another widget, so it would stop sending
 * events to `widget`. This may be used in the
 * #GtkWidget::grab-notify signal to check for specific
 * devices. See gtk_device_grab_add().
 * @param device a #GdkDevice
 * @returns %TRUE if there is an ongoing grab on @device          by another #GtkWidget than @widget.
 */
device_is_shadowed(device: Gdk.Device): boolean
/**
 * This function is equivalent to gtk_drag_begin_with_coordinates(),
 * passing -1, -1 as coordinates.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @returns the context for this drag
 */
drag_begin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: (Gdk.Event | null)): Gdk.DragContext
/**
 * Initiates a drag on the source side. The function only needs to be used
 * when the application is starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is %NULL, then %GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used to get information about the drag.
 * 
 * Generally there are three cases when you want to start a drag by hand by
 * calling this function:
 * 
 * 1. During a #GtkWidget::button-press-event handler, if you want to start a drag
 * immediately when the user presses the mouse button.  Pass the `event`
 * that you have in your #GtkWidget::button-press-event handler.
 * 
 * 2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
 * when the mouse moves past a certain threshold distance after a button-press.
 * Pass the `event` that you have in your #GtkWidget::motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).
 * If you really cannot pass a real event, pass %NULL instead.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @param x The initial x coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @param y The initial y coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @returns the context for this drag
 */
drag_begin_with_coordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: (Gdk.Event | null), x: number, y: number): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param start_x X coordinate of start of drag
 * @param start_y Y coordinate of start of drag
 * @param current_x current X coordinate
 * @param current_y current Y coordinate
 * @returns %TRUE if the drag threshold has been passed.
 */
drag_check_threshold(start_x: number, start_y: number, current_x: number, current_y: number): boolean
/**
 * Add the image targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_uri_targets(): void
/**
 * Looks for a match between the supported targets of `context` and the
 * `dest_target_list,` returning the first matching target, otherwise
 * returning %GDK_NONE. `dest_target_list` should usually be the return
 * value from gtk_drag_dest_get_target_list(), but some widgets may
 * have different valid targets for different parts of the widget; in
 * that case, they will have to implement a drag_motion handler that
 * passes the correct target list to this function.
 * @param context drag context
 * @param target_list list of droppable targets, or %NULL to use    gtk_drag_dest_get_target_list (@widget).
 * @returns first target that the source offers     and the dest can accept, or %GDK_NONE
 */
drag_dest_find_target(context: Gdk.DragContext, target_list?: (Gtk.TargetList | null)): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_dest_get_target_list(): (Gtk.TargetList | null)
/**
 * Returns whether the widget has been configured to always
 * emit #GtkWidget::drag-motion signals.
 * @returns %TRUE if the widget always emits   #GtkWidget::drag-motion events
 */
drag_dest_get_track_motion(): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget’s drag-and-drop signals
 * (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget’s #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget::drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget::drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There’s no way to set a default action here, you can use the
 * #GtkWidget::drag-motion callback for that. Here’s an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * 
 * ```c
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of     #GtkTargetEntrys indicating the drop types that this @widget will     accept, or %NULL. Later you can access the list with     gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this @widget.
 */
drag_dest_set(flags: Gtk.DestDefaults, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets this widget as a proxy for drops to another window.
 * @param proxy_window the window to which to forward drag events
 * @param protocol the drag protocol which the @proxy_window accepts   (You can use gdk_drag_get_protocol() to determine this)
 * @param use_coordinates If %TRUE, send the same coordinates to the   destination, because it is an embedded   subwindow.
 */
drag_dest_set_proxy(proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param target_list list of droppable targets, or %NULL for none
 */
drag_dest_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Tells the widget to emit #GtkWidget::drag-motion and
 * #GtkWidget::drag-leave events regardless of the targets and the
 * %GTK_DEST_DEFAULT_MOTION flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param track_motion whether to accept all targets
 */
drag_dest_set_track_motion(track_motion: boolean): void
/**
 * Clears information about a drop destination set with
 * gtk_drag_dest_set(). The widget will no longer receive
 * notification of drags.
 */
drag_dest_unset(): void
/**
 * Gets the data associated with a drag. When the data
 * is received or the retrieval fails, GTK+ will emit a
 * #GtkWidget::drag-data-received signal. Failure of the retrieval
 * is indicated by the length field of the `selection_data`
 * signal parameter being negative. However, when gtk_drag_get_data()
 * is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
 * then the widget will not receive notification of failed
 * drops.
 * @param context the drag context
 * @param target the target (form of the data) to retrieve
 * @param time_ a timestamp for retrieving the data. This will   generally be the time received in a #GtkWidget::drag-motion   or #GtkWidget::drag-drop signal
 */
drag_get_data(context: Gdk.DragContext, target: Gdk.Atom, time_: number): void
/**
 * Highlights a widget as a currently hovered drop target.
 * To end the highlight, call gtk_drag_unhighlight().
 * GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
 */
drag_highlight(): void
/**
 * Add the writable image targets supported by #GtkSelectionData to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_uri_targets(): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_source_get_target_list(): (Gtk.TargetList | null)
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param start_button_mask the bitmask of buttons that can start the drag
 * @param targets the table of targets     that the drag will support, may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
drag_source_set(start_button_mask: Gdk.ModifierType, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to `icon`. See the docs for #GtkIconTheme for more details.
 * @param icon A #GIcon
 */
drag_source_set_icon_gicon(icon: Gio.Icon): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param icon_name name of icon to use
 */
drag_source_set_icon_name(icon_name: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
drag_source_set_icon_pixbuf(pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param stock_id the ID of the stock icon to use
 */
drag_source_set_icon_stock(stock_id: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param target_list list of draggable targets, or %NULL for none
 */
drag_source_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Undoes the effects of gtk_drag_source_set().
 */
drag_source_unset(): void
/**
 * Removes a highlight set by gtk_drag_highlight() from
 * a widget.
 */
drag_unhighlight(): void
/**
 * Draws `widget` to `cr`. The top left corner of the widget will be
 * drawn to the currently set origin point of `cr`.
 * 
 * You should pass a cairo context as `cr` argument that is in an
 * original state. Otherwise the resulting drawing is undefined. For
 * example changing the operator using cairo_set_operator() or the
 * line width using cairo_set_line_width() might have unwanted side
 * effects.
 * You may however change the context’s transform matrix - like with
 * cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
 * region with cairo_clip() prior to calling this function. Also, it
 * is fine to modify the context with cairo_save() and
 * cairo_push_group() prior to calling this function.
 * 
 * Note that special-purpose widgets may contain special code for
 * rendering to the screen and might appear differently on screen
 * and when rendered using gtk_widget_draw().
 * @param cr a cairo context to draw to
 */
draw(cr: cairo.Context): void
/**
 * Ensures that `widget` has a style (`widget->`style).
 * 
 * Not a very useful function; most of the time, if you
 * want the style, the widget is realized, and realized
 * widgets are guaranteed to have a style already.
 */
ensure_style(): void
/**
 * Notifies the user about an input-related error on this widget.
 * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
 * gdk_window_beep(), otherwise it does nothing.
 * 
 * Note that the effect of gdk_window_beep() can be configured in many
 * ways, depending on the windowing backend and the desktop environment
 * or window manager that is used.
 */
error_bell(): void
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 * @returns return from the event signal emission (%TRUE if               the event was handled)
 */
event(event: Gdk.Event): boolean
/**
 * Stops emission of #GtkWidget::child-notify signals on `widget`. The
 * signals are queued until gtk_widget_thaw_child_notify() is called
 * on `widget`.
 * 
 * This is the analogue of g_object_freeze_notify() for child properties.
 */
freeze_child_notify(): void
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 * @returns the #AtkObject associated with @widget
 */
get_accessible(): Atk.Object
/**
 * Retrieves the #GActionGroup that was registered using `prefix`. The resulting
 * #GActionGroup may have been registered to `widget` or any #GtkWidget in its
 * ancestry.
 * 
 * If no action group was found matching `prefix,` then %NULL is returned.
 * @param prefix The “prefix” of the action group.
 * @returns A #GActionGroup or %NULL.
 */
get_action_group(prefix: string): (Gio.ActionGroup | null)
/**
 * Returns the baseline that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function, and when allocating child
 * widgets in #GtkWidget::size_allocate.
 * @returns the baseline of the @widget, or -1 if none
 */
get_allocated_baseline(): number
/**
 * Returns the height that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the height of the @widget
 */
get_allocated_height(): number
/**
 * Retrieves the widget’s allocated size.
 * 
 * This function returns the last values passed to
 * gtk_widget_size_allocate_with_baseline(). The value differs from
 * the size returned in gtk_widget_get_allocation() in that functions
 * like gtk_widget_set_halign() can adjust the allocation, but not
 * the value returned by this function.
 * 
 * If a widget is not visible, its allocated size is 0.
 */
get_allocated_size(): [Gtk.Allocation, number]
/**
 * Returns the width that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the width of the @widget
 */
get_allocated_width(): number
/**
 * Retrieves the widget’s allocation.
 * 
 * Note, when implementing a #GtkContainer: a widget’s allocation will
 * be its “adjusted” allocation, that is, the widget’s parent
 * container typically calls gtk_widget_size_allocate() with an
 * allocation, and that allocation is then adjusted (to handle margin
 * and alignment for example) before assignment to the widget.
 * gtk_widget_get_allocation() returns the adjusted allocation that
 * was actually assigned to the widget. The adjusted allocation is
 * guaranteed to be completely contained within the
 * gtk_widget_size_allocate() allocation, however. So a #GtkContainer
 * is guaranteed that its children stay inside the assigned bounds,
 * but not that they have exactly the bounds the container assigned.
 * There is no way to get the original allocation assigned by
 * gtk_widget_size_allocate(), since it isn’t stored; if a container
 * implementation needs that information it will have to track it itself.
 */
get_allocation(): Gtk.Allocation
/**
 * Gets the first ancestor of `widget` with type `widget_type`. For example,
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
 * the first #GtkBox that’s an ancestor of `widget`. No reference will be
 * added to the returned widget; it should not be unreferenced. See note
 * about checking for a toplevel #GtkWindow in the docs for
 * gtk_widget_get_toplevel().
 * 
 * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
 * considers `widget` to be an ancestor of itself.
 * @param widget_type ancestor type
 * @returns the ancestor widget, or %NULL if not found
 */
get_ancestor(widget_type: GObject.GType): (Gtk.Widget | null)
/**
 * Determines whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * See gtk_widget_set_app_paintable()
 * @returns %TRUE if the widget is app paintable
 */
get_app_paintable(): boolean
/**
 * Determines whether `widget` can be a default widget. See
 * gtk_widget_set_can_default().
 * @returns %TRUE if @widget can be a default widget, %FALSE otherwise
 */
get_can_default(): boolean
/**
 * Determines whether `widget` can own the input focus. See
 * gtk_widget_set_can_focus().
 * @returns %TRUE if @widget can own the input focus, %FALSE otherwise
 */
get_can_focus(): boolean
/**
 * This function is only for use in widget implementations. Obtains
 * `widget->`requisition, unless someone has forced a particular
 * geometry on the widget (e.g. with gtk_widget_set_size_request()),
 * in which case it returns that geometry instead of the widget's
 * requisition.
 * 
 * This function differs from gtk_widget_size_request() in that
 * it retrieves the last size request value from `widget->`requisition,
 * while gtk_widget_size_request() actually calls the "size_request" method
 * on `widget` to compute the size request and fill in `widget->`requisition,
 * and only then returns `widget->`requisition.
 * 
 * Because this function does not call the “size_request” method, it
 * can only be used when you know that `widget->`requisition is
 * up-to-date, that is, gtk_widget_size_request() has been called
 * since the last time a resize was queued. In general, only container
 * implementations have this information; applications should use
 * gtk_widget_size_request().
 */
get_child_requisition(): Gtk.Requisition
/**
 * Retrieves the widget’s clip area.
 * 
 * The clip area is the area in which all of `widget'`s drawing will
 * happen. Other toolkits call it the bounding box.
 * 
 * Historically, in GTK+ the clip area has been equal to the allocation
 * retrieved via gtk_widget_get_allocation().
 */
get_clip(): Gtk.Allocation
/**
 * Returns the clipboard object for the given selection to
 * be used with `widget`. `widget` must have a #GdkDisplay
 * associated with it, so must be attached to a toplevel
 * window.
 * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
 * @returns the appropriate clipboard object. If no             clipboard already exists, a new one will             be created. Once a clipboard object has             been created, it is persistent for all time.
 */
get_clipboard(selection: Gdk.Atom): Gtk.Clipboard
/**
 * Obtains the composite name of a widget.
 * @returns the composite name of @widget, or %NULL if @widget is not   a composite child. The string should be freed when it is no   longer needed.
 */
get_composite_name(): string
/**
 * Returns whether `device` can interact with `widget` and its
 * children. See gtk_widget_set_device_enabled().
 * @param device a #GdkDevice
 * @returns %TRUE is @device is enabled for @widget
 */
get_device_enabled(device: Gdk.Device): boolean
/**
 * Returns the events mask for the widget corresponding to an specific device. These
 * are the events that the widget will receive when `device` operates on it.
 * @param device a #GdkDevice
 * @returns device event mask for @widget
 */
get_device_events(device: Gdk.Device): Gdk.EventMask
/**
 * Gets the reading direction for a particular widget. See
 * gtk_widget_set_direction().
 * @returns the reading direction for the widget.
 */
get_direction(): Gtk.TextDirection
/**
 * Get the #GdkDisplay for the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow at the top.
 * 
 * In general, you should only create display specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkDisplay for the toplevel for this widget.
 */
get_display(): Gdk.Display
/**
 * Determines whether the widget is double buffered.
 * 
 * See gtk_widget_set_double_buffered()
 * @returns %TRUE if the widget is double buffered
 */
get_double_buffered(): boolean
/**
 * Returns the event mask (see #GdkEventMask) for the widget. These are the
 * events that the widget will receive.
 * 
 * Note: Internally, the widget event mask will be the logical OR of the event
 * mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
 * event mask necessary to cater for every #GtkEventController created for the
 * widget.
 * @returns event mask for @widget
 */
get_events(): number
/**
 * Returns whether the widget should grab focus when it is clicked with the mouse.
 * See gtk_widget_set_focus_on_click().
 * @returns %TRUE if the widget should grab focus when it is clicked with               the mouse.
 */
get_focus_on_click(): boolean
/**
 * Gets the font map that has been set with gtk_widget_set_font_map().
 * @returns A #PangoFontMap, or %NULL
 */
get_font_map(): (Pango.FontMap | null)
/**
 * Returns the #cairo_font_options_t used for Pango rendering. When not set,
 * the defaults font options for the #GdkScreen will be used.
 * @returns the #cairo_font_options_t or %NULL if not set
 */
get_font_options(): (cairo.FontOptions | null)
/**
 * Obtains the frame clock for a widget. The frame clock is a global
 * “ticker” that can be used to drive animations and repaints.  The
 * most common reason to get the frame clock is to call
 * gdk_frame_clock_get_frame_time(), in order to get a time to use for
 * animating. For example you might record the start of the animation
 * with an initial value from gdk_frame_clock_get_frame_time(), and
 * then update the animation by calling
 * gdk_frame_clock_get_frame_time() again during each repaint.
 * 
 * gdk_frame_clock_request_phase() will result in a new frame on the
 * clock, but won’t necessarily repaint any widgets. To repaint a
 * widget, you have to use gtk_widget_queue_draw() which invalidates
 * the widget (thus scheduling it to receive a draw on the next
 * frame). gtk_widget_queue_draw() will also end up requesting a frame
 * on the appropriate frame clock.
 * 
 * A widget’s frame clock will not change while the widget is
 * mapped. Reparenting a widget (which implies a temporary unmap) can
 * change the widget’s frame clock.
 * 
 * Unrealized widgets do not have a frame clock.
 * @returns a #GdkFrameClock, or %NULL if widget is unrealized
 */
get_frame_clock(): (Gdk.FrameClock | null)
/**
 * Gets the value of the #GtkWidget:halign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
 * alignment.
 * @returns the horizontal alignment of @widget
 */
get_halign(): Gtk.Align
/**
 * Returns the current value of the has-tooltip property.  See
 * #GtkWidget:has-tooltip for more information.
 * @returns current value of has-tooltip on @widget.
 */
get_has_tooltip(): boolean
/**
 * Determines whether `widget` has a #GdkWindow of its own. See
 * gtk_widget_set_has_window().
 * @returns %TRUE if @widget has a window, %FALSE otherwise
 */
get_has_window(): boolean
/**
 * Gets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Containers should use gtk_widget_compute_expand() rather than
 * this function, to see whether a widget, or any of its children,
 * has the expand flag set. If any child of a widget wants to
 * expand, the parent may ask to expand also.
 * 
 * This function only looks at the widget’s own hexpand flag, rather
 * than computing whether the entire widget tree rooted at this widget
 * wants to expand.
 * @returns whether hexpand flag is set
 */
get_hexpand(): boolean
/**
 * Gets whether gtk_widget_set_hexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @returns whether hexpand has been explicitly set
 */
get_hexpand_set(): boolean
/**
 * Whether the widget is mapped.
 * @returns %TRUE if the widget is mapped, %FALSE otherwise.
 */
get_mapped(): boolean
/**
 * Gets the value of the #GtkWidget:margin-bottom property.
 * @returns The bottom margin of @widget
 */
get_margin_bottom(): number
/**
 * Gets the value of the #GtkWidget:margin-end property.
 * @returns The end margin of @widget
 */
get_margin_end(): number
/**
 * Gets the value of the #GtkWidget:margin-left property.
 * @returns The left margin of @widget
 */
get_margin_left(): number
/**
 * Gets the value of the #GtkWidget:margin-right property.
 * @returns The right margin of @widget
 */
get_margin_right(): number
/**
 * Gets the value of the #GtkWidget:margin-start property.
 * @returns The start margin of @widget
 */
get_margin_start(): number
/**
 * Gets the value of the #GtkWidget:margin-top property.
 * @returns The top margin of @widget
 */
get_margin_top(): number
/**
 * Returns the modifier mask the `widget’`s windowing system backend
 * uses for a particular purpose.
 * 
 * See gdk_keymap_get_modifier_mask().
 * @param intent the use case for the modifier mask
 * @returns the modifier mask used for @intent.
 */
get_modifier_mask(intent: Gdk.ModifierIntent): Gdk.ModifierType
/**
 * Returns the current modifier style for the widget. (As set by
 * gtk_widget_modify_style().) If no style has previously set, a new
 * #GtkRcStyle will be created with all values unset, and set as the
 * modifier style for the widget. If you make changes to this rc
 * style, you must call gtk_widget_modify_style(), passing in the
 * returned rc style, to make sure that your changes take effect.
 * 
 * Caution: passing the style back to gtk_widget_modify_style() will
 * normally end up destroying it, because gtk_widget_modify_style() copies
 * the passed-in style and sets the copy as the new modifier style,
 * thus dropping any reference to the old modifier style. Add a reference
 * to the modifier style if you want to keep it alive.
 * @returns the modifier style for the widget.     This rc style is owned by the widget. If you want to keep a     pointer to value this around, you must add a refcount using     g_object_ref().
 */
get_modifier_style(): Gtk.RcStyle
/**
 * Retrieves the name of a widget. See gtk_widget_set_name() for the
 * significance of widget names.
 * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
 */
get_name(): string
/**
 * Returns the current value of the #GtkWidget:no-show-all property,
 * which determines whether calls to gtk_widget_show_all()
 * will affect this widget.
 * @returns the current value of the “no-show-all” property.
 */
get_no_show_all(): boolean
/**
 * Fetches the requested opacity for this widget.
 * See gtk_widget_set_opacity().
 * @returns the requested opacity for this widget.
 */
get_opacity(): number
/**
 * Gets a #PangoContext with the appropriate font map, font description,
 * and base direction for this widget. Unlike the context returned
 * by gtk_widget_create_pango_context(), this context is owned by
 * the widget (it can be used until the screen for the widget changes
 * or the widget is removed from its toplevel), and will be updated to
 * match any changes to the widget’s attributes. This can be tracked
 * by using the #GtkWidget::screen-changed signal on the widget.
 * @returns the #PangoContext for the widget.
 */
get_pango_context(): Pango.Context
/**
 * Gets `widget’`s parent window, or %NULL if it does not have one.
 * @returns the parent window of @widget, or %NULL if it does not have a parent window.
 */
get_parent_window(): (Gdk.Window | null)
/**
 * Returns the #GtkWidgetPath representing `widget,` if the widget
 * is not connected to a toplevel widget, a partial path will be
 * created.
 * @returns The #GtkWidgetPath representing @widget
 */
get_path(): Gtk.WidgetPath
/**
 * Obtains the location of the mouse pointer in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(); and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 */
get_pointer(): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves the minimum and natural size of a widget, taking
 * into account the widget’s preference for height-for-width management.
 * 
 * This is used to retrieve a suitable size by container widgets which do
 * not impose any restrictions on the child placement. It can be used
 * to deduce toplevel window and menu sizes as well as child widgets in
 * free-form containers such as GtkLayout.
 * 
 * Handle with care. Note that the natural height of a height-for-width
 * widget will generally be a smaller size than the minimum height, since the required
 * height for the natural width is generally smaller than the required height for
 * the minimum width.
 * 
 * Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
 * baseline alignment.
 */
get_preferred_size(): [Gtk.Requisition | null, Gtk.Requisition | null]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
get_preferred_width_for_height(height: number): [number, number]
/**
 * Determines whether `widget` is realized.
 * @returns %TRUE if @widget is realized, %FALSE otherwise
 */
get_realized(): boolean
/**
 * Determines whether `widget` is always treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_set_receives_default().
 * @returns %TRUE if @widget acts as the default widget when focused,               %FALSE otherwise
 */
get_receives_default(): boolean
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 * @returns The #GtkSizeRequestMode preferred by @widget.
 */
get_request_mode(): Gtk.SizeRequestMode
/**
 * Retrieves the widget’s requisition.
 * 
 * This function should only be used by widget implementations in
 * order to figure whether the widget’s requisition has actually
 * changed after some internal state change (so that they can call
 * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
 * 
 * Normally, gtk_widget_size_request() should be used.
 */
get_requisition(): Gtk.Requisition
/**
 * Get the root window where this widget is located. This function can
 * only be called after the widget has been added to a widget
 * hierarchy with #GtkWindow at the top.
 * 
 * The root window is useful for such purposes as creating a popup
 * #GdkWindow associated with the window. In general, you should only
 * create display specific resources when a widget has been realized,
 * and you should free those resources when the widget is unrealized.
 * @returns the #GdkWindow root window for the toplevel for this widget.
 */
get_root_window(): Gdk.Window
/**
 * Retrieves the internal scale factor that maps from window coordinates
 * to the actual device pixels. On traditional systems this is 1, on
 * high density outputs, it can be a higher value (typically 2).
 * 
 * See gdk_window_get_scale_factor().
 * @returns the scale factor for @widget
 */
get_scale_factor(): number
/**
 * Get the #GdkScreen from the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow
 * at the top.
 * 
 * In general, you should only create screen specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkScreen for the toplevel for this widget.
 */
get_screen(): Gdk.Screen
/**
 * Returns the widget’s sensitivity (in the sense of returning
 * the value that has been set using gtk_widget_set_sensitive()).
 * 
 * The effective sensitivity of a widget is however determined by both its
 * own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
 * @returns %TRUE if the widget is sensitive
 */
get_sensitive(): boolean
/**
 * Gets the settings object holding the settings used for this widget.
 * 
 * Note that this function can only be called when the #GtkWidget
 * is attached to a toplevel, since the settings object is specific
 * to a particular #GdkScreen.
 * @returns the relevant #GtkSettings object
 */
get_settings(): Gtk.Settings
/**
 * Gets the size request that was explicitly set for the widget using
 * gtk_widget_set_size_request(). A value of -1 stored in `width` or
 * `height` indicates that that dimension has not been set explicitly
 * and the natural requisition of the widget will be used instead. See
 * gtk_widget_set_size_request(). To get the size a widget will
 * actually request, call gtk_widget_get_preferred_size() instead of
 * this function.
 */
get_size_request(): [number, number]
/**
 * Returns the widget’s state. See gtk_widget_set_state().
 * @returns the state of @widget.
 */
get_state(): Gtk.StateType
/**
 * Returns the widget state as a flag set. It is worth mentioning
 * that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
 * returned, that is, also based on parent insensitivity, even if
 * `widget` itself is sensitive.
 * 
 * Also note that if you are looking for a way to obtain the
 * #GtkStateFlags to pass to a #GtkStyleContext method, you
 * should look at gtk_style_context_get_state().
 * @returns The state flags for widget
 */
get_state_flags(): Gtk.StateFlags
/**
 * Simply an accessor function that returns `widget->`style.
 * @returns the widget’s #GtkStyle
 */
get_style(): Gtk.Style
/**
 * Returns the style context associated to `widget`. The returned object is
 * guaranteed to be the same for the lifetime of `widget`.
 * @returns a #GtkStyleContext. This memory is owned by @widget and          must not be freed.
 */
get_style_context(): Gtk.StyleContext
/**
 * Returns %TRUE if `widget` is multiple pointer aware. See
 * gtk_widget_set_support_multidevice() for more information.
 * @returns %TRUE if @widget is multidevice aware.
 */
get_support_multidevice(): boolean
/**
 * Fetch an object build from the template XML for `widget_type` in this `widget` instance.
 * 
 * This will only report children which were previously declared with
 * gtk_widget_class_bind_template_child_full() or one of its
 * variants.
 * 
 * This function is only meant to be called for code which is private to the `widget_type` which
 * declared the child and is meant for language bindings which cannot easily make use
 * of the GObject structure offsets.
 * @param widget_type The #GType to get a template child for
 * @param name The “id” of the child defined in the template XML
 * @returns The object built in the template XML with the id @name
 */
get_template_child<T = GObject.Object>(widget_type: GObject.GType, name: string): T
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_markup(): (string | null)
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_text(): (string | null)
/**
 * Returns the #GtkWindow of the current tooltip. This can be the
 * GtkWindow created by default, or the custom tooltip window set
 * using gtk_widget_set_tooltip_window().
 * @returns The #GtkWindow of the current tooltip.
 */
get_tooltip_window(): Gtk.Window
/**
 * This function returns the topmost widget in the container hierarchy
 * `widget` is a part of. If `widget` has no parent widgets, it will be
 * returned as the topmost widget. No reference will be added to the
 * returned widget; it should not be unreferenced.
 * 
 * Note the difference in behavior vs. gtk_widget_get_ancestor();
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
 * would return
 * %NULL if `widget` wasn’t inside a toplevel window, and if the
 * window was inside a #GtkWindow-derived widget which was in turn
 * inside the toplevel #GtkWindow. While the second case may
 * seem unlikely, it actually happens when a #GtkPlug is embedded
 * inside a #GtkSocket within the same application.
 * 
 * To reliably find the toplevel #GtkWindow, use
 * gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
 * on the result. For instance, to get the title of a widget's toplevel
 * window, one might use:
 * 
 * ```c
 * static const char *
 * get_widget_toplevel_title (GtkWidget *widget)
 * {
 *   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 *   if (GTK_IS_WINDOW (toplevel))
 *     {
 *       return gtk_window_get_title (GTK_WINDOW (toplevel));
 *     }
 * 
 *   return NULL;
 * }
 * ```
 * 
 * @returns the topmost ancestor of @widget, or @widget itself    if there’s no ancestor.
 */
get_toplevel(): Gtk.Widget
/**
 * Gets the value of the #GtkWidget:valign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. If your widget want to support baseline aligned
 * children it must use gtk_widget_get_valign_with_baseline(), or
 * `g_object_get (widget, "valign", &value, NULL)`, which will
 * also report the true value.
 * @returns the vertical alignment of @widget, ignoring baseline alignment
 */
get_valign(): Gtk.Align
/**
 * Gets the value of the #GtkWidget:valign property, including
 * %GTK_ALIGN_BASELINE.
 * @returns the vertical alignment of @widget
 */
get_valign_with_baseline(): Gtk.Align
/**
 * Gets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_get_hexpand() for more detail.
 * @returns whether vexpand flag is set
 */
get_vexpand(): boolean
/**
 * Gets whether gtk_widget_set_vexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * See gtk_widget_get_hexpand_set() for more detail.
 * @returns whether vexpand has been explicitly set
 */
get_vexpand_set(): boolean
/**
 * Determines whether the widget is visible. If you want to
 * take into account whether the widget’s parent is also marked as
 * visible, use gtk_widget_is_visible() instead.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See gtk_widget_set_visible().
 * @returns %TRUE if the widget is visible
 */
get_visible(): boolean
/**
 * Gets the visual that will be used to render `widget`.
 * @returns the visual for @widget
 */
get_visual(): Gdk.Visual
/**
 * Returns the widget’s window if it is realized, %NULL otherwise
 * @returns @widget’s window.
 */
get_window(): (Gdk.Window | null)
/**
 * Makes `widget` the current grabbed widget.
 * 
 * This means that interaction with other widgets in the same
 * application is blocked and mouse as well as keyboard events
 * are delivered to this widget.
 * 
 * If `widget` is not sensitive, it is not set as the current
 * grabbed widget and this function does nothing.
 */
grab_add(): void
/**
 * Causes `widget` to become the default widget. `widget` must be able to be
 * a default widget; typically you would ensure this yourself
 * by calling gtk_widget_set_can_default() with a %TRUE value.
 * The default widget is activated when
 * the user presses Enter in a window. Default widgets must be
 * activatable, that is, gtk_widget_activate() should affect them. Note
 * that #GtkEntry widgets require the “activates-default” property
 * set to %TRUE before they activate the default widget when Enter
 * is pressed and the #GtkEntry is focused.
 */
grab_default(): void
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
grab_focus(): void
/**
 * Removes the grab from the given widget.
 * 
 * You have to pair calls to gtk_grab_add() and gtk_grab_remove().
 * 
 * If `widget` does not have the grab, this function does nothing.
 */
grab_remove(): void
/**
 * Determines whether the widget is currently grabbing events, so it
 * is the only widget receiving input events (keyboard and mouse).
 * 
 * See also gtk_grab_add().
 * @returns %TRUE if the widget is in the grab_widgets stack
 */
has_grab(): boolean
/**
 * Determines if the widget style has been looked up through the rc mechanism.
 * @returns %TRUE if the widget has been looked up through the rc   mechanism, %FALSE otherwise.
 */
has_rc_style(): boolean
/**
 * Checks whether there is a #GdkScreen is associated with
 * this widget. All toplevel widgets have an associated
 * screen, and all widgets added into a hierarchy with a toplevel
 * window at the top.
 * @returns %TRUE if there is a #GdkScreen associated   with the widget.
 */
has_screen(): boolean
/**
 * Determines if the widget should show a visible indication that
 * it has the global input focus. This is a convenience function for
 * use in ::draw handlers that takes into account whether focus
 * indication should currently be shown in the toplevel window of
 * `widget`. See gtk_window_get_focus_visible() for more information
 * about focus indication.
 * 
 * To find out if the widget has the global input focus, use
 * gtk_widget_has_focus().
 * @returns %TRUE if the widget should display a “focus rectangle”
 */
has_visible_focus(): boolean
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
hide(): void
/**
 * Utility function; intended to be connected to the #GtkWidget::delete-event
 * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
 * argument, then returns %TRUE. If connected to ::delete-event, the
 * result is that clicking the close button for a window (on the
 * window frame, top right corner usually) will hide but not destroy
 * the window. By default, GTK+ destroys windows when ::delete-event
 * is received.
 * @returns %TRUE
 */
hide_on_delete(): boolean
/**
 * Returns whether the widget is currently being destroyed.
 * This information can sometimes be used to avoid doing
 * unnecessary work.
 * @returns %TRUE if @widget is being destroyed
 */
in_destruction(): boolean
/**
 * Creates and initializes child widgets defined in templates. This
 * function must be called in the instance initializer for any
 * class which assigned itself a template using gtk_widget_class_set_template()
 * 
 * It is important to call this function in the instance initializer
 * of a #GtkWidget subclass and not in #GObject.constructed() or
 * #GObject.constructor() for two reasons.
 * 
 * One reason is that generally derived widgets will assume that parent
 * class composite widgets have been created in their instance
 * initializers.
 * 
 * Another reason is that when calling g_object_new() on a widget with
 * composite templates, it’s important to build the composite widgets
 * before the construct properties are set. Properties passed to g_object_new()
 * should take precedence over properties set in the private template XML.
 */
init_template(): void
/**
 * Sets an input shape for this widget’s GDK window. This allows for
 * windows which react to mouse click in a nonrectangular region, see
 * gdk_window_input_shape_combine_region() for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
input_shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Inserts `group` into `widget`. Children of `widget` that implement
 * #GtkActionable can then be associated with actions in `group` by
 * setting their “action-name” to
 * `prefix`.`action-name`.
 * 
 * If `group` is %NULL, a previously inserted group for `name` is removed
 * from `widget`.
 * @param name the prefix for actions in @group
 * @param group a #GActionGroup, or %NULL
 */
insert_action_group(name: string, group?: (Gio.ActionGroup | null)): void
/**
 * Computes the intersection of a `widget’`s area and `area,` storing
 * the intersection in `intersection,` and returns %TRUE if there was
 * an intersection.  `intersection` may be %NULL if you’re only
 * interested in whether there was an intersection.
 * @param area a rectangle
 * @returns %TRUE if there was an intersection
 */
intersect(area: Gdk.Rectangle): [boolean, Gdk.Rectangle | null]
/**
 * Determines whether `widget` is somewhere inside `ancestor,` possibly with
 * intermediate containers.
 * @param ancestor another #GtkWidget
 * @returns %TRUE if @ancestor contains @widget as a child,    grandchild, great grandchild, etc.
 */
is_ancestor(ancestor: Gtk.Widget): boolean
/**
 * Whether `widget` can rely on having its alpha channel
 * drawn correctly. On X11 this function returns whether a
 * compositing manager is running for `widget’`s screen.
 * 
 * Please note that the semantics of this call will change
 * in the future if used on a widget that has a composited
 * window in its hierarchy (as set by gdk_window_set_composited()).
 * @returns %TRUE if the widget can rely on its alpha channel being drawn correctly.
 */
is_composited(): boolean
/**
 * Determines whether `widget` can be drawn to. A widget can be drawn
 * to if it is mapped and visible.
 * @returns %TRUE if @widget is drawable, %FALSE otherwise
 */
is_drawable(): boolean
/**
 * Returns the widget’s effective sensitivity, which means
 * it is sensitive itself and also its parent widget is sensitive
 * @returns %TRUE if the widget is effectively sensitive
 */
is_sensitive(): boolean
/**
 * Determines whether `widget` is a toplevel widget.
 * 
 * Currently only #GtkWindow and #GtkInvisible (and out-of-process
 * #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
 * widget.
 * @returns %TRUE if @widget is a toplevel, %FALSE otherwise
 */
is_toplevel(): boolean
/**
 * Determines whether the widget and all its parents are marked as
 * visible.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See also gtk_widget_get_visible() and gtk_widget_set_visible()
 * @returns %TRUE if the widget and all its parents are visible
 */
is_visible(): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 * @returns %TRUE if stopping keyboard navigation is fine, %FALSE               if the emitting widget should try to handle the keyboard               navigation attempt in its parent container(s).
 */
keynav_failed(direction: Gtk.DirectionType): boolean
/**
 * Lists the closures used by `widget` for accelerator group connections
 * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
 * The closures can be used to monitor accelerator changes on `widget,`
 * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
 * #GtkAccelGroup of a closure which can be found out with
 * gtk_accel_group_from_accel_closure().
 * @returns a newly allocated #GList of closures
 */
list_accel_closures(): GObject.Closure[]
/**
 * Retrieves a %NULL-terminated array of strings containing the prefixes of
 * #GActionGroup's available to `widget`.
 * @returns a %NULL-terminated array of strings.
 */
list_action_prefixes(): string[]
/**
 * Returns a newly allocated list of the widgets, normally labels, for
 * which this widget is the target of a mnemonic (see for example,
 * gtk_label_set_mnemonic_widget()).
 * 
 * The widgets in the list are not individually referenced. If you
 * want to iterate through the list and perform actions involving
 * callbacks that might destroy the widgets, you
 * must call `g_list_foreach (result,
 * (GFunc)g_object_ref, NULL)` first, and then unref all the
 * widgets afterwards.
 * @returns the list of  mnemonic labels; free this list  with g_list_free() when you are done with it.
 */
list_mnemonic_labels(): Gtk.Widget[]
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
map(): void
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 * @returns %TRUE if the signal has been handled
 */
mnemonic_activate(group_cycling: boolean): boolean
/**
 * Sets the base color for a widget in a particular state.
 * All other style values are left untouched. The base color
 * is the background color used along with the text color
 * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
 * and #GtkTextView. See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > base color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the base color on that.
 * @param state the state for which to set the base color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_base().
 */
modify_base(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > background color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the background color on that.
 * @param state the state for which to set the background color
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_bg().
 */
modify_bg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the #GtkWidget
 * cursor-color and secondary-cursor-color
 * style properties.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param primary the color to use for primary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_cursor().
 * @param secondary the color to use for secondary cursor (does     not need to be allocated), or %NULL to undo the effect of     previous calls to of gtk_widget_modify_cursor().
 */
modify_cursor(primary?: (Gdk.Color | null), secondary?: (Gdk.Color | null)): void
/**
 * Sets the foreground color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the foreground color
 * @param color the color to assign (does not need to be allocated),     or %NULL to undo the effect of previous calls to     of gtk_widget_modify_fg().
 */
modify_fg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the font to use for a widget.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param font_desc the font description to use, or %NULL     to undo the effect of previous calls to gtk_widget_modify_font()
 */
modify_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Modifies style values on the widget.
 * 
 * Modifications made using this technique take precedence over
 * style values set via an RC file, however, they will be overridden
 * if a style is explicitly set on the widget using gtk_widget_set_style().
 * The #GtkRcStyle-struct is designed so each field can either be
 * set or unset, so it is possible, using this function, to modify some
 * style values and leave the others unchanged.
 * 
 * Note that modifications made with this function are not cumulative
 * with previous calls to gtk_widget_modify_style() or with such
 * functions as gtk_widget_modify_fg(). If you wish to retain
 * previous values, you must first call gtk_widget_get_modifier_style(),
 * make your modifications to the returned style, then call
 * gtk_widget_modify_style() with that style. On the other hand,
 * if you first call gtk_widget_modify_style(), subsequent calls
 * to such functions gtk_widget_modify_fg() will have a cumulative
 * effect with the initial modifications.
 * @param style the #GtkRcStyle-struct holding the style modifications
 */
modify_style(style: Gtk.RcStyle): void
/**
 * Sets the text color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * The text color is the foreground color used along with the
 * base color (see gtk_widget_modify_base()) for widgets such
 * as #GtkEntry and #GtkTextView.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the text color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_text().
 */
modify_text(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color to use for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color().
 * @param state the state for which to set the background color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_background_color()
 */
override_background_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the color to use for a widget.
 * 
 * All other style values are left untouched.
 * 
 * This function does not act recursively. Setting the color of a
 * container does not affect its children. Note that some widgets that
 * you may not think of as containers, for instance #GtkButtons,
 * are actually containers.
 * 
 * This API is mostly meant as a quick way for applications to
 * change a widget appearance. If you are developing a widgets
 * library and intend this change to be themeable, it is better
 * done by setting meaningful CSS classes in your
 * widget/container implementation through gtk_style_context_add_class().
 * 
 * This way, your widget library can install a #GtkCssProvider
 * with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
 * to provide a default styling for those widgets that need so, and
 * this theming may fully overridden by the user’s theme.
 * 
 * Note that for complex widgets this may bring in undesired
 * results (such as uniform background color everywhere), in
 * these cases it is better to fully style such widgets through a
 * #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
 * priority.
 * @param state the state for which to set the color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_color()
 */
override_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the
 * cursor-color and secondary-cursor-color
 * style properties. All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * Note that the underlying properties have the #GdkColor type,
 * so the alpha value in `primary` and `secondary` will be ignored.
 * @param cursor the color to use for primary cursor (does not need to be     allocated), or %NULL to undo the effect of previous calls to     of gtk_widget_override_cursor().
 * @param secondary_cursor the color to use for secondary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_override_cursor().
 */
override_cursor(cursor?: (Gdk.RGBA | null), secondary_cursor?: (Gdk.RGBA | null)): void
/**
 * Sets the font to use for a widget. All other style values are
 * left untouched. See gtk_widget_override_color().
 * @param font_desc the font description to use, or %NULL to undo     the effect of previous calls to gtk_widget_override_font()
 */
override_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Sets a symbolic color for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color() for overriding the foreground
 * or background color.
 * @param name the name of the symbolic color to modify
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to gtk_widget_override_symbolic_color()
 */
override_symbolic_color(name: string, color?: (Gdk.RGBA | null)): void
/**
 * Obtains the full path to `widget`. The path is simply the name of a
 * widget and all its parents in the container hierarchy, separated by
 * periods. The name of a widget comes from
 * gtk_widget_get_name(). Paths are used to apply styles to a widget
 * in gtkrc configuration files. Widget names are the type of the
 * widget by default (e.g. “GtkButton”) or can be set to an
 * application-specific value with gtk_widget_set_name(). By setting
 * the name of a widget, you allow users or theme authors to apply
 * styles to that specific widget in their gtkrc
 * file. `path_reversed_p` fills in the path in reverse order,
 * i.e. starting with `widget’`s name instead of starting with the name
 * of `widget’`s outermost ancestor.
 */
path(): [number, string, string]
/**
 * This function is only for use in widget implementations.
 * 
 * Flags the widget for a rerun of the GtkWidgetClass::size_allocate
 * function. Use this function instead of gtk_widget_queue_resize()
 * when the `widget'`s size request didn't change but it wants to
 * reposition its contents.
 * 
 * An example user of this function is gtk_widget_set_halign().
 */
queue_allocate(): void
/**
 * Mark `widget` as needing to recompute its expand flags. Call
 * this function when setting legacy expand child properties
 * on the child of a container.
 * 
 * See gtk_widget_compute_expand().
 */
queue_compute_expand(): void
/**
 * Equivalent to calling gtk_widget_queue_draw_area() for the
 * entire area of a widget.
 */
queue_draw(): void
/**
 * Convenience function that calls gtk_widget_queue_draw_region() on
 * the region created from the given coordinates.
 * 
 * The region here is specified in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(), and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 * 
 * `width` or `height` may be 0, in this case this function does
 * nothing. Negative values for `width` and `height` are not allowed.
 * @param x x coordinate of upper-left corner of rectangle to redraw
 * @param y y coordinate of upper-left corner of rectangle to redraw
 * @param width width of region to draw
 * @param height height of region to draw
 */
queue_draw_area(x: number, y: number, width: number, height: number): void
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
queue_draw_region(region: cairo.Region): void
/**
 * This function is only for use in widget implementations.
 * Flags a widget to have its size renegotiated; should
 * be called when a widget for some reason has a new size request.
 * For example, when you change the text in a #GtkLabel, #GtkLabel
 * queues a resize to ensure there’s enough space for the new text.
 * 
 * Note that you cannot call gtk_widget_queue_resize() on a widget
 * from inside its implementation of the GtkWidgetClass::size_allocate
 * virtual method. Calls to gtk_widget_queue_resize() from inside
 * GtkWidgetClass::size_allocate will be silently ignored.
 */
queue_resize(): void
/**
 * This function works like gtk_widget_queue_resize(),
 * except that the widget is not invalidated.
 */
queue_resize_no_redraw(): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
realize(): void
/**
 * Computes the intersection of a `widget’`s area and `region,` returning
 * the intersection. The result may be empty, use cairo_region_is_empty() to
 * check.
 * @param region a #cairo_region_t, in the same coordinate system as          @widget->allocation. That is, relative to @widget->window          for widgets which return %FALSE from gtk_widget_get_has_window();          relative to the parent window of @widget->window otherwise.
 * @returns A newly allocated region holding the intersection of @widget     and @region.
 */
region_intersect(region: cairo.Region): cairo.Region
/**
 * Registers a #GdkWindow with the widget and sets it up so that
 * the widget receives events for it. Call gtk_widget_unregister_window()
 * when destroying the window.
 * 
 * Before 3.8 you needed to call gdk_window_set_user_data() directly to set
 * this up. This is now deprecated and you should use gtk_widget_register_window()
 * instead. Old code will keep working as is, although some new features like
 * transparency might not work perfectly.
 * @param window a #GdkWindow
 */
register_window(window: Gdk.Window): void
/**
 * Removes an accelerator from `widget,` previously installed with
 * gtk_widget_add_accelerator().
 * @param accel_group accel group for this widget
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @returns whether an accelerator was installed and could be removed
 */
remove_accelerator(accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType): boolean
/**
 * Removes a widget from the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
 * must have previously been added to the list with
 * gtk_widget_add_mnemonic_label().
 * @param label a #GtkWidget that was previously set as a mnemonic label for         @widget with gtk_widget_add_mnemonic_label().
 */
remove_mnemonic_label(label: Gtk.Widget): void
/**
 * Removes a tick callback previously registered with
 * gtk_widget_add_tick_callback().
 * @param id an id returned by gtk_widget_add_tick_callback()
 */
remove_tick_callback(id: number): void
/**
 * A convenience function that uses the theme settings for `widget`
 * to look up `stock_id` and render it to a pixbuf. `stock_id` should
 * be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size`
 * should be a size such as #GTK_ICON_SIZE_MENU. `detail` should be a
 * string that identifies the widget or code doing the rendering, so
 * that theme engines can special-case rendering for that widget or
 * code.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be
 * freed after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @param detail render detail to pass to theme engine
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon(stock_id: string, size: number, detail?: (string | null)): (GdkPixbuf.Pixbuf | null)
/**
 * A convenience function that uses the theme engine and style
 * settings for `widget` to look up `stock_id` and render it to
 * a pixbuf. `stock_id` should be a stock icon ID such as
 * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
 * such as #GTK_ICON_SIZE_MENU.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be freed
 * after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon_pixbuf(stock_id: string, size: number): (GdkPixbuf.Pixbuf | null)
/**
 * Moves a widget from one #GtkContainer to another, handling reference
 * count issues to avoid destroying the widget.
 * @param new_parent a #GtkContainer to move the widget into
 */
reparent(new_parent: Gtk.Widget): void
/**
 * Reset the styles of `widget` and all descendents, so when
 * they are looked up again, they get the correct values
 * for the currently loaded RC file settings.
 * 
 * This function is not useful for applications.
 */
reset_rc_styles(): void
/**
 * Updates the style context of `widget` and all descendants
 * by updating its widget path. #GtkContainers may want
 * to use this on a child when reordering it in a way that a different
 * style might apply to it. See also gtk_container_get_path_for_child().
 */
reset_style(): void
/**
 * Very rarely-used function. This function is used to emit
 * an expose event on a widget. This function is not normally used
 * directly. The only time it is used is when propagating an expose
 * event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
 * and that is normally done using gtk_container_propagate_draw().
 * 
 * If you want to force an area of a window to be redrawn,
 * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
 * To cause the redraw to be done immediately, follow that call
 * with a call to gdk_window_process_updates().
 * @param event a expose #GdkEvent
 * @returns return from the event signal emission (%TRUE if   the event was handled)
 */
send_expose(event: Gdk.Event): number
/**
 * Sends the focus change `event` to `widget`
 * 
 * This function is not meant to be used by applications. The only time it
 * should be used is when it is necessary for a #GtkWidget to assign focus
 * to a widget that is semantically owned by the first widget even though
 * it’s not a direct child - for instance, a search entry in a floating
 * window similar to the quick search in #GtkTreeView.
 * 
 * An example of its usage is:
 * 
 * 
 * ```c
 *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
 * 
 *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
 *   fevent->focus_change.in = TRUE;
 *   fevent->focus_change.window = _gtk_widget_get_window (widget);
 *   if (fevent->focus_change.window != NULL)
 *     g_object_ref (fevent->focus_change.window);
 * 
 *   gtk_widget_send_focus_change (widget, fevent);
 * 
 *   gdk_event_free (event);
 * ```
 * 
 * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
 * @returns the return value from the event signal emission: %TRUE   if the event was handled, and %FALSE otherwise
 */
send_focus_change(event: Gdk.Event): boolean
/**
 * Given an accelerator group, `accel_group,` and an accelerator path,
 * `accel_path,` sets up an accelerator in `accel_group` so whenever the
 * key binding that is defined for `accel_path` is pressed, `widget`
 * will be activated.  This removes any accelerators (for any
 * accelerator group) installed by previous calls to
 * gtk_widget_set_accel_path(). Associating accelerators with
 * paths allows them to be modified by the user and the modifications
 * to be saved for future use. (See gtk_accel_map_save().)
 * 
 * This function is a low level function that would most likely
 * be used by a menu creation system like #GtkUIManager. If you
 * use #GtkUIManager, setting up accelerator paths will be done
 * automatically.
 * 
 * Even when you you aren’t using #GtkUIManager, if you only want to
 * set up accelerators on menu items gtk_menu_item_set_accel_path()
 * provides a somewhat more convenient interface.
 * 
 * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
 * pass a static string, you can save some memory by interning it first with
 * g_intern_static_string().
 * @param accel_path path used to look up the accelerator
 * @param accel_group a #GtkAccelGroup.
 */
set_accel_path(accel_path?: (string | null), accel_group?: (Gtk.AccelGroup | null)): void
/**
 * Sets the widget’s allocation.  This should not be used
 * directly, but from within a widget’s size_allocate method.
 * 
 * The allocation set should be the “adjusted” or actual
 * allocation. If you’re implementing a #GtkContainer, you want to use
 * gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
 * The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
 * allocation inside gtk_widget_size_allocate() to create an adjusted
 * allocation.
 * @param allocation a pointer to a #GtkAllocation to copy from
 */
set_allocation(allocation: Gtk.Allocation): void
/**
 * Sets whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * This is a hint to the widget and does not affect the behavior of
 * the GTK+ core; many widgets ignore this flag entirely. For widgets
 * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
 * the effect is to suppress default themed drawing of the widget's
 * background. (Children of the widget will still be drawn.) The application
 * is then entirely responsible for drawing the widget background.
 * 
 * Note that the background is still drawn when the widget is mapped.
 * @param app_paintable %TRUE if the application will paint on the widget
 */
set_app_paintable(app_paintable: boolean): void
/**
 * Specifies whether `widget` can be a default widget. See
 * gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param can_default whether or not @widget can be a default widget.
 */
set_can_default(can_default: boolean): void
/**
 * Specifies whether `widget` can own the input focus. See
 * gtk_widget_grab_focus() for actually setting the input focus on a
 * widget.
 * @param can_focus whether or not @widget can own the input focus.
 */
set_can_focus(can_focus: boolean): void
/**
 * Sets the widget’s clip.  This must not be used directly,
 * but from within a widget’s size_allocate method.
 * It must be called after gtk_widget_set_allocation() (or after chaining up
 * to the parent class), because that function resets the clip.
 * 
 * The clip set should be the area that `widget` draws on. If `widget` is a
 * #GtkContainer, the area must contain all children's clips.
 * 
 * If this function is not called by `widget` during a ::size-allocate handler,
 * the clip will be set to `widget'`s allocation.
 * @param clip a pointer to a #GtkAllocation to copy from
 */
set_clip(clip: Gtk.Allocation): void
/**
 * Sets a widgets composite name. The widget must be
 * a composite child of its parent; see gtk_widget_push_composite_child().
 * @param name the name to set
 */
set_composite_name(name: string): void
/**
 * Enables or disables a #GdkDevice to interact with `widget`
 * and all its children.
 * 
 * It does so by descending through the #GdkWindow hierarchy
 * and enabling the same mask that is has for core events
 * (i.e. the one that gdk_window_get_events() returns).
 * @param device a #GdkDevice
 * @param enabled whether to enable the device
 */
set_device_enabled(device: Gdk.Device, enabled: boolean): void
/**
 * Sets the device event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive from `device`. Keep
 * in mind that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_device_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with windowless widgets (which return
 * %FALSE from gtk_widget_get_has_window());
 * to get events on those widgets, place them inside a #GtkEventBox
 * and receive events on the event box.
 * @param device a #GdkDevice
 * @param events event mask
 */
set_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Sets the reading direction on a particular widget. This direction
 * controls the primary direction for widgets containing text,
 * and also the direction in which the children of a container are
 * packed. The ability to set the direction is present in order
 * so that correct localization into languages with right-to-left
 * reading directions can be done. Generally, applications will
 * let the default reading direction present, except for containers
 * where the containers are arranged in an order that is explicitly
 * visual rather than logical (such as buttons for text justification).
 * 
 * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
 * set by gtk_widget_set_default_direction() will be used.
 * @param dir the new direction
 */
set_direction(dir: Gtk.TextDirection): void
/**
 * Widgets are double buffered by default; you can use this function
 * to turn off the buffering. “Double buffered” simply means that
 * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
 * automatically around expose events sent to the
 * widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
 * window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
 * buffer to the screen. The result is that users see the window
 * update in one smooth step, and don’t see individual graphics
 * primitives being rendered.
 * 
 * In very simple terms, double buffered widgets don’t flicker,
 * so you would only use this function to turn off double buffering
 * if you had special needs and really knew what you were doing.
 * 
 * Note: if you turn off double-buffering, you have to handle
 * expose events, since even the clearing to the background color or
 * pixmap will not happen automatically (as it is done in
 * gdk_window_begin_draw_frame()).
 * 
 * In 3.10 GTK and GDK have been restructured for translucent drawing. Since
 * then expose events for double-buffered widgets are culled into a single
 * event to the toplevel GDK window. If you now unset double buffering, you
 * will cause a separate rendering pass for every widget. This will likely
 * cause rendering problems - in particular related to stacking - and usually
 * increases rendering times significantly.
 * @param double_buffered %TRUE to double-buffer a widget
 */
set_double_buffered(double_buffered: boolean): void
/**
 * Sets the event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive. Keep in mind
 * that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with widgets that have no window.
 * (See gtk_widget_get_has_window()).  To get events on those widgets,
 * place them inside a #GtkEventBox and receive events on the event
 * box.
 * @param events event mask
 */
set_events(events: number): void
/**
 * Sets whether the widget should grab focus when it is clicked with the mouse.
 * Making mouse clicks not grab focus is useful in places like toolbars where
 * you don’t want the keyboard focus removed from the main area of the
 * application.
 * @param focus_on_click whether the widget should grab focus when clicked with the mouse
 */
set_focus_on_click(focus_on_click: boolean): void
/**
 * Sets the font map to use for Pango rendering. When not set, the widget
 * will inherit the font map from its parent.
 * @param font_map a #PangoFontMap, or %NULL to unset any previously     set font map
 */
set_font_map(font_map?: (Pango.FontMap | null)): void
/**
 * Sets the #cairo_font_options_t used for Pango rendering in this widget.
 * When not set, the default font options for the #GdkScreen will be used.
 * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
 */
set_font_options(options?: (cairo.FontOptions | null)): void
/**
 * Sets the horizontal alignment of `widget`.
 * See the #GtkWidget:halign property.
 * @param align the horizontal alignment
 */
set_halign(align: Gtk.Align): void
/**
 * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
 * #GtkWidget:has-tooltip for more information.
 * @param has_tooltip whether or not @widget has a tooltip.
 */
set_has_tooltip(has_tooltip: boolean): void
/**
 * Specifies whether `widget` has a #GdkWindow of its own. Note that
 * all realized widgets have a non-%NULL “window” pointer
 * (gtk_widget_get_window() never returns a %NULL window when a widget
 * is realized), but for many of them it’s actually the #GdkWindow of
 * one of its parent widgets. Widgets that do not create a %window for
 * themselves in #GtkWidget::realize must announce this by
 * calling this function with `has_window` = %FALSE.
 * 
 * This function should only be called by widget implementations,
 * and they should call it in their init() function.
 * @param has_window whether or not @widget has a window.
 */
set_has_window(has_window: boolean): void
/**
 * Sets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Call this function to set the expand flag if you would like your
 * widget to become larger horizontally when the window has extra
 * room.
 * 
 * By default, widgets automatically expand if any of their children
 * want to expand. (To see if a widget will automatically expand given
 * its current children and state, call gtk_widget_compute_expand(). A
 * container can decide how the expandability of children affects the
 * expansion of the container by overriding the compute_expand virtual
 * method on #GtkWidget.).
 * 
 * Setting hexpand explicitly with this function will override the
 * automatic expand behavior.
 * 
 * This function forces the widget to expand or not to expand,
 * regardless of children.  The override occurs because
 * gtk_widget_set_hexpand() sets the hexpand-set property (see
 * gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
 * value to be used, rather than looking at children and widget state.
 * @param expand whether to expand
 */
set_hexpand(expand: boolean): void
/**
 * Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
 * be used.
 * 
 * The hexpand-set property will be set automatically when you call
 * gtk_widget_set_hexpand() to set hexpand, so the most likely
 * reason to use this function would be to unset an explicit expand
 * flag.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @param set value for hexpand-set property
 */
set_hexpand_set(set: boolean): void
/**
 * Marks the widget as being mapped.
 * 
 * This function should only ever be called in a derived widget's
 * “map” or “unmap” implementation.
 * @param mapped %TRUE to mark the widget as mapped
 */
set_mapped(mapped: boolean): void
/**
 * Sets the bottom margin of `widget`.
 * See the #GtkWidget:margin-bottom property.
 * @param margin the bottom margin
 */
set_margin_bottom(margin: number): void
/**
 * Sets the end margin of `widget`.
 * See the #GtkWidget:margin-end property.
 * @param margin the end margin
 */
set_margin_end(margin: number): void
/**
 * Sets the left margin of `widget`.
 * See the #GtkWidget:margin-left property.
 * @param margin the left margin
 */
set_margin_left(margin: number): void
/**
 * Sets the right margin of `widget`.
 * See the #GtkWidget:margin-right property.
 * @param margin the right margin
 */
set_margin_right(margin: number): void
/**
 * Sets the start margin of `widget`.
 * See the #GtkWidget:margin-start property.
 * @param margin the start margin
 */
set_margin_start(margin: number): void
/**
 * Sets the top margin of `widget`.
 * See the #GtkWidget:margin-top property.
 * @param margin the top margin
 */
set_margin_top(margin: number): void
/**
 * Widgets can be named, which allows you to refer to them from a
 * CSS file. You can apply a style to widgets with a particular name
 * in the CSS file. See the documentation for the CSS syntax (on the
 * same page as the docs for #GtkStyleContext).
 * 
 * Note that the CSS syntax has certain special characters to delimit
 * and represent elements in a selector (period, #, >, *...), so using
 * these will make your widget impossible to match by name. Any combination
 * of alphanumeric symbols, dashes and underscores will suffice.
 * @param name name for the widget
 */
set_name(name: string): void
/**
 * Sets the #GtkWidget:no-show-all property, which determines whether
 * calls to gtk_widget_show_all() will affect this widget.
 * 
 * This is mostly for use in constructing widget hierarchies with externally
 * controlled visibility, see #GtkUIManager.
 * @param no_show_all the new value for the “no-show-all” property
 */
set_no_show_all(no_show_all: boolean): void
/**
 * Request the `widget` to be rendered partially transparent,
 * with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
 * are clamped to the [0,1] range.).
 * This works on both toplevel widget, and child widgets, although there
 * are some limitations:
 * 
 * For toplevel widgets this depends on the capabilities of the windowing
 * system. On X11 this has any effect only on X screens with a compositing manager
 * running. See gtk_widget_is_composited(). On Windows it should work
 * always, although setting a window’s opacity after the window has been
 * shown causes it to flicker once on Windows.
 * 
 * For child widgets it doesn’t work if any affected widget has a native window, or
 * disables double buffering.
 * @param opacity desired opacity, between 0 and 1
 */
set_opacity(opacity: number): void
/**
 * This function is useful only when implementing subclasses of
 * #GtkContainer.
 * Sets the container as the parent of `widget,` and takes care of
 * some details such as updating the state and style of the child
 * to reflect its new location. The opposite function is
 * gtk_widget_unparent().
 * @param parent parent container
 */
set_parent(parent: Gtk.Widget): void
/**
 * Sets a non default parent window for `widget`.
 * 
 * For #GtkWindow classes, setting a `parent_window` effects whether
 * the window is a toplevel window or can be embedded into other
 * widgets.
 * 
 * For #GtkWindow classes, this needs to be called before the
 * window is realized.
 * @param parent_window the new parent window.
 */
set_parent_window(parent_window: Gdk.Window): void
/**
 * Marks the widget as being realized. This function must only be
 * called after all #GdkWindows for the `widget` have been created
 * and registered.
 * 
 * This function should only ever be called in a derived widget's
 * “realize” or “unrealize” implementation.
 * @param realized %TRUE to mark the widget as realized
 */
set_realized(realized: boolean): void
/**
 * Specifies whether `widget` will be treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param receives_default whether or not @widget can be a default widget.
 */
set_receives_default(receives_default: boolean): void
/**
 * Sets whether the entire widget is queued for drawing when its size
 * allocation changes. By default, this setting is %TRUE and
 * the entire widget is redrawn on every size change. If your widget
 * leaves the upper left unchanged when made bigger, turning this
 * setting off will improve performance.
 * 
 * Note that for widgets where gtk_widget_get_has_window() is %FALSE
 * setting this flag to %FALSE turns off all allocation on resizing:
 * the widget will not even redraw if its position changes; this is to
 * allow containers that don’t draw anything to avoid excess
 * invalidations. If you set this flag on a widget with no window that
 * does draw on `widget->`window, you are
 * responsible for invalidating both the old and new allocation of the
 * widget when the widget is moved and responsible for invalidating
 * regions newly when the widget increases size.
 * @param redraw_on_allocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
 */
set_redraw_on_allocate(redraw_on_allocate: boolean): void
/**
 * Sets the sensitivity of a widget. A widget is sensitive if the user
 * can interact with it. Insensitive widgets are “grayed out” and the
 * user can’t interact with them. Insensitive widgets are known as
 * “inactive”, “disabled”, or “ghosted” in some other toolkits.
 * @param sensitive %TRUE to make the widget sensitive
 */
set_sensitive(sensitive: boolean): void
/**
 * Sets the minimum size of a widget; that is, the widget’s size
 * request will be at least `width` by `height`. You can use this
 * function to force a widget to be larger than it normally would be.
 * 
 * In most cases, gtk_window_set_default_size() is a better choice for
 * toplevel windows than this function; setting the default size will
 * still allow users to shrink the window. Setting the size request
 * will force them to leave the window at least as large as the size
 * request. When dealing with window sizes,
 * gtk_window_set_geometry_hints() can be a useful function as well.
 * 
 * Note the inherent danger of setting any fixed size - themes,
 * translations into other languages, different fonts, and user action
 * can all change the appropriate size for a given widget. So, it's
 * basically impossible to hardcode a size that will always be
 * correct.
 * 
 * The size request of a widget is the smallest size a widget can
 * accept while still functioning well and drawing itself correctly.
 * However in some strange cases a widget may be allocated less than
 * its requested size, and in many cases a widget may be allocated more
 * space than it requested.
 * 
 * If the size request in a given direction is -1 (unset), then
 * the “natural” size request of the widget will be used instead.
 * 
 * The size request set here does not include any margin from the
 * #GtkWidget properties margin-left, margin-right, margin-top, and
 * margin-bottom, but it does include pretty much all other padding
 * or border properties set by any subclass of #GtkWidget.
 * @param width width @widget should request, or -1 to unset
 * @param height height @widget should request, or -1 to unset
 */
set_size_request(width: number, height: number): void
/**
 * This function is for use in widget implementations. Sets the state
 * of a widget (insensitive, prelighted, etc.) Usually you should set
 * the state using wrapper functions such as gtk_widget_set_sensitive().
 * @param state new state for @widget
 */
set_state(state: Gtk.StateType): void
/**
 * This function is for use in widget implementations. Turns on flag
 * values in the current widget state (insensitive, prelighted, etc.).
 * 
 * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
 * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
 * direction, use gtk_widget_set_direction().
 * 
 * It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
 * will be propagated down to all non-internal children if `widget` is a
 * #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
 * down to all #GtkContainer children by different means than turning on the
 * state flag down the hierarchy, both gtk_widget_get_state_flags() and
 * gtk_widget_is_sensitive() will make use of these.
 * @param flags State flags to turn on
 * @param clear Whether to clear state before turning on @flags
 */
set_state_flags(flags: Gtk.StateFlags, clear: boolean): void
/**
 * Used to set the #GtkStyle for a widget (`widget->`style). Since
 * GTK 3, this function does nothing, the passed in style is ignored.
 * @param style a #GtkStyle, or %NULL to remove the effect     of a previous call to gtk_widget_set_style() and go back to     the default style
 */
set_style(style?: (Gtk.Style | null)): void
/**
 * Enables or disables multiple pointer awareness. If this setting is %TRUE,
 * `widget` will start receiving multiple, per device enter/leave events. Note
 * that if custom #GdkWindows are created in #GtkWidget::realize,
 * gdk_window_set_support_multidevice() will have to be called manually on them.
 * @param support_multidevice %TRUE to support input from multiple devices.
 */
set_support_multidevice(support_multidevice: boolean): void
/**
 * Sets `markup` as the contents of the tooltip, which is marked up with
 *  the [Pango text markup language][PangoMarkupFormat].
 * 
 * This function will take care of setting #GtkWidget:has-tooltip to %TRUE
 * and of the default handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-markup property and
 * gtk_tooltip_set_markup().
 * @param markup the contents of the tooltip for @widget, or %NULL
 */
set_tooltip_markup(markup?: (string | null)): void
/**
 * Sets `text` as the contents of the tooltip. This function will take
 * care of setting #GtkWidget:has-tooltip to %TRUE and of the default
 * handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
 * @param text the contents of the tooltip for @widget
 */
set_tooltip_text(text?: (string | null)): void
/**
 * Replaces the default window used for displaying
 * tooltips with `custom_window`. GTK+ will take care of showing and
 * hiding `custom_window` at the right moment, to behave likewise as
 * the default tooltip window. If `custom_window` is %NULL, the default
 * tooltip window will be used.
 * @param custom_window a #GtkWindow, or %NULL
 */
set_tooltip_window(custom_window?: (Gtk.Window | null)): void
/**
 * Sets the vertical alignment of `widget`.
 * See the #GtkWidget:valign property.
 * @param align the vertical alignment
 */
set_valign(align: Gtk.Align): void
/**
 * Sets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_set_hexpand() for more detail.
 * @param expand whether to expand
 */
set_vexpand(expand: boolean): void
/**
 * Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
 * be used.
 * 
 * See gtk_widget_set_hexpand_set() for more detail.
 * @param set value for vexpand-set property
 */
set_vexpand_set(set: boolean): void
/**
 * Sets the visibility state of `widget`. Note that setting this to
 * %TRUE doesn’t mean the widget is actually viewable, see
 * gtk_widget_get_visible().
 * 
 * This function simply calls gtk_widget_show() or gtk_widget_hide()
 * but is nicer to use when the visibility of the widget depends on
 * some condition.
 * @param visible whether the widget should be shown or not
 */
set_visible(visible: boolean): void
/**
 * Sets the visual that should be used for by widget and its children for
 * creating #GdkWindows. The visual must be on the same #GdkScreen as
 * returned by gtk_widget_get_screen(), so handling the
 * #GtkWidget::screen-changed signal is necessary.
 * 
 * Setting a new `visual` will not cause `widget` to recreate its windows,
 * so you should call this function before `widget` is realized.
 * @param visual visual to be used or %NULL to unset a previous one
 */
set_visual(visual?: (Gdk.Visual | null)): void
/**
 * Sets a widget’s window. This function should only be used in a
 * widget’s #GtkWidget::realize implementation. The %window passed is
 * usually either new window created with gdk_window_new(), or the
 * window of its parent widget as returned by
 * gtk_widget_get_parent_window().
 * 
 * Widgets must indicate whether they will create their own #GdkWindow
 * by calling gtk_widget_set_has_window(). This is usually done in the
 * widget’s init() function.
 * 
 * Note that this function does not add any reference to `window`.
 * @param window a #GdkWindow
 */
set_window(window: Gdk.Window): void
/**
 * Sets a shape for this widget’s GDK window. This allows for
 * transparent windows etc., see gdk_window_shape_combine_region()
 * for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
show_all(): void
/**
 * Shows a widget. If the widget is an unmapped toplevel widget
 * (i.e. a #GtkWindow that has not yet been shown), enter the main
 * loop and wait for the window to actually be mapped. Be careful;
 * because the main loop is running, anything can happen during
 * this function.
 */
show_now(): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
size_allocate(allocation: Gtk.Allocation): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size,
 * position and (optionally) baseline to their child widgets.
 * 
 * In this function, the allocation and baseline may be adjusted. It
 * will be forced to a 1x1 minimum size, and the
 * adjust_size_allocation virtual and adjust_baseline_allocation
 * methods on the child will be used to adjust the allocation and
 * baseline. Standard adjustments include removing the widget's
 * margins, and applying the widget’s #GtkWidget:halign and
 * #GtkWidget:valign properties.
 * 
 * If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
 * baseline argument is ignored and -1 is used instead.
 * @param allocation position and size to be allocated to @widget
 * @param baseline The baseline of the child, or -1
 */
size_allocate_with_baseline(allocation: Gtk.Allocation, baseline: number): void
/**
 * This function is typically used when implementing a #GtkContainer
 * subclass.  Obtains the preferred size of a widget. The container
 * uses this information to arrange its child widgets and decide what
 * size allocations to give them with gtk_widget_size_allocate().
 * 
 * You can also call this function from an application, with some
 * caveats. Most notably, getting a size request requires the widget
 * to be associated with a screen, because font information may be
 * needed. Multihead-aware applications should keep this in mind.
 * 
 * Also remember that the size request is not necessarily the size
 * a widget will actually be allocated.
 */
size_request(): Gtk.Requisition
/**
 * This function attaches the widget’s #GtkStyle to the widget's
 * #GdkWindow. It is a replacement for
 * 
 * 
 * ```
 * widget->style = gtk_style_attach (widget->style, widget->window);
 * ```
 * 
 * 
 * and should only ever be called in a derived widget’s “realize”
 * implementation which does not chain up to its parent class'
 * “realize” implementation, because one of the parent classes
 * (finally #GtkWidget) would attach the style itself.
 */
style_attach(): void
/**
 * Gets the value of a style property of `widget`.
 * @param property_name the name of a style property
 * @param value location to return the property value
 */
style_get_property(property_name: string, value: GObject.Value): void
/**
 * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
 * This causes all queued #GtkWidget::child-notify signals on `widget` to be
 * emitted.
 */
thaw_child_notify(): void
/**
 * Translate coordinates relative to `src_widget’`s allocation to coordinates
 * relative to `dest_widget’`s allocations. In order to perform this
 * operation, both widgets must be realized, and must share a common
 * toplevel.
 * @param dest_widget a #GtkWidget
 * @param src_x X position relative to @src_widget
 * @param src_y Y position relative to @src_widget
 * @returns %FALSE if either widget was not realized, or there   was no common ancestor. In this case, nothing is stored in   *@dest_x and *@dest_y. Otherwise %TRUE.
 */
translate_coordinates(dest_widget: Gtk.Widget, src_x: number, src_y: number): [boolean, number, number]
/**
 * Triggers a tooltip query on the display where the toplevel of `widget`
 * is located. See gtk_tooltip_trigger_tooltip_query() for more
 * information.
 */
trigger_tooltip_query(): void
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
unmap(): void
/**
 * This function is only for use in widget implementations.
 * Should be called by implementations of the remove method
 * on #GtkContainer, to dissociate a child from the container.
 */
unparent(): void
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
unrealize(): void
/**
 * Unregisters a #GdkWindow from the widget that was previously set up with
 * gtk_widget_register_window(). You need to call this when the window is
 * no longer used by the widget, such as when you destroy it.
 * @param window a #GdkWindow
 */
unregister_window(window: Gdk.Window): void
/**
 * This function is for use in widget implementations. Turns off flag
 * values for the current widget state (insensitive, prelighted, etc.).
 * See gtk_widget_set_state_flags().
 * @param flags State flags to turn off
 */
unset_state_flags(flags: Gtk.StateFlags): void
vfunc_adjust_baseline_allocation(baseline: number): void
vfunc_adjust_baseline_request(minimum_baseline: number, natural_baseline: number): void
vfunc_adjust_size_allocation(orientation: Gtk.Orientation, minimum_size: number, natural_size: number, allocated_pos: number, allocated_size: number): void
vfunc_adjust_size_request(orientation: Gtk.Orientation, minimum_size: number, natural_size: number): void
vfunc_button_press_event(event: Gdk.EventButton): boolean
vfunc_button_release_event(event: Gdk.EventButton): boolean
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 */
vfunc_can_activate_accel(signal_id: number): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
vfunc_child_notify(child_property: GObject.ParamSpec): void
vfunc_composited_changed(): void
vfunc_compute_expand(hexpand_p: boolean, vexpand_p: boolean): void
vfunc_configure_event(event: Gdk.EventConfigure): boolean
vfunc_damage_event(event: Gdk.EventExpose): boolean
vfunc_delete_event(event: Gdk.EventAny): boolean
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
vfunc_destroy(): void
vfunc_destroy_event(event: Gdk.EventAny): boolean
vfunc_direction_changed(previous_direction: Gtk.TextDirection): void
vfunc_dispatch_child_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_drag_begin(context: Gdk.DragContext): void
vfunc_drag_data_delete(context: Gdk.DragContext): void
vfunc_drag_data_get(context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_data_received(context: Gdk.DragContext, x: number, y: number, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_drop(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_drag_end(context: Gdk.DragContext): void
vfunc_drag_failed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
vfunc_drag_leave(context: Gdk.DragContext, time_: number): void
vfunc_drag_motion(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_draw(cr: cairo.Context): boolean
vfunc_enter_notify_event(event: Gdk.EventCrossing): boolean
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 */
vfunc_event(event: Gdk.Event): boolean
vfunc_focus(direction: Gtk.DirectionType): boolean
vfunc_focus_in_event(event: Gdk.EventFocus): boolean
vfunc_focus_out_event(event: Gdk.EventFocus): boolean
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 */
vfunc_get_accessible(): Atk.Object
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
vfunc_get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
vfunc_get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
vfunc_get_preferred_width_for_height(height: number): [number, number]
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 */
vfunc_get_request_mode(): Gtk.SizeRequestMode
vfunc_grab_broken_event(event: Gdk.EventGrabBroken): boolean
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
vfunc_grab_focus(): void
vfunc_grab_notify(was_grabbed: boolean): void
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
vfunc_hide(): void
vfunc_hierarchy_changed(previous_toplevel: Gtk.Widget): void
vfunc_key_press_event(event: Gdk.EventKey): boolean
vfunc_key_release_event(event: Gdk.EventKey): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 */
vfunc_keynav_failed(direction: Gtk.DirectionType): boolean
vfunc_leave_notify_event(event: Gdk.EventCrossing): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
vfunc_map(): void
vfunc_map_event(event: Gdk.EventAny): boolean
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 */
vfunc_mnemonic_activate(group_cycling: boolean): boolean
vfunc_motion_notify_event(event: Gdk.EventMotion): boolean
vfunc_move_focus(direction: Gtk.DirectionType): void
vfunc_parent_set(previous_parent: Gtk.Widget): void
vfunc_popup_menu(): boolean
vfunc_property_notify_event(event: Gdk.EventProperty): boolean
vfunc_proximity_in_event(event: Gdk.EventProximity): boolean
vfunc_proximity_out_event(event: Gdk.EventProximity): boolean
vfunc_query_tooltip(x: number, y: number, keyboard_tooltip: boolean, tooltip: Gtk.Tooltip): boolean
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
vfunc_queue_draw_region(region: cairo.Region): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
vfunc_realize(): void
vfunc_screen_changed(previous_screen: Gdk.Screen): void
vfunc_scroll_event(event: Gdk.EventScroll): boolean
vfunc_selection_clear_event(event: Gdk.EventSelection): boolean
vfunc_selection_get(selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_selection_notify_event(event: Gdk.EventSelection): boolean
vfunc_selection_received(selection_data: Gtk.SelectionData, time_: number): void
vfunc_selection_request_event(event: Gdk.EventSelection): boolean
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
vfunc_show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
vfunc_show_all(): void
vfunc_show_help(help_type: Gtk.WidgetHelpType): boolean
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
vfunc_size_allocate(allocation: Gtk.Allocation): void
vfunc_state_changed(previous_state: Gtk.StateType): void
vfunc_state_flags_changed(previous_state_flags: Gtk.StateFlags): void
vfunc_style_set(previous_style: Gtk.Style): void
vfunc_style_updated(): void
vfunc_touch_event(event: Gdk.EventTouch): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
vfunc_unmap(): void
vfunc_unmap_event(event: Gdk.EventAny): boolean
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
vfunc_unrealize(): void
vfunc_visibility_notify_event(event: Gdk.EventVisibility): boolean
vfunc_window_state_event(event: Gdk.EventWindowState): boolean
}

module DockOverlayEdge {

    // Constructor properties interface

    interface ConstructorProps extends Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, DockItem.ConstructorProps, Gtk.Buildable.ConstructorProps {
edge: Gtk.PositionType;
    position: number;
    }

}

class DockOverlayEdge extends Bin implements Atk.ImplementorIface, DockItem, Gtk.Buildable {

    // Own properties of Dazzle.DockOverlayEdge

    get edge(): Gtk.PositionType;
    set edge(val: Gtk.PositionType);
    get position(): number;
    set position(val: number);

    // Constructors of Dazzle.DockOverlayEdge


constructor(properties?: Partial<DockOverlayEdge.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own methods of Dazzle.DockOverlayEdge

    get_edge(): Gtk.PositionType
    get_position(): number
    set_edge(edge: Gtk.PositionType): void
    set_position(position: number): void

// Inherited properties
get app_paintable(): boolean;
set app_paintable(val: boolean);
get appPaintable(): boolean;
set appPaintable(val: boolean);
get can_default(): boolean;
set can_default(val: boolean);
get canDefault(): boolean;
set canDefault(val: boolean);
get can_focus(): boolean;
set can_focus(val: boolean);
get canFocus(): boolean;
set canFocus(val: boolean);
get composite_child(): boolean;
get compositeChild(): boolean;
/**
 * Whether the widget is double buffered.
 */
get double_buffered(): boolean;
set double_buffered(val: boolean);
/**
 * Whether the widget is double buffered.
 */
get doubleBuffered(): boolean;
set doubleBuffered(val: boolean);
get events(): Gdk.EventMask;
set events(val: Gdk.EventMask);
/**
 * Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
 */
get expand(): boolean;
set expand(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focus_on_click(): boolean;
set focus_on_click(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focusOnClick(): boolean;
set focusOnClick(val: boolean);
/**
 * How to distribute horizontal space if widget gets extra space, see #GtkAlign
 */
get halign(): Gtk.Align;
set halign(val: Gtk.Align);
get has_default(): boolean;
set has_default(val: boolean);
get hasDefault(): boolean;
set hasDefault(val: boolean);
get has_focus(): boolean;
set has_focus(val: boolean);
get hasFocus(): boolean;
set hasFocus(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get has_tooltip(): boolean;
set has_tooltip(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get hasTooltip(): boolean;
set hasTooltip(val: boolean);
get height_request(): number;
set height_request(val: number);
get heightRequest(): number;
set heightRequest(val: number);
/**
 * Whether to expand horizontally. See gtk_widget_set_hexpand().
 */
get hexpand(): boolean;
set hexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpand_set(): boolean;
set hexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpandSet(): boolean;
set hexpandSet(val: boolean);
get is_focus(): boolean;
set is_focus(val: boolean);
get isFocus(): boolean;
set isFocus(val: boolean);
/**
 * Sets all four sides' margin at once. If read, returns max
 * margin on any side.
 */
get margin(): number;
set margin(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_bottom(): number;
set margin_bottom(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginBottom(): number;
set marginBottom(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_end(): number;
set margin_end(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginEnd(): number;
set marginEnd(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_left(): number;
set margin_left(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginLeft(): number;
set marginLeft(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_right(): number;
set margin_right(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginRight(): number;
set marginRight(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_start(): number;
set margin_start(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginStart(): number;
set marginStart(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_top(): number;
set margin_top(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginTop(): number;
set marginTop(val: number);
get name(): string;
set name(val: string);
get no_show_all(): boolean;
set no_show_all(val: boolean);
get noShowAll(): boolean;
set noShowAll(val: boolean);
/**
 * The requested opacity of the widget. See gtk_widget_set_opacity() for
 * more details about window opacity.
 * 
 * Before 3.8 this was only available in GtkWindow
 */
get opacity(): number;
set opacity(val: number);
get parent(): Gtk.Container;
set parent(val: Gtk.Container);
get receives_default(): boolean;
set receives_default(val: boolean);
get receivesDefault(): boolean;
set receivesDefault(val: boolean);
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scale_factor(): number;
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scaleFactor(): number;
get sensitive(): boolean;
set sensitive(val: boolean);
/**
 * The style of the widget, which contains information about how it will look (colors, etc).
 */
get style(): Gtk.Style;
set style(val: Gtk.Style);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_markup(): string;
set tooltip_markup(val: string);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipMarkup(): string;
set tooltipMarkup(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_text(): string;
set tooltip_text(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipText(): string;
set tooltipText(val: string);
/**
 * How to distribute vertical space if widget gets extra space, see #GtkAlign
 */
get valign(): Gtk.Align;
set valign(val: Gtk.Align);
/**
 * Whether to expand vertically. See gtk_widget_set_vexpand().
 */
get vexpand(): boolean;
set vexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpand_set(): boolean;
set vexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpandSet(): boolean;
set vexpandSet(val: boolean);
get visible(): boolean;
set visible(val: boolean);
get width_request(): number;
set width_request(val: number);
get widthRequest(): number;
set widthRequest(val: number);
/**
 * The widget's window if it is realized, %NULL otherwise.
 */
get window(): Gdk.Window;

// Inherited methods
adopt(child: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 * @returns %TRUE if the dock item was closed
 */
close(): boolean
/**
 * Emits the #DzlDockItem::presented signal.
 * 
 * Containers should emit this when their descendant has been presented as the
 * current visible child. This allows dock items to do lazy initialization of
 * content once the widgetry is visible to the user.
 * 
 * Currently, this is best effort, as there are a number of situations that
 * make covering all cases problematic.
 */
emit_presented(): void
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 * @returns %TRUE if the dock item can be closed by the user, otherwise %FALSE.
 */
get_can_close(): boolean
get_can_minimize(): boolean
get_child_visible(child: DockItem): boolean
get_child_visible(...args: never[]): any
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 * @returns A #DzlDockmanager.
 */
get_manager(): (DockManager | null)
/**
 * Gets the parent #DzlDockItem, or %NULL.
 * @returns A #DzlDockItem or %NULL.
 */
get_parent(): (DockItem | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_title(): (string | null)
has_widgets(): boolean
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 * @returns %TRUE if @child was minimized. Otherwise %FALSE and @position   may be updated to a suggested position.
 */
minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
needs_attention(): void
/**
 * This widget will walk the widget hierarchy to ensure that the
 * dock item is visible to the user.
 */
present(): void
present_child(child: DockItem): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 * @returns a #GIcon or %NULL
 */
ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
release(child: DockItem): void
set_child_visible(child: DockItem, child_visible: boolean): void
set_child_visible(...args: never[]): any
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
set_manager(manager?: (DockManager | null)): void
update_visibility(): void
vfunc_can_minimize(descendant: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 */
vfunc_close(): boolean
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 */
vfunc_get_can_close(): boolean
vfunc_get_child_visible(child: DockItem): boolean
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 */
vfunc_get_manager(): (DockManager | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_title(): (string | null)
vfunc_manager_set(old_manager: DockManager): void
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 */
vfunc_minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
vfunc_needs_attention(): void
vfunc_present_child(child: DockItem): void
vfunc_presented(): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 */
vfunc_ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
vfunc_release(child: DockItem): void
vfunc_set_child_visible(child: DockItem, child_visible: boolean): void
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
vfunc_set_manager(manager?: (DockManager | null)): void
vfunc_update_visibility(): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
/**
 * For widgets that can be “activated” (buttons, menu items, etc.)
 * this function activates them. Activation is what happens when you
 * press Enter on a widget during key navigation. If `widget` isn't
 * activatable, the function returns %FALSE.
 * @returns %TRUE if the widget was activatable
 */
activate(): boolean
/**
 * Installs an accelerator for this `widget` in `accel_group` that causes
 * `accel_signal` to be emitted if the accelerator is activated.
 * The `accel_group` needs to be added to the widget’s toplevel via
 * gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
 * Accelerators added through this function are not user changeable during
 * runtime. If you want to support accelerators that can be changed by the
 * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
 * gtk_menu_item_set_accel_path() instead.
 * @param accel_signal widget signal to emit on accelerator activation
 * @param accel_group accel group for this widget, added to its toplevel
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @param accel_flags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
 */
add_accelerator(accel_signal: string, accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): void
/**
 * Adds the device events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_device_events() for details.
 * @param device a #GdkDevice
 * @param events an event mask, see #GdkEventMask
 */
add_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Adds the events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_events() and the
 * [input handling overview][event-masks] for details.
 * @param events an event mask, see #GdkEventMask
 */
add_events(events: number): void
/**
 * Adds a widget to the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
 * list of mnemonic labels for the widget is cleared when the
 * widget is destroyed, so the caller must make sure to update
 * its internal state at this point as well, by using a connection
 * to the #GtkWidget::destroy signal or a weak notifier.
 * @param label a #GtkWidget that acts as a mnemonic label for @widget
 */
add_mnemonic_label(label: Gtk.Widget): void
/**
 * Queues an animation frame update and adds a callback to be called
 * before each frame. Until the tick callback is removed, it will be
 * called frequently (usually at the frame rate of the output device
 * or as quickly as the application can be repainted, whichever is
 * slower). For this reason, is most suitable for handling graphics
 * that change every frame or every few frames. The tick callback does
 * not automatically imply a relayout or repaint. If you want a
 * repaint or relayout, and aren’t changing widget properties that
 * would trigger that (for example, changing the text of a #GtkLabel),
 * then you will have to call gtk_widget_queue_resize() or
 * gtk_widget_queue_draw_area() yourself.
 * 
 * gdk_frame_clock_get_frame_time() should generally be used for timing
 * continuous animations and
 * gdk_frame_timings_get_predicted_presentation_time() if you are
 * trying to display isolated frames at particular times.
 * 
 * This is a more convenient alternative to connecting directly to the
 * #GdkFrameClock::update signal of #GdkFrameClock, since you don't
 * have to worry about when a #GdkFrameClock is assigned to a widget.
 * @param callback function to call for updating animations
 * @returns an id for the connection of this callback. Remove the callback     by passing it to gtk_widget_remove_tick_callback()
 */
add_tick_callback(callback: Gtk.TickCallback): number
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 * @returns %TRUE if the accelerator can be activated.
 */
can_activate_accel(signal_id: number): boolean
/**
 * This function is used by custom widget implementations; if you're
 * writing an app, you’d use gtk_widget_grab_focus() to move the focus
 * to a particular widget, and gtk_container_set_focus_chain() to
 * change the focus tab order. So you may want to investigate those
 * functions instead.
 * 
 * gtk_widget_child_focus() is called by containers as the user moves
 * around the window using keyboard shortcuts. `direction` indicates
 * what kind of motion is taking place (up, down, left, right, tab
 * forward, tab backward). gtk_widget_child_focus() emits the
 * #GtkWidget::focus signal; widgets override the default handler
 * for this signal in order to implement appropriate focus behavior.
 * 
 * The default ::focus handler for a widget should return %TRUE if
 * moving in `direction` left the focus on a focusable location inside
 * that widget, and %FALSE if moving in `direction` moved the focus
 * outside the widget. If returning %TRUE, widgets normally
 * call gtk_widget_grab_focus() to place the focus accordingly;
 * if returning %FALSE, they don’t modify the current focus location.
 * @param direction direction of focus movement
 * @returns %TRUE if focus ended up inside @widget
 */
child_focus(direction: Gtk.DirectionType): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
child_notify(child_property: string): void
child_notify(...args: never[]): any
/**
 * Same as gtk_widget_path(), but always uses the name of a widget’s type,
 * never uses a custom name set with gtk_widget_set_name().
 */
class_path(): [number, string, string]
/**
 * Computes whether a container should give this widget extra space
 * when possible. Containers should check this, rather than
 * looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
 * 
 * This function already checks whether the widget is visible, so
 * visibility does not need to be checked separately. Non-visible
 * widgets are not expanded.
 * 
 * The computed expand value uses either the expand setting explicitly
 * set on the widget itself, or, if none has been explicitly set,
 * the widget may expand if some of its children do.
 * @param orientation expand direction
 * @returns whether widget tree rooted here should be expanded
 */
compute_expand(orientation: Gtk.Orientation): boolean
/**
 * Creates a new #PangoContext with the appropriate font map,
 * font options, font description, and base direction for drawing
 * text for this widget. See also gtk_widget_get_pango_context().
 * @returns the new #PangoContext
 */
create_pango_context(): Pango.Context
/**
 * Creates a new #PangoLayout with the appropriate font map,
 * font description, and base direction for drawing text for
 * this widget.
 * 
 * If you keep a #PangoLayout created in this way around, you need
 * to re-create it when the widget #PangoContext is replaced.
 * This can be tracked by using the #GtkWidget::screen-changed signal
 * on the widget.
 * @param text text to set on the layout (can be %NULL)
 * @returns the new #PangoLayout
 */
create_pango_layout(text?: (string | null)): Pango.Layout
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
destroy(): void
/**
 * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
 * %NULL.  It’s intended to be used as a callback connected to the
 * “destroy” signal of a widget. You connect gtk_widget_destroyed()
 * as a signal handler, and pass the address of your widget variable
 * as user data. Then when the widget is destroyed, the variable will
 * be set to %NULL. Useful for example to avoid multiple copies
 * of the same dialog.
 * @param widget_pointer address of a variable that contains @widget
 */
destroyed(widget_pointer: Gtk.Widget): Gtk.Widget
/**
 * Returns %TRUE if `device` has been shadowed by a GTK+
 * device grab on another widget, so it would stop sending
 * events to `widget`. This may be used in the
 * #GtkWidget::grab-notify signal to check for specific
 * devices. See gtk_device_grab_add().
 * @param device a #GdkDevice
 * @returns %TRUE if there is an ongoing grab on @device          by another #GtkWidget than @widget.
 */
device_is_shadowed(device: Gdk.Device): boolean
/**
 * This function is equivalent to gtk_drag_begin_with_coordinates(),
 * passing -1, -1 as coordinates.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @returns the context for this drag
 */
drag_begin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: (Gdk.Event | null)): Gdk.DragContext
/**
 * Initiates a drag on the source side. The function only needs to be used
 * when the application is starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is %NULL, then %GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used to get information about the drag.
 * 
 * Generally there are three cases when you want to start a drag by hand by
 * calling this function:
 * 
 * 1. During a #GtkWidget::button-press-event handler, if you want to start a drag
 * immediately when the user presses the mouse button.  Pass the `event`
 * that you have in your #GtkWidget::button-press-event handler.
 * 
 * 2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
 * when the mouse moves past a certain threshold distance after a button-press.
 * Pass the `event` that you have in your #GtkWidget::motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).
 * If you really cannot pass a real event, pass %NULL instead.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @param x The initial x coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @param y The initial y coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @returns the context for this drag
 */
drag_begin_with_coordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: (Gdk.Event | null), x: number, y: number): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param start_x X coordinate of start of drag
 * @param start_y Y coordinate of start of drag
 * @param current_x current X coordinate
 * @param current_y current Y coordinate
 * @returns %TRUE if the drag threshold has been passed.
 */
drag_check_threshold(start_x: number, start_y: number, current_x: number, current_y: number): boolean
/**
 * Add the image targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_uri_targets(): void
/**
 * Looks for a match between the supported targets of `context` and the
 * `dest_target_list,` returning the first matching target, otherwise
 * returning %GDK_NONE. `dest_target_list` should usually be the return
 * value from gtk_drag_dest_get_target_list(), but some widgets may
 * have different valid targets for different parts of the widget; in
 * that case, they will have to implement a drag_motion handler that
 * passes the correct target list to this function.
 * @param context drag context
 * @param target_list list of droppable targets, or %NULL to use    gtk_drag_dest_get_target_list (@widget).
 * @returns first target that the source offers     and the dest can accept, or %GDK_NONE
 */
drag_dest_find_target(context: Gdk.DragContext, target_list?: (Gtk.TargetList | null)): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_dest_get_target_list(): (Gtk.TargetList | null)
/**
 * Returns whether the widget has been configured to always
 * emit #GtkWidget::drag-motion signals.
 * @returns %TRUE if the widget always emits   #GtkWidget::drag-motion events
 */
drag_dest_get_track_motion(): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget’s drag-and-drop signals
 * (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget’s #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget::drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget::drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There’s no way to set a default action here, you can use the
 * #GtkWidget::drag-motion callback for that. Here’s an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * 
 * ```c
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of     #GtkTargetEntrys indicating the drop types that this @widget will     accept, or %NULL. Later you can access the list with     gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this @widget.
 */
drag_dest_set(flags: Gtk.DestDefaults, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets this widget as a proxy for drops to another window.
 * @param proxy_window the window to which to forward drag events
 * @param protocol the drag protocol which the @proxy_window accepts   (You can use gdk_drag_get_protocol() to determine this)
 * @param use_coordinates If %TRUE, send the same coordinates to the   destination, because it is an embedded   subwindow.
 */
drag_dest_set_proxy(proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param target_list list of droppable targets, or %NULL for none
 */
drag_dest_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Tells the widget to emit #GtkWidget::drag-motion and
 * #GtkWidget::drag-leave events regardless of the targets and the
 * %GTK_DEST_DEFAULT_MOTION flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param track_motion whether to accept all targets
 */
drag_dest_set_track_motion(track_motion: boolean): void
/**
 * Clears information about a drop destination set with
 * gtk_drag_dest_set(). The widget will no longer receive
 * notification of drags.
 */
drag_dest_unset(): void
/**
 * Gets the data associated with a drag. When the data
 * is received or the retrieval fails, GTK+ will emit a
 * #GtkWidget::drag-data-received signal. Failure of the retrieval
 * is indicated by the length field of the `selection_data`
 * signal parameter being negative. However, when gtk_drag_get_data()
 * is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
 * then the widget will not receive notification of failed
 * drops.
 * @param context the drag context
 * @param target the target (form of the data) to retrieve
 * @param time_ a timestamp for retrieving the data. This will   generally be the time received in a #GtkWidget::drag-motion   or #GtkWidget::drag-drop signal
 */
drag_get_data(context: Gdk.DragContext, target: Gdk.Atom, time_: number): void
/**
 * Highlights a widget as a currently hovered drop target.
 * To end the highlight, call gtk_drag_unhighlight().
 * GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
 */
drag_highlight(): void
/**
 * Add the writable image targets supported by #GtkSelectionData to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_uri_targets(): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_source_get_target_list(): (Gtk.TargetList | null)
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param start_button_mask the bitmask of buttons that can start the drag
 * @param targets the table of targets     that the drag will support, may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
drag_source_set(start_button_mask: Gdk.ModifierType, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to `icon`. See the docs for #GtkIconTheme for more details.
 * @param icon A #GIcon
 */
drag_source_set_icon_gicon(icon: Gio.Icon): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param icon_name name of icon to use
 */
drag_source_set_icon_name(icon_name: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
drag_source_set_icon_pixbuf(pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param stock_id the ID of the stock icon to use
 */
drag_source_set_icon_stock(stock_id: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param target_list list of draggable targets, or %NULL for none
 */
drag_source_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Undoes the effects of gtk_drag_source_set().
 */
drag_source_unset(): void
/**
 * Removes a highlight set by gtk_drag_highlight() from
 * a widget.
 */
drag_unhighlight(): void
/**
 * Draws `widget` to `cr`. The top left corner of the widget will be
 * drawn to the currently set origin point of `cr`.
 * 
 * You should pass a cairo context as `cr` argument that is in an
 * original state. Otherwise the resulting drawing is undefined. For
 * example changing the operator using cairo_set_operator() or the
 * line width using cairo_set_line_width() might have unwanted side
 * effects.
 * You may however change the context’s transform matrix - like with
 * cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
 * region with cairo_clip() prior to calling this function. Also, it
 * is fine to modify the context with cairo_save() and
 * cairo_push_group() prior to calling this function.
 * 
 * Note that special-purpose widgets may contain special code for
 * rendering to the screen and might appear differently on screen
 * and when rendered using gtk_widget_draw().
 * @param cr a cairo context to draw to
 */
draw(cr: cairo.Context): void
/**
 * Ensures that `widget` has a style (`widget->`style).
 * 
 * Not a very useful function; most of the time, if you
 * want the style, the widget is realized, and realized
 * widgets are guaranteed to have a style already.
 */
ensure_style(): void
/**
 * Notifies the user about an input-related error on this widget.
 * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
 * gdk_window_beep(), otherwise it does nothing.
 * 
 * Note that the effect of gdk_window_beep() can be configured in many
 * ways, depending on the windowing backend and the desktop environment
 * or window manager that is used.
 */
error_bell(): void
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 * @returns return from the event signal emission (%TRUE if               the event was handled)
 */
event(event: Gdk.Event): boolean
/**
 * Stops emission of #GtkWidget::child-notify signals on `widget`. The
 * signals are queued until gtk_widget_thaw_child_notify() is called
 * on `widget`.
 * 
 * This is the analogue of g_object_freeze_notify() for child properties.
 */
freeze_child_notify(): void
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 * @returns the #AtkObject associated with @widget
 */
get_accessible(): Atk.Object
/**
 * Retrieves the #GActionGroup that was registered using `prefix`. The resulting
 * #GActionGroup may have been registered to `widget` or any #GtkWidget in its
 * ancestry.
 * 
 * If no action group was found matching `prefix,` then %NULL is returned.
 * @param prefix The “prefix” of the action group.
 * @returns A #GActionGroup or %NULL.
 */
get_action_group(prefix: string): (Gio.ActionGroup | null)
/**
 * Returns the baseline that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function, and when allocating child
 * widgets in #GtkWidget::size_allocate.
 * @returns the baseline of the @widget, or -1 if none
 */
get_allocated_baseline(): number
/**
 * Returns the height that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the height of the @widget
 */
get_allocated_height(): number
/**
 * Retrieves the widget’s allocated size.
 * 
 * This function returns the last values passed to
 * gtk_widget_size_allocate_with_baseline(). The value differs from
 * the size returned in gtk_widget_get_allocation() in that functions
 * like gtk_widget_set_halign() can adjust the allocation, but not
 * the value returned by this function.
 * 
 * If a widget is not visible, its allocated size is 0.
 */
get_allocated_size(): [Gtk.Allocation, number]
/**
 * Returns the width that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the width of the @widget
 */
get_allocated_width(): number
/**
 * Retrieves the widget’s allocation.
 * 
 * Note, when implementing a #GtkContainer: a widget’s allocation will
 * be its “adjusted” allocation, that is, the widget’s parent
 * container typically calls gtk_widget_size_allocate() with an
 * allocation, and that allocation is then adjusted (to handle margin
 * and alignment for example) before assignment to the widget.
 * gtk_widget_get_allocation() returns the adjusted allocation that
 * was actually assigned to the widget. The adjusted allocation is
 * guaranteed to be completely contained within the
 * gtk_widget_size_allocate() allocation, however. So a #GtkContainer
 * is guaranteed that its children stay inside the assigned bounds,
 * but not that they have exactly the bounds the container assigned.
 * There is no way to get the original allocation assigned by
 * gtk_widget_size_allocate(), since it isn’t stored; if a container
 * implementation needs that information it will have to track it itself.
 */
get_allocation(): Gtk.Allocation
/**
 * Gets the first ancestor of `widget` with type `widget_type`. For example,
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
 * the first #GtkBox that’s an ancestor of `widget`. No reference will be
 * added to the returned widget; it should not be unreferenced. See note
 * about checking for a toplevel #GtkWindow in the docs for
 * gtk_widget_get_toplevel().
 * 
 * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
 * considers `widget` to be an ancestor of itself.
 * @param widget_type ancestor type
 * @returns the ancestor widget, or %NULL if not found
 */
get_ancestor(widget_type: GObject.GType): (Gtk.Widget | null)
/**
 * Determines whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * See gtk_widget_set_app_paintable()
 * @returns %TRUE if the widget is app paintable
 */
get_app_paintable(): boolean
/**
 * Determines whether `widget` can be a default widget. See
 * gtk_widget_set_can_default().
 * @returns %TRUE if @widget can be a default widget, %FALSE otherwise
 */
get_can_default(): boolean
/**
 * Determines whether `widget` can own the input focus. See
 * gtk_widget_set_can_focus().
 * @returns %TRUE if @widget can own the input focus, %FALSE otherwise
 */
get_can_focus(): boolean
/**
 * This function is only for use in widget implementations. Obtains
 * `widget->`requisition, unless someone has forced a particular
 * geometry on the widget (e.g. with gtk_widget_set_size_request()),
 * in which case it returns that geometry instead of the widget's
 * requisition.
 * 
 * This function differs from gtk_widget_size_request() in that
 * it retrieves the last size request value from `widget->`requisition,
 * while gtk_widget_size_request() actually calls the "size_request" method
 * on `widget` to compute the size request and fill in `widget->`requisition,
 * and only then returns `widget->`requisition.
 * 
 * Because this function does not call the “size_request” method, it
 * can only be used when you know that `widget->`requisition is
 * up-to-date, that is, gtk_widget_size_request() has been called
 * since the last time a resize was queued. In general, only container
 * implementations have this information; applications should use
 * gtk_widget_size_request().
 */
get_child_requisition(): Gtk.Requisition
/**
 * Retrieves the widget’s clip area.
 * 
 * The clip area is the area in which all of `widget'`s drawing will
 * happen. Other toolkits call it the bounding box.
 * 
 * Historically, in GTK+ the clip area has been equal to the allocation
 * retrieved via gtk_widget_get_allocation().
 */
get_clip(): Gtk.Allocation
/**
 * Returns the clipboard object for the given selection to
 * be used with `widget`. `widget` must have a #GdkDisplay
 * associated with it, so must be attached to a toplevel
 * window.
 * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
 * @returns the appropriate clipboard object. If no             clipboard already exists, a new one will             be created. Once a clipboard object has             been created, it is persistent for all time.
 */
get_clipboard(selection: Gdk.Atom): Gtk.Clipboard
/**
 * Obtains the composite name of a widget.
 * @returns the composite name of @widget, or %NULL if @widget is not   a composite child. The string should be freed when it is no   longer needed.
 */
get_composite_name(): string
/**
 * Returns whether `device` can interact with `widget` and its
 * children. See gtk_widget_set_device_enabled().
 * @param device a #GdkDevice
 * @returns %TRUE is @device is enabled for @widget
 */
get_device_enabled(device: Gdk.Device): boolean
/**
 * Returns the events mask for the widget corresponding to an specific device. These
 * are the events that the widget will receive when `device` operates on it.
 * @param device a #GdkDevice
 * @returns device event mask for @widget
 */
get_device_events(device: Gdk.Device): Gdk.EventMask
/**
 * Gets the reading direction for a particular widget. See
 * gtk_widget_set_direction().
 * @returns the reading direction for the widget.
 */
get_direction(): Gtk.TextDirection
/**
 * Get the #GdkDisplay for the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow at the top.
 * 
 * In general, you should only create display specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkDisplay for the toplevel for this widget.
 */
get_display(): Gdk.Display
/**
 * Determines whether the widget is double buffered.
 * 
 * See gtk_widget_set_double_buffered()
 * @returns %TRUE if the widget is double buffered
 */
get_double_buffered(): boolean
/**
 * Returns the event mask (see #GdkEventMask) for the widget. These are the
 * events that the widget will receive.
 * 
 * Note: Internally, the widget event mask will be the logical OR of the event
 * mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
 * event mask necessary to cater for every #GtkEventController created for the
 * widget.
 * @returns event mask for @widget
 */
get_events(): number
/**
 * Returns whether the widget should grab focus when it is clicked with the mouse.
 * See gtk_widget_set_focus_on_click().
 * @returns %TRUE if the widget should grab focus when it is clicked with               the mouse.
 */
get_focus_on_click(): boolean
/**
 * Gets the font map that has been set with gtk_widget_set_font_map().
 * @returns A #PangoFontMap, or %NULL
 */
get_font_map(): (Pango.FontMap | null)
/**
 * Returns the #cairo_font_options_t used for Pango rendering. When not set,
 * the defaults font options for the #GdkScreen will be used.
 * @returns the #cairo_font_options_t or %NULL if not set
 */
get_font_options(): (cairo.FontOptions | null)
/**
 * Obtains the frame clock for a widget. The frame clock is a global
 * “ticker” that can be used to drive animations and repaints.  The
 * most common reason to get the frame clock is to call
 * gdk_frame_clock_get_frame_time(), in order to get a time to use for
 * animating. For example you might record the start of the animation
 * with an initial value from gdk_frame_clock_get_frame_time(), and
 * then update the animation by calling
 * gdk_frame_clock_get_frame_time() again during each repaint.
 * 
 * gdk_frame_clock_request_phase() will result in a new frame on the
 * clock, but won’t necessarily repaint any widgets. To repaint a
 * widget, you have to use gtk_widget_queue_draw() which invalidates
 * the widget (thus scheduling it to receive a draw on the next
 * frame). gtk_widget_queue_draw() will also end up requesting a frame
 * on the appropriate frame clock.
 * 
 * A widget’s frame clock will not change while the widget is
 * mapped. Reparenting a widget (which implies a temporary unmap) can
 * change the widget’s frame clock.
 * 
 * Unrealized widgets do not have a frame clock.
 * @returns a #GdkFrameClock, or %NULL if widget is unrealized
 */
get_frame_clock(): (Gdk.FrameClock | null)
/**
 * Gets the value of the #GtkWidget:halign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
 * alignment.
 * @returns the horizontal alignment of @widget
 */
get_halign(): Gtk.Align
/**
 * Returns the current value of the has-tooltip property.  See
 * #GtkWidget:has-tooltip for more information.
 * @returns current value of has-tooltip on @widget.
 */
get_has_tooltip(): boolean
/**
 * Determines whether `widget` has a #GdkWindow of its own. See
 * gtk_widget_set_has_window().
 * @returns %TRUE if @widget has a window, %FALSE otherwise
 */
get_has_window(): boolean
/**
 * Gets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Containers should use gtk_widget_compute_expand() rather than
 * this function, to see whether a widget, or any of its children,
 * has the expand flag set. If any child of a widget wants to
 * expand, the parent may ask to expand also.
 * 
 * This function only looks at the widget’s own hexpand flag, rather
 * than computing whether the entire widget tree rooted at this widget
 * wants to expand.
 * @returns whether hexpand flag is set
 */
get_hexpand(): boolean
/**
 * Gets whether gtk_widget_set_hexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @returns whether hexpand has been explicitly set
 */
get_hexpand_set(): boolean
/**
 * Whether the widget is mapped.
 * @returns %TRUE if the widget is mapped, %FALSE otherwise.
 */
get_mapped(): boolean
/**
 * Gets the value of the #GtkWidget:margin-bottom property.
 * @returns The bottom margin of @widget
 */
get_margin_bottom(): number
/**
 * Gets the value of the #GtkWidget:margin-end property.
 * @returns The end margin of @widget
 */
get_margin_end(): number
/**
 * Gets the value of the #GtkWidget:margin-left property.
 * @returns The left margin of @widget
 */
get_margin_left(): number
/**
 * Gets the value of the #GtkWidget:margin-right property.
 * @returns The right margin of @widget
 */
get_margin_right(): number
/**
 * Gets the value of the #GtkWidget:margin-start property.
 * @returns The start margin of @widget
 */
get_margin_start(): number
/**
 * Gets the value of the #GtkWidget:margin-top property.
 * @returns The top margin of @widget
 */
get_margin_top(): number
/**
 * Returns the modifier mask the `widget’`s windowing system backend
 * uses for a particular purpose.
 * 
 * See gdk_keymap_get_modifier_mask().
 * @param intent the use case for the modifier mask
 * @returns the modifier mask used for @intent.
 */
get_modifier_mask(intent: Gdk.ModifierIntent): Gdk.ModifierType
/**
 * Returns the current modifier style for the widget. (As set by
 * gtk_widget_modify_style().) If no style has previously set, a new
 * #GtkRcStyle will be created with all values unset, and set as the
 * modifier style for the widget. If you make changes to this rc
 * style, you must call gtk_widget_modify_style(), passing in the
 * returned rc style, to make sure that your changes take effect.
 * 
 * Caution: passing the style back to gtk_widget_modify_style() will
 * normally end up destroying it, because gtk_widget_modify_style() copies
 * the passed-in style and sets the copy as the new modifier style,
 * thus dropping any reference to the old modifier style. Add a reference
 * to the modifier style if you want to keep it alive.
 * @returns the modifier style for the widget.     This rc style is owned by the widget. If you want to keep a     pointer to value this around, you must add a refcount using     g_object_ref().
 */
get_modifier_style(): Gtk.RcStyle
/**
 * Retrieves the name of a widget. See gtk_widget_set_name() for the
 * significance of widget names.
 * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
 */
get_name(): string
/**
 * Returns the current value of the #GtkWidget:no-show-all property,
 * which determines whether calls to gtk_widget_show_all()
 * will affect this widget.
 * @returns the current value of the “no-show-all” property.
 */
get_no_show_all(): boolean
/**
 * Fetches the requested opacity for this widget.
 * See gtk_widget_set_opacity().
 * @returns the requested opacity for this widget.
 */
get_opacity(): number
/**
 * Gets a #PangoContext with the appropriate font map, font description,
 * and base direction for this widget. Unlike the context returned
 * by gtk_widget_create_pango_context(), this context is owned by
 * the widget (it can be used until the screen for the widget changes
 * or the widget is removed from its toplevel), and will be updated to
 * match any changes to the widget’s attributes. This can be tracked
 * by using the #GtkWidget::screen-changed signal on the widget.
 * @returns the #PangoContext for the widget.
 */
get_pango_context(): Pango.Context
/**
 * Gets `widget’`s parent window, or %NULL if it does not have one.
 * @returns the parent window of @widget, or %NULL if it does not have a parent window.
 */
get_parent_window(): (Gdk.Window | null)
/**
 * Returns the #GtkWidgetPath representing `widget,` if the widget
 * is not connected to a toplevel widget, a partial path will be
 * created.
 * @returns The #GtkWidgetPath representing @widget
 */
get_path(): Gtk.WidgetPath
/**
 * Obtains the location of the mouse pointer in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(); and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 */
get_pointer(): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves the minimum and natural size of a widget, taking
 * into account the widget’s preference for height-for-width management.
 * 
 * This is used to retrieve a suitable size by container widgets which do
 * not impose any restrictions on the child placement. It can be used
 * to deduce toplevel window and menu sizes as well as child widgets in
 * free-form containers such as GtkLayout.
 * 
 * Handle with care. Note that the natural height of a height-for-width
 * widget will generally be a smaller size than the minimum height, since the required
 * height for the natural width is generally smaller than the required height for
 * the minimum width.
 * 
 * Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
 * baseline alignment.
 */
get_preferred_size(): [Gtk.Requisition | null, Gtk.Requisition | null]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
get_preferred_width_for_height(height: number): [number, number]
/**
 * Determines whether `widget` is realized.
 * @returns %TRUE if @widget is realized, %FALSE otherwise
 */
get_realized(): boolean
/**
 * Determines whether `widget` is always treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_set_receives_default().
 * @returns %TRUE if @widget acts as the default widget when focused,               %FALSE otherwise
 */
get_receives_default(): boolean
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 * @returns The #GtkSizeRequestMode preferred by @widget.
 */
get_request_mode(): Gtk.SizeRequestMode
/**
 * Retrieves the widget’s requisition.
 * 
 * This function should only be used by widget implementations in
 * order to figure whether the widget’s requisition has actually
 * changed after some internal state change (so that they can call
 * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
 * 
 * Normally, gtk_widget_size_request() should be used.
 */
get_requisition(): Gtk.Requisition
/**
 * Get the root window where this widget is located. This function can
 * only be called after the widget has been added to a widget
 * hierarchy with #GtkWindow at the top.
 * 
 * The root window is useful for such purposes as creating a popup
 * #GdkWindow associated with the window. In general, you should only
 * create display specific resources when a widget has been realized,
 * and you should free those resources when the widget is unrealized.
 * @returns the #GdkWindow root window for the toplevel for this widget.
 */
get_root_window(): Gdk.Window
/**
 * Retrieves the internal scale factor that maps from window coordinates
 * to the actual device pixels. On traditional systems this is 1, on
 * high density outputs, it can be a higher value (typically 2).
 * 
 * See gdk_window_get_scale_factor().
 * @returns the scale factor for @widget
 */
get_scale_factor(): number
/**
 * Get the #GdkScreen from the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow
 * at the top.
 * 
 * In general, you should only create screen specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkScreen for the toplevel for this widget.
 */
get_screen(): Gdk.Screen
/**
 * Returns the widget’s sensitivity (in the sense of returning
 * the value that has been set using gtk_widget_set_sensitive()).
 * 
 * The effective sensitivity of a widget is however determined by both its
 * own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
 * @returns %TRUE if the widget is sensitive
 */
get_sensitive(): boolean
/**
 * Gets the settings object holding the settings used for this widget.
 * 
 * Note that this function can only be called when the #GtkWidget
 * is attached to a toplevel, since the settings object is specific
 * to a particular #GdkScreen.
 * @returns the relevant #GtkSettings object
 */
get_settings(): Gtk.Settings
/**
 * Gets the size request that was explicitly set for the widget using
 * gtk_widget_set_size_request(). A value of -1 stored in `width` or
 * `height` indicates that that dimension has not been set explicitly
 * and the natural requisition of the widget will be used instead. See
 * gtk_widget_set_size_request(). To get the size a widget will
 * actually request, call gtk_widget_get_preferred_size() instead of
 * this function.
 */
get_size_request(): [number, number]
/**
 * Returns the widget’s state. See gtk_widget_set_state().
 * @returns the state of @widget.
 */
get_state(): Gtk.StateType
/**
 * Returns the widget state as a flag set. It is worth mentioning
 * that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
 * returned, that is, also based on parent insensitivity, even if
 * `widget` itself is sensitive.
 * 
 * Also note that if you are looking for a way to obtain the
 * #GtkStateFlags to pass to a #GtkStyleContext method, you
 * should look at gtk_style_context_get_state().
 * @returns The state flags for widget
 */
get_state_flags(): Gtk.StateFlags
/**
 * Simply an accessor function that returns `widget->`style.
 * @returns the widget’s #GtkStyle
 */
get_style(): Gtk.Style
/**
 * Returns the style context associated to `widget`. The returned object is
 * guaranteed to be the same for the lifetime of `widget`.
 * @returns a #GtkStyleContext. This memory is owned by @widget and          must not be freed.
 */
get_style_context(): Gtk.StyleContext
/**
 * Returns %TRUE if `widget` is multiple pointer aware. See
 * gtk_widget_set_support_multidevice() for more information.
 * @returns %TRUE if @widget is multidevice aware.
 */
get_support_multidevice(): boolean
/**
 * Fetch an object build from the template XML for `widget_type` in this `widget` instance.
 * 
 * This will only report children which were previously declared with
 * gtk_widget_class_bind_template_child_full() or one of its
 * variants.
 * 
 * This function is only meant to be called for code which is private to the `widget_type` which
 * declared the child and is meant for language bindings which cannot easily make use
 * of the GObject structure offsets.
 * @param widget_type The #GType to get a template child for
 * @param name The “id” of the child defined in the template XML
 * @returns The object built in the template XML with the id @name
 */
get_template_child<T = GObject.Object>(widget_type: GObject.GType, name: string): T
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_markup(): (string | null)
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_text(): (string | null)
/**
 * Returns the #GtkWindow of the current tooltip. This can be the
 * GtkWindow created by default, or the custom tooltip window set
 * using gtk_widget_set_tooltip_window().
 * @returns The #GtkWindow of the current tooltip.
 */
get_tooltip_window(): Gtk.Window
/**
 * This function returns the topmost widget in the container hierarchy
 * `widget` is a part of. If `widget` has no parent widgets, it will be
 * returned as the topmost widget. No reference will be added to the
 * returned widget; it should not be unreferenced.
 * 
 * Note the difference in behavior vs. gtk_widget_get_ancestor();
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
 * would return
 * %NULL if `widget` wasn’t inside a toplevel window, and if the
 * window was inside a #GtkWindow-derived widget which was in turn
 * inside the toplevel #GtkWindow. While the second case may
 * seem unlikely, it actually happens when a #GtkPlug is embedded
 * inside a #GtkSocket within the same application.
 * 
 * To reliably find the toplevel #GtkWindow, use
 * gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
 * on the result. For instance, to get the title of a widget's toplevel
 * window, one might use:
 * 
 * ```c
 * static const char *
 * get_widget_toplevel_title (GtkWidget *widget)
 * {
 *   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 *   if (GTK_IS_WINDOW (toplevel))
 *     {
 *       return gtk_window_get_title (GTK_WINDOW (toplevel));
 *     }
 * 
 *   return NULL;
 * }
 * ```
 * 
 * @returns the topmost ancestor of @widget, or @widget itself    if there’s no ancestor.
 */
get_toplevel(): Gtk.Widget
/**
 * Gets the value of the #GtkWidget:valign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. If your widget want to support baseline aligned
 * children it must use gtk_widget_get_valign_with_baseline(), or
 * `g_object_get (widget, "valign", &value, NULL)`, which will
 * also report the true value.
 * @returns the vertical alignment of @widget, ignoring baseline alignment
 */
get_valign(): Gtk.Align
/**
 * Gets the value of the #GtkWidget:valign property, including
 * %GTK_ALIGN_BASELINE.
 * @returns the vertical alignment of @widget
 */
get_valign_with_baseline(): Gtk.Align
/**
 * Gets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_get_hexpand() for more detail.
 * @returns whether vexpand flag is set
 */
get_vexpand(): boolean
/**
 * Gets whether gtk_widget_set_vexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * See gtk_widget_get_hexpand_set() for more detail.
 * @returns whether vexpand has been explicitly set
 */
get_vexpand_set(): boolean
/**
 * Determines whether the widget is visible. If you want to
 * take into account whether the widget’s parent is also marked as
 * visible, use gtk_widget_is_visible() instead.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See gtk_widget_set_visible().
 * @returns %TRUE if the widget is visible
 */
get_visible(): boolean
/**
 * Gets the visual that will be used to render `widget`.
 * @returns the visual for @widget
 */
get_visual(): Gdk.Visual
/**
 * Returns the widget’s window if it is realized, %NULL otherwise
 * @returns @widget’s window.
 */
get_window(): (Gdk.Window | null)
/**
 * Makes `widget` the current grabbed widget.
 * 
 * This means that interaction with other widgets in the same
 * application is blocked and mouse as well as keyboard events
 * are delivered to this widget.
 * 
 * If `widget` is not sensitive, it is not set as the current
 * grabbed widget and this function does nothing.
 */
grab_add(): void
/**
 * Causes `widget` to become the default widget. `widget` must be able to be
 * a default widget; typically you would ensure this yourself
 * by calling gtk_widget_set_can_default() with a %TRUE value.
 * The default widget is activated when
 * the user presses Enter in a window. Default widgets must be
 * activatable, that is, gtk_widget_activate() should affect them. Note
 * that #GtkEntry widgets require the “activates-default” property
 * set to %TRUE before they activate the default widget when Enter
 * is pressed and the #GtkEntry is focused.
 */
grab_default(): void
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
grab_focus(): void
/**
 * Removes the grab from the given widget.
 * 
 * You have to pair calls to gtk_grab_add() and gtk_grab_remove().
 * 
 * If `widget` does not have the grab, this function does nothing.
 */
grab_remove(): void
/**
 * Determines whether the widget is currently grabbing events, so it
 * is the only widget receiving input events (keyboard and mouse).
 * 
 * See also gtk_grab_add().
 * @returns %TRUE if the widget is in the grab_widgets stack
 */
has_grab(): boolean
/**
 * Determines if the widget style has been looked up through the rc mechanism.
 * @returns %TRUE if the widget has been looked up through the rc   mechanism, %FALSE otherwise.
 */
has_rc_style(): boolean
/**
 * Checks whether there is a #GdkScreen is associated with
 * this widget. All toplevel widgets have an associated
 * screen, and all widgets added into a hierarchy with a toplevel
 * window at the top.
 * @returns %TRUE if there is a #GdkScreen associated   with the widget.
 */
has_screen(): boolean
/**
 * Determines if the widget should show a visible indication that
 * it has the global input focus. This is a convenience function for
 * use in ::draw handlers that takes into account whether focus
 * indication should currently be shown in the toplevel window of
 * `widget`. See gtk_window_get_focus_visible() for more information
 * about focus indication.
 * 
 * To find out if the widget has the global input focus, use
 * gtk_widget_has_focus().
 * @returns %TRUE if the widget should display a “focus rectangle”
 */
has_visible_focus(): boolean
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
hide(): void
/**
 * Utility function; intended to be connected to the #GtkWidget::delete-event
 * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
 * argument, then returns %TRUE. If connected to ::delete-event, the
 * result is that clicking the close button for a window (on the
 * window frame, top right corner usually) will hide but not destroy
 * the window. By default, GTK+ destroys windows when ::delete-event
 * is received.
 * @returns %TRUE
 */
hide_on_delete(): boolean
/**
 * Returns whether the widget is currently being destroyed.
 * This information can sometimes be used to avoid doing
 * unnecessary work.
 * @returns %TRUE if @widget is being destroyed
 */
in_destruction(): boolean
/**
 * Creates and initializes child widgets defined in templates. This
 * function must be called in the instance initializer for any
 * class which assigned itself a template using gtk_widget_class_set_template()
 * 
 * It is important to call this function in the instance initializer
 * of a #GtkWidget subclass and not in #GObject.constructed() or
 * #GObject.constructor() for two reasons.
 * 
 * One reason is that generally derived widgets will assume that parent
 * class composite widgets have been created in their instance
 * initializers.
 * 
 * Another reason is that when calling g_object_new() on a widget with
 * composite templates, it’s important to build the composite widgets
 * before the construct properties are set. Properties passed to g_object_new()
 * should take precedence over properties set in the private template XML.
 */
init_template(): void
/**
 * Sets an input shape for this widget’s GDK window. This allows for
 * windows which react to mouse click in a nonrectangular region, see
 * gdk_window_input_shape_combine_region() for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
input_shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Inserts `group` into `widget`. Children of `widget` that implement
 * #GtkActionable can then be associated with actions in `group` by
 * setting their “action-name” to
 * `prefix`.`action-name`.
 * 
 * If `group` is %NULL, a previously inserted group for `name` is removed
 * from `widget`.
 * @param name the prefix for actions in @group
 * @param group a #GActionGroup, or %NULL
 */
insert_action_group(name: string, group?: (Gio.ActionGroup | null)): void
/**
 * Computes the intersection of a `widget’`s area and `area,` storing
 * the intersection in `intersection,` and returns %TRUE if there was
 * an intersection.  `intersection` may be %NULL if you’re only
 * interested in whether there was an intersection.
 * @param area a rectangle
 * @returns %TRUE if there was an intersection
 */
intersect(area: Gdk.Rectangle): [boolean, Gdk.Rectangle | null]
/**
 * Determines whether `widget` is somewhere inside `ancestor,` possibly with
 * intermediate containers.
 * @param ancestor another #GtkWidget
 * @returns %TRUE if @ancestor contains @widget as a child,    grandchild, great grandchild, etc.
 */
is_ancestor(ancestor: Gtk.Widget): boolean
/**
 * Whether `widget` can rely on having its alpha channel
 * drawn correctly. On X11 this function returns whether a
 * compositing manager is running for `widget’`s screen.
 * 
 * Please note that the semantics of this call will change
 * in the future if used on a widget that has a composited
 * window in its hierarchy (as set by gdk_window_set_composited()).
 * @returns %TRUE if the widget can rely on its alpha channel being drawn correctly.
 */
is_composited(): boolean
/**
 * Determines whether `widget` can be drawn to. A widget can be drawn
 * to if it is mapped and visible.
 * @returns %TRUE if @widget is drawable, %FALSE otherwise
 */
is_drawable(): boolean
/**
 * Returns the widget’s effective sensitivity, which means
 * it is sensitive itself and also its parent widget is sensitive
 * @returns %TRUE if the widget is effectively sensitive
 */
is_sensitive(): boolean
/**
 * Determines whether `widget` is a toplevel widget.
 * 
 * Currently only #GtkWindow and #GtkInvisible (and out-of-process
 * #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
 * widget.
 * @returns %TRUE if @widget is a toplevel, %FALSE otherwise
 */
is_toplevel(): boolean
/**
 * Determines whether the widget and all its parents are marked as
 * visible.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See also gtk_widget_get_visible() and gtk_widget_set_visible()
 * @returns %TRUE if the widget and all its parents are visible
 */
is_visible(): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 * @returns %TRUE if stopping keyboard navigation is fine, %FALSE               if the emitting widget should try to handle the keyboard               navigation attempt in its parent container(s).
 */
keynav_failed(direction: Gtk.DirectionType): boolean
/**
 * Lists the closures used by `widget` for accelerator group connections
 * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
 * The closures can be used to monitor accelerator changes on `widget,`
 * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
 * #GtkAccelGroup of a closure which can be found out with
 * gtk_accel_group_from_accel_closure().
 * @returns a newly allocated #GList of closures
 */
list_accel_closures(): GObject.Closure[]
/**
 * Retrieves a %NULL-terminated array of strings containing the prefixes of
 * #GActionGroup's available to `widget`.
 * @returns a %NULL-terminated array of strings.
 */
list_action_prefixes(): string[]
/**
 * Returns a newly allocated list of the widgets, normally labels, for
 * which this widget is the target of a mnemonic (see for example,
 * gtk_label_set_mnemonic_widget()).
 * 
 * The widgets in the list are not individually referenced. If you
 * want to iterate through the list and perform actions involving
 * callbacks that might destroy the widgets, you
 * must call `g_list_foreach (result,
 * (GFunc)g_object_ref, NULL)` first, and then unref all the
 * widgets afterwards.
 * @returns the list of  mnemonic labels; free this list  with g_list_free() when you are done with it.
 */
list_mnemonic_labels(): Gtk.Widget[]
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
map(): void
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 * @returns %TRUE if the signal has been handled
 */
mnemonic_activate(group_cycling: boolean): boolean
/**
 * Sets the base color for a widget in a particular state.
 * All other style values are left untouched. The base color
 * is the background color used along with the text color
 * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
 * and #GtkTextView. See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > base color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the base color on that.
 * @param state the state for which to set the base color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_base().
 */
modify_base(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > background color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the background color on that.
 * @param state the state for which to set the background color
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_bg().
 */
modify_bg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the #GtkWidget
 * cursor-color and secondary-cursor-color
 * style properties.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param primary the color to use for primary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_cursor().
 * @param secondary the color to use for secondary cursor (does     not need to be allocated), or %NULL to undo the effect of     previous calls to of gtk_widget_modify_cursor().
 */
modify_cursor(primary?: (Gdk.Color | null), secondary?: (Gdk.Color | null)): void
/**
 * Sets the foreground color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the foreground color
 * @param color the color to assign (does not need to be allocated),     or %NULL to undo the effect of previous calls to     of gtk_widget_modify_fg().
 */
modify_fg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the font to use for a widget.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param font_desc the font description to use, or %NULL     to undo the effect of previous calls to gtk_widget_modify_font()
 */
modify_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Modifies style values on the widget.
 * 
 * Modifications made using this technique take precedence over
 * style values set via an RC file, however, they will be overridden
 * if a style is explicitly set on the widget using gtk_widget_set_style().
 * The #GtkRcStyle-struct is designed so each field can either be
 * set or unset, so it is possible, using this function, to modify some
 * style values and leave the others unchanged.
 * 
 * Note that modifications made with this function are not cumulative
 * with previous calls to gtk_widget_modify_style() or with such
 * functions as gtk_widget_modify_fg(). If you wish to retain
 * previous values, you must first call gtk_widget_get_modifier_style(),
 * make your modifications to the returned style, then call
 * gtk_widget_modify_style() with that style. On the other hand,
 * if you first call gtk_widget_modify_style(), subsequent calls
 * to such functions gtk_widget_modify_fg() will have a cumulative
 * effect with the initial modifications.
 * @param style the #GtkRcStyle-struct holding the style modifications
 */
modify_style(style: Gtk.RcStyle): void
/**
 * Sets the text color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * The text color is the foreground color used along with the
 * base color (see gtk_widget_modify_base()) for widgets such
 * as #GtkEntry and #GtkTextView.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the text color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_text().
 */
modify_text(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color to use for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color().
 * @param state the state for which to set the background color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_background_color()
 */
override_background_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the color to use for a widget.
 * 
 * All other style values are left untouched.
 * 
 * This function does not act recursively. Setting the color of a
 * container does not affect its children. Note that some widgets that
 * you may not think of as containers, for instance #GtkButtons,
 * are actually containers.
 * 
 * This API is mostly meant as a quick way for applications to
 * change a widget appearance. If you are developing a widgets
 * library and intend this change to be themeable, it is better
 * done by setting meaningful CSS classes in your
 * widget/container implementation through gtk_style_context_add_class().
 * 
 * This way, your widget library can install a #GtkCssProvider
 * with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
 * to provide a default styling for those widgets that need so, and
 * this theming may fully overridden by the user’s theme.
 * 
 * Note that for complex widgets this may bring in undesired
 * results (such as uniform background color everywhere), in
 * these cases it is better to fully style such widgets through a
 * #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
 * priority.
 * @param state the state for which to set the color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_color()
 */
override_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the
 * cursor-color and secondary-cursor-color
 * style properties. All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * Note that the underlying properties have the #GdkColor type,
 * so the alpha value in `primary` and `secondary` will be ignored.
 * @param cursor the color to use for primary cursor (does not need to be     allocated), or %NULL to undo the effect of previous calls to     of gtk_widget_override_cursor().
 * @param secondary_cursor the color to use for secondary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_override_cursor().
 */
override_cursor(cursor?: (Gdk.RGBA | null), secondary_cursor?: (Gdk.RGBA | null)): void
/**
 * Sets the font to use for a widget. All other style values are
 * left untouched. See gtk_widget_override_color().
 * @param font_desc the font description to use, or %NULL to undo     the effect of previous calls to gtk_widget_override_font()
 */
override_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Sets a symbolic color for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color() for overriding the foreground
 * or background color.
 * @param name the name of the symbolic color to modify
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to gtk_widget_override_symbolic_color()
 */
override_symbolic_color(name: string, color?: (Gdk.RGBA | null)): void
/**
 * Obtains the full path to `widget`. The path is simply the name of a
 * widget and all its parents in the container hierarchy, separated by
 * periods. The name of a widget comes from
 * gtk_widget_get_name(). Paths are used to apply styles to a widget
 * in gtkrc configuration files. Widget names are the type of the
 * widget by default (e.g. “GtkButton”) or can be set to an
 * application-specific value with gtk_widget_set_name(). By setting
 * the name of a widget, you allow users or theme authors to apply
 * styles to that specific widget in their gtkrc
 * file. `path_reversed_p` fills in the path in reverse order,
 * i.e. starting with `widget’`s name instead of starting with the name
 * of `widget’`s outermost ancestor.
 */
path(): [number, string, string]
/**
 * This function is only for use in widget implementations.
 * 
 * Flags the widget for a rerun of the GtkWidgetClass::size_allocate
 * function. Use this function instead of gtk_widget_queue_resize()
 * when the `widget'`s size request didn't change but it wants to
 * reposition its contents.
 * 
 * An example user of this function is gtk_widget_set_halign().
 */
queue_allocate(): void
/**
 * Mark `widget` as needing to recompute its expand flags. Call
 * this function when setting legacy expand child properties
 * on the child of a container.
 * 
 * See gtk_widget_compute_expand().
 */
queue_compute_expand(): void
/**
 * Equivalent to calling gtk_widget_queue_draw_area() for the
 * entire area of a widget.
 */
queue_draw(): void
/**
 * Convenience function that calls gtk_widget_queue_draw_region() on
 * the region created from the given coordinates.
 * 
 * The region here is specified in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(), and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 * 
 * `width` or `height` may be 0, in this case this function does
 * nothing. Negative values for `width` and `height` are not allowed.
 * @param x x coordinate of upper-left corner of rectangle to redraw
 * @param y y coordinate of upper-left corner of rectangle to redraw
 * @param width width of region to draw
 * @param height height of region to draw
 */
queue_draw_area(x: number, y: number, width: number, height: number): void
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
queue_draw_region(region: cairo.Region): void
/**
 * This function is only for use in widget implementations.
 * Flags a widget to have its size renegotiated; should
 * be called when a widget for some reason has a new size request.
 * For example, when you change the text in a #GtkLabel, #GtkLabel
 * queues a resize to ensure there’s enough space for the new text.
 * 
 * Note that you cannot call gtk_widget_queue_resize() on a widget
 * from inside its implementation of the GtkWidgetClass::size_allocate
 * virtual method. Calls to gtk_widget_queue_resize() from inside
 * GtkWidgetClass::size_allocate will be silently ignored.
 */
queue_resize(): void
/**
 * This function works like gtk_widget_queue_resize(),
 * except that the widget is not invalidated.
 */
queue_resize_no_redraw(): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
realize(): void
/**
 * Computes the intersection of a `widget’`s area and `region,` returning
 * the intersection. The result may be empty, use cairo_region_is_empty() to
 * check.
 * @param region a #cairo_region_t, in the same coordinate system as          @widget->allocation. That is, relative to @widget->window          for widgets which return %FALSE from gtk_widget_get_has_window();          relative to the parent window of @widget->window otherwise.
 * @returns A newly allocated region holding the intersection of @widget     and @region.
 */
region_intersect(region: cairo.Region): cairo.Region
/**
 * Registers a #GdkWindow with the widget and sets it up so that
 * the widget receives events for it. Call gtk_widget_unregister_window()
 * when destroying the window.
 * 
 * Before 3.8 you needed to call gdk_window_set_user_data() directly to set
 * this up. This is now deprecated and you should use gtk_widget_register_window()
 * instead. Old code will keep working as is, although some new features like
 * transparency might not work perfectly.
 * @param window a #GdkWindow
 */
register_window(window: Gdk.Window): void
/**
 * Removes an accelerator from `widget,` previously installed with
 * gtk_widget_add_accelerator().
 * @param accel_group accel group for this widget
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @returns whether an accelerator was installed and could be removed
 */
remove_accelerator(accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType): boolean
/**
 * Removes a widget from the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
 * must have previously been added to the list with
 * gtk_widget_add_mnemonic_label().
 * @param label a #GtkWidget that was previously set as a mnemonic label for         @widget with gtk_widget_add_mnemonic_label().
 */
remove_mnemonic_label(label: Gtk.Widget): void
/**
 * Removes a tick callback previously registered with
 * gtk_widget_add_tick_callback().
 * @param id an id returned by gtk_widget_add_tick_callback()
 */
remove_tick_callback(id: number): void
/**
 * A convenience function that uses the theme settings for `widget`
 * to look up `stock_id` and render it to a pixbuf. `stock_id` should
 * be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size`
 * should be a size such as #GTK_ICON_SIZE_MENU. `detail` should be a
 * string that identifies the widget or code doing the rendering, so
 * that theme engines can special-case rendering for that widget or
 * code.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be
 * freed after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @param detail render detail to pass to theme engine
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon(stock_id: string, size: number, detail?: (string | null)): (GdkPixbuf.Pixbuf | null)
/**
 * A convenience function that uses the theme engine and style
 * settings for `widget` to look up `stock_id` and render it to
 * a pixbuf. `stock_id` should be a stock icon ID such as
 * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
 * such as #GTK_ICON_SIZE_MENU.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be freed
 * after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon_pixbuf(stock_id: string, size: number): (GdkPixbuf.Pixbuf | null)
/**
 * Moves a widget from one #GtkContainer to another, handling reference
 * count issues to avoid destroying the widget.
 * @param new_parent a #GtkContainer to move the widget into
 */
reparent(new_parent: Gtk.Widget): void
/**
 * Reset the styles of `widget` and all descendents, so when
 * they are looked up again, they get the correct values
 * for the currently loaded RC file settings.
 * 
 * This function is not useful for applications.
 */
reset_rc_styles(): void
/**
 * Updates the style context of `widget` and all descendants
 * by updating its widget path. #GtkContainers may want
 * to use this on a child when reordering it in a way that a different
 * style might apply to it. See also gtk_container_get_path_for_child().
 */
reset_style(): void
/**
 * Very rarely-used function. This function is used to emit
 * an expose event on a widget. This function is not normally used
 * directly. The only time it is used is when propagating an expose
 * event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
 * and that is normally done using gtk_container_propagate_draw().
 * 
 * If you want to force an area of a window to be redrawn,
 * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
 * To cause the redraw to be done immediately, follow that call
 * with a call to gdk_window_process_updates().
 * @param event a expose #GdkEvent
 * @returns return from the event signal emission (%TRUE if   the event was handled)
 */
send_expose(event: Gdk.Event): number
/**
 * Sends the focus change `event` to `widget`
 * 
 * This function is not meant to be used by applications. The only time it
 * should be used is when it is necessary for a #GtkWidget to assign focus
 * to a widget that is semantically owned by the first widget even though
 * it’s not a direct child - for instance, a search entry in a floating
 * window similar to the quick search in #GtkTreeView.
 * 
 * An example of its usage is:
 * 
 * 
 * ```c
 *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
 * 
 *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
 *   fevent->focus_change.in = TRUE;
 *   fevent->focus_change.window = _gtk_widget_get_window (widget);
 *   if (fevent->focus_change.window != NULL)
 *     g_object_ref (fevent->focus_change.window);
 * 
 *   gtk_widget_send_focus_change (widget, fevent);
 * 
 *   gdk_event_free (event);
 * ```
 * 
 * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
 * @returns the return value from the event signal emission: %TRUE   if the event was handled, and %FALSE otherwise
 */
send_focus_change(event: Gdk.Event): boolean
/**
 * Given an accelerator group, `accel_group,` and an accelerator path,
 * `accel_path,` sets up an accelerator in `accel_group` so whenever the
 * key binding that is defined for `accel_path` is pressed, `widget`
 * will be activated.  This removes any accelerators (for any
 * accelerator group) installed by previous calls to
 * gtk_widget_set_accel_path(). Associating accelerators with
 * paths allows them to be modified by the user and the modifications
 * to be saved for future use. (See gtk_accel_map_save().)
 * 
 * This function is a low level function that would most likely
 * be used by a menu creation system like #GtkUIManager. If you
 * use #GtkUIManager, setting up accelerator paths will be done
 * automatically.
 * 
 * Even when you you aren’t using #GtkUIManager, if you only want to
 * set up accelerators on menu items gtk_menu_item_set_accel_path()
 * provides a somewhat more convenient interface.
 * 
 * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
 * pass a static string, you can save some memory by interning it first with
 * g_intern_static_string().
 * @param accel_path path used to look up the accelerator
 * @param accel_group a #GtkAccelGroup.
 */
set_accel_path(accel_path?: (string | null), accel_group?: (Gtk.AccelGroup | null)): void
/**
 * Sets the widget’s allocation.  This should not be used
 * directly, but from within a widget’s size_allocate method.
 * 
 * The allocation set should be the “adjusted” or actual
 * allocation. If you’re implementing a #GtkContainer, you want to use
 * gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
 * The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
 * allocation inside gtk_widget_size_allocate() to create an adjusted
 * allocation.
 * @param allocation a pointer to a #GtkAllocation to copy from
 */
set_allocation(allocation: Gtk.Allocation): void
/**
 * Sets whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * This is a hint to the widget and does not affect the behavior of
 * the GTK+ core; many widgets ignore this flag entirely. For widgets
 * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
 * the effect is to suppress default themed drawing of the widget's
 * background. (Children of the widget will still be drawn.) The application
 * is then entirely responsible for drawing the widget background.
 * 
 * Note that the background is still drawn when the widget is mapped.
 * @param app_paintable %TRUE if the application will paint on the widget
 */
set_app_paintable(app_paintable: boolean): void
/**
 * Specifies whether `widget` can be a default widget. See
 * gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param can_default whether or not @widget can be a default widget.
 */
set_can_default(can_default: boolean): void
/**
 * Specifies whether `widget` can own the input focus. See
 * gtk_widget_grab_focus() for actually setting the input focus on a
 * widget.
 * @param can_focus whether or not @widget can own the input focus.
 */
set_can_focus(can_focus: boolean): void
/**
 * Sets the widget’s clip.  This must not be used directly,
 * but from within a widget’s size_allocate method.
 * It must be called after gtk_widget_set_allocation() (or after chaining up
 * to the parent class), because that function resets the clip.
 * 
 * The clip set should be the area that `widget` draws on. If `widget` is a
 * #GtkContainer, the area must contain all children's clips.
 * 
 * If this function is not called by `widget` during a ::size-allocate handler,
 * the clip will be set to `widget'`s allocation.
 * @param clip a pointer to a #GtkAllocation to copy from
 */
set_clip(clip: Gtk.Allocation): void
/**
 * Sets a widgets composite name. The widget must be
 * a composite child of its parent; see gtk_widget_push_composite_child().
 * @param name the name to set
 */
set_composite_name(name: string): void
/**
 * Enables or disables a #GdkDevice to interact with `widget`
 * and all its children.
 * 
 * It does so by descending through the #GdkWindow hierarchy
 * and enabling the same mask that is has for core events
 * (i.e. the one that gdk_window_get_events() returns).
 * @param device a #GdkDevice
 * @param enabled whether to enable the device
 */
set_device_enabled(device: Gdk.Device, enabled: boolean): void
/**
 * Sets the device event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive from `device`. Keep
 * in mind that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_device_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with windowless widgets (which return
 * %FALSE from gtk_widget_get_has_window());
 * to get events on those widgets, place them inside a #GtkEventBox
 * and receive events on the event box.
 * @param device a #GdkDevice
 * @param events event mask
 */
set_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Sets the reading direction on a particular widget. This direction
 * controls the primary direction for widgets containing text,
 * and also the direction in which the children of a container are
 * packed. The ability to set the direction is present in order
 * so that correct localization into languages with right-to-left
 * reading directions can be done. Generally, applications will
 * let the default reading direction present, except for containers
 * where the containers are arranged in an order that is explicitly
 * visual rather than logical (such as buttons for text justification).
 * 
 * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
 * set by gtk_widget_set_default_direction() will be used.
 * @param dir the new direction
 */
set_direction(dir: Gtk.TextDirection): void
/**
 * Widgets are double buffered by default; you can use this function
 * to turn off the buffering. “Double buffered” simply means that
 * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
 * automatically around expose events sent to the
 * widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
 * window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
 * buffer to the screen. The result is that users see the window
 * update in one smooth step, and don’t see individual graphics
 * primitives being rendered.
 * 
 * In very simple terms, double buffered widgets don’t flicker,
 * so you would only use this function to turn off double buffering
 * if you had special needs and really knew what you were doing.
 * 
 * Note: if you turn off double-buffering, you have to handle
 * expose events, since even the clearing to the background color or
 * pixmap will not happen automatically (as it is done in
 * gdk_window_begin_draw_frame()).
 * 
 * In 3.10 GTK and GDK have been restructured for translucent drawing. Since
 * then expose events for double-buffered widgets are culled into a single
 * event to the toplevel GDK window. If you now unset double buffering, you
 * will cause a separate rendering pass for every widget. This will likely
 * cause rendering problems - in particular related to stacking - and usually
 * increases rendering times significantly.
 * @param double_buffered %TRUE to double-buffer a widget
 */
set_double_buffered(double_buffered: boolean): void
/**
 * Sets the event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive. Keep in mind
 * that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with widgets that have no window.
 * (See gtk_widget_get_has_window()).  To get events on those widgets,
 * place them inside a #GtkEventBox and receive events on the event
 * box.
 * @param events event mask
 */
set_events(events: number): void
/**
 * Sets whether the widget should grab focus when it is clicked with the mouse.
 * Making mouse clicks not grab focus is useful in places like toolbars where
 * you don’t want the keyboard focus removed from the main area of the
 * application.
 * @param focus_on_click whether the widget should grab focus when clicked with the mouse
 */
set_focus_on_click(focus_on_click: boolean): void
/**
 * Sets the font map to use for Pango rendering. When not set, the widget
 * will inherit the font map from its parent.
 * @param font_map a #PangoFontMap, or %NULL to unset any previously     set font map
 */
set_font_map(font_map?: (Pango.FontMap | null)): void
/**
 * Sets the #cairo_font_options_t used for Pango rendering in this widget.
 * When not set, the default font options for the #GdkScreen will be used.
 * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
 */
set_font_options(options?: (cairo.FontOptions | null)): void
/**
 * Sets the horizontal alignment of `widget`.
 * See the #GtkWidget:halign property.
 * @param align the horizontal alignment
 */
set_halign(align: Gtk.Align): void
/**
 * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
 * #GtkWidget:has-tooltip for more information.
 * @param has_tooltip whether or not @widget has a tooltip.
 */
set_has_tooltip(has_tooltip: boolean): void
/**
 * Specifies whether `widget` has a #GdkWindow of its own. Note that
 * all realized widgets have a non-%NULL “window” pointer
 * (gtk_widget_get_window() never returns a %NULL window when a widget
 * is realized), but for many of them it’s actually the #GdkWindow of
 * one of its parent widgets. Widgets that do not create a %window for
 * themselves in #GtkWidget::realize must announce this by
 * calling this function with `has_window` = %FALSE.
 * 
 * This function should only be called by widget implementations,
 * and they should call it in their init() function.
 * @param has_window whether or not @widget has a window.
 */
set_has_window(has_window: boolean): void
/**
 * Sets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Call this function to set the expand flag if you would like your
 * widget to become larger horizontally when the window has extra
 * room.
 * 
 * By default, widgets automatically expand if any of their children
 * want to expand. (To see if a widget will automatically expand given
 * its current children and state, call gtk_widget_compute_expand(). A
 * container can decide how the expandability of children affects the
 * expansion of the container by overriding the compute_expand virtual
 * method on #GtkWidget.).
 * 
 * Setting hexpand explicitly with this function will override the
 * automatic expand behavior.
 * 
 * This function forces the widget to expand or not to expand,
 * regardless of children.  The override occurs because
 * gtk_widget_set_hexpand() sets the hexpand-set property (see
 * gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
 * value to be used, rather than looking at children and widget state.
 * @param expand whether to expand
 */
set_hexpand(expand: boolean): void
/**
 * Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
 * be used.
 * 
 * The hexpand-set property will be set automatically when you call
 * gtk_widget_set_hexpand() to set hexpand, so the most likely
 * reason to use this function would be to unset an explicit expand
 * flag.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @param set value for hexpand-set property
 */
set_hexpand_set(set: boolean): void
/**
 * Marks the widget as being mapped.
 * 
 * This function should only ever be called in a derived widget's
 * “map” or “unmap” implementation.
 * @param mapped %TRUE to mark the widget as mapped
 */
set_mapped(mapped: boolean): void
/**
 * Sets the bottom margin of `widget`.
 * See the #GtkWidget:margin-bottom property.
 * @param margin the bottom margin
 */
set_margin_bottom(margin: number): void
/**
 * Sets the end margin of `widget`.
 * See the #GtkWidget:margin-end property.
 * @param margin the end margin
 */
set_margin_end(margin: number): void
/**
 * Sets the left margin of `widget`.
 * See the #GtkWidget:margin-left property.
 * @param margin the left margin
 */
set_margin_left(margin: number): void
/**
 * Sets the right margin of `widget`.
 * See the #GtkWidget:margin-right property.
 * @param margin the right margin
 */
set_margin_right(margin: number): void
/**
 * Sets the start margin of `widget`.
 * See the #GtkWidget:margin-start property.
 * @param margin the start margin
 */
set_margin_start(margin: number): void
/**
 * Sets the top margin of `widget`.
 * See the #GtkWidget:margin-top property.
 * @param margin the top margin
 */
set_margin_top(margin: number): void
/**
 * Widgets can be named, which allows you to refer to them from a
 * CSS file. You can apply a style to widgets with a particular name
 * in the CSS file. See the documentation for the CSS syntax (on the
 * same page as the docs for #GtkStyleContext).
 * 
 * Note that the CSS syntax has certain special characters to delimit
 * and represent elements in a selector (period, #, >, *...), so using
 * these will make your widget impossible to match by name. Any combination
 * of alphanumeric symbols, dashes and underscores will suffice.
 * @param name name for the widget
 */
set_name(name: string): void
/**
 * Sets the #GtkWidget:no-show-all property, which determines whether
 * calls to gtk_widget_show_all() will affect this widget.
 * 
 * This is mostly for use in constructing widget hierarchies with externally
 * controlled visibility, see #GtkUIManager.
 * @param no_show_all the new value for the “no-show-all” property
 */
set_no_show_all(no_show_all: boolean): void
/**
 * Request the `widget` to be rendered partially transparent,
 * with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
 * are clamped to the [0,1] range.).
 * This works on both toplevel widget, and child widgets, although there
 * are some limitations:
 * 
 * For toplevel widgets this depends on the capabilities of the windowing
 * system. On X11 this has any effect only on X screens with a compositing manager
 * running. See gtk_widget_is_composited(). On Windows it should work
 * always, although setting a window’s opacity after the window has been
 * shown causes it to flicker once on Windows.
 * 
 * For child widgets it doesn’t work if any affected widget has a native window, or
 * disables double buffering.
 * @param opacity desired opacity, between 0 and 1
 */
set_opacity(opacity: number): void
/**
 * This function is useful only when implementing subclasses of
 * #GtkContainer.
 * Sets the container as the parent of `widget,` and takes care of
 * some details such as updating the state and style of the child
 * to reflect its new location. The opposite function is
 * gtk_widget_unparent().
 * @param parent parent container
 */
set_parent(parent: Gtk.Widget): void
/**
 * Sets a non default parent window for `widget`.
 * 
 * For #GtkWindow classes, setting a `parent_window` effects whether
 * the window is a toplevel window or can be embedded into other
 * widgets.
 * 
 * For #GtkWindow classes, this needs to be called before the
 * window is realized.
 * @param parent_window the new parent window.
 */
set_parent_window(parent_window: Gdk.Window): void
/**
 * Marks the widget as being realized. This function must only be
 * called after all #GdkWindows for the `widget` have been created
 * and registered.
 * 
 * This function should only ever be called in a derived widget's
 * “realize” or “unrealize” implementation.
 * @param realized %TRUE to mark the widget as realized
 */
set_realized(realized: boolean): void
/**
 * Specifies whether `widget` will be treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param receives_default whether or not @widget can be a default widget.
 */
set_receives_default(receives_default: boolean): void
/**
 * Sets whether the entire widget is queued for drawing when its size
 * allocation changes. By default, this setting is %TRUE and
 * the entire widget is redrawn on every size change. If your widget
 * leaves the upper left unchanged when made bigger, turning this
 * setting off will improve performance.
 * 
 * Note that for widgets where gtk_widget_get_has_window() is %FALSE
 * setting this flag to %FALSE turns off all allocation on resizing:
 * the widget will not even redraw if its position changes; this is to
 * allow containers that don’t draw anything to avoid excess
 * invalidations. If you set this flag on a widget with no window that
 * does draw on `widget->`window, you are
 * responsible for invalidating both the old and new allocation of the
 * widget when the widget is moved and responsible for invalidating
 * regions newly when the widget increases size.
 * @param redraw_on_allocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
 */
set_redraw_on_allocate(redraw_on_allocate: boolean): void
/**
 * Sets the sensitivity of a widget. A widget is sensitive if the user
 * can interact with it. Insensitive widgets are “grayed out” and the
 * user can’t interact with them. Insensitive widgets are known as
 * “inactive”, “disabled”, or “ghosted” in some other toolkits.
 * @param sensitive %TRUE to make the widget sensitive
 */
set_sensitive(sensitive: boolean): void
/**
 * Sets the minimum size of a widget; that is, the widget’s size
 * request will be at least `width` by `height`. You can use this
 * function to force a widget to be larger than it normally would be.
 * 
 * In most cases, gtk_window_set_default_size() is a better choice for
 * toplevel windows than this function; setting the default size will
 * still allow users to shrink the window. Setting the size request
 * will force them to leave the window at least as large as the size
 * request. When dealing with window sizes,
 * gtk_window_set_geometry_hints() can be a useful function as well.
 * 
 * Note the inherent danger of setting any fixed size - themes,
 * translations into other languages, different fonts, and user action
 * can all change the appropriate size for a given widget. So, it's
 * basically impossible to hardcode a size that will always be
 * correct.
 * 
 * The size request of a widget is the smallest size a widget can
 * accept while still functioning well and drawing itself correctly.
 * However in some strange cases a widget may be allocated less than
 * its requested size, and in many cases a widget may be allocated more
 * space than it requested.
 * 
 * If the size request in a given direction is -1 (unset), then
 * the “natural” size request of the widget will be used instead.
 * 
 * The size request set here does not include any margin from the
 * #GtkWidget properties margin-left, margin-right, margin-top, and
 * margin-bottom, but it does include pretty much all other padding
 * or border properties set by any subclass of #GtkWidget.
 * @param width width @widget should request, or -1 to unset
 * @param height height @widget should request, or -1 to unset
 */
set_size_request(width: number, height: number): void
/**
 * This function is for use in widget implementations. Sets the state
 * of a widget (insensitive, prelighted, etc.) Usually you should set
 * the state using wrapper functions such as gtk_widget_set_sensitive().
 * @param state new state for @widget
 */
set_state(state: Gtk.StateType): void
/**
 * This function is for use in widget implementations. Turns on flag
 * values in the current widget state (insensitive, prelighted, etc.).
 * 
 * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
 * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
 * direction, use gtk_widget_set_direction().
 * 
 * It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
 * will be propagated down to all non-internal children if `widget` is a
 * #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
 * down to all #GtkContainer children by different means than turning on the
 * state flag down the hierarchy, both gtk_widget_get_state_flags() and
 * gtk_widget_is_sensitive() will make use of these.
 * @param flags State flags to turn on
 * @param clear Whether to clear state before turning on @flags
 */
set_state_flags(flags: Gtk.StateFlags, clear: boolean): void
/**
 * Used to set the #GtkStyle for a widget (`widget->`style). Since
 * GTK 3, this function does nothing, the passed in style is ignored.
 * @param style a #GtkStyle, or %NULL to remove the effect     of a previous call to gtk_widget_set_style() and go back to     the default style
 */
set_style(style?: (Gtk.Style | null)): void
/**
 * Enables or disables multiple pointer awareness. If this setting is %TRUE,
 * `widget` will start receiving multiple, per device enter/leave events. Note
 * that if custom #GdkWindows are created in #GtkWidget::realize,
 * gdk_window_set_support_multidevice() will have to be called manually on them.
 * @param support_multidevice %TRUE to support input from multiple devices.
 */
set_support_multidevice(support_multidevice: boolean): void
/**
 * Sets `markup` as the contents of the tooltip, which is marked up with
 *  the [Pango text markup language][PangoMarkupFormat].
 * 
 * This function will take care of setting #GtkWidget:has-tooltip to %TRUE
 * and of the default handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-markup property and
 * gtk_tooltip_set_markup().
 * @param markup the contents of the tooltip for @widget, or %NULL
 */
set_tooltip_markup(markup?: (string | null)): void
/**
 * Sets `text` as the contents of the tooltip. This function will take
 * care of setting #GtkWidget:has-tooltip to %TRUE and of the default
 * handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
 * @param text the contents of the tooltip for @widget
 */
set_tooltip_text(text?: (string | null)): void
/**
 * Replaces the default window used for displaying
 * tooltips with `custom_window`. GTK+ will take care of showing and
 * hiding `custom_window` at the right moment, to behave likewise as
 * the default tooltip window. If `custom_window` is %NULL, the default
 * tooltip window will be used.
 * @param custom_window a #GtkWindow, or %NULL
 */
set_tooltip_window(custom_window?: (Gtk.Window | null)): void
/**
 * Sets the vertical alignment of `widget`.
 * See the #GtkWidget:valign property.
 * @param align the vertical alignment
 */
set_valign(align: Gtk.Align): void
/**
 * Sets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_set_hexpand() for more detail.
 * @param expand whether to expand
 */
set_vexpand(expand: boolean): void
/**
 * Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
 * be used.
 * 
 * See gtk_widget_set_hexpand_set() for more detail.
 * @param set value for vexpand-set property
 */
set_vexpand_set(set: boolean): void
/**
 * Sets the visibility state of `widget`. Note that setting this to
 * %TRUE doesn’t mean the widget is actually viewable, see
 * gtk_widget_get_visible().
 * 
 * This function simply calls gtk_widget_show() or gtk_widget_hide()
 * but is nicer to use when the visibility of the widget depends on
 * some condition.
 * @param visible whether the widget should be shown or not
 */
set_visible(visible: boolean): void
/**
 * Sets the visual that should be used for by widget and its children for
 * creating #GdkWindows. The visual must be on the same #GdkScreen as
 * returned by gtk_widget_get_screen(), so handling the
 * #GtkWidget::screen-changed signal is necessary.
 * 
 * Setting a new `visual` will not cause `widget` to recreate its windows,
 * so you should call this function before `widget` is realized.
 * @param visual visual to be used or %NULL to unset a previous one
 */
set_visual(visual?: (Gdk.Visual | null)): void
/**
 * Sets a widget’s window. This function should only be used in a
 * widget’s #GtkWidget::realize implementation. The %window passed is
 * usually either new window created with gdk_window_new(), or the
 * window of its parent widget as returned by
 * gtk_widget_get_parent_window().
 * 
 * Widgets must indicate whether they will create their own #GdkWindow
 * by calling gtk_widget_set_has_window(). This is usually done in the
 * widget’s init() function.
 * 
 * Note that this function does not add any reference to `window`.
 * @param window a #GdkWindow
 */
set_window(window: Gdk.Window): void
/**
 * Sets a shape for this widget’s GDK window. This allows for
 * transparent windows etc., see gdk_window_shape_combine_region()
 * for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
show_all(): void
/**
 * Shows a widget. If the widget is an unmapped toplevel widget
 * (i.e. a #GtkWindow that has not yet been shown), enter the main
 * loop and wait for the window to actually be mapped. Be careful;
 * because the main loop is running, anything can happen during
 * this function.
 */
show_now(): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
size_allocate(allocation: Gtk.Allocation): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size,
 * position and (optionally) baseline to their child widgets.
 * 
 * In this function, the allocation and baseline may be adjusted. It
 * will be forced to a 1x1 minimum size, and the
 * adjust_size_allocation virtual and adjust_baseline_allocation
 * methods on the child will be used to adjust the allocation and
 * baseline. Standard adjustments include removing the widget's
 * margins, and applying the widget’s #GtkWidget:halign and
 * #GtkWidget:valign properties.
 * 
 * If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
 * baseline argument is ignored and -1 is used instead.
 * @param allocation position and size to be allocated to @widget
 * @param baseline The baseline of the child, or -1
 */
size_allocate_with_baseline(allocation: Gtk.Allocation, baseline: number): void
/**
 * This function is typically used when implementing a #GtkContainer
 * subclass.  Obtains the preferred size of a widget. The container
 * uses this information to arrange its child widgets and decide what
 * size allocations to give them with gtk_widget_size_allocate().
 * 
 * You can also call this function from an application, with some
 * caveats. Most notably, getting a size request requires the widget
 * to be associated with a screen, because font information may be
 * needed. Multihead-aware applications should keep this in mind.
 * 
 * Also remember that the size request is not necessarily the size
 * a widget will actually be allocated.
 */
size_request(): Gtk.Requisition
/**
 * This function attaches the widget’s #GtkStyle to the widget's
 * #GdkWindow. It is a replacement for
 * 
 * 
 * ```
 * widget->style = gtk_style_attach (widget->style, widget->window);
 * ```
 * 
 * 
 * and should only ever be called in a derived widget’s “realize”
 * implementation which does not chain up to its parent class'
 * “realize” implementation, because one of the parent classes
 * (finally #GtkWidget) would attach the style itself.
 */
style_attach(): void
/**
 * Gets the value of a style property of `widget`.
 * @param property_name the name of a style property
 * @param value location to return the property value
 */
style_get_property(property_name: string, value: GObject.Value): void
/**
 * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
 * This causes all queued #GtkWidget::child-notify signals on `widget` to be
 * emitted.
 */
thaw_child_notify(): void
/**
 * Translate coordinates relative to `src_widget’`s allocation to coordinates
 * relative to `dest_widget’`s allocations. In order to perform this
 * operation, both widgets must be realized, and must share a common
 * toplevel.
 * @param dest_widget a #GtkWidget
 * @param src_x X position relative to @src_widget
 * @param src_y Y position relative to @src_widget
 * @returns %FALSE if either widget was not realized, or there   was no common ancestor. In this case, nothing is stored in   *@dest_x and *@dest_y. Otherwise %TRUE.
 */
translate_coordinates(dest_widget: Gtk.Widget, src_x: number, src_y: number): [boolean, number, number]
/**
 * Triggers a tooltip query on the display where the toplevel of `widget`
 * is located. See gtk_tooltip_trigger_tooltip_query() for more
 * information.
 */
trigger_tooltip_query(): void
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
unmap(): void
/**
 * This function is only for use in widget implementations.
 * Should be called by implementations of the remove method
 * on #GtkContainer, to dissociate a child from the container.
 */
unparent(): void
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
unrealize(): void
/**
 * Unregisters a #GdkWindow from the widget that was previously set up with
 * gtk_widget_register_window(). You need to call this when the window is
 * no longer used by the widget, such as when you destroy it.
 * @param window a #GdkWindow
 */
unregister_window(window: Gdk.Window): void
/**
 * This function is for use in widget implementations. Turns off flag
 * values for the current widget state (insensitive, prelighted, etc.).
 * See gtk_widget_set_state_flags().
 * @param flags State flags to turn off
 */
unset_state_flags(flags: Gtk.StateFlags): void
vfunc_adjust_baseline_allocation(baseline: number): void
vfunc_adjust_baseline_request(minimum_baseline: number, natural_baseline: number): void
vfunc_adjust_size_allocation(orientation: Gtk.Orientation, minimum_size: number, natural_size: number, allocated_pos: number, allocated_size: number): void
vfunc_adjust_size_request(orientation: Gtk.Orientation, minimum_size: number, natural_size: number): void
vfunc_button_press_event(event: Gdk.EventButton): boolean
vfunc_button_release_event(event: Gdk.EventButton): boolean
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 */
vfunc_can_activate_accel(signal_id: number): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
vfunc_child_notify(child_property: GObject.ParamSpec): void
vfunc_composited_changed(): void
vfunc_compute_expand(hexpand_p: boolean, vexpand_p: boolean): void
vfunc_configure_event(event: Gdk.EventConfigure): boolean
vfunc_damage_event(event: Gdk.EventExpose): boolean
vfunc_delete_event(event: Gdk.EventAny): boolean
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
vfunc_destroy(): void
vfunc_destroy_event(event: Gdk.EventAny): boolean
vfunc_direction_changed(previous_direction: Gtk.TextDirection): void
vfunc_dispatch_child_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_drag_begin(context: Gdk.DragContext): void
vfunc_drag_data_delete(context: Gdk.DragContext): void
vfunc_drag_data_get(context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_data_received(context: Gdk.DragContext, x: number, y: number, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_drop(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_drag_end(context: Gdk.DragContext): void
vfunc_drag_failed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
vfunc_drag_leave(context: Gdk.DragContext, time_: number): void
vfunc_drag_motion(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_draw(cr: cairo.Context): boolean
vfunc_enter_notify_event(event: Gdk.EventCrossing): boolean
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 */
vfunc_event(event: Gdk.Event): boolean
vfunc_focus(direction: Gtk.DirectionType): boolean
vfunc_focus_in_event(event: Gdk.EventFocus): boolean
vfunc_focus_out_event(event: Gdk.EventFocus): boolean
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 */
vfunc_get_accessible(): Atk.Object
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
vfunc_get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
vfunc_get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
vfunc_get_preferred_width_for_height(height: number): [number, number]
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 */
vfunc_get_request_mode(): Gtk.SizeRequestMode
vfunc_grab_broken_event(event: Gdk.EventGrabBroken): boolean
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
vfunc_grab_focus(): void
vfunc_grab_notify(was_grabbed: boolean): void
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
vfunc_hide(): void
vfunc_hierarchy_changed(previous_toplevel: Gtk.Widget): void
vfunc_key_press_event(event: Gdk.EventKey): boolean
vfunc_key_release_event(event: Gdk.EventKey): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 */
vfunc_keynav_failed(direction: Gtk.DirectionType): boolean
vfunc_leave_notify_event(event: Gdk.EventCrossing): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
vfunc_map(): void
vfunc_map_event(event: Gdk.EventAny): boolean
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 */
vfunc_mnemonic_activate(group_cycling: boolean): boolean
vfunc_motion_notify_event(event: Gdk.EventMotion): boolean
vfunc_move_focus(direction: Gtk.DirectionType): void
vfunc_parent_set(previous_parent: Gtk.Widget): void
vfunc_popup_menu(): boolean
vfunc_property_notify_event(event: Gdk.EventProperty): boolean
vfunc_proximity_in_event(event: Gdk.EventProximity): boolean
vfunc_proximity_out_event(event: Gdk.EventProximity): boolean
vfunc_query_tooltip(x: number, y: number, keyboard_tooltip: boolean, tooltip: Gtk.Tooltip): boolean
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
vfunc_queue_draw_region(region: cairo.Region): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
vfunc_realize(): void
vfunc_screen_changed(previous_screen: Gdk.Screen): void
vfunc_scroll_event(event: Gdk.EventScroll): boolean
vfunc_selection_clear_event(event: Gdk.EventSelection): boolean
vfunc_selection_get(selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_selection_notify_event(event: Gdk.EventSelection): boolean
vfunc_selection_received(selection_data: Gtk.SelectionData, time_: number): void
vfunc_selection_request_event(event: Gdk.EventSelection): boolean
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
vfunc_show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
vfunc_show_all(): void
vfunc_show_help(help_type: Gtk.WidgetHelpType): boolean
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
vfunc_size_allocate(allocation: Gtk.Allocation): void
vfunc_state_changed(previous_state: Gtk.StateType): void
vfunc_state_flags_changed(previous_state_flags: Gtk.StateFlags): void
vfunc_style_set(previous_style: Gtk.Style): void
vfunc_style_updated(): void
vfunc_touch_event(event: Gdk.EventTouch): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
vfunc_unmap(): void
vfunc_unmap_event(event: Gdk.EventAny): boolean
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
vfunc_unrealize(): void
vfunc_visibility_notify_event(event: Gdk.EventVisibility): boolean
vfunc_window_state_event(event: Gdk.EventWindowState): boolean
}

module DockPaned {

    // Constructor properties interface

    interface ConstructorProps extends MultiPaned.ConstructorProps, Atk.ImplementorIface.ConstructorProps, DockItem.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.Orientable.ConstructorProps {

    }

}

class DockPaned extends MultiPaned implements Atk.ImplementorIface, DockItem, Gtk.Buildable, Gtk.Orientable {

    // Constructors of Dazzle.DockPaned


constructor(properties?: Partial<DockPaned.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): DockPaned;

// Inherited properties
/**
 * The orientation of the orientable.
 */
get orientation(): Gtk.Orientation;
set orientation(val: Gtk.Orientation);
get app_paintable(): boolean;
set app_paintable(val: boolean);
get appPaintable(): boolean;
set appPaintable(val: boolean);
get can_default(): boolean;
set can_default(val: boolean);
get canDefault(): boolean;
set canDefault(val: boolean);
get can_focus(): boolean;
set can_focus(val: boolean);
get canFocus(): boolean;
set canFocus(val: boolean);
get composite_child(): boolean;
get compositeChild(): boolean;
/**
 * Whether the widget is double buffered.
 */
get double_buffered(): boolean;
set double_buffered(val: boolean);
/**
 * Whether the widget is double buffered.
 */
get doubleBuffered(): boolean;
set doubleBuffered(val: boolean);
get events(): Gdk.EventMask;
set events(val: Gdk.EventMask);
/**
 * Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
 */
get expand(): boolean;
set expand(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focus_on_click(): boolean;
set focus_on_click(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focusOnClick(): boolean;
set focusOnClick(val: boolean);
/**
 * How to distribute horizontal space if widget gets extra space, see #GtkAlign
 */
get halign(): Gtk.Align;
set halign(val: Gtk.Align);
get has_default(): boolean;
set has_default(val: boolean);
get hasDefault(): boolean;
set hasDefault(val: boolean);
get has_focus(): boolean;
set has_focus(val: boolean);
get hasFocus(): boolean;
set hasFocus(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get has_tooltip(): boolean;
set has_tooltip(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get hasTooltip(): boolean;
set hasTooltip(val: boolean);
get height_request(): number;
set height_request(val: number);
get heightRequest(): number;
set heightRequest(val: number);
/**
 * Whether to expand horizontally. See gtk_widget_set_hexpand().
 */
get hexpand(): boolean;
set hexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpand_set(): boolean;
set hexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpandSet(): boolean;
set hexpandSet(val: boolean);
get is_focus(): boolean;
set is_focus(val: boolean);
get isFocus(): boolean;
set isFocus(val: boolean);
/**
 * Sets all four sides' margin at once. If read, returns max
 * margin on any side.
 */
get margin(): number;
set margin(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_bottom(): number;
set margin_bottom(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginBottom(): number;
set marginBottom(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_end(): number;
set margin_end(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginEnd(): number;
set marginEnd(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_left(): number;
set margin_left(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginLeft(): number;
set marginLeft(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_right(): number;
set margin_right(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginRight(): number;
set marginRight(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_start(): number;
set margin_start(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginStart(): number;
set marginStart(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_top(): number;
set margin_top(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginTop(): number;
set marginTop(val: number);
get name(): string;
set name(val: string);
get no_show_all(): boolean;
set no_show_all(val: boolean);
get noShowAll(): boolean;
set noShowAll(val: boolean);
/**
 * The requested opacity of the widget. See gtk_widget_set_opacity() for
 * more details about window opacity.
 * 
 * Before 3.8 this was only available in GtkWindow
 */
get opacity(): number;
set opacity(val: number);
get parent(): Gtk.Container;
set parent(val: Gtk.Container);
get receives_default(): boolean;
set receives_default(val: boolean);
get receivesDefault(): boolean;
set receivesDefault(val: boolean);
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scale_factor(): number;
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scaleFactor(): number;
get sensitive(): boolean;
set sensitive(val: boolean);
/**
 * The style of the widget, which contains information about how it will look (colors, etc).
 */
get style(): Gtk.Style;
set style(val: Gtk.Style);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_markup(): string;
set tooltip_markup(val: string);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipMarkup(): string;
set tooltipMarkup(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_text(): string;
set tooltip_text(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipText(): string;
set tooltipText(val: string);
/**
 * How to distribute vertical space if widget gets extra space, see #GtkAlign
 */
get valign(): Gtk.Align;
set valign(val: Gtk.Align);
/**
 * Whether to expand vertically. See gtk_widget_set_vexpand().
 */
get vexpand(): boolean;
set vexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpand_set(): boolean;
set vexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpandSet(): boolean;
set vexpandSet(val: boolean);
get visible(): boolean;
set visible(val: boolean);
get width_request(): number;
set width_request(val: number);
get widthRequest(): number;
set widthRequest(val: number);
/**
 * The widget's window if it is realized, %NULL otherwise.
 */
get window(): Gdk.Window;

// Inherited methods
adopt(child: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 * @returns %TRUE if the dock item was closed
 */
close(): boolean
/**
 * Emits the #DzlDockItem::presented signal.
 * 
 * Containers should emit this when their descendant has been presented as the
 * current visible child. This allows dock items to do lazy initialization of
 * content once the widgetry is visible to the user.
 * 
 * Currently, this is best effort, as there are a number of situations that
 * make covering all cases problematic.
 */
emit_presented(): void
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 * @returns %TRUE if the dock item can be closed by the user, otherwise %FALSE.
 */
get_can_close(): boolean
get_can_minimize(): boolean
get_child_visible(child: DockItem): boolean
get_child_visible(...args: never[]): any
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 * @returns A #DzlDockmanager.
 */
get_manager(): (DockManager | null)
/**
 * Gets the parent #DzlDockItem, or %NULL.
 * @returns A #DzlDockItem or %NULL.
 */
get_parent(): (DockItem | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_title(): (string | null)
has_widgets(): boolean
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 * @returns %TRUE if @child was minimized. Otherwise %FALSE and @position   may be updated to a suggested position.
 */
minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
needs_attention(): void
/**
 * This widget will walk the widget hierarchy to ensure that the
 * dock item is visible to the user.
 */
present(): void
present_child(child: DockItem): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 * @returns a #GIcon or %NULL
 */
ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
release(child: DockItem): void
set_child_visible(child: DockItem, child_visible: boolean): void
set_child_visible(...args: never[]): any
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
set_manager(manager?: (DockManager | null)): void
update_visibility(): void
vfunc_can_minimize(descendant: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 */
vfunc_close(): boolean
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 */
vfunc_get_can_close(): boolean
vfunc_get_child_visible(child: DockItem): boolean
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 */
vfunc_get_manager(): (DockManager | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_title(): (string | null)
vfunc_manager_set(old_manager: DockManager): void
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 */
vfunc_minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
vfunc_needs_attention(): void
vfunc_present_child(child: DockItem): void
vfunc_presented(): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 */
vfunc_ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
vfunc_release(child: DockItem): void
vfunc_set_child_visible(child: DockItem, child_visible: boolean): void
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
vfunc_set_manager(manager?: (DockManager | null)): void
vfunc_update_visibility(): void
/**
 * Retrieves the orientation of the `orientable`.
 * @returns the orientation of the @orientable.
 */
get_orientation(): Gtk.Orientation
/**
 * Sets the orientation of the `orientable`.
 * @param orientation the orientable’s new orientation.
 */
set_orientation(orientation: Gtk.Orientation): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
/**
 * For widgets that can be “activated” (buttons, menu items, etc.)
 * this function activates them. Activation is what happens when you
 * press Enter on a widget during key navigation. If `widget` isn't
 * activatable, the function returns %FALSE.
 * @returns %TRUE if the widget was activatable
 */
activate(): boolean
/**
 * Installs an accelerator for this `widget` in `accel_group` that causes
 * `accel_signal` to be emitted if the accelerator is activated.
 * The `accel_group` needs to be added to the widget’s toplevel via
 * gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
 * Accelerators added through this function are not user changeable during
 * runtime. If you want to support accelerators that can be changed by the
 * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
 * gtk_menu_item_set_accel_path() instead.
 * @param accel_signal widget signal to emit on accelerator activation
 * @param accel_group accel group for this widget, added to its toplevel
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @param accel_flags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
 */
add_accelerator(accel_signal: string, accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): void
/**
 * Adds the device events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_device_events() for details.
 * @param device a #GdkDevice
 * @param events an event mask, see #GdkEventMask
 */
add_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Adds the events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_events() and the
 * [input handling overview][event-masks] for details.
 * @param events an event mask, see #GdkEventMask
 */
add_events(events: number): void
/**
 * Adds a widget to the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
 * list of mnemonic labels for the widget is cleared when the
 * widget is destroyed, so the caller must make sure to update
 * its internal state at this point as well, by using a connection
 * to the #GtkWidget::destroy signal or a weak notifier.
 * @param label a #GtkWidget that acts as a mnemonic label for @widget
 */
add_mnemonic_label(label: Gtk.Widget): void
/**
 * Queues an animation frame update and adds a callback to be called
 * before each frame. Until the tick callback is removed, it will be
 * called frequently (usually at the frame rate of the output device
 * or as quickly as the application can be repainted, whichever is
 * slower). For this reason, is most suitable for handling graphics
 * that change every frame or every few frames. The tick callback does
 * not automatically imply a relayout or repaint. If you want a
 * repaint or relayout, and aren’t changing widget properties that
 * would trigger that (for example, changing the text of a #GtkLabel),
 * then you will have to call gtk_widget_queue_resize() or
 * gtk_widget_queue_draw_area() yourself.
 * 
 * gdk_frame_clock_get_frame_time() should generally be used for timing
 * continuous animations and
 * gdk_frame_timings_get_predicted_presentation_time() if you are
 * trying to display isolated frames at particular times.
 * 
 * This is a more convenient alternative to connecting directly to the
 * #GdkFrameClock::update signal of #GdkFrameClock, since you don't
 * have to worry about when a #GdkFrameClock is assigned to a widget.
 * @param callback function to call for updating animations
 * @returns an id for the connection of this callback. Remove the callback     by passing it to gtk_widget_remove_tick_callback()
 */
add_tick_callback(callback: Gtk.TickCallback): number
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 * @returns %TRUE if the accelerator can be activated.
 */
can_activate_accel(signal_id: number): boolean
/**
 * This function is used by custom widget implementations; if you're
 * writing an app, you’d use gtk_widget_grab_focus() to move the focus
 * to a particular widget, and gtk_container_set_focus_chain() to
 * change the focus tab order. So you may want to investigate those
 * functions instead.
 * 
 * gtk_widget_child_focus() is called by containers as the user moves
 * around the window using keyboard shortcuts. `direction` indicates
 * what kind of motion is taking place (up, down, left, right, tab
 * forward, tab backward). gtk_widget_child_focus() emits the
 * #GtkWidget::focus signal; widgets override the default handler
 * for this signal in order to implement appropriate focus behavior.
 * 
 * The default ::focus handler for a widget should return %TRUE if
 * moving in `direction` left the focus on a focusable location inside
 * that widget, and %FALSE if moving in `direction` moved the focus
 * outside the widget. If returning %TRUE, widgets normally
 * call gtk_widget_grab_focus() to place the focus accordingly;
 * if returning %FALSE, they don’t modify the current focus location.
 * @param direction direction of focus movement
 * @returns %TRUE if focus ended up inside @widget
 */
child_focus(direction: Gtk.DirectionType): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
child_notify(child_property: string): void
child_notify(...args: never[]): any
/**
 * Same as gtk_widget_path(), but always uses the name of a widget’s type,
 * never uses a custom name set with gtk_widget_set_name().
 */
class_path(): [number, string, string]
/**
 * Computes whether a container should give this widget extra space
 * when possible. Containers should check this, rather than
 * looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
 * 
 * This function already checks whether the widget is visible, so
 * visibility does not need to be checked separately. Non-visible
 * widgets are not expanded.
 * 
 * The computed expand value uses either the expand setting explicitly
 * set on the widget itself, or, if none has been explicitly set,
 * the widget may expand if some of its children do.
 * @param orientation expand direction
 * @returns whether widget tree rooted here should be expanded
 */
compute_expand(orientation: Gtk.Orientation): boolean
/**
 * Creates a new #PangoContext with the appropriate font map,
 * font options, font description, and base direction for drawing
 * text for this widget. See also gtk_widget_get_pango_context().
 * @returns the new #PangoContext
 */
create_pango_context(): Pango.Context
/**
 * Creates a new #PangoLayout with the appropriate font map,
 * font description, and base direction for drawing text for
 * this widget.
 * 
 * If you keep a #PangoLayout created in this way around, you need
 * to re-create it when the widget #PangoContext is replaced.
 * This can be tracked by using the #GtkWidget::screen-changed signal
 * on the widget.
 * @param text text to set on the layout (can be %NULL)
 * @returns the new #PangoLayout
 */
create_pango_layout(text?: (string | null)): Pango.Layout
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
destroy(): void
/**
 * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
 * %NULL.  It’s intended to be used as a callback connected to the
 * “destroy” signal of a widget. You connect gtk_widget_destroyed()
 * as a signal handler, and pass the address of your widget variable
 * as user data. Then when the widget is destroyed, the variable will
 * be set to %NULL. Useful for example to avoid multiple copies
 * of the same dialog.
 * @param widget_pointer address of a variable that contains @widget
 */
destroyed(widget_pointer: Gtk.Widget): Gtk.Widget
/**
 * Returns %TRUE if `device` has been shadowed by a GTK+
 * device grab on another widget, so it would stop sending
 * events to `widget`. This may be used in the
 * #GtkWidget::grab-notify signal to check for specific
 * devices. See gtk_device_grab_add().
 * @param device a #GdkDevice
 * @returns %TRUE if there is an ongoing grab on @device          by another #GtkWidget than @widget.
 */
device_is_shadowed(device: Gdk.Device): boolean
/**
 * This function is equivalent to gtk_drag_begin_with_coordinates(),
 * passing -1, -1 as coordinates.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @returns the context for this drag
 */
drag_begin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: (Gdk.Event | null)): Gdk.DragContext
/**
 * Initiates a drag on the source side. The function only needs to be used
 * when the application is starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is %NULL, then %GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used to get information about the drag.
 * 
 * Generally there are three cases when you want to start a drag by hand by
 * calling this function:
 * 
 * 1. During a #GtkWidget::button-press-event handler, if you want to start a drag
 * immediately when the user presses the mouse button.  Pass the `event`
 * that you have in your #GtkWidget::button-press-event handler.
 * 
 * 2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
 * when the mouse moves past a certain threshold distance after a button-press.
 * Pass the `event` that you have in your #GtkWidget::motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).
 * If you really cannot pass a real event, pass %NULL instead.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @param x The initial x coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @param y The initial y coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @returns the context for this drag
 */
drag_begin_with_coordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: (Gdk.Event | null), x: number, y: number): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param start_x X coordinate of start of drag
 * @param start_y Y coordinate of start of drag
 * @param current_x current X coordinate
 * @param current_y current Y coordinate
 * @returns %TRUE if the drag threshold has been passed.
 */
drag_check_threshold(start_x: number, start_y: number, current_x: number, current_y: number): boolean
/**
 * Add the image targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_uri_targets(): void
/**
 * Looks for a match between the supported targets of `context` and the
 * `dest_target_list,` returning the first matching target, otherwise
 * returning %GDK_NONE. `dest_target_list` should usually be the return
 * value from gtk_drag_dest_get_target_list(), but some widgets may
 * have different valid targets for different parts of the widget; in
 * that case, they will have to implement a drag_motion handler that
 * passes the correct target list to this function.
 * @param context drag context
 * @param target_list list of droppable targets, or %NULL to use    gtk_drag_dest_get_target_list (@widget).
 * @returns first target that the source offers     and the dest can accept, or %GDK_NONE
 */
drag_dest_find_target(context: Gdk.DragContext, target_list?: (Gtk.TargetList | null)): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_dest_get_target_list(): (Gtk.TargetList | null)
/**
 * Returns whether the widget has been configured to always
 * emit #GtkWidget::drag-motion signals.
 * @returns %TRUE if the widget always emits   #GtkWidget::drag-motion events
 */
drag_dest_get_track_motion(): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget’s drag-and-drop signals
 * (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget’s #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget::drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget::drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There’s no way to set a default action here, you can use the
 * #GtkWidget::drag-motion callback for that. Here’s an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * 
 * ```c
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of     #GtkTargetEntrys indicating the drop types that this @widget will     accept, or %NULL. Later you can access the list with     gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this @widget.
 */
drag_dest_set(flags: Gtk.DestDefaults, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets this widget as a proxy for drops to another window.
 * @param proxy_window the window to which to forward drag events
 * @param protocol the drag protocol which the @proxy_window accepts   (You can use gdk_drag_get_protocol() to determine this)
 * @param use_coordinates If %TRUE, send the same coordinates to the   destination, because it is an embedded   subwindow.
 */
drag_dest_set_proxy(proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param target_list list of droppable targets, or %NULL for none
 */
drag_dest_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Tells the widget to emit #GtkWidget::drag-motion and
 * #GtkWidget::drag-leave events regardless of the targets and the
 * %GTK_DEST_DEFAULT_MOTION flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param track_motion whether to accept all targets
 */
drag_dest_set_track_motion(track_motion: boolean): void
/**
 * Clears information about a drop destination set with
 * gtk_drag_dest_set(). The widget will no longer receive
 * notification of drags.
 */
drag_dest_unset(): void
/**
 * Gets the data associated with a drag. When the data
 * is received or the retrieval fails, GTK+ will emit a
 * #GtkWidget::drag-data-received signal. Failure of the retrieval
 * is indicated by the length field of the `selection_data`
 * signal parameter being negative. However, when gtk_drag_get_data()
 * is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
 * then the widget will not receive notification of failed
 * drops.
 * @param context the drag context
 * @param target the target (form of the data) to retrieve
 * @param time_ a timestamp for retrieving the data. This will   generally be the time received in a #GtkWidget::drag-motion   or #GtkWidget::drag-drop signal
 */
drag_get_data(context: Gdk.DragContext, target: Gdk.Atom, time_: number): void
/**
 * Highlights a widget as a currently hovered drop target.
 * To end the highlight, call gtk_drag_unhighlight().
 * GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
 */
drag_highlight(): void
/**
 * Add the writable image targets supported by #GtkSelectionData to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_uri_targets(): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_source_get_target_list(): (Gtk.TargetList | null)
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param start_button_mask the bitmask of buttons that can start the drag
 * @param targets the table of targets     that the drag will support, may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
drag_source_set(start_button_mask: Gdk.ModifierType, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to `icon`. See the docs for #GtkIconTheme for more details.
 * @param icon A #GIcon
 */
drag_source_set_icon_gicon(icon: Gio.Icon): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param icon_name name of icon to use
 */
drag_source_set_icon_name(icon_name: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
drag_source_set_icon_pixbuf(pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param stock_id the ID of the stock icon to use
 */
drag_source_set_icon_stock(stock_id: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param target_list list of draggable targets, or %NULL for none
 */
drag_source_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Undoes the effects of gtk_drag_source_set().
 */
drag_source_unset(): void
/**
 * Removes a highlight set by gtk_drag_highlight() from
 * a widget.
 */
drag_unhighlight(): void
/**
 * Draws `widget` to `cr`. The top left corner of the widget will be
 * drawn to the currently set origin point of `cr`.
 * 
 * You should pass a cairo context as `cr` argument that is in an
 * original state. Otherwise the resulting drawing is undefined. For
 * example changing the operator using cairo_set_operator() or the
 * line width using cairo_set_line_width() might have unwanted side
 * effects.
 * You may however change the context’s transform matrix - like with
 * cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
 * region with cairo_clip() prior to calling this function. Also, it
 * is fine to modify the context with cairo_save() and
 * cairo_push_group() prior to calling this function.
 * 
 * Note that special-purpose widgets may contain special code for
 * rendering to the screen and might appear differently on screen
 * and when rendered using gtk_widget_draw().
 * @param cr a cairo context to draw to
 */
draw(cr: cairo.Context): void
/**
 * Ensures that `widget` has a style (`widget->`style).
 * 
 * Not a very useful function; most of the time, if you
 * want the style, the widget is realized, and realized
 * widgets are guaranteed to have a style already.
 */
ensure_style(): void
/**
 * Notifies the user about an input-related error on this widget.
 * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
 * gdk_window_beep(), otherwise it does nothing.
 * 
 * Note that the effect of gdk_window_beep() can be configured in many
 * ways, depending on the windowing backend and the desktop environment
 * or window manager that is used.
 */
error_bell(): void
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 * @returns return from the event signal emission (%TRUE if               the event was handled)
 */
event(event: Gdk.Event): boolean
/**
 * Stops emission of #GtkWidget::child-notify signals on `widget`. The
 * signals are queued until gtk_widget_thaw_child_notify() is called
 * on `widget`.
 * 
 * This is the analogue of g_object_freeze_notify() for child properties.
 */
freeze_child_notify(): void
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 * @returns the #AtkObject associated with @widget
 */
get_accessible(): Atk.Object
/**
 * Retrieves the #GActionGroup that was registered using `prefix`. The resulting
 * #GActionGroup may have been registered to `widget` or any #GtkWidget in its
 * ancestry.
 * 
 * If no action group was found matching `prefix,` then %NULL is returned.
 * @param prefix The “prefix” of the action group.
 * @returns A #GActionGroup or %NULL.
 */
get_action_group(prefix: string): (Gio.ActionGroup | null)
/**
 * Returns the baseline that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function, and when allocating child
 * widgets in #GtkWidget::size_allocate.
 * @returns the baseline of the @widget, or -1 if none
 */
get_allocated_baseline(): number
/**
 * Returns the height that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the height of the @widget
 */
get_allocated_height(): number
/**
 * Retrieves the widget’s allocated size.
 * 
 * This function returns the last values passed to
 * gtk_widget_size_allocate_with_baseline(). The value differs from
 * the size returned in gtk_widget_get_allocation() in that functions
 * like gtk_widget_set_halign() can adjust the allocation, but not
 * the value returned by this function.
 * 
 * If a widget is not visible, its allocated size is 0.
 */
get_allocated_size(): [Gtk.Allocation, number]
/**
 * Returns the width that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the width of the @widget
 */
get_allocated_width(): number
/**
 * Retrieves the widget’s allocation.
 * 
 * Note, when implementing a #GtkContainer: a widget’s allocation will
 * be its “adjusted” allocation, that is, the widget’s parent
 * container typically calls gtk_widget_size_allocate() with an
 * allocation, and that allocation is then adjusted (to handle margin
 * and alignment for example) before assignment to the widget.
 * gtk_widget_get_allocation() returns the adjusted allocation that
 * was actually assigned to the widget. The adjusted allocation is
 * guaranteed to be completely contained within the
 * gtk_widget_size_allocate() allocation, however. So a #GtkContainer
 * is guaranteed that its children stay inside the assigned bounds,
 * but not that they have exactly the bounds the container assigned.
 * There is no way to get the original allocation assigned by
 * gtk_widget_size_allocate(), since it isn’t stored; if a container
 * implementation needs that information it will have to track it itself.
 */
get_allocation(): Gtk.Allocation
/**
 * Gets the first ancestor of `widget` with type `widget_type`. For example,
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
 * the first #GtkBox that’s an ancestor of `widget`. No reference will be
 * added to the returned widget; it should not be unreferenced. See note
 * about checking for a toplevel #GtkWindow in the docs for
 * gtk_widget_get_toplevel().
 * 
 * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
 * considers `widget` to be an ancestor of itself.
 * @param widget_type ancestor type
 * @returns the ancestor widget, or %NULL if not found
 */
get_ancestor(widget_type: GObject.GType): (Gtk.Widget | null)
/**
 * Determines whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * See gtk_widget_set_app_paintable()
 * @returns %TRUE if the widget is app paintable
 */
get_app_paintable(): boolean
/**
 * Determines whether `widget` can be a default widget. See
 * gtk_widget_set_can_default().
 * @returns %TRUE if @widget can be a default widget, %FALSE otherwise
 */
get_can_default(): boolean
/**
 * Determines whether `widget` can own the input focus. See
 * gtk_widget_set_can_focus().
 * @returns %TRUE if @widget can own the input focus, %FALSE otherwise
 */
get_can_focus(): boolean
/**
 * This function is only for use in widget implementations. Obtains
 * `widget->`requisition, unless someone has forced a particular
 * geometry on the widget (e.g. with gtk_widget_set_size_request()),
 * in which case it returns that geometry instead of the widget's
 * requisition.
 * 
 * This function differs from gtk_widget_size_request() in that
 * it retrieves the last size request value from `widget->`requisition,
 * while gtk_widget_size_request() actually calls the "size_request" method
 * on `widget` to compute the size request and fill in `widget->`requisition,
 * and only then returns `widget->`requisition.
 * 
 * Because this function does not call the “size_request” method, it
 * can only be used when you know that `widget->`requisition is
 * up-to-date, that is, gtk_widget_size_request() has been called
 * since the last time a resize was queued. In general, only container
 * implementations have this information; applications should use
 * gtk_widget_size_request().
 */
get_child_requisition(): Gtk.Requisition
/**
 * Retrieves the widget’s clip area.
 * 
 * The clip area is the area in which all of `widget'`s drawing will
 * happen. Other toolkits call it the bounding box.
 * 
 * Historically, in GTK+ the clip area has been equal to the allocation
 * retrieved via gtk_widget_get_allocation().
 */
get_clip(): Gtk.Allocation
/**
 * Returns the clipboard object for the given selection to
 * be used with `widget`. `widget` must have a #GdkDisplay
 * associated with it, so must be attached to a toplevel
 * window.
 * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
 * @returns the appropriate clipboard object. If no             clipboard already exists, a new one will             be created. Once a clipboard object has             been created, it is persistent for all time.
 */
get_clipboard(selection: Gdk.Atom): Gtk.Clipboard
/**
 * Obtains the composite name of a widget.
 * @returns the composite name of @widget, or %NULL if @widget is not   a composite child. The string should be freed when it is no   longer needed.
 */
get_composite_name(): string
/**
 * Returns whether `device` can interact with `widget` and its
 * children. See gtk_widget_set_device_enabled().
 * @param device a #GdkDevice
 * @returns %TRUE is @device is enabled for @widget
 */
get_device_enabled(device: Gdk.Device): boolean
/**
 * Returns the events mask for the widget corresponding to an specific device. These
 * are the events that the widget will receive when `device` operates on it.
 * @param device a #GdkDevice
 * @returns device event mask for @widget
 */
get_device_events(device: Gdk.Device): Gdk.EventMask
/**
 * Gets the reading direction for a particular widget. See
 * gtk_widget_set_direction().
 * @returns the reading direction for the widget.
 */
get_direction(): Gtk.TextDirection
/**
 * Get the #GdkDisplay for the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow at the top.
 * 
 * In general, you should only create display specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkDisplay for the toplevel for this widget.
 */
get_display(): Gdk.Display
/**
 * Determines whether the widget is double buffered.
 * 
 * See gtk_widget_set_double_buffered()
 * @returns %TRUE if the widget is double buffered
 */
get_double_buffered(): boolean
/**
 * Returns the event mask (see #GdkEventMask) for the widget. These are the
 * events that the widget will receive.
 * 
 * Note: Internally, the widget event mask will be the logical OR of the event
 * mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
 * event mask necessary to cater for every #GtkEventController created for the
 * widget.
 * @returns event mask for @widget
 */
get_events(): number
/**
 * Returns whether the widget should grab focus when it is clicked with the mouse.
 * See gtk_widget_set_focus_on_click().
 * @returns %TRUE if the widget should grab focus when it is clicked with               the mouse.
 */
get_focus_on_click(): boolean
/**
 * Gets the font map that has been set with gtk_widget_set_font_map().
 * @returns A #PangoFontMap, or %NULL
 */
get_font_map(): (Pango.FontMap | null)
/**
 * Returns the #cairo_font_options_t used for Pango rendering. When not set,
 * the defaults font options for the #GdkScreen will be used.
 * @returns the #cairo_font_options_t or %NULL if not set
 */
get_font_options(): (cairo.FontOptions | null)
/**
 * Obtains the frame clock for a widget. The frame clock is a global
 * “ticker” that can be used to drive animations and repaints.  The
 * most common reason to get the frame clock is to call
 * gdk_frame_clock_get_frame_time(), in order to get a time to use for
 * animating. For example you might record the start of the animation
 * with an initial value from gdk_frame_clock_get_frame_time(), and
 * then update the animation by calling
 * gdk_frame_clock_get_frame_time() again during each repaint.
 * 
 * gdk_frame_clock_request_phase() will result in a new frame on the
 * clock, but won’t necessarily repaint any widgets. To repaint a
 * widget, you have to use gtk_widget_queue_draw() which invalidates
 * the widget (thus scheduling it to receive a draw on the next
 * frame). gtk_widget_queue_draw() will also end up requesting a frame
 * on the appropriate frame clock.
 * 
 * A widget’s frame clock will not change while the widget is
 * mapped. Reparenting a widget (which implies a temporary unmap) can
 * change the widget’s frame clock.
 * 
 * Unrealized widgets do not have a frame clock.
 * @returns a #GdkFrameClock, or %NULL if widget is unrealized
 */
get_frame_clock(): (Gdk.FrameClock | null)
/**
 * Gets the value of the #GtkWidget:halign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
 * alignment.
 * @returns the horizontal alignment of @widget
 */
get_halign(): Gtk.Align
/**
 * Returns the current value of the has-tooltip property.  See
 * #GtkWidget:has-tooltip for more information.
 * @returns current value of has-tooltip on @widget.
 */
get_has_tooltip(): boolean
/**
 * Determines whether `widget` has a #GdkWindow of its own. See
 * gtk_widget_set_has_window().
 * @returns %TRUE if @widget has a window, %FALSE otherwise
 */
get_has_window(): boolean
/**
 * Gets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Containers should use gtk_widget_compute_expand() rather than
 * this function, to see whether a widget, or any of its children,
 * has the expand flag set. If any child of a widget wants to
 * expand, the parent may ask to expand also.
 * 
 * This function only looks at the widget’s own hexpand flag, rather
 * than computing whether the entire widget tree rooted at this widget
 * wants to expand.
 * @returns whether hexpand flag is set
 */
get_hexpand(): boolean
/**
 * Gets whether gtk_widget_set_hexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @returns whether hexpand has been explicitly set
 */
get_hexpand_set(): boolean
/**
 * Whether the widget is mapped.
 * @returns %TRUE if the widget is mapped, %FALSE otherwise.
 */
get_mapped(): boolean
/**
 * Gets the value of the #GtkWidget:margin-bottom property.
 * @returns The bottom margin of @widget
 */
get_margin_bottom(): number
/**
 * Gets the value of the #GtkWidget:margin-end property.
 * @returns The end margin of @widget
 */
get_margin_end(): number
/**
 * Gets the value of the #GtkWidget:margin-left property.
 * @returns The left margin of @widget
 */
get_margin_left(): number
/**
 * Gets the value of the #GtkWidget:margin-right property.
 * @returns The right margin of @widget
 */
get_margin_right(): number
/**
 * Gets the value of the #GtkWidget:margin-start property.
 * @returns The start margin of @widget
 */
get_margin_start(): number
/**
 * Gets the value of the #GtkWidget:margin-top property.
 * @returns The top margin of @widget
 */
get_margin_top(): number
/**
 * Returns the modifier mask the `widget’`s windowing system backend
 * uses for a particular purpose.
 * 
 * See gdk_keymap_get_modifier_mask().
 * @param intent the use case for the modifier mask
 * @returns the modifier mask used for @intent.
 */
get_modifier_mask(intent: Gdk.ModifierIntent): Gdk.ModifierType
/**
 * Returns the current modifier style for the widget. (As set by
 * gtk_widget_modify_style().) If no style has previously set, a new
 * #GtkRcStyle will be created with all values unset, and set as the
 * modifier style for the widget. If you make changes to this rc
 * style, you must call gtk_widget_modify_style(), passing in the
 * returned rc style, to make sure that your changes take effect.
 * 
 * Caution: passing the style back to gtk_widget_modify_style() will
 * normally end up destroying it, because gtk_widget_modify_style() copies
 * the passed-in style and sets the copy as the new modifier style,
 * thus dropping any reference to the old modifier style. Add a reference
 * to the modifier style if you want to keep it alive.
 * @returns the modifier style for the widget.     This rc style is owned by the widget. If you want to keep a     pointer to value this around, you must add a refcount using     g_object_ref().
 */
get_modifier_style(): Gtk.RcStyle
/**
 * Retrieves the name of a widget. See gtk_widget_set_name() for the
 * significance of widget names.
 * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
 */
get_name(): string
/**
 * Returns the current value of the #GtkWidget:no-show-all property,
 * which determines whether calls to gtk_widget_show_all()
 * will affect this widget.
 * @returns the current value of the “no-show-all” property.
 */
get_no_show_all(): boolean
/**
 * Fetches the requested opacity for this widget.
 * See gtk_widget_set_opacity().
 * @returns the requested opacity for this widget.
 */
get_opacity(): number
/**
 * Gets a #PangoContext with the appropriate font map, font description,
 * and base direction for this widget. Unlike the context returned
 * by gtk_widget_create_pango_context(), this context is owned by
 * the widget (it can be used until the screen for the widget changes
 * or the widget is removed from its toplevel), and will be updated to
 * match any changes to the widget’s attributes. This can be tracked
 * by using the #GtkWidget::screen-changed signal on the widget.
 * @returns the #PangoContext for the widget.
 */
get_pango_context(): Pango.Context
/**
 * Gets `widget’`s parent window, or %NULL if it does not have one.
 * @returns the parent window of @widget, or %NULL if it does not have a parent window.
 */
get_parent_window(): (Gdk.Window | null)
/**
 * Returns the #GtkWidgetPath representing `widget,` if the widget
 * is not connected to a toplevel widget, a partial path will be
 * created.
 * @returns The #GtkWidgetPath representing @widget
 */
get_path(): Gtk.WidgetPath
/**
 * Obtains the location of the mouse pointer in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(); and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 */
get_pointer(): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves the minimum and natural size of a widget, taking
 * into account the widget’s preference for height-for-width management.
 * 
 * This is used to retrieve a suitable size by container widgets which do
 * not impose any restrictions on the child placement. It can be used
 * to deduce toplevel window and menu sizes as well as child widgets in
 * free-form containers such as GtkLayout.
 * 
 * Handle with care. Note that the natural height of a height-for-width
 * widget will generally be a smaller size than the minimum height, since the required
 * height for the natural width is generally smaller than the required height for
 * the minimum width.
 * 
 * Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
 * baseline alignment.
 */
get_preferred_size(): [Gtk.Requisition | null, Gtk.Requisition | null]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
get_preferred_width_for_height(height: number): [number, number]
/**
 * Determines whether `widget` is realized.
 * @returns %TRUE if @widget is realized, %FALSE otherwise
 */
get_realized(): boolean
/**
 * Determines whether `widget` is always treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_set_receives_default().
 * @returns %TRUE if @widget acts as the default widget when focused,               %FALSE otherwise
 */
get_receives_default(): boolean
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 * @returns The #GtkSizeRequestMode preferred by @widget.
 */
get_request_mode(): Gtk.SizeRequestMode
/**
 * Retrieves the widget’s requisition.
 * 
 * This function should only be used by widget implementations in
 * order to figure whether the widget’s requisition has actually
 * changed after some internal state change (so that they can call
 * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
 * 
 * Normally, gtk_widget_size_request() should be used.
 */
get_requisition(): Gtk.Requisition
/**
 * Get the root window where this widget is located. This function can
 * only be called after the widget has been added to a widget
 * hierarchy with #GtkWindow at the top.
 * 
 * The root window is useful for such purposes as creating a popup
 * #GdkWindow associated with the window. In general, you should only
 * create display specific resources when a widget has been realized,
 * and you should free those resources when the widget is unrealized.
 * @returns the #GdkWindow root window for the toplevel for this widget.
 */
get_root_window(): Gdk.Window
/**
 * Retrieves the internal scale factor that maps from window coordinates
 * to the actual device pixels. On traditional systems this is 1, on
 * high density outputs, it can be a higher value (typically 2).
 * 
 * See gdk_window_get_scale_factor().
 * @returns the scale factor for @widget
 */
get_scale_factor(): number
/**
 * Get the #GdkScreen from the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow
 * at the top.
 * 
 * In general, you should only create screen specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkScreen for the toplevel for this widget.
 */
get_screen(): Gdk.Screen
/**
 * Returns the widget’s sensitivity (in the sense of returning
 * the value that has been set using gtk_widget_set_sensitive()).
 * 
 * The effective sensitivity of a widget is however determined by both its
 * own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
 * @returns %TRUE if the widget is sensitive
 */
get_sensitive(): boolean
/**
 * Gets the settings object holding the settings used for this widget.
 * 
 * Note that this function can only be called when the #GtkWidget
 * is attached to a toplevel, since the settings object is specific
 * to a particular #GdkScreen.
 * @returns the relevant #GtkSettings object
 */
get_settings(): Gtk.Settings
/**
 * Gets the size request that was explicitly set for the widget using
 * gtk_widget_set_size_request(). A value of -1 stored in `width` or
 * `height` indicates that that dimension has not been set explicitly
 * and the natural requisition of the widget will be used instead. See
 * gtk_widget_set_size_request(). To get the size a widget will
 * actually request, call gtk_widget_get_preferred_size() instead of
 * this function.
 */
get_size_request(): [number, number]
/**
 * Returns the widget’s state. See gtk_widget_set_state().
 * @returns the state of @widget.
 */
get_state(): Gtk.StateType
/**
 * Returns the widget state as a flag set. It is worth mentioning
 * that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
 * returned, that is, also based on parent insensitivity, even if
 * `widget` itself is sensitive.
 * 
 * Also note that if you are looking for a way to obtain the
 * #GtkStateFlags to pass to a #GtkStyleContext method, you
 * should look at gtk_style_context_get_state().
 * @returns The state flags for widget
 */
get_state_flags(): Gtk.StateFlags
/**
 * Simply an accessor function that returns `widget->`style.
 * @returns the widget’s #GtkStyle
 */
get_style(): Gtk.Style
/**
 * Returns the style context associated to `widget`. The returned object is
 * guaranteed to be the same for the lifetime of `widget`.
 * @returns a #GtkStyleContext. This memory is owned by @widget and          must not be freed.
 */
get_style_context(): Gtk.StyleContext
/**
 * Returns %TRUE if `widget` is multiple pointer aware. See
 * gtk_widget_set_support_multidevice() for more information.
 * @returns %TRUE if @widget is multidevice aware.
 */
get_support_multidevice(): boolean
/**
 * Fetch an object build from the template XML for `widget_type` in this `widget` instance.
 * 
 * This will only report children which were previously declared with
 * gtk_widget_class_bind_template_child_full() or one of its
 * variants.
 * 
 * This function is only meant to be called for code which is private to the `widget_type` which
 * declared the child and is meant for language bindings which cannot easily make use
 * of the GObject structure offsets.
 * @param widget_type The #GType to get a template child for
 * @param name The “id” of the child defined in the template XML
 * @returns The object built in the template XML with the id @name
 */
get_template_child<T = GObject.Object>(widget_type: GObject.GType, name: string): T
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_markup(): (string | null)
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_text(): (string | null)
/**
 * Returns the #GtkWindow of the current tooltip. This can be the
 * GtkWindow created by default, or the custom tooltip window set
 * using gtk_widget_set_tooltip_window().
 * @returns The #GtkWindow of the current tooltip.
 */
get_tooltip_window(): Gtk.Window
/**
 * This function returns the topmost widget in the container hierarchy
 * `widget` is a part of. If `widget` has no parent widgets, it will be
 * returned as the topmost widget. No reference will be added to the
 * returned widget; it should not be unreferenced.
 * 
 * Note the difference in behavior vs. gtk_widget_get_ancestor();
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
 * would return
 * %NULL if `widget` wasn’t inside a toplevel window, and if the
 * window was inside a #GtkWindow-derived widget which was in turn
 * inside the toplevel #GtkWindow. While the second case may
 * seem unlikely, it actually happens when a #GtkPlug is embedded
 * inside a #GtkSocket within the same application.
 * 
 * To reliably find the toplevel #GtkWindow, use
 * gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
 * on the result. For instance, to get the title of a widget's toplevel
 * window, one might use:
 * 
 * ```c
 * static const char *
 * get_widget_toplevel_title (GtkWidget *widget)
 * {
 *   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 *   if (GTK_IS_WINDOW (toplevel))
 *     {
 *       return gtk_window_get_title (GTK_WINDOW (toplevel));
 *     }
 * 
 *   return NULL;
 * }
 * ```
 * 
 * @returns the topmost ancestor of @widget, or @widget itself    if there’s no ancestor.
 */
get_toplevel(): Gtk.Widget
/**
 * Gets the value of the #GtkWidget:valign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. If your widget want to support baseline aligned
 * children it must use gtk_widget_get_valign_with_baseline(), or
 * `g_object_get (widget, "valign", &value, NULL)`, which will
 * also report the true value.
 * @returns the vertical alignment of @widget, ignoring baseline alignment
 */
get_valign(): Gtk.Align
/**
 * Gets the value of the #GtkWidget:valign property, including
 * %GTK_ALIGN_BASELINE.
 * @returns the vertical alignment of @widget
 */
get_valign_with_baseline(): Gtk.Align
/**
 * Gets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_get_hexpand() for more detail.
 * @returns whether vexpand flag is set
 */
get_vexpand(): boolean
/**
 * Gets whether gtk_widget_set_vexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * See gtk_widget_get_hexpand_set() for more detail.
 * @returns whether vexpand has been explicitly set
 */
get_vexpand_set(): boolean
/**
 * Determines whether the widget is visible. If you want to
 * take into account whether the widget’s parent is also marked as
 * visible, use gtk_widget_is_visible() instead.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See gtk_widget_set_visible().
 * @returns %TRUE if the widget is visible
 */
get_visible(): boolean
/**
 * Gets the visual that will be used to render `widget`.
 * @returns the visual for @widget
 */
get_visual(): Gdk.Visual
/**
 * Returns the widget’s window if it is realized, %NULL otherwise
 * @returns @widget’s window.
 */
get_window(): (Gdk.Window | null)
/**
 * Makes `widget` the current grabbed widget.
 * 
 * This means that interaction with other widgets in the same
 * application is blocked and mouse as well as keyboard events
 * are delivered to this widget.
 * 
 * If `widget` is not sensitive, it is not set as the current
 * grabbed widget and this function does nothing.
 */
grab_add(): void
/**
 * Causes `widget` to become the default widget. `widget` must be able to be
 * a default widget; typically you would ensure this yourself
 * by calling gtk_widget_set_can_default() with a %TRUE value.
 * The default widget is activated when
 * the user presses Enter in a window. Default widgets must be
 * activatable, that is, gtk_widget_activate() should affect them. Note
 * that #GtkEntry widgets require the “activates-default” property
 * set to %TRUE before they activate the default widget when Enter
 * is pressed and the #GtkEntry is focused.
 */
grab_default(): void
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
grab_focus(): void
/**
 * Removes the grab from the given widget.
 * 
 * You have to pair calls to gtk_grab_add() and gtk_grab_remove().
 * 
 * If `widget` does not have the grab, this function does nothing.
 */
grab_remove(): void
/**
 * Determines whether the widget is currently grabbing events, so it
 * is the only widget receiving input events (keyboard and mouse).
 * 
 * See also gtk_grab_add().
 * @returns %TRUE if the widget is in the grab_widgets stack
 */
has_grab(): boolean
/**
 * Determines if the widget style has been looked up through the rc mechanism.
 * @returns %TRUE if the widget has been looked up through the rc   mechanism, %FALSE otherwise.
 */
has_rc_style(): boolean
/**
 * Checks whether there is a #GdkScreen is associated with
 * this widget. All toplevel widgets have an associated
 * screen, and all widgets added into a hierarchy with a toplevel
 * window at the top.
 * @returns %TRUE if there is a #GdkScreen associated   with the widget.
 */
has_screen(): boolean
/**
 * Determines if the widget should show a visible indication that
 * it has the global input focus. This is a convenience function for
 * use in ::draw handlers that takes into account whether focus
 * indication should currently be shown in the toplevel window of
 * `widget`. See gtk_window_get_focus_visible() for more information
 * about focus indication.
 * 
 * To find out if the widget has the global input focus, use
 * gtk_widget_has_focus().
 * @returns %TRUE if the widget should display a “focus rectangle”
 */
has_visible_focus(): boolean
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
hide(): void
/**
 * Utility function; intended to be connected to the #GtkWidget::delete-event
 * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
 * argument, then returns %TRUE. If connected to ::delete-event, the
 * result is that clicking the close button for a window (on the
 * window frame, top right corner usually) will hide but not destroy
 * the window. By default, GTK+ destroys windows when ::delete-event
 * is received.
 * @returns %TRUE
 */
hide_on_delete(): boolean
/**
 * Returns whether the widget is currently being destroyed.
 * This information can sometimes be used to avoid doing
 * unnecessary work.
 * @returns %TRUE if @widget is being destroyed
 */
in_destruction(): boolean
/**
 * Creates and initializes child widgets defined in templates. This
 * function must be called in the instance initializer for any
 * class which assigned itself a template using gtk_widget_class_set_template()
 * 
 * It is important to call this function in the instance initializer
 * of a #GtkWidget subclass and not in #GObject.constructed() or
 * #GObject.constructor() for two reasons.
 * 
 * One reason is that generally derived widgets will assume that parent
 * class composite widgets have been created in their instance
 * initializers.
 * 
 * Another reason is that when calling g_object_new() on a widget with
 * composite templates, it’s important to build the composite widgets
 * before the construct properties are set. Properties passed to g_object_new()
 * should take precedence over properties set in the private template XML.
 */
init_template(): void
/**
 * Sets an input shape for this widget’s GDK window. This allows for
 * windows which react to mouse click in a nonrectangular region, see
 * gdk_window_input_shape_combine_region() for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
input_shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Inserts `group` into `widget`. Children of `widget` that implement
 * #GtkActionable can then be associated with actions in `group` by
 * setting their “action-name” to
 * `prefix`.`action-name`.
 * 
 * If `group` is %NULL, a previously inserted group for `name` is removed
 * from `widget`.
 * @param name the prefix for actions in @group
 * @param group a #GActionGroup, or %NULL
 */
insert_action_group(name: string, group?: (Gio.ActionGroup | null)): void
/**
 * Computes the intersection of a `widget’`s area and `area,` storing
 * the intersection in `intersection,` and returns %TRUE if there was
 * an intersection.  `intersection` may be %NULL if you’re only
 * interested in whether there was an intersection.
 * @param area a rectangle
 * @returns %TRUE if there was an intersection
 */
intersect(area: Gdk.Rectangle): [boolean, Gdk.Rectangle | null]
/**
 * Determines whether `widget` is somewhere inside `ancestor,` possibly with
 * intermediate containers.
 * @param ancestor another #GtkWidget
 * @returns %TRUE if @ancestor contains @widget as a child,    grandchild, great grandchild, etc.
 */
is_ancestor(ancestor: Gtk.Widget): boolean
/**
 * Whether `widget` can rely on having its alpha channel
 * drawn correctly. On X11 this function returns whether a
 * compositing manager is running for `widget’`s screen.
 * 
 * Please note that the semantics of this call will change
 * in the future if used on a widget that has a composited
 * window in its hierarchy (as set by gdk_window_set_composited()).
 * @returns %TRUE if the widget can rely on its alpha channel being drawn correctly.
 */
is_composited(): boolean
/**
 * Determines whether `widget` can be drawn to. A widget can be drawn
 * to if it is mapped and visible.
 * @returns %TRUE if @widget is drawable, %FALSE otherwise
 */
is_drawable(): boolean
/**
 * Returns the widget’s effective sensitivity, which means
 * it is sensitive itself and also its parent widget is sensitive
 * @returns %TRUE if the widget is effectively sensitive
 */
is_sensitive(): boolean
/**
 * Determines whether `widget` is a toplevel widget.
 * 
 * Currently only #GtkWindow and #GtkInvisible (and out-of-process
 * #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
 * widget.
 * @returns %TRUE if @widget is a toplevel, %FALSE otherwise
 */
is_toplevel(): boolean
/**
 * Determines whether the widget and all its parents are marked as
 * visible.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See also gtk_widget_get_visible() and gtk_widget_set_visible()
 * @returns %TRUE if the widget and all its parents are visible
 */
is_visible(): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 * @returns %TRUE if stopping keyboard navigation is fine, %FALSE               if the emitting widget should try to handle the keyboard               navigation attempt in its parent container(s).
 */
keynav_failed(direction: Gtk.DirectionType): boolean
/**
 * Lists the closures used by `widget` for accelerator group connections
 * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
 * The closures can be used to monitor accelerator changes on `widget,`
 * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
 * #GtkAccelGroup of a closure which can be found out with
 * gtk_accel_group_from_accel_closure().
 * @returns a newly allocated #GList of closures
 */
list_accel_closures(): GObject.Closure[]
/**
 * Retrieves a %NULL-terminated array of strings containing the prefixes of
 * #GActionGroup's available to `widget`.
 * @returns a %NULL-terminated array of strings.
 */
list_action_prefixes(): string[]
/**
 * Returns a newly allocated list of the widgets, normally labels, for
 * which this widget is the target of a mnemonic (see for example,
 * gtk_label_set_mnemonic_widget()).
 * 
 * The widgets in the list are not individually referenced. If you
 * want to iterate through the list and perform actions involving
 * callbacks that might destroy the widgets, you
 * must call `g_list_foreach (result,
 * (GFunc)g_object_ref, NULL)` first, and then unref all the
 * widgets afterwards.
 * @returns the list of  mnemonic labels; free this list  with g_list_free() when you are done with it.
 */
list_mnemonic_labels(): Gtk.Widget[]
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
map(): void
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 * @returns %TRUE if the signal has been handled
 */
mnemonic_activate(group_cycling: boolean): boolean
/**
 * Sets the base color for a widget in a particular state.
 * All other style values are left untouched. The base color
 * is the background color used along with the text color
 * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
 * and #GtkTextView. See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > base color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the base color on that.
 * @param state the state for which to set the base color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_base().
 */
modify_base(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > background color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the background color on that.
 * @param state the state for which to set the background color
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_bg().
 */
modify_bg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the #GtkWidget
 * cursor-color and secondary-cursor-color
 * style properties.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param primary the color to use for primary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_cursor().
 * @param secondary the color to use for secondary cursor (does     not need to be allocated), or %NULL to undo the effect of     previous calls to of gtk_widget_modify_cursor().
 */
modify_cursor(primary?: (Gdk.Color | null), secondary?: (Gdk.Color | null)): void
/**
 * Sets the foreground color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the foreground color
 * @param color the color to assign (does not need to be allocated),     or %NULL to undo the effect of previous calls to     of gtk_widget_modify_fg().
 */
modify_fg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the font to use for a widget.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param font_desc the font description to use, or %NULL     to undo the effect of previous calls to gtk_widget_modify_font()
 */
modify_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Modifies style values on the widget.
 * 
 * Modifications made using this technique take precedence over
 * style values set via an RC file, however, they will be overridden
 * if a style is explicitly set on the widget using gtk_widget_set_style().
 * The #GtkRcStyle-struct is designed so each field can either be
 * set or unset, so it is possible, using this function, to modify some
 * style values and leave the others unchanged.
 * 
 * Note that modifications made with this function are not cumulative
 * with previous calls to gtk_widget_modify_style() or with such
 * functions as gtk_widget_modify_fg(). If you wish to retain
 * previous values, you must first call gtk_widget_get_modifier_style(),
 * make your modifications to the returned style, then call
 * gtk_widget_modify_style() with that style. On the other hand,
 * if you first call gtk_widget_modify_style(), subsequent calls
 * to such functions gtk_widget_modify_fg() will have a cumulative
 * effect with the initial modifications.
 * @param style the #GtkRcStyle-struct holding the style modifications
 */
modify_style(style: Gtk.RcStyle): void
/**
 * Sets the text color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * The text color is the foreground color used along with the
 * base color (see gtk_widget_modify_base()) for widgets such
 * as #GtkEntry and #GtkTextView.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the text color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_text().
 */
modify_text(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color to use for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color().
 * @param state the state for which to set the background color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_background_color()
 */
override_background_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the color to use for a widget.
 * 
 * All other style values are left untouched.
 * 
 * This function does not act recursively. Setting the color of a
 * container does not affect its children. Note that some widgets that
 * you may not think of as containers, for instance #GtkButtons,
 * are actually containers.
 * 
 * This API is mostly meant as a quick way for applications to
 * change a widget appearance. If you are developing a widgets
 * library and intend this change to be themeable, it is better
 * done by setting meaningful CSS classes in your
 * widget/container implementation through gtk_style_context_add_class().
 * 
 * This way, your widget library can install a #GtkCssProvider
 * with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
 * to provide a default styling for those widgets that need so, and
 * this theming may fully overridden by the user’s theme.
 * 
 * Note that for complex widgets this may bring in undesired
 * results (such as uniform background color everywhere), in
 * these cases it is better to fully style such widgets through a
 * #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
 * priority.
 * @param state the state for which to set the color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_color()
 */
override_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the
 * cursor-color and secondary-cursor-color
 * style properties. All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * Note that the underlying properties have the #GdkColor type,
 * so the alpha value in `primary` and `secondary` will be ignored.
 * @param cursor the color to use for primary cursor (does not need to be     allocated), or %NULL to undo the effect of previous calls to     of gtk_widget_override_cursor().
 * @param secondary_cursor the color to use for secondary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_override_cursor().
 */
override_cursor(cursor?: (Gdk.RGBA | null), secondary_cursor?: (Gdk.RGBA | null)): void
/**
 * Sets the font to use for a widget. All other style values are
 * left untouched. See gtk_widget_override_color().
 * @param font_desc the font description to use, or %NULL to undo     the effect of previous calls to gtk_widget_override_font()
 */
override_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Sets a symbolic color for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color() for overriding the foreground
 * or background color.
 * @param name the name of the symbolic color to modify
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to gtk_widget_override_symbolic_color()
 */
override_symbolic_color(name: string, color?: (Gdk.RGBA | null)): void
/**
 * Obtains the full path to `widget`. The path is simply the name of a
 * widget and all its parents in the container hierarchy, separated by
 * periods. The name of a widget comes from
 * gtk_widget_get_name(). Paths are used to apply styles to a widget
 * in gtkrc configuration files. Widget names are the type of the
 * widget by default (e.g. “GtkButton”) or can be set to an
 * application-specific value with gtk_widget_set_name(). By setting
 * the name of a widget, you allow users or theme authors to apply
 * styles to that specific widget in their gtkrc
 * file. `path_reversed_p` fills in the path in reverse order,
 * i.e. starting with `widget’`s name instead of starting with the name
 * of `widget’`s outermost ancestor.
 */
path(): [number, string, string]
/**
 * This function is only for use in widget implementations.
 * 
 * Flags the widget for a rerun of the GtkWidgetClass::size_allocate
 * function. Use this function instead of gtk_widget_queue_resize()
 * when the `widget'`s size request didn't change but it wants to
 * reposition its contents.
 * 
 * An example user of this function is gtk_widget_set_halign().
 */
queue_allocate(): void
/**
 * Mark `widget` as needing to recompute its expand flags. Call
 * this function when setting legacy expand child properties
 * on the child of a container.
 * 
 * See gtk_widget_compute_expand().
 */
queue_compute_expand(): void
/**
 * Equivalent to calling gtk_widget_queue_draw_area() for the
 * entire area of a widget.
 */
queue_draw(): void
/**
 * Convenience function that calls gtk_widget_queue_draw_region() on
 * the region created from the given coordinates.
 * 
 * The region here is specified in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(), and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 * 
 * `width` or `height` may be 0, in this case this function does
 * nothing. Negative values for `width` and `height` are not allowed.
 * @param x x coordinate of upper-left corner of rectangle to redraw
 * @param y y coordinate of upper-left corner of rectangle to redraw
 * @param width width of region to draw
 * @param height height of region to draw
 */
queue_draw_area(x: number, y: number, width: number, height: number): void
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
queue_draw_region(region: cairo.Region): void
/**
 * This function is only for use in widget implementations.
 * Flags a widget to have its size renegotiated; should
 * be called when a widget for some reason has a new size request.
 * For example, when you change the text in a #GtkLabel, #GtkLabel
 * queues a resize to ensure there’s enough space for the new text.
 * 
 * Note that you cannot call gtk_widget_queue_resize() on a widget
 * from inside its implementation of the GtkWidgetClass::size_allocate
 * virtual method. Calls to gtk_widget_queue_resize() from inside
 * GtkWidgetClass::size_allocate will be silently ignored.
 */
queue_resize(): void
/**
 * This function works like gtk_widget_queue_resize(),
 * except that the widget is not invalidated.
 */
queue_resize_no_redraw(): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
realize(): void
/**
 * Computes the intersection of a `widget’`s area and `region,` returning
 * the intersection. The result may be empty, use cairo_region_is_empty() to
 * check.
 * @param region a #cairo_region_t, in the same coordinate system as          @widget->allocation. That is, relative to @widget->window          for widgets which return %FALSE from gtk_widget_get_has_window();          relative to the parent window of @widget->window otherwise.
 * @returns A newly allocated region holding the intersection of @widget     and @region.
 */
region_intersect(region: cairo.Region): cairo.Region
/**
 * Registers a #GdkWindow with the widget and sets it up so that
 * the widget receives events for it. Call gtk_widget_unregister_window()
 * when destroying the window.
 * 
 * Before 3.8 you needed to call gdk_window_set_user_data() directly to set
 * this up. This is now deprecated and you should use gtk_widget_register_window()
 * instead. Old code will keep working as is, although some new features like
 * transparency might not work perfectly.
 * @param window a #GdkWindow
 */
register_window(window: Gdk.Window): void
/**
 * Removes an accelerator from `widget,` previously installed with
 * gtk_widget_add_accelerator().
 * @param accel_group accel group for this widget
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @returns whether an accelerator was installed and could be removed
 */
remove_accelerator(accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType): boolean
/**
 * Removes a widget from the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
 * must have previously been added to the list with
 * gtk_widget_add_mnemonic_label().
 * @param label a #GtkWidget that was previously set as a mnemonic label for         @widget with gtk_widget_add_mnemonic_label().
 */
remove_mnemonic_label(label: Gtk.Widget): void
/**
 * Removes a tick callback previously registered with
 * gtk_widget_add_tick_callback().
 * @param id an id returned by gtk_widget_add_tick_callback()
 */
remove_tick_callback(id: number): void
/**
 * A convenience function that uses the theme settings for `widget`
 * to look up `stock_id` and render it to a pixbuf. `stock_id` should
 * be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size`
 * should be a size such as #GTK_ICON_SIZE_MENU. `detail` should be a
 * string that identifies the widget or code doing the rendering, so
 * that theme engines can special-case rendering for that widget or
 * code.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be
 * freed after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @param detail render detail to pass to theme engine
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon(stock_id: string, size: number, detail?: (string | null)): (GdkPixbuf.Pixbuf | null)
/**
 * A convenience function that uses the theme engine and style
 * settings for `widget` to look up `stock_id` and render it to
 * a pixbuf. `stock_id` should be a stock icon ID such as
 * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
 * such as #GTK_ICON_SIZE_MENU.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be freed
 * after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon_pixbuf(stock_id: string, size: number): (GdkPixbuf.Pixbuf | null)
/**
 * Moves a widget from one #GtkContainer to another, handling reference
 * count issues to avoid destroying the widget.
 * @param new_parent a #GtkContainer to move the widget into
 */
reparent(new_parent: Gtk.Widget): void
/**
 * Reset the styles of `widget` and all descendents, so when
 * they are looked up again, they get the correct values
 * for the currently loaded RC file settings.
 * 
 * This function is not useful for applications.
 */
reset_rc_styles(): void
/**
 * Updates the style context of `widget` and all descendants
 * by updating its widget path. #GtkContainers may want
 * to use this on a child when reordering it in a way that a different
 * style might apply to it. See also gtk_container_get_path_for_child().
 */
reset_style(): void
/**
 * Very rarely-used function. This function is used to emit
 * an expose event on a widget. This function is not normally used
 * directly. The only time it is used is when propagating an expose
 * event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
 * and that is normally done using gtk_container_propagate_draw().
 * 
 * If you want to force an area of a window to be redrawn,
 * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
 * To cause the redraw to be done immediately, follow that call
 * with a call to gdk_window_process_updates().
 * @param event a expose #GdkEvent
 * @returns return from the event signal emission (%TRUE if   the event was handled)
 */
send_expose(event: Gdk.Event): number
/**
 * Sends the focus change `event` to `widget`
 * 
 * This function is not meant to be used by applications. The only time it
 * should be used is when it is necessary for a #GtkWidget to assign focus
 * to a widget that is semantically owned by the first widget even though
 * it’s not a direct child - for instance, a search entry in a floating
 * window similar to the quick search in #GtkTreeView.
 * 
 * An example of its usage is:
 * 
 * 
 * ```c
 *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
 * 
 *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
 *   fevent->focus_change.in = TRUE;
 *   fevent->focus_change.window = _gtk_widget_get_window (widget);
 *   if (fevent->focus_change.window != NULL)
 *     g_object_ref (fevent->focus_change.window);
 * 
 *   gtk_widget_send_focus_change (widget, fevent);
 * 
 *   gdk_event_free (event);
 * ```
 * 
 * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
 * @returns the return value from the event signal emission: %TRUE   if the event was handled, and %FALSE otherwise
 */
send_focus_change(event: Gdk.Event): boolean
/**
 * Given an accelerator group, `accel_group,` and an accelerator path,
 * `accel_path,` sets up an accelerator in `accel_group` so whenever the
 * key binding that is defined for `accel_path` is pressed, `widget`
 * will be activated.  This removes any accelerators (for any
 * accelerator group) installed by previous calls to
 * gtk_widget_set_accel_path(). Associating accelerators with
 * paths allows them to be modified by the user and the modifications
 * to be saved for future use. (See gtk_accel_map_save().)
 * 
 * This function is a low level function that would most likely
 * be used by a menu creation system like #GtkUIManager. If you
 * use #GtkUIManager, setting up accelerator paths will be done
 * automatically.
 * 
 * Even when you you aren’t using #GtkUIManager, if you only want to
 * set up accelerators on menu items gtk_menu_item_set_accel_path()
 * provides a somewhat more convenient interface.
 * 
 * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
 * pass a static string, you can save some memory by interning it first with
 * g_intern_static_string().
 * @param accel_path path used to look up the accelerator
 * @param accel_group a #GtkAccelGroup.
 */
set_accel_path(accel_path?: (string | null), accel_group?: (Gtk.AccelGroup | null)): void
/**
 * Sets the widget’s allocation.  This should not be used
 * directly, but from within a widget’s size_allocate method.
 * 
 * The allocation set should be the “adjusted” or actual
 * allocation. If you’re implementing a #GtkContainer, you want to use
 * gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
 * The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
 * allocation inside gtk_widget_size_allocate() to create an adjusted
 * allocation.
 * @param allocation a pointer to a #GtkAllocation to copy from
 */
set_allocation(allocation: Gtk.Allocation): void
/**
 * Sets whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * This is a hint to the widget and does not affect the behavior of
 * the GTK+ core; many widgets ignore this flag entirely. For widgets
 * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
 * the effect is to suppress default themed drawing of the widget's
 * background. (Children of the widget will still be drawn.) The application
 * is then entirely responsible for drawing the widget background.
 * 
 * Note that the background is still drawn when the widget is mapped.
 * @param app_paintable %TRUE if the application will paint on the widget
 */
set_app_paintable(app_paintable: boolean): void
/**
 * Specifies whether `widget` can be a default widget. See
 * gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param can_default whether or not @widget can be a default widget.
 */
set_can_default(can_default: boolean): void
/**
 * Specifies whether `widget` can own the input focus. See
 * gtk_widget_grab_focus() for actually setting the input focus on a
 * widget.
 * @param can_focus whether or not @widget can own the input focus.
 */
set_can_focus(can_focus: boolean): void
/**
 * Sets the widget’s clip.  This must not be used directly,
 * but from within a widget’s size_allocate method.
 * It must be called after gtk_widget_set_allocation() (or after chaining up
 * to the parent class), because that function resets the clip.
 * 
 * The clip set should be the area that `widget` draws on. If `widget` is a
 * #GtkContainer, the area must contain all children's clips.
 * 
 * If this function is not called by `widget` during a ::size-allocate handler,
 * the clip will be set to `widget'`s allocation.
 * @param clip a pointer to a #GtkAllocation to copy from
 */
set_clip(clip: Gtk.Allocation): void
/**
 * Sets a widgets composite name. The widget must be
 * a composite child of its parent; see gtk_widget_push_composite_child().
 * @param name the name to set
 */
set_composite_name(name: string): void
/**
 * Enables or disables a #GdkDevice to interact with `widget`
 * and all its children.
 * 
 * It does so by descending through the #GdkWindow hierarchy
 * and enabling the same mask that is has for core events
 * (i.e. the one that gdk_window_get_events() returns).
 * @param device a #GdkDevice
 * @param enabled whether to enable the device
 */
set_device_enabled(device: Gdk.Device, enabled: boolean): void
/**
 * Sets the device event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive from `device`. Keep
 * in mind that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_device_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with windowless widgets (which return
 * %FALSE from gtk_widget_get_has_window());
 * to get events on those widgets, place them inside a #GtkEventBox
 * and receive events on the event box.
 * @param device a #GdkDevice
 * @param events event mask
 */
set_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Sets the reading direction on a particular widget. This direction
 * controls the primary direction for widgets containing text,
 * and also the direction in which the children of a container are
 * packed. The ability to set the direction is present in order
 * so that correct localization into languages with right-to-left
 * reading directions can be done. Generally, applications will
 * let the default reading direction present, except for containers
 * where the containers are arranged in an order that is explicitly
 * visual rather than logical (such as buttons for text justification).
 * 
 * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
 * set by gtk_widget_set_default_direction() will be used.
 * @param dir the new direction
 */
set_direction(dir: Gtk.TextDirection): void
/**
 * Widgets are double buffered by default; you can use this function
 * to turn off the buffering. “Double buffered” simply means that
 * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
 * automatically around expose events sent to the
 * widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
 * window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
 * buffer to the screen. The result is that users see the window
 * update in one smooth step, and don’t see individual graphics
 * primitives being rendered.
 * 
 * In very simple terms, double buffered widgets don’t flicker,
 * so you would only use this function to turn off double buffering
 * if you had special needs and really knew what you were doing.
 * 
 * Note: if you turn off double-buffering, you have to handle
 * expose events, since even the clearing to the background color or
 * pixmap will not happen automatically (as it is done in
 * gdk_window_begin_draw_frame()).
 * 
 * In 3.10 GTK and GDK have been restructured for translucent drawing. Since
 * then expose events for double-buffered widgets are culled into a single
 * event to the toplevel GDK window. If you now unset double buffering, you
 * will cause a separate rendering pass for every widget. This will likely
 * cause rendering problems - in particular related to stacking - and usually
 * increases rendering times significantly.
 * @param double_buffered %TRUE to double-buffer a widget
 */
set_double_buffered(double_buffered: boolean): void
/**
 * Sets the event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive. Keep in mind
 * that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with widgets that have no window.
 * (See gtk_widget_get_has_window()).  To get events on those widgets,
 * place them inside a #GtkEventBox and receive events on the event
 * box.
 * @param events event mask
 */
set_events(events: number): void
/**
 * Sets whether the widget should grab focus when it is clicked with the mouse.
 * Making mouse clicks not grab focus is useful in places like toolbars where
 * you don’t want the keyboard focus removed from the main area of the
 * application.
 * @param focus_on_click whether the widget should grab focus when clicked with the mouse
 */
set_focus_on_click(focus_on_click: boolean): void
/**
 * Sets the font map to use for Pango rendering. When not set, the widget
 * will inherit the font map from its parent.
 * @param font_map a #PangoFontMap, or %NULL to unset any previously     set font map
 */
set_font_map(font_map?: (Pango.FontMap | null)): void
/**
 * Sets the #cairo_font_options_t used for Pango rendering in this widget.
 * When not set, the default font options for the #GdkScreen will be used.
 * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
 */
set_font_options(options?: (cairo.FontOptions | null)): void
/**
 * Sets the horizontal alignment of `widget`.
 * See the #GtkWidget:halign property.
 * @param align the horizontal alignment
 */
set_halign(align: Gtk.Align): void
/**
 * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
 * #GtkWidget:has-tooltip for more information.
 * @param has_tooltip whether or not @widget has a tooltip.
 */
set_has_tooltip(has_tooltip: boolean): void
/**
 * Specifies whether `widget` has a #GdkWindow of its own. Note that
 * all realized widgets have a non-%NULL “window” pointer
 * (gtk_widget_get_window() never returns a %NULL window when a widget
 * is realized), but for many of them it’s actually the #GdkWindow of
 * one of its parent widgets. Widgets that do not create a %window for
 * themselves in #GtkWidget::realize must announce this by
 * calling this function with `has_window` = %FALSE.
 * 
 * This function should only be called by widget implementations,
 * and they should call it in their init() function.
 * @param has_window whether or not @widget has a window.
 */
set_has_window(has_window: boolean): void
/**
 * Sets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Call this function to set the expand flag if you would like your
 * widget to become larger horizontally when the window has extra
 * room.
 * 
 * By default, widgets automatically expand if any of their children
 * want to expand. (To see if a widget will automatically expand given
 * its current children and state, call gtk_widget_compute_expand(). A
 * container can decide how the expandability of children affects the
 * expansion of the container by overriding the compute_expand virtual
 * method on #GtkWidget.).
 * 
 * Setting hexpand explicitly with this function will override the
 * automatic expand behavior.
 * 
 * This function forces the widget to expand or not to expand,
 * regardless of children.  The override occurs because
 * gtk_widget_set_hexpand() sets the hexpand-set property (see
 * gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
 * value to be used, rather than looking at children and widget state.
 * @param expand whether to expand
 */
set_hexpand(expand: boolean): void
/**
 * Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
 * be used.
 * 
 * The hexpand-set property will be set automatically when you call
 * gtk_widget_set_hexpand() to set hexpand, so the most likely
 * reason to use this function would be to unset an explicit expand
 * flag.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @param set value for hexpand-set property
 */
set_hexpand_set(set: boolean): void
/**
 * Marks the widget as being mapped.
 * 
 * This function should only ever be called in a derived widget's
 * “map” or “unmap” implementation.
 * @param mapped %TRUE to mark the widget as mapped
 */
set_mapped(mapped: boolean): void
/**
 * Sets the bottom margin of `widget`.
 * See the #GtkWidget:margin-bottom property.
 * @param margin the bottom margin
 */
set_margin_bottom(margin: number): void
/**
 * Sets the end margin of `widget`.
 * See the #GtkWidget:margin-end property.
 * @param margin the end margin
 */
set_margin_end(margin: number): void
/**
 * Sets the left margin of `widget`.
 * See the #GtkWidget:margin-left property.
 * @param margin the left margin
 */
set_margin_left(margin: number): void
/**
 * Sets the right margin of `widget`.
 * See the #GtkWidget:margin-right property.
 * @param margin the right margin
 */
set_margin_right(margin: number): void
/**
 * Sets the start margin of `widget`.
 * See the #GtkWidget:margin-start property.
 * @param margin the start margin
 */
set_margin_start(margin: number): void
/**
 * Sets the top margin of `widget`.
 * See the #GtkWidget:margin-top property.
 * @param margin the top margin
 */
set_margin_top(margin: number): void
/**
 * Widgets can be named, which allows you to refer to them from a
 * CSS file. You can apply a style to widgets with a particular name
 * in the CSS file. See the documentation for the CSS syntax (on the
 * same page as the docs for #GtkStyleContext).
 * 
 * Note that the CSS syntax has certain special characters to delimit
 * and represent elements in a selector (period, #, >, *...), so using
 * these will make your widget impossible to match by name. Any combination
 * of alphanumeric symbols, dashes and underscores will suffice.
 * @param name name for the widget
 */
set_name(name: string): void
/**
 * Sets the #GtkWidget:no-show-all property, which determines whether
 * calls to gtk_widget_show_all() will affect this widget.
 * 
 * This is mostly for use in constructing widget hierarchies with externally
 * controlled visibility, see #GtkUIManager.
 * @param no_show_all the new value for the “no-show-all” property
 */
set_no_show_all(no_show_all: boolean): void
/**
 * Request the `widget` to be rendered partially transparent,
 * with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
 * are clamped to the [0,1] range.).
 * This works on both toplevel widget, and child widgets, although there
 * are some limitations:
 * 
 * For toplevel widgets this depends on the capabilities of the windowing
 * system. On X11 this has any effect only on X screens with a compositing manager
 * running. See gtk_widget_is_composited(). On Windows it should work
 * always, although setting a window’s opacity after the window has been
 * shown causes it to flicker once on Windows.
 * 
 * For child widgets it doesn’t work if any affected widget has a native window, or
 * disables double buffering.
 * @param opacity desired opacity, between 0 and 1
 */
set_opacity(opacity: number): void
/**
 * This function is useful only when implementing subclasses of
 * #GtkContainer.
 * Sets the container as the parent of `widget,` and takes care of
 * some details such as updating the state and style of the child
 * to reflect its new location. The opposite function is
 * gtk_widget_unparent().
 * @param parent parent container
 */
set_parent(parent: Gtk.Widget): void
/**
 * Sets a non default parent window for `widget`.
 * 
 * For #GtkWindow classes, setting a `parent_window` effects whether
 * the window is a toplevel window or can be embedded into other
 * widgets.
 * 
 * For #GtkWindow classes, this needs to be called before the
 * window is realized.
 * @param parent_window the new parent window.
 */
set_parent_window(parent_window: Gdk.Window): void
/**
 * Marks the widget as being realized. This function must only be
 * called after all #GdkWindows for the `widget` have been created
 * and registered.
 * 
 * This function should only ever be called in a derived widget's
 * “realize” or “unrealize” implementation.
 * @param realized %TRUE to mark the widget as realized
 */
set_realized(realized: boolean): void
/**
 * Specifies whether `widget` will be treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param receives_default whether or not @widget can be a default widget.
 */
set_receives_default(receives_default: boolean): void
/**
 * Sets whether the entire widget is queued for drawing when its size
 * allocation changes. By default, this setting is %TRUE and
 * the entire widget is redrawn on every size change. If your widget
 * leaves the upper left unchanged when made bigger, turning this
 * setting off will improve performance.
 * 
 * Note that for widgets where gtk_widget_get_has_window() is %FALSE
 * setting this flag to %FALSE turns off all allocation on resizing:
 * the widget will not even redraw if its position changes; this is to
 * allow containers that don’t draw anything to avoid excess
 * invalidations. If you set this flag on a widget with no window that
 * does draw on `widget->`window, you are
 * responsible for invalidating both the old and new allocation of the
 * widget when the widget is moved and responsible for invalidating
 * regions newly when the widget increases size.
 * @param redraw_on_allocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
 */
set_redraw_on_allocate(redraw_on_allocate: boolean): void
/**
 * Sets the sensitivity of a widget. A widget is sensitive if the user
 * can interact with it. Insensitive widgets are “grayed out” and the
 * user can’t interact with them. Insensitive widgets are known as
 * “inactive”, “disabled”, or “ghosted” in some other toolkits.
 * @param sensitive %TRUE to make the widget sensitive
 */
set_sensitive(sensitive: boolean): void
/**
 * Sets the minimum size of a widget; that is, the widget’s size
 * request will be at least `width` by `height`. You can use this
 * function to force a widget to be larger than it normally would be.
 * 
 * In most cases, gtk_window_set_default_size() is a better choice for
 * toplevel windows than this function; setting the default size will
 * still allow users to shrink the window. Setting the size request
 * will force them to leave the window at least as large as the size
 * request. When dealing with window sizes,
 * gtk_window_set_geometry_hints() can be a useful function as well.
 * 
 * Note the inherent danger of setting any fixed size - themes,
 * translations into other languages, different fonts, and user action
 * can all change the appropriate size for a given widget. So, it's
 * basically impossible to hardcode a size that will always be
 * correct.
 * 
 * The size request of a widget is the smallest size a widget can
 * accept while still functioning well and drawing itself correctly.
 * However in some strange cases a widget may be allocated less than
 * its requested size, and in many cases a widget may be allocated more
 * space than it requested.
 * 
 * If the size request in a given direction is -1 (unset), then
 * the “natural” size request of the widget will be used instead.
 * 
 * The size request set here does not include any margin from the
 * #GtkWidget properties margin-left, margin-right, margin-top, and
 * margin-bottom, but it does include pretty much all other padding
 * or border properties set by any subclass of #GtkWidget.
 * @param width width @widget should request, or -1 to unset
 * @param height height @widget should request, or -1 to unset
 */
set_size_request(width: number, height: number): void
/**
 * This function is for use in widget implementations. Sets the state
 * of a widget (insensitive, prelighted, etc.) Usually you should set
 * the state using wrapper functions such as gtk_widget_set_sensitive().
 * @param state new state for @widget
 */
set_state(state: Gtk.StateType): void
/**
 * This function is for use in widget implementations. Turns on flag
 * values in the current widget state (insensitive, prelighted, etc.).
 * 
 * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
 * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
 * direction, use gtk_widget_set_direction().
 * 
 * It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
 * will be propagated down to all non-internal children if `widget` is a
 * #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
 * down to all #GtkContainer children by different means than turning on the
 * state flag down the hierarchy, both gtk_widget_get_state_flags() and
 * gtk_widget_is_sensitive() will make use of these.
 * @param flags State flags to turn on
 * @param clear Whether to clear state before turning on @flags
 */
set_state_flags(flags: Gtk.StateFlags, clear: boolean): void
/**
 * Used to set the #GtkStyle for a widget (`widget->`style). Since
 * GTK 3, this function does nothing, the passed in style is ignored.
 * @param style a #GtkStyle, or %NULL to remove the effect     of a previous call to gtk_widget_set_style() and go back to     the default style
 */
set_style(style?: (Gtk.Style | null)): void
/**
 * Enables or disables multiple pointer awareness. If this setting is %TRUE,
 * `widget` will start receiving multiple, per device enter/leave events. Note
 * that if custom #GdkWindows are created in #GtkWidget::realize,
 * gdk_window_set_support_multidevice() will have to be called manually on them.
 * @param support_multidevice %TRUE to support input from multiple devices.
 */
set_support_multidevice(support_multidevice: boolean): void
/**
 * Sets `markup` as the contents of the tooltip, which is marked up with
 *  the [Pango text markup language][PangoMarkupFormat].
 * 
 * This function will take care of setting #GtkWidget:has-tooltip to %TRUE
 * and of the default handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-markup property and
 * gtk_tooltip_set_markup().
 * @param markup the contents of the tooltip for @widget, or %NULL
 */
set_tooltip_markup(markup?: (string | null)): void
/**
 * Sets `text` as the contents of the tooltip. This function will take
 * care of setting #GtkWidget:has-tooltip to %TRUE and of the default
 * handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
 * @param text the contents of the tooltip for @widget
 */
set_tooltip_text(text?: (string | null)): void
/**
 * Replaces the default window used for displaying
 * tooltips with `custom_window`. GTK+ will take care of showing and
 * hiding `custom_window` at the right moment, to behave likewise as
 * the default tooltip window. If `custom_window` is %NULL, the default
 * tooltip window will be used.
 * @param custom_window a #GtkWindow, or %NULL
 */
set_tooltip_window(custom_window?: (Gtk.Window | null)): void
/**
 * Sets the vertical alignment of `widget`.
 * See the #GtkWidget:valign property.
 * @param align the vertical alignment
 */
set_valign(align: Gtk.Align): void
/**
 * Sets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_set_hexpand() for more detail.
 * @param expand whether to expand
 */
set_vexpand(expand: boolean): void
/**
 * Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
 * be used.
 * 
 * See gtk_widget_set_hexpand_set() for more detail.
 * @param set value for vexpand-set property
 */
set_vexpand_set(set: boolean): void
/**
 * Sets the visibility state of `widget`. Note that setting this to
 * %TRUE doesn’t mean the widget is actually viewable, see
 * gtk_widget_get_visible().
 * 
 * This function simply calls gtk_widget_show() or gtk_widget_hide()
 * but is nicer to use when the visibility of the widget depends on
 * some condition.
 * @param visible whether the widget should be shown or not
 */
set_visible(visible: boolean): void
/**
 * Sets the visual that should be used for by widget and its children for
 * creating #GdkWindows. The visual must be on the same #GdkScreen as
 * returned by gtk_widget_get_screen(), so handling the
 * #GtkWidget::screen-changed signal is necessary.
 * 
 * Setting a new `visual` will not cause `widget` to recreate its windows,
 * so you should call this function before `widget` is realized.
 * @param visual visual to be used or %NULL to unset a previous one
 */
set_visual(visual?: (Gdk.Visual | null)): void
/**
 * Sets a widget’s window. This function should only be used in a
 * widget’s #GtkWidget::realize implementation. The %window passed is
 * usually either new window created with gdk_window_new(), or the
 * window of its parent widget as returned by
 * gtk_widget_get_parent_window().
 * 
 * Widgets must indicate whether they will create their own #GdkWindow
 * by calling gtk_widget_set_has_window(). This is usually done in the
 * widget’s init() function.
 * 
 * Note that this function does not add any reference to `window`.
 * @param window a #GdkWindow
 */
set_window(window: Gdk.Window): void
/**
 * Sets a shape for this widget’s GDK window. This allows for
 * transparent windows etc., see gdk_window_shape_combine_region()
 * for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
show_all(): void
/**
 * Shows a widget. If the widget is an unmapped toplevel widget
 * (i.e. a #GtkWindow that has not yet been shown), enter the main
 * loop and wait for the window to actually be mapped. Be careful;
 * because the main loop is running, anything can happen during
 * this function.
 */
show_now(): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
size_allocate(allocation: Gtk.Allocation): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size,
 * position and (optionally) baseline to their child widgets.
 * 
 * In this function, the allocation and baseline may be adjusted. It
 * will be forced to a 1x1 minimum size, and the
 * adjust_size_allocation virtual and adjust_baseline_allocation
 * methods on the child will be used to adjust the allocation and
 * baseline. Standard adjustments include removing the widget's
 * margins, and applying the widget’s #GtkWidget:halign and
 * #GtkWidget:valign properties.
 * 
 * If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
 * baseline argument is ignored and -1 is used instead.
 * @param allocation position and size to be allocated to @widget
 * @param baseline The baseline of the child, or -1
 */
size_allocate_with_baseline(allocation: Gtk.Allocation, baseline: number): void
/**
 * This function is typically used when implementing a #GtkContainer
 * subclass.  Obtains the preferred size of a widget. The container
 * uses this information to arrange its child widgets and decide what
 * size allocations to give them with gtk_widget_size_allocate().
 * 
 * You can also call this function from an application, with some
 * caveats. Most notably, getting a size request requires the widget
 * to be associated with a screen, because font information may be
 * needed. Multihead-aware applications should keep this in mind.
 * 
 * Also remember that the size request is not necessarily the size
 * a widget will actually be allocated.
 */
size_request(): Gtk.Requisition
/**
 * This function attaches the widget’s #GtkStyle to the widget's
 * #GdkWindow. It is a replacement for
 * 
 * 
 * ```
 * widget->style = gtk_style_attach (widget->style, widget->window);
 * ```
 * 
 * 
 * and should only ever be called in a derived widget’s “realize”
 * implementation which does not chain up to its parent class'
 * “realize” implementation, because one of the parent classes
 * (finally #GtkWidget) would attach the style itself.
 */
style_attach(): void
/**
 * Gets the value of a style property of `widget`.
 * @param property_name the name of a style property
 * @param value location to return the property value
 */
style_get_property(property_name: string, value: GObject.Value): void
/**
 * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
 * This causes all queued #GtkWidget::child-notify signals on `widget` to be
 * emitted.
 */
thaw_child_notify(): void
/**
 * Translate coordinates relative to `src_widget’`s allocation to coordinates
 * relative to `dest_widget’`s allocations. In order to perform this
 * operation, both widgets must be realized, and must share a common
 * toplevel.
 * @param dest_widget a #GtkWidget
 * @param src_x X position relative to @src_widget
 * @param src_y Y position relative to @src_widget
 * @returns %FALSE if either widget was not realized, or there   was no common ancestor. In this case, nothing is stored in   *@dest_x and *@dest_y. Otherwise %TRUE.
 */
translate_coordinates(dest_widget: Gtk.Widget, src_x: number, src_y: number): [boolean, number, number]
/**
 * Triggers a tooltip query on the display where the toplevel of `widget`
 * is located. See gtk_tooltip_trigger_tooltip_query() for more
 * information.
 */
trigger_tooltip_query(): void
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
unmap(): void
/**
 * This function is only for use in widget implementations.
 * Should be called by implementations of the remove method
 * on #GtkContainer, to dissociate a child from the container.
 */
unparent(): void
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
unrealize(): void
/**
 * Unregisters a #GdkWindow from the widget that was previously set up with
 * gtk_widget_register_window(). You need to call this when the window is
 * no longer used by the widget, such as when you destroy it.
 * @param window a #GdkWindow
 */
unregister_window(window: Gdk.Window): void
/**
 * This function is for use in widget implementations. Turns off flag
 * values for the current widget state (insensitive, prelighted, etc.).
 * See gtk_widget_set_state_flags().
 * @param flags State flags to turn off
 */
unset_state_flags(flags: Gtk.StateFlags): void
vfunc_adjust_baseline_allocation(baseline: number): void
vfunc_adjust_baseline_request(minimum_baseline: number, natural_baseline: number): void
vfunc_adjust_size_allocation(orientation: Gtk.Orientation, minimum_size: number, natural_size: number, allocated_pos: number, allocated_size: number): void
vfunc_adjust_size_request(orientation: Gtk.Orientation, minimum_size: number, natural_size: number): void
vfunc_button_press_event(event: Gdk.EventButton): boolean
vfunc_button_release_event(event: Gdk.EventButton): boolean
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 */
vfunc_can_activate_accel(signal_id: number): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
vfunc_child_notify(child_property: GObject.ParamSpec): void
vfunc_composited_changed(): void
vfunc_compute_expand(hexpand_p: boolean, vexpand_p: boolean): void
vfunc_configure_event(event: Gdk.EventConfigure): boolean
vfunc_damage_event(event: Gdk.EventExpose): boolean
vfunc_delete_event(event: Gdk.EventAny): boolean
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
vfunc_destroy(): void
vfunc_destroy_event(event: Gdk.EventAny): boolean
vfunc_direction_changed(previous_direction: Gtk.TextDirection): void
vfunc_dispatch_child_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_drag_begin(context: Gdk.DragContext): void
vfunc_drag_data_delete(context: Gdk.DragContext): void
vfunc_drag_data_get(context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_data_received(context: Gdk.DragContext, x: number, y: number, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_drop(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_drag_end(context: Gdk.DragContext): void
vfunc_drag_failed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
vfunc_drag_leave(context: Gdk.DragContext, time_: number): void
vfunc_drag_motion(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_draw(cr: cairo.Context): boolean
vfunc_enter_notify_event(event: Gdk.EventCrossing): boolean
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 */
vfunc_event(event: Gdk.Event): boolean
vfunc_focus(direction: Gtk.DirectionType): boolean
vfunc_focus_in_event(event: Gdk.EventFocus): boolean
vfunc_focus_out_event(event: Gdk.EventFocus): boolean
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 */
vfunc_get_accessible(): Atk.Object
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
vfunc_get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
vfunc_get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
vfunc_get_preferred_width_for_height(height: number): [number, number]
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 */
vfunc_get_request_mode(): Gtk.SizeRequestMode
vfunc_grab_broken_event(event: Gdk.EventGrabBroken): boolean
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
vfunc_grab_focus(): void
vfunc_grab_notify(was_grabbed: boolean): void
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
vfunc_hide(): void
vfunc_hierarchy_changed(previous_toplevel: Gtk.Widget): void
vfunc_key_press_event(event: Gdk.EventKey): boolean
vfunc_key_release_event(event: Gdk.EventKey): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 */
vfunc_keynav_failed(direction: Gtk.DirectionType): boolean
vfunc_leave_notify_event(event: Gdk.EventCrossing): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
vfunc_map(): void
vfunc_map_event(event: Gdk.EventAny): boolean
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 */
vfunc_mnemonic_activate(group_cycling: boolean): boolean
vfunc_motion_notify_event(event: Gdk.EventMotion): boolean
vfunc_move_focus(direction: Gtk.DirectionType): void
vfunc_parent_set(previous_parent: Gtk.Widget): void
vfunc_popup_menu(): boolean
vfunc_property_notify_event(event: Gdk.EventProperty): boolean
vfunc_proximity_in_event(event: Gdk.EventProximity): boolean
vfunc_proximity_out_event(event: Gdk.EventProximity): boolean
vfunc_query_tooltip(x: number, y: number, keyboard_tooltip: boolean, tooltip: Gtk.Tooltip): boolean
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
vfunc_queue_draw_region(region: cairo.Region): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
vfunc_realize(): void
vfunc_screen_changed(previous_screen: Gdk.Screen): void
vfunc_scroll_event(event: Gdk.EventScroll): boolean
vfunc_selection_clear_event(event: Gdk.EventSelection): boolean
vfunc_selection_get(selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_selection_notify_event(event: Gdk.EventSelection): boolean
vfunc_selection_received(selection_data: Gtk.SelectionData, time_: number): void
vfunc_selection_request_event(event: Gdk.EventSelection): boolean
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
vfunc_show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
vfunc_show_all(): void
vfunc_show_help(help_type: Gtk.WidgetHelpType): boolean
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
vfunc_size_allocate(allocation: Gtk.Allocation): void
vfunc_state_changed(previous_state: Gtk.StateType): void
vfunc_state_flags_changed(previous_state_flags: Gtk.StateFlags): void
vfunc_style_set(previous_style: Gtk.Style): void
vfunc_style_updated(): void
vfunc_touch_event(event: Gdk.EventTouch): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
vfunc_unmap(): void
vfunc_unmap_event(event: Gdk.EventAny): boolean
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
vfunc_unrealize(): void
vfunc_visibility_notify_event(event: Gdk.EventVisibility): boolean
vfunc_window_state_event(event: Gdk.EventWindowState): boolean
}

module DockRevealer {

    // Constructor properties interface

    interface ConstructorProps extends Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
child_revealed: boolean;
    childRevealed: boolean;
    position: number;
    position_set: boolean;
    positionSet: boolean;
    reveal_child: boolean;
    revealChild: boolean;
    transition_duration: number;
    transitionDuration: number;
    transition_type: DockRevealerTransitionType;
    transitionType: DockRevealerTransitionType;
    }

}

/**
 * This widget is a bit like #GtkRevealer with a couple of important
 * differences. First, it only supports a couple transition types
 * (the direction to slide reveal). Additionally, the size of the
 * child allocation will not change during the animation. This is not
 * as generally useful as an upstream GTK+ widget, but is extremely
 * important for the panel case to avoid things looking strange while
 * animating into and out of view.
 */
class DockRevealer extends Bin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.DockRevealer

    get child_revealed(): boolean;
    get childRevealed(): boolean;
    get position(): number;
    set position(val: number);
    get position_set(): boolean;
    set position_set(val: boolean);
    get positionSet(): boolean;
    set positionSet(val: boolean);
    get reveal_child(): boolean;
    set reveal_child(val: boolean);
    get revealChild(): boolean;
    set revealChild(val: boolean);
    get transition_duration(): number;
    set transition_duration(val: number);
    get transitionDuration(): number;
    set transitionDuration(val: number);
    get transition_type(): DockRevealerTransitionType;
    set transition_type(val: DockRevealerTransitionType);
    get transitionType(): DockRevealerTransitionType;
    set transitionType(val: DockRevealerTransitionType);

    // Constructors of Dazzle.DockRevealer


constructor(properties?: Partial<DockRevealer.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): DockRevealer;

    // Own methods of Dazzle.DockRevealer

    animate_to_position(position: number, transition_duration: number): void
    get_child_revealed(): boolean
    get_position(): number
    get_position_set(): boolean
    get_reveal_child(): boolean
    get_transition_duration(): number
    get_transition_type(): DockRevealerTransitionType
    /**
     * This is a helper to check if the revealer is animating. You probably don't
     * want to poll this function. Connect to notify::child-revealed or
     * notify::reveal-child instead.
     * @returns %TRUE if an animation is in progress.
     */
    is_animating(): boolean
    set_position(position: number): void
    set_position_set(position_set: boolean): void
    set_reveal_child(reveal_child: boolean): void
    set_transition_duration(transition_duration: number): void
    set_transition_type(transition_type: DockRevealerTransitionType): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module DockStack {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Box.ConstructorProps, Atk.ImplementorIface.ConstructorProps, DockItem.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.Orientable.ConstructorProps {
edge: Gtk.PositionType;
    show_pinned_button: boolean;
    showPinnedButton: boolean;
    style: TabStyle | any;
    }

}

class DockStack extends Gtk.Box implements Atk.ImplementorIface, DockItem, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Dazzle.DockStack

    get edge(): Gtk.PositionType;
    set edge(val: Gtk.PositionType);
    get show_pinned_button(): boolean;
    set show_pinned_button(val: boolean);
    get showPinnedButton(): boolean;
    set showPinnedButton(val: boolean);
// This accessor conflicts with another accessor's type in a parent class or interface.
    get style(): TabStyle | any;
// This accessor conflicts with another accessor's type in a parent class or interface.
    set style(val: TabStyle | any);

    // Constructors of Dazzle.DockStack


constructor(properties?: Partial<DockStack.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): DockStack;

    // Own methods of Dazzle.DockStack

    get_edge(): Gtk.PositionType
    get_show_pinned_button(): boolean
    get_style(): TabStyle
    get_style(...args: never[]): any
    set_edge(edge: Gtk.PositionType): void
    set_show_pinned_button(show_pinned_button: boolean): void
    set_style(style: TabStyle): void
    set_style(...args: never[]): any

// Inherited properties
/**
 * The orientation of the orientable.
 */
get orientation(): Gtk.Orientation;
set orientation(val: Gtk.Orientation);
get app_paintable(): boolean;
set app_paintable(val: boolean);
get appPaintable(): boolean;
set appPaintable(val: boolean);
get can_default(): boolean;
set can_default(val: boolean);
get canDefault(): boolean;
set canDefault(val: boolean);
get can_focus(): boolean;
set can_focus(val: boolean);
get canFocus(): boolean;
set canFocus(val: boolean);
get composite_child(): boolean;
get compositeChild(): boolean;
/**
 * Whether the widget is double buffered.
 */
get double_buffered(): boolean;
set double_buffered(val: boolean);
/**
 * Whether the widget is double buffered.
 */
get doubleBuffered(): boolean;
set doubleBuffered(val: boolean);
get events(): Gdk.EventMask;
set events(val: Gdk.EventMask);
/**
 * Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
 */
get expand(): boolean;
set expand(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focus_on_click(): boolean;
set focus_on_click(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focusOnClick(): boolean;
set focusOnClick(val: boolean);
/**
 * How to distribute horizontal space if widget gets extra space, see #GtkAlign
 */
get halign(): Gtk.Align;
set halign(val: Gtk.Align);
get has_default(): boolean;
set has_default(val: boolean);
get hasDefault(): boolean;
set hasDefault(val: boolean);
get has_focus(): boolean;
set has_focus(val: boolean);
get hasFocus(): boolean;
set hasFocus(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get has_tooltip(): boolean;
set has_tooltip(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get hasTooltip(): boolean;
set hasTooltip(val: boolean);
get height_request(): number;
set height_request(val: number);
get heightRequest(): number;
set heightRequest(val: number);
/**
 * Whether to expand horizontally. See gtk_widget_set_hexpand().
 */
get hexpand(): boolean;
set hexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpand_set(): boolean;
set hexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpandSet(): boolean;
set hexpandSet(val: boolean);
get is_focus(): boolean;
set is_focus(val: boolean);
get isFocus(): boolean;
set isFocus(val: boolean);
/**
 * Sets all four sides' margin at once. If read, returns max
 * margin on any side.
 */
get margin(): number;
set margin(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_bottom(): number;
set margin_bottom(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginBottom(): number;
set marginBottom(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_end(): number;
set margin_end(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginEnd(): number;
set marginEnd(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_left(): number;
set margin_left(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginLeft(): number;
set marginLeft(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_right(): number;
set margin_right(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginRight(): number;
set marginRight(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_start(): number;
set margin_start(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginStart(): number;
set marginStart(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_top(): number;
set margin_top(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginTop(): number;
set marginTop(val: number);
get name(): string;
set name(val: string);
get no_show_all(): boolean;
set no_show_all(val: boolean);
get noShowAll(): boolean;
set noShowAll(val: boolean);
/**
 * The requested opacity of the widget. See gtk_widget_set_opacity() for
 * more details about window opacity.
 * 
 * Before 3.8 this was only available in GtkWindow
 */
get opacity(): number;
set opacity(val: number);
get parent(): Gtk.Container;
set parent(val: Gtk.Container);
get receives_default(): boolean;
set receives_default(val: boolean);
get receivesDefault(): boolean;
set receivesDefault(val: boolean);
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scale_factor(): number;
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scaleFactor(): number;
get sensitive(): boolean;
set sensitive(val: boolean);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_markup(): string;
set tooltip_markup(val: string);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipMarkup(): string;
set tooltipMarkup(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_text(): string;
set tooltip_text(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipText(): string;
set tooltipText(val: string);
/**
 * How to distribute vertical space if widget gets extra space, see #GtkAlign
 */
get valign(): Gtk.Align;
set valign(val: Gtk.Align);
/**
 * Whether to expand vertically. See gtk_widget_set_vexpand().
 */
get vexpand(): boolean;
set vexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpand_set(): boolean;
set vexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpandSet(): boolean;
set vexpandSet(val: boolean);
get visible(): boolean;
set visible(val: boolean);
get width_request(): number;
set width_request(val: number);
get widthRequest(): number;
set widthRequest(val: number);
/**
 * The widget's window if it is realized, %NULL otherwise.
 */
get window(): Gdk.Window;

// Inherited methods
adopt(child: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 * @returns %TRUE if the dock item was closed
 */
close(): boolean
/**
 * Emits the #DzlDockItem::presented signal.
 * 
 * Containers should emit this when their descendant has been presented as the
 * current visible child. This allows dock items to do lazy initialization of
 * content once the widgetry is visible to the user.
 * 
 * Currently, this is best effort, as there are a number of situations that
 * make covering all cases problematic.
 */
emit_presented(): void
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 * @returns %TRUE if the dock item can be closed by the user, otherwise %FALSE.
 */
get_can_close(): boolean
get_can_minimize(): boolean
get_child_visible(child: DockItem): boolean
get_child_visible(...args: never[]): any
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 * @returns A #DzlDockmanager.
 */
get_manager(): (DockManager | null)
/**
 * Gets the parent #DzlDockItem, or %NULL.
 * @returns A #DzlDockItem or %NULL.
 */
get_parent(): (DockItem | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_title(): (string | null)
has_widgets(): boolean
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 * @returns %TRUE if @child was minimized. Otherwise %FALSE and @position   may be updated to a suggested position.
 */
minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
needs_attention(): void
/**
 * This widget will walk the widget hierarchy to ensure that the
 * dock item is visible to the user.
 */
present(): void
present_child(child: DockItem): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 * @returns a #GIcon or %NULL
 */
ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
release(child: DockItem): void
set_child_visible(child: DockItem, child_visible: boolean): void
set_child_visible(...args: never[]): any
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
set_manager(manager?: (DockManager | null)): void
update_visibility(): void
vfunc_can_minimize(descendant: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 */
vfunc_close(): boolean
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 */
vfunc_get_can_close(): boolean
vfunc_get_child_visible(child: DockItem): boolean
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 */
vfunc_get_manager(): (DockManager | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_title(): (string | null)
vfunc_manager_set(old_manager: DockManager): void
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 */
vfunc_minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
vfunc_needs_attention(): void
vfunc_present_child(child: DockItem): void
vfunc_presented(): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 */
vfunc_ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
vfunc_release(child: DockItem): void
vfunc_set_child_visible(child: DockItem, child_visible: boolean): void
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
vfunc_set_manager(manager?: (DockManager | null)): void
vfunc_update_visibility(): void
/**
 * Retrieves the orientation of the `orientable`.
 * @returns the orientation of the @orientable.
 */
get_orientation(): Gtk.Orientation
/**
 * Sets the orientation of the `orientable`.
 * @param orientation the orientable’s new orientation.
 */
set_orientation(orientation: Gtk.Orientation): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
/**
 * For widgets that can be “activated” (buttons, menu items, etc.)
 * this function activates them. Activation is what happens when you
 * press Enter on a widget during key navigation. If `widget` isn't
 * activatable, the function returns %FALSE.
 * @returns %TRUE if the widget was activatable
 */
activate(): boolean
/**
 * Installs an accelerator for this `widget` in `accel_group` that causes
 * `accel_signal` to be emitted if the accelerator is activated.
 * The `accel_group` needs to be added to the widget’s toplevel via
 * gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
 * Accelerators added through this function are not user changeable during
 * runtime. If you want to support accelerators that can be changed by the
 * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
 * gtk_menu_item_set_accel_path() instead.
 * @param accel_signal widget signal to emit on accelerator activation
 * @param accel_group accel group for this widget, added to its toplevel
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @param accel_flags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
 */
add_accelerator(accel_signal: string, accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): void
/**
 * Adds the device events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_device_events() for details.
 * @param device a #GdkDevice
 * @param events an event mask, see #GdkEventMask
 */
add_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Adds the events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_events() and the
 * [input handling overview][event-masks] for details.
 * @param events an event mask, see #GdkEventMask
 */
add_events(events: number): void
/**
 * Adds a widget to the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
 * list of mnemonic labels for the widget is cleared when the
 * widget is destroyed, so the caller must make sure to update
 * its internal state at this point as well, by using a connection
 * to the #GtkWidget::destroy signal or a weak notifier.
 * @param label a #GtkWidget that acts as a mnemonic label for @widget
 */
add_mnemonic_label(label: Gtk.Widget): void
/**
 * Queues an animation frame update and adds a callback to be called
 * before each frame. Until the tick callback is removed, it will be
 * called frequently (usually at the frame rate of the output device
 * or as quickly as the application can be repainted, whichever is
 * slower). For this reason, is most suitable for handling graphics
 * that change every frame or every few frames. The tick callback does
 * not automatically imply a relayout or repaint. If you want a
 * repaint or relayout, and aren’t changing widget properties that
 * would trigger that (for example, changing the text of a #GtkLabel),
 * then you will have to call gtk_widget_queue_resize() or
 * gtk_widget_queue_draw_area() yourself.
 * 
 * gdk_frame_clock_get_frame_time() should generally be used for timing
 * continuous animations and
 * gdk_frame_timings_get_predicted_presentation_time() if you are
 * trying to display isolated frames at particular times.
 * 
 * This is a more convenient alternative to connecting directly to the
 * #GdkFrameClock::update signal of #GdkFrameClock, since you don't
 * have to worry about when a #GdkFrameClock is assigned to a widget.
 * @param callback function to call for updating animations
 * @returns an id for the connection of this callback. Remove the callback     by passing it to gtk_widget_remove_tick_callback()
 */
add_tick_callback(callback: Gtk.TickCallback): number
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 * @returns %TRUE if the accelerator can be activated.
 */
can_activate_accel(signal_id: number): boolean
/**
 * This function is used by custom widget implementations; if you're
 * writing an app, you’d use gtk_widget_grab_focus() to move the focus
 * to a particular widget, and gtk_container_set_focus_chain() to
 * change the focus tab order. So you may want to investigate those
 * functions instead.
 * 
 * gtk_widget_child_focus() is called by containers as the user moves
 * around the window using keyboard shortcuts. `direction` indicates
 * what kind of motion is taking place (up, down, left, right, tab
 * forward, tab backward). gtk_widget_child_focus() emits the
 * #GtkWidget::focus signal; widgets override the default handler
 * for this signal in order to implement appropriate focus behavior.
 * 
 * The default ::focus handler for a widget should return %TRUE if
 * moving in `direction` left the focus on a focusable location inside
 * that widget, and %FALSE if moving in `direction` moved the focus
 * outside the widget. If returning %TRUE, widgets normally
 * call gtk_widget_grab_focus() to place the focus accordingly;
 * if returning %FALSE, they don’t modify the current focus location.
 * @param direction direction of focus movement
 * @returns %TRUE if focus ended up inside @widget
 */
child_focus(direction: Gtk.DirectionType): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
child_notify(child_property: string): void
child_notify(...args: never[]): any
/**
 * Same as gtk_widget_path(), but always uses the name of a widget’s type,
 * never uses a custom name set with gtk_widget_set_name().
 */
class_path(): [number, string, string]
/**
 * Computes whether a container should give this widget extra space
 * when possible. Containers should check this, rather than
 * looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
 * 
 * This function already checks whether the widget is visible, so
 * visibility does not need to be checked separately. Non-visible
 * widgets are not expanded.
 * 
 * The computed expand value uses either the expand setting explicitly
 * set on the widget itself, or, if none has been explicitly set,
 * the widget may expand if some of its children do.
 * @param orientation expand direction
 * @returns whether widget tree rooted here should be expanded
 */
compute_expand(orientation: Gtk.Orientation): boolean
/**
 * Creates a new #PangoContext with the appropriate font map,
 * font options, font description, and base direction for drawing
 * text for this widget. See also gtk_widget_get_pango_context().
 * @returns the new #PangoContext
 */
create_pango_context(): Pango.Context
/**
 * Creates a new #PangoLayout with the appropriate font map,
 * font description, and base direction for drawing text for
 * this widget.
 * 
 * If you keep a #PangoLayout created in this way around, you need
 * to re-create it when the widget #PangoContext is replaced.
 * This can be tracked by using the #GtkWidget::screen-changed signal
 * on the widget.
 * @param text text to set on the layout (can be %NULL)
 * @returns the new #PangoLayout
 */
create_pango_layout(text?: (string | null)): Pango.Layout
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
destroy(): void
/**
 * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
 * %NULL.  It’s intended to be used as a callback connected to the
 * “destroy” signal of a widget. You connect gtk_widget_destroyed()
 * as a signal handler, and pass the address of your widget variable
 * as user data. Then when the widget is destroyed, the variable will
 * be set to %NULL. Useful for example to avoid multiple copies
 * of the same dialog.
 * @param widget_pointer address of a variable that contains @widget
 */
destroyed(widget_pointer: Gtk.Widget): Gtk.Widget
/**
 * Returns %TRUE if `device` has been shadowed by a GTK+
 * device grab on another widget, so it would stop sending
 * events to `widget`. This may be used in the
 * #GtkWidget::grab-notify signal to check for specific
 * devices. See gtk_device_grab_add().
 * @param device a #GdkDevice
 * @returns %TRUE if there is an ongoing grab on @device          by another #GtkWidget than @widget.
 */
device_is_shadowed(device: Gdk.Device): boolean
/**
 * This function is equivalent to gtk_drag_begin_with_coordinates(),
 * passing -1, -1 as coordinates.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @returns the context for this drag
 */
drag_begin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: (Gdk.Event | null)): Gdk.DragContext
/**
 * Initiates a drag on the source side. The function only needs to be used
 * when the application is starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is %NULL, then %GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used to get information about the drag.
 * 
 * Generally there are three cases when you want to start a drag by hand by
 * calling this function:
 * 
 * 1. During a #GtkWidget::button-press-event handler, if you want to start a drag
 * immediately when the user presses the mouse button.  Pass the `event`
 * that you have in your #GtkWidget::button-press-event handler.
 * 
 * 2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
 * when the mouse moves past a certain threshold distance after a button-press.
 * Pass the `event` that you have in your #GtkWidget::motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).
 * If you really cannot pass a real event, pass %NULL instead.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @param x The initial x coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @param y The initial y coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @returns the context for this drag
 */
drag_begin_with_coordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: (Gdk.Event | null), x: number, y: number): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param start_x X coordinate of start of drag
 * @param start_y Y coordinate of start of drag
 * @param current_x current X coordinate
 * @param current_y current Y coordinate
 * @returns %TRUE if the drag threshold has been passed.
 */
drag_check_threshold(start_x: number, start_y: number, current_x: number, current_y: number): boolean
/**
 * Add the image targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_uri_targets(): void
/**
 * Looks for a match between the supported targets of `context` and the
 * `dest_target_list,` returning the first matching target, otherwise
 * returning %GDK_NONE. `dest_target_list` should usually be the return
 * value from gtk_drag_dest_get_target_list(), but some widgets may
 * have different valid targets for different parts of the widget; in
 * that case, they will have to implement a drag_motion handler that
 * passes the correct target list to this function.
 * @param context drag context
 * @param target_list list of droppable targets, or %NULL to use    gtk_drag_dest_get_target_list (@widget).
 * @returns first target that the source offers     and the dest can accept, or %GDK_NONE
 */
drag_dest_find_target(context: Gdk.DragContext, target_list?: (Gtk.TargetList | null)): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_dest_get_target_list(): (Gtk.TargetList | null)
/**
 * Returns whether the widget has been configured to always
 * emit #GtkWidget::drag-motion signals.
 * @returns %TRUE if the widget always emits   #GtkWidget::drag-motion events
 */
drag_dest_get_track_motion(): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget’s drag-and-drop signals
 * (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget’s #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget::drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget::drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There’s no way to set a default action here, you can use the
 * #GtkWidget::drag-motion callback for that. Here’s an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * 
 * ```c
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of     #GtkTargetEntrys indicating the drop types that this @widget will     accept, or %NULL. Later you can access the list with     gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this @widget.
 */
drag_dest_set(flags: Gtk.DestDefaults, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets this widget as a proxy for drops to another window.
 * @param proxy_window the window to which to forward drag events
 * @param protocol the drag protocol which the @proxy_window accepts   (You can use gdk_drag_get_protocol() to determine this)
 * @param use_coordinates If %TRUE, send the same coordinates to the   destination, because it is an embedded   subwindow.
 */
drag_dest_set_proxy(proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param target_list list of droppable targets, or %NULL for none
 */
drag_dest_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Tells the widget to emit #GtkWidget::drag-motion and
 * #GtkWidget::drag-leave events regardless of the targets and the
 * %GTK_DEST_DEFAULT_MOTION flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param track_motion whether to accept all targets
 */
drag_dest_set_track_motion(track_motion: boolean): void
/**
 * Clears information about a drop destination set with
 * gtk_drag_dest_set(). The widget will no longer receive
 * notification of drags.
 */
drag_dest_unset(): void
/**
 * Gets the data associated with a drag. When the data
 * is received or the retrieval fails, GTK+ will emit a
 * #GtkWidget::drag-data-received signal. Failure of the retrieval
 * is indicated by the length field of the `selection_data`
 * signal parameter being negative. However, when gtk_drag_get_data()
 * is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
 * then the widget will not receive notification of failed
 * drops.
 * @param context the drag context
 * @param target the target (form of the data) to retrieve
 * @param time_ a timestamp for retrieving the data. This will   generally be the time received in a #GtkWidget::drag-motion   or #GtkWidget::drag-drop signal
 */
drag_get_data(context: Gdk.DragContext, target: Gdk.Atom, time_: number): void
/**
 * Highlights a widget as a currently hovered drop target.
 * To end the highlight, call gtk_drag_unhighlight().
 * GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
 */
drag_highlight(): void
/**
 * Add the writable image targets supported by #GtkSelectionData to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_uri_targets(): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_source_get_target_list(): (Gtk.TargetList | null)
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param start_button_mask the bitmask of buttons that can start the drag
 * @param targets the table of targets     that the drag will support, may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
drag_source_set(start_button_mask: Gdk.ModifierType, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to `icon`. See the docs for #GtkIconTheme for more details.
 * @param icon A #GIcon
 */
drag_source_set_icon_gicon(icon: Gio.Icon): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param icon_name name of icon to use
 */
drag_source_set_icon_name(icon_name: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
drag_source_set_icon_pixbuf(pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param stock_id the ID of the stock icon to use
 */
drag_source_set_icon_stock(stock_id: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param target_list list of draggable targets, or %NULL for none
 */
drag_source_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Undoes the effects of gtk_drag_source_set().
 */
drag_source_unset(): void
/**
 * Removes a highlight set by gtk_drag_highlight() from
 * a widget.
 */
drag_unhighlight(): void
/**
 * Draws `widget` to `cr`. The top left corner of the widget will be
 * drawn to the currently set origin point of `cr`.
 * 
 * You should pass a cairo context as `cr` argument that is in an
 * original state. Otherwise the resulting drawing is undefined. For
 * example changing the operator using cairo_set_operator() or the
 * line width using cairo_set_line_width() might have unwanted side
 * effects.
 * You may however change the context’s transform matrix - like with
 * cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
 * region with cairo_clip() prior to calling this function. Also, it
 * is fine to modify the context with cairo_save() and
 * cairo_push_group() prior to calling this function.
 * 
 * Note that special-purpose widgets may contain special code for
 * rendering to the screen and might appear differently on screen
 * and when rendered using gtk_widget_draw().
 * @param cr a cairo context to draw to
 */
draw(cr: cairo.Context): void
/**
 * Ensures that `widget` has a style (`widget->`style).
 * 
 * Not a very useful function; most of the time, if you
 * want the style, the widget is realized, and realized
 * widgets are guaranteed to have a style already.
 */
ensure_style(): void
/**
 * Notifies the user about an input-related error on this widget.
 * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
 * gdk_window_beep(), otherwise it does nothing.
 * 
 * Note that the effect of gdk_window_beep() can be configured in many
 * ways, depending on the windowing backend and the desktop environment
 * or window manager that is used.
 */
error_bell(): void
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 * @returns return from the event signal emission (%TRUE if               the event was handled)
 */
event(event: Gdk.Event): boolean
/**
 * Stops emission of #GtkWidget::child-notify signals on `widget`. The
 * signals are queued until gtk_widget_thaw_child_notify() is called
 * on `widget`.
 * 
 * This is the analogue of g_object_freeze_notify() for child properties.
 */
freeze_child_notify(): void
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 * @returns the #AtkObject associated with @widget
 */
get_accessible(): Atk.Object
/**
 * Retrieves the #GActionGroup that was registered using `prefix`. The resulting
 * #GActionGroup may have been registered to `widget` or any #GtkWidget in its
 * ancestry.
 * 
 * If no action group was found matching `prefix,` then %NULL is returned.
 * @param prefix The “prefix” of the action group.
 * @returns A #GActionGroup or %NULL.
 */
get_action_group(prefix: string): (Gio.ActionGroup | null)
/**
 * Returns the baseline that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function, and when allocating child
 * widgets in #GtkWidget::size_allocate.
 * @returns the baseline of the @widget, or -1 if none
 */
get_allocated_baseline(): number
/**
 * Returns the height that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the height of the @widget
 */
get_allocated_height(): number
/**
 * Retrieves the widget’s allocated size.
 * 
 * This function returns the last values passed to
 * gtk_widget_size_allocate_with_baseline(). The value differs from
 * the size returned in gtk_widget_get_allocation() in that functions
 * like gtk_widget_set_halign() can adjust the allocation, but not
 * the value returned by this function.
 * 
 * If a widget is not visible, its allocated size is 0.
 */
get_allocated_size(): [Gtk.Allocation, number]
/**
 * Returns the width that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the width of the @widget
 */
get_allocated_width(): number
/**
 * Retrieves the widget’s allocation.
 * 
 * Note, when implementing a #GtkContainer: a widget’s allocation will
 * be its “adjusted” allocation, that is, the widget’s parent
 * container typically calls gtk_widget_size_allocate() with an
 * allocation, and that allocation is then adjusted (to handle margin
 * and alignment for example) before assignment to the widget.
 * gtk_widget_get_allocation() returns the adjusted allocation that
 * was actually assigned to the widget. The adjusted allocation is
 * guaranteed to be completely contained within the
 * gtk_widget_size_allocate() allocation, however. So a #GtkContainer
 * is guaranteed that its children stay inside the assigned bounds,
 * but not that they have exactly the bounds the container assigned.
 * There is no way to get the original allocation assigned by
 * gtk_widget_size_allocate(), since it isn’t stored; if a container
 * implementation needs that information it will have to track it itself.
 */
get_allocation(): Gtk.Allocation
/**
 * Gets the first ancestor of `widget` with type `widget_type`. For example,
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
 * the first #GtkBox that’s an ancestor of `widget`. No reference will be
 * added to the returned widget; it should not be unreferenced. See note
 * about checking for a toplevel #GtkWindow in the docs for
 * gtk_widget_get_toplevel().
 * 
 * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
 * considers `widget` to be an ancestor of itself.
 * @param widget_type ancestor type
 * @returns the ancestor widget, or %NULL if not found
 */
get_ancestor(widget_type: GObject.GType): (Gtk.Widget | null)
/**
 * Determines whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * See gtk_widget_set_app_paintable()
 * @returns %TRUE if the widget is app paintable
 */
get_app_paintable(): boolean
/**
 * Determines whether `widget` can be a default widget. See
 * gtk_widget_set_can_default().
 * @returns %TRUE if @widget can be a default widget, %FALSE otherwise
 */
get_can_default(): boolean
/**
 * Determines whether `widget` can own the input focus. See
 * gtk_widget_set_can_focus().
 * @returns %TRUE if @widget can own the input focus, %FALSE otherwise
 */
get_can_focus(): boolean
/**
 * This function is only for use in widget implementations. Obtains
 * `widget->`requisition, unless someone has forced a particular
 * geometry on the widget (e.g. with gtk_widget_set_size_request()),
 * in which case it returns that geometry instead of the widget's
 * requisition.
 * 
 * This function differs from gtk_widget_size_request() in that
 * it retrieves the last size request value from `widget->`requisition,
 * while gtk_widget_size_request() actually calls the "size_request" method
 * on `widget` to compute the size request and fill in `widget->`requisition,
 * and only then returns `widget->`requisition.
 * 
 * Because this function does not call the “size_request” method, it
 * can only be used when you know that `widget->`requisition is
 * up-to-date, that is, gtk_widget_size_request() has been called
 * since the last time a resize was queued. In general, only container
 * implementations have this information; applications should use
 * gtk_widget_size_request().
 */
get_child_requisition(): Gtk.Requisition
/**
 * Retrieves the widget’s clip area.
 * 
 * The clip area is the area in which all of `widget'`s drawing will
 * happen. Other toolkits call it the bounding box.
 * 
 * Historically, in GTK+ the clip area has been equal to the allocation
 * retrieved via gtk_widget_get_allocation().
 */
get_clip(): Gtk.Allocation
/**
 * Returns the clipboard object for the given selection to
 * be used with `widget`. `widget` must have a #GdkDisplay
 * associated with it, so must be attached to a toplevel
 * window.
 * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
 * @returns the appropriate clipboard object. If no             clipboard already exists, a new one will             be created. Once a clipboard object has             been created, it is persistent for all time.
 */
get_clipboard(selection: Gdk.Atom): Gtk.Clipboard
/**
 * Obtains the composite name of a widget.
 * @returns the composite name of @widget, or %NULL if @widget is not   a composite child. The string should be freed when it is no   longer needed.
 */
get_composite_name(): string
/**
 * Returns whether `device` can interact with `widget` and its
 * children. See gtk_widget_set_device_enabled().
 * @param device a #GdkDevice
 * @returns %TRUE is @device is enabled for @widget
 */
get_device_enabled(device: Gdk.Device): boolean
/**
 * Returns the events mask for the widget corresponding to an specific device. These
 * are the events that the widget will receive when `device` operates on it.
 * @param device a #GdkDevice
 * @returns device event mask for @widget
 */
get_device_events(device: Gdk.Device): Gdk.EventMask
/**
 * Gets the reading direction for a particular widget. See
 * gtk_widget_set_direction().
 * @returns the reading direction for the widget.
 */
get_direction(): Gtk.TextDirection
/**
 * Get the #GdkDisplay for the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow at the top.
 * 
 * In general, you should only create display specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkDisplay for the toplevel for this widget.
 */
get_display(): Gdk.Display
/**
 * Determines whether the widget is double buffered.
 * 
 * See gtk_widget_set_double_buffered()
 * @returns %TRUE if the widget is double buffered
 */
get_double_buffered(): boolean
/**
 * Returns the event mask (see #GdkEventMask) for the widget. These are the
 * events that the widget will receive.
 * 
 * Note: Internally, the widget event mask will be the logical OR of the event
 * mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
 * event mask necessary to cater for every #GtkEventController created for the
 * widget.
 * @returns event mask for @widget
 */
get_events(): number
/**
 * Returns whether the widget should grab focus when it is clicked with the mouse.
 * See gtk_widget_set_focus_on_click().
 * @returns %TRUE if the widget should grab focus when it is clicked with               the mouse.
 */
get_focus_on_click(): boolean
/**
 * Gets the font map that has been set with gtk_widget_set_font_map().
 * @returns A #PangoFontMap, or %NULL
 */
get_font_map(): (Pango.FontMap | null)
/**
 * Returns the #cairo_font_options_t used for Pango rendering. When not set,
 * the defaults font options for the #GdkScreen will be used.
 * @returns the #cairo_font_options_t or %NULL if not set
 */
get_font_options(): (cairo.FontOptions | null)
/**
 * Obtains the frame clock for a widget. The frame clock is a global
 * “ticker” that can be used to drive animations and repaints.  The
 * most common reason to get the frame clock is to call
 * gdk_frame_clock_get_frame_time(), in order to get a time to use for
 * animating. For example you might record the start of the animation
 * with an initial value from gdk_frame_clock_get_frame_time(), and
 * then update the animation by calling
 * gdk_frame_clock_get_frame_time() again during each repaint.
 * 
 * gdk_frame_clock_request_phase() will result in a new frame on the
 * clock, but won’t necessarily repaint any widgets. To repaint a
 * widget, you have to use gtk_widget_queue_draw() which invalidates
 * the widget (thus scheduling it to receive a draw on the next
 * frame). gtk_widget_queue_draw() will also end up requesting a frame
 * on the appropriate frame clock.
 * 
 * A widget’s frame clock will not change while the widget is
 * mapped. Reparenting a widget (which implies a temporary unmap) can
 * change the widget’s frame clock.
 * 
 * Unrealized widgets do not have a frame clock.
 * @returns a #GdkFrameClock, or %NULL if widget is unrealized
 */
get_frame_clock(): (Gdk.FrameClock | null)
/**
 * Gets the value of the #GtkWidget:halign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
 * alignment.
 * @returns the horizontal alignment of @widget
 */
get_halign(): Gtk.Align
/**
 * Returns the current value of the has-tooltip property.  See
 * #GtkWidget:has-tooltip for more information.
 * @returns current value of has-tooltip on @widget.
 */
get_has_tooltip(): boolean
/**
 * Determines whether `widget` has a #GdkWindow of its own. See
 * gtk_widget_set_has_window().
 * @returns %TRUE if @widget has a window, %FALSE otherwise
 */
get_has_window(): boolean
/**
 * Gets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Containers should use gtk_widget_compute_expand() rather than
 * this function, to see whether a widget, or any of its children,
 * has the expand flag set. If any child of a widget wants to
 * expand, the parent may ask to expand also.
 * 
 * This function only looks at the widget’s own hexpand flag, rather
 * than computing whether the entire widget tree rooted at this widget
 * wants to expand.
 * @returns whether hexpand flag is set
 */
get_hexpand(): boolean
/**
 * Gets whether gtk_widget_set_hexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @returns whether hexpand has been explicitly set
 */
get_hexpand_set(): boolean
/**
 * Whether the widget is mapped.
 * @returns %TRUE if the widget is mapped, %FALSE otherwise.
 */
get_mapped(): boolean
/**
 * Gets the value of the #GtkWidget:margin-bottom property.
 * @returns The bottom margin of @widget
 */
get_margin_bottom(): number
/**
 * Gets the value of the #GtkWidget:margin-end property.
 * @returns The end margin of @widget
 */
get_margin_end(): number
/**
 * Gets the value of the #GtkWidget:margin-left property.
 * @returns The left margin of @widget
 */
get_margin_left(): number
/**
 * Gets the value of the #GtkWidget:margin-right property.
 * @returns The right margin of @widget
 */
get_margin_right(): number
/**
 * Gets the value of the #GtkWidget:margin-start property.
 * @returns The start margin of @widget
 */
get_margin_start(): number
/**
 * Gets the value of the #GtkWidget:margin-top property.
 * @returns The top margin of @widget
 */
get_margin_top(): number
/**
 * Returns the modifier mask the `widget’`s windowing system backend
 * uses for a particular purpose.
 * 
 * See gdk_keymap_get_modifier_mask().
 * @param intent the use case for the modifier mask
 * @returns the modifier mask used for @intent.
 */
get_modifier_mask(intent: Gdk.ModifierIntent): Gdk.ModifierType
/**
 * Returns the current modifier style for the widget. (As set by
 * gtk_widget_modify_style().) If no style has previously set, a new
 * #GtkRcStyle will be created with all values unset, and set as the
 * modifier style for the widget. If you make changes to this rc
 * style, you must call gtk_widget_modify_style(), passing in the
 * returned rc style, to make sure that your changes take effect.
 * 
 * Caution: passing the style back to gtk_widget_modify_style() will
 * normally end up destroying it, because gtk_widget_modify_style() copies
 * the passed-in style and sets the copy as the new modifier style,
 * thus dropping any reference to the old modifier style. Add a reference
 * to the modifier style if you want to keep it alive.
 * @returns the modifier style for the widget.     This rc style is owned by the widget. If you want to keep a     pointer to value this around, you must add a refcount using     g_object_ref().
 */
get_modifier_style(): Gtk.RcStyle
/**
 * Retrieves the name of a widget. See gtk_widget_set_name() for the
 * significance of widget names.
 * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
 */
get_name(): string
/**
 * Returns the current value of the #GtkWidget:no-show-all property,
 * which determines whether calls to gtk_widget_show_all()
 * will affect this widget.
 * @returns the current value of the “no-show-all” property.
 */
get_no_show_all(): boolean
/**
 * Fetches the requested opacity for this widget.
 * See gtk_widget_set_opacity().
 * @returns the requested opacity for this widget.
 */
get_opacity(): number
/**
 * Gets a #PangoContext with the appropriate font map, font description,
 * and base direction for this widget. Unlike the context returned
 * by gtk_widget_create_pango_context(), this context is owned by
 * the widget (it can be used until the screen for the widget changes
 * or the widget is removed from its toplevel), and will be updated to
 * match any changes to the widget’s attributes. This can be tracked
 * by using the #GtkWidget::screen-changed signal on the widget.
 * @returns the #PangoContext for the widget.
 */
get_pango_context(): Pango.Context
/**
 * Gets `widget’`s parent window, or %NULL if it does not have one.
 * @returns the parent window of @widget, or %NULL if it does not have a parent window.
 */
get_parent_window(): (Gdk.Window | null)
/**
 * Returns the #GtkWidgetPath representing `widget,` if the widget
 * is not connected to a toplevel widget, a partial path will be
 * created.
 * @returns The #GtkWidgetPath representing @widget
 */
get_path(): Gtk.WidgetPath
/**
 * Obtains the location of the mouse pointer in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(); and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 */
get_pointer(): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves the minimum and natural size of a widget, taking
 * into account the widget’s preference for height-for-width management.
 * 
 * This is used to retrieve a suitable size by container widgets which do
 * not impose any restrictions on the child placement. It can be used
 * to deduce toplevel window and menu sizes as well as child widgets in
 * free-form containers such as GtkLayout.
 * 
 * Handle with care. Note that the natural height of a height-for-width
 * widget will generally be a smaller size than the minimum height, since the required
 * height for the natural width is generally smaller than the required height for
 * the minimum width.
 * 
 * Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
 * baseline alignment.
 */
get_preferred_size(): [Gtk.Requisition | null, Gtk.Requisition | null]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
get_preferred_width_for_height(height: number): [number, number]
/**
 * Determines whether `widget` is realized.
 * @returns %TRUE if @widget is realized, %FALSE otherwise
 */
get_realized(): boolean
/**
 * Determines whether `widget` is always treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_set_receives_default().
 * @returns %TRUE if @widget acts as the default widget when focused,               %FALSE otherwise
 */
get_receives_default(): boolean
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 * @returns The #GtkSizeRequestMode preferred by @widget.
 */
get_request_mode(): Gtk.SizeRequestMode
/**
 * Retrieves the widget’s requisition.
 * 
 * This function should only be used by widget implementations in
 * order to figure whether the widget’s requisition has actually
 * changed after some internal state change (so that they can call
 * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
 * 
 * Normally, gtk_widget_size_request() should be used.
 */
get_requisition(): Gtk.Requisition
/**
 * Get the root window where this widget is located. This function can
 * only be called after the widget has been added to a widget
 * hierarchy with #GtkWindow at the top.
 * 
 * The root window is useful for such purposes as creating a popup
 * #GdkWindow associated with the window. In general, you should only
 * create display specific resources when a widget has been realized,
 * and you should free those resources when the widget is unrealized.
 * @returns the #GdkWindow root window for the toplevel for this widget.
 */
get_root_window(): Gdk.Window
/**
 * Retrieves the internal scale factor that maps from window coordinates
 * to the actual device pixels. On traditional systems this is 1, on
 * high density outputs, it can be a higher value (typically 2).
 * 
 * See gdk_window_get_scale_factor().
 * @returns the scale factor for @widget
 */
get_scale_factor(): number
/**
 * Get the #GdkScreen from the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow
 * at the top.
 * 
 * In general, you should only create screen specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkScreen for the toplevel for this widget.
 */
get_screen(): Gdk.Screen
/**
 * Returns the widget’s sensitivity (in the sense of returning
 * the value that has been set using gtk_widget_set_sensitive()).
 * 
 * The effective sensitivity of a widget is however determined by both its
 * own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
 * @returns %TRUE if the widget is sensitive
 */
get_sensitive(): boolean
/**
 * Gets the settings object holding the settings used for this widget.
 * 
 * Note that this function can only be called when the #GtkWidget
 * is attached to a toplevel, since the settings object is specific
 * to a particular #GdkScreen.
 * @returns the relevant #GtkSettings object
 */
get_settings(): Gtk.Settings
/**
 * Gets the size request that was explicitly set for the widget using
 * gtk_widget_set_size_request(). A value of -1 stored in `width` or
 * `height` indicates that that dimension has not been set explicitly
 * and the natural requisition of the widget will be used instead. See
 * gtk_widget_set_size_request(). To get the size a widget will
 * actually request, call gtk_widget_get_preferred_size() instead of
 * this function.
 */
get_size_request(): [number, number]
/**
 * Returns the widget’s state. See gtk_widget_set_state().
 * @returns the state of @widget.
 */
get_state(): Gtk.StateType
/**
 * Returns the widget state as a flag set. It is worth mentioning
 * that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
 * returned, that is, also based on parent insensitivity, even if
 * `widget` itself is sensitive.
 * 
 * Also note that if you are looking for a way to obtain the
 * #GtkStateFlags to pass to a #GtkStyleContext method, you
 * should look at gtk_style_context_get_state().
 * @returns The state flags for widget
 */
get_state_flags(): Gtk.StateFlags
/**
 * Returns the style context associated to `widget`. The returned object is
 * guaranteed to be the same for the lifetime of `widget`.
 * @returns a #GtkStyleContext. This memory is owned by @widget and          must not be freed.
 */
get_style_context(): Gtk.StyleContext
/**
 * Returns %TRUE if `widget` is multiple pointer aware. See
 * gtk_widget_set_support_multidevice() for more information.
 * @returns %TRUE if @widget is multidevice aware.
 */
get_support_multidevice(): boolean
/**
 * Fetch an object build from the template XML for `widget_type` in this `widget` instance.
 * 
 * This will only report children which were previously declared with
 * gtk_widget_class_bind_template_child_full() or one of its
 * variants.
 * 
 * This function is only meant to be called for code which is private to the `widget_type` which
 * declared the child and is meant for language bindings which cannot easily make use
 * of the GObject structure offsets.
 * @param widget_type The #GType to get a template child for
 * @param name The “id” of the child defined in the template XML
 * @returns The object built in the template XML with the id @name
 */
get_template_child<T = GObject.Object>(widget_type: GObject.GType, name: string): T
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_markup(): (string | null)
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_text(): (string | null)
/**
 * Returns the #GtkWindow of the current tooltip. This can be the
 * GtkWindow created by default, or the custom tooltip window set
 * using gtk_widget_set_tooltip_window().
 * @returns The #GtkWindow of the current tooltip.
 */
get_tooltip_window(): Gtk.Window
/**
 * This function returns the topmost widget in the container hierarchy
 * `widget` is a part of. If `widget` has no parent widgets, it will be
 * returned as the topmost widget. No reference will be added to the
 * returned widget; it should not be unreferenced.
 * 
 * Note the difference in behavior vs. gtk_widget_get_ancestor();
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
 * would return
 * %NULL if `widget` wasn’t inside a toplevel window, and if the
 * window was inside a #GtkWindow-derived widget which was in turn
 * inside the toplevel #GtkWindow. While the second case may
 * seem unlikely, it actually happens when a #GtkPlug is embedded
 * inside a #GtkSocket within the same application.
 * 
 * To reliably find the toplevel #GtkWindow, use
 * gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
 * on the result. For instance, to get the title of a widget's toplevel
 * window, one might use:
 * 
 * ```c
 * static const char *
 * get_widget_toplevel_title (GtkWidget *widget)
 * {
 *   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 *   if (GTK_IS_WINDOW (toplevel))
 *     {
 *       return gtk_window_get_title (GTK_WINDOW (toplevel));
 *     }
 * 
 *   return NULL;
 * }
 * ```
 * 
 * @returns the topmost ancestor of @widget, or @widget itself    if there’s no ancestor.
 */
get_toplevel(): Gtk.Widget
/**
 * Gets the value of the #GtkWidget:valign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. If your widget want to support baseline aligned
 * children it must use gtk_widget_get_valign_with_baseline(), or
 * `g_object_get (widget, "valign", &value, NULL)`, which will
 * also report the true value.
 * @returns the vertical alignment of @widget, ignoring baseline alignment
 */
get_valign(): Gtk.Align
/**
 * Gets the value of the #GtkWidget:valign property, including
 * %GTK_ALIGN_BASELINE.
 * @returns the vertical alignment of @widget
 */
get_valign_with_baseline(): Gtk.Align
/**
 * Gets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_get_hexpand() for more detail.
 * @returns whether vexpand flag is set
 */
get_vexpand(): boolean
/**
 * Gets whether gtk_widget_set_vexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * See gtk_widget_get_hexpand_set() for more detail.
 * @returns whether vexpand has been explicitly set
 */
get_vexpand_set(): boolean
/**
 * Determines whether the widget is visible. If you want to
 * take into account whether the widget’s parent is also marked as
 * visible, use gtk_widget_is_visible() instead.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See gtk_widget_set_visible().
 * @returns %TRUE if the widget is visible
 */
get_visible(): boolean
/**
 * Gets the visual that will be used to render `widget`.
 * @returns the visual for @widget
 */
get_visual(): Gdk.Visual
/**
 * Returns the widget’s window if it is realized, %NULL otherwise
 * @returns @widget’s window.
 */
get_window(): (Gdk.Window | null)
/**
 * Makes `widget` the current grabbed widget.
 * 
 * This means that interaction with other widgets in the same
 * application is blocked and mouse as well as keyboard events
 * are delivered to this widget.
 * 
 * If `widget` is not sensitive, it is not set as the current
 * grabbed widget and this function does nothing.
 */
grab_add(): void
/**
 * Causes `widget` to become the default widget. `widget` must be able to be
 * a default widget; typically you would ensure this yourself
 * by calling gtk_widget_set_can_default() with a %TRUE value.
 * The default widget is activated when
 * the user presses Enter in a window. Default widgets must be
 * activatable, that is, gtk_widget_activate() should affect them. Note
 * that #GtkEntry widgets require the “activates-default” property
 * set to %TRUE before they activate the default widget when Enter
 * is pressed and the #GtkEntry is focused.
 */
grab_default(): void
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
grab_focus(): void
/**
 * Removes the grab from the given widget.
 * 
 * You have to pair calls to gtk_grab_add() and gtk_grab_remove().
 * 
 * If `widget` does not have the grab, this function does nothing.
 */
grab_remove(): void
/**
 * Determines whether the widget is currently grabbing events, so it
 * is the only widget receiving input events (keyboard and mouse).
 * 
 * See also gtk_grab_add().
 * @returns %TRUE if the widget is in the grab_widgets stack
 */
has_grab(): boolean
/**
 * Determines if the widget style has been looked up through the rc mechanism.
 * @returns %TRUE if the widget has been looked up through the rc   mechanism, %FALSE otherwise.
 */
has_rc_style(): boolean
/**
 * Checks whether there is a #GdkScreen is associated with
 * this widget. All toplevel widgets have an associated
 * screen, and all widgets added into a hierarchy with a toplevel
 * window at the top.
 * @returns %TRUE if there is a #GdkScreen associated   with the widget.
 */
has_screen(): boolean
/**
 * Determines if the widget should show a visible indication that
 * it has the global input focus. This is a convenience function for
 * use in ::draw handlers that takes into account whether focus
 * indication should currently be shown in the toplevel window of
 * `widget`. See gtk_window_get_focus_visible() for more information
 * about focus indication.
 * 
 * To find out if the widget has the global input focus, use
 * gtk_widget_has_focus().
 * @returns %TRUE if the widget should display a “focus rectangle”
 */
has_visible_focus(): boolean
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
hide(): void
/**
 * Utility function; intended to be connected to the #GtkWidget::delete-event
 * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
 * argument, then returns %TRUE. If connected to ::delete-event, the
 * result is that clicking the close button for a window (on the
 * window frame, top right corner usually) will hide but not destroy
 * the window. By default, GTK+ destroys windows when ::delete-event
 * is received.
 * @returns %TRUE
 */
hide_on_delete(): boolean
/**
 * Returns whether the widget is currently being destroyed.
 * This information can sometimes be used to avoid doing
 * unnecessary work.
 * @returns %TRUE if @widget is being destroyed
 */
in_destruction(): boolean
/**
 * Creates and initializes child widgets defined in templates. This
 * function must be called in the instance initializer for any
 * class which assigned itself a template using gtk_widget_class_set_template()
 * 
 * It is important to call this function in the instance initializer
 * of a #GtkWidget subclass and not in #GObject.constructed() or
 * #GObject.constructor() for two reasons.
 * 
 * One reason is that generally derived widgets will assume that parent
 * class composite widgets have been created in their instance
 * initializers.
 * 
 * Another reason is that when calling g_object_new() on a widget with
 * composite templates, it’s important to build the composite widgets
 * before the construct properties are set. Properties passed to g_object_new()
 * should take precedence over properties set in the private template XML.
 */
init_template(): void
/**
 * Sets an input shape for this widget’s GDK window. This allows for
 * windows which react to mouse click in a nonrectangular region, see
 * gdk_window_input_shape_combine_region() for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
input_shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Inserts `group` into `widget`. Children of `widget` that implement
 * #GtkActionable can then be associated with actions in `group` by
 * setting their “action-name” to
 * `prefix`.`action-name`.
 * 
 * If `group` is %NULL, a previously inserted group for `name` is removed
 * from `widget`.
 * @param name the prefix for actions in @group
 * @param group a #GActionGroup, or %NULL
 */
insert_action_group(name: string, group?: (Gio.ActionGroup | null)): void
/**
 * Computes the intersection of a `widget’`s area and `area,` storing
 * the intersection in `intersection,` and returns %TRUE if there was
 * an intersection.  `intersection` may be %NULL if you’re only
 * interested in whether there was an intersection.
 * @param area a rectangle
 * @returns %TRUE if there was an intersection
 */
intersect(area: Gdk.Rectangle): [boolean, Gdk.Rectangle | null]
/**
 * Determines whether `widget` is somewhere inside `ancestor,` possibly with
 * intermediate containers.
 * @param ancestor another #GtkWidget
 * @returns %TRUE if @ancestor contains @widget as a child,    grandchild, great grandchild, etc.
 */
is_ancestor(ancestor: Gtk.Widget): boolean
/**
 * Whether `widget` can rely on having its alpha channel
 * drawn correctly. On X11 this function returns whether a
 * compositing manager is running for `widget’`s screen.
 * 
 * Please note that the semantics of this call will change
 * in the future if used on a widget that has a composited
 * window in its hierarchy (as set by gdk_window_set_composited()).
 * @returns %TRUE if the widget can rely on its alpha channel being drawn correctly.
 */
is_composited(): boolean
/**
 * Determines whether `widget` can be drawn to. A widget can be drawn
 * to if it is mapped and visible.
 * @returns %TRUE if @widget is drawable, %FALSE otherwise
 */
is_drawable(): boolean
/**
 * Returns the widget’s effective sensitivity, which means
 * it is sensitive itself and also its parent widget is sensitive
 * @returns %TRUE if the widget is effectively sensitive
 */
is_sensitive(): boolean
/**
 * Determines whether `widget` is a toplevel widget.
 * 
 * Currently only #GtkWindow and #GtkInvisible (and out-of-process
 * #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
 * widget.
 * @returns %TRUE if @widget is a toplevel, %FALSE otherwise
 */
is_toplevel(): boolean
/**
 * Determines whether the widget and all its parents are marked as
 * visible.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See also gtk_widget_get_visible() and gtk_widget_set_visible()
 * @returns %TRUE if the widget and all its parents are visible
 */
is_visible(): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 * @returns %TRUE if stopping keyboard navigation is fine, %FALSE               if the emitting widget should try to handle the keyboard               navigation attempt in its parent container(s).
 */
keynav_failed(direction: Gtk.DirectionType): boolean
/**
 * Lists the closures used by `widget` for accelerator group connections
 * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
 * The closures can be used to monitor accelerator changes on `widget,`
 * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
 * #GtkAccelGroup of a closure which can be found out with
 * gtk_accel_group_from_accel_closure().
 * @returns a newly allocated #GList of closures
 */
list_accel_closures(): GObject.Closure[]
/**
 * Retrieves a %NULL-terminated array of strings containing the prefixes of
 * #GActionGroup's available to `widget`.
 * @returns a %NULL-terminated array of strings.
 */
list_action_prefixes(): string[]
/**
 * Returns a newly allocated list of the widgets, normally labels, for
 * which this widget is the target of a mnemonic (see for example,
 * gtk_label_set_mnemonic_widget()).
 * 
 * The widgets in the list are not individually referenced. If you
 * want to iterate through the list and perform actions involving
 * callbacks that might destroy the widgets, you
 * must call `g_list_foreach (result,
 * (GFunc)g_object_ref, NULL)` first, and then unref all the
 * widgets afterwards.
 * @returns the list of  mnemonic labels; free this list  with g_list_free() when you are done with it.
 */
list_mnemonic_labels(): Gtk.Widget[]
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
map(): void
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 * @returns %TRUE if the signal has been handled
 */
mnemonic_activate(group_cycling: boolean): boolean
/**
 * Sets the base color for a widget in a particular state.
 * All other style values are left untouched. The base color
 * is the background color used along with the text color
 * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
 * and #GtkTextView. See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > base color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the base color on that.
 * @param state the state for which to set the base color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_base().
 */
modify_base(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > background color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the background color on that.
 * @param state the state for which to set the background color
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_bg().
 */
modify_bg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the #GtkWidget
 * cursor-color and secondary-cursor-color
 * style properties.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param primary the color to use for primary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_cursor().
 * @param secondary the color to use for secondary cursor (does     not need to be allocated), or %NULL to undo the effect of     previous calls to of gtk_widget_modify_cursor().
 */
modify_cursor(primary?: (Gdk.Color | null), secondary?: (Gdk.Color | null)): void
/**
 * Sets the foreground color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the foreground color
 * @param color the color to assign (does not need to be allocated),     or %NULL to undo the effect of previous calls to     of gtk_widget_modify_fg().
 */
modify_fg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the font to use for a widget.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param font_desc the font description to use, or %NULL     to undo the effect of previous calls to gtk_widget_modify_font()
 */
modify_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Modifies style values on the widget.
 * 
 * Modifications made using this technique take precedence over
 * style values set via an RC file, however, they will be overridden
 * if a style is explicitly set on the widget using gtk_widget_set_style().
 * The #GtkRcStyle-struct is designed so each field can either be
 * set or unset, so it is possible, using this function, to modify some
 * style values and leave the others unchanged.
 * 
 * Note that modifications made with this function are not cumulative
 * with previous calls to gtk_widget_modify_style() or with such
 * functions as gtk_widget_modify_fg(). If you wish to retain
 * previous values, you must first call gtk_widget_get_modifier_style(),
 * make your modifications to the returned style, then call
 * gtk_widget_modify_style() with that style. On the other hand,
 * if you first call gtk_widget_modify_style(), subsequent calls
 * to such functions gtk_widget_modify_fg() will have a cumulative
 * effect with the initial modifications.
 * @param style the #GtkRcStyle-struct holding the style modifications
 */
modify_style(style: Gtk.RcStyle): void
/**
 * Sets the text color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * The text color is the foreground color used along with the
 * base color (see gtk_widget_modify_base()) for widgets such
 * as #GtkEntry and #GtkTextView.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the text color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_text().
 */
modify_text(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color to use for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color().
 * @param state the state for which to set the background color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_background_color()
 */
override_background_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the color to use for a widget.
 * 
 * All other style values are left untouched.
 * 
 * This function does not act recursively. Setting the color of a
 * container does not affect its children. Note that some widgets that
 * you may not think of as containers, for instance #GtkButtons,
 * are actually containers.
 * 
 * This API is mostly meant as a quick way for applications to
 * change a widget appearance. If you are developing a widgets
 * library and intend this change to be themeable, it is better
 * done by setting meaningful CSS classes in your
 * widget/container implementation through gtk_style_context_add_class().
 * 
 * This way, your widget library can install a #GtkCssProvider
 * with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
 * to provide a default styling for those widgets that need so, and
 * this theming may fully overridden by the user’s theme.
 * 
 * Note that for complex widgets this may bring in undesired
 * results (such as uniform background color everywhere), in
 * these cases it is better to fully style such widgets through a
 * #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
 * priority.
 * @param state the state for which to set the color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_color()
 */
override_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the
 * cursor-color and secondary-cursor-color
 * style properties. All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * Note that the underlying properties have the #GdkColor type,
 * so the alpha value in `primary` and `secondary` will be ignored.
 * @param cursor the color to use for primary cursor (does not need to be     allocated), or %NULL to undo the effect of previous calls to     of gtk_widget_override_cursor().
 * @param secondary_cursor the color to use for secondary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_override_cursor().
 */
override_cursor(cursor?: (Gdk.RGBA | null), secondary_cursor?: (Gdk.RGBA | null)): void
/**
 * Sets the font to use for a widget. All other style values are
 * left untouched. See gtk_widget_override_color().
 * @param font_desc the font description to use, or %NULL to undo     the effect of previous calls to gtk_widget_override_font()
 */
override_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Sets a symbolic color for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color() for overriding the foreground
 * or background color.
 * @param name the name of the symbolic color to modify
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to gtk_widget_override_symbolic_color()
 */
override_symbolic_color(name: string, color?: (Gdk.RGBA | null)): void
/**
 * Obtains the full path to `widget`. The path is simply the name of a
 * widget and all its parents in the container hierarchy, separated by
 * periods. The name of a widget comes from
 * gtk_widget_get_name(). Paths are used to apply styles to a widget
 * in gtkrc configuration files. Widget names are the type of the
 * widget by default (e.g. “GtkButton”) or can be set to an
 * application-specific value with gtk_widget_set_name(). By setting
 * the name of a widget, you allow users or theme authors to apply
 * styles to that specific widget in their gtkrc
 * file. `path_reversed_p` fills in the path in reverse order,
 * i.e. starting with `widget’`s name instead of starting with the name
 * of `widget’`s outermost ancestor.
 */
path(): [number, string, string]
/**
 * This function is only for use in widget implementations.
 * 
 * Flags the widget for a rerun of the GtkWidgetClass::size_allocate
 * function. Use this function instead of gtk_widget_queue_resize()
 * when the `widget'`s size request didn't change but it wants to
 * reposition its contents.
 * 
 * An example user of this function is gtk_widget_set_halign().
 */
queue_allocate(): void
/**
 * Mark `widget` as needing to recompute its expand flags. Call
 * this function when setting legacy expand child properties
 * on the child of a container.
 * 
 * See gtk_widget_compute_expand().
 */
queue_compute_expand(): void
/**
 * Equivalent to calling gtk_widget_queue_draw_area() for the
 * entire area of a widget.
 */
queue_draw(): void
/**
 * Convenience function that calls gtk_widget_queue_draw_region() on
 * the region created from the given coordinates.
 * 
 * The region here is specified in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(), and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 * 
 * `width` or `height` may be 0, in this case this function does
 * nothing. Negative values for `width` and `height` are not allowed.
 * @param x x coordinate of upper-left corner of rectangle to redraw
 * @param y y coordinate of upper-left corner of rectangle to redraw
 * @param width width of region to draw
 * @param height height of region to draw
 */
queue_draw_area(x: number, y: number, width: number, height: number): void
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
queue_draw_region(region: cairo.Region): void
/**
 * This function is only for use in widget implementations.
 * Flags a widget to have its size renegotiated; should
 * be called when a widget for some reason has a new size request.
 * For example, when you change the text in a #GtkLabel, #GtkLabel
 * queues a resize to ensure there’s enough space for the new text.
 * 
 * Note that you cannot call gtk_widget_queue_resize() on a widget
 * from inside its implementation of the GtkWidgetClass::size_allocate
 * virtual method. Calls to gtk_widget_queue_resize() from inside
 * GtkWidgetClass::size_allocate will be silently ignored.
 */
queue_resize(): void
/**
 * This function works like gtk_widget_queue_resize(),
 * except that the widget is not invalidated.
 */
queue_resize_no_redraw(): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
realize(): void
/**
 * Computes the intersection of a `widget’`s area and `region,` returning
 * the intersection. The result may be empty, use cairo_region_is_empty() to
 * check.
 * @param region a #cairo_region_t, in the same coordinate system as          @widget->allocation. That is, relative to @widget->window          for widgets which return %FALSE from gtk_widget_get_has_window();          relative to the parent window of @widget->window otherwise.
 * @returns A newly allocated region holding the intersection of @widget     and @region.
 */
region_intersect(region: cairo.Region): cairo.Region
/**
 * Registers a #GdkWindow with the widget and sets it up so that
 * the widget receives events for it. Call gtk_widget_unregister_window()
 * when destroying the window.
 * 
 * Before 3.8 you needed to call gdk_window_set_user_data() directly to set
 * this up. This is now deprecated and you should use gtk_widget_register_window()
 * instead. Old code will keep working as is, although some new features like
 * transparency might not work perfectly.
 * @param window a #GdkWindow
 */
register_window(window: Gdk.Window): void
/**
 * Removes an accelerator from `widget,` previously installed with
 * gtk_widget_add_accelerator().
 * @param accel_group accel group for this widget
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @returns whether an accelerator was installed and could be removed
 */
remove_accelerator(accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType): boolean
/**
 * Removes a widget from the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
 * must have previously been added to the list with
 * gtk_widget_add_mnemonic_label().
 * @param label a #GtkWidget that was previously set as a mnemonic label for         @widget with gtk_widget_add_mnemonic_label().
 */
remove_mnemonic_label(label: Gtk.Widget): void
/**
 * Removes a tick callback previously registered with
 * gtk_widget_add_tick_callback().
 * @param id an id returned by gtk_widget_add_tick_callback()
 */
remove_tick_callback(id: number): void
/**
 * A convenience function that uses the theme settings for `widget`
 * to look up `stock_id` and render it to a pixbuf. `stock_id` should
 * be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size`
 * should be a size such as #GTK_ICON_SIZE_MENU. `detail` should be a
 * string that identifies the widget or code doing the rendering, so
 * that theme engines can special-case rendering for that widget or
 * code.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be
 * freed after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @param detail render detail to pass to theme engine
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon(stock_id: string, size: number, detail?: (string | null)): (GdkPixbuf.Pixbuf | null)
/**
 * A convenience function that uses the theme engine and style
 * settings for `widget` to look up `stock_id` and render it to
 * a pixbuf. `stock_id` should be a stock icon ID such as
 * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
 * such as #GTK_ICON_SIZE_MENU.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be freed
 * after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon_pixbuf(stock_id: string, size: number): (GdkPixbuf.Pixbuf | null)
/**
 * Moves a widget from one #GtkContainer to another, handling reference
 * count issues to avoid destroying the widget.
 * @param new_parent a #GtkContainer to move the widget into
 */
reparent(new_parent: Gtk.Widget): void
/**
 * Reset the styles of `widget` and all descendents, so when
 * they are looked up again, they get the correct values
 * for the currently loaded RC file settings.
 * 
 * This function is not useful for applications.
 */
reset_rc_styles(): void
/**
 * Updates the style context of `widget` and all descendants
 * by updating its widget path. #GtkContainers may want
 * to use this on a child when reordering it in a way that a different
 * style might apply to it. See also gtk_container_get_path_for_child().
 */
reset_style(): void
/**
 * Very rarely-used function. This function is used to emit
 * an expose event on a widget. This function is not normally used
 * directly. The only time it is used is when propagating an expose
 * event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
 * and that is normally done using gtk_container_propagate_draw().
 * 
 * If you want to force an area of a window to be redrawn,
 * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
 * To cause the redraw to be done immediately, follow that call
 * with a call to gdk_window_process_updates().
 * @param event a expose #GdkEvent
 * @returns return from the event signal emission (%TRUE if   the event was handled)
 */
send_expose(event: Gdk.Event): number
/**
 * Sends the focus change `event` to `widget`
 * 
 * This function is not meant to be used by applications. The only time it
 * should be used is when it is necessary for a #GtkWidget to assign focus
 * to a widget that is semantically owned by the first widget even though
 * it’s not a direct child - for instance, a search entry in a floating
 * window similar to the quick search in #GtkTreeView.
 * 
 * An example of its usage is:
 * 
 * 
 * ```c
 *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
 * 
 *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
 *   fevent->focus_change.in = TRUE;
 *   fevent->focus_change.window = _gtk_widget_get_window (widget);
 *   if (fevent->focus_change.window != NULL)
 *     g_object_ref (fevent->focus_change.window);
 * 
 *   gtk_widget_send_focus_change (widget, fevent);
 * 
 *   gdk_event_free (event);
 * ```
 * 
 * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
 * @returns the return value from the event signal emission: %TRUE   if the event was handled, and %FALSE otherwise
 */
send_focus_change(event: Gdk.Event): boolean
/**
 * Given an accelerator group, `accel_group,` and an accelerator path,
 * `accel_path,` sets up an accelerator in `accel_group` so whenever the
 * key binding that is defined for `accel_path` is pressed, `widget`
 * will be activated.  This removes any accelerators (for any
 * accelerator group) installed by previous calls to
 * gtk_widget_set_accel_path(). Associating accelerators with
 * paths allows them to be modified by the user and the modifications
 * to be saved for future use. (See gtk_accel_map_save().)
 * 
 * This function is a low level function that would most likely
 * be used by a menu creation system like #GtkUIManager. If you
 * use #GtkUIManager, setting up accelerator paths will be done
 * automatically.
 * 
 * Even when you you aren’t using #GtkUIManager, if you only want to
 * set up accelerators on menu items gtk_menu_item_set_accel_path()
 * provides a somewhat more convenient interface.
 * 
 * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
 * pass a static string, you can save some memory by interning it first with
 * g_intern_static_string().
 * @param accel_path path used to look up the accelerator
 * @param accel_group a #GtkAccelGroup.
 */
set_accel_path(accel_path?: (string | null), accel_group?: (Gtk.AccelGroup | null)): void
/**
 * Sets the widget’s allocation.  This should not be used
 * directly, but from within a widget’s size_allocate method.
 * 
 * The allocation set should be the “adjusted” or actual
 * allocation. If you’re implementing a #GtkContainer, you want to use
 * gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
 * The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
 * allocation inside gtk_widget_size_allocate() to create an adjusted
 * allocation.
 * @param allocation a pointer to a #GtkAllocation to copy from
 */
set_allocation(allocation: Gtk.Allocation): void
/**
 * Sets whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * This is a hint to the widget and does not affect the behavior of
 * the GTK+ core; many widgets ignore this flag entirely. For widgets
 * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
 * the effect is to suppress default themed drawing of the widget's
 * background. (Children of the widget will still be drawn.) The application
 * is then entirely responsible for drawing the widget background.
 * 
 * Note that the background is still drawn when the widget is mapped.
 * @param app_paintable %TRUE if the application will paint on the widget
 */
set_app_paintable(app_paintable: boolean): void
/**
 * Specifies whether `widget` can be a default widget. See
 * gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param can_default whether or not @widget can be a default widget.
 */
set_can_default(can_default: boolean): void
/**
 * Specifies whether `widget` can own the input focus. See
 * gtk_widget_grab_focus() for actually setting the input focus on a
 * widget.
 * @param can_focus whether or not @widget can own the input focus.
 */
set_can_focus(can_focus: boolean): void
/**
 * Sets the widget’s clip.  This must not be used directly,
 * but from within a widget’s size_allocate method.
 * It must be called after gtk_widget_set_allocation() (or after chaining up
 * to the parent class), because that function resets the clip.
 * 
 * The clip set should be the area that `widget` draws on. If `widget` is a
 * #GtkContainer, the area must contain all children's clips.
 * 
 * If this function is not called by `widget` during a ::size-allocate handler,
 * the clip will be set to `widget'`s allocation.
 * @param clip a pointer to a #GtkAllocation to copy from
 */
set_clip(clip: Gtk.Allocation): void
/**
 * Sets a widgets composite name. The widget must be
 * a composite child of its parent; see gtk_widget_push_composite_child().
 * @param name the name to set
 */
set_composite_name(name: string): void
/**
 * Enables or disables a #GdkDevice to interact with `widget`
 * and all its children.
 * 
 * It does so by descending through the #GdkWindow hierarchy
 * and enabling the same mask that is has for core events
 * (i.e. the one that gdk_window_get_events() returns).
 * @param device a #GdkDevice
 * @param enabled whether to enable the device
 */
set_device_enabled(device: Gdk.Device, enabled: boolean): void
/**
 * Sets the device event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive from `device`. Keep
 * in mind that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_device_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with windowless widgets (which return
 * %FALSE from gtk_widget_get_has_window());
 * to get events on those widgets, place them inside a #GtkEventBox
 * and receive events on the event box.
 * @param device a #GdkDevice
 * @param events event mask
 */
set_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Sets the reading direction on a particular widget. This direction
 * controls the primary direction for widgets containing text,
 * and also the direction in which the children of a container are
 * packed. The ability to set the direction is present in order
 * so that correct localization into languages with right-to-left
 * reading directions can be done. Generally, applications will
 * let the default reading direction present, except for containers
 * where the containers are arranged in an order that is explicitly
 * visual rather than logical (such as buttons for text justification).
 * 
 * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
 * set by gtk_widget_set_default_direction() will be used.
 * @param dir the new direction
 */
set_direction(dir: Gtk.TextDirection): void
/**
 * Widgets are double buffered by default; you can use this function
 * to turn off the buffering. “Double buffered” simply means that
 * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
 * automatically around expose events sent to the
 * widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
 * window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
 * buffer to the screen. The result is that users see the window
 * update in one smooth step, and don’t see individual graphics
 * primitives being rendered.
 * 
 * In very simple terms, double buffered widgets don’t flicker,
 * so you would only use this function to turn off double buffering
 * if you had special needs and really knew what you were doing.
 * 
 * Note: if you turn off double-buffering, you have to handle
 * expose events, since even the clearing to the background color or
 * pixmap will not happen automatically (as it is done in
 * gdk_window_begin_draw_frame()).
 * 
 * In 3.10 GTK and GDK have been restructured for translucent drawing. Since
 * then expose events for double-buffered widgets are culled into a single
 * event to the toplevel GDK window. If you now unset double buffering, you
 * will cause a separate rendering pass for every widget. This will likely
 * cause rendering problems - in particular related to stacking - and usually
 * increases rendering times significantly.
 * @param double_buffered %TRUE to double-buffer a widget
 */
set_double_buffered(double_buffered: boolean): void
/**
 * Sets the event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive. Keep in mind
 * that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with widgets that have no window.
 * (See gtk_widget_get_has_window()).  To get events on those widgets,
 * place them inside a #GtkEventBox and receive events on the event
 * box.
 * @param events event mask
 */
set_events(events: number): void
/**
 * Sets whether the widget should grab focus when it is clicked with the mouse.
 * Making mouse clicks not grab focus is useful in places like toolbars where
 * you don’t want the keyboard focus removed from the main area of the
 * application.
 * @param focus_on_click whether the widget should grab focus when clicked with the mouse
 */
set_focus_on_click(focus_on_click: boolean): void
/**
 * Sets the font map to use for Pango rendering. When not set, the widget
 * will inherit the font map from its parent.
 * @param font_map a #PangoFontMap, or %NULL to unset any previously     set font map
 */
set_font_map(font_map?: (Pango.FontMap | null)): void
/**
 * Sets the #cairo_font_options_t used for Pango rendering in this widget.
 * When not set, the default font options for the #GdkScreen will be used.
 * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
 */
set_font_options(options?: (cairo.FontOptions | null)): void
/**
 * Sets the horizontal alignment of `widget`.
 * See the #GtkWidget:halign property.
 * @param align the horizontal alignment
 */
set_halign(align: Gtk.Align): void
/**
 * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
 * #GtkWidget:has-tooltip for more information.
 * @param has_tooltip whether or not @widget has a tooltip.
 */
set_has_tooltip(has_tooltip: boolean): void
/**
 * Specifies whether `widget` has a #GdkWindow of its own. Note that
 * all realized widgets have a non-%NULL “window” pointer
 * (gtk_widget_get_window() never returns a %NULL window when a widget
 * is realized), but for many of them it’s actually the #GdkWindow of
 * one of its parent widgets. Widgets that do not create a %window for
 * themselves in #GtkWidget::realize must announce this by
 * calling this function with `has_window` = %FALSE.
 * 
 * This function should only be called by widget implementations,
 * and they should call it in their init() function.
 * @param has_window whether or not @widget has a window.
 */
set_has_window(has_window: boolean): void
/**
 * Sets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Call this function to set the expand flag if you would like your
 * widget to become larger horizontally when the window has extra
 * room.
 * 
 * By default, widgets automatically expand if any of their children
 * want to expand. (To see if a widget will automatically expand given
 * its current children and state, call gtk_widget_compute_expand(). A
 * container can decide how the expandability of children affects the
 * expansion of the container by overriding the compute_expand virtual
 * method on #GtkWidget.).
 * 
 * Setting hexpand explicitly with this function will override the
 * automatic expand behavior.
 * 
 * This function forces the widget to expand or not to expand,
 * regardless of children.  The override occurs because
 * gtk_widget_set_hexpand() sets the hexpand-set property (see
 * gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
 * value to be used, rather than looking at children and widget state.
 * @param expand whether to expand
 */
set_hexpand(expand: boolean): void
/**
 * Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
 * be used.
 * 
 * The hexpand-set property will be set automatically when you call
 * gtk_widget_set_hexpand() to set hexpand, so the most likely
 * reason to use this function would be to unset an explicit expand
 * flag.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @param set value for hexpand-set property
 */
set_hexpand_set(set: boolean): void
/**
 * Marks the widget as being mapped.
 * 
 * This function should only ever be called in a derived widget's
 * “map” or “unmap” implementation.
 * @param mapped %TRUE to mark the widget as mapped
 */
set_mapped(mapped: boolean): void
/**
 * Sets the bottom margin of `widget`.
 * See the #GtkWidget:margin-bottom property.
 * @param margin the bottom margin
 */
set_margin_bottom(margin: number): void
/**
 * Sets the end margin of `widget`.
 * See the #GtkWidget:margin-end property.
 * @param margin the end margin
 */
set_margin_end(margin: number): void
/**
 * Sets the left margin of `widget`.
 * See the #GtkWidget:margin-left property.
 * @param margin the left margin
 */
set_margin_left(margin: number): void
/**
 * Sets the right margin of `widget`.
 * See the #GtkWidget:margin-right property.
 * @param margin the right margin
 */
set_margin_right(margin: number): void
/**
 * Sets the start margin of `widget`.
 * See the #GtkWidget:margin-start property.
 * @param margin the start margin
 */
set_margin_start(margin: number): void
/**
 * Sets the top margin of `widget`.
 * See the #GtkWidget:margin-top property.
 * @param margin the top margin
 */
set_margin_top(margin: number): void
/**
 * Widgets can be named, which allows you to refer to them from a
 * CSS file. You can apply a style to widgets with a particular name
 * in the CSS file. See the documentation for the CSS syntax (on the
 * same page as the docs for #GtkStyleContext).
 * 
 * Note that the CSS syntax has certain special characters to delimit
 * and represent elements in a selector (period, #, >, *...), so using
 * these will make your widget impossible to match by name. Any combination
 * of alphanumeric symbols, dashes and underscores will suffice.
 * @param name name for the widget
 */
set_name(name: string): void
/**
 * Sets the #GtkWidget:no-show-all property, which determines whether
 * calls to gtk_widget_show_all() will affect this widget.
 * 
 * This is mostly for use in constructing widget hierarchies with externally
 * controlled visibility, see #GtkUIManager.
 * @param no_show_all the new value for the “no-show-all” property
 */
set_no_show_all(no_show_all: boolean): void
/**
 * Request the `widget` to be rendered partially transparent,
 * with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
 * are clamped to the [0,1] range.).
 * This works on both toplevel widget, and child widgets, although there
 * are some limitations:
 * 
 * For toplevel widgets this depends on the capabilities of the windowing
 * system. On X11 this has any effect only on X screens with a compositing manager
 * running. See gtk_widget_is_composited(). On Windows it should work
 * always, although setting a window’s opacity after the window has been
 * shown causes it to flicker once on Windows.
 * 
 * For child widgets it doesn’t work if any affected widget has a native window, or
 * disables double buffering.
 * @param opacity desired opacity, between 0 and 1
 */
set_opacity(opacity: number): void
/**
 * This function is useful only when implementing subclasses of
 * #GtkContainer.
 * Sets the container as the parent of `widget,` and takes care of
 * some details such as updating the state and style of the child
 * to reflect its new location. The opposite function is
 * gtk_widget_unparent().
 * @param parent parent container
 */
set_parent(parent: Gtk.Widget): void
/**
 * Sets a non default parent window for `widget`.
 * 
 * For #GtkWindow classes, setting a `parent_window` effects whether
 * the window is a toplevel window or can be embedded into other
 * widgets.
 * 
 * For #GtkWindow classes, this needs to be called before the
 * window is realized.
 * @param parent_window the new parent window.
 */
set_parent_window(parent_window: Gdk.Window): void
/**
 * Marks the widget as being realized. This function must only be
 * called after all #GdkWindows for the `widget` have been created
 * and registered.
 * 
 * This function should only ever be called in a derived widget's
 * “realize” or “unrealize” implementation.
 * @param realized %TRUE to mark the widget as realized
 */
set_realized(realized: boolean): void
/**
 * Specifies whether `widget` will be treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param receives_default whether or not @widget can be a default widget.
 */
set_receives_default(receives_default: boolean): void
/**
 * Sets whether the entire widget is queued for drawing when its size
 * allocation changes. By default, this setting is %TRUE and
 * the entire widget is redrawn on every size change. If your widget
 * leaves the upper left unchanged when made bigger, turning this
 * setting off will improve performance.
 * 
 * Note that for widgets where gtk_widget_get_has_window() is %FALSE
 * setting this flag to %FALSE turns off all allocation on resizing:
 * the widget will not even redraw if its position changes; this is to
 * allow containers that don’t draw anything to avoid excess
 * invalidations. If you set this flag on a widget with no window that
 * does draw on `widget->`window, you are
 * responsible for invalidating both the old and new allocation of the
 * widget when the widget is moved and responsible for invalidating
 * regions newly when the widget increases size.
 * @param redraw_on_allocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
 */
set_redraw_on_allocate(redraw_on_allocate: boolean): void
/**
 * Sets the sensitivity of a widget. A widget is sensitive if the user
 * can interact with it. Insensitive widgets are “grayed out” and the
 * user can’t interact with them. Insensitive widgets are known as
 * “inactive”, “disabled”, or “ghosted” in some other toolkits.
 * @param sensitive %TRUE to make the widget sensitive
 */
set_sensitive(sensitive: boolean): void
/**
 * Sets the minimum size of a widget; that is, the widget’s size
 * request will be at least `width` by `height`. You can use this
 * function to force a widget to be larger than it normally would be.
 * 
 * In most cases, gtk_window_set_default_size() is a better choice for
 * toplevel windows than this function; setting the default size will
 * still allow users to shrink the window. Setting the size request
 * will force them to leave the window at least as large as the size
 * request. When dealing with window sizes,
 * gtk_window_set_geometry_hints() can be a useful function as well.
 * 
 * Note the inherent danger of setting any fixed size - themes,
 * translations into other languages, different fonts, and user action
 * can all change the appropriate size for a given widget. So, it's
 * basically impossible to hardcode a size that will always be
 * correct.
 * 
 * The size request of a widget is the smallest size a widget can
 * accept while still functioning well and drawing itself correctly.
 * However in some strange cases a widget may be allocated less than
 * its requested size, and in many cases a widget may be allocated more
 * space than it requested.
 * 
 * If the size request in a given direction is -1 (unset), then
 * the “natural” size request of the widget will be used instead.
 * 
 * The size request set here does not include any margin from the
 * #GtkWidget properties margin-left, margin-right, margin-top, and
 * margin-bottom, but it does include pretty much all other padding
 * or border properties set by any subclass of #GtkWidget.
 * @param width width @widget should request, or -1 to unset
 * @param height height @widget should request, or -1 to unset
 */
set_size_request(width: number, height: number): void
/**
 * This function is for use in widget implementations. Sets the state
 * of a widget (insensitive, prelighted, etc.) Usually you should set
 * the state using wrapper functions such as gtk_widget_set_sensitive().
 * @param state new state for @widget
 */
set_state(state: Gtk.StateType): void
/**
 * This function is for use in widget implementations. Turns on flag
 * values in the current widget state (insensitive, prelighted, etc.).
 * 
 * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
 * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
 * direction, use gtk_widget_set_direction().
 * 
 * It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
 * will be propagated down to all non-internal children if `widget` is a
 * #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
 * down to all #GtkContainer children by different means than turning on the
 * state flag down the hierarchy, both gtk_widget_get_state_flags() and
 * gtk_widget_is_sensitive() will make use of these.
 * @param flags State flags to turn on
 * @param clear Whether to clear state before turning on @flags
 */
set_state_flags(flags: Gtk.StateFlags, clear: boolean): void
/**
 * Enables or disables multiple pointer awareness. If this setting is %TRUE,
 * `widget` will start receiving multiple, per device enter/leave events. Note
 * that if custom #GdkWindows are created in #GtkWidget::realize,
 * gdk_window_set_support_multidevice() will have to be called manually on them.
 * @param support_multidevice %TRUE to support input from multiple devices.
 */
set_support_multidevice(support_multidevice: boolean): void
/**
 * Sets `markup` as the contents of the tooltip, which is marked up with
 *  the [Pango text markup language][PangoMarkupFormat].
 * 
 * This function will take care of setting #GtkWidget:has-tooltip to %TRUE
 * and of the default handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-markup property and
 * gtk_tooltip_set_markup().
 * @param markup the contents of the tooltip for @widget, or %NULL
 */
set_tooltip_markup(markup?: (string | null)): void
/**
 * Sets `text` as the contents of the tooltip. This function will take
 * care of setting #GtkWidget:has-tooltip to %TRUE and of the default
 * handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
 * @param text the contents of the tooltip for @widget
 */
set_tooltip_text(text?: (string | null)): void
/**
 * Replaces the default window used for displaying
 * tooltips with `custom_window`. GTK+ will take care of showing and
 * hiding `custom_window` at the right moment, to behave likewise as
 * the default tooltip window. If `custom_window` is %NULL, the default
 * tooltip window will be used.
 * @param custom_window a #GtkWindow, or %NULL
 */
set_tooltip_window(custom_window?: (Gtk.Window | null)): void
/**
 * Sets the vertical alignment of `widget`.
 * See the #GtkWidget:valign property.
 * @param align the vertical alignment
 */
set_valign(align: Gtk.Align): void
/**
 * Sets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_set_hexpand() for more detail.
 * @param expand whether to expand
 */
set_vexpand(expand: boolean): void
/**
 * Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
 * be used.
 * 
 * See gtk_widget_set_hexpand_set() for more detail.
 * @param set value for vexpand-set property
 */
set_vexpand_set(set: boolean): void
/**
 * Sets the visibility state of `widget`. Note that setting this to
 * %TRUE doesn’t mean the widget is actually viewable, see
 * gtk_widget_get_visible().
 * 
 * This function simply calls gtk_widget_show() or gtk_widget_hide()
 * but is nicer to use when the visibility of the widget depends on
 * some condition.
 * @param visible whether the widget should be shown or not
 */
set_visible(visible: boolean): void
/**
 * Sets the visual that should be used for by widget and its children for
 * creating #GdkWindows. The visual must be on the same #GdkScreen as
 * returned by gtk_widget_get_screen(), so handling the
 * #GtkWidget::screen-changed signal is necessary.
 * 
 * Setting a new `visual` will not cause `widget` to recreate its windows,
 * so you should call this function before `widget` is realized.
 * @param visual visual to be used or %NULL to unset a previous one
 */
set_visual(visual?: (Gdk.Visual | null)): void
/**
 * Sets a widget’s window. This function should only be used in a
 * widget’s #GtkWidget::realize implementation. The %window passed is
 * usually either new window created with gdk_window_new(), or the
 * window of its parent widget as returned by
 * gtk_widget_get_parent_window().
 * 
 * Widgets must indicate whether they will create their own #GdkWindow
 * by calling gtk_widget_set_has_window(). This is usually done in the
 * widget’s init() function.
 * 
 * Note that this function does not add any reference to `window`.
 * @param window a #GdkWindow
 */
set_window(window: Gdk.Window): void
/**
 * Sets a shape for this widget’s GDK window. This allows for
 * transparent windows etc., see gdk_window_shape_combine_region()
 * for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
show_all(): void
/**
 * Shows a widget. If the widget is an unmapped toplevel widget
 * (i.e. a #GtkWindow that has not yet been shown), enter the main
 * loop and wait for the window to actually be mapped. Be careful;
 * because the main loop is running, anything can happen during
 * this function.
 */
show_now(): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
size_allocate(allocation: Gtk.Allocation): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size,
 * position and (optionally) baseline to their child widgets.
 * 
 * In this function, the allocation and baseline may be adjusted. It
 * will be forced to a 1x1 minimum size, and the
 * adjust_size_allocation virtual and adjust_baseline_allocation
 * methods on the child will be used to adjust the allocation and
 * baseline. Standard adjustments include removing the widget's
 * margins, and applying the widget’s #GtkWidget:halign and
 * #GtkWidget:valign properties.
 * 
 * If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
 * baseline argument is ignored and -1 is used instead.
 * @param allocation position and size to be allocated to @widget
 * @param baseline The baseline of the child, or -1
 */
size_allocate_with_baseline(allocation: Gtk.Allocation, baseline: number): void
/**
 * This function is typically used when implementing a #GtkContainer
 * subclass.  Obtains the preferred size of a widget. The container
 * uses this information to arrange its child widgets and decide what
 * size allocations to give them with gtk_widget_size_allocate().
 * 
 * You can also call this function from an application, with some
 * caveats. Most notably, getting a size request requires the widget
 * to be associated with a screen, because font information may be
 * needed. Multihead-aware applications should keep this in mind.
 * 
 * Also remember that the size request is not necessarily the size
 * a widget will actually be allocated.
 */
size_request(): Gtk.Requisition
/**
 * This function attaches the widget’s #GtkStyle to the widget's
 * #GdkWindow. It is a replacement for
 * 
 * 
 * ```
 * widget->style = gtk_style_attach (widget->style, widget->window);
 * ```
 * 
 * 
 * and should only ever be called in a derived widget’s “realize”
 * implementation which does not chain up to its parent class'
 * “realize” implementation, because one of the parent classes
 * (finally #GtkWidget) would attach the style itself.
 */
style_attach(): void
/**
 * Gets the value of a style property of `widget`.
 * @param property_name the name of a style property
 * @param value location to return the property value
 */
style_get_property(property_name: string, value: GObject.Value): void
/**
 * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
 * This causes all queued #GtkWidget::child-notify signals on `widget` to be
 * emitted.
 */
thaw_child_notify(): void
/**
 * Translate coordinates relative to `src_widget’`s allocation to coordinates
 * relative to `dest_widget’`s allocations. In order to perform this
 * operation, both widgets must be realized, and must share a common
 * toplevel.
 * @param dest_widget a #GtkWidget
 * @param src_x X position relative to @src_widget
 * @param src_y Y position relative to @src_widget
 * @returns %FALSE if either widget was not realized, or there   was no common ancestor. In this case, nothing is stored in   *@dest_x and *@dest_y. Otherwise %TRUE.
 */
translate_coordinates(dest_widget: Gtk.Widget, src_x: number, src_y: number): [boolean, number, number]
/**
 * Triggers a tooltip query on the display where the toplevel of `widget`
 * is located. See gtk_tooltip_trigger_tooltip_query() for more
 * information.
 */
trigger_tooltip_query(): void
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
unmap(): void
/**
 * This function is only for use in widget implementations.
 * Should be called by implementations of the remove method
 * on #GtkContainer, to dissociate a child from the container.
 */
unparent(): void
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
unrealize(): void
/**
 * Unregisters a #GdkWindow from the widget that was previously set up with
 * gtk_widget_register_window(). You need to call this when the window is
 * no longer used by the widget, such as when you destroy it.
 * @param window a #GdkWindow
 */
unregister_window(window: Gdk.Window): void
/**
 * This function is for use in widget implementations. Turns off flag
 * values for the current widget state (insensitive, prelighted, etc.).
 * See gtk_widget_set_state_flags().
 * @param flags State flags to turn off
 */
unset_state_flags(flags: Gtk.StateFlags): void
vfunc_adjust_baseline_allocation(baseline: number): void
vfunc_adjust_baseline_request(minimum_baseline: number, natural_baseline: number): void
vfunc_adjust_size_allocation(orientation: Gtk.Orientation, minimum_size: number, natural_size: number, allocated_pos: number, allocated_size: number): void
vfunc_adjust_size_request(orientation: Gtk.Orientation, minimum_size: number, natural_size: number): void
vfunc_button_press_event(event: Gdk.EventButton): boolean
vfunc_button_release_event(event: Gdk.EventButton): boolean
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 */
vfunc_can_activate_accel(signal_id: number): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
vfunc_child_notify(child_property: GObject.ParamSpec): void
vfunc_composited_changed(): void
vfunc_compute_expand(hexpand_p: boolean, vexpand_p: boolean): void
vfunc_configure_event(event: Gdk.EventConfigure): boolean
vfunc_damage_event(event: Gdk.EventExpose): boolean
vfunc_delete_event(event: Gdk.EventAny): boolean
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
vfunc_destroy(): void
vfunc_destroy_event(event: Gdk.EventAny): boolean
vfunc_direction_changed(previous_direction: Gtk.TextDirection): void
vfunc_dispatch_child_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_drag_begin(context: Gdk.DragContext): void
vfunc_drag_data_delete(context: Gdk.DragContext): void
vfunc_drag_data_get(context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_data_received(context: Gdk.DragContext, x: number, y: number, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_drop(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_drag_end(context: Gdk.DragContext): void
vfunc_drag_failed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
vfunc_drag_leave(context: Gdk.DragContext, time_: number): void
vfunc_drag_motion(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_draw(cr: cairo.Context): boolean
vfunc_enter_notify_event(event: Gdk.EventCrossing): boolean
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 */
vfunc_event(event: Gdk.Event): boolean
vfunc_focus(direction: Gtk.DirectionType): boolean
vfunc_focus_in_event(event: Gdk.EventFocus): boolean
vfunc_focus_out_event(event: Gdk.EventFocus): boolean
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 */
vfunc_get_accessible(): Atk.Object
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
vfunc_get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
vfunc_get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
vfunc_get_preferred_width_for_height(height: number): [number, number]
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 */
vfunc_get_request_mode(): Gtk.SizeRequestMode
vfunc_grab_broken_event(event: Gdk.EventGrabBroken): boolean
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
vfunc_grab_focus(): void
vfunc_grab_notify(was_grabbed: boolean): void
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
vfunc_hide(): void
vfunc_hierarchy_changed(previous_toplevel: Gtk.Widget): void
vfunc_key_press_event(event: Gdk.EventKey): boolean
vfunc_key_release_event(event: Gdk.EventKey): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 */
vfunc_keynav_failed(direction: Gtk.DirectionType): boolean
vfunc_leave_notify_event(event: Gdk.EventCrossing): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
vfunc_map(): void
vfunc_map_event(event: Gdk.EventAny): boolean
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 */
vfunc_mnemonic_activate(group_cycling: boolean): boolean
vfunc_motion_notify_event(event: Gdk.EventMotion): boolean
vfunc_move_focus(direction: Gtk.DirectionType): void
vfunc_parent_set(previous_parent: Gtk.Widget): void
vfunc_popup_menu(): boolean
vfunc_property_notify_event(event: Gdk.EventProperty): boolean
vfunc_proximity_in_event(event: Gdk.EventProximity): boolean
vfunc_proximity_out_event(event: Gdk.EventProximity): boolean
vfunc_query_tooltip(x: number, y: number, keyboard_tooltip: boolean, tooltip: Gtk.Tooltip): boolean
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
vfunc_queue_draw_region(region: cairo.Region): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
vfunc_realize(): void
vfunc_screen_changed(previous_screen: Gdk.Screen): void
vfunc_scroll_event(event: Gdk.EventScroll): boolean
vfunc_selection_clear_event(event: Gdk.EventSelection): boolean
vfunc_selection_get(selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_selection_notify_event(event: Gdk.EventSelection): boolean
vfunc_selection_received(selection_data: Gtk.SelectionData, time_: number): void
vfunc_selection_request_event(event: Gdk.EventSelection): boolean
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
vfunc_show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
vfunc_show_all(): void
vfunc_show_help(help_type: Gtk.WidgetHelpType): boolean
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
vfunc_size_allocate(allocation: Gtk.Allocation): void
vfunc_state_changed(previous_state: Gtk.StateType): void
vfunc_state_flags_changed(previous_state_flags: Gtk.StateFlags): void
vfunc_style_set(previous_style: Gtk.Style): void
vfunc_style_updated(): void
vfunc_touch_event(event: Gdk.EventTouch): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
vfunc_unmap(): void
vfunc_unmap_event(event: Gdk.EventAny): boolean
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
vfunc_unrealize(): void
vfunc_visibility_notify_event(event: Gdk.EventVisibility): boolean
vfunc_window_state_event(event: Gdk.EventWindowState): boolean
}

module DockTransientGrab {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
timeout: number;
    }

}

class DockTransientGrab extends GObject.Object {

    // Own properties of Dazzle.DockTransientGrab

    get timeout(): number;
    set timeout(val: number);

    // Constructors of Dazzle.DockTransientGrab


constructor(properties?: Partial<DockTransientGrab.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): DockTransientGrab;

    // Own methods of Dazzle.DockTransientGrab

    acquire(): void
    add_item(item: DockItem): void
    cancel(): void
    contains(item: DockItem): boolean
    get_timeout(): number
    is_descendant(widget: Gtk.Widget): boolean
    release(): void
    remove_item(item: DockItem): void
    set_timeout(timeout: number): void
    steal_common_ancestors(other: DockTransientGrab): void
}

module DockWidget {

    // Constructor properties interface

    interface ConstructorProps extends Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, DockItem.ConstructorProps, Gtk.Buildable.ConstructorProps {
can_close: boolean;
    canClose: boolean;
    gicon: Gio.Icon;
    icon_name: string;
    iconName: string;
    manager: DockManager;
    title: string;
    }

}

class DockWidget extends Bin implements Atk.ImplementorIface, DockItem, Gtk.Buildable {

    // Own properties of Dazzle.DockWidget

    get can_close(): boolean;
    set can_close(val: boolean);
    get canClose(): boolean;
    set canClose(val: boolean);
    get gicon(): Gio.Icon;
    set gicon(val: Gio.Icon);
    get icon_name(): string;
    set icon_name(val: string);
    get iconName(): string;
    set iconName(val: string);
    get manager(): DockManager;
    set manager(val: DockManager);
    get title(): string;
    set title(val: string);

    // Constructors of Dazzle.DockWidget


constructor(properties?: Partial<DockWidget.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): DockWidget;

    // Own methods of Dazzle.DockWidget

    set_gicon(gicon: Gio.Icon): void
    set_icon_name(icon_name: string): void
    set_title(title: string): void

// Inherited properties
get app_paintable(): boolean;
set app_paintable(val: boolean);
get appPaintable(): boolean;
set appPaintable(val: boolean);
get can_default(): boolean;
set can_default(val: boolean);
get canDefault(): boolean;
set canDefault(val: boolean);
get can_focus(): boolean;
set can_focus(val: boolean);
get canFocus(): boolean;
set canFocus(val: boolean);
get composite_child(): boolean;
get compositeChild(): boolean;
/**
 * Whether the widget is double buffered.
 */
get double_buffered(): boolean;
set double_buffered(val: boolean);
/**
 * Whether the widget is double buffered.
 */
get doubleBuffered(): boolean;
set doubleBuffered(val: boolean);
get events(): Gdk.EventMask;
set events(val: Gdk.EventMask);
/**
 * Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
 */
get expand(): boolean;
set expand(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focus_on_click(): boolean;
set focus_on_click(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focusOnClick(): boolean;
set focusOnClick(val: boolean);
/**
 * How to distribute horizontal space if widget gets extra space, see #GtkAlign
 */
get halign(): Gtk.Align;
set halign(val: Gtk.Align);
get has_default(): boolean;
set has_default(val: boolean);
get hasDefault(): boolean;
set hasDefault(val: boolean);
get has_focus(): boolean;
set has_focus(val: boolean);
get hasFocus(): boolean;
set hasFocus(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get has_tooltip(): boolean;
set has_tooltip(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get hasTooltip(): boolean;
set hasTooltip(val: boolean);
get height_request(): number;
set height_request(val: number);
get heightRequest(): number;
set heightRequest(val: number);
/**
 * Whether to expand horizontally. See gtk_widget_set_hexpand().
 */
get hexpand(): boolean;
set hexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpand_set(): boolean;
set hexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpandSet(): boolean;
set hexpandSet(val: boolean);
get is_focus(): boolean;
set is_focus(val: boolean);
get isFocus(): boolean;
set isFocus(val: boolean);
/**
 * Sets all four sides' margin at once. If read, returns max
 * margin on any side.
 */
get margin(): number;
set margin(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_bottom(): number;
set margin_bottom(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginBottom(): number;
set marginBottom(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_end(): number;
set margin_end(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginEnd(): number;
set marginEnd(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_left(): number;
set margin_left(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginLeft(): number;
set marginLeft(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_right(): number;
set margin_right(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginRight(): number;
set marginRight(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_start(): number;
set margin_start(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginStart(): number;
set marginStart(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_top(): number;
set margin_top(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginTop(): number;
set marginTop(val: number);
get name(): string;
set name(val: string);
get no_show_all(): boolean;
set no_show_all(val: boolean);
get noShowAll(): boolean;
set noShowAll(val: boolean);
/**
 * The requested opacity of the widget. See gtk_widget_set_opacity() for
 * more details about window opacity.
 * 
 * Before 3.8 this was only available in GtkWindow
 */
get opacity(): number;
set opacity(val: number);
get parent(): Gtk.Container;
set parent(val: Gtk.Container);
get receives_default(): boolean;
set receives_default(val: boolean);
get receivesDefault(): boolean;
set receivesDefault(val: boolean);
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scale_factor(): number;
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scaleFactor(): number;
get sensitive(): boolean;
set sensitive(val: boolean);
/**
 * The style of the widget, which contains information about how it will look (colors, etc).
 */
get style(): Gtk.Style;
set style(val: Gtk.Style);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_markup(): string;
set tooltip_markup(val: string);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipMarkup(): string;
set tooltipMarkup(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_text(): string;
set tooltip_text(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipText(): string;
set tooltipText(val: string);
/**
 * How to distribute vertical space if widget gets extra space, see #GtkAlign
 */
get valign(): Gtk.Align;
set valign(val: Gtk.Align);
/**
 * Whether to expand vertically. See gtk_widget_set_vexpand().
 */
get vexpand(): boolean;
set vexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpand_set(): boolean;
set vexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpandSet(): boolean;
set vexpandSet(val: boolean);
get visible(): boolean;
set visible(val: boolean);
get width_request(): number;
set width_request(val: number);
get widthRequest(): number;
set widthRequest(val: number);
/**
 * The widget's window if it is realized, %NULL otherwise.
 */
get window(): Gdk.Window;

// Inherited methods
adopt(child: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 * @returns %TRUE if the dock item was closed
 */
close(): boolean
/**
 * Emits the #DzlDockItem::presented signal.
 * 
 * Containers should emit this when their descendant has been presented as the
 * current visible child. This allows dock items to do lazy initialization of
 * content once the widgetry is visible to the user.
 * 
 * Currently, this is best effort, as there are a number of situations that
 * make covering all cases problematic.
 */
emit_presented(): void
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 * @returns %TRUE if the dock item can be closed by the user, otherwise %FALSE.
 */
get_can_close(): boolean
get_can_minimize(): boolean
get_child_visible(child: DockItem): boolean
get_child_visible(...args: never[]): any
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 * @returns A #DzlDockmanager.
 */
get_manager(): (DockManager | null)
/**
 * Gets the parent #DzlDockItem, or %NULL.
 * @returns A #DzlDockItem or %NULL.
 */
get_parent(): (DockItem | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_title(): (string | null)
has_widgets(): boolean
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 * @returns %TRUE if @child was minimized. Otherwise %FALSE and @position   may be updated to a suggested position.
 */
minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
needs_attention(): void
/**
 * This widget will walk the widget hierarchy to ensure that the
 * dock item is visible to the user.
 */
present(): void
present_child(child: DockItem): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 * @returns a #GIcon or %NULL
 */
ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
release(child: DockItem): void
set_child_visible(child: DockItem, child_visible: boolean): void
set_child_visible(...args: never[]): any
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
set_manager(manager?: (DockManager | null)): void
update_visibility(): void
vfunc_can_minimize(descendant: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 */
vfunc_close(): boolean
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 */
vfunc_get_can_close(): boolean
vfunc_get_child_visible(child: DockItem): boolean
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 */
vfunc_get_manager(): (DockManager | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_title(): (string | null)
vfunc_manager_set(old_manager: DockManager): void
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 */
vfunc_minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
vfunc_needs_attention(): void
vfunc_present_child(child: DockItem): void
vfunc_presented(): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 */
vfunc_ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
vfunc_release(child: DockItem): void
vfunc_set_child_visible(child: DockItem, child_visible: boolean): void
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
vfunc_set_manager(manager?: (DockManager | null)): void
vfunc_update_visibility(): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
/**
 * For widgets that can be “activated” (buttons, menu items, etc.)
 * this function activates them. Activation is what happens when you
 * press Enter on a widget during key navigation. If `widget` isn't
 * activatable, the function returns %FALSE.
 * @returns %TRUE if the widget was activatable
 */
activate(): boolean
/**
 * Installs an accelerator for this `widget` in `accel_group` that causes
 * `accel_signal` to be emitted if the accelerator is activated.
 * The `accel_group` needs to be added to the widget’s toplevel via
 * gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
 * Accelerators added through this function are not user changeable during
 * runtime. If you want to support accelerators that can be changed by the
 * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
 * gtk_menu_item_set_accel_path() instead.
 * @param accel_signal widget signal to emit on accelerator activation
 * @param accel_group accel group for this widget, added to its toplevel
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @param accel_flags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
 */
add_accelerator(accel_signal: string, accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): void
/**
 * Adds the device events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_device_events() for details.
 * @param device a #GdkDevice
 * @param events an event mask, see #GdkEventMask
 */
add_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Adds the events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_events() and the
 * [input handling overview][event-masks] for details.
 * @param events an event mask, see #GdkEventMask
 */
add_events(events: number): void
/**
 * Adds a widget to the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
 * list of mnemonic labels for the widget is cleared when the
 * widget is destroyed, so the caller must make sure to update
 * its internal state at this point as well, by using a connection
 * to the #GtkWidget::destroy signal or a weak notifier.
 * @param label a #GtkWidget that acts as a mnemonic label for @widget
 */
add_mnemonic_label(label: Gtk.Widget): void
/**
 * Queues an animation frame update and adds a callback to be called
 * before each frame. Until the tick callback is removed, it will be
 * called frequently (usually at the frame rate of the output device
 * or as quickly as the application can be repainted, whichever is
 * slower). For this reason, is most suitable for handling graphics
 * that change every frame or every few frames. The tick callback does
 * not automatically imply a relayout or repaint. If you want a
 * repaint or relayout, and aren’t changing widget properties that
 * would trigger that (for example, changing the text of a #GtkLabel),
 * then you will have to call gtk_widget_queue_resize() or
 * gtk_widget_queue_draw_area() yourself.
 * 
 * gdk_frame_clock_get_frame_time() should generally be used for timing
 * continuous animations and
 * gdk_frame_timings_get_predicted_presentation_time() if you are
 * trying to display isolated frames at particular times.
 * 
 * This is a more convenient alternative to connecting directly to the
 * #GdkFrameClock::update signal of #GdkFrameClock, since you don't
 * have to worry about when a #GdkFrameClock is assigned to a widget.
 * @param callback function to call for updating animations
 * @returns an id for the connection of this callback. Remove the callback     by passing it to gtk_widget_remove_tick_callback()
 */
add_tick_callback(callback: Gtk.TickCallback): number
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 * @returns %TRUE if the accelerator can be activated.
 */
can_activate_accel(signal_id: number): boolean
/**
 * This function is used by custom widget implementations; if you're
 * writing an app, you’d use gtk_widget_grab_focus() to move the focus
 * to a particular widget, and gtk_container_set_focus_chain() to
 * change the focus tab order. So you may want to investigate those
 * functions instead.
 * 
 * gtk_widget_child_focus() is called by containers as the user moves
 * around the window using keyboard shortcuts. `direction` indicates
 * what kind of motion is taking place (up, down, left, right, tab
 * forward, tab backward). gtk_widget_child_focus() emits the
 * #GtkWidget::focus signal; widgets override the default handler
 * for this signal in order to implement appropriate focus behavior.
 * 
 * The default ::focus handler for a widget should return %TRUE if
 * moving in `direction` left the focus on a focusable location inside
 * that widget, and %FALSE if moving in `direction` moved the focus
 * outside the widget. If returning %TRUE, widgets normally
 * call gtk_widget_grab_focus() to place the focus accordingly;
 * if returning %FALSE, they don’t modify the current focus location.
 * @param direction direction of focus movement
 * @returns %TRUE if focus ended up inside @widget
 */
child_focus(direction: Gtk.DirectionType): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
child_notify(child_property: string): void
child_notify(...args: never[]): any
/**
 * Same as gtk_widget_path(), but always uses the name of a widget’s type,
 * never uses a custom name set with gtk_widget_set_name().
 */
class_path(): [number, string, string]
/**
 * Computes whether a container should give this widget extra space
 * when possible. Containers should check this, rather than
 * looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
 * 
 * This function already checks whether the widget is visible, so
 * visibility does not need to be checked separately. Non-visible
 * widgets are not expanded.
 * 
 * The computed expand value uses either the expand setting explicitly
 * set on the widget itself, or, if none has been explicitly set,
 * the widget may expand if some of its children do.
 * @param orientation expand direction
 * @returns whether widget tree rooted here should be expanded
 */
compute_expand(orientation: Gtk.Orientation): boolean
/**
 * Creates a new #PangoContext with the appropriate font map,
 * font options, font description, and base direction for drawing
 * text for this widget. See also gtk_widget_get_pango_context().
 * @returns the new #PangoContext
 */
create_pango_context(): Pango.Context
/**
 * Creates a new #PangoLayout with the appropriate font map,
 * font description, and base direction for drawing text for
 * this widget.
 * 
 * If you keep a #PangoLayout created in this way around, you need
 * to re-create it when the widget #PangoContext is replaced.
 * This can be tracked by using the #GtkWidget::screen-changed signal
 * on the widget.
 * @param text text to set on the layout (can be %NULL)
 * @returns the new #PangoLayout
 */
create_pango_layout(text?: (string | null)): Pango.Layout
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
destroy(): void
/**
 * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
 * %NULL.  It’s intended to be used as a callback connected to the
 * “destroy” signal of a widget. You connect gtk_widget_destroyed()
 * as a signal handler, and pass the address of your widget variable
 * as user data. Then when the widget is destroyed, the variable will
 * be set to %NULL. Useful for example to avoid multiple copies
 * of the same dialog.
 * @param widget_pointer address of a variable that contains @widget
 */
destroyed(widget_pointer: Gtk.Widget): Gtk.Widget
/**
 * Returns %TRUE if `device` has been shadowed by a GTK+
 * device grab on another widget, so it would stop sending
 * events to `widget`. This may be used in the
 * #GtkWidget::grab-notify signal to check for specific
 * devices. See gtk_device_grab_add().
 * @param device a #GdkDevice
 * @returns %TRUE if there is an ongoing grab on @device          by another #GtkWidget than @widget.
 */
device_is_shadowed(device: Gdk.Device): boolean
/**
 * This function is equivalent to gtk_drag_begin_with_coordinates(),
 * passing -1, -1 as coordinates.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @returns the context for this drag
 */
drag_begin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: (Gdk.Event | null)): Gdk.DragContext
/**
 * Initiates a drag on the source side. The function only needs to be used
 * when the application is starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is %NULL, then %GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used to get information about the drag.
 * 
 * Generally there are three cases when you want to start a drag by hand by
 * calling this function:
 * 
 * 1. During a #GtkWidget::button-press-event handler, if you want to start a drag
 * immediately when the user presses the mouse button.  Pass the `event`
 * that you have in your #GtkWidget::button-press-event handler.
 * 
 * 2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
 * when the mouse moves past a certain threshold distance after a button-press.
 * Pass the `event` that you have in your #GtkWidget::motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).
 * If you really cannot pass a real event, pass %NULL instead.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @param x The initial x coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @param y The initial y coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @returns the context for this drag
 */
drag_begin_with_coordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: (Gdk.Event | null), x: number, y: number): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param start_x X coordinate of start of drag
 * @param start_y Y coordinate of start of drag
 * @param current_x current X coordinate
 * @param current_y current Y coordinate
 * @returns %TRUE if the drag threshold has been passed.
 */
drag_check_threshold(start_x: number, start_y: number, current_x: number, current_y: number): boolean
/**
 * Add the image targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_uri_targets(): void
/**
 * Looks for a match between the supported targets of `context` and the
 * `dest_target_list,` returning the first matching target, otherwise
 * returning %GDK_NONE. `dest_target_list` should usually be the return
 * value from gtk_drag_dest_get_target_list(), but some widgets may
 * have different valid targets for different parts of the widget; in
 * that case, they will have to implement a drag_motion handler that
 * passes the correct target list to this function.
 * @param context drag context
 * @param target_list list of droppable targets, or %NULL to use    gtk_drag_dest_get_target_list (@widget).
 * @returns first target that the source offers     and the dest can accept, or %GDK_NONE
 */
drag_dest_find_target(context: Gdk.DragContext, target_list?: (Gtk.TargetList | null)): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_dest_get_target_list(): (Gtk.TargetList | null)
/**
 * Returns whether the widget has been configured to always
 * emit #GtkWidget::drag-motion signals.
 * @returns %TRUE if the widget always emits   #GtkWidget::drag-motion events
 */
drag_dest_get_track_motion(): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget’s drag-and-drop signals
 * (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget’s #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget::drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget::drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There’s no way to set a default action here, you can use the
 * #GtkWidget::drag-motion callback for that. Here’s an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * 
 * ```c
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of     #GtkTargetEntrys indicating the drop types that this @widget will     accept, or %NULL. Later you can access the list with     gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this @widget.
 */
drag_dest_set(flags: Gtk.DestDefaults, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets this widget as a proxy for drops to another window.
 * @param proxy_window the window to which to forward drag events
 * @param protocol the drag protocol which the @proxy_window accepts   (You can use gdk_drag_get_protocol() to determine this)
 * @param use_coordinates If %TRUE, send the same coordinates to the   destination, because it is an embedded   subwindow.
 */
drag_dest_set_proxy(proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param target_list list of droppable targets, or %NULL for none
 */
drag_dest_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Tells the widget to emit #GtkWidget::drag-motion and
 * #GtkWidget::drag-leave events regardless of the targets and the
 * %GTK_DEST_DEFAULT_MOTION flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param track_motion whether to accept all targets
 */
drag_dest_set_track_motion(track_motion: boolean): void
/**
 * Clears information about a drop destination set with
 * gtk_drag_dest_set(). The widget will no longer receive
 * notification of drags.
 */
drag_dest_unset(): void
/**
 * Gets the data associated with a drag. When the data
 * is received or the retrieval fails, GTK+ will emit a
 * #GtkWidget::drag-data-received signal. Failure of the retrieval
 * is indicated by the length field of the `selection_data`
 * signal parameter being negative. However, when gtk_drag_get_data()
 * is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
 * then the widget will not receive notification of failed
 * drops.
 * @param context the drag context
 * @param target the target (form of the data) to retrieve
 * @param time_ a timestamp for retrieving the data. This will   generally be the time received in a #GtkWidget::drag-motion   or #GtkWidget::drag-drop signal
 */
drag_get_data(context: Gdk.DragContext, target: Gdk.Atom, time_: number): void
/**
 * Highlights a widget as a currently hovered drop target.
 * To end the highlight, call gtk_drag_unhighlight().
 * GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
 */
drag_highlight(): void
/**
 * Add the writable image targets supported by #GtkSelectionData to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_uri_targets(): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_source_get_target_list(): (Gtk.TargetList | null)
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param start_button_mask the bitmask of buttons that can start the drag
 * @param targets the table of targets     that the drag will support, may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
drag_source_set(start_button_mask: Gdk.ModifierType, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to `icon`. See the docs for #GtkIconTheme for more details.
 * @param icon A #GIcon
 */
drag_source_set_icon_gicon(icon: Gio.Icon): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param icon_name name of icon to use
 */
drag_source_set_icon_name(icon_name: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
drag_source_set_icon_pixbuf(pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param stock_id the ID of the stock icon to use
 */
drag_source_set_icon_stock(stock_id: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param target_list list of draggable targets, or %NULL for none
 */
drag_source_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Undoes the effects of gtk_drag_source_set().
 */
drag_source_unset(): void
/**
 * Removes a highlight set by gtk_drag_highlight() from
 * a widget.
 */
drag_unhighlight(): void
/**
 * Draws `widget` to `cr`. The top left corner of the widget will be
 * drawn to the currently set origin point of `cr`.
 * 
 * You should pass a cairo context as `cr` argument that is in an
 * original state. Otherwise the resulting drawing is undefined. For
 * example changing the operator using cairo_set_operator() or the
 * line width using cairo_set_line_width() might have unwanted side
 * effects.
 * You may however change the context’s transform matrix - like with
 * cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
 * region with cairo_clip() prior to calling this function. Also, it
 * is fine to modify the context with cairo_save() and
 * cairo_push_group() prior to calling this function.
 * 
 * Note that special-purpose widgets may contain special code for
 * rendering to the screen and might appear differently on screen
 * and when rendered using gtk_widget_draw().
 * @param cr a cairo context to draw to
 */
draw(cr: cairo.Context): void
/**
 * Ensures that `widget` has a style (`widget->`style).
 * 
 * Not a very useful function; most of the time, if you
 * want the style, the widget is realized, and realized
 * widgets are guaranteed to have a style already.
 */
ensure_style(): void
/**
 * Notifies the user about an input-related error on this widget.
 * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
 * gdk_window_beep(), otherwise it does nothing.
 * 
 * Note that the effect of gdk_window_beep() can be configured in many
 * ways, depending on the windowing backend and the desktop environment
 * or window manager that is used.
 */
error_bell(): void
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 * @returns return from the event signal emission (%TRUE if               the event was handled)
 */
event(event: Gdk.Event): boolean
/**
 * Stops emission of #GtkWidget::child-notify signals on `widget`. The
 * signals are queued until gtk_widget_thaw_child_notify() is called
 * on `widget`.
 * 
 * This is the analogue of g_object_freeze_notify() for child properties.
 */
freeze_child_notify(): void
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 * @returns the #AtkObject associated with @widget
 */
get_accessible(): Atk.Object
/**
 * Retrieves the #GActionGroup that was registered using `prefix`. The resulting
 * #GActionGroup may have been registered to `widget` or any #GtkWidget in its
 * ancestry.
 * 
 * If no action group was found matching `prefix,` then %NULL is returned.
 * @param prefix The “prefix” of the action group.
 * @returns A #GActionGroup or %NULL.
 */
get_action_group(prefix: string): (Gio.ActionGroup | null)
/**
 * Returns the baseline that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function, and when allocating child
 * widgets in #GtkWidget::size_allocate.
 * @returns the baseline of the @widget, or -1 if none
 */
get_allocated_baseline(): number
/**
 * Returns the height that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the height of the @widget
 */
get_allocated_height(): number
/**
 * Retrieves the widget’s allocated size.
 * 
 * This function returns the last values passed to
 * gtk_widget_size_allocate_with_baseline(). The value differs from
 * the size returned in gtk_widget_get_allocation() in that functions
 * like gtk_widget_set_halign() can adjust the allocation, but not
 * the value returned by this function.
 * 
 * If a widget is not visible, its allocated size is 0.
 */
get_allocated_size(): [Gtk.Allocation, number]
/**
 * Returns the width that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the width of the @widget
 */
get_allocated_width(): number
/**
 * Retrieves the widget’s allocation.
 * 
 * Note, when implementing a #GtkContainer: a widget’s allocation will
 * be its “adjusted” allocation, that is, the widget’s parent
 * container typically calls gtk_widget_size_allocate() with an
 * allocation, and that allocation is then adjusted (to handle margin
 * and alignment for example) before assignment to the widget.
 * gtk_widget_get_allocation() returns the adjusted allocation that
 * was actually assigned to the widget. The adjusted allocation is
 * guaranteed to be completely contained within the
 * gtk_widget_size_allocate() allocation, however. So a #GtkContainer
 * is guaranteed that its children stay inside the assigned bounds,
 * but not that they have exactly the bounds the container assigned.
 * There is no way to get the original allocation assigned by
 * gtk_widget_size_allocate(), since it isn’t stored; if a container
 * implementation needs that information it will have to track it itself.
 */
get_allocation(): Gtk.Allocation
/**
 * Gets the first ancestor of `widget` with type `widget_type`. For example,
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
 * the first #GtkBox that’s an ancestor of `widget`. No reference will be
 * added to the returned widget; it should not be unreferenced. See note
 * about checking for a toplevel #GtkWindow in the docs for
 * gtk_widget_get_toplevel().
 * 
 * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
 * considers `widget` to be an ancestor of itself.
 * @param widget_type ancestor type
 * @returns the ancestor widget, or %NULL if not found
 */
get_ancestor(widget_type: GObject.GType): (Gtk.Widget | null)
/**
 * Determines whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * See gtk_widget_set_app_paintable()
 * @returns %TRUE if the widget is app paintable
 */
get_app_paintable(): boolean
/**
 * Determines whether `widget` can be a default widget. See
 * gtk_widget_set_can_default().
 * @returns %TRUE if @widget can be a default widget, %FALSE otherwise
 */
get_can_default(): boolean
/**
 * Determines whether `widget` can own the input focus. See
 * gtk_widget_set_can_focus().
 * @returns %TRUE if @widget can own the input focus, %FALSE otherwise
 */
get_can_focus(): boolean
/**
 * This function is only for use in widget implementations. Obtains
 * `widget->`requisition, unless someone has forced a particular
 * geometry on the widget (e.g. with gtk_widget_set_size_request()),
 * in which case it returns that geometry instead of the widget's
 * requisition.
 * 
 * This function differs from gtk_widget_size_request() in that
 * it retrieves the last size request value from `widget->`requisition,
 * while gtk_widget_size_request() actually calls the "size_request" method
 * on `widget` to compute the size request and fill in `widget->`requisition,
 * and only then returns `widget->`requisition.
 * 
 * Because this function does not call the “size_request” method, it
 * can only be used when you know that `widget->`requisition is
 * up-to-date, that is, gtk_widget_size_request() has been called
 * since the last time a resize was queued. In general, only container
 * implementations have this information; applications should use
 * gtk_widget_size_request().
 */
get_child_requisition(): Gtk.Requisition
/**
 * Retrieves the widget’s clip area.
 * 
 * The clip area is the area in which all of `widget'`s drawing will
 * happen. Other toolkits call it the bounding box.
 * 
 * Historically, in GTK+ the clip area has been equal to the allocation
 * retrieved via gtk_widget_get_allocation().
 */
get_clip(): Gtk.Allocation
/**
 * Returns the clipboard object for the given selection to
 * be used with `widget`. `widget` must have a #GdkDisplay
 * associated with it, so must be attached to a toplevel
 * window.
 * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
 * @returns the appropriate clipboard object. If no             clipboard already exists, a new one will             be created. Once a clipboard object has             been created, it is persistent for all time.
 */
get_clipboard(selection: Gdk.Atom): Gtk.Clipboard
/**
 * Obtains the composite name of a widget.
 * @returns the composite name of @widget, or %NULL if @widget is not   a composite child. The string should be freed when it is no   longer needed.
 */
get_composite_name(): string
/**
 * Returns whether `device` can interact with `widget` and its
 * children. See gtk_widget_set_device_enabled().
 * @param device a #GdkDevice
 * @returns %TRUE is @device is enabled for @widget
 */
get_device_enabled(device: Gdk.Device): boolean
/**
 * Returns the events mask for the widget corresponding to an specific device. These
 * are the events that the widget will receive when `device` operates on it.
 * @param device a #GdkDevice
 * @returns device event mask for @widget
 */
get_device_events(device: Gdk.Device): Gdk.EventMask
/**
 * Gets the reading direction for a particular widget. See
 * gtk_widget_set_direction().
 * @returns the reading direction for the widget.
 */
get_direction(): Gtk.TextDirection
/**
 * Get the #GdkDisplay for the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow at the top.
 * 
 * In general, you should only create display specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkDisplay for the toplevel for this widget.
 */
get_display(): Gdk.Display
/**
 * Determines whether the widget is double buffered.
 * 
 * See gtk_widget_set_double_buffered()
 * @returns %TRUE if the widget is double buffered
 */
get_double_buffered(): boolean
/**
 * Returns the event mask (see #GdkEventMask) for the widget. These are the
 * events that the widget will receive.
 * 
 * Note: Internally, the widget event mask will be the logical OR of the event
 * mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
 * event mask necessary to cater for every #GtkEventController created for the
 * widget.
 * @returns event mask for @widget
 */
get_events(): number
/**
 * Returns whether the widget should grab focus when it is clicked with the mouse.
 * See gtk_widget_set_focus_on_click().
 * @returns %TRUE if the widget should grab focus when it is clicked with               the mouse.
 */
get_focus_on_click(): boolean
/**
 * Gets the font map that has been set with gtk_widget_set_font_map().
 * @returns A #PangoFontMap, or %NULL
 */
get_font_map(): (Pango.FontMap | null)
/**
 * Returns the #cairo_font_options_t used for Pango rendering. When not set,
 * the defaults font options for the #GdkScreen will be used.
 * @returns the #cairo_font_options_t or %NULL if not set
 */
get_font_options(): (cairo.FontOptions | null)
/**
 * Obtains the frame clock for a widget. The frame clock is a global
 * “ticker” that can be used to drive animations and repaints.  The
 * most common reason to get the frame clock is to call
 * gdk_frame_clock_get_frame_time(), in order to get a time to use for
 * animating. For example you might record the start of the animation
 * with an initial value from gdk_frame_clock_get_frame_time(), and
 * then update the animation by calling
 * gdk_frame_clock_get_frame_time() again during each repaint.
 * 
 * gdk_frame_clock_request_phase() will result in a new frame on the
 * clock, but won’t necessarily repaint any widgets. To repaint a
 * widget, you have to use gtk_widget_queue_draw() which invalidates
 * the widget (thus scheduling it to receive a draw on the next
 * frame). gtk_widget_queue_draw() will also end up requesting a frame
 * on the appropriate frame clock.
 * 
 * A widget’s frame clock will not change while the widget is
 * mapped. Reparenting a widget (which implies a temporary unmap) can
 * change the widget’s frame clock.
 * 
 * Unrealized widgets do not have a frame clock.
 * @returns a #GdkFrameClock, or %NULL if widget is unrealized
 */
get_frame_clock(): (Gdk.FrameClock | null)
/**
 * Gets the value of the #GtkWidget:halign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
 * alignment.
 * @returns the horizontal alignment of @widget
 */
get_halign(): Gtk.Align
/**
 * Returns the current value of the has-tooltip property.  See
 * #GtkWidget:has-tooltip for more information.
 * @returns current value of has-tooltip on @widget.
 */
get_has_tooltip(): boolean
/**
 * Determines whether `widget` has a #GdkWindow of its own. See
 * gtk_widget_set_has_window().
 * @returns %TRUE if @widget has a window, %FALSE otherwise
 */
get_has_window(): boolean
/**
 * Gets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Containers should use gtk_widget_compute_expand() rather than
 * this function, to see whether a widget, or any of its children,
 * has the expand flag set. If any child of a widget wants to
 * expand, the parent may ask to expand also.
 * 
 * This function only looks at the widget’s own hexpand flag, rather
 * than computing whether the entire widget tree rooted at this widget
 * wants to expand.
 * @returns whether hexpand flag is set
 */
get_hexpand(): boolean
/**
 * Gets whether gtk_widget_set_hexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @returns whether hexpand has been explicitly set
 */
get_hexpand_set(): boolean
/**
 * Whether the widget is mapped.
 * @returns %TRUE if the widget is mapped, %FALSE otherwise.
 */
get_mapped(): boolean
/**
 * Gets the value of the #GtkWidget:margin-bottom property.
 * @returns The bottom margin of @widget
 */
get_margin_bottom(): number
/**
 * Gets the value of the #GtkWidget:margin-end property.
 * @returns The end margin of @widget
 */
get_margin_end(): number
/**
 * Gets the value of the #GtkWidget:margin-left property.
 * @returns The left margin of @widget
 */
get_margin_left(): number
/**
 * Gets the value of the #GtkWidget:margin-right property.
 * @returns The right margin of @widget
 */
get_margin_right(): number
/**
 * Gets the value of the #GtkWidget:margin-start property.
 * @returns The start margin of @widget
 */
get_margin_start(): number
/**
 * Gets the value of the #GtkWidget:margin-top property.
 * @returns The top margin of @widget
 */
get_margin_top(): number
/**
 * Returns the modifier mask the `widget’`s windowing system backend
 * uses for a particular purpose.
 * 
 * See gdk_keymap_get_modifier_mask().
 * @param intent the use case for the modifier mask
 * @returns the modifier mask used for @intent.
 */
get_modifier_mask(intent: Gdk.ModifierIntent): Gdk.ModifierType
/**
 * Returns the current modifier style for the widget. (As set by
 * gtk_widget_modify_style().) If no style has previously set, a new
 * #GtkRcStyle will be created with all values unset, and set as the
 * modifier style for the widget. If you make changes to this rc
 * style, you must call gtk_widget_modify_style(), passing in the
 * returned rc style, to make sure that your changes take effect.
 * 
 * Caution: passing the style back to gtk_widget_modify_style() will
 * normally end up destroying it, because gtk_widget_modify_style() copies
 * the passed-in style and sets the copy as the new modifier style,
 * thus dropping any reference to the old modifier style. Add a reference
 * to the modifier style if you want to keep it alive.
 * @returns the modifier style for the widget.     This rc style is owned by the widget. If you want to keep a     pointer to value this around, you must add a refcount using     g_object_ref().
 */
get_modifier_style(): Gtk.RcStyle
/**
 * Retrieves the name of a widget. See gtk_widget_set_name() for the
 * significance of widget names.
 * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
 */
get_name(): string
/**
 * Returns the current value of the #GtkWidget:no-show-all property,
 * which determines whether calls to gtk_widget_show_all()
 * will affect this widget.
 * @returns the current value of the “no-show-all” property.
 */
get_no_show_all(): boolean
/**
 * Fetches the requested opacity for this widget.
 * See gtk_widget_set_opacity().
 * @returns the requested opacity for this widget.
 */
get_opacity(): number
/**
 * Gets a #PangoContext with the appropriate font map, font description,
 * and base direction for this widget. Unlike the context returned
 * by gtk_widget_create_pango_context(), this context is owned by
 * the widget (it can be used until the screen for the widget changes
 * or the widget is removed from its toplevel), and will be updated to
 * match any changes to the widget’s attributes. This can be tracked
 * by using the #GtkWidget::screen-changed signal on the widget.
 * @returns the #PangoContext for the widget.
 */
get_pango_context(): Pango.Context
/**
 * Gets `widget’`s parent window, or %NULL if it does not have one.
 * @returns the parent window of @widget, or %NULL if it does not have a parent window.
 */
get_parent_window(): (Gdk.Window | null)
/**
 * Returns the #GtkWidgetPath representing `widget,` if the widget
 * is not connected to a toplevel widget, a partial path will be
 * created.
 * @returns The #GtkWidgetPath representing @widget
 */
get_path(): Gtk.WidgetPath
/**
 * Obtains the location of the mouse pointer in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(); and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 */
get_pointer(): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves the minimum and natural size of a widget, taking
 * into account the widget’s preference for height-for-width management.
 * 
 * This is used to retrieve a suitable size by container widgets which do
 * not impose any restrictions on the child placement. It can be used
 * to deduce toplevel window and menu sizes as well as child widgets in
 * free-form containers such as GtkLayout.
 * 
 * Handle with care. Note that the natural height of a height-for-width
 * widget will generally be a smaller size than the minimum height, since the required
 * height for the natural width is generally smaller than the required height for
 * the minimum width.
 * 
 * Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
 * baseline alignment.
 */
get_preferred_size(): [Gtk.Requisition | null, Gtk.Requisition | null]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
get_preferred_width_for_height(height: number): [number, number]
/**
 * Determines whether `widget` is realized.
 * @returns %TRUE if @widget is realized, %FALSE otherwise
 */
get_realized(): boolean
/**
 * Determines whether `widget` is always treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_set_receives_default().
 * @returns %TRUE if @widget acts as the default widget when focused,               %FALSE otherwise
 */
get_receives_default(): boolean
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 * @returns The #GtkSizeRequestMode preferred by @widget.
 */
get_request_mode(): Gtk.SizeRequestMode
/**
 * Retrieves the widget’s requisition.
 * 
 * This function should only be used by widget implementations in
 * order to figure whether the widget’s requisition has actually
 * changed after some internal state change (so that they can call
 * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
 * 
 * Normally, gtk_widget_size_request() should be used.
 */
get_requisition(): Gtk.Requisition
/**
 * Get the root window where this widget is located. This function can
 * only be called after the widget has been added to a widget
 * hierarchy with #GtkWindow at the top.
 * 
 * The root window is useful for such purposes as creating a popup
 * #GdkWindow associated with the window. In general, you should only
 * create display specific resources when a widget has been realized,
 * and you should free those resources when the widget is unrealized.
 * @returns the #GdkWindow root window for the toplevel for this widget.
 */
get_root_window(): Gdk.Window
/**
 * Retrieves the internal scale factor that maps from window coordinates
 * to the actual device pixels. On traditional systems this is 1, on
 * high density outputs, it can be a higher value (typically 2).
 * 
 * See gdk_window_get_scale_factor().
 * @returns the scale factor for @widget
 */
get_scale_factor(): number
/**
 * Get the #GdkScreen from the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow
 * at the top.
 * 
 * In general, you should only create screen specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkScreen for the toplevel for this widget.
 */
get_screen(): Gdk.Screen
/**
 * Returns the widget’s sensitivity (in the sense of returning
 * the value that has been set using gtk_widget_set_sensitive()).
 * 
 * The effective sensitivity of a widget is however determined by both its
 * own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
 * @returns %TRUE if the widget is sensitive
 */
get_sensitive(): boolean
/**
 * Gets the settings object holding the settings used for this widget.
 * 
 * Note that this function can only be called when the #GtkWidget
 * is attached to a toplevel, since the settings object is specific
 * to a particular #GdkScreen.
 * @returns the relevant #GtkSettings object
 */
get_settings(): Gtk.Settings
/**
 * Gets the size request that was explicitly set for the widget using
 * gtk_widget_set_size_request(). A value of -1 stored in `width` or
 * `height` indicates that that dimension has not been set explicitly
 * and the natural requisition of the widget will be used instead. See
 * gtk_widget_set_size_request(). To get the size a widget will
 * actually request, call gtk_widget_get_preferred_size() instead of
 * this function.
 */
get_size_request(): [number, number]
/**
 * Returns the widget’s state. See gtk_widget_set_state().
 * @returns the state of @widget.
 */
get_state(): Gtk.StateType
/**
 * Returns the widget state as a flag set. It is worth mentioning
 * that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
 * returned, that is, also based on parent insensitivity, even if
 * `widget` itself is sensitive.
 * 
 * Also note that if you are looking for a way to obtain the
 * #GtkStateFlags to pass to a #GtkStyleContext method, you
 * should look at gtk_style_context_get_state().
 * @returns The state flags for widget
 */
get_state_flags(): Gtk.StateFlags
/**
 * Simply an accessor function that returns `widget->`style.
 * @returns the widget’s #GtkStyle
 */
get_style(): Gtk.Style
/**
 * Returns the style context associated to `widget`. The returned object is
 * guaranteed to be the same for the lifetime of `widget`.
 * @returns a #GtkStyleContext. This memory is owned by @widget and          must not be freed.
 */
get_style_context(): Gtk.StyleContext
/**
 * Returns %TRUE if `widget` is multiple pointer aware. See
 * gtk_widget_set_support_multidevice() for more information.
 * @returns %TRUE if @widget is multidevice aware.
 */
get_support_multidevice(): boolean
/**
 * Fetch an object build from the template XML for `widget_type` in this `widget` instance.
 * 
 * This will only report children which were previously declared with
 * gtk_widget_class_bind_template_child_full() or one of its
 * variants.
 * 
 * This function is only meant to be called for code which is private to the `widget_type` which
 * declared the child and is meant for language bindings which cannot easily make use
 * of the GObject structure offsets.
 * @param widget_type The #GType to get a template child for
 * @param name The “id” of the child defined in the template XML
 * @returns The object built in the template XML with the id @name
 */
get_template_child<T = GObject.Object>(widget_type: GObject.GType, name: string): T
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_markup(): (string | null)
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_text(): (string | null)
/**
 * Returns the #GtkWindow of the current tooltip. This can be the
 * GtkWindow created by default, or the custom tooltip window set
 * using gtk_widget_set_tooltip_window().
 * @returns The #GtkWindow of the current tooltip.
 */
get_tooltip_window(): Gtk.Window
/**
 * This function returns the topmost widget in the container hierarchy
 * `widget` is a part of. If `widget` has no parent widgets, it will be
 * returned as the topmost widget. No reference will be added to the
 * returned widget; it should not be unreferenced.
 * 
 * Note the difference in behavior vs. gtk_widget_get_ancestor();
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
 * would return
 * %NULL if `widget` wasn’t inside a toplevel window, and if the
 * window was inside a #GtkWindow-derived widget which was in turn
 * inside the toplevel #GtkWindow. While the second case may
 * seem unlikely, it actually happens when a #GtkPlug is embedded
 * inside a #GtkSocket within the same application.
 * 
 * To reliably find the toplevel #GtkWindow, use
 * gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
 * on the result. For instance, to get the title of a widget's toplevel
 * window, one might use:
 * 
 * ```c
 * static const char *
 * get_widget_toplevel_title (GtkWidget *widget)
 * {
 *   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 *   if (GTK_IS_WINDOW (toplevel))
 *     {
 *       return gtk_window_get_title (GTK_WINDOW (toplevel));
 *     }
 * 
 *   return NULL;
 * }
 * ```
 * 
 * @returns the topmost ancestor of @widget, or @widget itself    if there’s no ancestor.
 */
get_toplevel(): Gtk.Widget
/**
 * Gets the value of the #GtkWidget:valign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. If your widget want to support baseline aligned
 * children it must use gtk_widget_get_valign_with_baseline(), or
 * `g_object_get (widget, "valign", &value, NULL)`, which will
 * also report the true value.
 * @returns the vertical alignment of @widget, ignoring baseline alignment
 */
get_valign(): Gtk.Align
/**
 * Gets the value of the #GtkWidget:valign property, including
 * %GTK_ALIGN_BASELINE.
 * @returns the vertical alignment of @widget
 */
get_valign_with_baseline(): Gtk.Align
/**
 * Gets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_get_hexpand() for more detail.
 * @returns whether vexpand flag is set
 */
get_vexpand(): boolean
/**
 * Gets whether gtk_widget_set_vexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * See gtk_widget_get_hexpand_set() for more detail.
 * @returns whether vexpand has been explicitly set
 */
get_vexpand_set(): boolean
/**
 * Determines whether the widget is visible. If you want to
 * take into account whether the widget’s parent is also marked as
 * visible, use gtk_widget_is_visible() instead.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See gtk_widget_set_visible().
 * @returns %TRUE if the widget is visible
 */
get_visible(): boolean
/**
 * Gets the visual that will be used to render `widget`.
 * @returns the visual for @widget
 */
get_visual(): Gdk.Visual
/**
 * Returns the widget’s window if it is realized, %NULL otherwise
 * @returns @widget’s window.
 */
get_window(): (Gdk.Window | null)
/**
 * Makes `widget` the current grabbed widget.
 * 
 * This means that interaction with other widgets in the same
 * application is blocked and mouse as well as keyboard events
 * are delivered to this widget.
 * 
 * If `widget` is not sensitive, it is not set as the current
 * grabbed widget and this function does nothing.
 */
grab_add(): void
/**
 * Causes `widget` to become the default widget. `widget` must be able to be
 * a default widget; typically you would ensure this yourself
 * by calling gtk_widget_set_can_default() with a %TRUE value.
 * The default widget is activated when
 * the user presses Enter in a window. Default widgets must be
 * activatable, that is, gtk_widget_activate() should affect them. Note
 * that #GtkEntry widgets require the “activates-default” property
 * set to %TRUE before they activate the default widget when Enter
 * is pressed and the #GtkEntry is focused.
 */
grab_default(): void
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
grab_focus(): void
/**
 * Removes the grab from the given widget.
 * 
 * You have to pair calls to gtk_grab_add() and gtk_grab_remove().
 * 
 * If `widget` does not have the grab, this function does nothing.
 */
grab_remove(): void
/**
 * Determines whether the widget is currently grabbing events, so it
 * is the only widget receiving input events (keyboard and mouse).
 * 
 * See also gtk_grab_add().
 * @returns %TRUE if the widget is in the grab_widgets stack
 */
has_grab(): boolean
/**
 * Determines if the widget style has been looked up through the rc mechanism.
 * @returns %TRUE if the widget has been looked up through the rc   mechanism, %FALSE otherwise.
 */
has_rc_style(): boolean
/**
 * Checks whether there is a #GdkScreen is associated with
 * this widget. All toplevel widgets have an associated
 * screen, and all widgets added into a hierarchy with a toplevel
 * window at the top.
 * @returns %TRUE if there is a #GdkScreen associated   with the widget.
 */
has_screen(): boolean
/**
 * Determines if the widget should show a visible indication that
 * it has the global input focus. This is a convenience function for
 * use in ::draw handlers that takes into account whether focus
 * indication should currently be shown in the toplevel window of
 * `widget`. See gtk_window_get_focus_visible() for more information
 * about focus indication.
 * 
 * To find out if the widget has the global input focus, use
 * gtk_widget_has_focus().
 * @returns %TRUE if the widget should display a “focus rectangle”
 */
has_visible_focus(): boolean
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
hide(): void
/**
 * Utility function; intended to be connected to the #GtkWidget::delete-event
 * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
 * argument, then returns %TRUE. If connected to ::delete-event, the
 * result is that clicking the close button for a window (on the
 * window frame, top right corner usually) will hide but not destroy
 * the window. By default, GTK+ destroys windows when ::delete-event
 * is received.
 * @returns %TRUE
 */
hide_on_delete(): boolean
/**
 * Returns whether the widget is currently being destroyed.
 * This information can sometimes be used to avoid doing
 * unnecessary work.
 * @returns %TRUE if @widget is being destroyed
 */
in_destruction(): boolean
/**
 * Creates and initializes child widgets defined in templates. This
 * function must be called in the instance initializer for any
 * class which assigned itself a template using gtk_widget_class_set_template()
 * 
 * It is important to call this function in the instance initializer
 * of a #GtkWidget subclass and not in #GObject.constructed() or
 * #GObject.constructor() for two reasons.
 * 
 * One reason is that generally derived widgets will assume that parent
 * class composite widgets have been created in their instance
 * initializers.
 * 
 * Another reason is that when calling g_object_new() on a widget with
 * composite templates, it’s important to build the composite widgets
 * before the construct properties are set. Properties passed to g_object_new()
 * should take precedence over properties set in the private template XML.
 */
init_template(): void
/**
 * Sets an input shape for this widget’s GDK window. This allows for
 * windows which react to mouse click in a nonrectangular region, see
 * gdk_window_input_shape_combine_region() for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
input_shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Inserts `group` into `widget`. Children of `widget` that implement
 * #GtkActionable can then be associated with actions in `group` by
 * setting their “action-name” to
 * `prefix`.`action-name`.
 * 
 * If `group` is %NULL, a previously inserted group for `name` is removed
 * from `widget`.
 * @param name the prefix for actions in @group
 * @param group a #GActionGroup, or %NULL
 */
insert_action_group(name: string, group?: (Gio.ActionGroup | null)): void
/**
 * Computes the intersection of a `widget’`s area and `area,` storing
 * the intersection in `intersection,` and returns %TRUE if there was
 * an intersection.  `intersection` may be %NULL if you’re only
 * interested in whether there was an intersection.
 * @param area a rectangle
 * @returns %TRUE if there was an intersection
 */
intersect(area: Gdk.Rectangle): [boolean, Gdk.Rectangle | null]
/**
 * Determines whether `widget` is somewhere inside `ancestor,` possibly with
 * intermediate containers.
 * @param ancestor another #GtkWidget
 * @returns %TRUE if @ancestor contains @widget as a child,    grandchild, great grandchild, etc.
 */
is_ancestor(ancestor: Gtk.Widget): boolean
/**
 * Whether `widget` can rely on having its alpha channel
 * drawn correctly. On X11 this function returns whether a
 * compositing manager is running for `widget’`s screen.
 * 
 * Please note that the semantics of this call will change
 * in the future if used on a widget that has a composited
 * window in its hierarchy (as set by gdk_window_set_composited()).
 * @returns %TRUE if the widget can rely on its alpha channel being drawn correctly.
 */
is_composited(): boolean
/**
 * Determines whether `widget` can be drawn to. A widget can be drawn
 * to if it is mapped and visible.
 * @returns %TRUE if @widget is drawable, %FALSE otherwise
 */
is_drawable(): boolean
/**
 * Returns the widget’s effective sensitivity, which means
 * it is sensitive itself and also its parent widget is sensitive
 * @returns %TRUE if the widget is effectively sensitive
 */
is_sensitive(): boolean
/**
 * Determines whether `widget` is a toplevel widget.
 * 
 * Currently only #GtkWindow and #GtkInvisible (and out-of-process
 * #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
 * widget.
 * @returns %TRUE if @widget is a toplevel, %FALSE otherwise
 */
is_toplevel(): boolean
/**
 * Determines whether the widget and all its parents are marked as
 * visible.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See also gtk_widget_get_visible() and gtk_widget_set_visible()
 * @returns %TRUE if the widget and all its parents are visible
 */
is_visible(): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 * @returns %TRUE if stopping keyboard navigation is fine, %FALSE               if the emitting widget should try to handle the keyboard               navigation attempt in its parent container(s).
 */
keynav_failed(direction: Gtk.DirectionType): boolean
/**
 * Lists the closures used by `widget` for accelerator group connections
 * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
 * The closures can be used to monitor accelerator changes on `widget,`
 * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
 * #GtkAccelGroup of a closure which can be found out with
 * gtk_accel_group_from_accel_closure().
 * @returns a newly allocated #GList of closures
 */
list_accel_closures(): GObject.Closure[]
/**
 * Retrieves a %NULL-terminated array of strings containing the prefixes of
 * #GActionGroup's available to `widget`.
 * @returns a %NULL-terminated array of strings.
 */
list_action_prefixes(): string[]
/**
 * Returns a newly allocated list of the widgets, normally labels, for
 * which this widget is the target of a mnemonic (see for example,
 * gtk_label_set_mnemonic_widget()).
 * 
 * The widgets in the list are not individually referenced. If you
 * want to iterate through the list and perform actions involving
 * callbacks that might destroy the widgets, you
 * must call `g_list_foreach (result,
 * (GFunc)g_object_ref, NULL)` first, and then unref all the
 * widgets afterwards.
 * @returns the list of  mnemonic labels; free this list  with g_list_free() when you are done with it.
 */
list_mnemonic_labels(): Gtk.Widget[]
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
map(): void
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 * @returns %TRUE if the signal has been handled
 */
mnemonic_activate(group_cycling: boolean): boolean
/**
 * Sets the base color for a widget in a particular state.
 * All other style values are left untouched. The base color
 * is the background color used along with the text color
 * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
 * and #GtkTextView. See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > base color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the base color on that.
 * @param state the state for which to set the base color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_base().
 */
modify_base(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > background color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the background color on that.
 * @param state the state for which to set the background color
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_bg().
 */
modify_bg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the #GtkWidget
 * cursor-color and secondary-cursor-color
 * style properties.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param primary the color to use for primary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_cursor().
 * @param secondary the color to use for secondary cursor (does     not need to be allocated), or %NULL to undo the effect of     previous calls to of gtk_widget_modify_cursor().
 */
modify_cursor(primary?: (Gdk.Color | null), secondary?: (Gdk.Color | null)): void
/**
 * Sets the foreground color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the foreground color
 * @param color the color to assign (does not need to be allocated),     or %NULL to undo the effect of previous calls to     of gtk_widget_modify_fg().
 */
modify_fg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the font to use for a widget.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param font_desc the font description to use, or %NULL     to undo the effect of previous calls to gtk_widget_modify_font()
 */
modify_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Modifies style values on the widget.
 * 
 * Modifications made using this technique take precedence over
 * style values set via an RC file, however, they will be overridden
 * if a style is explicitly set on the widget using gtk_widget_set_style().
 * The #GtkRcStyle-struct is designed so each field can either be
 * set or unset, so it is possible, using this function, to modify some
 * style values and leave the others unchanged.
 * 
 * Note that modifications made with this function are not cumulative
 * with previous calls to gtk_widget_modify_style() or with such
 * functions as gtk_widget_modify_fg(). If you wish to retain
 * previous values, you must first call gtk_widget_get_modifier_style(),
 * make your modifications to the returned style, then call
 * gtk_widget_modify_style() with that style. On the other hand,
 * if you first call gtk_widget_modify_style(), subsequent calls
 * to such functions gtk_widget_modify_fg() will have a cumulative
 * effect with the initial modifications.
 * @param style the #GtkRcStyle-struct holding the style modifications
 */
modify_style(style: Gtk.RcStyle): void
/**
 * Sets the text color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * The text color is the foreground color used along with the
 * base color (see gtk_widget_modify_base()) for widgets such
 * as #GtkEntry and #GtkTextView.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the text color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_text().
 */
modify_text(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color to use for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color().
 * @param state the state for which to set the background color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_background_color()
 */
override_background_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the color to use for a widget.
 * 
 * All other style values are left untouched.
 * 
 * This function does not act recursively. Setting the color of a
 * container does not affect its children. Note that some widgets that
 * you may not think of as containers, for instance #GtkButtons,
 * are actually containers.
 * 
 * This API is mostly meant as a quick way for applications to
 * change a widget appearance. If you are developing a widgets
 * library and intend this change to be themeable, it is better
 * done by setting meaningful CSS classes in your
 * widget/container implementation through gtk_style_context_add_class().
 * 
 * This way, your widget library can install a #GtkCssProvider
 * with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
 * to provide a default styling for those widgets that need so, and
 * this theming may fully overridden by the user’s theme.
 * 
 * Note that for complex widgets this may bring in undesired
 * results (such as uniform background color everywhere), in
 * these cases it is better to fully style such widgets through a
 * #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
 * priority.
 * @param state the state for which to set the color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_color()
 */
override_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the
 * cursor-color and secondary-cursor-color
 * style properties. All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * Note that the underlying properties have the #GdkColor type,
 * so the alpha value in `primary` and `secondary` will be ignored.
 * @param cursor the color to use for primary cursor (does not need to be     allocated), or %NULL to undo the effect of previous calls to     of gtk_widget_override_cursor().
 * @param secondary_cursor the color to use for secondary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_override_cursor().
 */
override_cursor(cursor?: (Gdk.RGBA | null), secondary_cursor?: (Gdk.RGBA | null)): void
/**
 * Sets the font to use for a widget. All other style values are
 * left untouched. See gtk_widget_override_color().
 * @param font_desc the font description to use, or %NULL to undo     the effect of previous calls to gtk_widget_override_font()
 */
override_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Sets a symbolic color for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color() for overriding the foreground
 * or background color.
 * @param name the name of the symbolic color to modify
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to gtk_widget_override_symbolic_color()
 */
override_symbolic_color(name: string, color?: (Gdk.RGBA | null)): void
/**
 * Obtains the full path to `widget`. The path is simply the name of a
 * widget and all its parents in the container hierarchy, separated by
 * periods. The name of a widget comes from
 * gtk_widget_get_name(). Paths are used to apply styles to a widget
 * in gtkrc configuration files. Widget names are the type of the
 * widget by default (e.g. “GtkButton”) or can be set to an
 * application-specific value with gtk_widget_set_name(). By setting
 * the name of a widget, you allow users or theme authors to apply
 * styles to that specific widget in their gtkrc
 * file. `path_reversed_p` fills in the path in reverse order,
 * i.e. starting with `widget’`s name instead of starting with the name
 * of `widget’`s outermost ancestor.
 */
path(): [number, string, string]
/**
 * This function is only for use in widget implementations.
 * 
 * Flags the widget for a rerun of the GtkWidgetClass::size_allocate
 * function. Use this function instead of gtk_widget_queue_resize()
 * when the `widget'`s size request didn't change but it wants to
 * reposition its contents.
 * 
 * An example user of this function is gtk_widget_set_halign().
 */
queue_allocate(): void
/**
 * Mark `widget` as needing to recompute its expand flags. Call
 * this function when setting legacy expand child properties
 * on the child of a container.
 * 
 * See gtk_widget_compute_expand().
 */
queue_compute_expand(): void
/**
 * Equivalent to calling gtk_widget_queue_draw_area() for the
 * entire area of a widget.
 */
queue_draw(): void
/**
 * Convenience function that calls gtk_widget_queue_draw_region() on
 * the region created from the given coordinates.
 * 
 * The region here is specified in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(), and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 * 
 * `width` or `height` may be 0, in this case this function does
 * nothing. Negative values for `width` and `height` are not allowed.
 * @param x x coordinate of upper-left corner of rectangle to redraw
 * @param y y coordinate of upper-left corner of rectangle to redraw
 * @param width width of region to draw
 * @param height height of region to draw
 */
queue_draw_area(x: number, y: number, width: number, height: number): void
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
queue_draw_region(region: cairo.Region): void
/**
 * This function is only for use in widget implementations.
 * Flags a widget to have its size renegotiated; should
 * be called when a widget for some reason has a new size request.
 * For example, when you change the text in a #GtkLabel, #GtkLabel
 * queues a resize to ensure there’s enough space for the new text.
 * 
 * Note that you cannot call gtk_widget_queue_resize() on a widget
 * from inside its implementation of the GtkWidgetClass::size_allocate
 * virtual method. Calls to gtk_widget_queue_resize() from inside
 * GtkWidgetClass::size_allocate will be silently ignored.
 */
queue_resize(): void
/**
 * This function works like gtk_widget_queue_resize(),
 * except that the widget is not invalidated.
 */
queue_resize_no_redraw(): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
realize(): void
/**
 * Computes the intersection of a `widget’`s area and `region,` returning
 * the intersection. The result may be empty, use cairo_region_is_empty() to
 * check.
 * @param region a #cairo_region_t, in the same coordinate system as          @widget->allocation. That is, relative to @widget->window          for widgets which return %FALSE from gtk_widget_get_has_window();          relative to the parent window of @widget->window otherwise.
 * @returns A newly allocated region holding the intersection of @widget     and @region.
 */
region_intersect(region: cairo.Region): cairo.Region
/**
 * Registers a #GdkWindow with the widget and sets it up so that
 * the widget receives events for it. Call gtk_widget_unregister_window()
 * when destroying the window.
 * 
 * Before 3.8 you needed to call gdk_window_set_user_data() directly to set
 * this up. This is now deprecated and you should use gtk_widget_register_window()
 * instead. Old code will keep working as is, although some new features like
 * transparency might not work perfectly.
 * @param window a #GdkWindow
 */
register_window(window: Gdk.Window): void
/**
 * Removes an accelerator from `widget,` previously installed with
 * gtk_widget_add_accelerator().
 * @param accel_group accel group for this widget
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @returns whether an accelerator was installed and could be removed
 */
remove_accelerator(accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType): boolean
/**
 * Removes a widget from the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
 * must have previously been added to the list with
 * gtk_widget_add_mnemonic_label().
 * @param label a #GtkWidget that was previously set as a mnemonic label for         @widget with gtk_widget_add_mnemonic_label().
 */
remove_mnemonic_label(label: Gtk.Widget): void
/**
 * Removes a tick callback previously registered with
 * gtk_widget_add_tick_callback().
 * @param id an id returned by gtk_widget_add_tick_callback()
 */
remove_tick_callback(id: number): void
/**
 * A convenience function that uses the theme settings for `widget`
 * to look up `stock_id` and render it to a pixbuf. `stock_id` should
 * be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size`
 * should be a size such as #GTK_ICON_SIZE_MENU. `detail` should be a
 * string that identifies the widget or code doing the rendering, so
 * that theme engines can special-case rendering for that widget or
 * code.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be
 * freed after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @param detail render detail to pass to theme engine
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon(stock_id: string, size: number, detail?: (string | null)): (GdkPixbuf.Pixbuf | null)
/**
 * A convenience function that uses the theme engine and style
 * settings for `widget` to look up `stock_id` and render it to
 * a pixbuf. `stock_id` should be a stock icon ID such as
 * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
 * such as #GTK_ICON_SIZE_MENU.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be freed
 * after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon_pixbuf(stock_id: string, size: number): (GdkPixbuf.Pixbuf | null)
/**
 * Moves a widget from one #GtkContainer to another, handling reference
 * count issues to avoid destroying the widget.
 * @param new_parent a #GtkContainer to move the widget into
 */
reparent(new_parent: Gtk.Widget): void
/**
 * Reset the styles of `widget` and all descendents, so when
 * they are looked up again, they get the correct values
 * for the currently loaded RC file settings.
 * 
 * This function is not useful for applications.
 */
reset_rc_styles(): void
/**
 * Updates the style context of `widget` and all descendants
 * by updating its widget path. #GtkContainers may want
 * to use this on a child when reordering it in a way that a different
 * style might apply to it. See also gtk_container_get_path_for_child().
 */
reset_style(): void
/**
 * Very rarely-used function. This function is used to emit
 * an expose event on a widget. This function is not normally used
 * directly. The only time it is used is when propagating an expose
 * event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
 * and that is normally done using gtk_container_propagate_draw().
 * 
 * If you want to force an area of a window to be redrawn,
 * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
 * To cause the redraw to be done immediately, follow that call
 * with a call to gdk_window_process_updates().
 * @param event a expose #GdkEvent
 * @returns return from the event signal emission (%TRUE if   the event was handled)
 */
send_expose(event: Gdk.Event): number
/**
 * Sends the focus change `event` to `widget`
 * 
 * This function is not meant to be used by applications. The only time it
 * should be used is when it is necessary for a #GtkWidget to assign focus
 * to a widget that is semantically owned by the first widget even though
 * it’s not a direct child - for instance, a search entry in a floating
 * window similar to the quick search in #GtkTreeView.
 * 
 * An example of its usage is:
 * 
 * 
 * ```c
 *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
 * 
 *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
 *   fevent->focus_change.in = TRUE;
 *   fevent->focus_change.window = _gtk_widget_get_window (widget);
 *   if (fevent->focus_change.window != NULL)
 *     g_object_ref (fevent->focus_change.window);
 * 
 *   gtk_widget_send_focus_change (widget, fevent);
 * 
 *   gdk_event_free (event);
 * ```
 * 
 * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
 * @returns the return value from the event signal emission: %TRUE   if the event was handled, and %FALSE otherwise
 */
send_focus_change(event: Gdk.Event): boolean
/**
 * Given an accelerator group, `accel_group,` and an accelerator path,
 * `accel_path,` sets up an accelerator in `accel_group` so whenever the
 * key binding that is defined for `accel_path` is pressed, `widget`
 * will be activated.  This removes any accelerators (for any
 * accelerator group) installed by previous calls to
 * gtk_widget_set_accel_path(). Associating accelerators with
 * paths allows them to be modified by the user and the modifications
 * to be saved for future use. (See gtk_accel_map_save().)
 * 
 * This function is a low level function that would most likely
 * be used by a menu creation system like #GtkUIManager. If you
 * use #GtkUIManager, setting up accelerator paths will be done
 * automatically.
 * 
 * Even when you you aren’t using #GtkUIManager, if you only want to
 * set up accelerators on menu items gtk_menu_item_set_accel_path()
 * provides a somewhat more convenient interface.
 * 
 * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
 * pass a static string, you can save some memory by interning it first with
 * g_intern_static_string().
 * @param accel_path path used to look up the accelerator
 * @param accel_group a #GtkAccelGroup.
 */
set_accel_path(accel_path?: (string | null), accel_group?: (Gtk.AccelGroup | null)): void
/**
 * Sets the widget’s allocation.  This should not be used
 * directly, but from within a widget’s size_allocate method.
 * 
 * The allocation set should be the “adjusted” or actual
 * allocation. If you’re implementing a #GtkContainer, you want to use
 * gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
 * The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
 * allocation inside gtk_widget_size_allocate() to create an adjusted
 * allocation.
 * @param allocation a pointer to a #GtkAllocation to copy from
 */
set_allocation(allocation: Gtk.Allocation): void
/**
 * Sets whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * This is a hint to the widget and does not affect the behavior of
 * the GTK+ core; many widgets ignore this flag entirely. For widgets
 * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
 * the effect is to suppress default themed drawing of the widget's
 * background. (Children of the widget will still be drawn.) The application
 * is then entirely responsible for drawing the widget background.
 * 
 * Note that the background is still drawn when the widget is mapped.
 * @param app_paintable %TRUE if the application will paint on the widget
 */
set_app_paintable(app_paintable: boolean): void
/**
 * Specifies whether `widget` can be a default widget. See
 * gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param can_default whether or not @widget can be a default widget.
 */
set_can_default(can_default: boolean): void
/**
 * Specifies whether `widget` can own the input focus. See
 * gtk_widget_grab_focus() for actually setting the input focus on a
 * widget.
 * @param can_focus whether or not @widget can own the input focus.
 */
set_can_focus(can_focus: boolean): void
/**
 * Sets the widget’s clip.  This must not be used directly,
 * but from within a widget’s size_allocate method.
 * It must be called after gtk_widget_set_allocation() (or after chaining up
 * to the parent class), because that function resets the clip.
 * 
 * The clip set should be the area that `widget` draws on. If `widget` is a
 * #GtkContainer, the area must contain all children's clips.
 * 
 * If this function is not called by `widget` during a ::size-allocate handler,
 * the clip will be set to `widget'`s allocation.
 * @param clip a pointer to a #GtkAllocation to copy from
 */
set_clip(clip: Gtk.Allocation): void
/**
 * Sets a widgets composite name. The widget must be
 * a composite child of its parent; see gtk_widget_push_composite_child().
 * @param name the name to set
 */
set_composite_name(name: string): void
/**
 * Enables or disables a #GdkDevice to interact with `widget`
 * and all its children.
 * 
 * It does so by descending through the #GdkWindow hierarchy
 * and enabling the same mask that is has for core events
 * (i.e. the one that gdk_window_get_events() returns).
 * @param device a #GdkDevice
 * @param enabled whether to enable the device
 */
set_device_enabled(device: Gdk.Device, enabled: boolean): void
/**
 * Sets the device event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive from `device`. Keep
 * in mind that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_device_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with windowless widgets (which return
 * %FALSE from gtk_widget_get_has_window());
 * to get events on those widgets, place them inside a #GtkEventBox
 * and receive events on the event box.
 * @param device a #GdkDevice
 * @param events event mask
 */
set_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Sets the reading direction on a particular widget. This direction
 * controls the primary direction for widgets containing text,
 * and also the direction in which the children of a container are
 * packed. The ability to set the direction is present in order
 * so that correct localization into languages with right-to-left
 * reading directions can be done. Generally, applications will
 * let the default reading direction present, except for containers
 * where the containers are arranged in an order that is explicitly
 * visual rather than logical (such as buttons for text justification).
 * 
 * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
 * set by gtk_widget_set_default_direction() will be used.
 * @param dir the new direction
 */
set_direction(dir: Gtk.TextDirection): void
/**
 * Widgets are double buffered by default; you can use this function
 * to turn off the buffering. “Double buffered” simply means that
 * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
 * automatically around expose events sent to the
 * widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
 * window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
 * buffer to the screen. The result is that users see the window
 * update in one smooth step, and don’t see individual graphics
 * primitives being rendered.
 * 
 * In very simple terms, double buffered widgets don’t flicker,
 * so you would only use this function to turn off double buffering
 * if you had special needs and really knew what you were doing.
 * 
 * Note: if you turn off double-buffering, you have to handle
 * expose events, since even the clearing to the background color or
 * pixmap will not happen automatically (as it is done in
 * gdk_window_begin_draw_frame()).
 * 
 * In 3.10 GTK and GDK have been restructured for translucent drawing. Since
 * then expose events for double-buffered widgets are culled into a single
 * event to the toplevel GDK window. If you now unset double buffering, you
 * will cause a separate rendering pass for every widget. This will likely
 * cause rendering problems - in particular related to stacking - and usually
 * increases rendering times significantly.
 * @param double_buffered %TRUE to double-buffer a widget
 */
set_double_buffered(double_buffered: boolean): void
/**
 * Sets the event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive. Keep in mind
 * that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with widgets that have no window.
 * (See gtk_widget_get_has_window()).  To get events on those widgets,
 * place them inside a #GtkEventBox and receive events on the event
 * box.
 * @param events event mask
 */
set_events(events: number): void
/**
 * Sets whether the widget should grab focus when it is clicked with the mouse.
 * Making mouse clicks not grab focus is useful in places like toolbars where
 * you don’t want the keyboard focus removed from the main area of the
 * application.
 * @param focus_on_click whether the widget should grab focus when clicked with the mouse
 */
set_focus_on_click(focus_on_click: boolean): void
/**
 * Sets the font map to use for Pango rendering. When not set, the widget
 * will inherit the font map from its parent.
 * @param font_map a #PangoFontMap, or %NULL to unset any previously     set font map
 */
set_font_map(font_map?: (Pango.FontMap | null)): void
/**
 * Sets the #cairo_font_options_t used for Pango rendering in this widget.
 * When not set, the default font options for the #GdkScreen will be used.
 * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
 */
set_font_options(options?: (cairo.FontOptions | null)): void
/**
 * Sets the horizontal alignment of `widget`.
 * See the #GtkWidget:halign property.
 * @param align the horizontal alignment
 */
set_halign(align: Gtk.Align): void
/**
 * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
 * #GtkWidget:has-tooltip for more information.
 * @param has_tooltip whether or not @widget has a tooltip.
 */
set_has_tooltip(has_tooltip: boolean): void
/**
 * Specifies whether `widget` has a #GdkWindow of its own. Note that
 * all realized widgets have a non-%NULL “window” pointer
 * (gtk_widget_get_window() never returns a %NULL window when a widget
 * is realized), but for many of them it’s actually the #GdkWindow of
 * one of its parent widgets. Widgets that do not create a %window for
 * themselves in #GtkWidget::realize must announce this by
 * calling this function with `has_window` = %FALSE.
 * 
 * This function should only be called by widget implementations,
 * and they should call it in their init() function.
 * @param has_window whether or not @widget has a window.
 */
set_has_window(has_window: boolean): void
/**
 * Sets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Call this function to set the expand flag if you would like your
 * widget to become larger horizontally when the window has extra
 * room.
 * 
 * By default, widgets automatically expand if any of their children
 * want to expand. (To see if a widget will automatically expand given
 * its current children and state, call gtk_widget_compute_expand(). A
 * container can decide how the expandability of children affects the
 * expansion of the container by overriding the compute_expand virtual
 * method on #GtkWidget.).
 * 
 * Setting hexpand explicitly with this function will override the
 * automatic expand behavior.
 * 
 * This function forces the widget to expand or not to expand,
 * regardless of children.  The override occurs because
 * gtk_widget_set_hexpand() sets the hexpand-set property (see
 * gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
 * value to be used, rather than looking at children and widget state.
 * @param expand whether to expand
 */
set_hexpand(expand: boolean): void
/**
 * Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
 * be used.
 * 
 * The hexpand-set property will be set automatically when you call
 * gtk_widget_set_hexpand() to set hexpand, so the most likely
 * reason to use this function would be to unset an explicit expand
 * flag.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @param set value for hexpand-set property
 */
set_hexpand_set(set: boolean): void
/**
 * Marks the widget as being mapped.
 * 
 * This function should only ever be called in a derived widget's
 * “map” or “unmap” implementation.
 * @param mapped %TRUE to mark the widget as mapped
 */
set_mapped(mapped: boolean): void
/**
 * Sets the bottom margin of `widget`.
 * See the #GtkWidget:margin-bottom property.
 * @param margin the bottom margin
 */
set_margin_bottom(margin: number): void
/**
 * Sets the end margin of `widget`.
 * See the #GtkWidget:margin-end property.
 * @param margin the end margin
 */
set_margin_end(margin: number): void
/**
 * Sets the left margin of `widget`.
 * See the #GtkWidget:margin-left property.
 * @param margin the left margin
 */
set_margin_left(margin: number): void
/**
 * Sets the right margin of `widget`.
 * See the #GtkWidget:margin-right property.
 * @param margin the right margin
 */
set_margin_right(margin: number): void
/**
 * Sets the start margin of `widget`.
 * See the #GtkWidget:margin-start property.
 * @param margin the start margin
 */
set_margin_start(margin: number): void
/**
 * Sets the top margin of `widget`.
 * See the #GtkWidget:margin-top property.
 * @param margin the top margin
 */
set_margin_top(margin: number): void
/**
 * Widgets can be named, which allows you to refer to them from a
 * CSS file. You can apply a style to widgets with a particular name
 * in the CSS file. See the documentation for the CSS syntax (on the
 * same page as the docs for #GtkStyleContext).
 * 
 * Note that the CSS syntax has certain special characters to delimit
 * and represent elements in a selector (period, #, >, *...), so using
 * these will make your widget impossible to match by name. Any combination
 * of alphanumeric symbols, dashes and underscores will suffice.
 * @param name name for the widget
 */
set_name(name: string): void
/**
 * Sets the #GtkWidget:no-show-all property, which determines whether
 * calls to gtk_widget_show_all() will affect this widget.
 * 
 * This is mostly for use in constructing widget hierarchies with externally
 * controlled visibility, see #GtkUIManager.
 * @param no_show_all the new value for the “no-show-all” property
 */
set_no_show_all(no_show_all: boolean): void
/**
 * Request the `widget` to be rendered partially transparent,
 * with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
 * are clamped to the [0,1] range.).
 * This works on both toplevel widget, and child widgets, although there
 * are some limitations:
 * 
 * For toplevel widgets this depends on the capabilities of the windowing
 * system. On X11 this has any effect only on X screens with a compositing manager
 * running. See gtk_widget_is_composited(). On Windows it should work
 * always, although setting a window’s opacity after the window has been
 * shown causes it to flicker once on Windows.
 * 
 * For child widgets it doesn’t work if any affected widget has a native window, or
 * disables double buffering.
 * @param opacity desired opacity, between 0 and 1
 */
set_opacity(opacity: number): void
/**
 * This function is useful only when implementing subclasses of
 * #GtkContainer.
 * Sets the container as the parent of `widget,` and takes care of
 * some details such as updating the state and style of the child
 * to reflect its new location. The opposite function is
 * gtk_widget_unparent().
 * @param parent parent container
 */
set_parent(parent: Gtk.Widget): void
/**
 * Sets a non default parent window for `widget`.
 * 
 * For #GtkWindow classes, setting a `parent_window` effects whether
 * the window is a toplevel window or can be embedded into other
 * widgets.
 * 
 * For #GtkWindow classes, this needs to be called before the
 * window is realized.
 * @param parent_window the new parent window.
 */
set_parent_window(parent_window: Gdk.Window): void
/**
 * Marks the widget as being realized. This function must only be
 * called after all #GdkWindows for the `widget` have been created
 * and registered.
 * 
 * This function should only ever be called in a derived widget's
 * “realize” or “unrealize” implementation.
 * @param realized %TRUE to mark the widget as realized
 */
set_realized(realized: boolean): void
/**
 * Specifies whether `widget` will be treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param receives_default whether or not @widget can be a default widget.
 */
set_receives_default(receives_default: boolean): void
/**
 * Sets whether the entire widget is queued for drawing when its size
 * allocation changes. By default, this setting is %TRUE and
 * the entire widget is redrawn on every size change. If your widget
 * leaves the upper left unchanged when made bigger, turning this
 * setting off will improve performance.
 * 
 * Note that for widgets where gtk_widget_get_has_window() is %FALSE
 * setting this flag to %FALSE turns off all allocation on resizing:
 * the widget will not even redraw if its position changes; this is to
 * allow containers that don’t draw anything to avoid excess
 * invalidations. If you set this flag on a widget with no window that
 * does draw on `widget->`window, you are
 * responsible for invalidating both the old and new allocation of the
 * widget when the widget is moved and responsible for invalidating
 * regions newly when the widget increases size.
 * @param redraw_on_allocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
 */
set_redraw_on_allocate(redraw_on_allocate: boolean): void
/**
 * Sets the sensitivity of a widget. A widget is sensitive if the user
 * can interact with it. Insensitive widgets are “grayed out” and the
 * user can’t interact with them. Insensitive widgets are known as
 * “inactive”, “disabled”, or “ghosted” in some other toolkits.
 * @param sensitive %TRUE to make the widget sensitive
 */
set_sensitive(sensitive: boolean): void
/**
 * Sets the minimum size of a widget; that is, the widget’s size
 * request will be at least `width` by `height`. You can use this
 * function to force a widget to be larger than it normally would be.
 * 
 * In most cases, gtk_window_set_default_size() is a better choice for
 * toplevel windows than this function; setting the default size will
 * still allow users to shrink the window. Setting the size request
 * will force them to leave the window at least as large as the size
 * request. When dealing with window sizes,
 * gtk_window_set_geometry_hints() can be a useful function as well.
 * 
 * Note the inherent danger of setting any fixed size - themes,
 * translations into other languages, different fonts, and user action
 * can all change the appropriate size for a given widget. So, it's
 * basically impossible to hardcode a size that will always be
 * correct.
 * 
 * The size request of a widget is the smallest size a widget can
 * accept while still functioning well and drawing itself correctly.
 * However in some strange cases a widget may be allocated less than
 * its requested size, and in many cases a widget may be allocated more
 * space than it requested.
 * 
 * If the size request in a given direction is -1 (unset), then
 * the “natural” size request of the widget will be used instead.
 * 
 * The size request set here does not include any margin from the
 * #GtkWidget properties margin-left, margin-right, margin-top, and
 * margin-bottom, but it does include pretty much all other padding
 * or border properties set by any subclass of #GtkWidget.
 * @param width width @widget should request, or -1 to unset
 * @param height height @widget should request, or -1 to unset
 */
set_size_request(width: number, height: number): void
/**
 * This function is for use in widget implementations. Sets the state
 * of a widget (insensitive, prelighted, etc.) Usually you should set
 * the state using wrapper functions such as gtk_widget_set_sensitive().
 * @param state new state for @widget
 */
set_state(state: Gtk.StateType): void
/**
 * This function is for use in widget implementations. Turns on flag
 * values in the current widget state (insensitive, prelighted, etc.).
 * 
 * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
 * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
 * direction, use gtk_widget_set_direction().
 * 
 * It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
 * will be propagated down to all non-internal children if `widget` is a
 * #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
 * down to all #GtkContainer children by different means than turning on the
 * state flag down the hierarchy, both gtk_widget_get_state_flags() and
 * gtk_widget_is_sensitive() will make use of these.
 * @param flags State flags to turn on
 * @param clear Whether to clear state before turning on @flags
 */
set_state_flags(flags: Gtk.StateFlags, clear: boolean): void
/**
 * Used to set the #GtkStyle for a widget (`widget->`style). Since
 * GTK 3, this function does nothing, the passed in style is ignored.
 * @param style a #GtkStyle, or %NULL to remove the effect     of a previous call to gtk_widget_set_style() and go back to     the default style
 */
set_style(style?: (Gtk.Style | null)): void
/**
 * Enables or disables multiple pointer awareness. If this setting is %TRUE,
 * `widget` will start receiving multiple, per device enter/leave events. Note
 * that if custom #GdkWindows are created in #GtkWidget::realize,
 * gdk_window_set_support_multidevice() will have to be called manually on them.
 * @param support_multidevice %TRUE to support input from multiple devices.
 */
set_support_multidevice(support_multidevice: boolean): void
/**
 * Sets `markup` as the contents of the tooltip, which is marked up with
 *  the [Pango text markup language][PangoMarkupFormat].
 * 
 * This function will take care of setting #GtkWidget:has-tooltip to %TRUE
 * and of the default handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-markup property and
 * gtk_tooltip_set_markup().
 * @param markup the contents of the tooltip for @widget, or %NULL
 */
set_tooltip_markup(markup?: (string | null)): void
/**
 * Sets `text` as the contents of the tooltip. This function will take
 * care of setting #GtkWidget:has-tooltip to %TRUE and of the default
 * handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
 * @param text the contents of the tooltip for @widget
 */
set_tooltip_text(text?: (string | null)): void
/**
 * Replaces the default window used for displaying
 * tooltips with `custom_window`. GTK+ will take care of showing and
 * hiding `custom_window` at the right moment, to behave likewise as
 * the default tooltip window. If `custom_window` is %NULL, the default
 * tooltip window will be used.
 * @param custom_window a #GtkWindow, or %NULL
 */
set_tooltip_window(custom_window?: (Gtk.Window | null)): void
/**
 * Sets the vertical alignment of `widget`.
 * See the #GtkWidget:valign property.
 * @param align the vertical alignment
 */
set_valign(align: Gtk.Align): void
/**
 * Sets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_set_hexpand() for more detail.
 * @param expand whether to expand
 */
set_vexpand(expand: boolean): void
/**
 * Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
 * be used.
 * 
 * See gtk_widget_set_hexpand_set() for more detail.
 * @param set value for vexpand-set property
 */
set_vexpand_set(set: boolean): void
/**
 * Sets the visibility state of `widget`. Note that setting this to
 * %TRUE doesn’t mean the widget is actually viewable, see
 * gtk_widget_get_visible().
 * 
 * This function simply calls gtk_widget_show() or gtk_widget_hide()
 * but is nicer to use when the visibility of the widget depends on
 * some condition.
 * @param visible whether the widget should be shown or not
 */
set_visible(visible: boolean): void
/**
 * Sets the visual that should be used for by widget and its children for
 * creating #GdkWindows. The visual must be on the same #GdkScreen as
 * returned by gtk_widget_get_screen(), so handling the
 * #GtkWidget::screen-changed signal is necessary.
 * 
 * Setting a new `visual` will not cause `widget` to recreate its windows,
 * so you should call this function before `widget` is realized.
 * @param visual visual to be used or %NULL to unset a previous one
 */
set_visual(visual?: (Gdk.Visual | null)): void
/**
 * Sets a widget’s window. This function should only be used in a
 * widget’s #GtkWidget::realize implementation. The %window passed is
 * usually either new window created with gdk_window_new(), or the
 * window of its parent widget as returned by
 * gtk_widget_get_parent_window().
 * 
 * Widgets must indicate whether they will create their own #GdkWindow
 * by calling gtk_widget_set_has_window(). This is usually done in the
 * widget’s init() function.
 * 
 * Note that this function does not add any reference to `window`.
 * @param window a #GdkWindow
 */
set_window(window: Gdk.Window): void
/**
 * Sets a shape for this widget’s GDK window. This allows for
 * transparent windows etc., see gdk_window_shape_combine_region()
 * for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
show_all(): void
/**
 * Shows a widget. If the widget is an unmapped toplevel widget
 * (i.e. a #GtkWindow that has not yet been shown), enter the main
 * loop and wait for the window to actually be mapped. Be careful;
 * because the main loop is running, anything can happen during
 * this function.
 */
show_now(): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
size_allocate(allocation: Gtk.Allocation): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size,
 * position and (optionally) baseline to their child widgets.
 * 
 * In this function, the allocation and baseline may be adjusted. It
 * will be forced to a 1x1 minimum size, and the
 * adjust_size_allocation virtual and adjust_baseline_allocation
 * methods on the child will be used to adjust the allocation and
 * baseline. Standard adjustments include removing the widget's
 * margins, and applying the widget’s #GtkWidget:halign and
 * #GtkWidget:valign properties.
 * 
 * If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
 * baseline argument is ignored and -1 is used instead.
 * @param allocation position and size to be allocated to @widget
 * @param baseline The baseline of the child, or -1
 */
size_allocate_with_baseline(allocation: Gtk.Allocation, baseline: number): void
/**
 * This function is typically used when implementing a #GtkContainer
 * subclass.  Obtains the preferred size of a widget. The container
 * uses this information to arrange its child widgets and decide what
 * size allocations to give them with gtk_widget_size_allocate().
 * 
 * You can also call this function from an application, with some
 * caveats. Most notably, getting a size request requires the widget
 * to be associated with a screen, because font information may be
 * needed. Multihead-aware applications should keep this in mind.
 * 
 * Also remember that the size request is not necessarily the size
 * a widget will actually be allocated.
 */
size_request(): Gtk.Requisition
/**
 * This function attaches the widget’s #GtkStyle to the widget's
 * #GdkWindow. It is a replacement for
 * 
 * 
 * ```
 * widget->style = gtk_style_attach (widget->style, widget->window);
 * ```
 * 
 * 
 * and should only ever be called in a derived widget’s “realize”
 * implementation which does not chain up to its parent class'
 * “realize” implementation, because one of the parent classes
 * (finally #GtkWidget) would attach the style itself.
 */
style_attach(): void
/**
 * Gets the value of a style property of `widget`.
 * @param property_name the name of a style property
 * @param value location to return the property value
 */
style_get_property(property_name: string, value: GObject.Value): void
/**
 * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
 * This causes all queued #GtkWidget::child-notify signals on `widget` to be
 * emitted.
 */
thaw_child_notify(): void
/**
 * Translate coordinates relative to `src_widget’`s allocation to coordinates
 * relative to `dest_widget’`s allocations. In order to perform this
 * operation, both widgets must be realized, and must share a common
 * toplevel.
 * @param dest_widget a #GtkWidget
 * @param src_x X position relative to @src_widget
 * @param src_y Y position relative to @src_widget
 * @returns %FALSE if either widget was not realized, or there   was no common ancestor. In this case, nothing is stored in   *@dest_x and *@dest_y. Otherwise %TRUE.
 */
translate_coordinates(dest_widget: Gtk.Widget, src_x: number, src_y: number): [boolean, number, number]
/**
 * Triggers a tooltip query on the display where the toplevel of `widget`
 * is located. See gtk_tooltip_trigger_tooltip_query() for more
 * information.
 */
trigger_tooltip_query(): void
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
unmap(): void
/**
 * This function is only for use in widget implementations.
 * Should be called by implementations of the remove method
 * on #GtkContainer, to dissociate a child from the container.
 */
unparent(): void
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
unrealize(): void
/**
 * Unregisters a #GdkWindow from the widget that was previously set up with
 * gtk_widget_register_window(). You need to call this when the window is
 * no longer used by the widget, such as when you destroy it.
 * @param window a #GdkWindow
 */
unregister_window(window: Gdk.Window): void
/**
 * This function is for use in widget implementations. Turns off flag
 * values for the current widget state (insensitive, prelighted, etc.).
 * See gtk_widget_set_state_flags().
 * @param flags State flags to turn off
 */
unset_state_flags(flags: Gtk.StateFlags): void
vfunc_adjust_baseline_allocation(baseline: number): void
vfunc_adjust_baseline_request(minimum_baseline: number, natural_baseline: number): void
vfunc_adjust_size_allocation(orientation: Gtk.Orientation, minimum_size: number, natural_size: number, allocated_pos: number, allocated_size: number): void
vfunc_adjust_size_request(orientation: Gtk.Orientation, minimum_size: number, natural_size: number): void
vfunc_button_press_event(event: Gdk.EventButton): boolean
vfunc_button_release_event(event: Gdk.EventButton): boolean
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 */
vfunc_can_activate_accel(signal_id: number): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
vfunc_child_notify(child_property: GObject.ParamSpec): void
vfunc_composited_changed(): void
vfunc_compute_expand(hexpand_p: boolean, vexpand_p: boolean): void
vfunc_configure_event(event: Gdk.EventConfigure): boolean
vfunc_damage_event(event: Gdk.EventExpose): boolean
vfunc_delete_event(event: Gdk.EventAny): boolean
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
vfunc_destroy(): void
vfunc_destroy_event(event: Gdk.EventAny): boolean
vfunc_direction_changed(previous_direction: Gtk.TextDirection): void
vfunc_dispatch_child_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_drag_begin(context: Gdk.DragContext): void
vfunc_drag_data_delete(context: Gdk.DragContext): void
vfunc_drag_data_get(context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_data_received(context: Gdk.DragContext, x: number, y: number, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_drop(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_drag_end(context: Gdk.DragContext): void
vfunc_drag_failed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
vfunc_drag_leave(context: Gdk.DragContext, time_: number): void
vfunc_drag_motion(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_draw(cr: cairo.Context): boolean
vfunc_enter_notify_event(event: Gdk.EventCrossing): boolean
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 */
vfunc_event(event: Gdk.Event): boolean
vfunc_focus(direction: Gtk.DirectionType): boolean
vfunc_focus_in_event(event: Gdk.EventFocus): boolean
vfunc_focus_out_event(event: Gdk.EventFocus): boolean
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 */
vfunc_get_accessible(): Atk.Object
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
vfunc_get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
vfunc_get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
vfunc_get_preferred_width_for_height(height: number): [number, number]
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 */
vfunc_get_request_mode(): Gtk.SizeRequestMode
vfunc_grab_broken_event(event: Gdk.EventGrabBroken): boolean
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
vfunc_grab_focus(): void
vfunc_grab_notify(was_grabbed: boolean): void
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
vfunc_hide(): void
vfunc_hierarchy_changed(previous_toplevel: Gtk.Widget): void
vfunc_key_press_event(event: Gdk.EventKey): boolean
vfunc_key_release_event(event: Gdk.EventKey): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 */
vfunc_keynav_failed(direction: Gtk.DirectionType): boolean
vfunc_leave_notify_event(event: Gdk.EventCrossing): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
vfunc_map(): void
vfunc_map_event(event: Gdk.EventAny): boolean
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 */
vfunc_mnemonic_activate(group_cycling: boolean): boolean
vfunc_motion_notify_event(event: Gdk.EventMotion): boolean
vfunc_move_focus(direction: Gtk.DirectionType): void
vfunc_parent_set(previous_parent: Gtk.Widget): void
vfunc_popup_menu(): boolean
vfunc_property_notify_event(event: Gdk.EventProperty): boolean
vfunc_proximity_in_event(event: Gdk.EventProximity): boolean
vfunc_proximity_out_event(event: Gdk.EventProximity): boolean
vfunc_query_tooltip(x: number, y: number, keyboard_tooltip: boolean, tooltip: Gtk.Tooltip): boolean
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
vfunc_queue_draw_region(region: cairo.Region): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
vfunc_realize(): void
vfunc_screen_changed(previous_screen: Gdk.Screen): void
vfunc_scroll_event(event: Gdk.EventScroll): boolean
vfunc_selection_clear_event(event: Gdk.EventSelection): boolean
vfunc_selection_get(selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_selection_notify_event(event: Gdk.EventSelection): boolean
vfunc_selection_received(selection_data: Gtk.SelectionData, time_: number): void
vfunc_selection_request_event(event: Gdk.EventSelection): boolean
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
vfunc_show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
vfunc_show_all(): void
vfunc_show_help(help_type: Gtk.WidgetHelpType): boolean
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
vfunc_size_allocate(allocation: Gtk.Allocation): void
vfunc_state_changed(previous_state: Gtk.StateType): void
vfunc_state_flags_changed(previous_state_flags: Gtk.StateFlags): void
vfunc_style_set(previous_style: Gtk.Style): void
vfunc_style_updated(): void
vfunc_touch_event(event: Gdk.EventTouch): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
vfunc_unmap(): void
vfunc_unmap_event(event: Gdk.EventAny): boolean
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
vfunc_unrealize(): void
vfunc_visibility_notify_event(event: Gdk.EventVisibility): boolean
vfunc_window_state_event(event: Gdk.EventWindowState): boolean
}

module DockWindow {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Window.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Dock.ConstructorProps, DockItem.ConstructorProps, Gtk.Buildable.ConstructorProps {

    }

}

class DockWindow extends Gtk.Window implements Atk.ImplementorIface, Dock, DockItem, Gtk.Buildable {

    // Constructors of Dazzle.DockWindow


constructor(properties?: Partial<DockWindow.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): DockWindow;

// Inherited properties
get manager(): DockManager;
set manager(val: DockManager);
get border_width(): number;
set border_width(val: number);
get borderWidth(): number;
set borderWidth(val: number);
set child(val: Gtk.Widget);
get resize_mode(): Gtk.ResizeMode;
set resize_mode(val: Gtk.ResizeMode);
get resizeMode(): Gtk.ResizeMode;
set resizeMode(val: Gtk.ResizeMode);
get app_paintable(): boolean;
set app_paintable(val: boolean);
get appPaintable(): boolean;
set appPaintable(val: boolean);
get can_default(): boolean;
set can_default(val: boolean);
get canDefault(): boolean;
set canDefault(val: boolean);
get can_focus(): boolean;
set can_focus(val: boolean);
get canFocus(): boolean;
set canFocus(val: boolean);
get composite_child(): boolean;
get compositeChild(): boolean;
/**
 * Whether the widget is double buffered.
 */
get double_buffered(): boolean;
set double_buffered(val: boolean);
/**
 * Whether the widget is double buffered.
 */
get doubleBuffered(): boolean;
set doubleBuffered(val: boolean);
get events(): Gdk.EventMask;
set events(val: Gdk.EventMask);
/**
 * Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
 */
get expand(): boolean;
set expand(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focus_on_click(): boolean;
set focus_on_click(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focusOnClick(): boolean;
set focusOnClick(val: boolean);
/**
 * How to distribute horizontal space if widget gets extra space, see #GtkAlign
 */
get halign(): Gtk.Align;
set halign(val: Gtk.Align);
get has_default(): boolean;
set has_default(val: boolean);
get hasDefault(): boolean;
set hasDefault(val: boolean);
get has_focus(): boolean;
set has_focus(val: boolean);
get hasFocus(): boolean;
set hasFocus(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get has_tooltip(): boolean;
set has_tooltip(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get hasTooltip(): boolean;
set hasTooltip(val: boolean);
get height_request(): number;
set height_request(val: number);
get heightRequest(): number;
set heightRequest(val: number);
/**
 * Whether to expand horizontally. See gtk_widget_set_hexpand().
 */
get hexpand(): boolean;
set hexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpand_set(): boolean;
set hexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpandSet(): boolean;
set hexpandSet(val: boolean);
get is_focus(): boolean;
set is_focus(val: boolean);
get isFocus(): boolean;
set isFocus(val: boolean);
/**
 * Sets all four sides' margin at once. If read, returns max
 * margin on any side.
 */
get margin(): number;
set margin(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_bottom(): number;
set margin_bottom(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginBottom(): number;
set marginBottom(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_end(): number;
set margin_end(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginEnd(): number;
set marginEnd(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_left(): number;
set margin_left(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginLeft(): number;
set marginLeft(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_right(): number;
set margin_right(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginRight(): number;
set marginRight(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_start(): number;
set margin_start(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginStart(): number;
set marginStart(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_top(): number;
set margin_top(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginTop(): number;
set marginTop(val: number);
get name(): string;
set name(val: string);
get no_show_all(): boolean;
set no_show_all(val: boolean);
get noShowAll(): boolean;
set noShowAll(val: boolean);
/**
 * The requested opacity of the widget. See gtk_widget_set_opacity() for
 * more details about window opacity.
 * 
 * Before 3.8 this was only available in GtkWindow
 */
get opacity(): number;
set opacity(val: number);
get parent(): Gtk.Container;
set parent(val: Gtk.Container);
get receives_default(): boolean;
set receives_default(val: boolean);
get receivesDefault(): boolean;
set receivesDefault(val: boolean);
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scale_factor(): number;
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scaleFactor(): number;
get sensitive(): boolean;
set sensitive(val: boolean);
/**
 * The style of the widget, which contains information about how it will look (colors, etc).
 */
get style(): Gtk.Style;
set style(val: Gtk.Style);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_markup(): string;
set tooltip_markup(val: string);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipMarkup(): string;
set tooltipMarkup(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_text(): string;
set tooltip_text(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipText(): string;
set tooltipText(val: string);
/**
 * How to distribute vertical space if widget gets extra space, see #GtkAlign
 */
get valign(): Gtk.Align;
set valign(val: Gtk.Align);
/**
 * Whether to expand vertically. See gtk_widget_set_vexpand().
 */
get vexpand(): boolean;
set vexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpand_set(): boolean;
set vexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpandSet(): boolean;
set vexpandSet(val: boolean);
get visible(): boolean;
set visible(val: boolean);
get width_request(): number;
set width_request(val: number);
get widthRequest(): number;
set widthRequest(val: number);
/**
 * The widget's window if it is realized, %NULL otherwise.
 */
get window(): Gdk.Window;

// Inherited methods
adopt(child: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 * @returns %TRUE if the dock item was closed
 */
close(): boolean
close(...args: never[]): any
/**
 * Emits the #DzlDockItem::presented signal.
 * 
 * Containers should emit this when their descendant has been presented as the
 * current visible child. This allows dock items to do lazy initialization of
 * content once the widgetry is visible to the user.
 * 
 * Currently, this is best effort, as there are a number of situations that
 * make covering all cases problematic.
 */
emit_presented(): void
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 * @returns %TRUE if the dock item can be closed by the user, otherwise %FALSE.
 */
get_can_close(): boolean
get_can_minimize(): boolean
get_child_visible(child: DockItem): boolean
get_child_visible(...args: never[]): any
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 * @returns A #DzlDockmanager.
 */
get_manager(): (DockManager | null)
/**
 * Gets the parent #DzlDockItem, or %NULL.
 * @returns A #DzlDockItem or %NULL.
 */
get_parent(): (DockItem | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 * @returns A newly allocated string or %NULL.
 */
get_title(): (string | null)
has_widgets(): boolean
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 * @returns %TRUE if @child was minimized. Otherwise %FALSE and @position   may be updated to a suggested position.
 */
minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
needs_attention(): void
/**
 * This widget will walk the widget hierarchy to ensure that the
 * dock item is visible to the user.
 */
present(): void
present_child(child: DockItem): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 * @returns a #GIcon or %NULL
 */
ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
release(child: DockItem): void
set_child_visible(child: DockItem, child_visible: boolean): void
set_child_visible(...args: never[]): any
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
set_manager(manager?: (DockManager | null)): void
update_visibility(): void
vfunc_can_minimize(descendant: DockItem): boolean
/**
 * This function will request that the dock item close itself.
 */
vfunc_close(): boolean
/**
 * If this dock item can be closed by the user, this virtual function should be
 * implemented by the panel and return %TRUE.
 */
vfunc_get_can_close(): boolean
vfunc_get_child_visible(child: DockItem): boolean
/**
 * Gets the icon_name for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
 * you can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_icon_name(): (string | null)
/**
 * Gets the dock manager for this dock item.
 */
vfunc_get_manager(): (DockManager | null)
/**
 * Gets the title for the #DzlDockItem.
 * 
 * Generally, you want to use a #DzlDockWidget which has a "title" property you
 * can set. But this can be helpful for integration of various container
 * widgets.
 */
vfunc_get_title(): (string | null)
vfunc_manager_set(old_manager: DockManager): void
/**
 * This requests that `self` minimize `child` if it knows how.
 * 
 * If not, it should suggest the gravity for `child` if it knows how to
 * determine that. For example, a #DzlDockBin might know if the widget was part
 * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
 * @param child A #DzlDockItem that is a child of @self
 * @param position A location for a #GtkPositionType
 */
vfunc_minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
/**
 * Emits the "needs-attention" signal.
 */
vfunc_needs_attention(): void
vfunc_present_child(child: DockItem): void
vfunc_presented(): void
/**
 * Gets a #GIcon for the dock item, if any has been set.
 * 
 * If an icon-name has been set, a new #GIcon for that icon-name
 * may be returned.
 */
vfunc_ref_gicon(): (Gio.Icon | null)
/**
 * This virtual method should remove `child` from `self` if the
 * dock item knows how to do so. For example, the #DzlDockStack
 * will remove `child` from it's internal #GtkStack.
 * 
 * After the virtual function has been executed, child tracking
 * will be removed so that #DzlDockItem implementations do not
 * need to implement themselves.
 * @param child 
 */
vfunc_release(child: DockItem): void
vfunc_set_child_visible(child: DockItem, child_visible: boolean): void
/**
 * Sets the dock manager for this #DzlDockItem.
 * @param manager A #DzlDockManager
 */
vfunc_set_manager(manager?: (DockManager | null)): void
vfunc_update_visibility(): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
/**
 * Adds `widget` to `container`. Typically used for simple containers
 * such as #GtkWindow, #GtkFrame, or #GtkButton; for more complicated
 * layout containers such as #GtkBox or #GtkGrid, this function will
 * pick default packing parameters that may not be correct.  So
 * consider functions such as gtk_box_pack_start() and
 * gtk_grid_attach() as an alternative to gtk_container_add() in
 * those cases. A widget may be added to only one container at a time;
 * you can’t place the same widget inside two different containers.
 * 
 * Note that some containers, such as #GtkScrolledWindow or #GtkListBox,
 * may add intermediate children between the added widget and the
 * container.
 * @param widget a widget to be placed inside @container
 */
add(widget: Gtk.Widget): void
check_resize(): void
/**
 * Gets the value of a child property for `child` and `container`.
 * @param child a widget which is a child of @container
 * @param property_name the name of the property to get
 * @param value a location to return the value
 */
child_get_property(child: Gtk.Widget, property_name: string, value: GObject.Value): void
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties]
 * `child_property` on the child.
 * 
 * This is an analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_widget_child_notify().
 * @param child the child widget
 * @param child_property the name of a child property installed on     the class of @container
 */
child_notify(child: Gtk.Widget, child_property: string): void
child_notify(...args: never[]): any
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] specified by
 * `pspec` on the child.
 * 
 * This is an analogue of g_object_notify_by_pspec() for child properties.
 * @param child the child widget
 * @param pspec the #GParamSpec of a child property instealled on     the class of @container
 */
child_notify_by_pspec(child: Gtk.Widget, pspec: GObject.ParamSpec): void
/**
 * Sets a child property for `child` and `container`.
 * @param child a widget which is a child of @container
 * @param property_name the name of the property to set
 * @param value the value to set the property to
 */
child_set_property(child: Gtk.Widget, property_name: string, value: GObject.Value): void
/**
 * Returns the type of the children supported by the container.
 * 
 * Note that this may return %G_TYPE_NONE to indicate that no more
 * children can be added, e.g. for a #GtkPaned which already has two
 * children.
 * @returns a #GType.
 */
child_type(): GObject.GType
/**
 * Invokes `callback` on each direct child of `container,` including
 * children that are considered “internal” (implementation details
 * of the container). “Internal” children generally weren’t added
 * by the user of the container, but were added by the container
 * implementation itself.
 * 
 * Most applications should use gtk_container_foreach(), rather
 * than gtk_container_forall().
 * @param callback a callback
 */
forall(callback: Gtk.Callback): void
/**
 * Invokes `callback` on each non-internal child of `container`.
 * See gtk_container_forall() for details on what constitutes
 * an “internal” child. For all practical purposes, this function
 * should iterate over precisely those child widgets that were
 * added to the container by the application with explicit add()
 * calls.
 * 
 * It is permissible to remove the child from the `callback` handler.
 * 
 * Most applications should use gtk_container_foreach(),
 * rather than gtk_container_forall().
 * @param callback a callback
 */
foreach(callback: Gtk.Callback): void
/**
 * Retrieves the border width of the container. See
 * gtk_container_set_border_width().
 * @returns the current border width
 */
get_border_width(): number
/**
 * Returns the container’s non-internal children. See
 * gtk_container_forall() for details on what constitutes an "internal" child.
 * @returns a newly-allocated list of the container’s non-internal children.
 */
get_children(): Gtk.Widget[]
/**
 * Retrieves the focus chain of the container, if one has been
 * set explicitly. If no focus chain has been explicitly
 * set, GTK+ computes the focus chain based on the positions
 * of the children. In that case, GTK+ stores %NULL in
 * `focusable_widgets` and returns %FALSE.
 * @returns %TRUE if the focus chain of the container has been set explicitly.
 */
get_focus_chain(): [boolean, Gtk.Widget[]]
/**
 * Returns the current focus child widget inside `container`. This is not the
 * currently focused widget. That can be obtained by calling
 * gtk_window_get_focus().
 * @returns The child widget which will receive the          focus inside @container when the @container is focused,          or %NULL if none is set.
 */
get_focus_child(): (Gtk.Widget | null)
/**
 * Retrieves the horizontal focus adjustment for the container. See
 * gtk_container_set_focus_hadjustment ().
 * @returns the horizontal focus adjustment, or %NULL if   none has been set.
 */
get_focus_hadjustment(): (Gtk.Adjustment | null)
/**
 * Retrieves the vertical focus adjustment for the container. See
 * gtk_container_set_focus_vadjustment().
 * @returns the vertical focus adjustment, or   %NULL if none has been set.
 */
get_focus_vadjustment(): (Gtk.Adjustment | null)
/**
 * Returns a newly created widget path representing all the widget hierarchy
 * from the toplevel down to and including `child`.
 * @param child a child of @container
 * @returns A newly created #GtkWidgetPath
 */
get_path_for_child(child: Gtk.Widget): Gtk.WidgetPath
/**
 * Returns the resize mode for the container. See
 * gtk_container_set_resize_mode ().
 * @returns the current resize mode
 */
get_resize_mode(): Gtk.ResizeMode
/**
 * When a container receives a call to the draw function, it must send
 * synthetic #GtkWidget::draw calls to all children that don’t have their
 * own #GdkWindows. This function provides a convenient way of doing this.
 * A container, when it receives a call to its #GtkWidget::draw function,
 * calls gtk_container_propagate_draw() once for each child, passing in
 * the `cr` the container received.
 * 
 * gtk_container_propagate_draw() takes care of translating the origin of `cr,`
 * and deciding whether the draw needs to be sent to the child. It is a
 * convenient and optimized way of getting the same effect as calling
 * gtk_widget_draw() on the child directly.
 * 
 * In most cases, a container can simply either inherit the
 * #GtkWidget::draw implementation from #GtkContainer, or do some drawing
 * and then chain to the ::draw implementation from #GtkContainer.
 * @param child a child of @container
 * @param cr Cairo context as passed to the container. If you want to use @cr   in container’s draw function, consider using cairo_save() and   cairo_restore() before calling this function.
 */
propagate_draw(child: Gtk.Widget, cr: cairo.Context): void
/**
 * Removes `widget` from `container`. `widget` must be inside `container`.
 * Note that `container` will own a reference to `widget,` and that this
 * may be the last reference held; so removing a widget from its
 * container can destroy that widget. If you want to use `widget`
 * again, you need to add a reference to it before removing it from
 * a container, using g_object_ref(). If you don’t want to use `widget`
 * again it’s usually more efficient to simply destroy it directly
 * using gtk_widget_destroy() since this will remove it from the
 * container and help break any circular reference count cycles.
 * @param widget a current child of @container
 */
remove(widget: Gtk.Widget): void
resize_children(): void
/**
 * Sets the border width of the container.
 * 
 * The border width of a container is the amount of space to leave
 * around the outside of the container. The only exception to this is
 * #GtkWindow; because toplevel windows can’t leave space outside,
 * they leave the space inside. The border is added on all sides of
 * the container. To add space to only one side, use a specific
 * #GtkWidget:margin property on the child widget, for example
 * #GtkWidget:margin-top.
 * @param border_width amount of blank space to leave outside   the container. Valid values are in the range 0-65535 pixels.
 */
set_border_width(border_width: number): void
/**
 * Sets a focus chain, overriding the one computed automatically by GTK+.
 * 
 * In principle each widget in the chain should be a descendant of the
 * container, but this is not enforced by this method, since it’s allowed
 * to set the focus chain before you pack the widgets, or have a widget
 * in the chain that isn’t always packed. The necessary checks are done
 * when the focus chain is actually traversed.
 * @param focusable_widgets the new focus chain
 */
set_focus_chain(focusable_widgets: Gtk.Widget[]): void
/**
 * Sets, or unsets if `child` is %NULL, the focused child of `container`.
 * 
 * This function emits the GtkContainer::set_focus_child signal of
 * `container`. Implementations of #GtkContainer can override the
 * default behaviour by overriding the class closure of this signal.
 * 
 * This is function is mostly meant to be used by widgets. Applications can use
 * gtk_widget_grab_focus() to manually set the focus to a specific widget.
 * @param child a #GtkWidget, or %NULL
 */
set_focus_child(child?: (Gtk.Widget | null)): void
/**
 * Hooks up an adjustment to focus handling in a container, so when a child
 * of the container is focused, the adjustment is scrolled to show that
 * widget. This function sets the horizontal alignment.
 * See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining
 * the adjustment and gtk_container_set_focus_vadjustment() for setting
 * the vertical adjustment.
 * 
 * The adjustments have to be in pixel units and in the same coordinate
 * system as the allocation for immediate children of the container.
 * @param adjustment an adjustment which should be adjusted when the focus is   moved among the descendents of @container
 */
set_focus_hadjustment(adjustment: Gtk.Adjustment): void
/**
 * Hooks up an adjustment to focus handling in a container, so when a
 * child of the container is focused, the adjustment is scrolled to
 * show that widget. This function sets the vertical alignment. See
 * gtk_scrolled_window_get_vadjustment() for a typical way of obtaining
 * the adjustment and gtk_container_set_focus_hadjustment() for setting
 * the horizontal adjustment.
 * 
 * The adjustments have to be in pixel units and in the same coordinate
 * system as the allocation for immediate children of the container.
 * @param adjustment an adjustment which should be adjusted when the focus   is moved among the descendents of @container
 */
set_focus_vadjustment(adjustment: Gtk.Adjustment): void
/**
 * Sets the `reallocate_redraws` flag of the container to the given value.
 * 
 * Containers requesting reallocation redraws get automatically
 * redrawn if any of their children changed allocation.
 * @param needs_redraws the new value for the container’s @reallocate_redraws flag
 */
set_reallocate_redraws(needs_redraws: boolean): void
/**
 * Sets the resize mode for the container.
 * 
 * The resize mode of a container determines whether a resize request
 * will be passed to the container’s parent, queued for later execution
 * or executed immediately.
 * @param resize_mode the new resize mode
 */
set_resize_mode(resize_mode: Gtk.ResizeMode): void
/**
 * Removes a focus chain explicitly set with gtk_container_set_focus_chain().
 */
unset_focus_chain(): void
/**
 * Adds `widget` to `container`. Typically used for simple containers
 * such as #GtkWindow, #GtkFrame, or #GtkButton; for more complicated
 * layout containers such as #GtkBox or #GtkGrid, this function will
 * pick default packing parameters that may not be correct.  So
 * consider functions such as gtk_box_pack_start() and
 * gtk_grid_attach() as an alternative to gtk_container_add() in
 * those cases. A widget may be added to only one container at a time;
 * you can’t place the same widget inside two different containers.
 * 
 * Note that some containers, such as #GtkScrolledWindow or #GtkListBox,
 * may add intermediate children between the added widget and the
 * container.
 * @param widget a widget to be placed inside @container
 */
vfunc_add(widget: Gtk.Widget): void
vfunc_check_resize(): void
/**
 * Returns the type of the children supported by the container.
 * 
 * Note that this may return %G_TYPE_NONE to indicate that no more
 * children can be added, e.g. for a #GtkPaned which already has two
 * children.
 */
vfunc_child_type(): GObject.GType
vfunc_composite_name(child: Gtk.Widget): string
/**
 * Invokes `callback` on each direct child of `container,` including
 * children that are considered “internal” (implementation details
 * of the container). “Internal” children generally weren’t added
 * by the user of the container, but were added by the container
 * implementation itself.
 * 
 * Most applications should use gtk_container_foreach(), rather
 * than gtk_container_forall().
 * @param include_internals 
 * @param callback a callback
 */
vfunc_forall(include_internals: boolean, callback: Gtk.Callback): void
vfunc_get_child_property(child: Gtk.Widget, property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Returns a newly created widget path representing all the widget hierarchy
 * from the toplevel down to and including `child`.
 * @param child a child of @container
 */
vfunc_get_path_for_child(child: Gtk.Widget): Gtk.WidgetPath
/**
 * Removes `widget` from `container`. `widget` must be inside `container`.
 * Note that `container` will own a reference to `widget,` and that this
 * may be the last reference held; so removing a widget from its
 * container can destroy that widget. If you want to use `widget`
 * again, you need to add a reference to it before removing it from
 * a container, using g_object_ref(). If you don’t want to use `widget`
 * again it’s usually more efficient to simply destroy it directly
 * using gtk_widget_destroy() since this will remove it from the
 * container and help break any circular reference count cycles.
 * @param widget a current child of @container
 */
vfunc_remove(widget: Gtk.Widget): void
vfunc_set_child_property(child: Gtk.Widget, property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Sets, or unsets if `child` is %NULL, the focused child of `container`.
 * 
 * This function emits the GtkContainer::set_focus_child signal of
 * `container`. Implementations of #GtkContainer can override the
 * default behaviour by overriding the class closure of this signal.
 * 
 * This is function is mostly meant to be used by widgets. Applications can use
 * gtk_widget_grab_focus() to manually set the focus to a specific widget.
 * @param child a #GtkWidget, or %NULL
 */
vfunc_set_focus_child(child?: (Gtk.Widget | null)): void
/**
 * For widgets that can be “activated” (buttons, menu items, etc.)
 * this function activates them. Activation is what happens when you
 * press Enter on a widget during key navigation. If `widget` isn't
 * activatable, the function returns %FALSE.
 * @returns %TRUE if the widget was activatable
 */
activate(): boolean
/**
 * Installs an accelerator for this `widget` in `accel_group` that causes
 * `accel_signal` to be emitted if the accelerator is activated.
 * The `accel_group` needs to be added to the widget’s toplevel via
 * gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
 * Accelerators added through this function are not user changeable during
 * runtime. If you want to support accelerators that can be changed by the
 * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
 * gtk_menu_item_set_accel_path() instead.
 * @param accel_signal widget signal to emit on accelerator activation
 * @param accel_group accel group for this widget, added to its toplevel
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @param accel_flags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
 */
add_accelerator(accel_signal: string, accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): void
/**
 * Adds the device events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_device_events() for details.
 * @param device a #GdkDevice
 * @param events an event mask, see #GdkEventMask
 */
add_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Adds the events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_events() and the
 * [input handling overview][event-masks] for details.
 * @param events an event mask, see #GdkEventMask
 */
add_events(events: number): void
/**
 * Adds a widget to the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
 * list of mnemonic labels for the widget is cleared when the
 * widget is destroyed, so the caller must make sure to update
 * its internal state at this point as well, by using a connection
 * to the #GtkWidget::destroy signal or a weak notifier.
 * @param label a #GtkWidget that acts as a mnemonic label for @widget
 */
add_mnemonic_label(label: Gtk.Widget): void
/**
 * Queues an animation frame update and adds a callback to be called
 * before each frame. Until the tick callback is removed, it will be
 * called frequently (usually at the frame rate of the output device
 * or as quickly as the application can be repainted, whichever is
 * slower). For this reason, is most suitable for handling graphics
 * that change every frame or every few frames. The tick callback does
 * not automatically imply a relayout or repaint. If you want a
 * repaint or relayout, and aren’t changing widget properties that
 * would trigger that (for example, changing the text of a #GtkLabel),
 * then you will have to call gtk_widget_queue_resize() or
 * gtk_widget_queue_draw_area() yourself.
 * 
 * gdk_frame_clock_get_frame_time() should generally be used for timing
 * continuous animations and
 * gdk_frame_timings_get_predicted_presentation_time() if you are
 * trying to display isolated frames at particular times.
 * 
 * This is a more convenient alternative to connecting directly to the
 * #GdkFrameClock::update signal of #GdkFrameClock, since you don't
 * have to worry about when a #GdkFrameClock is assigned to a widget.
 * @param callback function to call for updating animations
 * @returns an id for the connection of this callback. Remove the callback     by passing it to gtk_widget_remove_tick_callback()
 */
add_tick_callback(callback: Gtk.TickCallback): number
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 * @returns %TRUE if the accelerator can be activated.
 */
can_activate_accel(signal_id: number): boolean
/**
 * This function is used by custom widget implementations; if you're
 * writing an app, you’d use gtk_widget_grab_focus() to move the focus
 * to a particular widget, and gtk_container_set_focus_chain() to
 * change the focus tab order. So you may want to investigate those
 * functions instead.
 * 
 * gtk_widget_child_focus() is called by containers as the user moves
 * around the window using keyboard shortcuts. `direction` indicates
 * what kind of motion is taking place (up, down, left, right, tab
 * forward, tab backward). gtk_widget_child_focus() emits the
 * #GtkWidget::focus signal; widgets override the default handler
 * for this signal in order to implement appropriate focus behavior.
 * 
 * The default ::focus handler for a widget should return %TRUE if
 * moving in `direction` left the focus on a focusable location inside
 * that widget, and %FALSE if moving in `direction` moved the focus
 * outside the widget. If returning %TRUE, widgets normally
 * call gtk_widget_grab_focus() to place the focus accordingly;
 * if returning %FALSE, they don’t modify the current focus location.
 * @param direction direction of focus movement
 * @returns %TRUE if focus ended up inside @widget
 */
child_focus(direction: Gtk.DirectionType): boolean
/**
 * Same as gtk_widget_path(), but always uses the name of a widget’s type,
 * never uses a custom name set with gtk_widget_set_name().
 */
class_path(): [number, string, string]
/**
 * Computes whether a container should give this widget extra space
 * when possible. Containers should check this, rather than
 * looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
 * 
 * This function already checks whether the widget is visible, so
 * visibility does not need to be checked separately. Non-visible
 * widgets are not expanded.
 * 
 * The computed expand value uses either the expand setting explicitly
 * set on the widget itself, or, if none has been explicitly set,
 * the widget may expand if some of its children do.
 * @param orientation expand direction
 * @returns whether widget tree rooted here should be expanded
 */
compute_expand(orientation: Gtk.Orientation): boolean
/**
 * Creates a new #PangoContext with the appropriate font map,
 * font options, font description, and base direction for drawing
 * text for this widget. See also gtk_widget_get_pango_context().
 * @returns the new #PangoContext
 */
create_pango_context(): Pango.Context
/**
 * Creates a new #PangoLayout with the appropriate font map,
 * font description, and base direction for drawing text for
 * this widget.
 * 
 * If you keep a #PangoLayout created in this way around, you need
 * to re-create it when the widget #PangoContext is replaced.
 * This can be tracked by using the #GtkWidget::screen-changed signal
 * on the widget.
 * @param text text to set on the layout (can be %NULL)
 * @returns the new #PangoLayout
 */
create_pango_layout(text?: (string | null)): Pango.Layout
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
destroy(): void
/**
 * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
 * %NULL.  It’s intended to be used as a callback connected to the
 * “destroy” signal of a widget. You connect gtk_widget_destroyed()
 * as a signal handler, and pass the address of your widget variable
 * as user data. Then when the widget is destroyed, the variable will
 * be set to %NULL. Useful for example to avoid multiple copies
 * of the same dialog.
 * @param widget_pointer address of a variable that contains @widget
 */
destroyed(widget_pointer: Gtk.Widget): Gtk.Widget
/**
 * Returns %TRUE if `device` has been shadowed by a GTK+
 * device grab on another widget, so it would stop sending
 * events to `widget`. This may be used in the
 * #GtkWidget::grab-notify signal to check for specific
 * devices. See gtk_device_grab_add().
 * @param device a #GdkDevice
 * @returns %TRUE if there is an ongoing grab on @device          by another #GtkWidget than @widget.
 */
device_is_shadowed(device: Gdk.Device): boolean
/**
 * This function is equivalent to gtk_drag_begin_with_coordinates(),
 * passing -1, -1 as coordinates.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @returns the context for this drag
 */
drag_begin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: (Gdk.Event | null)): Gdk.DragContext
/**
 * Initiates a drag on the source side. The function only needs to be used
 * when the application is starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is %NULL, then %GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used to get information about the drag.
 * 
 * Generally there are three cases when you want to start a drag by hand by
 * calling this function:
 * 
 * 1. During a #GtkWidget::button-press-event handler, if you want to start a drag
 * immediately when the user presses the mouse button.  Pass the `event`
 * that you have in your #GtkWidget::button-press-event handler.
 * 
 * 2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
 * when the mouse moves past a certain threshold distance after a button-press.
 * Pass the `event` that you have in your #GtkWidget::motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).
 * If you really cannot pass a real event, pass %NULL instead.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @param x The initial x coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @param y The initial y coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @returns the context for this drag
 */
drag_begin_with_coordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: (Gdk.Event | null), x: number, y: number): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param start_x X coordinate of start of drag
 * @param start_y Y coordinate of start of drag
 * @param current_x current X coordinate
 * @param current_y current Y coordinate
 * @returns %TRUE if the drag threshold has been passed.
 */
drag_check_threshold(start_x: number, start_y: number, current_x: number, current_y: number): boolean
/**
 * Add the image targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_uri_targets(): void
/**
 * Looks for a match between the supported targets of `context` and the
 * `dest_target_list,` returning the first matching target, otherwise
 * returning %GDK_NONE. `dest_target_list` should usually be the return
 * value from gtk_drag_dest_get_target_list(), but some widgets may
 * have different valid targets for different parts of the widget; in
 * that case, they will have to implement a drag_motion handler that
 * passes the correct target list to this function.
 * @param context drag context
 * @param target_list list of droppable targets, or %NULL to use    gtk_drag_dest_get_target_list (@widget).
 * @returns first target that the source offers     and the dest can accept, or %GDK_NONE
 */
drag_dest_find_target(context: Gdk.DragContext, target_list?: (Gtk.TargetList | null)): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_dest_get_target_list(): (Gtk.TargetList | null)
/**
 * Returns whether the widget has been configured to always
 * emit #GtkWidget::drag-motion signals.
 * @returns %TRUE if the widget always emits   #GtkWidget::drag-motion events
 */
drag_dest_get_track_motion(): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget’s drag-and-drop signals
 * (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget’s #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget::drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget::drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There’s no way to set a default action here, you can use the
 * #GtkWidget::drag-motion callback for that. Here’s an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * 
 * ```c
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of     #GtkTargetEntrys indicating the drop types that this @widget will     accept, or %NULL. Later you can access the list with     gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this @widget.
 */
drag_dest_set(flags: Gtk.DestDefaults, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets this widget as a proxy for drops to another window.
 * @param proxy_window the window to which to forward drag events
 * @param protocol the drag protocol which the @proxy_window accepts   (You can use gdk_drag_get_protocol() to determine this)
 * @param use_coordinates If %TRUE, send the same coordinates to the   destination, because it is an embedded   subwindow.
 */
drag_dest_set_proxy(proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param target_list list of droppable targets, or %NULL for none
 */
drag_dest_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Tells the widget to emit #GtkWidget::drag-motion and
 * #GtkWidget::drag-leave events regardless of the targets and the
 * %GTK_DEST_DEFAULT_MOTION flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param track_motion whether to accept all targets
 */
drag_dest_set_track_motion(track_motion: boolean): void
/**
 * Clears information about a drop destination set with
 * gtk_drag_dest_set(). The widget will no longer receive
 * notification of drags.
 */
drag_dest_unset(): void
/**
 * Gets the data associated with a drag. When the data
 * is received or the retrieval fails, GTK+ will emit a
 * #GtkWidget::drag-data-received signal. Failure of the retrieval
 * is indicated by the length field of the `selection_data`
 * signal parameter being negative. However, when gtk_drag_get_data()
 * is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
 * then the widget will not receive notification of failed
 * drops.
 * @param context the drag context
 * @param target the target (form of the data) to retrieve
 * @param time_ a timestamp for retrieving the data. This will   generally be the time received in a #GtkWidget::drag-motion   or #GtkWidget::drag-drop signal
 */
drag_get_data(context: Gdk.DragContext, target: Gdk.Atom, time_: number): void
/**
 * Highlights a widget as a currently hovered drop target.
 * To end the highlight, call gtk_drag_unhighlight().
 * GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
 */
drag_highlight(): void
/**
 * Add the writable image targets supported by #GtkSelectionData to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_uri_targets(): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_source_get_target_list(): (Gtk.TargetList | null)
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param start_button_mask the bitmask of buttons that can start the drag
 * @param targets the table of targets     that the drag will support, may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
drag_source_set(start_button_mask: Gdk.ModifierType, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to `icon`. See the docs for #GtkIconTheme for more details.
 * @param icon A #GIcon
 */
drag_source_set_icon_gicon(icon: Gio.Icon): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param icon_name name of icon to use
 */
drag_source_set_icon_name(icon_name: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
drag_source_set_icon_pixbuf(pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param stock_id the ID of the stock icon to use
 */
drag_source_set_icon_stock(stock_id: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param target_list list of draggable targets, or %NULL for none
 */
drag_source_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Undoes the effects of gtk_drag_source_set().
 */
drag_source_unset(): void
/**
 * Removes a highlight set by gtk_drag_highlight() from
 * a widget.
 */
drag_unhighlight(): void
/**
 * Draws `widget` to `cr`. The top left corner of the widget will be
 * drawn to the currently set origin point of `cr`.
 * 
 * You should pass a cairo context as `cr` argument that is in an
 * original state. Otherwise the resulting drawing is undefined. For
 * example changing the operator using cairo_set_operator() or the
 * line width using cairo_set_line_width() might have unwanted side
 * effects.
 * You may however change the context’s transform matrix - like with
 * cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
 * region with cairo_clip() prior to calling this function. Also, it
 * is fine to modify the context with cairo_save() and
 * cairo_push_group() prior to calling this function.
 * 
 * Note that special-purpose widgets may contain special code for
 * rendering to the screen and might appear differently on screen
 * and when rendered using gtk_widget_draw().
 * @param cr a cairo context to draw to
 */
draw(cr: cairo.Context): void
/**
 * Ensures that `widget` has a style (`widget->`style).
 * 
 * Not a very useful function; most of the time, if you
 * want the style, the widget is realized, and realized
 * widgets are guaranteed to have a style already.
 */
ensure_style(): void
/**
 * Notifies the user about an input-related error on this widget.
 * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
 * gdk_window_beep(), otherwise it does nothing.
 * 
 * Note that the effect of gdk_window_beep() can be configured in many
 * ways, depending on the windowing backend and the desktop environment
 * or window manager that is used.
 */
error_bell(): void
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 * @returns return from the event signal emission (%TRUE if               the event was handled)
 */
event(event: Gdk.Event): boolean
/**
 * Stops emission of #GtkWidget::child-notify signals on `widget`. The
 * signals are queued until gtk_widget_thaw_child_notify() is called
 * on `widget`.
 * 
 * This is the analogue of g_object_freeze_notify() for child properties.
 */
freeze_child_notify(): void
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 * @returns the #AtkObject associated with @widget
 */
get_accessible(): Atk.Object
/**
 * Retrieves the #GActionGroup that was registered using `prefix`. The resulting
 * #GActionGroup may have been registered to `widget` or any #GtkWidget in its
 * ancestry.
 * 
 * If no action group was found matching `prefix,` then %NULL is returned.
 * @param prefix The “prefix” of the action group.
 * @returns A #GActionGroup or %NULL.
 */
get_action_group(prefix: string): (Gio.ActionGroup | null)
/**
 * Returns the baseline that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function, and when allocating child
 * widgets in #GtkWidget::size_allocate.
 * @returns the baseline of the @widget, or -1 if none
 */
get_allocated_baseline(): number
/**
 * Returns the height that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the height of the @widget
 */
get_allocated_height(): number
/**
 * Retrieves the widget’s allocated size.
 * 
 * This function returns the last values passed to
 * gtk_widget_size_allocate_with_baseline(). The value differs from
 * the size returned in gtk_widget_get_allocation() in that functions
 * like gtk_widget_set_halign() can adjust the allocation, but not
 * the value returned by this function.
 * 
 * If a widget is not visible, its allocated size is 0.
 */
get_allocated_size(): [Gtk.Allocation, number]
/**
 * Returns the width that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the width of the @widget
 */
get_allocated_width(): number
/**
 * Retrieves the widget’s allocation.
 * 
 * Note, when implementing a #GtkContainer: a widget’s allocation will
 * be its “adjusted” allocation, that is, the widget’s parent
 * container typically calls gtk_widget_size_allocate() with an
 * allocation, and that allocation is then adjusted (to handle margin
 * and alignment for example) before assignment to the widget.
 * gtk_widget_get_allocation() returns the adjusted allocation that
 * was actually assigned to the widget. The adjusted allocation is
 * guaranteed to be completely contained within the
 * gtk_widget_size_allocate() allocation, however. So a #GtkContainer
 * is guaranteed that its children stay inside the assigned bounds,
 * but not that they have exactly the bounds the container assigned.
 * There is no way to get the original allocation assigned by
 * gtk_widget_size_allocate(), since it isn’t stored; if a container
 * implementation needs that information it will have to track it itself.
 */
get_allocation(): Gtk.Allocation
/**
 * Gets the first ancestor of `widget` with type `widget_type`. For example,
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
 * the first #GtkBox that’s an ancestor of `widget`. No reference will be
 * added to the returned widget; it should not be unreferenced. See note
 * about checking for a toplevel #GtkWindow in the docs for
 * gtk_widget_get_toplevel().
 * 
 * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
 * considers `widget` to be an ancestor of itself.
 * @param widget_type ancestor type
 * @returns the ancestor widget, or %NULL if not found
 */
get_ancestor(widget_type: GObject.GType): (Gtk.Widget | null)
/**
 * Determines whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * See gtk_widget_set_app_paintable()
 * @returns %TRUE if the widget is app paintable
 */
get_app_paintable(): boolean
/**
 * Determines whether `widget` can be a default widget. See
 * gtk_widget_set_can_default().
 * @returns %TRUE if @widget can be a default widget, %FALSE otherwise
 */
get_can_default(): boolean
/**
 * Determines whether `widget` can own the input focus. See
 * gtk_widget_set_can_focus().
 * @returns %TRUE if @widget can own the input focus, %FALSE otherwise
 */
get_can_focus(): boolean
/**
 * This function is only for use in widget implementations. Obtains
 * `widget->`requisition, unless someone has forced a particular
 * geometry on the widget (e.g. with gtk_widget_set_size_request()),
 * in which case it returns that geometry instead of the widget's
 * requisition.
 * 
 * This function differs from gtk_widget_size_request() in that
 * it retrieves the last size request value from `widget->`requisition,
 * while gtk_widget_size_request() actually calls the "size_request" method
 * on `widget` to compute the size request and fill in `widget->`requisition,
 * and only then returns `widget->`requisition.
 * 
 * Because this function does not call the “size_request” method, it
 * can only be used when you know that `widget->`requisition is
 * up-to-date, that is, gtk_widget_size_request() has been called
 * since the last time a resize was queued. In general, only container
 * implementations have this information; applications should use
 * gtk_widget_size_request().
 */
get_child_requisition(): Gtk.Requisition
/**
 * Retrieves the widget’s clip area.
 * 
 * The clip area is the area in which all of `widget'`s drawing will
 * happen. Other toolkits call it the bounding box.
 * 
 * Historically, in GTK+ the clip area has been equal to the allocation
 * retrieved via gtk_widget_get_allocation().
 */
get_clip(): Gtk.Allocation
/**
 * Returns the clipboard object for the given selection to
 * be used with `widget`. `widget` must have a #GdkDisplay
 * associated with it, so must be attached to a toplevel
 * window.
 * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
 * @returns the appropriate clipboard object. If no             clipboard already exists, a new one will             be created. Once a clipboard object has             been created, it is persistent for all time.
 */
get_clipboard(selection: Gdk.Atom): Gtk.Clipboard
/**
 * Obtains the composite name of a widget.
 * @returns the composite name of @widget, or %NULL if @widget is not   a composite child. The string should be freed when it is no   longer needed.
 */
get_composite_name(): string
/**
 * Returns whether `device` can interact with `widget` and its
 * children. See gtk_widget_set_device_enabled().
 * @param device a #GdkDevice
 * @returns %TRUE is @device is enabled for @widget
 */
get_device_enabled(device: Gdk.Device): boolean
/**
 * Returns the events mask for the widget corresponding to an specific device. These
 * are the events that the widget will receive when `device` operates on it.
 * @param device a #GdkDevice
 * @returns device event mask for @widget
 */
get_device_events(device: Gdk.Device): Gdk.EventMask
/**
 * Gets the reading direction for a particular widget. See
 * gtk_widget_set_direction().
 * @returns the reading direction for the widget.
 */
get_direction(): Gtk.TextDirection
/**
 * Get the #GdkDisplay for the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow at the top.
 * 
 * In general, you should only create display specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkDisplay for the toplevel for this widget.
 */
get_display(): Gdk.Display
/**
 * Determines whether the widget is double buffered.
 * 
 * See gtk_widget_set_double_buffered()
 * @returns %TRUE if the widget is double buffered
 */
get_double_buffered(): boolean
/**
 * Returns the event mask (see #GdkEventMask) for the widget. These are the
 * events that the widget will receive.
 * 
 * Note: Internally, the widget event mask will be the logical OR of the event
 * mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
 * event mask necessary to cater for every #GtkEventController created for the
 * widget.
 * @returns event mask for @widget
 */
get_events(): number
/**
 * Returns whether the widget should grab focus when it is clicked with the mouse.
 * See gtk_widget_set_focus_on_click().
 * @returns %TRUE if the widget should grab focus when it is clicked with               the mouse.
 */
get_focus_on_click(): boolean
/**
 * Gets the font map that has been set with gtk_widget_set_font_map().
 * @returns A #PangoFontMap, or %NULL
 */
get_font_map(): (Pango.FontMap | null)
/**
 * Returns the #cairo_font_options_t used for Pango rendering. When not set,
 * the defaults font options for the #GdkScreen will be used.
 * @returns the #cairo_font_options_t or %NULL if not set
 */
get_font_options(): (cairo.FontOptions | null)
/**
 * Obtains the frame clock for a widget. The frame clock is a global
 * “ticker” that can be used to drive animations and repaints.  The
 * most common reason to get the frame clock is to call
 * gdk_frame_clock_get_frame_time(), in order to get a time to use for
 * animating. For example you might record the start of the animation
 * with an initial value from gdk_frame_clock_get_frame_time(), and
 * then update the animation by calling
 * gdk_frame_clock_get_frame_time() again during each repaint.
 * 
 * gdk_frame_clock_request_phase() will result in a new frame on the
 * clock, but won’t necessarily repaint any widgets. To repaint a
 * widget, you have to use gtk_widget_queue_draw() which invalidates
 * the widget (thus scheduling it to receive a draw on the next
 * frame). gtk_widget_queue_draw() will also end up requesting a frame
 * on the appropriate frame clock.
 * 
 * A widget’s frame clock will not change while the widget is
 * mapped. Reparenting a widget (which implies a temporary unmap) can
 * change the widget’s frame clock.
 * 
 * Unrealized widgets do not have a frame clock.
 * @returns a #GdkFrameClock, or %NULL if widget is unrealized
 */
get_frame_clock(): (Gdk.FrameClock | null)
/**
 * Gets the value of the #GtkWidget:halign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
 * alignment.
 * @returns the horizontal alignment of @widget
 */
get_halign(): Gtk.Align
/**
 * Returns the current value of the has-tooltip property.  See
 * #GtkWidget:has-tooltip for more information.
 * @returns current value of has-tooltip on @widget.
 */
get_has_tooltip(): boolean
/**
 * Determines whether `widget` has a #GdkWindow of its own. See
 * gtk_widget_set_has_window().
 * @returns %TRUE if @widget has a window, %FALSE otherwise
 */
get_has_window(): boolean
/**
 * Gets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Containers should use gtk_widget_compute_expand() rather than
 * this function, to see whether a widget, or any of its children,
 * has the expand flag set. If any child of a widget wants to
 * expand, the parent may ask to expand also.
 * 
 * This function only looks at the widget’s own hexpand flag, rather
 * than computing whether the entire widget tree rooted at this widget
 * wants to expand.
 * @returns whether hexpand flag is set
 */
get_hexpand(): boolean
/**
 * Gets whether gtk_widget_set_hexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @returns whether hexpand has been explicitly set
 */
get_hexpand_set(): boolean
/**
 * Whether the widget is mapped.
 * @returns %TRUE if the widget is mapped, %FALSE otherwise.
 */
get_mapped(): boolean
/**
 * Gets the value of the #GtkWidget:margin-bottom property.
 * @returns The bottom margin of @widget
 */
get_margin_bottom(): number
/**
 * Gets the value of the #GtkWidget:margin-end property.
 * @returns The end margin of @widget
 */
get_margin_end(): number
/**
 * Gets the value of the #GtkWidget:margin-left property.
 * @returns The left margin of @widget
 */
get_margin_left(): number
/**
 * Gets the value of the #GtkWidget:margin-right property.
 * @returns The right margin of @widget
 */
get_margin_right(): number
/**
 * Gets the value of the #GtkWidget:margin-start property.
 * @returns The start margin of @widget
 */
get_margin_start(): number
/**
 * Gets the value of the #GtkWidget:margin-top property.
 * @returns The top margin of @widget
 */
get_margin_top(): number
/**
 * Returns the modifier mask the `widget’`s windowing system backend
 * uses for a particular purpose.
 * 
 * See gdk_keymap_get_modifier_mask().
 * @param intent the use case for the modifier mask
 * @returns the modifier mask used for @intent.
 */
get_modifier_mask(intent: Gdk.ModifierIntent): Gdk.ModifierType
/**
 * Returns the current modifier style for the widget. (As set by
 * gtk_widget_modify_style().) If no style has previously set, a new
 * #GtkRcStyle will be created with all values unset, and set as the
 * modifier style for the widget. If you make changes to this rc
 * style, you must call gtk_widget_modify_style(), passing in the
 * returned rc style, to make sure that your changes take effect.
 * 
 * Caution: passing the style back to gtk_widget_modify_style() will
 * normally end up destroying it, because gtk_widget_modify_style() copies
 * the passed-in style and sets the copy as the new modifier style,
 * thus dropping any reference to the old modifier style. Add a reference
 * to the modifier style if you want to keep it alive.
 * @returns the modifier style for the widget.     This rc style is owned by the widget. If you want to keep a     pointer to value this around, you must add a refcount using     g_object_ref().
 */
get_modifier_style(): Gtk.RcStyle
/**
 * Retrieves the name of a widget. See gtk_widget_set_name() for the
 * significance of widget names.
 * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
 */
get_name(): string
/**
 * Returns the current value of the #GtkWidget:no-show-all property,
 * which determines whether calls to gtk_widget_show_all()
 * will affect this widget.
 * @returns the current value of the “no-show-all” property.
 */
get_no_show_all(): boolean
/**
 * Fetches the requested opacity for this widget.
 * See gtk_widget_set_opacity().
 * @returns the requested opacity for this widget.
 */
get_opacity(): number
/**
 * Gets a #PangoContext with the appropriate font map, font description,
 * and base direction for this widget. Unlike the context returned
 * by gtk_widget_create_pango_context(), this context is owned by
 * the widget (it can be used until the screen for the widget changes
 * or the widget is removed from its toplevel), and will be updated to
 * match any changes to the widget’s attributes. This can be tracked
 * by using the #GtkWidget::screen-changed signal on the widget.
 * @returns the #PangoContext for the widget.
 */
get_pango_context(): Pango.Context
/**
 * Gets `widget’`s parent window, or %NULL if it does not have one.
 * @returns the parent window of @widget, or %NULL if it does not have a parent window.
 */
get_parent_window(): (Gdk.Window | null)
/**
 * Returns the #GtkWidgetPath representing `widget,` if the widget
 * is not connected to a toplevel widget, a partial path will be
 * created.
 * @returns The #GtkWidgetPath representing @widget
 */
get_path(): Gtk.WidgetPath
/**
 * Obtains the location of the mouse pointer in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(); and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 */
get_pointer(): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves the minimum and natural size of a widget, taking
 * into account the widget’s preference for height-for-width management.
 * 
 * This is used to retrieve a suitable size by container widgets which do
 * not impose any restrictions on the child placement. It can be used
 * to deduce toplevel window and menu sizes as well as child widgets in
 * free-form containers such as GtkLayout.
 * 
 * Handle with care. Note that the natural height of a height-for-width
 * widget will generally be a smaller size than the minimum height, since the required
 * height for the natural width is generally smaller than the required height for
 * the minimum width.
 * 
 * Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
 * baseline alignment.
 */
get_preferred_size(): [Gtk.Requisition | null, Gtk.Requisition | null]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
get_preferred_width_for_height(height: number): [number, number]
/**
 * Determines whether `widget` is realized.
 * @returns %TRUE if @widget is realized, %FALSE otherwise
 */
get_realized(): boolean
/**
 * Determines whether `widget` is always treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_set_receives_default().
 * @returns %TRUE if @widget acts as the default widget when focused,               %FALSE otherwise
 */
get_receives_default(): boolean
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 * @returns The #GtkSizeRequestMode preferred by @widget.
 */
get_request_mode(): Gtk.SizeRequestMode
/**
 * Retrieves the widget’s requisition.
 * 
 * This function should only be used by widget implementations in
 * order to figure whether the widget’s requisition has actually
 * changed after some internal state change (so that they can call
 * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
 * 
 * Normally, gtk_widget_size_request() should be used.
 */
get_requisition(): Gtk.Requisition
/**
 * Get the root window where this widget is located. This function can
 * only be called after the widget has been added to a widget
 * hierarchy with #GtkWindow at the top.
 * 
 * The root window is useful for such purposes as creating a popup
 * #GdkWindow associated with the window. In general, you should only
 * create display specific resources when a widget has been realized,
 * and you should free those resources when the widget is unrealized.
 * @returns the #GdkWindow root window for the toplevel for this widget.
 */
get_root_window(): Gdk.Window
/**
 * Retrieves the internal scale factor that maps from window coordinates
 * to the actual device pixels. On traditional systems this is 1, on
 * high density outputs, it can be a higher value (typically 2).
 * 
 * See gdk_window_get_scale_factor().
 * @returns the scale factor for @widget
 */
get_scale_factor(): number
/**
 * Get the #GdkScreen from the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow
 * at the top.
 * 
 * In general, you should only create screen specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkScreen for the toplevel for this widget.
 */
get_screen(): Gdk.Screen
/**
 * Returns the widget’s sensitivity (in the sense of returning
 * the value that has been set using gtk_widget_set_sensitive()).
 * 
 * The effective sensitivity of a widget is however determined by both its
 * own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
 * @returns %TRUE if the widget is sensitive
 */
get_sensitive(): boolean
/**
 * Gets the settings object holding the settings used for this widget.
 * 
 * Note that this function can only be called when the #GtkWidget
 * is attached to a toplevel, since the settings object is specific
 * to a particular #GdkScreen.
 * @returns the relevant #GtkSettings object
 */
get_settings(): Gtk.Settings
/**
 * Gets the size request that was explicitly set for the widget using
 * gtk_widget_set_size_request(). A value of -1 stored in `width` or
 * `height` indicates that that dimension has not been set explicitly
 * and the natural requisition of the widget will be used instead. See
 * gtk_widget_set_size_request(). To get the size a widget will
 * actually request, call gtk_widget_get_preferred_size() instead of
 * this function.
 */
get_size_request(): [number, number]
/**
 * Returns the widget’s state. See gtk_widget_set_state().
 * @returns the state of @widget.
 */
get_state(): Gtk.StateType
/**
 * Returns the widget state as a flag set. It is worth mentioning
 * that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
 * returned, that is, also based on parent insensitivity, even if
 * `widget` itself is sensitive.
 * 
 * Also note that if you are looking for a way to obtain the
 * #GtkStateFlags to pass to a #GtkStyleContext method, you
 * should look at gtk_style_context_get_state().
 * @returns The state flags for widget
 */
get_state_flags(): Gtk.StateFlags
/**
 * Simply an accessor function that returns `widget->`style.
 * @returns the widget’s #GtkStyle
 */
get_style(): Gtk.Style
/**
 * Returns the style context associated to `widget`. The returned object is
 * guaranteed to be the same for the lifetime of `widget`.
 * @returns a #GtkStyleContext. This memory is owned by @widget and          must not be freed.
 */
get_style_context(): Gtk.StyleContext
/**
 * Returns %TRUE if `widget` is multiple pointer aware. See
 * gtk_widget_set_support_multidevice() for more information.
 * @returns %TRUE if @widget is multidevice aware.
 */
get_support_multidevice(): boolean
/**
 * Fetch an object build from the template XML for `widget_type` in this `widget` instance.
 * 
 * This will only report children which were previously declared with
 * gtk_widget_class_bind_template_child_full() or one of its
 * variants.
 * 
 * This function is only meant to be called for code which is private to the `widget_type` which
 * declared the child and is meant for language bindings which cannot easily make use
 * of the GObject structure offsets.
 * @param widget_type The #GType to get a template child for
 * @param name The “id” of the child defined in the template XML
 * @returns The object built in the template XML with the id @name
 */
get_template_child<T = GObject.Object>(widget_type: GObject.GType, name: string): T
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_markup(): (string | null)
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_text(): (string | null)
/**
 * Returns the #GtkWindow of the current tooltip. This can be the
 * GtkWindow created by default, or the custom tooltip window set
 * using gtk_widget_set_tooltip_window().
 * @returns The #GtkWindow of the current tooltip.
 */
get_tooltip_window(): Gtk.Window
/**
 * This function returns the topmost widget in the container hierarchy
 * `widget` is a part of. If `widget` has no parent widgets, it will be
 * returned as the topmost widget. No reference will be added to the
 * returned widget; it should not be unreferenced.
 * 
 * Note the difference in behavior vs. gtk_widget_get_ancestor();
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
 * would return
 * %NULL if `widget` wasn’t inside a toplevel window, and if the
 * window was inside a #GtkWindow-derived widget which was in turn
 * inside the toplevel #GtkWindow. While the second case may
 * seem unlikely, it actually happens when a #GtkPlug is embedded
 * inside a #GtkSocket within the same application.
 * 
 * To reliably find the toplevel #GtkWindow, use
 * gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
 * on the result. For instance, to get the title of a widget's toplevel
 * window, one might use:
 * 
 * ```c
 * static const char *
 * get_widget_toplevel_title (GtkWidget *widget)
 * {
 *   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 *   if (GTK_IS_WINDOW (toplevel))
 *     {
 *       return gtk_window_get_title (GTK_WINDOW (toplevel));
 *     }
 * 
 *   return NULL;
 * }
 * ```
 * 
 * @returns the topmost ancestor of @widget, or @widget itself    if there’s no ancestor.
 */
get_toplevel(): Gtk.Widget
/**
 * Gets the value of the #GtkWidget:valign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. If your widget want to support baseline aligned
 * children it must use gtk_widget_get_valign_with_baseline(), or
 * `g_object_get (widget, "valign", &value, NULL)`, which will
 * also report the true value.
 * @returns the vertical alignment of @widget, ignoring baseline alignment
 */
get_valign(): Gtk.Align
/**
 * Gets the value of the #GtkWidget:valign property, including
 * %GTK_ALIGN_BASELINE.
 * @returns the vertical alignment of @widget
 */
get_valign_with_baseline(): Gtk.Align
/**
 * Gets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_get_hexpand() for more detail.
 * @returns whether vexpand flag is set
 */
get_vexpand(): boolean
/**
 * Gets whether gtk_widget_set_vexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * See gtk_widget_get_hexpand_set() for more detail.
 * @returns whether vexpand has been explicitly set
 */
get_vexpand_set(): boolean
/**
 * Determines whether the widget is visible. If you want to
 * take into account whether the widget’s parent is also marked as
 * visible, use gtk_widget_is_visible() instead.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See gtk_widget_set_visible().
 * @returns %TRUE if the widget is visible
 */
get_visible(): boolean
/**
 * Gets the visual that will be used to render `widget`.
 * @returns the visual for @widget
 */
get_visual(): Gdk.Visual
/**
 * Returns the widget’s window if it is realized, %NULL otherwise
 * @returns @widget’s window.
 */
get_window(): (Gdk.Window | null)
/**
 * Makes `widget` the current grabbed widget.
 * 
 * This means that interaction with other widgets in the same
 * application is blocked and mouse as well as keyboard events
 * are delivered to this widget.
 * 
 * If `widget` is not sensitive, it is not set as the current
 * grabbed widget and this function does nothing.
 */
grab_add(): void
/**
 * Causes `widget` to become the default widget. `widget` must be able to be
 * a default widget; typically you would ensure this yourself
 * by calling gtk_widget_set_can_default() with a %TRUE value.
 * The default widget is activated when
 * the user presses Enter in a window. Default widgets must be
 * activatable, that is, gtk_widget_activate() should affect them. Note
 * that #GtkEntry widgets require the “activates-default” property
 * set to %TRUE before they activate the default widget when Enter
 * is pressed and the #GtkEntry is focused.
 */
grab_default(): void
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
grab_focus(): void
/**
 * Removes the grab from the given widget.
 * 
 * You have to pair calls to gtk_grab_add() and gtk_grab_remove().
 * 
 * If `widget` does not have the grab, this function does nothing.
 */
grab_remove(): void
/**
 * Determines whether the widget is currently grabbing events, so it
 * is the only widget receiving input events (keyboard and mouse).
 * 
 * See also gtk_grab_add().
 * @returns %TRUE if the widget is in the grab_widgets stack
 */
has_grab(): boolean
/**
 * Determines if the widget style has been looked up through the rc mechanism.
 * @returns %TRUE if the widget has been looked up through the rc   mechanism, %FALSE otherwise.
 */
has_rc_style(): boolean
/**
 * Checks whether there is a #GdkScreen is associated with
 * this widget. All toplevel widgets have an associated
 * screen, and all widgets added into a hierarchy with a toplevel
 * window at the top.
 * @returns %TRUE if there is a #GdkScreen associated   with the widget.
 */
has_screen(): boolean
/**
 * Determines if the widget should show a visible indication that
 * it has the global input focus. This is a convenience function for
 * use in ::draw handlers that takes into account whether focus
 * indication should currently be shown in the toplevel window of
 * `widget`. See gtk_window_get_focus_visible() for more information
 * about focus indication.
 * 
 * To find out if the widget has the global input focus, use
 * gtk_widget_has_focus().
 * @returns %TRUE if the widget should display a “focus rectangle”
 */
has_visible_focus(): boolean
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
hide(): void
/**
 * Utility function; intended to be connected to the #GtkWidget::delete-event
 * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
 * argument, then returns %TRUE. If connected to ::delete-event, the
 * result is that clicking the close button for a window (on the
 * window frame, top right corner usually) will hide but not destroy
 * the window. By default, GTK+ destroys windows when ::delete-event
 * is received.
 * @returns %TRUE
 */
hide_on_delete(): boolean
/**
 * Returns whether the widget is currently being destroyed.
 * This information can sometimes be used to avoid doing
 * unnecessary work.
 * @returns %TRUE if @widget is being destroyed
 */
in_destruction(): boolean
/**
 * Creates and initializes child widgets defined in templates. This
 * function must be called in the instance initializer for any
 * class which assigned itself a template using gtk_widget_class_set_template()
 * 
 * It is important to call this function in the instance initializer
 * of a #GtkWidget subclass and not in #GObject.constructed() or
 * #GObject.constructor() for two reasons.
 * 
 * One reason is that generally derived widgets will assume that parent
 * class composite widgets have been created in their instance
 * initializers.
 * 
 * Another reason is that when calling g_object_new() on a widget with
 * composite templates, it’s important to build the composite widgets
 * before the construct properties are set. Properties passed to g_object_new()
 * should take precedence over properties set in the private template XML.
 */
init_template(): void
/**
 * Sets an input shape for this widget’s GDK window. This allows for
 * windows which react to mouse click in a nonrectangular region, see
 * gdk_window_input_shape_combine_region() for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
input_shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Inserts `group` into `widget`. Children of `widget` that implement
 * #GtkActionable can then be associated with actions in `group` by
 * setting their “action-name” to
 * `prefix`.`action-name`.
 * 
 * If `group` is %NULL, a previously inserted group for `name` is removed
 * from `widget`.
 * @param name the prefix for actions in @group
 * @param group a #GActionGroup, or %NULL
 */
insert_action_group(name: string, group?: (Gio.ActionGroup | null)): void
/**
 * Computes the intersection of a `widget’`s area and `area,` storing
 * the intersection in `intersection,` and returns %TRUE if there was
 * an intersection.  `intersection` may be %NULL if you’re only
 * interested in whether there was an intersection.
 * @param area a rectangle
 * @returns %TRUE if there was an intersection
 */
intersect(area: Gdk.Rectangle): [boolean, Gdk.Rectangle | null]
/**
 * Determines whether `widget` is somewhere inside `ancestor,` possibly with
 * intermediate containers.
 * @param ancestor another #GtkWidget
 * @returns %TRUE if @ancestor contains @widget as a child,    grandchild, great grandchild, etc.
 */
is_ancestor(ancestor: Gtk.Widget): boolean
/**
 * Whether `widget` can rely on having its alpha channel
 * drawn correctly. On X11 this function returns whether a
 * compositing manager is running for `widget’`s screen.
 * 
 * Please note that the semantics of this call will change
 * in the future if used on a widget that has a composited
 * window in its hierarchy (as set by gdk_window_set_composited()).
 * @returns %TRUE if the widget can rely on its alpha channel being drawn correctly.
 */
is_composited(): boolean
/**
 * Determines whether `widget` can be drawn to. A widget can be drawn
 * to if it is mapped and visible.
 * @returns %TRUE if @widget is drawable, %FALSE otherwise
 */
is_drawable(): boolean
/**
 * Returns the widget’s effective sensitivity, which means
 * it is sensitive itself and also its parent widget is sensitive
 * @returns %TRUE if the widget is effectively sensitive
 */
is_sensitive(): boolean
/**
 * Determines whether `widget` is a toplevel widget.
 * 
 * Currently only #GtkWindow and #GtkInvisible (and out-of-process
 * #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
 * widget.
 * @returns %TRUE if @widget is a toplevel, %FALSE otherwise
 */
is_toplevel(): boolean
/**
 * Determines whether the widget and all its parents are marked as
 * visible.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See also gtk_widget_get_visible() and gtk_widget_set_visible()
 * @returns %TRUE if the widget and all its parents are visible
 */
is_visible(): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 * @returns %TRUE if stopping keyboard navigation is fine, %FALSE               if the emitting widget should try to handle the keyboard               navigation attempt in its parent container(s).
 */
keynav_failed(direction: Gtk.DirectionType): boolean
/**
 * Lists the closures used by `widget` for accelerator group connections
 * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
 * The closures can be used to monitor accelerator changes on `widget,`
 * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
 * #GtkAccelGroup of a closure which can be found out with
 * gtk_accel_group_from_accel_closure().
 * @returns a newly allocated #GList of closures
 */
list_accel_closures(): GObject.Closure[]
/**
 * Retrieves a %NULL-terminated array of strings containing the prefixes of
 * #GActionGroup's available to `widget`.
 * @returns a %NULL-terminated array of strings.
 */
list_action_prefixes(): string[]
/**
 * Returns a newly allocated list of the widgets, normally labels, for
 * which this widget is the target of a mnemonic (see for example,
 * gtk_label_set_mnemonic_widget()).
 * 
 * The widgets in the list are not individually referenced. If you
 * want to iterate through the list and perform actions involving
 * callbacks that might destroy the widgets, you
 * must call `g_list_foreach (result,
 * (GFunc)g_object_ref, NULL)` first, and then unref all the
 * widgets afterwards.
 * @returns the list of  mnemonic labels; free this list  with g_list_free() when you are done with it.
 */
list_mnemonic_labels(): Gtk.Widget[]
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
map(): void
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 * @returns %TRUE if the signal has been handled
 */
mnemonic_activate(group_cycling: boolean): boolean
mnemonic_activate(...args: never[]): any
/**
 * Sets the base color for a widget in a particular state.
 * All other style values are left untouched. The base color
 * is the background color used along with the text color
 * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
 * and #GtkTextView. See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > base color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the base color on that.
 * @param state the state for which to set the base color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_base().
 */
modify_base(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > background color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the background color on that.
 * @param state the state for which to set the background color
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_bg().
 */
modify_bg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the #GtkWidget
 * cursor-color and secondary-cursor-color
 * style properties.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param primary the color to use for primary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_cursor().
 * @param secondary the color to use for secondary cursor (does     not need to be allocated), or %NULL to undo the effect of     previous calls to of gtk_widget_modify_cursor().
 */
modify_cursor(primary?: (Gdk.Color | null), secondary?: (Gdk.Color | null)): void
/**
 * Sets the foreground color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the foreground color
 * @param color the color to assign (does not need to be allocated),     or %NULL to undo the effect of previous calls to     of gtk_widget_modify_fg().
 */
modify_fg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the font to use for a widget.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param font_desc the font description to use, or %NULL     to undo the effect of previous calls to gtk_widget_modify_font()
 */
modify_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Modifies style values on the widget.
 * 
 * Modifications made using this technique take precedence over
 * style values set via an RC file, however, they will be overridden
 * if a style is explicitly set on the widget using gtk_widget_set_style().
 * The #GtkRcStyle-struct is designed so each field can either be
 * set or unset, so it is possible, using this function, to modify some
 * style values and leave the others unchanged.
 * 
 * Note that modifications made with this function are not cumulative
 * with previous calls to gtk_widget_modify_style() or with such
 * functions as gtk_widget_modify_fg(). If you wish to retain
 * previous values, you must first call gtk_widget_get_modifier_style(),
 * make your modifications to the returned style, then call
 * gtk_widget_modify_style() with that style. On the other hand,
 * if you first call gtk_widget_modify_style(), subsequent calls
 * to such functions gtk_widget_modify_fg() will have a cumulative
 * effect with the initial modifications.
 * @param style the #GtkRcStyle-struct holding the style modifications
 */
modify_style(style: Gtk.RcStyle): void
/**
 * Sets the text color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * The text color is the foreground color used along with the
 * base color (see gtk_widget_modify_base()) for widgets such
 * as #GtkEntry and #GtkTextView.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the text color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_text().
 */
modify_text(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color to use for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color().
 * @param state the state for which to set the background color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_background_color()
 */
override_background_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the color to use for a widget.
 * 
 * All other style values are left untouched.
 * 
 * This function does not act recursively. Setting the color of a
 * container does not affect its children. Note that some widgets that
 * you may not think of as containers, for instance #GtkButtons,
 * are actually containers.
 * 
 * This API is mostly meant as a quick way for applications to
 * change a widget appearance. If you are developing a widgets
 * library and intend this change to be themeable, it is better
 * done by setting meaningful CSS classes in your
 * widget/container implementation through gtk_style_context_add_class().
 * 
 * This way, your widget library can install a #GtkCssProvider
 * with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
 * to provide a default styling for those widgets that need so, and
 * this theming may fully overridden by the user’s theme.
 * 
 * Note that for complex widgets this may bring in undesired
 * results (such as uniform background color everywhere), in
 * these cases it is better to fully style such widgets through a
 * #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
 * priority.
 * @param state the state for which to set the color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_color()
 */
override_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the
 * cursor-color and secondary-cursor-color
 * style properties. All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * Note that the underlying properties have the #GdkColor type,
 * so the alpha value in `primary` and `secondary` will be ignored.
 * @param cursor the color to use for primary cursor (does not need to be     allocated), or %NULL to undo the effect of previous calls to     of gtk_widget_override_cursor().
 * @param secondary_cursor the color to use for secondary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_override_cursor().
 */
override_cursor(cursor?: (Gdk.RGBA | null), secondary_cursor?: (Gdk.RGBA | null)): void
/**
 * Sets the font to use for a widget. All other style values are
 * left untouched. See gtk_widget_override_color().
 * @param font_desc the font description to use, or %NULL to undo     the effect of previous calls to gtk_widget_override_font()
 */
override_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Sets a symbolic color for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color() for overriding the foreground
 * or background color.
 * @param name the name of the symbolic color to modify
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to gtk_widget_override_symbolic_color()
 */
override_symbolic_color(name: string, color?: (Gdk.RGBA | null)): void
/**
 * Obtains the full path to `widget`. The path is simply the name of a
 * widget and all its parents in the container hierarchy, separated by
 * periods. The name of a widget comes from
 * gtk_widget_get_name(). Paths are used to apply styles to a widget
 * in gtkrc configuration files. Widget names are the type of the
 * widget by default (e.g. “GtkButton”) or can be set to an
 * application-specific value with gtk_widget_set_name(). By setting
 * the name of a widget, you allow users or theme authors to apply
 * styles to that specific widget in their gtkrc
 * file. `path_reversed_p` fills in the path in reverse order,
 * i.e. starting with `widget’`s name instead of starting with the name
 * of `widget’`s outermost ancestor.
 */
path(): [number, string, string]
/**
 * This function is only for use in widget implementations.
 * 
 * Flags the widget for a rerun of the GtkWidgetClass::size_allocate
 * function. Use this function instead of gtk_widget_queue_resize()
 * when the `widget'`s size request didn't change but it wants to
 * reposition its contents.
 * 
 * An example user of this function is gtk_widget_set_halign().
 */
queue_allocate(): void
/**
 * Mark `widget` as needing to recompute its expand flags. Call
 * this function when setting legacy expand child properties
 * on the child of a container.
 * 
 * See gtk_widget_compute_expand().
 */
queue_compute_expand(): void
/**
 * Equivalent to calling gtk_widget_queue_draw_area() for the
 * entire area of a widget.
 */
queue_draw(): void
/**
 * Convenience function that calls gtk_widget_queue_draw_region() on
 * the region created from the given coordinates.
 * 
 * The region here is specified in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(), and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 * 
 * `width` or `height` may be 0, in this case this function does
 * nothing. Negative values for `width` and `height` are not allowed.
 * @param x x coordinate of upper-left corner of rectangle to redraw
 * @param y y coordinate of upper-left corner of rectangle to redraw
 * @param width width of region to draw
 * @param height height of region to draw
 */
queue_draw_area(x: number, y: number, width: number, height: number): void
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
queue_draw_region(region: cairo.Region): void
/**
 * This function is only for use in widget implementations.
 * Flags a widget to have its size renegotiated; should
 * be called when a widget for some reason has a new size request.
 * For example, when you change the text in a #GtkLabel, #GtkLabel
 * queues a resize to ensure there’s enough space for the new text.
 * 
 * Note that you cannot call gtk_widget_queue_resize() on a widget
 * from inside its implementation of the GtkWidgetClass::size_allocate
 * virtual method. Calls to gtk_widget_queue_resize() from inside
 * GtkWidgetClass::size_allocate will be silently ignored.
 */
queue_resize(): void
/**
 * This function works like gtk_widget_queue_resize(),
 * except that the widget is not invalidated.
 */
queue_resize_no_redraw(): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
realize(): void
/**
 * Computes the intersection of a `widget’`s area and `region,` returning
 * the intersection. The result may be empty, use cairo_region_is_empty() to
 * check.
 * @param region a #cairo_region_t, in the same coordinate system as          @widget->allocation. That is, relative to @widget->window          for widgets which return %FALSE from gtk_widget_get_has_window();          relative to the parent window of @widget->window otherwise.
 * @returns A newly allocated region holding the intersection of @widget     and @region.
 */
region_intersect(region: cairo.Region): cairo.Region
/**
 * Registers a #GdkWindow with the widget and sets it up so that
 * the widget receives events for it. Call gtk_widget_unregister_window()
 * when destroying the window.
 * 
 * Before 3.8 you needed to call gdk_window_set_user_data() directly to set
 * this up. This is now deprecated and you should use gtk_widget_register_window()
 * instead. Old code will keep working as is, although some new features like
 * transparency might not work perfectly.
 * @param window a #GdkWindow
 */
register_window(window: Gdk.Window): void
/**
 * Removes an accelerator from `widget,` previously installed with
 * gtk_widget_add_accelerator().
 * @param accel_group accel group for this widget
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @returns whether an accelerator was installed and could be removed
 */
remove_accelerator(accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType): boolean
/**
 * Removes a widget from the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
 * must have previously been added to the list with
 * gtk_widget_add_mnemonic_label().
 * @param label a #GtkWidget that was previously set as a mnemonic label for         @widget with gtk_widget_add_mnemonic_label().
 */
remove_mnemonic_label(label: Gtk.Widget): void
/**
 * Removes a tick callback previously registered with
 * gtk_widget_add_tick_callback().
 * @param id an id returned by gtk_widget_add_tick_callback()
 */
remove_tick_callback(id: number): void
/**
 * A convenience function that uses the theme settings for `widget`
 * to look up `stock_id` and render it to a pixbuf. `stock_id` should
 * be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size`
 * should be a size such as #GTK_ICON_SIZE_MENU. `detail` should be a
 * string that identifies the widget or code doing the rendering, so
 * that theme engines can special-case rendering for that widget or
 * code.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be
 * freed after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @param detail render detail to pass to theme engine
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon(stock_id: string, size: number, detail?: (string | null)): (GdkPixbuf.Pixbuf | null)
/**
 * A convenience function that uses the theme engine and style
 * settings for `widget` to look up `stock_id` and render it to
 * a pixbuf. `stock_id` should be a stock icon ID such as
 * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
 * such as #GTK_ICON_SIZE_MENU.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be freed
 * after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon_pixbuf(stock_id: string, size: number): (GdkPixbuf.Pixbuf | null)
/**
 * Moves a widget from one #GtkContainer to another, handling reference
 * count issues to avoid destroying the widget.
 * @param new_parent a #GtkContainer to move the widget into
 */
reparent(new_parent: Gtk.Widget): void
/**
 * Reset the styles of `widget` and all descendents, so when
 * they are looked up again, they get the correct values
 * for the currently loaded RC file settings.
 * 
 * This function is not useful for applications.
 */
reset_rc_styles(): void
/**
 * Updates the style context of `widget` and all descendants
 * by updating its widget path. #GtkContainers may want
 * to use this on a child when reordering it in a way that a different
 * style might apply to it. See also gtk_container_get_path_for_child().
 */
reset_style(): void
/**
 * Very rarely-used function. This function is used to emit
 * an expose event on a widget. This function is not normally used
 * directly. The only time it is used is when propagating an expose
 * event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
 * and that is normally done using gtk_container_propagate_draw().
 * 
 * If you want to force an area of a window to be redrawn,
 * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
 * To cause the redraw to be done immediately, follow that call
 * with a call to gdk_window_process_updates().
 * @param event a expose #GdkEvent
 * @returns return from the event signal emission (%TRUE if   the event was handled)
 */
send_expose(event: Gdk.Event): number
/**
 * Sends the focus change `event` to `widget`
 * 
 * This function is not meant to be used by applications. The only time it
 * should be used is when it is necessary for a #GtkWidget to assign focus
 * to a widget that is semantically owned by the first widget even though
 * it’s not a direct child - for instance, a search entry in a floating
 * window similar to the quick search in #GtkTreeView.
 * 
 * An example of its usage is:
 * 
 * 
 * ```c
 *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
 * 
 *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
 *   fevent->focus_change.in = TRUE;
 *   fevent->focus_change.window = _gtk_widget_get_window (widget);
 *   if (fevent->focus_change.window != NULL)
 *     g_object_ref (fevent->focus_change.window);
 * 
 *   gtk_widget_send_focus_change (widget, fevent);
 * 
 *   gdk_event_free (event);
 * ```
 * 
 * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
 * @returns the return value from the event signal emission: %TRUE   if the event was handled, and %FALSE otherwise
 */
send_focus_change(event: Gdk.Event): boolean
/**
 * Given an accelerator group, `accel_group,` and an accelerator path,
 * `accel_path,` sets up an accelerator in `accel_group` so whenever the
 * key binding that is defined for `accel_path` is pressed, `widget`
 * will be activated.  This removes any accelerators (for any
 * accelerator group) installed by previous calls to
 * gtk_widget_set_accel_path(). Associating accelerators with
 * paths allows them to be modified by the user and the modifications
 * to be saved for future use. (See gtk_accel_map_save().)
 * 
 * This function is a low level function that would most likely
 * be used by a menu creation system like #GtkUIManager. If you
 * use #GtkUIManager, setting up accelerator paths will be done
 * automatically.
 * 
 * Even when you you aren’t using #GtkUIManager, if you only want to
 * set up accelerators on menu items gtk_menu_item_set_accel_path()
 * provides a somewhat more convenient interface.
 * 
 * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
 * pass a static string, you can save some memory by interning it first with
 * g_intern_static_string().
 * @param accel_path path used to look up the accelerator
 * @param accel_group a #GtkAccelGroup.
 */
set_accel_path(accel_path?: (string | null), accel_group?: (Gtk.AccelGroup | null)): void
/**
 * Sets the widget’s allocation.  This should not be used
 * directly, but from within a widget’s size_allocate method.
 * 
 * The allocation set should be the “adjusted” or actual
 * allocation. If you’re implementing a #GtkContainer, you want to use
 * gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
 * The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
 * allocation inside gtk_widget_size_allocate() to create an adjusted
 * allocation.
 * @param allocation a pointer to a #GtkAllocation to copy from
 */
set_allocation(allocation: Gtk.Allocation): void
/**
 * Sets whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * This is a hint to the widget and does not affect the behavior of
 * the GTK+ core; many widgets ignore this flag entirely. For widgets
 * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
 * the effect is to suppress default themed drawing of the widget's
 * background. (Children of the widget will still be drawn.) The application
 * is then entirely responsible for drawing the widget background.
 * 
 * Note that the background is still drawn when the widget is mapped.
 * @param app_paintable %TRUE if the application will paint on the widget
 */
set_app_paintable(app_paintable: boolean): void
/**
 * Specifies whether `widget` can be a default widget. See
 * gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param can_default whether or not @widget can be a default widget.
 */
set_can_default(can_default: boolean): void
/**
 * Specifies whether `widget` can own the input focus. See
 * gtk_widget_grab_focus() for actually setting the input focus on a
 * widget.
 * @param can_focus whether or not @widget can own the input focus.
 */
set_can_focus(can_focus: boolean): void
/**
 * Sets the widget’s clip.  This must not be used directly,
 * but from within a widget’s size_allocate method.
 * It must be called after gtk_widget_set_allocation() (or after chaining up
 * to the parent class), because that function resets the clip.
 * 
 * The clip set should be the area that `widget` draws on. If `widget` is a
 * #GtkContainer, the area must contain all children's clips.
 * 
 * If this function is not called by `widget` during a ::size-allocate handler,
 * the clip will be set to `widget'`s allocation.
 * @param clip a pointer to a #GtkAllocation to copy from
 */
set_clip(clip: Gtk.Allocation): void
/**
 * Sets a widgets composite name. The widget must be
 * a composite child of its parent; see gtk_widget_push_composite_child().
 * @param name the name to set
 */
set_composite_name(name: string): void
/**
 * Enables or disables a #GdkDevice to interact with `widget`
 * and all its children.
 * 
 * It does so by descending through the #GdkWindow hierarchy
 * and enabling the same mask that is has for core events
 * (i.e. the one that gdk_window_get_events() returns).
 * @param device a #GdkDevice
 * @param enabled whether to enable the device
 */
set_device_enabled(device: Gdk.Device, enabled: boolean): void
/**
 * Sets the device event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive from `device`. Keep
 * in mind that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_device_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with windowless widgets (which return
 * %FALSE from gtk_widget_get_has_window());
 * to get events on those widgets, place them inside a #GtkEventBox
 * and receive events on the event box.
 * @param device a #GdkDevice
 * @param events event mask
 */
set_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Sets the reading direction on a particular widget. This direction
 * controls the primary direction for widgets containing text,
 * and also the direction in which the children of a container are
 * packed. The ability to set the direction is present in order
 * so that correct localization into languages with right-to-left
 * reading directions can be done. Generally, applications will
 * let the default reading direction present, except for containers
 * where the containers are arranged in an order that is explicitly
 * visual rather than logical (such as buttons for text justification).
 * 
 * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
 * set by gtk_widget_set_default_direction() will be used.
 * @param dir the new direction
 */
set_direction(dir: Gtk.TextDirection): void
/**
 * Widgets are double buffered by default; you can use this function
 * to turn off the buffering. “Double buffered” simply means that
 * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
 * automatically around expose events sent to the
 * widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
 * window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
 * buffer to the screen. The result is that users see the window
 * update in one smooth step, and don’t see individual graphics
 * primitives being rendered.
 * 
 * In very simple terms, double buffered widgets don’t flicker,
 * so you would only use this function to turn off double buffering
 * if you had special needs and really knew what you were doing.
 * 
 * Note: if you turn off double-buffering, you have to handle
 * expose events, since even the clearing to the background color or
 * pixmap will not happen automatically (as it is done in
 * gdk_window_begin_draw_frame()).
 * 
 * In 3.10 GTK and GDK have been restructured for translucent drawing. Since
 * then expose events for double-buffered widgets are culled into a single
 * event to the toplevel GDK window. If you now unset double buffering, you
 * will cause a separate rendering pass for every widget. This will likely
 * cause rendering problems - in particular related to stacking - and usually
 * increases rendering times significantly.
 * @param double_buffered %TRUE to double-buffer a widget
 */
set_double_buffered(double_buffered: boolean): void
/**
 * Sets the event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive. Keep in mind
 * that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with widgets that have no window.
 * (See gtk_widget_get_has_window()).  To get events on those widgets,
 * place them inside a #GtkEventBox and receive events on the event
 * box.
 * @param events event mask
 */
set_events(events: number): void
/**
 * Sets whether the widget should grab focus when it is clicked with the mouse.
 * Making mouse clicks not grab focus is useful in places like toolbars where
 * you don’t want the keyboard focus removed from the main area of the
 * application.
 * @param focus_on_click whether the widget should grab focus when clicked with the mouse
 */
set_focus_on_click(focus_on_click: boolean): void
/**
 * Sets the font map to use for Pango rendering. When not set, the widget
 * will inherit the font map from its parent.
 * @param font_map a #PangoFontMap, or %NULL to unset any previously     set font map
 */
set_font_map(font_map?: (Pango.FontMap | null)): void
/**
 * Sets the #cairo_font_options_t used for Pango rendering in this widget.
 * When not set, the default font options for the #GdkScreen will be used.
 * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
 */
set_font_options(options?: (cairo.FontOptions | null)): void
/**
 * Sets the horizontal alignment of `widget`.
 * See the #GtkWidget:halign property.
 * @param align the horizontal alignment
 */
set_halign(align: Gtk.Align): void
/**
 * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
 * #GtkWidget:has-tooltip for more information.
 * @param has_tooltip whether or not @widget has a tooltip.
 */
set_has_tooltip(has_tooltip: boolean): void
/**
 * Specifies whether `widget` has a #GdkWindow of its own. Note that
 * all realized widgets have a non-%NULL “window” pointer
 * (gtk_widget_get_window() never returns a %NULL window when a widget
 * is realized), but for many of them it’s actually the #GdkWindow of
 * one of its parent widgets. Widgets that do not create a %window for
 * themselves in #GtkWidget::realize must announce this by
 * calling this function with `has_window` = %FALSE.
 * 
 * This function should only be called by widget implementations,
 * and they should call it in their init() function.
 * @param has_window whether or not @widget has a window.
 */
set_has_window(has_window: boolean): void
/**
 * Sets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Call this function to set the expand flag if you would like your
 * widget to become larger horizontally when the window has extra
 * room.
 * 
 * By default, widgets automatically expand if any of their children
 * want to expand. (To see if a widget will automatically expand given
 * its current children and state, call gtk_widget_compute_expand(). A
 * container can decide how the expandability of children affects the
 * expansion of the container by overriding the compute_expand virtual
 * method on #GtkWidget.).
 * 
 * Setting hexpand explicitly with this function will override the
 * automatic expand behavior.
 * 
 * This function forces the widget to expand or not to expand,
 * regardless of children.  The override occurs because
 * gtk_widget_set_hexpand() sets the hexpand-set property (see
 * gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
 * value to be used, rather than looking at children and widget state.
 * @param expand whether to expand
 */
set_hexpand(expand: boolean): void
/**
 * Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
 * be used.
 * 
 * The hexpand-set property will be set automatically when you call
 * gtk_widget_set_hexpand() to set hexpand, so the most likely
 * reason to use this function would be to unset an explicit expand
 * flag.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @param set value for hexpand-set property
 */
set_hexpand_set(set: boolean): void
/**
 * Marks the widget as being mapped.
 * 
 * This function should only ever be called in a derived widget's
 * “map” or “unmap” implementation.
 * @param mapped %TRUE to mark the widget as mapped
 */
set_mapped(mapped: boolean): void
/**
 * Sets the bottom margin of `widget`.
 * See the #GtkWidget:margin-bottom property.
 * @param margin the bottom margin
 */
set_margin_bottom(margin: number): void
/**
 * Sets the end margin of `widget`.
 * See the #GtkWidget:margin-end property.
 * @param margin the end margin
 */
set_margin_end(margin: number): void
/**
 * Sets the left margin of `widget`.
 * See the #GtkWidget:margin-left property.
 * @param margin the left margin
 */
set_margin_left(margin: number): void
/**
 * Sets the right margin of `widget`.
 * See the #GtkWidget:margin-right property.
 * @param margin the right margin
 */
set_margin_right(margin: number): void
/**
 * Sets the start margin of `widget`.
 * See the #GtkWidget:margin-start property.
 * @param margin the start margin
 */
set_margin_start(margin: number): void
/**
 * Sets the top margin of `widget`.
 * See the #GtkWidget:margin-top property.
 * @param margin the top margin
 */
set_margin_top(margin: number): void
/**
 * Widgets can be named, which allows you to refer to them from a
 * CSS file. You can apply a style to widgets with a particular name
 * in the CSS file. See the documentation for the CSS syntax (on the
 * same page as the docs for #GtkStyleContext).
 * 
 * Note that the CSS syntax has certain special characters to delimit
 * and represent elements in a selector (period, #, >, *...), so using
 * these will make your widget impossible to match by name. Any combination
 * of alphanumeric symbols, dashes and underscores will suffice.
 * @param name name for the widget
 */
set_name(name: string): void
/**
 * Sets the #GtkWidget:no-show-all property, which determines whether
 * calls to gtk_widget_show_all() will affect this widget.
 * 
 * This is mostly for use in constructing widget hierarchies with externally
 * controlled visibility, see #GtkUIManager.
 * @param no_show_all the new value for the “no-show-all” property
 */
set_no_show_all(no_show_all: boolean): void
/**
 * Request the `widget` to be rendered partially transparent,
 * with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
 * are clamped to the [0,1] range.).
 * This works on both toplevel widget, and child widgets, although there
 * are some limitations:
 * 
 * For toplevel widgets this depends on the capabilities of the windowing
 * system. On X11 this has any effect only on X screens with a compositing manager
 * running. See gtk_widget_is_composited(). On Windows it should work
 * always, although setting a window’s opacity after the window has been
 * shown causes it to flicker once on Windows.
 * 
 * For child widgets it doesn’t work if any affected widget has a native window, or
 * disables double buffering.
 * @param opacity desired opacity, between 0 and 1
 */
set_opacity(opacity: number): void
/**
 * This function is useful only when implementing subclasses of
 * #GtkContainer.
 * Sets the container as the parent of `widget,` and takes care of
 * some details such as updating the state and style of the child
 * to reflect its new location. The opposite function is
 * gtk_widget_unparent().
 * @param parent parent container
 */
set_parent(parent: Gtk.Widget): void
/**
 * Sets a non default parent window for `widget`.
 * 
 * For #GtkWindow classes, setting a `parent_window` effects whether
 * the window is a toplevel window or can be embedded into other
 * widgets.
 * 
 * For #GtkWindow classes, this needs to be called before the
 * window is realized.
 * @param parent_window the new parent window.
 */
set_parent_window(parent_window: Gdk.Window): void
/**
 * Marks the widget as being realized. This function must only be
 * called after all #GdkWindows for the `widget` have been created
 * and registered.
 * 
 * This function should only ever be called in a derived widget's
 * “realize” or “unrealize” implementation.
 * @param realized %TRUE to mark the widget as realized
 */
set_realized(realized: boolean): void
/**
 * Specifies whether `widget` will be treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param receives_default whether or not @widget can be a default widget.
 */
set_receives_default(receives_default: boolean): void
/**
 * Sets whether the entire widget is queued for drawing when its size
 * allocation changes. By default, this setting is %TRUE and
 * the entire widget is redrawn on every size change. If your widget
 * leaves the upper left unchanged when made bigger, turning this
 * setting off will improve performance.
 * 
 * Note that for widgets where gtk_widget_get_has_window() is %FALSE
 * setting this flag to %FALSE turns off all allocation on resizing:
 * the widget will not even redraw if its position changes; this is to
 * allow containers that don’t draw anything to avoid excess
 * invalidations. If you set this flag on a widget with no window that
 * does draw on `widget->`window, you are
 * responsible for invalidating both the old and new allocation of the
 * widget when the widget is moved and responsible for invalidating
 * regions newly when the widget increases size.
 * @param redraw_on_allocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
 */
set_redraw_on_allocate(redraw_on_allocate: boolean): void
/**
 * Sets the sensitivity of a widget. A widget is sensitive if the user
 * can interact with it. Insensitive widgets are “grayed out” and the
 * user can’t interact with them. Insensitive widgets are known as
 * “inactive”, “disabled”, or “ghosted” in some other toolkits.
 * @param sensitive %TRUE to make the widget sensitive
 */
set_sensitive(sensitive: boolean): void
/**
 * Sets the minimum size of a widget; that is, the widget’s size
 * request will be at least `width` by `height`. You can use this
 * function to force a widget to be larger than it normally would be.
 * 
 * In most cases, gtk_window_set_default_size() is a better choice for
 * toplevel windows than this function; setting the default size will
 * still allow users to shrink the window. Setting the size request
 * will force them to leave the window at least as large as the size
 * request. When dealing with window sizes,
 * gtk_window_set_geometry_hints() can be a useful function as well.
 * 
 * Note the inherent danger of setting any fixed size - themes,
 * translations into other languages, different fonts, and user action
 * can all change the appropriate size for a given widget. So, it's
 * basically impossible to hardcode a size that will always be
 * correct.
 * 
 * The size request of a widget is the smallest size a widget can
 * accept while still functioning well and drawing itself correctly.
 * However in some strange cases a widget may be allocated less than
 * its requested size, and in many cases a widget may be allocated more
 * space than it requested.
 * 
 * If the size request in a given direction is -1 (unset), then
 * the “natural” size request of the widget will be used instead.
 * 
 * The size request set here does not include any margin from the
 * #GtkWidget properties margin-left, margin-right, margin-top, and
 * margin-bottom, but it does include pretty much all other padding
 * or border properties set by any subclass of #GtkWidget.
 * @param width width @widget should request, or -1 to unset
 * @param height height @widget should request, or -1 to unset
 */
set_size_request(width: number, height: number): void
/**
 * This function is for use in widget implementations. Sets the state
 * of a widget (insensitive, prelighted, etc.) Usually you should set
 * the state using wrapper functions such as gtk_widget_set_sensitive().
 * @param state new state for @widget
 */
set_state(state: Gtk.StateType): void
/**
 * This function is for use in widget implementations. Turns on flag
 * values in the current widget state (insensitive, prelighted, etc.).
 * 
 * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
 * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
 * direction, use gtk_widget_set_direction().
 * 
 * It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
 * will be propagated down to all non-internal children if `widget` is a
 * #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
 * down to all #GtkContainer children by different means than turning on the
 * state flag down the hierarchy, both gtk_widget_get_state_flags() and
 * gtk_widget_is_sensitive() will make use of these.
 * @param flags State flags to turn on
 * @param clear Whether to clear state before turning on @flags
 */
set_state_flags(flags: Gtk.StateFlags, clear: boolean): void
/**
 * Used to set the #GtkStyle for a widget (`widget->`style). Since
 * GTK 3, this function does nothing, the passed in style is ignored.
 * @param style a #GtkStyle, or %NULL to remove the effect     of a previous call to gtk_widget_set_style() and go back to     the default style
 */
set_style(style?: (Gtk.Style | null)): void
/**
 * Enables or disables multiple pointer awareness. If this setting is %TRUE,
 * `widget` will start receiving multiple, per device enter/leave events. Note
 * that if custom #GdkWindows are created in #GtkWidget::realize,
 * gdk_window_set_support_multidevice() will have to be called manually on them.
 * @param support_multidevice %TRUE to support input from multiple devices.
 */
set_support_multidevice(support_multidevice: boolean): void
/**
 * Sets `markup` as the contents of the tooltip, which is marked up with
 *  the [Pango text markup language][PangoMarkupFormat].
 * 
 * This function will take care of setting #GtkWidget:has-tooltip to %TRUE
 * and of the default handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-markup property and
 * gtk_tooltip_set_markup().
 * @param markup the contents of the tooltip for @widget, or %NULL
 */
set_tooltip_markup(markup?: (string | null)): void
/**
 * Sets `text` as the contents of the tooltip. This function will take
 * care of setting #GtkWidget:has-tooltip to %TRUE and of the default
 * handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
 * @param text the contents of the tooltip for @widget
 */
set_tooltip_text(text?: (string | null)): void
/**
 * Replaces the default window used for displaying
 * tooltips with `custom_window`. GTK+ will take care of showing and
 * hiding `custom_window` at the right moment, to behave likewise as
 * the default tooltip window. If `custom_window` is %NULL, the default
 * tooltip window will be used.
 * @param custom_window a #GtkWindow, or %NULL
 */
set_tooltip_window(custom_window?: (Gtk.Window | null)): void
/**
 * Sets the vertical alignment of `widget`.
 * See the #GtkWidget:valign property.
 * @param align the vertical alignment
 */
set_valign(align: Gtk.Align): void
/**
 * Sets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_set_hexpand() for more detail.
 * @param expand whether to expand
 */
set_vexpand(expand: boolean): void
/**
 * Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
 * be used.
 * 
 * See gtk_widget_set_hexpand_set() for more detail.
 * @param set value for vexpand-set property
 */
set_vexpand_set(set: boolean): void
/**
 * Sets the visibility state of `widget`. Note that setting this to
 * %TRUE doesn’t mean the widget is actually viewable, see
 * gtk_widget_get_visible().
 * 
 * This function simply calls gtk_widget_show() or gtk_widget_hide()
 * but is nicer to use when the visibility of the widget depends on
 * some condition.
 * @param visible whether the widget should be shown or not
 */
set_visible(visible: boolean): void
/**
 * Sets the visual that should be used for by widget and its children for
 * creating #GdkWindows. The visual must be on the same #GdkScreen as
 * returned by gtk_widget_get_screen(), so handling the
 * #GtkWidget::screen-changed signal is necessary.
 * 
 * Setting a new `visual` will not cause `widget` to recreate its windows,
 * so you should call this function before `widget` is realized.
 * @param visual visual to be used or %NULL to unset a previous one
 */
set_visual(visual?: (Gdk.Visual | null)): void
/**
 * Sets a widget’s window. This function should only be used in a
 * widget’s #GtkWidget::realize implementation. The %window passed is
 * usually either new window created with gdk_window_new(), or the
 * window of its parent widget as returned by
 * gtk_widget_get_parent_window().
 * 
 * Widgets must indicate whether they will create their own #GdkWindow
 * by calling gtk_widget_set_has_window(). This is usually done in the
 * widget’s init() function.
 * 
 * Note that this function does not add any reference to `window`.
 * @param window a #GdkWindow
 */
set_window(window: Gdk.Window): void
/**
 * Sets a shape for this widget’s GDK window. This allows for
 * transparent windows etc., see gdk_window_shape_combine_region()
 * for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
show_all(): void
/**
 * Shows a widget. If the widget is an unmapped toplevel widget
 * (i.e. a #GtkWindow that has not yet been shown), enter the main
 * loop and wait for the window to actually be mapped. Be careful;
 * because the main loop is running, anything can happen during
 * this function.
 */
show_now(): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
size_allocate(allocation: Gtk.Allocation): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size,
 * position and (optionally) baseline to their child widgets.
 * 
 * In this function, the allocation and baseline may be adjusted. It
 * will be forced to a 1x1 minimum size, and the
 * adjust_size_allocation virtual and adjust_baseline_allocation
 * methods on the child will be used to adjust the allocation and
 * baseline. Standard adjustments include removing the widget's
 * margins, and applying the widget’s #GtkWidget:halign and
 * #GtkWidget:valign properties.
 * 
 * If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
 * baseline argument is ignored and -1 is used instead.
 * @param allocation position and size to be allocated to @widget
 * @param baseline The baseline of the child, or -1
 */
size_allocate_with_baseline(allocation: Gtk.Allocation, baseline: number): void
/**
 * This function is typically used when implementing a #GtkContainer
 * subclass.  Obtains the preferred size of a widget. The container
 * uses this information to arrange its child widgets and decide what
 * size allocations to give them with gtk_widget_size_allocate().
 * 
 * You can also call this function from an application, with some
 * caveats. Most notably, getting a size request requires the widget
 * to be associated with a screen, because font information may be
 * needed. Multihead-aware applications should keep this in mind.
 * 
 * Also remember that the size request is not necessarily the size
 * a widget will actually be allocated.
 */
size_request(): Gtk.Requisition
/**
 * This function attaches the widget’s #GtkStyle to the widget's
 * #GdkWindow. It is a replacement for
 * 
 * 
 * ```
 * widget->style = gtk_style_attach (widget->style, widget->window);
 * ```
 * 
 * 
 * and should only ever be called in a derived widget’s “realize”
 * implementation which does not chain up to its parent class'
 * “realize” implementation, because one of the parent classes
 * (finally #GtkWidget) would attach the style itself.
 */
style_attach(): void
/**
 * Gets the value of a style property of `widget`.
 * @param property_name the name of a style property
 * @param value location to return the property value
 */
style_get_property(property_name: string, value: GObject.Value): void
/**
 * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
 * This causes all queued #GtkWidget::child-notify signals on `widget` to be
 * emitted.
 */
thaw_child_notify(): void
/**
 * Translate coordinates relative to `src_widget’`s allocation to coordinates
 * relative to `dest_widget’`s allocations. In order to perform this
 * operation, both widgets must be realized, and must share a common
 * toplevel.
 * @param dest_widget a #GtkWidget
 * @param src_x X position relative to @src_widget
 * @param src_y Y position relative to @src_widget
 * @returns %FALSE if either widget was not realized, or there   was no common ancestor. In this case, nothing is stored in   *@dest_x and *@dest_y. Otherwise %TRUE.
 */
translate_coordinates(dest_widget: Gtk.Widget, src_x: number, src_y: number): [boolean, number, number]
/**
 * Triggers a tooltip query on the display where the toplevel of `widget`
 * is located. See gtk_tooltip_trigger_tooltip_query() for more
 * information.
 */
trigger_tooltip_query(): void
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
unmap(): void
/**
 * This function is only for use in widget implementations.
 * Should be called by implementations of the remove method
 * on #GtkContainer, to dissociate a child from the container.
 */
unparent(): void
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
unrealize(): void
/**
 * Unregisters a #GdkWindow from the widget that was previously set up with
 * gtk_widget_register_window(). You need to call this when the window is
 * no longer used by the widget, such as when you destroy it.
 * @param window a #GdkWindow
 */
unregister_window(window: Gdk.Window): void
/**
 * This function is for use in widget implementations. Turns off flag
 * values for the current widget state (insensitive, prelighted, etc.).
 * See gtk_widget_set_state_flags().
 * @param flags State flags to turn off
 */
unset_state_flags(flags: Gtk.StateFlags): void
vfunc_adjust_baseline_allocation(baseline: number): void
vfunc_adjust_baseline_request(minimum_baseline: number, natural_baseline: number): void
vfunc_adjust_size_allocation(orientation: Gtk.Orientation, minimum_size: number, natural_size: number, allocated_pos: number, allocated_size: number): void
vfunc_adjust_size_request(orientation: Gtk.Orientation, minimum_size: number, natural_size: number): void
vfunc_button_press_event(event: Gdk.EventButton): boolean
vfunc_button_release_event(event: Gdk.EventButton): boolean
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 */
vfunc_can_activate_accel(signal_id: number): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
vfunc_child_notify(child_property: GObject.ParamSpec): void
vfunc_composited_changed(): void
vfunc_compute_expand(hexpand_p: boolean, vexpand_p: boolean): void
vfunc_configure_event(event: Gdk.EventConfigure): boolean
vfunc_damage_event(event: Gdk.EventExpose): boolean
vfunc_delete_event(event: Gdk.EventAny): boolean
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
vfunc_destroy(): void
vfunc_destroy_event(event: Gdk.EventAny): boolean
vfunc_direction_changed(previous_direction: Gtk.TextDirection): void
vfunc_dispatch_child_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_drag_begin(context: Gdk.DragContext): void
vfunc_drag_data_delete(context: Gdk.DragContext): void
vfunc_drag_data_get(context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_data_received(context: Gdk.DragContext, x: number, y: number, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_drop(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_drag_end(context: Gdk.DragContext): void
vfunc_drag_failed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
vfunc_drag_leave(context: Gdk.DragContext, time_: number): void
vfunc_drag_motion(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_draw(cr: cairo.Context): boolean
vfunc_enter_notify_event(event: Gdk.EventCrossing): boolean
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 */
vfunc_event(event: Gdk.Event): boolean
vfunc_focus(direction: Gtk.DirectionType): boolean
vfunc_focus_in_event(event: Gdk.EventFocus): boolean
vfunc_focus_out_event(event: Gdk.EventFocus): boolean
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 */
vfunc_get_accessible(): Atk.Object
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
vfunc_get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
vfunc_get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
vfunc_get_preferred_width_for_height(height: number): [number, number]
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 */
vfunc_get_request_mode(): Gtk.SizeRequestMode
vfunc_grab_broken_event(event: Gdk.EventGrabBroken): boolean
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
vfunc_grab_focus(): void
vfunc_grab_notify(was_grabbed: boolean): void
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
vfunc_hide(): void
vfunc_hierarchy_changed(previous_toplevel: Gtk.Widget): void
vfunc_key_press_event(event: Gdk.EventKey): boolean
vfunc_key_release_event(event: Gdk.EventKey): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 */
vfunc_keynav_failed(direction: Gtk.DirectionType): boolean
vfunc_leave_notify_event(event: Gdk.EventCrossing): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
vfunc_map(): void
vfunc_map_event(event: Gdk.EventAny): boolean
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 */
vfunc_mnemonic_activate(group_cycling: boolean): boolean
vfunc_motion_notify_event(event: Gdk.EventMotion): boolean
vfunc_move_focus(direction: Gtk.DirectionType): void
vfunc_parent_set(previous_parent: Gtk.Widget): void
vfunc_popup_menu(): boolean
vfunc_property_notify_event(event: Gdk.EventProperty): boolean
vfunc_proximity_in_event(event: Gdk.EventProximity): boolean
vfunc_proximity_out_event(event: Gdk.EventProximity): boolean
vfunc_query_tooltip(x: number, y: number, keyboard_tooltip: boolean, tooltip: Gtk.Tooltip): boolean
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
vfunc_queue_draw_region(region: cairo.Region): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
vfunc_realize(): void
vfunc_screen_changed(previous_screen: Gdk.Screen): void
vfunc_scroll_event(event: Gdk.EventScroll): boolean
vfunc_selection_clear_event(event: Gdk.EventSelection): boolean
vfunc_selection_get(selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_selection_notify_event(event: Gdk.EventSelection): boolean
vfunc_selection_received(selection_data: Gtk.SelectionData, time_: number): void
vfunc_selection_request_event(event: Gdk.EventSelection): boolean
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
vfunc_show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
vfunc_show_all(): void
vfunc_show_help(help_type: Gtk.WidgetHelpType): boolean
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
vfunc_size_allocate(allocation: Gtk.Allocation): void
vfunc_state_changed(previous_state: Gtk.StateType): void
vfunc_state_flags_changed(previous_state_flags: Gtk.StateFlags): void
vfunc_style_set(previous_style: Gtk.Style): void
vfunc_style_updated(): void
vfunc_touch_event(event: Gdk.EventTouch): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
vfunc_unmap(): void
vfunc_unmap_event(event: Gdk.EventAny): boolean
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
vfunc_unrealize(): void
vfunc_visibility_notify_event(event: Gdk.EventVisibility): boolean
vfunc_window_state_event(event: Gdk.EventWindowState): boolean
}

module ElasticBin {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {

    }

}

class ElasticBin extends Gtk.Bin implements Atk.ImplementorIface, Gtk.Buildable {

    // Constructors of Dazzle.ElasticBin


constructor(properties?: Partial<ElasticBin.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): ElasticBin;

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module EmptyState {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
icon_name: string;
    iconName: string;
    pixel_size: number;
    pixelSize: number;
    resource: string;
    subtitle: string;
    title: string;
    }

}

class EmptyState extends Gtk.Bin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.EmptyState

    get icon_name(): string;
    set icon_name(val: string);
    get iconName(): string;
    set iconName(val: string);
    get pixel_size(): number;
    set pixel_size(val: number);
    get pixelSize(): number;
    set pixelSize(val: number);
    set resource(val: string);
    get subtitle(): string;
    set subtitle(val: string);
    get title(): string;
    set title(val: string);

    // Constructors of Dazzle.EmptyState


constructor(properties?: Partial<EmptyState.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): EmptyState;

    // Own methods of Dazzle.EmptyState

    get_icon_name(): string
    get_subtitle(): string
    get_title(): string
    set_icon_name(icon_name: string): void
    set_resource(resource: string): void
    set_subtitle(title: string): void
    set_title(title: string): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module EntryBox {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Box.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.Orientable.ConstructorProps {
max_width_chars: number;
    maxWidthChars: number;
    }

}

class EntryBox extends Gtk.Box implements Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Dazzle.EntryBox

    get max_width_chars(): number;
    set max_width_chars(val: number);
    get maxWidthChars(): number;
    set maxWidthChars(val: number);

    // Constructors of Dazzle.EntryBox


constructor(properties?: Partial<EntryBox.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): EntryBox;

// Inherited properties
/**
 * The orientation of the orientable.
 */
get orientation(): Gtk.Orientation;
set orientation(val: Gtk.Orientation);

// Inherited methods
/**
 * Retrieves the orientation of the `orientable`.
 * @returns the orientation of the @orientable.
 */
get_orientation(): Gtk.Orientation
/**
 * Sets the orientation of the `orientable`.
 * @param orientation the orientable’s new orientation.
 */
set_orientation(orientation: Gtk.Orientation): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module FileChooserEntry {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
action: Gtk.FileChooserAction;
    create_folders: boolean;
    createFolders: boolean;
    do_overwrite_confirmation: boolean;
    doOverwriteConfirmation: boolean;
    file: Gio.File;
    filter: Gtk.FileFilter;
    local_only: boolean;
    localOnly: boolean;
    max_width_chars: number;
    maxWidthChars: number;
    show_hidden: boolean;
    showHidden: boolean;
    title: string;
    }

}

class FileChooserEntry extends Gtk.Bin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.FileChooserEntry

    get action(): Gtk.FileChooserAction;
    set action(val: Gtk.FileChooserAction);
    get create_folders(): boolean;
    set create_folders(val: boolean);
    get createFolders(): boolean;
    set createFolders(val: boolean);
    get do_overwrite_confirmation(): boolean;
    set do_overwrite_confirmation(val: boolean);
    get doOverwriteConfirmation(): boolean;
    set doOverwriteConfirmation(val: boolean);
    get file(): Gio.File;
    set file(val: Gio.File);
    get filter(): Gtk.FileFilter;
    set filter(val: Gtk.FileFilter);
    get local_only(): boolean;
    set local_only(val: boolean);
    get localOnly(): boolean;
    set localOnly(val: boolean);
    get max_width_chars(): number;
    set max_width_chars(val: number);
    get maxWidthChars(): number;
    set maxWidthChars(val: number);
    get show_hidden(): boolean;
    set show_hidden(val: boolean);
    get showHidden(): boolean;
    set showHidden(val: boolean);
    get title(): string;
    set title(val: string);

    // Constructors of Dazzle.FileChooserEntry


constructor(properties?: Partial<FileChooserEntry.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](title: string, action: Gtk.FileChooserAction): FileChooserEntry;

    // Own methods of Dazzle.FileChooserEntry

    /**
     * Gets the entry used by the #GtkEntry.
     * @returns a #GtkEntry
     */
    get_entry(): Gtk.Entry
    /**
     * Returns the currently selected file or %NULL if there is no selection.
     * @returns A #GFile or %NULL.
     */
    get_file(): (Gio.File | null)
    set_file(file: Gio.File): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module FileTransfer {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
flags: FileTransferFlags;
    progress: number;
    }

}

class FileTransfer extends GObject.Object {

    // Own properties of Dazzle.FileTransfer

    get flags(): FileTransferFlags;
    set flags(val: FileTransferFlags);
    get progress(): number;

    // Constructors of Dazzle.FileTransfer


constructor(properties?: Partial<FileTransfer.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): FileTransfer;

    // Own methods of Dazzle.FileTransfer

    add(src: Gio.File, dest: Gio.File): void
    execute(io_priority: number, cancellable?: (Gio.Cancellable | null)): boolean
    execute_async(io_priority: number, cancellable?: (Gio.Cancellable | null), callback?: (Gio.AsyncReadyCallback<this> | null)): void
    execute_finish(result: Gio.AsyncResult): boolean
    get_flags(): FileTransferFlags
    get_progress(): number
    set_flags(flags: FileTransferFlags): void
    /**
     * Gets statistics about the transfer progress.
     */
    stat(): FileTransferStat
}

module FuzzyIndex {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {

    }

}

class FuzzyIndex extends GObject.Object {

    // Constructors of Dazzle.FuzzyIndex


constructor(properties?: Partial<FuzzyIndex.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): FuzzyIndex;

    // Own methods of Dazzle.FuzzyIndex

    /**
     * Looks up the metadata for `key`.
     * @param key 
     * @returns A #GVariant or %NULL.
     */
    get_metadata(key: string): (GLib.Variant | null)
    get_metadata_string(key: string): string
    get_metadata_uint32(key: string): number
    get_metadata_uint64(key: string): number
    load_file(file: Gio.File, cancellable?: (Gio.Cancellable | null)): boolean
    load_file_async(file: Gio.File, cancellable?: (Gio.Cancellable | null), callback?: (Gio.AsyncReadyCallback<this> | null)): void
    load_file_finish(result: Gio.AsyncResult): boolean
    query_async(query: string, max_matches: number, cancellable?: (Gio.Cancellable | null), callback?: (Gio.AsyncReadyCallback<this> | null)): void
    /**
     * Completes an asynchronous request to dzl_fuzzy_index_query_async().
     * @param result 
     * @returns A #GListModel of results.
     */
    query_finish(result: Gio.AsyncResult): Gio.ListModel
}

module FuzzyIndexBuilder {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
case_sensitive: boolean;
    caseSensitive: boolean;
    }

}

class FuzzyIndexBuilder extends GObject.Object {

    // Own properties of Dazzle.FuzzyIndexBuilder

    get case_sensitive(): boolean;
    set case_sensitive(val: boolean);
    get caseSensitive(): boolean;
    set caseSensitive(val: boolean);

    // Constructors of Dazzle.FuzzyIndexBuilder


constructor(properties?: Partial<FuzzyIndexBuilder.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): FuzzyIndexBuilder;

    // Own methods of Dazzle.FuzzyIndexBuilder

    get_case_sensitive(): boolean
    /**
     * Returns the document that was inserted in a previous call to
     * dzl_fuzzy_index_builder_insert().
     * @param document_id 
     * @returns A #GVariant
     */
    get_document(document_id: number): GLib.Variant
    /**
     * Inserts `document` into the index using `key` as the lookup key.
     * 
     * If a matching document (checked by hashing `document)` has already
     * been inserted, only a single instance of the document will be stored.
     * 
     * If `document` is floating, it will be consumed.
     * 
     * `priority` may be used to group results by priority. Priority must be
     * less than 256.
     * @param key The UTF-8 encoded key for the document
     * @param document The document to store
     * @param priority An optional priority for the keyword.
     * @returns The document id registered for @document.
     */
    insert(key: string, document: GLib.Variant, priority: number): number
    set_case_sensitive(case_sensitive: boolean): void
    set_metadata(key: string, value: GLib.Variant): void
    set_metadata_string(key: string, value: string): void
    set_metadata_uint32(key: string, value: number): void
    set_metadata_uint64(key: string, value: number): void
    write(file: Gio.File, io_priority: number, cancellable?: (Gio.Cancellable | null)): boolean
    /**
     * Builds and writes the index to `file`. The file format is a
     * GVariant on disk and can be loaded and searched using
     * #FuzzyIndex.
     * @param file A #GFile to write the index to
     * @param io_priority The priority for IO operations
     * @param cancellable An optional #GCancellable or %NULL
     * @param callback A callback for completion or %NULL
     */
    write_async(file: Gio.File, io_priority: number, cancellable?: (Gio.Cancellable | null), callback?: (Gio.AsyncReadyCallback<this> | null)): void
    write_finish(result: Gio.AsyncResult): boolean
}

module FuzzyIndexCursor {

    // Constructor properties interface

    interface ConstructorProps<A extends GObject.Object = GObject.Object> extends GObject.Object.ConstructorProps, Gio.AsyncInitable.ConstructorProps, Gio.ListModel.ConstructorProps {
case_sensitive: boolean;
    caseSensitive: boolean;
    index: FuzzyIndex;
    max_matches: number;
    maxMatches: number;
    query: string;
    tables: GLib.VariantDict;
    }

}

class FuzzyIndexCursor<A extends GObject.Object = GObject.Object> extends GObject.Object implements Gio.AsyncInitable<FuzzyIndexCursor>, Gio.ListModel<A> {

    // Own properties of Dazzle.FuzzyIndexCursor

    get case_sensitive(): boolean;
    get caseSensitive(): boolean;
    set index(val: FuzzyIndex);
    get max_matches(): number;
    get maxMatches(): number;
    get query(): string;
    set tables(val: GLib.VariantDict);

    // Constructors of Dazzle.FuzzyIndexCursor


constructor(properties?: Partial<FuzzyIndexCursor.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own methods of Dazzle.FuzzyIndexCursor

    /**
     * Gets the index the cursor is iterating.
     * @returns A #DzlFuzzyIndex.
     */
    get_index(): FuzzyIndex

// Inherited methods
/**
 * Starts asynchronous initialization of the object implementing the
 * interface. This must be done before any real use of the object after
 * initial construction. If the object also implements #GInitable you can
 * optionally call g_initable_init() instead.
 * 
 * This method is intended for language bindings. If writing in C,
 * g_async_initable_new_async() should typically be used instead.
 * 
 * When the initialization is finished, `callback` will be called. You can
 * then call g_async_initable_init_finish() to get the result of the
 * initialization.
 * 
 * Implementations may also support cancellation. If `cancellable` is not
 * %NULL, then initialization can be cancelled by triggering the cancellable
 * object from another thread. If the operation was cancelled, the error
 * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL, and
 * the object doesn't support cancellable initialization, the error
 * %G_IO_ERROR_NOT_SUPPORTED will be returned.
 * 
 * As with #GInitable, if the object is not initialized, or initialization
 * returns with an error, then all operations on the object except
 * g_object_ref() and g_object_unref() are considered to be invalid, and
 * have undefined behaviour. They will often fail with g_critical() or
 * g_warning(), but this must not be relied on.
 * 
 * Callers should not assume that a class which implements #GAsyncInitable can
 * be initialized multiple times; for more information, see g_initable_init().
 * If a class explicitly supports being initialized multiple times,
 * implementation requires yielding all subsequent calls to init_async() on the
 * results of the first call.
 * 
 * For classes that also support the #GInitable interface, the default
 * implementation of this method will run the g_initable_init() function
 * in a thread, so if you want to support asynchronous initialization via
 * threads, just implement the #GAsyncInitable interface without overriding
 * any interface methods.
 * @param io_priority the [I/O priority][io-priority] of the operation
 * @param cancellable optional #GCancellable object, %NULL to ignore.
 * @param callback a #GAsyncReadyCallback to call when the request is satisfied
 */
init_async(io_priority: number, cancellable?: (Gio.Cancellable | null), callback?: (Gio.AsyncReadyCallback<this> | null)): void
/**
 * Finishes asynchronous initialization and returns the result.
 * See g_async_initable_init_async().
 * @param res a #GAsyncResult.
 * @returns %TRUE if successful. If an error has occurred, this function will return %FALSE and set @error appropriately if present.
 */
init_finish(res: Gio.AsyncResult): boolean
/**
 * Finishes the async construction for the various g_async_initable_new
 * calls, returning the created object or %NULL on error.
 * @param res the #GAsyncResult from the callback
 * @returns a newly created #GObject,      or %NULL on error. Free with g_object_unref().
 */
new_finish(res: Gio.AsyncResult): FuzzyIndexCursor
/**
 * Starts asynchronous initialization of the object implementing the
 * interface. This must be done before any real use of the object after
 * initial construction. If the object also implements #GInitable you can
 * optionally call g_initable_init() instead.
 * 
 * This method is intended for language bindings. If writing in C,
 * g_async_initable_new_async() should typically be used instead.
 * 
 * When the initialization is finished, `callback` will be called. You can
 * then call g_async_initable_init_finish() to get the result of the
 * initialization.
 * 
 * Implementations may also support cancellation. If `cancellable` is not
 * %NULL, then initialization can be cancelled by triggering the cancellable
 * object from another thread. If the operation was cancelled, the error
 * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL, and
 * the object doesn't support cancellable initialization, the error
 * %G_IO_ERROR_NOT_SUPPORTED will be returned.
 * 
 * As with #GInitable, if the object is not initialized, or initialization
 * returns with an error, then all operations on the object except
 * g_object_ref() and g_object_unref() are considered to be invalid, and
 * have undefined behaviour. They will often fail with g_critical() or
 * g_warning(), but this must not be relied on.
 * 
 * Callers should not assume that a class which implements #GAsyncInitable can
 * be initialized multiple times; for more information, see g_initable_init().
 * If a class explicitly supports being initialized multiple times,
 * implementation requires yielding all subsequent calls to init_async() on the
 * results of the first call.
 * 
 * For classes that also support the #GInitable interface, the default
 * implementation of this method will run the g_initable_init() function
 * in a thread, so if you want to support asynchronous initialization via
 * threads, just implement the #GAsyncInitable interface without overriding
 * any interface methods.
 * @param io_priority the [I/O priority][io-priority] of the operation
 * @param cancellable optional #GCancellable object, %NULL to ignore.
 * @param callback a #GAsyncReadyCallback to call when the request is satisfied
 */
vfunc_init_async(io_priority: number, cancellable?: (Gio.Cancellable | null), callback?: (Gio.AsyncReadyCallback<this> | null)): void
/**
 * Finishes asynchronous initialization and returns the result.
 * See g_async_initable_init_async().
 * @param res a #GAsyncResult.
 */
vfunc_init_finish(res: Gio.AsyncResult): boolean
/**
 * Gets the type of the items in `list`.
 * 
 * All items returned from g_list_model_get_item() are of the type
 * returned by this function, or a subtype, or if the type is an
 * interface, they are an implementation of that interface.
 * 
 * The item type of a #GListModel can not change during the life of the
 * model.
 * @returns the #GType of the items contained in @list.
 */
get_item_type(): GObject.GType
/**
 * Gets the number of items in `list`.
 * 
 * Depending on the model implementation, calling this function may be
 * less efficient than iterating the list with increasing values for
 * `position` until g_list_model_get_item() returns %NULL.
 * @returns the number of items in @list.
 */
get_n_items(): number
/**
 * Get the item at `position`.
 * 
 * If `position` is greater than the number of items in `list,` %NULL is
 * returned.
 * 
 * %NULL is never returned for an index that is smaller than the length
 * of the list.
 * 
 * This function is meant to be used by language bindings in place
 * of g_list_model_get_item().
 * 
 * See also: g_list_model_get_n_items()
 * @param position the position of the item to fetch
 * @returns the object at @position.
 */
get_item(position: number): (A | null)
/**
 * Emits the #GListModel::items-changed signal on `list`.
 * 
 * This function should only be called by classes implementing
 * #GListModel. It has to be called after the internal representation
 * of `list` has been updated, because handlers connected to this signal
 * might query the new state of the list.
 * 
 * Implementations must only make changes to the model (as visible to
 * its consumer) in places that will not cause problems for that
 * consumer.  For models that are driven directly by a write API (such
 * as #GListStore), changes can be reported in response to uses of that
 * API.  For models that represent remote data, changes should only be
 * made from a fresh mainloop dispatch.  It is particularly not
 * permitted to make changes in response to a call to the #GListModel
 * consumer API.
 * 
 * Stated another way: in general, it is assumed that code making a
 * series of accesses to the model via the API, without returning to the
 * mainloop, and without calling other code, will continue to view the
 * same contents of the model.
 * @param position the position at which @list changed
 * @param removed the number of items removed
 * @param added the number of items added
 */
items_changed(position: number, removed: number, added: number): void
/**
 * Get the item at `position`. If `position` is greater than the number of
 * items in `list,` %NULL is returned.
 * 
 * %NULL is never returned for an index that is smaller than the length
 * of the list.  See g_list_model_get_n_items().
 * @param position the position of the item to fetch
 */
vfunc_get_item(position: number): (A | null)
/**
 * Gets the type of the items in `list`.
 * 
 * All items returned from g_list_model_get_item() are of the type
 * returned by this function, or a subtype, or if the type is an
 * interface, they are an implementation of that interface.
 * 
 * The item type of a #GListModel can not change during the life of the
 * model.
 */
vfunc_get_item_type(): GObject.GType
/**
 * Gets the number of items in `list`.
 * 
 * Depending on the model implementation, calling this function may be
 * less efficient than iterating the list with increasing values for
 * `position` until g_list_model_get_item() returns %NULL.
 */
vfunc_get_n_items(): number
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module FuzzyIndexMatch {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
document: GLib.Variant;
    key: string;
    priority: number;
    score: number;
    }

}

class FuzzyIndexMatch extends GObject.Object {

    // Own properties of Dazzle.FuzzyIndexMatch

    get document(): GLib.Variant;
    get key(): string;
    get priority(): number;
    get score(): number;

    // Constructors of Dazzle.FuzzyIndexMatch


constructor(properties?: Partial<FuzzyIndexMatch.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own methods of Dazzle.FuzzyIndexMatch

    get_document(): GLib.Variant
    get_key(): string
    get_priority(): number
    get_score(): number
}

module GraphColumn {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
name: string;
    value_type: GObject.GType;
    valueType: GObject.GType;
    }

}

class GraphColumn extends GObject.Object {

    // Own properties of Dazzle.GraphColumn

    get name(): string;
    set name(val: string);
    get value_type(): GObject.GType;
    get valueType(): GObject.GType;

    // Constructors of Dazzle.GraphColumn


constructor(properties?: Partial<GraphColumn.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](name: string, value_type: GObject.GType): GraphColumn;

    // Own methods of Dazzle.GraphColumn

    get_name(): string
    set_name(name: string): void
}

module GraphLineRenderer {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps, GraphRenderer.ConstructorProps {
column: number;
    line_width: number;
    lineWidth: number;
    stroke_color: string;
    strokeColor: string;
    stroke_color_rgba: Gdk.RGBA;
    strokeColorRgba: Gdk.RGBA;
    }

}

class GraphLineRenderer extends GObject.Object implements GraphRenderer {

    // Own properties of Dazzle.GraphLineRenderer

    get column(): number;
    set column(val: number);
    get line_width(): number;
    set line_width(val: number);
    get lineWidth(): number;
    set lineWidth(val: number);
    get stroke_color(): string;
    set stroke_color(val: string);
    get strokeColor(): string;
    set strokeColor(val: string);
    get stroke_color_rgba(): Gdk.RGBA;
    set stroke_color_rgba(val: Gdk.RGBA);
    get strokeColorRgba(): Gdk.RGBA;
    set strokeColorRgba(val: Gdk.RGBA);

    // Constructors of Dazzle.GraphLineRenderer


constructor(properties?: Partial<GraphLineRenderer.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): GraphLineRenderer;

    // Own methods of Dazzle.GraphLineRenderer

    get_stroke_color_rgba(): Gdk.RGBA
    set_stroke_color(stroke_color: string): void
    set_stroke_color_rgba(stroke_color_rgba: Gdk.RGBA): void

// Inherited methods
render(table: GraphModel, x_begin: number, x_end: number, y_begin: number, y_end: number, cr: cairo.Context, area: cairo.RectangleInt): void
vfunc_render(table: GraphModel, x_begin: number, x_end: number, y_begin: number, y_end: number, cr: cairo.Context, area: cairo.RectangleInt): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module GraphModel {

    // Signal callback interfaces

    interface Changed {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
max_samples: number;
    maxSamples: number;
    timespan: number;
    value_max: number;
    valueMax: number;
    value_min: number;
    valueMin: number;
    }

}

class GraphModel extends GObject.Object {

    // Own properties of Dazzle.GraphModel

    get max_samples(): number;
    set max_samples(val: number);
    get maxSamples(): number;
    set maxSamples(val: number);
    get timespan(): number;
    set timespan(val: number);
    get value_max(): number;
    set value_max(val: number);
    get valueMax(): number;
    set valueMax(val: number);
    get value_min(): number;
    set value_min(val: number);
    get valueMin(): number;
    set valueMin(val: number);

    // Constructors of Dazzle.GraphModel


constructor(properties?: Partial<GraphModel.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): GraphModel;

    // Own signals of Dazzle.GraphModel

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'changed', callback: ((_source: this) => void)): number
    connect_after(signal: 'changed', callback: ((_source: this) => void)): number
    emit(signal: 'changed'): void

    // Own static methods of Dazzle.GraphModel

    static iter_get_timestamp(iter: GraphModelIter): number
    static iter_get_value(iter: GraphModelIter, column: number, value: GObject.Value): void
    static iter_next(iter: GraphModelIter): boolean
    /**
     * Sets an individual value within a specific column.
     * @param iter the iter to set
     * @param column the column to set
     * @param value the new value for the column
     */
    static iter_set(iter: GraphModelIter, column: number, value: GObject.Value): void

    // Own methods of Dazzle.GraphModel

    add_column(column: GraphColumn): number
    get_end_time(): number
    get_iter_first(iter: GraphModelIter): boolean
    get_iter_last(iter: GraphModelIter): boolean
    get_max_samples(): number
    get_n_columns(): number
    get_timespan(): GLib.TimeSpan
    push(timestamp: number): GraphModelIter
    set_max_samples(n_rows: number): void
    set_timespan(timespan: GLib.TimeSpan): void
}

module GraphView {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.DrawingArea.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
model: GraphModel;
    }

}

class GraphView extends Gtk.DrawingArea implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.GraphView

    get model(): GraphModel;
    set model(val: GraphModel);

    // Constructors of Dazzle.GraphView


constructor(properties?: Partial<GraphView.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): GraphView;

    // Own methods of Dazzle.GraphView

    add_renderer(renderer: GraphRenderer): void
    /**
     * Gets the #DzlGraphView:model property.
     * @returns An #DzlGraphModel or %NULL.
     */
    get_model(): (GraphModel | null)
    set_model(model: GraphModel): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module JoinedMenu {

    // Constructor properties interface

    interface ConstructorProps extends Gio.MenuModel.ConstructorProps {

    }

}

class JoinedMenu extends Gio.MenuModel {

    // Constructors of Dazzle.JoinedMenu


constructor(properties?: Partial<JoinedMenu.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): JoinedMenu;

    // Own methods of Dazzle.JoinedMenu

    append_menu(model: Gio.MenuModel): void
    /**
     * Gets the number of joined menus.
     */
    get_n_joined(): number
    prepend_menu(model: Gio.MenuModel): void
    remove_index(index: number): void
    remove_menu(model: Gio.MenuModel): void
}

module ListBox {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.ListBox.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
property_name: string;
    propertyName: string;
    row_type: GObject.GType;
    rowType: GObject.GType;
    row_type_name: string;
    rowTypeName: string;
    }

}

class ListBox extends Gtk.ListBox implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.ListBox

    get property_name(): string;
    get propertyName(): string;
    get row_type(): GObject.GType;
    get rowType(): GObject.GType;
    set row_type_name(val: string);
    set rowTypeName(val: string);

    // Constructors of Dazzle.ListBox


constructor(properties?: Partial<ListBox.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](row_type: GObject.GType, property_name: string): ListBox;
// Conflicted with Gtk.ListBox.new

static ["new"](...args: never[]): any;

    // Own methods of Dazzle.ListBox

    get_model(): (Gio.ListModel | null)
    get_property_name(): string
    get_row_type(): GObject.GType
    set_model(model: Gio.ListModel): void
    /**
     * Sets the max number of rows to cache for reuse.  Set to 0 to return
     * to the default.
     * @param recycle_max max number of rows to cache
     */
    set_recycle_max(recycle_max: number): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ListBoxRow {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.ListBoxRow.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Actionable.ConstructorProps, Gtk.Buildable.ConstructorProps {

    }

}

abstract class ListBoxRow extends Gtk.ListBoxRow implements Atk.ImplementorIface, Gtk.Actionable, Gtk.Buildable {

    // Constructors of Dazzle.ListBoxRow


constructor(properties?: Partial<ListBoxRow.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


// Inherited properties
get action_name(): string;
set action_name(val: string);
get actionName(): string;
set actionName(val: string);
get action_target(): GLib.Variant;
set action_target(val: GLib.Variant);
get actionTarget(): GLib.Variant;
set actionTarget(val: GLib.Variant);
get app_paintable(): boolean;
set app_paintable(val: boolean);
get appPaintable(): boolean;
set appPaintable(val: boolean);
get can_default(): boolean;
set can_default(val: boolean);
get canDefault(): boolean;
set canDefault(val: boolean);
get can_focus(): boolean;
set can_focus(val: boolean);
get canFocus(): boolean;
set canFocus(val: boolean);
get composite_child(): boolean;
get compositeChild(): boolean;
/**
 * Whether the widget is double buffered.
 */
get double_buffered(): boolean;
set double_buffered(val: boolean);
/**
 * Whether the widget is double buffered.
 */
get doubleBuffered(): boolean;
set doubleBuffered(val: boolean);
get events(): Gdk.EventMask;
set events(val: Gdk.EventMask);
/**
 * Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
 */
get expand(): boolean;
set expand(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focus_on_click(): boolean;
set focus_on_click(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focusOnClick(): boolean;
set focusOnClick(val: boolean);
/**
 * How to distribute horizontal space if widget gets extra space, see #GtkAlign
 */
get halign(): Gtk.Align;
set halign(val: Gtk.Align);
get has_default(): boolean;
set has_default(val: boolean);
get hasDefault(): boolean;
set hasDefault(val: boolean);
get has_focus(): boolean;
set has_focus(val: boolean);
get hasFocus(): boolean;
set hasFocus(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get has_tooltip(): boolean;
set has_tooltip(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get hasTooltip(): boolean;
set hasTooltip(val: boolean);
get height_request(): number;
set height_request(val: number);
get heightRequest(): number;
set heightRequest(val: number);
/**
 * Whether to expand horizontally. See gtk_widget_set_hexpand().
 */
get hexpand(): boolean;
set hexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpand_set(): boolean;
set hexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpandSet(): boolean;
set hexpandSet(val: boolean);
get is_focus(): boolean;
set is_focus(val: boolean);
get isFocus(): boolean;
set isFocus(val: boolean);
/**
 * Sets all four sides' margin at once. If read, returns max
 * margin on any side.
 */
get margin(): number;
set margin(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_bottom(): number;
set margin_bottom(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginBottom(): number;
set marginBottom(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_end(): number;
set margin_end(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginEnd(): number;
set marginEnd(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_left(): number;
set margin_left(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginLeft(): number;
set marginLeft(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_right(): number;
set margin_right(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginRight(): number;
set marginRight(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_start(): number;
set margin_start(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginStart(): number;
set marginStart(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_top(): number;
set margin_top(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginTop(): number;
set marginTop(val: number);
get name(): string;
set name(val: string);
get no_show_all(): boolean;
set no_show_all(val: boolean);
get noShowAll(): boolean;
set noShowAll(val: boolean);
/**
 * The requested opacity of the widget. See gtk_widget_set_opacity() for
 * more details about window opacity.
 * 
 * Before 3.8 this was only available in GtkWindow
 */
get opacity(): number;
set opacity(val: number);
get parent(): Gtk.Container;
set parent(val: Gtk.Container);
get receives_default(): boolean;
set receives_default(val: boolean);
get receivesDefault(): boolean;
set receivesDefault(val: boolean);
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scale_factor(): number;
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scaleFactor(): number;
get sensitive(): boolean;
set sensitive(val: boolean);
/**
 * The style of the widget, which contains information about how it will look (colors, etc).
 */
get style(): Gtk.Style;
set style(val: Gtk.Style);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_markup(): string;
set tooltip_markup(val: string);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipMarkup(): string;
set tooltipMarkup(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_text(): string;
set tooltip_text(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipText(): string;
set tooltipText(val: string);
/**
 * How to distribute vertical space if widget gets extra space, see #GtkAlign
 */
get valign(): Gtk.Align;
set valign(val: Gtk.Align);
/**
 * Whether to expand vertically. See gtk_widget_set_vexpand().
 */
get vexpand(): boolean;
set vexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpand_set(): boolean;
set vexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpandSet(): boolean;
set vexpandSet(val: boolean);
get visible(): boolean;
set visible(val: boolean);
get width_request(): number;
set width_request(val: number);
get widthRequest(): number;
set widthRequest(val: number);
/**
 * The widget's window if it is realized, %NULL otherwise.
 */
get window(): Gdk.Window;

// Inherited methods
/**
 * Gets the action name for `actionable`.
 * 
 * See gtk_actionable_set_action_name() for more information.
 * @returns the action name, or %NULL if none is set
 */
get_action_name(): (string | null)
/**
 * Gets the current target value of `actionable`.
 * 
 * See gtk_actionable_set_action_target_value() for more information.
 * @returns the current target value
 */
get_action_target_value(): GLib.Variant
/**
 * Specifies the name of the action with which this widget should be
 * associated.  If `action_name` is %NULL then the widget will be
 * unassociated from any previous action.
 * 
 * Usually this function is used when the widget is located (or will be
 * located) within the hierarchy of a #GtkApplicationWindow.
 * 
 * Names are of the form “win.save” or “app.quit” for actions on the
 * containing #GtkApplicationWindow or its associated #GtkApplication,
 * respectively.  This is the same form used for actions in the #GMenu
 * associated with the window.
 * @param action_name an action name, or %NULL
 */
set_action_name(action_name?: (string | null)): void
/**
 * Sets the target value of an actionable widget.
 * 
 * If `target_value` is %NULL then the target value is unset.
 * 
 * The target value has two purposes.  First, it is used as the
 * parameter to activation of the action associated with the
 * #GtkActionable widget. Second, it is used to determine if the widget
 * should be rendered as “active” — the widget is active if the state
 * is equal to the given target.
 * 
 * Consider the example of associating a set of buttons with a #GAction
 * with string state in a typical “radio button” situation.  Each button
 * will be associated with the same action, but with a different target
 * value for that action.  Clicking on a particular button will activate
 * the action with the target of that button, which will typically cause
 * the action’s state to change to that value.  Since the action’s state
 * is now equal to the target value of the button, the button will now
 * be rendered as active (and the other buttons, with different targets,
 * rendered inactive).
 * @param target_value a #GVariant to set as the target value, or %NULL
 */
set_action_target_value(target_value?: (GLib.Variant | null)): void
/**
 * Sets the action-name and associated string target value of an
 * actionable widget.
 * 
 * `detailed_action_name` is a string in the format accepted by
 * g_action_parse_detailed_name().
 * 
 * (Note that prior to version 3.22.25,
 * this function is only usable for actions with a simple "s" target, and
 * `detailed_action_name` must be of the form `"action::target"` where
 * `action` is the action name and `target` is the string to use
 * as the target.)
 * @param detailed_action_name the detailed action name
 */
set_detailed_action_name(detailed_action_name: string): void
/**
 * Gets the action name for `actionable`.
 * 
 * See gtk_actionable_set_action_name() for more information.
 */
vfunc_get_action_name(): (string | null)
/**
 * Gets the current target value of `actionable`.
 * 
 * See gtk_actionable_set_action_target_value() for more information.
 */
vfunc_get_action_target_value(): GLib.Variant
/**
 * Specifies the name of the action with which this widget should be
 * associated.  If `action_name` is %NULL then the widget will be
 * unassociated from any previous action.
 * 
 * Usually this function is used when the widget is located (or will be
 * located) within the hierarchy of a #GtkApplicationWindow.
 * 
 * Names are of the form “win.save” or “app.quit” for actions on the
 * containing #GtkApplicationWindow or its associated #GtkApplication,
 * respectively.  This is the same form used for actions in the #GMenu
 * associated with the window.
 * @param action_name an action name, or %NULL
 */
vfunc_set_action_name(action_name?: (string | null)): void
/**
 * Sets the target value of an actionable widget.
 * 
 * If `target_value` is %NULL then the target value is unset.
 * 
 * The target value has two purposes.  First, it is used as the
 * parameter to activation of the action associated with the
 * #GtkActionable widget. Second, it is used to determine if the widget
 * should be rendered as “active” — the widget is active if the state
 * is equal to the given target.
 * 
 * Consider the example of associating a set of buttons with a #GAction
 * with string state in a typical “radio button” situation.  Each button
 * will be associated with the same action, but with a different target
 * value for that action.  Clicking on a particular button will activate
 * the action with the target of that button, which will typically cause
 * the action’s state to change to that value.  Since the action’s state
 * is now equal to the target value of the button, the button will now
 * be rendered as active (and the other buttons, with different targets,
 * rendered inactive).
 * @param target_value a #GVariant to set as the target value, or %NULL
 */
vfunc_set_action_target_value(target_value?: (GLib.Variant | null)): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
/**
 * For widgets that can be “activated” (buttons, menu items, etc.)
 * this function activates them. Activation is what happens when you
 * press Enter on a widget during key navigation. If `widget` isn't
 * activatable, the function returns %FALSE.
 * @returns %TRUE if the widget was activatable
 */
activate(): boolean
/**
 * Installs an accelerator for this `widget` in `accel_group` that causes
 * `accel_signal` to be emitted if the accelerator is activated.
 * The `accel_group` needs to be added to the widget’s toplevel via
 * gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
 * Accelerators added through this function are not user changeable during
 * runtime. If you want to support accelerators that can be changed by the
 * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
 * gtk_menu_item_set_accel_path() instead.
 * @param accel_signal widget signal to emit on accelerator activation
 * @param accel_group accel group for this widget, added to its toplevel
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @param accel_flags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
 */
add_accelerator(accel_signal: string, accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): void
/**
 * Adds the device events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_device_events() for details.
 * @param device a #GdkDevice
 * @param events an event mask, see #GdkEventMask
 */
add_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Adds the events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_events() and the
 * [input handling overview][event-masks] for details.
 * @param events an event mask, see #GdkEventMask
 */
add_events(events: number): void
/**
 * Adds a widget to the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
 * list of mnemonic labels for the widget is cleared when the
 * widget is destroyed, so the caller must make sure to update
 * its internal state at this point as well, by using a connection
 * to the #GtkWidget::destroy signal or a weak notifier.
 * @param label a #GtkWidget that acts as a mnemonic label for @widget
 */
add_mnemonic_label(label: Gtk.Widget): void
/**
 * Queues an animation frame update and adds a callback to be called
 * before each frame. Until the tick callback is removed, it will be
 * called frequently (usually at the frame rate of the output device
 * or as quickly as the application can be repainted, whichever is
 * slower). For this reason, is most suitable for handling graphics
 * that change every frame or every few frames. The tick callback does
 * not automatically imply a relayout or repaint. If you want a
 * repaint or relayout, and aren’t changing widget properties that
 * would trigger that (for example, changing the text of a #GtkLabel),
 * then you will have to call gtk_widget_queue_resize() or
 * gtk_widget_queue_draw_area() yourself.
 * 
 * gdk_frame_clock_get_frame_time() should generally be used for timing
 * continuous animations and
 * gdk_frame_timings_get_predicted_presentation_time() if you are
 * trying to display isolated frames at particular times.
 * 
 * This is a more convenient alternative to connecting directly to the
 * #GdkFrameClock::update signal of #GdkFrameClock, since you don't
 * have to worry about when a #GdkFrameClock is assigned to a widget.
 * @param callback function to call for updating animations
 * @returns an id for the connection of this callback. Remove the callback     by passing it to gtk_widget_remove_tick_callback()
 */
add_tick_callback(callback: Gtk.TickCallback): number
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 * @returns %TRUE if the accelerator can be activated.
 */
can_activate_accel(signal_id: number): boolean
/**
 * This function is used by custom widget implementations; if you're
 * writing an app, you’d use gtk_widget_grab_focus() to move the focus
 * to a particular widget, and gtk_container_set_focus_chain() to
 * change the focus tab order. So you may want to investigate those
 * functions instead.
 * 
 * gtk_widget_child_focus() is called by containers as the user moves
 * around the window using keyboard shortcuts. `direction` indicates
 * what kind of motion is taking place (up, down, left, right, tab
 * forward, tab backward). gtk_widget_child_focus() emits the
 * #GtkWidget::focus signal; widgets override the default handler
 * for this signal in order to implement appropriate focus behavior.
 * 
 * The default ::focus handler for a widget should return %TRUE if
 * moving in `direction` left the focus on a focusable location inside
 * that widget, and %FALSE if moving in `direction` moved the focus
 * outside the widget. If returning %TRUE, widgets normally
 * call gtk_widget_grab_focus() to place the focus accordingly;
 * if returning %FALSE, they don’t modify the current focus location.
 * @param direction direction of focus movement
 * @returns %TRUE if focus ended up inside @widget
 */
child_focus(direction: Gtk.DirectionType): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
child_notify(child_property: string): void
child_notify(...args: never[]): any
/**
 * Same as gtk_widget_path(), but always uses the name of a widget’s type,
 * never uses a custom name set with gtk_widget_set_name().
 */
class_path(): [number, string, string]
/**
 * Computes whether a container should give this widget extra space
 * when possible. Containers should check this, rather than
 * looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
 * 
 * This function already checks whether the widget is visible, so
 * visibility does not need to be checked separately. Non-visible
 * widgets are not expanded.
 * 
 * The computed expand value uses either the expand setting explicitly
 * set on the widget itself, or, if none has been explicitly set,
 * the widget may expand if some of its children do.
 * @param orientation expand direction
 * @returns whether widget tree rooted here should be expanded
 */
compute_expand(orientation: Gtk.Orientation): boolean
/**
 * Creates a new #PangoContext with the appropriate font map,
 * font options, font description, and base direction for drawing
 * text for this widget. See also gtk_widget_get_pango_context().
 * @returns the new #PangoContext
 */
create_pango_context(): Pango.Context
/**
 * Creates a new #PangoLayout with the appropriate font map,
 * font description, and base direction for drawing text for
 * this widget.
 * 
 * If you keep a #PangoLayout created in this way around, you need
 * to re-create it when the widget #PangoContext is replaced.
 * This can be tracked by using the #GtkWidget::screen-changed signal
 * on the widget.
 * @param text text to set on the layout (can be %NULL)
 * @returns the new #PangoLayout
 */
create_pango_layout(text?: (string | null)): Pango.Layout
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
destroy(): void
/**
 * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
 * %NULL.  It’s intended to be used as a callback connected to the
 * “destroy” signal of a widget. You connect gtk_widget_destroyed()
 * as a signal handler, and pass the address of your widget variable
 * as user data. Then when the widget is destroyed, the variable will
 * be set to %NULL. Useful for example to avoid multiple copies
 * of the same dialog.
 * @param widget_pointer address of a variable that contains @widget
 */
destroyed(widget_pointer: Gtk.Widget): Gtk.Widget
/**
 * Returns %TRUE if `device` has been shadowed by a GTK+
 * device grab on another widget, so it would stop sending
 * events to `widget`. This may be used in the
 * #GtkWidget::grab-notify signal to check for specific
 * devices. See gtk_device_grab_add().
 * @param device a #GdkDevice
 * @returns %TRUE if there is an ongoing grab on @device          by another #GtkWidget than @widget.
 */
device_is_shadowed(device: Gdk.Device): boolean
/**
 * This function is equivalent to gtk_drag_begin_with_coordinates(),
 * passing -1, -1 as coordinates.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @returns the context for this drag
 */
drag_begin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: (Gdk.Event | null)): Gdk.DragContext
/**
 * Initiates a drag on the source side. The function only needs to be used
 * when the application is starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is %NULL, then %GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used to get information about the drag.
 * 
 * Generally there are three cases when you want to start a drag by hand by
 * calling this function:
 * 
 * 1. During a #GtkWidget::button-press-event handler, if you want to start a drag
 * immediately when the user presses the mouse button.  Pass the `event`
 * that you have in your #GtkWidget::button-press-event handler.
 * 
 * 2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
 * when the mouse moves past a certain threshold distance after a button-press.
 * Pass the `event` that you have in your #GtkWidget::motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).
 * If you really cannot pass a real event, pass %NULL instead.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @param x The initial x coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @param y The initial y coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @returns the context for this drag
 */
drag_begin_with_coordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: (Gdk.Event | null), x: number, y: number): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param start_x X coordinate of start of drag
 * @param start_y Y coordinate of start of drag
 * @param current_x current X coordinate
 * @param current_y current Y coordinate
 * @returns %TRUE if the drag threshold has been passed.
 */
drag_check_threshold(start_x: number, start_y: number, current_x: number, current_y: number): boolean
/**
 * Add the image targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_uri_targets(): void
/**
 * Looks for a match between the supported targets of `context` and the
 * `dest_target_list,` returning the first matching target, otherwise
 * returning %GDK_NONE. `dest_target_list` should usually be the return
 * value from gtk_drag_dest_get_target_list(), but some widgets may
 * have different valid targets for different parts of the widget; in
 * that case, they will have to implement a drag_motion handler that
 * passes the correct target list to this function.
 * @param context drag context
 * @param target_list list of droppable targets, or %NULL to use    gtk_drag_dest_get_target_list (@widget).
 * @returns first target that the source offers     and the dest can accept, or %GDK_NONE
 */
drag_dest_find_target(context: Gdk.DragContext, target_list?: (Gtk.TargetList | null)): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_dest_get_target_list(): (Gtk.TargetList | null)
/**
 * Returns whether the widget has been configured to always
 * emit #GtkWidget::drag-motion signals.
 * @returns %TRUE if the widget always emits   #GtkWidget::drag-motion events
 */
drag_dest_get_track_motion(): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget’s drag-and-drop signals
 * (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget’s #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget::drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget::drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There’s no way to set a default action here, you can use the
 * #GtkWidget::drag-motion callback for that. Here’s an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * 
 * ```c
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of     #GtkTargetEntrys indicating the drop types that this @widget will     accept, or %NULL. Later you can access the list with     gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this @widget.
 */
drag_dest_set(flags: Gtk.DestDefaults, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets this widget as a proxy for drops to another window.
 * @param proxy_window the window to which to forward drag events
 * @param protocol the drag protocol which the @proxy_window accepts   (You can use gdk_drag_get_protocol() to determine this)
 * @param use_coordinates If %TRUE, send the same coordinates to the   destination, because it is an embedded   subwindow.
 */
drag_dest_set_proxy(proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param target_list list of droppable targets, or %NULL for none
 */
drag_dest_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Tells the widget to emit #GtkWidget::drag-motion and
 * #GtkWidget::drag-leave events regardless of the targets and the
 * %GTK_DEST_DEFAULT_MOTION flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param track_motion whether to accept all targets
 */
drag_dest_set_track_motion(track_motion: boolean): void
/**
 * Clears information about a drop destination set with
 * gtk_drag_dest_set(). The widget will no longer receive
 * notification of drags.
 */
drag_dest_unset(): void
/**
 * Gets the data associated with a drag. When the data
 * is received or the retrieval fails, GTK+ will emit a
 * #GtkWidget::drag-data-received signal. Failure of the retrieval
 * is indicated by the length field of the `selection_data`
 * signal parameter being negative. However, when gtk_drag_get_data()
 * is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
 * then the widget will not receive notification of failed
 * drops.
 * @param context the drag context
 * @param target the target (form of the data) to retrieve
 * @param time_ a timestamp for retrieving the data. This will   generally be the time received in a #GtkWidget::drag-motion   or #GtkWidget::drag-drop signal
 */
drag_get_data(context: Gdk.DragContext, target: Gdk.Atom, time_: number): void
/**
 * Highlights a widget as a currently hovered drop target.
 * To end the highlight, call gtk_drag_unhighlight().
 * GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
 */
drag_highlight(): void
/**
 * Add the writable image targets supported by #GtkSelectionData to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_uri_targets(): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_source_get_target_list(): (Gtk.TargetList | null)
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param start_button_mask the bitmask of buttons that can start the drag
 * @param targets the table of targets     that the drag will support, may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
drag_source_set(start_button_mask: Gdk.ModifierType, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to `icon`. See the docs for #GtkIconTheme for more details.
 * @param icon A #GIcon
 */
drag_source_set_icon_gicon(icon: Gio.Icon): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param icon_name name of icon to use
 */
drag_source_set_icon_name(icon_name: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
drag_source_set_icon_pixbuf(pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param stock_id the ID of the stock icon to use
 */
drag_source_set_icon_stock(stock_id: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param target_list list of draggable targets, or %NULL for none
 */
drag_source_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Undoes the effects of gtk_drag_source_set().
 */
drag_source_unset(): void
/**
 * Removes a highlight set by gtk_drag_highlight() from
 * a widget.
 */
drag_unhighlight(): void
/**
 * Draws `widget` to `cr`. The top left corner of the widget will be
 * drawn to the currently set origin point of `cr`.
 * 
 * You should pass a cairo context as `cr` argument that is in an
 * original state. Otherwise the resulting drawing is undefined. For
 * example changing the operator using cairo_set_operator() or the
 * line width using cairo_set_line_width() might have unwanted side
 * effects.
 * You may however change the context’s transform matrix - like with
 * cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
 * region with cairo_clip() prior to calling this function. Also, it
 * is fine to modify the context with cairo_save() and
 * cairo_push_group() prior to calling this function.
 * 
 * Note that special-purpose widgets may contain special code for
 * rendering to the screen and might appear differently on screen
 * and when rendered using gtk_widget_draw().
 * @param cr a cairo context to draw to
 */
draw(cr: cairo.Context): void
/**
 * Ensures that `widget` has a style (`widget->`style).
 * 
 * Not a very useful function; most of the time, if you
 * want the style, the widget is realized, and realized
 * widgets are guaranteed to have a style already.
 */
ensure_style(): void
/**
 * Notifies the user about an input-related error on this widget.
 * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
 * gdk_window_beep(), otherwise it does nothing.
 * 
 * Note that the effect of gdk_window_beep() can be configured in many
 * ways, depending on the windowing backend and the desktop environment
 * or window manager that is used.
 */
error_bell(): void
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 * @returns return from the event signal emission (%TRUE if               the event was handled)
 */
event(event: Gdk.Event): boolean
/**
 * Stops emission of #GtkWidget::child-notify signals on `widget`. The
 * signals are queued until gtk_widget_thaw_child_notify() is called
 * on `widget`.
 * 
 * This is the analogue of g_object_freeze_notify() for child properties.
 */
freeze_child_notify(): void
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 * @returns the #AtkObject associated with @widget
 */
get_accessible(): Atk.Object
/**
 * Retrieves the #GActionGroup that was registered using `prefix`. The resulting
 * #GActionGroup may have been registered to `widget` or any #GtkWidget in its
 * ancestry.
 * 
 * If no action group was found matching `prefix,` then %NULL is returned.
 * @param prefix The “prefix” of the action group.
 * @returns A #GActionGroup or %NULL.
 */
get_action_group(prefix: string): (Gio.ActionGroup | null)
/**
 * Returns the baseline that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function, and when allocating child
 * widgets in #GtkWidget::size_allocate.
 * @returns the baseline of the @widget, or -1 if none
 */
get_allocated_baseline(): number
/**
 * Returns the height that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the height of the @widget
 */
get_allocated_height(): number
/**
 * Retrieves the widget’s allocated size.
 * 
 * This function returns the last values passed to
 * gtk_widget_size_allocate_with_baseline(). The value differs from
 * the size returned in gtk_widget_get_allocation() in that functions
 * like gtk_widget_set_halign() can adjust the allocation, but not
 * the value returned by this function.
 * 
 * If a widget is not visible, its allocated size is 0.
 */
get_allocated_size(): [Gtk.Allocation, number]
/**
 * Returns the width that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the width of the @widget
 */
get_allocated_width(): number
/**
 * Retrieves the widget’s allocation.
 * 
 * Note, when implementing a #GtkContainer: a widget’s allocation will
 * be its “adjusted” allocation, that is, the widget’s parent
 * container typically calls gtk_widget_size_allocate() with an
 * allocation, and that allocation is then adjusted (to handle margin
 * and alignment for example) before assignment to the widget.
 * gtk_widget_get_allocation() returns the adjusted allocation that
 * was actually assigned to the widget. The adjusted allocation is
 * guaranteed to be completely contained within the
 * gtk_widget_size_allocate() allocation, however. So a #GtkContainer
 * is guaranteed that its children stay inside the assigned bounds,
 * but not that they have exactly the bounds the container assigned.
 * There is no way to get the original allocation assigned by
 * gtk_widget_size_allocate(), since it isn’t stored; if a container
 * implementation needs that information it will have to track it itself.
 */
get_allocation(): Gtk.Allocation
/**
 * Gets the first ancestor of `widget` with type `widget_type`. For example,
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
 * the first #GtkBox that’s an ancestor of `widget`. No reference will be
 * added to the returned widget; it should not be unreferenced. See note
 * about checking for a toplevel #GtkWindow in the docs for
 * gtk_widget_get_toplevel().
 * 
 * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
 * considers `widget` to be an ancestor of itself.
 * @param widget_type ancestor type
 * @returns the ancestor widget, or %NULL if not found
 */
get_ancestor(widget_type: GObject.GType): (Gtk.Widget | null)
/**
 * Determines whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * See gtk_widget_set_app_paintable()
 * @returns %TRUE if the widget is app paintable
 */
get_app_paintable(): boolean
/**
 * Determines whether `widget` can be a default widget. See
 * gtk_widget_set_can_default().
 * @returns %TRUE if @widget can be a default widget, %FALSE otherwise
 */
get_can_default(): boolean
/**
 * Determines whether `widget` can own the input focus. See
 * gtk_widget_set_can_focus().
 * @returns %TRUE if @widget can own the input focus, %FALSE otherwise
 */
get_can_focus(): boolean
/**
 * This function is only for use in widget implementations. Obtains
 * `widget->`requisition, unless someone has forced a particular
 * geometry on the widget (e.g. with gtk_widget_set_size_request()),
 * in which case it returns that geometry instead of the widget's
 * requisition.
 * 
 * This function differs from gtk_widget_size_request() in that
 * it retrieves the last size request value from `widget->`requisition,
 * while gtk_widget_size_request() actually calls the "size_request" method
 * on `widget` to compute the size request and fill in `widget->`requisition,
 * and only then returns `widget->`requisition.
 * 
 * Because this function does not call the “size_request” method, it
 * can only be used when you know that `widget->`requisition is
 * up-to-date, that is, gtk_widget_size_request() has been called
 * since the last time a resize was queued. In general, only container
 * implementations have this information; applications should use
 * gtk_widget_size_request().
 */
get_child_requisition(): Gtk.Requisition
/**
 * Gets the value set with gtk_widget_set_child_visible().
 * If you feel a need to use this function, your code probably
 * needs reorganization.
 * 
 * This function is only useful for container implementations and
 * never should be called by an application.
 * @returns %TRUE if the widget is mapped with the parent.
 */
get_child_visible(): boolean
/**
 * Retrieves the widget’s clip area.
 * 
 * The clip area is the area in which all of `widget'`s drawing will
 * happen. Other toolkits call it the bounding box.
 * 
 * Historically, in GTK+ the clip area has been equal to the allocation
 * retrieved via gtk_widget_get_allocation().
 */
get_clip(): Gtk.Allocation
/**
 * Returns the clipboard object for the given selection to
 * be used with `widget`. `widget` must have a #GdkDisplay
 * associated with it, so must be attached to a toplevel
 * window.
 * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
 * @returns the appropriate clipboard object. If no             clipboard already exists, a new one will             be created. Once a clipboard object has             been created, it is persistent for all time.
 */
get_clipboard(selection: Gdk.Atom): Gtk.Clipboard
/**
 * Obtains the composite name of a widget.
 * @returns the composite name of @widget, or %NULL if @widget is not   a composite child. The string should be freed when it is no   longer needed.
 */
get_composite_name(): string
/**
 * Returns whether `device` can interact with `widget` and its
 * children. See gtk_widget_set_device_enabled().
 * @param device a #GdkDevice
 * @returns %TRUE is @device is enabled for @widget
 */
get_device_enabled(device: Gdk.Device): boolean
/**
 * Returns the events mask for the widget corresponding to an specific device. These
 * are the events that the widget will receive when `device` operates on it.
 * @param device a #GdkDevice
 * @returns device event mask for @widget
 */
get_device_events(device: Gdk.Device): Gdk.EventMask
/**
 * Gets the reading direction for a particular widget. See
 * gtk_widget_set_direction().
 * @returns the reading direction for the widget.
 */
get_direction(): Gtk.TextDirection
/**
 * Get the #GdkDisplay for the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow at the top.
 * 
 * In general, you should only create display specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkDisplay for the toplevel for this widget.
 */
get_display(): Gdk.Display
/**
 * Determines whether the widget is double buffered.
 * 
 * See gtk_widget_set_double_buffered()
 * @returns %TRUE if the widget is double buffered
 */
get_double_buffered(): boolean
/**
 * Returns the event mask (see #GdkEventMask) for the widget. These are the
 * events that the widget will receive.
 * 
 * Note: Internally, the widget event mask will be the logical OR of the event
 * mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
 * event mask necessary to cater for every #GtkEventController created for the
 * widget.
 * @returns event mask for @widget
 */
get_events(): number
/**
 * Returns whether the widget should grab focus when it is clicked with the mouse.
 * See gtk_widget_set_focus_on_click().
 * @returns %TRUE if the widget should grab focus when it is clicked with               the mouse.
 */
get_focus_on_click(): boolean
/**
 * Gets the font map that has been set with gtk_widget_set_font_map().
 * @returns A #PangoFontMap, or %NULL
 */
get_font_map(): (Pango.FontMap | null)
/**
 * Returns the #cairo_font_options_t used for Pango rendering. When not set,
 * the defaults font options for the #GdkScreen will be used.
 * @returns the #cairo_font_options_t or %NULL if not set
 */
get_font_options(): (cairo.FontOptions | null)
/**
 * Obtains the frame clock for a widget. The frame clock is a global
 * “ticker” that can be used to drive animations and repaints.  The
 * most common reason to get the frame clock is to call
 * gdk_frame_clock_get_frame_time(), in order to get a time to use for
 * animating. For example you might record the start of the animation
 * with an initial value from gdk_frame_clock_get_frame_time(), and
 * then update the animation by calling
 * gdk_frame_clock_get_frame_time() again during each repaint.
 * 
 * gdk_frame_clock_request_phase() will result in a new frame on the
 * clock, but won’t necessarily repaint any widgets. To repaint a
 * widget, you have to use gtk_widget_queue_draw() which invalidates
 * the widget (thus scheduling it to receive a draw on the next
 * frame). gtk_widget_queue_draw() will also end up requesting a frame
 * on the appropriate frame clock.
 * 
 * A widget’s frame clock will not change while the widget is
 * mapped. Reparenting a widget (which implies a temporary unmap) can
 * change the widget’s frame clock.
 * 
 * Unrealized widgets do not have a frame clock.
 * @returns a #GdkFrameClock, or %NULL if widget is unrealized
 */
get_frame_clock(): (Gdk.FrameClock | null)
/**
 * Gets the value of the #GtkWidget:halign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
 * alignment.
 * @returns the horizontal alignment of @widget
 */
get_halign(): Gtk.Align
/**
 * Returns the current value of the has-tooltip property.  See
 * #GtkWidget:has-tooltip for more information.
 * @returns current value of has-tooltip on @widget.
 */
get_has_tooltip(): boolean
/**
 * Determines whether `widget` has a #GdkWindow of its own. See
 * gtk_widget_set_has_window().
 * @returns %TRUE if @widget has a window, %FALSE otherwise
 */
get_has_window(): boolean
/**
 * Gets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Containers should use gtk_widget_compute_expand() rather than
 * this function, to see whether a widget, or any of its children,
 * has the expand flag set. If any child of a widget wants to
 * expand, the parent may ask to expand also.
 * 
 * This function only looks at the widget’s own hexpand flag, rather
 * than computing whether the entire widget tree rooted at this widget
 * wants to expand.
 * @returns whether hexpand flag is set
 */
get_hexpand(): boolean
/**
 * Gets whether gtk_widget_set_hexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @returns whether hexpand has been explicitly set
 */
get_hexpand_set(): boolean
/**
 * Whether the widget is mapped.
 * @returns %TRUE if the widget is mapped, %FALSE otherwise.
 */
get_mapped(): boolean
/**
 * Gets the value of the #GtkWidget:margin-bottom property.
 * @returns The bottom margin of @widget
 */
get_margin_bottom(): number
/**
 * Gets the value of the #GtkWidget:margin-end property.
 * @returns The end margin of @widget
 */
get_margin_end(): number
/**
 * Gets the value of the #GtkWidget:margin-left property.
 * @returns The left margin of @widget
 */
get_margin_left(): number
/**
 * Gets the value of the #GtkWidget:margin-right property.
 * @returns The right margin of @widget
 */
get_margin_right(): number
/**
 * Gets the value of the #GtkWidget:margin-start property.
 * @returns The start margin of @widget
 */
get_margin_start(): number
/**
 * Gets the value of the #GtkWidget:margin-top property.
 * @returns The top margin of @widget
 */
get_margin_top(): number
/**
 * Returns the modifier mask the `widget’`s windowing system backend
 * uses for a particular purpose.
 * 
 * See gdk_keymap_get_modifier_mask().
 * @param intent the use case for the modifier mask
 * @returns the modifier mask used for @intent.
 */
get_modifier_mask(intent: Gdk.ModifierIntent): Gdk.ModifierType
/**
 * Returns the current modifier style for the widget. (As set by
 * gtk_widget_modify_style().) If no style has previously set, a new
 * #GtkRcStyle will be created with all values unset, and set as the
 * modifier style for the widget. If you make changes to this rc
 * style, you must call gtk_widget_modify_style(), passing in the
 * returned rc style, to make sure that your changes take effect.
 * 
 * Caution: passing the style back to gtk_widget_modify_style() will
 * normally end up destroying it, because gtk_widget_modify_style() copies
 * the passed-in style and sets the copy as the new modifier style,
 * thus dropping any reference to the old modifier style. Add a reference
 * to the modifier style if you want to keep it alive.
 * @returns the modifier style for the widget.     This rc style is owned by the widget. If you want to keep a     pointer to value this around, you must add a refcount using     g_object_ref().
 */
get_modifier_style(): Gtk.RcStyle
/**
 * Retrieves the name of a widget. See gtk_widget_set_name() for the
 * significance of widget names.
 * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
 */
get_name(): string
/**
 * Returns the current value of the #GtkWidget:no-show-all property,
 * which determines whether calls to gtk_widget_show_all()
 * will affect this widget.
 * @returns the current value of the “no-show-all” property.
 */
get_no_show_all(): boolean
/**
 * Fetches the requested opacity for this widget.
 * See gtk_widget_set_opacity().
 * @returns the requested opacity for this widget.
 */
get_opacity(): number
/**
 * Gets a #PangoContext with the appropriate font map, font description,
 * and base direction for this widget. Unlike the context returned
 * by gtk_widget_create_pango_context(), this context is owned by
 * the widget (it can be used until the screen for the widget changes
 * or the widget is removed from its toplevel), and will be updated to
 * match any changes to the widget’s attributes. This can be tracked
 * by using the #GtkWidget::screen-changed signal on the widget.
 * @returns the #PangoContext for the widget.
 */
get_pango_context(): Pango.Context
/**
 * Returns the parent container of `widget`.
 * @returns the parent container of @widget, or %NULL
 */
get_parent(): (Gtk.Widget | null)
/**
 * Gets `widget’`s parent window, or %NULL if it does not have one.
 * @returns the parent window of @widget, or %NULL if it does not have a parent window.
 */
get_parent_window(): (Gdk.Window | null)
/**
 * Returns the #GtkWidgetPath representing `widget,` if the widget
 * is not connected to a toplevel widget, a partial path will be
 * created.
 * @returns The #GtkWidgetPath representing @widget
 */
get_path(): Gtk.WidgetPath
/**
 * Obtains the location of the mouse pointer in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(); and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 */
get_pointer(): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves the minimum and natural size of a widget, taking
 * into account the widget’s preference for height-for-width management.
 * 
 * This is used to retrieve a suitable size by container widgets which do
 * not impose any restrictions on the child placement. It can be used
 * to deduce toplevel window and menu sizes as well as child widgets in
 * free-form containers such as GtkLayout.
 * 
 * Handle with care. Note that the natural height of a height-for-width
 * widget will generally be a smaller size than the minimum height, since the required
 * height for the natural width is generally smaller than the required height for
 * the minimum width.
 * 
 * Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
 * baseline alignment.
 */
get_preferred_size(): [Gtk.Requisition | null, Gtk.Requisition | null]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
get_preferred_width_for_height(height: number): [number, number]
/**
 * Determines whether `widget` is realized.
 * @returns %TRUE if @widget is realized, %FALSE otherwise
 */
get_realized(): boolean
/**
 * Determines whether `widget` is always treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_set_receives_default().
 * @returns %TRUE if @widget acts as the default widget when focused,               %FALSE otherwise
 */
get_receives_default(): boolean
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 * @returns The #GtkSizeRequestMode preferred by @widget.
 */
get_request_mode(): Gtk.SizeRequestMode
/**
 * Retrieves the widget’s requisition.
 * 
 * This function should only be used by widget implementations in
 * order to figure whether the widget’s requisition has actually
 * changed after some internal state change (so that they can call
 * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
 * 
 * Normally, gtk_widget_size_request() should be used.
 */
get_requisition(): Gtk.Requisition
/**
 * Get the root window where this widget is located. This function can
 * only be called after the widget has been added to a widget
 * hierarchy with #GtkWindow at the top.
 * 
 * The root window is useful for such purposes as creating a popup
 * #GdkWindow associated with the window. In general, you should only
 * create display specific resources when a widget has been realized,
 * and you should free those resources when the widget is unrealized.
 * @returns the #GdkWindow root window for the toplevel for this widget.
 */
get_root_window(): Gdk.Window
/**
 * Retrieves the internal scale factor that maps from window coordinates
 * to the actual device pixels. On traditional systems this is 1, on
 * high density outputs, it can be a higher value (typically 2).
 * 
 * See gdk_window_get_scale_factor().
 * @returns the scale factor for @widget
 */
get_scale_factor(): number
/**
 * Get the #GdkScreen from the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow
 * at the top.
 * 
 * In general, you should only create screen specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkScreen for the toplevel for this widget.
 */
get_screen(): Gdk.Screen
/**
 * Returns the widget’s sensitivity (in the sense of returning
 * the value that has been set using gtk_widget_set_sensitive()).
 * 
 * The effective sensitivity of a widget is however determined by both its
 * own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
 * @returns %TRUE if the widget is sensitive
 */
get_sensitive(): boolean
/**
 * Gets the settings object holding the settings used for this widget.
 * 
 * Note that this function can only be called when the #GtkWidget
 * is attached to a toplevel, since the settings object is specific
 * to a particular #GdkScreen.
 * @returns the relevant #GtkSettings object
 */
get_settings(): Gtk.Settings
/**
 * Gets the size request that was explicitly set for the widget using
 * gtk_widget_set_size_request(). A value of -1 stored in `width` or
 * `height` indicates that that dimension has not been set explicitly
 * and the natural requisition of the widget will be used instead. See
 * gtk_widget_set_size_request(). To get the size a widget will
 * actually request, call gtk_widget_get_preferred_size() instead of
 * this function.
 */
get_size_request(): [number, number]
/**
 * Returns the widget’s state. See gtk_widget_set_state().
 * @returns the state of @widget.
 */
get_state(): Gtk.StateType
/**
 * Returns the widget state as a flag set. It is worth mentioning
 * that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
 * returned, that is, also based on parent insensitivity, even if
 * `widget` itself is sensitive.
 * 
 * Also note that if you are looking for a way to obtain the
 * #GtkStateFlags to pass to a #GtkStyleContext method, you
 * should look at gtk_style_context_get_state().
 * @returns The state flags for widget
 */
get_state_flags(): Gtk.StateFlags
/**
 * Simply an accessor function that returns `widget->`style.
 * @returns the widget’s #GtkStyle
 */
get_style(): Gtk.Style
/**
 * Returns the style context associated to `widget`. The returned object is
 * guaranteed to be the same for the lifetime of `widget`.
 * @returns a #GtkStyleContext. This memory is owned by @widget and          must not be freed.
 */
get_style_context(): Gtk.StyleContext
/**
 * Returns %TRUE if `widget` is multiple pointer aware. See
 * gtk_widget_set_support_multidevice() for more information.
 * @returns %TRUE if @widget is multidevice aware.
 */
get_support_multidevice(): boolean
/**
 * Fetch an object build from the template XML for `widget_type` in this `widget` instance.
 * 
 * This will only report children which were previously declared with
 * gtk_widget_class_bind_template_child_full() or one of its
 * variants.
 * 
 * This function is only meant to be called for code which is private to the `widget_type` which
 * declared the child and is meant for language bindings which cannot easily make use
 * of the GObject structure offsets.
 * @param widget_type The #GType to get a template child for
 * @param name The “id” of the child defined in the template XML
 * @returns The object built in the template XML with the id @name
 */
get_template_child<T = GObject.Object>(widget_type: GObject.GType, name: string): T
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_markup(): (string | null)
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_text(): (string | null)
/**
 * Returns the #GtkWindow of the current tooltip. This can be the
 * GtkWindow created by default, or the custom tooltip window set
 * using gtk_widget_set_tooltip_window().
 * @returns The #GtkWindow of the current tooltip.
 */
get_tooltip_window(): Gtk.Window
/**
 * This function returns the topmost widget in the container hierarchy
 * `widget` is a part of. If `widget` has no parent widgets, it will be
 * returned as the topmost widget. No reference will be added to the
 * returned widget; it should not be unreferenced.
 * 
 * Note the difference in behavior vs. gtk_widget_get_ancestor();
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
 * would return
 * %NULL if `widget` wasn’t inside a toplevel window, and if the
 * window was inside a #GtkWindow-derived widget which was in turn
 * inside the toplevel #GtkWindow. While the second case may
 * seem unlikely, it actually happens when a #GtkPlug is embedded
 * inside a #GtkSocket within the same application.
 * 
 * To reliably find the toplevel #GtkWindow, use
 * gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
 * on the result. For instance, to get the title of a widget's toplevel
 * window, one might use:
 * 
 * ```c
 * static const char *
 * get_widget_toplevel_title (GtkWidget *widget)
 * {
 *   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 *   if (GTK_IS_WINDOW (toplevel))
 *     {
 *       return gtk_window_get_title (GTK_WINDOW (toplevel));
 *     }
 * 
 *   return NULL;
 * }
 * ```
 * 
 * @returns the topmost ancestor of @widget, or @widget itself    if there’s no ancestor.
 */
get_toplevel(): Gtk.Widget
/**
 * Gets the value of the #GtkWidget:valign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. If your widget want to support baseline aligned
 * children it must use gtk_widget_get_valign_with_baseline(), or
 * `g_object_get (widget, "valign", &value, NULL)`, which will
 * also report the true value.
 * @returns the vertical alignment of @widget, ignoring baseline alignment
 */
get_valign(): Gtk.Align
/**
 * Gets the value of the #GtkWidget:valign property, including
 * %GTK_ALIGN_BASELINE.
 * @returns the vertical alignment of @widget
 */
get_valign_with_baseline(): Gtk.Align
/**
 * Gets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_get_hexpand() for more detail.
 * @returns whether vexpand flag is set
 */
get_vexpand(): boolean
/**
 * Gets whether gtk_widget_set_vexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * See gtk_widget_get_hexpand_set() for more detail.
 * @returns whether vexpand has been explicitly set
 */
get_vexpand_set(): boolean
/**
 * Determines whether the widget is visible. If you want to
 * take into account whether the widget’s parent is also marked as
 * visible, use gtk_widget_is_visible() instead.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See gtk_widget_set_visible().
 * @returns %TRUE if the widget is visible
 */
get_visible(): boolean
/**
 * Gets the visual that will be used to render `widget`.
 * @returns the visual for @widget
 */
get_visual(): Gdk.Visual
/**
 * Returns the widget’s window if it is realized, %NULL otherwise
 * @returns @widget’s window.
 */
get_window(): (Gdk.Window | null)
/**
 * Makes `widget` the current grabbed widget.
 * 
 * This means that interaction with other widgets in the same
 * application is blocked and mouse as well as keyboard events
 * are delivered to this widget.
 * 
 * If `widget` is not sensitive, it is not set as the current
 * grabbed widget and this function does nothing.
 */
grab_add(): void
/**
 * Causes `widget` to become the default widget. `widget` must be able to be
 * a default widget; typically you would ensure this yourself
 * by calling gtk_widget_set_can_default() with a %TRUE value.
 * The default widget is activated when
 * the user presses Enter in a window. Default widgets must be
 * activatable, that is, gtk_widget_activate() should affect them. Note
 * that #GtkEntry widgets require the “activates-default” property
 * set to %TRUE before they activate the default widget when Enter
 * is pressed and the #GtkEntry is focused.
 */
grab_default(): void
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
grab_focus(): void
/**
 * Removes the grab from the given widget.
 * 
 * You have to pair calls to gtk_grab_add() and gtk_grab_remove().
 * 
 * If `widget` does not have the grab, this function does nothing.
 */
grab_remove(): void
/**
 * Determines whether the widget is currently grabbing events, so it
 * is the only widget receiving input events (keyboard and mouse).
 * 
 * See also gtk_grab_add().
 * @returns %TRUE if the widget is in the grab_widgets stack
 */
has_grab(): boolean
/**
 * Determines if the widget style has been looked up through the rc mechanism.
 * @returns %TRUE if the widget has been looked up through the rc   mechanism, %FALSE otherwise.
 */
has_rc_style(): boolean
/**
 * Checks whether there is a #GdkScreen is associated with
 * this widget. All toplevel widgets have an associated
 * screen, and all widgets added into a hierarchy with a toplevel
 * window at the top.
 * @returns %TRUE if there is a #GdkScreen associated   with the widget.
 */
has_screen(): boolean
/**
 * Determines if the widget should show a visible indication that
 * it has the global input focus. This is a convenience function for
 * use in ::draw handlers that takes into account whether focus
 * indication should currently be shown in the toplevel window of
 * `widget`. See gtk_window_get_focus_visible() for more information
 * about focus indication.
 * 
 * To find out if the widget has the global input focus, use
 * gtk_widget_has_focus().
 * @returns %TRUE if the widget should display a “focus rectangle”
 */
has_visible_focus(): boolean
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
hide(): void
/**
 * Utility function; intended to be connected to the #GtkWidget::delete-event
 * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
 * argument, then returns %TRUE. If connected to ::delete-event, the
 * result is that clicking the close button for a window (on the
 * window frame, top right corner usually) will hide but not destroy
 * the window. By default, GTK+ destroys windows when ::delete-event
 * is received.
 * @returns %TRUE
 */
hide_on_delete(): boolean
/**
 * Returns whether the widget is currently being destroyed.
 * This information can sometimes be used to avoid doing
 * unnecessary work.
 * @returns %TRUE if @widget is being destroyed
 */
in_destruction(): boolean
/**
 * Creates and initializes child widgets defined in templates. This
 * function must be called in the instance initializer for any
 * class which assigned itself a template using gtk_widget_class_set_template()
 * 
 * It is important to call this function in the instance initializer
 * of a #GtkWidget subclass and not in #GObject.constructed() or
 * #GObject.constructor() for two reasons.
 * 
 * One reason is that generally derived widgets will assume that parent
 * class composite widgets have been created in their instance
 * initializers.
 * 
 * Another reason is that when calling g_object_new() on a widget with
 * composite templates, it’s important to build the composite widgets
 * before the construct properties are set. Properties passed to g_object_new()
 * should take precedence over properties set in the private template XML.
 */
init_template(): void
/**
 * Sets an input shape for this widget’s GDK window. This allows for
 * windows which react to mouse click in a nonrectangular region, see
 * gdk_window_input_shape_combine_region() for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
input_shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Inserts `group` into `widget`. Children of `widget` that implement
 * #GtkActionable can then be associated with actions in `group` by
 * setting their “action-name” to
 * `prefix`.`action-name`.
 * 
 * If `group` is %NULL, a previously inserted group for `name` is removed
 * from `widget`.
 * @param name the prefix for actions in @group
 * @param group a #GActionGroup, or %NULL
 */
insert_action_group(name: string, group?: (Gio.ActionGroup | null)): void
/**
 * Computes the intersection of a `widget’`s area and `area,` storing
 * the intersection in `intersection,` and returns %TRUE if there was
 * an intersection.  `intersection` may be %NULL if you’re only
 * interested in whether there was an intersection.
 * @param area a rectangle
 * @returns %TRUE if there was an intersection
 */
intersect(area: Gdk.Rectangle): [boolean, Gdk.Rectangle | null]
/**
 * Determines whether `widget` is somewhere inside `ancestor,` possibly with
 * intermediate containers.
 * @param ancestor another #GtkWidget
 * @returns %TRUE if @ancestor contains @widget as a child,    grandchild, great grandchild, etc.
 */
is_ancestor(ancestor: Gtk.Widget): boolean
/**
 * Whether `widget` can rely on having its alpha channel
 * drawn correctly. On X11 this function returns whether a
 * compositing manager is running for `widget’`s screen.
 * 
 * Please note that the semantics of this call will change
 * in the future if used on a widget that has a composited
 * window in its hierarchy (as set by gdk_window_set_composited()).
 * @returns %TRUE if the widget can rely on its alpha channel being drawn correctly.
 */
is_composited(): boolean
/**
 * Determines whether `widget` can be drawn to. A widget can be drawn
 * to if it is mapped and visible.
 * @returns %TRUE if @widget is drawable, %FALSE otherwise
 */
is_drawable(): boolean
/**
 * Returns the widget’s effective sensitivity, which means
 * it is sensitive itself and also its parent widget is sensitive
 * @returns %TRUE if the widget is effectively sensitive
 */
is_sensitive(): boolean
/**
 * Determines whether `widget` is a toplevel widget.
 * 
 * Currently only #GtkWindow and #GtkInvisible (and out-of-process
 * #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
 * widget.
 * @returns %TRUE if @widget is a toplevel, %FALSE otherwise
 */
is_toplevel(): boolean
/**
 * Determines whether the widget and all its parents are marked as
 * visible.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See also gtk_widget_get_visible() and gtk_widget_set_visible()
 * @returns %TRUE if the widget and all its parents are visible
 */
is_visible(): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 * @returns %TRUE if stopping keyboard navigation is fine, %FALSE               if the emitting widget should try to handle the keyboard               navigation attempt in its parent container(s).
 */
keynav_failed(direction: Gtk.DirectionType): boolean
/**
 * Lists the closures used by `widget` for accelerator group connections
 * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
 * The closures can be used to monitor accelerator changes on `widget,`
 * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
 * #GtkAccelGroup of a closure which can be found out with
 * gtk_accel_group_from_accel_closure().
 * @returns a newly allocated #GList of closures
 */
list_accel_closures(): GObject.Closure[]
/**
 * Retrieves a %NULL-terminated array of strings containing the prefixes of
 * #GActionGroup's available to `widget`.
 * @returns a %NULL-terminated array of strings.
 */
list_action_prefixes(): string[]
/**
 * Returns a newly allocated list of the widgets, normally labels, for
 * which this widget is the target of a mnemonic (see for example,
 * gtk_label_set_mnemonic_widget()).
 * 
 * The widgets in the list are not individually referenced. If you
 * want to iterate through the list and perform actions involving
 * callbacks that might destroy the widgets, you
 * must call `g_list_foreach (result,
 * (GFunc)g_object_ref, NULL)` first, and then unref all the
 * widgets afterwards.
 * @returns the list of  mnemonic labels; free this list  with g_list_free() when you are done with it.
 */
list_mnemonic_labels(): Gtk.Widget[]
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
map(): void
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 * @returns %TRUE if the signal has been handled
 */
mnemonic_activate(group_cycling: boolean): boolean
/**
 * Sets the base color for a widget in a particular state.
 * All other style values are left untouched. The base color
 * is the background color used along with the text color
 * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
 * and #GtkTextView. See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > base color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the base color on that.
 * @param state the state for which to set the base color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_base().
 */
modify_base(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > background color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the background color on that.
 * @param state the state for which to set the background color
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_bg().
 */
modify_bg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the #GtkWidget
 * cursor-color and secondary-cursor-color
 * style properties.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param primary the color to use for primary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_cursor().
 * @param secondary the color to use for secondary cursor (does     not need to be allocated), or %NULL to undo the effect of     previous calls to of gtk_widget_modify_cursor().
 */
modify_cursor(primary?: (Gdk.Color | null), secondary?: (Gdk.Color | null)): void
/**
 * Sets the foreground color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the foreground color
 * @param color the color to assign (does not need to be allocated),     or %NULL to undo the effect of previous calls to     of gtk_widget_modify_fg().
 */
modify_fg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the font to use for a widget.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param font_desc the font description to use, or %NULL     to undo the effect of previous calls to gtk_widget_modify_font()
 */
modify_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Modifies style values on the widget.
 * 
 * Modifications made using this technique take precedence over
 * style values set via an RC file, however, they will be overridden
 * if a style is explicitly set on the widget using gtk_widget_set_style().
 * The #GtkRcStyle-struct is designed so each field can either be
 * set or unset, so it is possible, using this function, to modify some
 * style values and leave the others unchanged.
 * 
 * Note that modifications made with this function are not cumulative
 * with previous calls to gtk_widget_modify_style() or with such
 * functions as gtk_widget_modify_fg(). If you wish to retain
 * previous values, you must first call gtk_widget_get_modifier_style(),
 * make your modifications to the returned style, then call
 * gtk_widget_modify_style() with that style. On the other hand,
 * if you first call gtk_widget_modify_style(), subsequent calls
 * to such functions gtk_widget_modify_fg() will have a cumulative
 * effect with the initial modifications.
 * @param style the #GtkRcStyle-struct holding the style modifications
 */
modify_style(style: Gtk.RcStyle): void
/**
 * Sets the text color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * The text color is the foreground color used along with the
 * base color (see gtk_widget_modify_base()) for widgets such
 * as #GtkEntry and #GtkTextView.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the text color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_text().
 */
modify_text(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color to use for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color().
 * @param state the state for which to set the background color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_background_color()
 */
override_background_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the color to use for a widget.
 * 
 * All other style values are left untouched.
 * 
 * This function does not act recursively. Setting the color of a
 * container does not affect its children. Note that some widgets that
 * you may not think of as containers, for instance #GtkButtons,
 * are actually containers.
 * 
 * This API is mostly meant as a quick way for applications to
 * change a widget appearance. If you are developing a widgets
 * library and intend this change to be themeable, it is better
 * done by setting meaningful CSS classes in your
 * widget/container implementation through gtk_style_context_add_class().
 * 
 * This way, your widget library can install a #GtkCssProvider
 * with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
 * to provide a default styling for those widgets that need so, and
 * this theming may fully overridden by the user’s theme.
 * 
 * Note that for complex widgets this may bring in undesired
 * results (such as uniform background color everywhere), in
 * these cases it is better to fully style such widgets through a
 * #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
 * priority.
 * @param state the state for which to set the color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_color()
 */
override_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the
 * cursor-color and secondary-cursor-color
 * style properties. All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * Note that the underlying properties have the #GdkColor type,
 * so the alpha value in `primary` and `secondary` will be ignored.
 * @param cursor the color to use for primary cursor (does not need to be     allocated), or %NULL to undo the effect of previous calls to     of gtk_widget_override_cursor().
 * @param secondary_cursor the color to use for secondary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_override_cursor().
 */
override_cursor(cursor?: (Gdk.RGBA | null), secondary_cursor?: (Gdk.RGBA | null)): void
/**
 * Sets the font to use for a widget. All other style values are
 * left untouched. See gtk_widget_override_color().
 * @param font_desc the font description to use, or %NULL to undo     the effect of previous calls to gtk_widget_override_font()
 */
override_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Sets a symbolic color for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color() for overriding the foreground
 * or background color.
 * @param name the name of the symbolic color to modify
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to gtk_widget_override_symbolic_color()
 */
override_symbolic_color(name: string, color?: (Gdk.RGBA | null)): void
/**
 * Obtains the full path to `widget`. The path is simply the name of a
 * widget and all its parents in the container hierarchy, separated by
 * periods. The name of a widget comes from
 * gtk_widget_get_name(). Paths are used to apply styles to a widget
 * in gtkrc configuration files. Widget names are the type of the
 * widget by default (e.g. “GtkButton”) or can be set to an
 * application-specific value with gtk_widget_set_name(). By setting
 * the name of a widget, you allow users or theme authors to apply
 * styles to that specific widget in their gtkrc
 * file. `path_reversed_p` fills in the path in reverse order,
 * i.e. starting with `widget’`s name instead of starting with the name
 * of `widget’`s outermost ancestor.
 */
path(): [number, string, string]
/**
 * This function is only for use in widget implementations.
 * 
 * Flags the widget for a rerun of the GtkWidgetClass::size_allocate
 * function. Use this function instead of gtk_widget_queue_resize()
 * when the `widget'`s size request didn't change but it wants to
 * reposition its contents.
 * 
 * An example user of this function is gtk_widget_set_halign().
 */
queue_allocate(): void
/**
 * Mark `widget` as needing to recompute its expand flags. Call
 * this function when setting legacy expand child properties
 * on the child of a container.
 * 
 * See gtk_widget_compute_expand().
 */
queue_compute_expand(): void
/**
 * Equivalent to calling gtk_widget_queue_draw_area() for the
 * entire area of a widget.
 */
queue_draw(): void
/**
 * Convenience function that calls gtk_widget_queue_draw_region() on
 * the region created from the given coordinates.
 * 
 * The region here is specified in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(), and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 * 
 * `width` or `height` may be 0, in this case this function does
 * nothing. Negative values for `width` and `height` are not allowed.
 * @param x x coordinate of upper-left corner of rectangle to redraw
 * @param y y coordinate of upper-left corner of rectangle to redraw
 * @param width width of region to draw
 * @param height height of region to draw
 */
queue_draw_area(x: number, y: number, width: number, height: number): void
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
queue_draw_region(region: cairo.Region): void
/**
 * This function is only for use in widget implementations.
 * Flags a widget to have its size renegotiated; should
 * be called when a widget for some reason has a new size request.
 * For example, when you change the text in a #GtkLabel, #GtkLabel
 * queues a resize to ensure there’s enough space for the new text.
 * 
 * Note that you cannot call gtk_widget_queue_resize() on a widget
 * from inside its implementation of the GtkWidgetClass::size_allocate
 * virtual method. Calls to gtk_widget_queue_resize() from inside
 * GtkWidgetClass::size_allocate will be silently ignored.
 */
queue_resize(): void
/**
 * This function works like gtk_widget_queue_resize(),
 * except that the widget is not invalidated.
 */
queue_resize_no_redraw(): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
realize(): void
/**
 * Computes the intersection of a `widget’`s area and `region,` returning
 * the intersection. The result may be empty, use cairo_region_is_empty() to
 * check.
 * @param region a #cairo_region_t, in the same coordinate system as          @widget->allocation. That is, relative to @widget->window          for widgets which return %FALSE from gtk_widget_get_has_window();          relative to the parent window of @widget->window otherwise.
 * @returns A newly allocated region holding the intersection of @widget     and @region.
 */
region_intersect(region: cairo.Region): cairo.Region
/**
 * Registers a #GdkWindow with the widget and sets it up so that
 * the widget receives events for it. Call gtk_widget_unregister_window()
 * when destroying the window.
 * 
 * Before 3.8 you needed to call gdk_window_set_user_data() directly to set
 * this up. This is now deprecated and you should use gtk_widget_register_window()
 * instead. Old code will keep working as is, although some new features like
 * transparency might not work perfectly.
 * @param window a #GdkWindow
 */
register_window(window: Gdk.Window): void
/**
 * Removes an accelerator from `widget,` previously installed with
 * gtk_widget_add_accelerator().
 * @param accel_group accel group for this widget
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @returns whether an accelerator was installed and could be removed
 */
remove_accelerator(accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType): boolean
/**
 * Removes a widget from the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
 * must have previously been added to the list with
 * gtk_widget_add_mnemonic_label().
 * @param label a #GtkWidget that was previously set as a mnemonic label for         @widget with gtk_widget_add_mnemonic_label().
 */
remove_mnemonic_label(label: Gtk.Widget): void
/**
 * Removes a tick callback previously registered with
 * gtk_widget_add_tick_callback().
 * @param id an id returned by gtk_widget_add_tick_callback()
 */
remove_tick_callback(id: number): void
/**
 * A convenience function that uses the theme settings for `widget`
 * to look up `stock_id` and render it to a pixbuf. `stock_id` should
 * be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size`
 * should be a size such as #GTK_ICON_SIZE_MENU. `detail` should be a
 * string that identifies the widget or code doing the rendering, so
 * that theme engines can special-case rendering for that widget or
 * code.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be
 * freed after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @param detail render detail to pass to theme engine
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon(stock_id: string, size: number, detail?: (string | null)): (GdkPixbuf.Pixbuf | null)
/**
 * A convenience function that uses the theme engine and style
 * settings for `widget` to look up `stock_id` and render it to
 * a pixbuf. `stock_id` should be a stock icon ID such as
 * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
 * such as #GTK_ICON_SIZE_MENU.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be freed
 * after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon_pixbuf(stock_id: string, size: number): (GdkPixbuf.Pixbuf | null)
/**
 * Moves a widget from one #GtkContainer to another, handling reference
 * count issues to avoid destroying the widget.
 * @param new_parent a #GtkContainer to move the widget into
 */
reparent(new_parent: Gtk.Widget): void
/**
 * Reset the styles of `widget` and all descendents, so when
 * they are looked up again, they get the correct values
 * for the currently loaded RC file settings.
 * 
 * This function is not useful for applications.
 */
reset_rc_styles(): void
/**
 * Updates the style context of `widget` and all descendants
 * by updating its widget path. #GtkContainers may want
 * to use this on a child when reordering it in a way that a different
 * style might apply to it. See also gtk_container_get_path_for_child().
 */
reset_style(): void
/**
 * Very rarely-used function. This function is used to emit
 * an expose event on a widget. This function is not normally used
 * directly. The only time it is used is when propagating an expose
 * event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
 * and that is normally done using gtk_container_propagate_draw().
 * 
 * If you want to force an area of a window to be redrawn,
 * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
 * To cause the redraw to be done immediately, follow that call
 * with a call to gdk_window_process_updates().
 * @param event a expose #GdkEvent
 * @returns return from the event signal emission (%TRUE if   the event was handled)
 */
send_expose(event: Gdk.Event): number
/**
 * Sends the focus change `event` to `widget`
 * 
 * This function is not meant to be used by applications. The only time it
 * should be used is when it is necessary for a #GtkWidget to assign focus
 * to a widget that is semantically owned by the first widget even though
 * it’s not a direct child - for instance, a search entry in a floating
 * window similar to the quick search in #GtkTreeView.
 * 
 * An example of its usage is:
 * 
 * 
 * ```c
 *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
 * 
 *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
 *   fevent->focus_change.in = TRUE;
 *   fevent->focus_change.window = _gtk_widget_get_window (widget);
 *   if (fevent->focus_change.window != NULL)
 *     g_object_ref (fevent->focus_change.window);
 * 
 *   gtk_widget_send_focus_change (widget, fevent);
 * 
 *   gdk_event_free (event);
 * ```
 * 
 * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
 * @returns the return value from the event signal emission: %TRUE   if the event was handled, and %FALSE otherwise
 */
send_focus_change(event: Gdk.Event): boolean
/**
 * Given an accelerator group, `accel_group,` and an accelerator path,
 * `accel_path,` sets up an accelerator in `accel_group` so whenever the
 * key binding that is defined for `accel_path` is pressed, `widget`
 * will be activated.  This removes any accelerators (for any
 * accelerator group) installed by previous calls to
 * gtk_widget_set_accel_path(). Associating accelerators with
 * paths allows them to be modified by the user and the modifications
 * to be saved for future use. (See gtk_accel_map_save().)
 * 
 * This function is a low level function that would most likely
 * be used by a menu creation system like #GtkUIManager. If you
 * use #GtkUIManager, setting up accelerator paths will be done
 * automatically.
 * 
 * Even when you you aren’t using #GtkUIManager, if you only want to
 * set up accelerators on menu items gtk_menu_item_set_accel_path()
 * provides a somewhat more convenient interface.
 * 
 * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
 * pass a static string, you can save some memory by interning it first with
 * g_intern_static_string().
 * @param accel_path path used to look up the accelerator
 * @param accel_group a #GtkAccelGroup.
 */
set_accel_path(accel_path?: (string | null), accel_group?: (Gtk.AccelGroup | null)): void
/**
 * Sets the widget’s allocation.  This should not be used
 * directly, but from within a widget’s size_allocate method.
 * 
 * The allocation set should be the “adjusted” or actual
 * allocation. If you’re implementing a #GtkContainer, you want to use
 * gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
 * The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
 * allocation inside gtk_widget_size_allocate() to create an adjusted
 * allocation.
 * @param allocation a pointer to a #GtkAllocation to copy from
 */
set_allocation(allocation: Gtk.Allocation): void
/**
 * Sets whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * This is a hint to the widget and does not affect the behavior of
 * the GTK+ core; many widgets ignore this flag entirely. For widgets
 * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
 * the effect is to suppress default themed drawing of the widget's
 * background. (Children of the widget will still be drawn.) The application
 * is then entirely responsible for drawing the widget background.
 * 
 * Note that the background is still drawn when the widget is mapped.
 * @param app_paintable %TRUE if the application will paint on the widget
 */
set_app_paintable(app_paintable: boolean): void
/**
 * Specifies whether `widget` can be a default widget. See
 * gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param can_default whether or not @widget can be a default widget.
 */
set_can_default(can_default: boolean): void
/**
 * Specifies whether `widget` can own the input focus. See
 * gtk_widget_grab_focus() for actually setting the input focus on a
 * widget.
 * @param can_focus whether or not @widget can own the input focus.
 */
set_can_focus(can_focus: boolean): void
/**
 * Sets whether `widget` should be mapped along with its when its parent
 * is mapped and `widget` has been shown with gtk_widget_show().
 * 
 * The child visibility can be set for widget before it is added to
 * a container with gtk_widget_set_parent(), to avoid mapping
 * children unnecessary before immediately unmapping them. However
 * it will be reset to its default state of %TRUE when the widget
 * is removed from a container.
 * 
 * Note that changing the child visibility of a widget does not
 * queue a resize on the widget. Most of the time, the size of
 * a widget is computed from all visible children, whether or
 * not they are mapped. If this is not the case, the container
 * can queue a resize itself.
 * 
 * This function is only useful for container implementations and
 * never should be called by an application.
 * @param is_visible if %TRUE, @widget should be mapped along with its parent.
 */
set_child_visible(is_visible: boolean): void
/**
 * Sets the widget’s clip.  This must not be used directly,
 * but from within a widget’s size_allocate method.
 * It must be called after gtk_widget_set_allocation() (or after chaining up
 * to the parent class), because that function resets the clip.
 * 
 * The clip set should be the area that `widget` draws on. If `widget` is a
 * #GtkContainer, the area must contain all children's clips.
 * 
 * If this function is not called by `widget` during a ::size-allocate handler,
 * the clip will be set to `widget'`s allocation.
 * @param clip a pointer to a #GtkAllocation to copy from
 */
set_clip(clip: Gtk.Allocation): void
/**
 * Sets a widgets composite name. The widget must be
 * a composite child of its parent; see gtk_widget_push_composite_child().
 * @param name the name to set
 */
set_composite_name(name: string): void
/**
 * Enables or disables a #GdkDevice to interact with `widget`
 * and all its children.
 * 
 * It does so by descending through the #GdkWindow hierarchy
 * and enabling the same mask that is has for core events
 * (i.e. the one that gdk_window_get_events() returns).
 * @param device a #GdkDevice
 * @param enabled whether to enable the device
 */
set_device_enabled(device: Gdk.Device, enabled: boolean): void
/**
 * Sets the device event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive from `device`. Keep
 * in mind that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_device_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with windowless widgets (which return
 * %FALSE from gtk_widget_get_has_window());
 * to get events on those widgets, place them inside a #GtkEventBox
 * and receive events on the event box.
 * @param device a #GdkDevice
 * @param events event mask
 */
set_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Sets the reading direction on a particular widget. This direction
 * controls the primary direction for widgets containing text,
 * and also the direction in which the children of a container are
 * packed. The ability to set the direction is present in order
 * so that correct localization into languages with right-to-left
 * reading directions can be done. Generally, applications will
 * let the default reading direction present, except for containers
 * where the containers are arranged in an order that is explicitly
 * visual rather than logical (such as buttons for text justification).
 * 
 * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
 * set by gtk_widget_set_default_direction() will be used.
 * @param dir the new direction
 */
set_direction(dir: Gtk.TextDirection): void
/**
 * Widgets are double buffered by default; you can use this function
 * to turn off the buffering. “Double buffered” simply means that
 * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
 * automatically around expose events sent to the
 * widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
 * window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
 * buffer to the screen. The result is that users see the window
 * update in one smooth step, and don’t see individual graphics
 * primitives being rendered.
 * 
 * In very simple terms, double buffered widgets don’t flicker,
 * so you would only use this function to turn off double buffering
 * if you had special needs and really knew what you were doing.
 * 
 * Note: if you turn off double-buffering, you have to handle
 * expose events, since even the clearing to the background color or
 * pixmap will not happen automatically (as it is done in
 * gdk_window_begin_draw_frame()).
 * 
 * In 3.10 GTK and GDK have been restructured for translucent drawing. Since
 * then expose events for double-buffered widgets are culled into a single
 * event to the toplevel GDK window. If you now unset double buffering, you
 * will cause a separate rendering pass for every widget. This will likely
 * cause rendering problems - in particular related to stacking - and usually
 * increases rendering times significantly.
 * @param double_buffered %TRUE to double-buffer a widget
 */
set_double_buffered(double_buffered: boolean): void
/**
 * Sets the event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive. Keep in mind
 * that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with widgets that have no window.
 * (See gtk_widget_get_has_window()).  To get events on those widgets,
 * place them inside a #GtkEventBox and receive events on the event
 * box.
 * @param events event mask
 */
set_events(events: number): void
/**
 * Sets whether the widget should grab focus when it is clicked with the mouse.
 * Making mouse clicks not grab focus is useful in places like toolbars where
 * you don’t want the keyboard focus removed from the main area of the
 * application.
 * @param focus_on_click whether the widget should grab focus when clicked with the mouse
 */
set_focus_on_click(focus_on_click: boolean): void
/**
 * Sets the font map to use for Pango rendering. When not set, the widget
 * will inherit the font map from its parent.
 * @param font_map a #PangoFontMap, or %NULL to unset any previously     set font map
 */
set_font_map(font_map?: (Pango.FontMap | null)): void
/**
 * Sets the #cairo_font_options_t used for Pango rendering in this widget.
 * When not set, the default font options for the #GdkScreen will be used.
 * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
 */
set_font_options(options?: (cairo.FontOptions | null)): void
/**
 * Sets the horizontal alignment of `widget`.
 * See the #GtkWidget:halign property.
 * @param align the horizontal alignment
 */
set_halign(align: Gtk.Align): void
/**
 * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
 * #GtkWidget:has-tooltip for more information.
 * @param has_tooltip whether or not @widget has a tooltip.
 */
set_has_tooltip(has_tooltip: boolean): void
/**
 * Specifies whether `widget` has a #GdkWindow of its own. Note that
 * all realized widgets have a non-%NULL “window” pointer
 * (gtk_widget_get_window() never returns a %NULL window when a widget
 * is realized), but for many of them it’s actually the #GdkWindow of
 * one of its parent widgets. Widgets that do not create a %window for
 * themselves in #GtkWidget::realize must announce this by
 * calling this function with `has_window` = %FALSE.
 * 
 * This function should only be called by widget implementations,
 * and they should call it in their init() function.
 * @param has_window whether or not @widget has a window.
 */
set_has_window(has_window: boolean): void
/**
 * Sets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Call this function to set the expand flag if you would like your
 * widget to become larger horizontally when the window has extra
 * room.
 * 
 * By default, widgets automatically expand if any of their children
 * want to expand. (To see if a widget will automatically expand given
 * its current children and state, call gtk_widget_compute_expand(). A
 * container can decide how the expandability of children affects the
 * expansion of the container by overriding the compute_expand virtual
 * method on #GtkWidget.).
 * 
 * Setting hexpand explicitly with this function will override the
 * automatic expand behavior.
 * 
 * This function forces the widget to expand or not to expand,
 * regardless of children.  The override occurs because
 * gtk_widget_set_hexpand() sets the hexpand-set property (see
 * gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
 * value to be used, rather than looking at children and widget state.
 * @param expand whether to expand
 */
set_hexpand(expand: boolean): void
/**
 * Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
 * be used.
 * 
 * The hexpand-set property will be set automatically when you call
 * gtk_widget_set_hexpand() to set hexpand, so the most likely
 * reason to use this function would be to unset an explicit expand
 * flag.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @param set value for hexpand-set property
 */
set_hexpand_set(set: boolean): void
/**
 * Marks the widget as being mapped.
 * 
 * This function should only ever be called in a derived widget's
 * “map” or “unmap” implementation.
 * @param mapped %TRUE to mark the widget as mapped
 */
set_mapped(mapped: boolean): void
/**
 * Sets the bottom margin of `widget`.
 * See the #GtkWidget:margin-bottom property.
 * @param margin the bottom margin
 */
set_margin_bottom(margin: number): void
/**
 * Sets the end margin of `widget`.
 * See the #GtkWidget:margin-end property.
 * @param margin the end margin
 */
set_margin_end(margin: number): void
/**
 * Sets the left margin of `widget`.
 * See the #GtkWidget:margin-left property.
 * @param margin the left margin
 */
set_margin_left(margin: number): void
/**
 * Sets the right margin of `widget`.
 * See the #GtkWidget:margin-right property.
 * @param margin the right margin
 */
set_margin_right(margin: number): void
/**
 * Sets the start margin of `widget`.
 * See the #GtkWidget:margin-start property.
 * @param margin the start margin
 */
set_margin_start(margin: number): void
/**
 * Sets the top margin of `widget`.
 * See the #GtkWidget:margin-top property.
 * @param margin the top margin
 */
set_margin_top(margin: number): void
/**
 * Widgets can be named, which allows you to refer to them from a
 * CSS file. You can apply a style to widgets with a particular name
 * in the CSS file. See the documentation for the CSS syntax (on the
 * same page as the docs for #GtkStyleContext).
 * 
 * Note that the CSS syntax has certain special characters to delimit
 * and represent elements in a selector (period, #, >, *...), so using
 * these will make your widget impossible to match by name. Any combination
 * of alphanumeric symbols, dashes and underscores will suffice.
 * @param name name for the widget
 */
set_name(name: string): void
/**
 * Sets the #GtkWidget:no-show-all property, which determines whether
 * calls to gtk_widget_show_all() will affect this widget.
 * 
 * This is mostly for use in constructing widget hierarchies with externally
 * controlled visibility, see #GtkUIManager.
 * @param no_show_all the new value for the “no-show-all” property
 */
set_no_show_all(no_show_all: boolean): void
/**
 * Request the `widget` to be rendered partially transparent,
 * with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
 * are clamped to the [0,1] range.).
 * This works on both toplevel widget, and child widgets, although there
 * are some limitations:
 * 
 * For toplevel widgets this depends on the capabilities of the windowing
 * system. On X11 this has any effect only on X screens with a compositing manager
 * running. See gtk_widget_is_composited(). On Windows it should work
 * always, although setting a window’s opacity after the window has been
 * shown causes it to flicker once on Windows.
 * 
 * For child widgets it doesn’t work if any affected widget has a native window, or
 * disables double buffering.
 * @param opacity desired opacity, between 0 and 1
 */
set_opacity(opacity: number): void
/**
 * This function is useful only when implementing subclasses of
 * #GtkContainer.
 * Sets the container as the parent of `widget,` and takes care of
 * some details such as updating the state and style of the child
 * to reflect its new location. The opposite function is
 * gtk_widget_unparent().
 * @param parent parent container
 */
set_parent(parent: Gtk.Widget): void
/**
 * Sets a non default parent window for `widget`.
 * 
 * For #GtkWindow classes, setting a `parent_window` effects whether
 * the window is a toplevel window or can be embedded into other
 * widgets.
 * 
 * For #GtkWindow classes, this needs to be called before the
 * window is realized.
 * @param parent_window the new parent window.
 */
set_parent_window(parent_window: Gdk.Window): void
/**
 * Marks the widget as being realized. This function must only be
 * called after all #GdkWindows for the `widget` have been created
 * and registered.
 * 
 * This function should only ever be called in a derived widget's
 * “realize” or “unrealize” implementation.
 * @param realized %TRUE to mark the widget as realized
 */
set_realized(realized: boolean): void
/**
 * Specifies whether `widget` will be treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param receives_default whether or not @widget can be a default widget.
 */
set_receives_default(receives_default: boolean): void
/**
 * Sets whether the entire widget is queued for drawing when its size
 * allocation changes. By default, this setting is %TRUE and
 * the entire widget is redrawn on every size change. If your widget
 * leaves the upper left unchanged when made bigger, turning this
 * setting off will improve performance.
 * 
 * Note that for widgets where gtk_widget_get_has_window() is %FALSE
 * setting this flag to %FALSE turns off all allocation on resizing:
 * the widget will not even redraw if its position changes; this is to
 * allow containers that don’t draw anything to avoid excess
 * invalidations. If you set this flag on a widget with no window that
 * does draw on `widget->`window, you are
 * responsible for invalidating both the old and new allocation of the
 * widget when the widget is moved and responsible for invalidating
 * regions newly when the widget increases size.
 * @param redraw_on_allocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
 */
set_redraw_on_allocate(redraw_on_allocate: boolean): void
/**
 * Sets the sensitivity of a widget. A widget is sensitive if the user
 * can interact with it. Insensitive widgets are “grayed out” and the
 * user can’t interact with them. Insensitive widgets are known as
 * “inactive”, “disabled”, or “ghosted” in some other toolkits.
 * @param sensitive %TRUE to make the widget sensitive
 */
set_sensitive(sensitive: boolean): void
/**
 * Sets the minimum size of a widget; that is, the widget’s size
 * request will be at least `width` by `height`. You can use this
 * function to force a widget to be larger than it normally would be.
 * 
 * In most cases, gtk_window_set_default_size() is a better choice for
 * toplevel windows than this function; setting the default size will
 * still allow users to shrink the window. Setting the size request
 * will force them to leave the window at least as large as the size
 * request. When dealing with window sizes,
 * gtk_window_set_geometry_hints() can be a useful function as well.
 * 
 * Note the inherent danger of setting any fixed size - themes,
 * translations into other languages, different fonts, and user action
 * can all change the appropriate size for a given widget. So, it's
 * basically impossible to hardcode a size that will always be
 * correct.
 * 
 * The size request of a widget is the smallest size a widget can
 * accept while still functioning well and drawing itself correctly.
 * However in some strange cases a widget may be allocated less than
 * its requested size, and in many cases a widget may be allocated more
 * space than it requested.
 * 
 * If the size request in a given direction is -1 (unset), then
 * the “natural” size request of the widget will be used instead.
 * 
 * The size request set here does not include any margin from the
 * #GtkWidget properties margin-left, margin-right, margin-top, and
 * margin-bottom, but it does include pretty much all other padding
 * or border properties set by any subclass of #GtkWidget.
 * @param width width @widget should request, or -1 to unset
 * @param height height @widget should request, or -1 to unset
 */
set_size_request(width: number, height: number): void
/**
 * This function is for use in widget implementations. Sets the state
 * of a widget (insensitive, prelighted, etc.) Usually you should set
 * the state using wrapper functions such as gtk_widget_set_sensitive().
 * @param state new state for @widget
 */
set_state(state: Gtk.StateType): void
/**
 * This function is for use in widget implementations. Turns on flag
 * values in the current widget state (insensitive, prelighted, etc.).
 * 
 * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
 * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
 * direction, use gtk_widget_set_direction().
 * 
 * It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
 * will be propagated down to all non-internal children if `widget` is a
 * #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
 * down to all #GtkContainer children by different means than turning on the
 * state flag down the hierarchy, both gtk_widget_get_state_flags() and
 * gtk_widget_is_sensitive() will make use of these.
 * @param flags State flags to turn on
 * @param clear Whether to clear state before turning on @flags
 */
set_state_flags(flags: Gtk.StateFlags, clear: boolean): void
/**
 * Used to set the #GtkStyle for a widget (`widget->`style). Since
 * GTK 3, this function does nothing, the passed in style is ignored.
 * @param style a #GtkStyle, or %NULL to remove the effect     of a previous call to gtk_widget_set_style() and go back to     the default style
 */
set_style(style?: (Gtk.Style | null)): void
/**
 * Enables or disables multiple pointer awareness. If this setting is %TRUE,
 * `widget` will start receiving multiple, per device enter/leave events. Note
 * that if custom #GdkWindows are created in #GtkWidget::realize,
 * gdk_window_set_support_multidevice() will have to be called manually on them.
 * @param support_multidevice %TRUE to support input from multiple devices.
 */
set_support_multidevice(support_multidevice: boolean): void
/**
 * Sets `markup` as the contents of the tooltip, which is marked up with
 *  the [Pango text markup language][PangoMarkupFormat].
 * 
 * This function will take care of setting #GtkWidget:has-tooltip to %TRUE
 * and of the default handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-markup property and
 * gtk_tooltip_set_markup().
 * @param markup the contents of the tooltip for @widget, or %NULL
 */
set_tooltip_markup(markup?: (string | null)): void
/**
 * Sets `text` as the contents of the tooltip. This function will take
 * care of setting #GtkWidget:has-tooltip to %TRUE and of the default
 * handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
 * @param text the contents of the tooltip for @widget
 */
set_tooltip_text(text?: (string | null)): void
/**
 * Replaces the default window used for displaying
 * tooltips with `custom_window`. GTK+ will take care of showing and
 * hiding `custom_window` at the right moment, to behave likewise as
 * the default tooltip window. If `custom_window` is %NULL, the default
 * tooltip window will be used.
 * @param custom_window a #GtkWindow, or %NULL
 */
set_tooltip_window(custom_window?: (Gtk.Window | null)): void
/**
 * Sets the vertical alignment of `widget`.
 * See the #GtkWidget:valign property.
 * @param align the vertical alignment
 */
set_valign(align: Gtk.Align): void
/**
 * Sets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_set_hexpand() for more detail.
 * @param expand whether to expand
 */
set_vexpand(expand: boolean): void
/**
 * Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
 * be used.
 * 
 * See gtk_widget_set_hexpand_set() for more detail.
 * @param set value for vexpand-set property
 */
set_vexpand_set(set: boolean): void
/**
 * Sets the visibility state of `widget`. Note that setting this to
 * %TRUE doesn’t mean the widget is actually viewable, see
 * gtk_widget_get_visible().
 * 
 * This function simply calls gtk_widget_show() or gtk_widget_hide()
 * but is nicer to use when the visibility of the widget depends on
 * some condition.
 * @param visible whether the widget should be shown or not
 */
set_visible(visible: boolean): void
/**
 * Sets the visual that should be used for by widget and its children for
 * creating #GdkWindows. The visual must be on the same #GdkScreen as
 * returned by gtk_widget_get_screen(), so handling the
 * #GtkWidget::screen-changed signal is necessary.
 * 
 * Setting a new `visual` will not cause `widget` to recreate its windows,
 * so you should call this function before `widget` is realized.
 * @param visual visual to be used or %NULL to unset a previous one
 */
set_visual(visual?: (Gdk.Visual | null)): void
/**
 * Sets a widget’s window. This function should only be used in a
 * widget’s #GtkWidget::realize implementation. The %window passed is
 * usually either new window created with gdk_window_new(), or the
 * window of its parent widget as returned by
 * gtk_widget_get_parent_window().
 * 
 * Widgets must indicate whether they will create their own #GdkWindow
 * by calling gtk_widget_set_has_window(). This is usually done in the
 * widget’s init() function.
 * 
 * Note that this function does not add any reference to `window`.
 * @param window a #GdkWindow
 */
set_window(window: Gdk.Window): void
/**
 * Sets a shape for this widget’s GDK window. This allows for
 * transparent windows etc., see gdk_window_shape_combine_region()
 * for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
show_all(): void
/**
 * Shows a widget. If the widget is an unmapped toplevel widget
 * (i.e. a #GtkWindow that has not yet been shown), enter the main
 * loop and wait for the window to actually be mapped. Be careful;
 * because the main loop is running, anything can happen during
 * this function.
 */
show_now(): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
size_allocate(allocation: Gtk.Allocation): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size,
 * position and (optionally) baseline to their child widgets.
 * 
 * In this function, the allocation and baseline may be adjusted. It
 * will be forced to a 1x1 minimum size, and the
 * adjust_size_allocation virtual and adjust_baseline_allocation
 * methods on the child will be used to adjust the allocation and
 * baseline. Standard adjustments include removing the widget's
 * margins, and applying the widget’s #GtkWidget:halign and
 * #GtkWidget:valign properties.
 * 
 * If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
 * baseline argument is ignored and -1 is used instead.
 * @param allocation position and size to be allocated to @widget
 * @param baseline The baseline of the child, or -1
 */
size_allocate_with_baseline(allocation: Gtk.Allocation, baseline: number): void
/**
 * This function is typically used when implementing a #GtkContainer
 * subclass.  Obtains the preferred size of a widget. The container
 * uses this information to arrange its child widgets and decide what
 * size allocations to give them with gtk_widget_size_allocate().
 * 
 * You can also call this function from an application, with some
 * caveats. Most notably, getting a size request requires the widget
 * to be associated with a screen, because font information may be
 * needed. Multihead-aware applications should keep this in mind.
 * 
 * Also remember that the size request is not necessarily the size
 * a widget will actually be allocated.
 */
size_request(): Gtk.Requisition
/**
 * This function attaches the widget’s #GtkStyle to the widget's
 * #GdkWindow. It is a replacement for
 * 
 * 
 * ```
 * widget->style = gtk_style_attach (widget->style, widget->window);
 * ```
 * 
 * 
 * and should only ever be called in a derived widget’s “realize”
 * implementation which does not chain up to its parent class'
 * “realize” implementation, because one of the parent classes
 * (finally #GtkWidget) would attach the style itself.
 */
style_attach(): void
/**
 * Gets the value of a style property of `widget`.
 * @param property_name the name of a style property
 * @param value location to return the property value
 */
style_get_property(property_name: string, value: GObject.Value): void
/**
 * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
 * This causes all queued #GtkWidget::child-notify signals on `widget` to be
 * emitted.
 */
thaw_child_notify(): void
/**
 * Translate coordinates relative to `src_widget’`s allocation to coordinates
 * relative to `dest_widget’`s allocations. In order to perform this
 * operation, both widgets must be realized, and must share a common
 * toplevel.
 * @param dest_widget a #GtkWidget
 * @param src_x X position relative to @src_widget
 * @param src_y Y position relative to @src_widget
 * @returns %FALSE if either widget was not realized, or there   was no common ancestor. In this case, nothing is stored in   *@dest_x and *@dest_y. Otherwise %TRUE.
 */
translate_coordinates(dest_widget: Gtk.Widget, src_x: number, src_y: number): [boolean, number, number]
/**
 * Triggers a tooltip query on the display where the toplevel of `widget`
 * is located. See gtk_tooltip_trigger_tooltip_query() for more
 * information.
 */
trigger_tooltip_query(): void
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
unmap(): void
/**
 * This function is only for use in widget implementations.
 * Should be called by implementations of the remove method
 * on #GtkContainer, to dissociate a child from the container.
 */
unparent(): void
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
unrealize(): void
/**
 * Unregisters a #GdkWindow from the widget that was previously set up with
 * gtk_widget_register_window(). You need to call this when the window is
 * no longer used by the widget, such as when you destroy it.
 * @param window a #GdkWindow
 */
unregister_window(window: Gdk.Window): void
/**
 * This function is for use in widget implementations. Turns off flag
 * values for the current widget state (insensitive, prelighted, etc.).
 * See gtk_widget_set_state_flags().
 * @param flags State flags to turn off
 */
unset_state_flags(flags: Gtk.StateFlags): void
vfunc_adjust_baseline_allocation(baseline: number): void
vfunc_adjust_baseline_request(minimum_baseline: number, natural_baseline: number): void
vfunc_adjust_size_allocation(orientation: Gtk.Orientation, minimum_size: number, natural_size: number, allocated_pos: number, allocated_size: number): void
vfunc_adjust_size_request(orientation: Gtk.Orientation, minimum_size: number, natural_size: number): void
vfunc_button_press_event(event: Gdk.EventButton): boolean
vfunc_button_release_event(event: Gdk.EventButton): boolean
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 */
vfunc_can_activate_accel(signal_id: number): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
vfunc_child_notify(child_property: GObject.ParamSpec): void
vfunc_composited_changed(): void
vfunc_compute_expand(hexpand_p: boolean, vexpand_p: boolean): void
vfunc_configure_event(event: Gdk.EventConfigure): boolean
vfunc_damage_event(event: Gdk.EventExpose): boolean
vfunc_delete_event(event: Gdk.EventAny): boolean
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
vfunc_destroy(): void
vfunc_destroy_event(event: Gdk.EventAny): boolean
vfunc_direction_changed(previous_direction: Gtk.TextDirection): void
vfunc_dispatch_child_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_drag_begin(context: Gdk.DragContext): void
vfunc_drag_data_delete(context: Gdk.DragContext): void
vfunc_drag_data_get(context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_data_received(context: Gdk.DragContext, x: number, y: number, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_drop(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_drag_end(context: Gdk.DragContext): void
vfunc_drag_failed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
vfunc_drag_leave(context: Gdk.DragContext, time_: number): void
vfunc_drag_motion(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_draw(cr: cairo.Context): boolean
vfunc_enter_notify_event(event: Gdk.EventCrossing): boolean
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 */
vfunc_event(event: Gdk.Event): boolean
vfunc_focus(direction: Gtk.DirectionType): boolean
vfunc_focus_in_event(event: Gdk.EventFocus): boolean
vfunc_focus_out_event(event: Gdk.EventFocus): boolean
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 */
vfunc_get_accessible(): Atk.Object
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
vfunc_get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
vfunc_get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
vfunc_get_preferred_width_for_height(height: number): [number, number]
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 */
vfunc_get_request_mode(): Gtk.SizeRequestMode
vfunc_grab_broken_event(event: Gdk.EventGrabBroken): boolean
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
vfunc_grab_focus(): void
vfunc_grab_notify(was_grabbed: boolean): void
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
vfunc_hide(): void
vfunc_hierarchy_changed(previous_toplevel: Gtk.Widget): void
vfunc_key_press_event(event: Gdk.EventKey): boolean
vfunc_key_release_event(event: Gdk.EventKey): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 */
vfunc_keynav_failed(direction: Gtk.DirectionType): boolean
vfunc_leave_notify_event(event: Gdk.EventCrossing): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
vfunc_map(): void
vfunc_map_event(event: Gdk.EventAny): boolean
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 */
vfunc_mnemonic_activate(group_cycling: boolean): boolean
vfunc_motion_notify_event(event: Gdk.EventMotion): boolean
vfunc_move_focus(direction: Gtk.DirectionType): void
vfunc_parent_set(previous_parent: Gtk.Widget): void
vfunc_popup_menu(): boolean
vfunc_property_notify_event(event: Gdk.EventProperty): boolean
vfunc_proximity_in_event(event: Gdk.EventProximity): boolean
vfunc_proximity_out_event(event: Gdk.EventProximity): boolean
vfunc_query_tooltip(x: number, y: number, keyboard_tooltip: boolean, tooltip: Gtk.Tooltip): boolean
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
vfunc_queue_draw_region(region: cairo.Region): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
vfunc_realize(): void
vfunc_screen_changed(previous_screen: Gdk.Screen): void
vfunc_scroll_event(event: Gdk.EventScroll): boolean
vfunc_selection_clear_event(event: Gdk.EventSelection): boolean
vfunc_selection_get(selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_selection_notify_event(event: Gdk.EventSelection): boolean
vfunc_selection_received(selection_data: Gtk.SelectionData, time_: number): void
vfunc_selection_request_event(event: Gdk.EventSelection): boolean
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
vfunc_show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
vfunc_show_all(): void
vfunc_show_help(help_type: Gtk.WidgetHelpType): boolean
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
vfunc_size_allocate(allocation: Gtk.Allocation): void
vfunc_state_changed(previous_state: Gtk.StateType): void
vfunc_state_flags_changed(previous_state_flags: Gtk.StateFlags): void
vfunc_style_set(previous_style: Gtk.Style): void
vfunc_style_updated(): void
vfunc_touch_event(event: Gdk.EventTouch): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
vfunc_unmap(): void
vfunc_unmap_event(event: Gdk.EventAny): boolean
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
vfunc_unrealize(): void
vfunc_visibility_notify_event(event: Gdk.EventVisibility): boolean
vfunc_window_state_event(event: Gdk.EventWindowState): boolean
}

module ListModelFilter {

    // Constructor properties interface

    interface ConstructorProps<A extends GObject.Object = GObject.Object> extends GObject.Object.ConstructorProps, Gio.ListModel.ConstructorProps {
child_model: Gio.ListModel;
    childModel: Gio.ListModel;
    }

}

class ListModelFilter<A extends GObject.Object = GObject.Object> extends GObject.Object implements Gio.ListModel<A> {

    // Own properties of Dazzle.ListModelFilter

    get child_model(): Gio.ListModel;
    get childModel(): Gio.ListModel;

    // Constructors of Dazzle.ListModelFilter


constructor(properties?: Partial<ListModelFilter.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](child_model: Gio.ListModel): ListModelFilter;

    // Own methods of Dazzle.ListModelFilter

    /**
     * Gets the child model that is being filtered.
     * @returns A #GListModel.
     */
    get_child_model(): Gio.ListModel
    invalidate(): void
    set_filter_func(filter_func: ListModelFilterFunc): void

// Inherited methods
/**
 * Gets the type of the items in `list`.
 * 
 * All items returned from g_list_model_get_item() are of the type
 * returned by this function, or a subtype, or if the type is an
 * interface, they are an implementation of that interface.
 * 
 * The item type of a #GListModel can not change during the life of the
 * model.
 * @returns the #GType of the items contained in @list.
 */
get_item_type(): GObject.GType
/**
 * Gets the number of items in `list`.
 * 
 * Depending on the model implementation, calling this function may be
 * less efficient than iterating the list with increasing values for
 * `position` until g_list_model_get_item() returns %NULL.
 * @returns the number of items in @list.
 */
get_n_items(): number
/**
 * Get the item at `position`.
 * 
 * If `position` is greater than the number of items in `list,` %NULL is
 * returned.
 * 
 * %NULL is never returned for an index that is smaller than the length
 * of the list.
 * 
 * This function is meant to be used by language bindings in place
 * of g_list_model_get_item().
 * 
 * See also: g_list_model_get_n_items()
 * @param position the position of the item to fetch
 * @returns the object at @position.
 */
get_item(position: number): (A | null)
/**
 * Emits the #GListModel::items-changed signal on `list`.
 * 
 * This function should only be called by classes implementing
 * #GListModel. It has to be called after the internal representation
 * of `list` has been updated, because handlers connected to this signal
 * might query the new state of the list.
 * 
 * Implementations must only make changes to the model (as visible to
 * its consumer) in places that will not cause problems for that
 * consumer.  For models that are driven directly by a write API (such
 * as #GListStore), changes can be reported in response to uses of that
 * API.  For models that represent remote data, changes should only be
 * made from a fresh mainloop dispatch.  It is particularly not
 * permitted to make changes in response to a call to the #GListModel
 * consumer API.
 * 
 * Stated another way: in general, it is assumed that code making a
 * series of accesses to the model via the API, without returning to the
 * mainloop, and without calling other code, will continue to view the
 * same contents of the model.
 * @param position the position at which @list changed
 * @param removed the number of items removed
 * @param added the number of items added
 */
items_changed(position: number, removed: number, added: number): void
/**
 * Get the item at `position`. If `position` is greater than the number of
 * items in `list,` %NULL is returned.
 * 
 * %NULL is never returned for an index that is smaller than the length
 * of the list.  See g_list_model_get_n_items().
 * @param position the position of the item to fetch
 */
vfunc_get_item(position: number): (A | null)
/**
 * Gets the type of the items in `list`.
 * 
 * All items returned from g_list_model_get_item() are of the type
 * returned by this function, or a subtype, or if the type is an
 * interface, they are an implementation of that interface.
 * 
 * The item type of a #GListModel can not change during the life of the
 * model.
 */
vfunc_get_item_type(): GObject.GType
/**
 * Gets the number of items in `list`.
 * 
 * Depending on the model implementation, calling this function may be
 * less efficient than iterating the list with increasing values for
 * `position` until g_list_model_get_item() returns %NULL.
 */
vfunc_get_n_items(): number
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ListStoreAdapter {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps, Gtk.TreeModel.ConstructorProps {
model: Gio.ListModel;
    }

}

class ListStoreAdapter extends GObject.Object implements Gtk.TreeModel {

    // Own properties of Dazzle.ListStoreAdapter

    get model(): Gio.ListModel;
    set model(val: Gio.ListModel);

    // Constructors of Dazzle.ListStoreAdapter


constructor(properties?: Partial<ListStoreAdapter.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](model: Gio.ListModel): ListStoreAdapter;

    // Own methods of Dazzle.ListStoreAdapter

    /**
     * Gets the model being adapted.
     * @returns A #GListModel
     */
    get_model(): Gio.ListModel
    set_model(model: Gio.ListModel): void

// Inherited methods
/**
 * Creates a new #GtkTreeModel, with `child_model` as the child_model
 * and `root` as the virtual root.
 * @param root A #GtkTreePath or %NULL.
 * @returns A new #GtkTreeModel.
 */
filter_new(root?: (Gtk.TreePath | null)): Gtk.TreeModel
/**
 * Calls func on each node in model in a depth-first fashion.
 * 
 * If `func` returns %TRUE, then the tree ceases to be walked,
 * and gtk_tree_model_foreach() returns.
 * @param func a function to be called on each row
 */
foreach(func: Gtk.TreeModelForeachFunc): void
/**
 * Returns the type of the column.
 * @param index_ the column index
 * @returns the type of the column
 */
get_column_type(index_: number): GObject.GType
/**
 * Returns a set of flags supported by this interface.
 * 
 * The flags are a bitwise combination of #GtkTreeModelFlags.
 * The flags supported should not change during the lifetime
 * of the `tree_model`.
 * @returns the flags supported by this interface
 */
get_flags(): Gtk.TreeModelFlags
/**
 * Sets `iter` to a valid iterator pointing to `path`.  If `path` does
 * not exist, `iter` is set to an invalid iterator and %FALSE is returned.
 * @param path the #GtkTreePath-struct
 * @returns %TRUE, if @iter was set
 */
get_iter(path: Gtk.TreePath): [boolean, Gtk.TreeIter]
/**
 * Initializes `iter` with the first iterator in the tree
 * (the one at the path "0") and returns %TRUE. Returns
 * %FALSE if the tree is empty.
 * @returns %TRUE, if @iter was set
 */
get_iter_first(): [boolean, Gtk.TreeIter]
/**
 * Sets `iter` to a valid iterator pointing to `path_string,` if it
 * exists. Otherwise, `iter` is left invalid and %FALSE is returned.
 * @param path_string a string representation of a #GtkTreePath-struct
 * @returns %TRUE, if @iter was set
 */
get_iter_from_string(path_string: string): [boolean, Gtk.TreeIter]
/**
 * Returns the number of columns supported by `tree_model`.
 * @returns the number of columns
 */
get_n_columns(): number
/**
 * Returns a newly-created #GtkTreePath-struct referenced by `iter`.
 * 
 * This path should be freed with gtk_tree_path_free().
 * @param iter the #GtkTreeIter-struct
 * @returns a newly-created #GtkTreePath-struct
 */
get_path(iter: Gtk.TreeIter): Gtk.TreePath
/**
 * Generates a string representation of the iter.
 * 
 * This string is a “:” separated list of numbers.
 * For example, “4:10:0:3” would be an acceptable
 * return value for this string.
 * @param iter a #GtkTreeIter-struct
 * @returns a newly-allocated string.     Must be freed with g_free().
 */
get_string_from_iter(iter: Gtk.TreeIter): string
/**
 * Initializes and sets `value` to that at `column`.
 * 
 * When done with `value,` g_value_unset() needs to be called
 * to free any allocated memory.
 * @param iter the #GtkTreeIter-struct
 * @param column the column to lookup the value at
 */
get_value(iter: Gtk.TreeIter, column: number): unknown
/**
 * Sets `iter` to point to the first child of `parent`.
 * 
 * If `parent` has no children, %FALSE is returned and `iter` is
 * set to be invalid. `parent` will remain a valid node after this
 * function has been called.
 * 
 * If `parent` is %NULL returns the first node, equivalent to
 * `gtk_tree_model_get_iter_first (tree_model, iter);`
 * @param parent the #GtkTreeIter-struct, or %NULL
 * @returns %TRUE, if @iter has been set to the first child
 */
iter_children(parent?: (Gtk.TreeIter | null)): [boolean, Gtk.TreeIter]
/**
 * Returns %TRUE if `iter` has children, %FALSE otherwise.
 * @param iter the #GtkTreeIter-struct to test for children
 * @returns %TRUE if @iter has children
 */
iter_has_child(iter: Gtk.TreeIter): boolean
/**
 * Returns the number of children that `iter` has.
 * 
 * As a special case, if `iter` is %NULL, then the number
 * of toplevel nodes is returned.
 * @param iter the #GtkTreeIter-struct, or %NULL
 * @returns the number of children of @iter
 */
iter_n_children(iter?: (Gtk.TreeIter | null)): number
/**
 * Sets `iter` to point to the node following it at the current level.
 * 
 * If there is no next `iter,` %FALSE is returned and `iter` is set
 * to be invalid.
 * @param iter the #GtkTreeIter-struct
 * @returns %TRUE if @iter has been changed to the next node
 */
iter_next(iter: Gtk.TreeIter): boolean
/**
 * Sets `iter` to be the child of `parent,` using the given index.
 * 
 * The first index is 0. If `n` is too big, or `parent` has no children,
 * `iter` is set to an invalid iterator and %FALSE is returned. `parent`
 * will remain a valid node after this function has been called. As a
 * special case, if `parent` is %NULL, then the `n-th` root node
 * is set.
 * @param parent the #GtkTreeIter-struct to get the child from, or %NULL.
 * @param n the index of the desired child
 * @returns %TRUE, if @parent has an @n-th child
 */
iter_nth_child(parent: (Gtk.TreeIter | null), n: number): [boolean, Gtk.TreeIter]
/**
 * Sets `iter` to be the parent of `child`.
 * 
 * If `child` is at the toplevel, and doesn’t have a parent, then
 * `iter` is set to an invalid iterator and %FALSE is returned.
 * `child` will remain a valid node after this function has been
 * called.
 * 
 * `iter` will be initialized before the lookup is performed, so `child`
 * and `iter` cannot point to the same memory location.
 * @param child the #GtkTreeIter-struct
 * @returns %TRUE, if @iter is set to the parent of @child
 */
iter_parent(child: Gtk.TreeIter): [boolean, Gtk.TreeIter]
/**
 * Sets `iter` to point to the previous node at the current level.
 * 
 * If there is no previous `iter,` %FALSE is returned and `iter` is
 * set to be invalid.
 * @param iter the #GtkTreeIter-struct
 * @returns %TRUE if @iter has been changed to the previous node
 */
iter_previous(iter: Gtk.TreeIter): boolean
/**
 * Lets the tree ref the node.
 * 
 * This is an optional method for models to implement.
 * To be more specific, models may ignore this call as it exists
 * primarily for performance reasons.
 * 
 * This function is primarily meant as a way for views to let
 * caching models know when nodes are being displayed (and hence,
 * whether or not to cache that node). Being displayed means a node
 * is in an expanded branch, regardless of whether the node is currently
 * visible in the viewport. For example, a file-system based model
 * would not want to keep the entire file-hierarchy in memory,
 * just the sections that are currently being displayed by
 * every current view.
 * 
 * A model should be expected to be able to get an iter independent
 * of its reffed state.
 * @param iter the #GtkTreeIter-struct
 */
ref_node(iter: Gtk.TreeIter): void
/**
 * Emits the #GtkTreeModel::row-changed signal on `tree_model`.
 * @param path a #GtkTreePath-struct pointing to the changed row
 * @param iter a valid #GtkTreeIter-struct pointing to the changed row
 */
row_changed(path: Gtk.TreePath, iter: Gtk.TreeIter): void
/**
 * Emits the #GtkTreeModel::row-deleted signal on `tree_model`.
 * 
 * This should be called by models after a row has been removed.
 * The location pointed to by `path` should be the location that
 * the row previously was at. It may not be a valid location anymore.
 * 
 * Nodes that are deleted are not unreffed, this means that any
 * outstanding references on the deleted node should not be released.
 * @param path a #GtkTreePath-struct pointing to the previous location of     the deleted row
 */
row_deleted(path: Gtk.TreePath): void
/**
 * Emits the #GtkTreeModel::row-has-child-toggled signal on
 * `tree_model`. This should be called by models after the child
 * state of a node changes.
 * @param path a #GtkTreePath-struct pointing to the changed row
 * @param iter a valid #GtkTreeIter-struct pointing to the changed row
 */
row_has_child_toggled(path: Gtk.TreePath, iter: Gtk.TreeIter): void
/**
 * Emits the #GtkTreeModel::row-inserted signal on `tree_model`.
 * @param path a #GtkTreePath-struct pointing to the inserted row
 * @param iter a valid #GtkTreeIter-struct pointing to the inserted row
 */
row_inserted(path: Gtk.TreePath, iter: Gtk.TreeIter): void
/**
 * Emits the #GtkTreeModel::rows-reordered signal on `tree_model`.
 * 
 * This should be called by models when their rows have been
 * reordered.
 * @param path a #GtkTreePath-struct pointing to the tree node whose children     have been reordered
 * @param iter a valid #GtkTreeIter-struct pointing to the node     whose children have been reordered, or %NULL if the depth     of @path is 0
 * @param new_order an array of integers     mapping the current position of each child to its old     position before the re-ordering,     i.e. @new_order`[newpos] = oldpos`
 */
rows_reordered(path: Gtk.TreePath, iter: (Gtk.TreeIter | null), new_order: number[]): void
/**
 * Lets the tree unref the node.
 * 
 * This is an optional method for models to implement.
 * To be more specific, models may ignore this call as it exists
 * primarily for performance reasons. For more information on what
 * this means, see gtk_tree_model_ref_node().
 * 
 * Please note that nodes that are deleted are not unreffed.
 * @param iter the #GtkTreeIter-struct
 */
unref_node(iter: Gtk.TreeIter): void
/**
 * Returns the type of the column.
 * @param index_ the column index
 */
vfunc_get_column_type(index_: number): GObject.GType
/**
 * Returns a set of flags supported by this interface.
 * 
 * The flags are a bitwise combination of #GtkTreeModelFlags.
 * The flags supported should not change during the lifetime
 * of the `tree_model`.
 */
vfunc_get_flags(): Gtk.TreeModelFlags
/**
 * Sets `iter` to a valid iterator pointing to `path`.  If `path` does
 * not exist, `iter` is set to an invalid iterator and %FALSE is returned.
 * @param path the #GtkTreePath-struct
 */
vfunc_get_iter(path: Gtk.TreePath): [boolean, Gtk.TreeIter]
/**
 * Returns the number of columns supported by `tree_model`.
 */
vfunc_get_n_columns(): number
/**
 * Returns a newly-created #GtkTreePath-struct referenced by `iter`.
 * 
 * This path should be freed with gtk_tree_path_free().
 * @param iter the #GtkTreeIter-struct
 */
vfunc_get_path(iter: Gtk.TreeIter): Gtk.TreePath
/**
 * Initializes and sets `value` to that at `column`.
 * 
 * When done with `value,` g_value_unset() needs to be called
 * to free any allocated memory.
 * @param iter the #GtkTreeIter-struct
 * @param column the column to lookup the value at
 */
vfunc_get_value(iter: Gtk.TreeIter, column: number): unknown
/**
 * Sets `iter` to point to the first child of `parent`.
 * 
 * If `parent` has no children, %FALSE is returned and `iter` is
 * set to be invalid. `parent` will remain a valid node after this
 * function has been called.
 * 
 * If `parent` is %NULL returns the first node, equivalent to
 * `gtk_tree_model_get_iter_first (tree_model, iter);`
 * @param parent the #GtkTreeIter-struct, or %NULL
 */
vfunc_iter_children(parent?: (Gtk.TreeIter | null)): [boolean, Gtk.TreeIter]
/**
 * Returns %TRUE if `iter` has children, %FALSE otherwise.
 * @param iter the #GtkTreeIter-struct to test for children
 */
vfunc_iter_has_child(iter: Gtk.TreeIter): boolean
/**
 * Returns the number of children that `iter` has.
 * 
 * As a special case, if `iter` is %NULL, then the number
 * of toplevel nodes is returned.
 * @param iter the #GtkTreeIter-struct, or %NULL
 */
vfunc_iter_n_children(iter?: (Gtk.TreeIter | null)): number
/**
 * Sets `iter` to point to the node following it at the current level.
 * 
 * If there is no next `iter,` %FALSE is returned and `iter` is set
 * to be invalid.
 * @param iter the #GtkTreeIter-struct
 */
vfunc_iter_next(iter: Gtk.TreeIter): boolean
/**
 * Sets `iter` to be the child of `parent,` using the given index.
 * 
 * The first index is 0. If `n` is too big, or `parent` has no children,
 * `iter` is set to an invalid iterator and %FALSE is returned. `parent`
 * will remain a valid node after this function has been called. As a
 * special case, if `parent` is %NULL, then the `n-th` root node
 * is set.
 * @param parent the #GtkTreeIter-struct to get the child from, or %NULL.
 * @param n the index of the desired child
 */
vfunc_iter_nth_child(parent: (Gtk.TreeIter | null), n: number): [boolean, Gtk.TreeIter]
/**
 * Sets `iter` to be the parent of `child`.
 * 
 * If `child` is at the toplevel, and doesn’t have a parent, then
 * `iter` is set to an invalid iterator and %FALSE is returned.
 * `child` will remain a valid node after this function has been
 * called.
 * 
 * `iter` will be initialized before the lookup is performed, so `child`
 * and `iter` cannot point to the same memory location.
 * @param child the #GtkTreeIter-struct
 */
vfunc_iter_parent(child: Gtk.TreeIter): [boolean, Gtk.TreeIter]
/**
 * Sets `iter` to point to the previous node at the current level.
 * 
 * If there is no previous `iter,` %FALSE is returned and `iter` is
 * set to be invalid.
 * @param iter the #GtkTreeIter-struct
 */
vfunc_iter_previous(iter: Gtk.TreeIter): boolean
/**
 * Lets the tree ref the node.
 * 
 * This is an optional method for models to implement.
 * To be more specific, models may ignore this call as it exists
 * primarily for performance reasons.
 * 
 * This function is primarily meant as a way for views to let
 * caching models know when nodes are being displayed (and hence,
 * whether or not to cache that node). Being displayed means a node
 * is in an expanded branch, regardless of whether the node is currently
 * visible in the viewport. For example, a file-system based model
 * would not want to keep the entire file-hierarchy in memory,
 * just the sections that are currently being displayed by
 * every current view.
 * 
 * A model should be expected to be able to get an iter independent
 * of its reffed state.
 * @param iter the #GtkTreeIter-struct
 */
vfunc_ref_node(iter: Gtk.TreeIter): void
/**
 * Emits the #GtkTreeModel::row-changed signal on `tree_model`.
 * @param path a #GtkTreePath-struct pointing to the changed row
 * @param iter a valid #GtkTreeIter-struct pointing to the changed row
 */
vfunc_row_changed(path: Gtk.TreePath, iter: Gtk.TreeIter): void
/**
 * Emits the #GtkTreeModel::row-deleted signal on `tree_model`.
 * 
 * This should be called by models after a row has been removed.
 * The location pointed to by `path` should be the location that
 * the row previously was at. It may not be a valid location anymore.
 * 
 * Nodes that are deleted are not unreffed, this means that any
 * outstanding references on the deleted node should not be released.
 * @param path a #GtkTreePath-struct pointing to the previous location of     the deleted row
 */
vfunc_row_deleted(path: Gtk.TreePath): void
/**
 * Emits the #GtkTreeModel::row-has-child-toggled signal on
 * `tree_model`. This should be called by models after the child
 * state of a node changes.
 * @param path a #GtkTreePath-struct pointing to the changed row
 * @param iter a valid #GtkTreeIter-struct pointing to the changed row
 */
vfunc_row_has_child_toggled(path: Gtk.TreePath, iter: Gtk.TreeIter): void
/**
 * Emits the #GtkTreeModel::row-inserted signal on `tree_model`.
 * @param path a #GtkTreePath-struct pointing to the inserted row
 * @param iter a valid #GtkTreeIter-struct pointing to the inserted row
 */
vfunc_row_inserted(path: Gtk.TreePath, iter: Gtk.TreeIter): void
/**
 * Lets the tree unref the node.
 * 
 * This is an optional method for models to implement.
 * To be more specific, models may ignore this call as it exists
 * primarily for performance reasons. For more information on what
 * this means, see gtk_tree_model_ref_node().
 * 
 * Please note that nodes that are deleted are not unreffed.
 * @param iter the #GtkTreeIter-struct
 */
vfunc_unref_node(iter: Gtk.TreeIter): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module MenuButton {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.MenuButton.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Actionable.ConstructorProps, Gtk.Activatable.ConstructorProps, Gtk.Buildable.ConstructorProps {
icon_name: string;
    iconName: string;
    menu_id: string;
    menuId: string;
    model: Gio.MenuModel;
    show_accels: boolean;
    showAccels: boolean;
    show_arrow: boolean;
    showArrow: boolean;
    show_icons: boolean;
    showIcons: boolean;
    transitions_enabled: boolean;
    transitionsEnabled: boolean;
    }

}

class MenuButton extends Gtk.MenuButton implements Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {

    // Own properties of Dazzle.MenuButton

    set icon_name(val: string);
    set iconName(val: string);
    /**
     * The "menu-id" property can be used to automatically load a
     * #GMenuModel from the applications merged menus. This is
     * performed via dzl_application_get_menu_by_id().
     */
    set menu_id(val: string);
    /**
     * The "menu-id" property can be used to automatically load a
     * #GMenuModel from the applications merged menus. This is
     * performed via dzl_application_get_menu_by_id().
     */
    set menuId(val: string);
    get model(): Gio.MenuModel;
    set model(val: Gio.MenuModel);
    get show_accels(): boolean;
    set show_accels(val: boolean);
    get showAccels(): boolean;
    set showAccels(val: boolean);
    get show_arrow(): boolean;
    set show_arrow(val: boolean);
    get showArrow(): boolean;
    set showArrow(val: boolean);
    get show_icons(): boolean;
    set show_icons(val: boolean);
    get showIcons(): boolean;
    set showIcons(val: boolean);
    get transitions_enabled(): boolean;
    set transitions_enabled(val: boolean);
    get transitionsEnabled(): boolean;
    set transitionsEnabled(val: boolean);

    // Constructors of Dazzle.MenuButton


constructor(properties?: Partial<MenuButton.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static new_with_model(icon_name: string, model?: (Gio.MenuModel | null)): MenuButton;

    // Own methods of Dazzle.MenuButton

    get_model(): (Gio.MenuModel | null)
    get_show_accels(): boolean
    get_show_arrow(): boolean
    get_show_icons(): boolean
    set_model(model: Gio.MenuModel): void
    /**
     * Sets the #DzlMenuButton:show-accels property.
     * 
     * If %TRUE, accelerators will be displayed next to menu items that
     * contain a shortcut.
     * @param show_accels if accelerators should be visible
     */
    set_show_accels(show_accels: boolean): void
    /**
     * Sets the #DzlMenuButton:show-arrow property.
     * 
     * If %TRUE, an pan-down-symbolic image will be displayed next to the
     * image in the button.
     * @param show_arrow 
     */
    set_show_arrow(show_arrow: boolean): void
    /**
     * Sets the #DzlMenuButton:show-icons property.
     * 
     * If %TRUE, icons will be displayed next to menu items that
     * contain a shortcut.
     * @param show_icons if icons should be visible
     */
    set_show_icons(show_icons: boolean): void

// Inherited properties
get app_paintable(): boolean;
set app_paintable(val: boolean);
get appPaintable(): boolean;
set appPaintable(val: boolean);
get can_default(): boolean;
set can_default(val: boolean);
get canDefault(): boolean;
set canDefault(val: boolean);
get can_focus(): boolean;
set can_focus(val: boolean);
get canFocus(): boolean;
set canFocus(val: boolean);
get composite_child(): boolean;
get compositeChild(): boolean;
/**
 * Whether the widget is double buffered.
 */
get double_buffered(): boolean;
set double_buffered(val: boolean);
/**
 * Whether the widget is double buffered.
 */
get doubleBuffered(): boolean;
set doubleBuffered(val: boolean);
get events(): Gdk.EventMask;
set events(val: Gdk.EventMask);
/**
 * Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
 */
get expand(): boolean;
set expand(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focus_on_click(): boolean;
set focus_on_click(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focusOnClick(): boolean;
set focusOnClick(val: boolean);
/**
 * How to distribute horizontal space if widget gets extra space, see #GtkAlign
 */
get halign(): Gtk.Align;
set halign(val: Gtk.Align);
get has_default(): boolean;
set has_default(val: boolean);
get hasDefault(): boolean;
set hasDefault(val: boolean);
get has_focus(): boolean;
set has_focus(val: boolean);
get hasFocus(): boolean;
set hasFocus(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get has_tooltip(): boolean;
set has_tooltip(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get hasTooltip(): boolean;
set hasTooltip(val: boolean);
get height_request(): number;
set height_request(val: number);
get heightRequest(): number;
set heightRequest(val: number);
/**
 * Whether to expand horizontally. See gtk_widget_set_hexpand().
 */
get hexpand(): boolean;
set hexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpand_set(): boolean;
set hexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpandSet(): boolean;
set hexpandSet(val: boolean);
get is_focus(): boolean;
set is_focus(val: boolean);
get isFocus(): boolean;
set isFocus(val: boolean);
/**
 * Sets all four sides' margin at once. If read, returns max
 * margin on any side.
 */
get margin(): number;
set margin(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_bottom(): number;
set margin_bottom(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginBottom(): number;
set marginBottom(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_end(): number;
set margin_end(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginEnd(): number;
set marginEnd(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_left(): number;
set margin_left(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginLeft(): number;
set marginLeft(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_right(): number;
set margin_right(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginRight(): number;
set marginRight(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_start(): number;
set margin_start(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginStart(): number;
set marginStart(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_top(): number;
set margin_top(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginTop(): number;
set marginTop(val: number);
get name(): string;
set name(val: string);
get no_show_all(): boolean;
set no_show_all(val: boolean);
get noShowAll(): boolean;
set noShowAll(val: boolean);
/**
 * The requested opacity of the widget. See gtk_widget_set_opacity() for
 * more details about window opacity.
 * 
 * Before 3.8 this was only available in GtkWindow
 */
get opacity(): number;
set opacity(val: number);
get parent(): Gtk.Container;
set parent(val: Gtk.Container);
get receives_default(): boolean;
set receives_default(val: boolean);
get receivesDefault(): boolean;
set receivesDefault(val: boolean);
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scale_factor(): number;
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scaleFactor(): number;
get sensitive(): boolean;
set sensitive(val: boolean);
/**
 * The style of the widget, which contains information about how it will look (colors, etc).
 */
get style(): Gtk.Style;
set style(val: Gtk.Style);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_markup(): string;
set tooltip_markup(val: string);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipMarkup(): string;
set tooltipMarkup(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_text(): string;
set tooltip_text(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipText(): string;
set tooltipText(val: string);
/**
 * How to distribute vertical space if widget gets extra space, see #GtkAlign
 */
get valign(): Gtk.Align;
set valign(val: Gtk.Align);
/**
 * Whether to expand vertically. See gtk_widget_set_vexpand().
 */
get vexpand(): boolean;
set vexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpand_set(): boolean;
set vexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpandSet(): boolean;
set vexpandSet(val: boolean);
get visible(): boolean;
set visible(val: boolean);
get width_request(): number;
set width_request(val: number);
get widthRequest(): number;
set widthRequest(val: number);
/**
 * The widget's window if it is realized, %NULL otherwise.
 */
get window(): Gdk.Window;

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
/**
 * For widgets that can be “activated” (buttons, menu items, etc.)
 * this function activates them. Activation is what happens when you
 * press Enter on a widget during key navigation. If `widget` isn't
 * activatable, the function returns %FALSE.
 * @returns %TRUE if the widget was activatable
 */
activate(): boolean
/**
 * Installs an accelerator for this `widget` in `accel_group` that causes
 * `accel_signal` to be emitted if the accelerator is activated.
 * The `accel_group` needs to be added to the widget’s toplevel via
 * gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
 * Accelerators added through this function are not user changeable during
 * runtime. If you want to support accelerators that can be changed by the
 * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
 * gtk_menu_item_set_accel_path() instead.
 * @param accel_signal widget signal to emit on accelerator activation
 * @param accel_group accel group for this widget, added to its toplevel
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @param accel_flags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
 */
add_accelerator(accel_signal: string, accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): void
/**
 * Adds the device events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_device_events() for details.
 * @param device a #GdkDevice
 * @param events an event mask, see #GdkEventMask
 */
add_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Adds the events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_events() and the
 * [input handling overview][event-masks] for details.
 * @param events an event mask, see #GdkEventMask
 */
add_events(events: number): void
/**
 * Adds a widget to the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
 * list of mnemonic labels for the widget is cleared when the
 * widget is destroyed, so the caller must make sure to update
 * its internal state at this point as well, by using a connection
 * to the #GtkWidget::destroy signal or a weak notifier.
 * @param label a #GtkWidget that acts as a mnemonic label for @widget
 */
add_mnemonic_label(label: Gtk.Widget): void
/**
 * Queues an animation frame update and adds a callback to be called
 * before each frame. Until the tick callback is removed, it will be
 * called frequently (usually at the frame rate of the output device
 * or as quickly as the application can be repainted, whichever is
 * slower). For this reason, is most suitable for handling graphics
 * that change every frame or every few frames. The tick callback does
 * not automatically imply a relayout or repaint. If you want a
 * repaint or relayout, and aren’t changing widget properties that
 * would trigger that (for example, changing the text of a #GtkLabel),
 * then you will have to call gtk_widget_queue_resize() or
 * gtk_widget_queue_draw_area() yourself.
 * 
 * gdk_frame_clock_get_frame_time() should generally be used for timing
 * continuous animations and
 * gdk_frame_timings_get_predicted_presentation_time() if you are
 * trying to display isolated frames at particular times.
 * 
 * This is a more convenient alternative to connecting directly to the
 * #GdkFrameClock::update signal of #GdkFrameClock, since you don't
 * have to worry about when a #GdkFrameClock is assigned to a widget.
 * @param callback function to call for updating animations
 * @returns an id for the connection of this callback. Remove the callback     by passing it to gtk_widget_remove_tick_callback()
 */
add_tick_callback(callback: Gtk.TickCallback): number
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 * @returns %TRUE if the accelerator can be activated.
 */
can_activate_accel(signal_id: number): boolean
/**
 * This function is used by custom widget implementations; if you're
 * writing an app, you’d use gtk_widget_grab_focus() to move the focus
 * to a particular widget, and gtk_container_set_focus_chain() to
 * change the focus tab order. So you may want to investigate those
 * functions instead.
 * 
 * gtk_widget_child_focus() is called by containers as the user moves
 * around the window using keyboard shortcuts. `direction` indicates
 * what kind of motion is taking place (up, down, left, right, tab
 * forward, tab backward). gtk_widget_child_focus() emits the
 * #GtkWidget::focus signal; widgets override the default handler
 * for this signal in order to implement appropriate focus behavior.
 * 
 * The default ::focus handler for a widget should return %TRUE if
 * moving in `direction` left the focus on a focusable location inside
 * that widget, and %FALSE if moving in `direction` moved the focus
 * outside the widget. If returning %TRUE, widgets normally
 * call gtk_widget_grab_focus() to place the focus accordingly;
 * if returning %FALSE, they don’t modify the current focus location.
 * @param direction direction of focus movement
 * @returns %TRUE if focus ended up inside @widget
 */
child_focus(direction: Gtk.DirectionType): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
child_notify(child_property: string): void
child_notify(...args: never[]): any
/**
 * Same as gtk_widget_path(), but always uses the name of a widget’s type,
 * never uses a custom name set with gtk_widget_set_name().
 */
class_path(): [number, string, string]
/**
 * Computes whether a container should give this widget extra space
 * when possible. Containers should check this, rather than
 * looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
 * 
 * This function already checks whether the widget is visible, so
 * visibility does not need to be checked separately. Non-visible
 * widgets are not expanded.
 * 
 * The computed expand value uses either the expand setting explicitly
 * set on the widget itself, or, if none has been explicitly set,
 * the widget may expand if some of its children do.
 * @param orientation expand direction
 * @returns whether widget tree rooted here should be expanded
 */
compute_expand(orientation: Gtk.Orientation): boolean
/**
 * Creates a new #PangoContext with the appropriate font map,
 * font options, font description, and base direction for drawing
 * text for this widget. See also gtk_widget_get_pango_context().
 * @returns the new #PangoContext
 */
create_pango_context(): Pango.Context
/**
 * Creates a new #PangoLayout with the appropriate font map,
 * font description, and base direction for drawing text for
 * this widget.
 * 
 * If you keep a #PangoLayout created in this way around, you need
 * to re-create it when the widget #PangoContext is replaced.
 * This can be tracked by using the #GtkWidget::screen-changed signal
 * on the widget.
 * @param text text to set on the layout (can be %NULL)
 * @returns the new #PangoLayout
 */
create_pango_layout(text?: (string | null)): Pango.Layout
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
destroy(): void
/**
 * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
 * %NULL.  It’s intended to be used as a callback connected to the
 * “destroy” signal of a widget. You connect gtk_widget_destroyed()
 * as a signal handler, and pass the address of your widget variable
 * as user data. Then when the widget is destroyed, the variable will
 * be set to %NULL. Useful for example to avoid multiple copies
 * of the same dialog.
 * @param widget_pointer address of a variable that contains @widget
 */
destroyed(widget_pointer: Gtk.Widget): Gtk.Widget
/**
 * Returns %TRUE if `device` has been shadowed by a GTK+
 * device grab on another widget, so it would stop sending
 * events to `widget`. This may be used in the
 * #GtkWidget::grab-notify signal to check for specific
 * devices. See gtk_device_grab_add().
 * @param device a #GdkDevice
 * @returns %TRUE if there is an ongoing grab on @device          by another #GtkWidget than @widget.
 */
device_is_shadowed(device: Gdk.Device): boolean
/**
 * This function is equivalent to gtk_drag_begin_with_coordinates(),
 * passing -1, -1 as coordinates.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @returns the context for this drag
 */
drag_begin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: (Gdk.Event | null)): Gdk.DragContext
/**
 * Initiates a drag on the source side. The function only needs to be used
 * when the application is starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is %NULL, then %GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used to get information about the drag.
 * 
 * Generally there are three cases when you want to start a drag by hand by
 * calling this function:
 * 
 * 1. During a #GtkWidget::button-press-event handler, if you want to start a drag
 * immediately when the user presses the mouse button.  Pass the `event`
 * that you have in your #GtkWidget::button-press-event handler.
 * 
 * 2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
 * when the mouse moves past a certain threshold distance after a button-press.
 * Pass the `event` that you have in your #GtkWidget::motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).
 * If you really cannot pass a real event, pass %NULL instead.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @param x The initial x coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @param y The initial y coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @returns the context for this drag
 */
drag_begin_with_coordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: (Gdk.Event | null), x: number, y: number): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param start_x X coordinate of start of drag
 * @param start_y Y coordinate of start of drag
 * @param current_x current X coordinate
 * @param current_y current Y coordinate
 * @returns %TRUE if the drag threshold has been passed.
 */
drag_check_threshold(start_x: number, start_y: number, current_x: number, current_y: number): boolean
/**
 * Add the image targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_uri_targets(): void
/**
 * Looks for a match between the supported targets of `context` and the
 * `dest_target_list,` returning the first matching target, otherwise
 * returning %GDK_NONE. `dest_target_list` should usually be the return
 * value from gtk_drag_dest_get_target_list(), but some widgets may
 * have different valid targets for different parts of the widget; in
 * that case, they will have to implement a drag_motion handler that
 * passes the correct target list to this function.
 * @param context drag context
 * @param target_list list of droppable targets, or %NULL to use    gtk_drag_dest_get_target_list (@widget).
 * @returns first target that the source offers     and the dest can accept, or %GDK_NONE
 */
drag_dest_find_target(context: Gdk.DragContext, target_list?: (Gtk.TargetList | null)): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_dest_get_target_list(): (Gtk.TargetList | null)
/**
 * Returns whether the widget has been configured to always
 * emit #GtkWidget::drag-motion signals.
 * @returns %TRUE if the widget always emits   #GtkWidget::drag-motion events
 */
drag_dest_get_track_motion(): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget’s drag-and-drop signals
 * (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget’s #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget::drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget::drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There’s no way to set a default action here, you can use the
 * #GtkWidget::drag-motion callback for that. Here’s an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * 
 * ```c
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of     #GtkTargetEntrys indicating the drop types that this @widget will     accept, or %NULL. Later you can access the list with     gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this @widget.
 */
drag_dest_set(flags: Gtk.DestDefaults, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets this widget as a proxy for drops to another window.
 * @param proxy_window the window to which to forward drag events
 * @param protocol the drag protocol which the @proxy_window accepts   (You can use gdk_drag_get_protocol() to determine this)
 * @param use_coordinates If %TRUE, send the same coordinates to the   destination, because it is an embedded   subwindow.
 */
drag_dest_set_proxy(proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param target_list list of droppable targets, or %NULL for none
 */
drag_dest_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Tells the widget to emit #GtkWidget::drag-motion and
 * #GtkWidget::drag-leave events regardless of the targets and the
 * %GTK_DEST_DEFAULT_MOTION flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param track_motion whether to accept all targets
 */
drag_dest_set_track_motion(track_motion: boolean): void
/**
 * Clears information about a drop destination set with
 * gtk_drag_dest_set(). The widget will no longer receive
 * notification of drags.
 */
drag_dest_unset(): void
/**
 * Gets the data associated with a drag. When the data
 * is received or the retrieval fails, GTK+ will emit a
 * #GtkWidget::drag-data-received signal. Failure of the retrieval
 * is indicated by the length field of the `selection_data`
 * signal parameter being negative. However, when gtk_drag_get_data()
 * is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
 * then the widget will not receive notification of failed
 * drops.
 * @param context the drag context
 * @param target the target (form of the data) to retrieve
 * @param time_ a timestamp for retrieving the data. This will   generally be the time received in a #GtkWidget::drag-motion   or #GtkWidget::drag-drop signal
 */
drag_get_data(context: Gdk.DragContext, target: Gdk.Atom, time_: number): void
/**
 * Highlights a widget as a currently hovered drop target.
 * To end the highlight, call gtk_drag_unhighlight().
 * GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
 */
drag_highlight(): void
/**
 * Add the writable image targets supported by #GtkSelectionData to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_uri_targets(): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_source_get_target_list(): (Gtk.TargetList | null)
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param start_button_mask the bitmask of buttons that can start the drag
 * @param targets the table of targets     that the drag will support, may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
drag_source_set(start_button_mask: Gdk.ModifierType, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to `icon`. See the docs for #GtkIconTheme for more details.
 * @param icon A #GIcon
 */
drag_source_set_icon_gicon(icon: Gio.Icon): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param icon_name name of icon to use
 */
drag_source_set_icon_name(icon_name: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
drag_source_set_icon_pixbuf(pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param stock_id the ID of the stock icon to use
 */
drag_source_set_icon_stock(stock_id: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param target_list list of draggable targets, or %NULL for none
 */
drag_source_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Undoes the effects of gtk_drag_source_set().
 */
drag_source_unset(): void
/**
 * Removes a highlight set by gtk_drag_highlight() from
 * a widget.
 */
drag_unhighlight(): void
/**
 * Draws `widget` to `cr`. The top left corner of the widget will be
 * drawn to the currently set origin point of `cr`.
 * 
 * You should pass a cairo context as `cr` argument that is in an
 * original state. Otherwise the resulting drawing is undefined. For
 * example changing the operator using cairo_set_operator() or the
 * line width using cairo_set_line_width() might have unwanted side
 * effects.
 * You may however change the context’s transform matrix - like with
 * cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
 * region with cairo_clip() prior to calling this function. Also, it
 * is fine to modify the context with cairo_save() and
 * cairo_push_group() prior to calling this function.
 * 
 * Note that special-purpose widgets may contain special code for
 * rendering to the screen and might appear differently on screen
 * and when rendered using gtk_widget_draw().
 * @param cr a cairo context to draw to
 */
draw(cr: cairo.Context): void
/**
 * Ensures that `widget` has a style (`widget->`style).
 * 
 * Not a very useful function; most of the time, if you
 * want the style, the widget is realized, and realized
 * widgets are guaranteed to have a style already.
 */
ensure_style(): void
/**
 * Notifies the user about an input-related error on this widget.
 * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
 * gdk_window_beep(), otherwise it does nothing.
 * 
 * Note that the effect of gdk_window_beep() can be configured in many
 * ways, depending on the windowing backend and the desktop environment
 * or window manager that is used.
 */
error_bell(): void
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 * @returns return from the event signal emission (%TRUE if               the event was handled)
 */
event(event: Gdk.Event): boolean
/**
 * Stops emission of #GtkWidget::child-notify signals on `widget`. The
 * signals are queued until gtk_widget_thaw_child_notify() is called
 * on `widget`.
 * 
 * This is the analogue of g_object_freeze_notify() for child properties.
 */
freeze_child_notify(): void
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 * @returns the #AtkObject associated with @widget
 */
get_accessible(): Atk.Object
/**
 * Retrieves the #GActionGroup that was registered using `prefix`. The resulting
 * #GActionGroup may have been registered to `widget` or any #GtkWidget in its
 * ancestry.
 * 
 * If no action group was found matching `prefix,` then %NULL is returned.
 * @param prefix The “prefix” of the action group.
 * @returns A #GActionGroup or %NULL.
 */
get_action_group(prefix: string): (Gio.ActionGroup | null)
/**
 * Returns the baseline that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function, and when allocating child
 * widgets in #GtkWidget::size_allocate.
 * @returns the baseline of the @widget, or -1 if none
 */
get_allocated_baseline(): number
/**
 * Returns the height that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the height of the @widget
 */
get_allocated_height(): number
/**
 * Retrieves the widget’s allocated size.
 * 
 * This function returns the last values passed to
 * gtk_widget_size_allocate_with_baseline(). The value differs from
 * the size returned in gtk_widget_get_allocation() in that functions
 * like gtk_widget_set_halign() can adjust the allocation, but not
 * the value returned by this function.
 * 
 * If a widget is not visible, its allocated size is 0.
 */
get_allocated_size(): [Gtk.Allocation, number]
/**
 * Returns the width that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the width of the @widget
 */
get_allocated_width(): number
/**
 * Retrieves the widget’s allocation.
 * 
 * Note, when implementing a #GtkContainer: a widget’s allocation will
 * be its “adjusted” allocation, that is, the widget’s parent
 * container typically calls gtk_widget_size_allocate() with an
 * allocation, and that allocation is then adjusted (to handle margin
 * and alignment for example) before assignment to the widget.
 * gtk_widget_get_allocation() returns the adjusted allocation that
 * was actually assigned to the widget. The adjusted allocation is
 * guaranteed to be completely contained within the
 * gtk_widget_size_allocate() allocation, however. So a #GtkContainer
 * is guaranteed that its children stay inside the assigned bounds,
 * but not that they have exactly the bounds the container assigned.
 * There is no way to get the original allocation assigned by
 * gtk_widget_size_allocate(), since it isn’t stored; if a container
 * implementation needs that information it will have to track it itself.
 */
get_allocation(): Gtk.Allocation
/**
 * Gets the first ancestor of `widget` with type `widget_type`. For example,
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
 * the first #GtkBox that’s an ancestor of `widget`. No reference will be
 * added to the returned widget; it should not be unreferenced. See note
 * about checking for a toplevel #GtkWindow in the docs for
 * gtk_widget_get_toplevel().
 * 
 * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
 * considers `widget` to be an ancestor of itself.
 * @param widget_type ancestor type
 * @returns the ancestor widget, or %NULL if not found
 */
get_ancestor(widget_type: GObject.GType): (Gtk.Widget | null)
/**
 * Determines whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * See gtk_widget_set_app_paintable()
 * @returns %TRUE if the widget is app paintable
 */
get_app_paintable(): boolean
/**
 * Determines whether `widget` can be a default widget. See
 * gtk_widget_set_can_default().
 * @returns %TRUE if @widget can be a default widget, %FALSE otherwise
 */
get_can_default(): boolean
/**
 * Determines whether `widget` can own the input focus. See
 * gtk_widget_set_can_focus().
 * @returns %TRUE if @widget can own the input focus, %FALSE otherwise
 */
get_can_focus(): boolean
/**
 * This function is only for use in widget implementations. Obtains
 * `widget->`requisition, unless someone has forced a particular
 * geometry on the widget (e.g. with gtk_widget_set_size_request()),
 * in which case it returns that geometry instead of the widget's
 * requisition.
 * 
 * This function differs from gtk_widget_size_request() in that
 * it retrieves the last size request value from `widget->`requisition,
 * while gtk_widget_size_request() actually calls the "size_request" method
 * on `widget` to compute the size request and fill in `widget->`requisition,
 * and only then returns `widget->`requisition.
 * 
 * Because this function does not call the “size_request” method, it
 * can only be used when you know that `widget->`requisition is
 * up-to-date, that is, gtk_widget_size_request() has been called
 * since the last time a resize was queued. In general, only container
 * implementations have this information; applications should use
 * gtk_widget_size_request().
 */
get_child_requisition(): Gtk.Requisition
/**
 * Gets the value set with gtk_widget_set_child_visible().
 * If you feel a need to use this function, your code probably
 * needs reorganization.
 * 
 * This function is only useful for container implementations and
 * never should be called by an application.
 * @returns %TRUE if the widget is mapped with the parent.
 */
get_child_visible(): boolean
/**
 * Retrieves the widget’s clip area.
 * 
 * The clip area is the area in which all of `widget'`s drawing will
 * happen. Other toolkits call it the bounding box.
 * 
 * Historically, in GTK+ the clip area has been equal to the allocation
 * retrieved via gtk_widget_get_allocation().
 */
get_clip(): Gtk.Allocation
/**
 * Returns the clipboard object for the given selection to
 * be used with `widget`. `widget` must have a #GdkDisplay
 * associated with it, so must be attached to a toplevel
 * window.
 * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
 * @returns the appropriate clipboard object. If no             clipboard already exists, a new one will             be created. Once a clipboard object has             been created, it is persistent for all time.
 */
get_clipboard(selection: Gdk.Atom): Gtk.Clipboard
/**
 * Obtains the composite name of a widget.
 * @returns the composite name of @widget, or %NULL if @widget is not   a composite child. The string should be freed when it is no   longer needed.
 */
get_composite_name(): string
/**
 * Returns whether `device` can interact with `widget` and its
 * children. See gtk_widget_set_device_enabled().
 * @param device a #GdkDevice
 * @returns %TRUE is @device is enabled for @widget
 */
get_device_enabled(device: Gdk.Device): boolean
/**
 * Returns the events mask for the widget corresponding to an specific device. These
 * are the events that the widget will receive when `device` operates on it.
 * @param device a #GdkDevice
 * @returns device event mask for @widget
 */
get_device_events(device: Gdk.Device): Gdk.EventMask
/**
 * Gets the reading direction for a particular widget. See
 * gtk_widget_set_direction().
 * @returns the reading direction for the widget.
 */
get_direction(): Gtk.TextDirection
get_direction(...args: never[]): any
/**
 * Get the #GdkDisplay for the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow at the top.
 * 
 * In general, you should only create display specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkDisplay for the toplevel for this widget.
 */
get_display(): Gdk.Display
/**
 * Determines whether the widget is double buffered.
 * 
 * See gtk_widget_set_double_buffered()
 * @returns %TRUE if the widget is double buffered
 */
get_double_buffered(): boolean
/**
 * Returns the event mask (see #GdkEventMask) for the widget. These are the
 * events that the widget will receive.
 * 
 * Note: Internally, the widget event mask will be the logical OR of the event
 * mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
 * event mask necessary to cater for every #GtkEventController created for the
 * widget.
 * @returns event mask for @widget
 */
get_events(): number
/**
 * Returns whether the widget should grab focus when it is clicked with the mouse.
 * See gtk_widget_set_focus_on_click().
 * @returns %TRUE if the widget should grab focus when it is clicked with               the mouse.
 */
get_focus_on_click(): boolean
/**
 * Gets the font map that has been set with gtk_widget_set_font_map().
 * @returns A #PangoFontMap, or %NULL
 */
get_font_map(): (Pango.FontMap | null)
/**
 * Returns the #cairo_font_options_t used for Pango rendering. When not set,
 * the defaults font options for the #GdkScreen will be used.
 * @returns the #cairo_font_options_t or %NULL if not set
 */
get_font_options(): (cairo.FontOptions | null)
/**
 * Obtains the frame clock for a widget. The frame clock is a global
 * “ticker” that can be used to drive animations and repaints.  The
 * most common reason to get the frame clock is to call
 * gdk_frame_clock_get_frame_time(), in order to get a time to use for
 * animating. For example you might record the start of the animation
 * with an initial value from gdk_frame_clock_get_frame_time(), and
 * then update the animation by calling
 * gdk_frame_clock_get_frame_time() again during each repaint.
 * 
 * gdk_frame_clock_request_phase() will result in a new frame on the
 * clock, but won’t necessarily repaint any widgets. To repaint a
 * widget, you have to use gtk_widget_queue_draw() which invalidates
 * the widget (thus scheduling it to receive a draw on the next
 * frame). gtk_widget_queue_draw() will also end up requesting a frame
 * on the appropriate frame clock.
 * 
 * A widget’s frame clock will not change while the widget is
 * mapped. Reparenting a widget (which implies a temporary unmap) can
 * change the widget’s frame clock.
 * 
 * Unrealized widgets do not have a frame clock.
 * @returns a #GdkFrameClock, or %NULL if widget is unrealized
 */
get_frame_clock(): (Gdk.FrameClock | null)
/**
 * Gets the value of the #GtkWidget:halign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
 * alignment.
 * @returns the horizontal alignment of @widget
 */
get_halign(): Gtk.Align
/**
 * Returns the current value of the has-tooltip property.  See
 * #GtkWidget:has-tooltip for more information.
 * @returns current value of has-tooltip on @widget.
 */
get_has_tooltip(): boolean
/**
 * Determines whether `widget` has a #GdkWindow of its own. See
 * gtk_widget_set_has_window().
 * @returns %TRUE if @widget has a window, %FALSE otherwise
 */
get_has_window(): boolean
/**
 * Gets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Containers should use gtk_widget_compute_expand() rather than
 * this function, to see whether a widget, or any of its children,
 * has the expand flag set. If any child of a widget wants to
 * expand, the parent may ask to expand also.
 * 
 * This function only looks at the widget’s own hexpand flag, rather
 * than computing whether the entire widget tree rooted at this widget
 * wants to expand.
 * @returns whether hexpand flag is set
 */
get_hexpand(): boolean
/**
 * Gets whether gtk_widget_set_hexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @returns whether hexpand has been explicitly set
 */
get_hexpand_set(): boolean
/**
 * Whether the widget is mapped.
 * @returns %TRUE if the widget is mapped, %FALSE otherwise.
 */
get_mapped(): boolean
/**
 * Gets the value of the #GtkWidget:margin-bottom property.
 * @returns The bottom margin of @widget
 */
get_margin_bottom(): number
/**
 * Gets the value of the #GtkWidget:margin-end property.
 * @returns The end margin of @widget
 */
get_margin_end(): number
/**
 * Gets the value of the #GtkWidget:margin-left property.
 * @returns The left margin of @widget
 */
get_margin_left(): number
/**
 * Gets the value of the #GtkWidget:margin-right property.
 * @returns The right margin of @widget
 */
get_margin_right(): number
/**
 * Gets the value of the #GtkWidget:margin-start property.
 * @returns The start margin of @widget
 */
get_margin_start(): number
/**
 * Gets the value of the #GtkWidget:margin-top property.
 * @returns The top margin of @widget
 */
get_margin_top(): number
/**
 * Returns the modifier mask the `widget’`s windowing system backend
 * uses for a particular purpose.
 * 
 * See gdk_keymap_get_modifier_mask().
 * @param intent the use case for the modifier mask
 * @returns the modifier mask used for @intent.
 */
get_modifier_mask(intent: Gdk.ModifierIntent): Gdk.ModifierType
/**
 * Returns the current modifier style for the widget. (As set by
 * gtk_widget_modify_style().) If no style has previously set, a new
 * #GtkRcStyle will be created with all values unset, and set as the
 * modifier style for the widget. If you make changes to this rc
 * style, you must call gtk_widget_modify_style(), passing in the
 * returned rc style, to make sure that your changes take effect.
 * 
 * Caution: passing the style back to gtk_widget_modify_style() will
 * normally end up destroying it, because gtk_widget_modify_style() copies
 * the passed-in style and sets the copy as the new modifier style,
 * thus dropping any reference to the old modifier style. Add a reference
 * to the modifier style if you want to keep it alive.
 * @returns the modifier style for the widget.     This rc style is owned by the widget. If you want to keep a     pointer to value this around, you must add a refcount using     g_object_ref().
 */
get_modifier_style(): Gtk.RcStyle
/**
 * Retrieves the name of a widget. See gtk_widget_set_name() for the
 * significance of widget names.
 * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
 */
get_name(): string
/**
 * Returns the current value of the #GtkWidget:no-show-all property,
 * which determines whether calls to gtk_widget_show_all()
 * will affect this widget.
 * @returns the current value of the “no-show-all” property.
 */
get_no_show_all(): boolean
/**
 * Fetches the requested opacity for this widget.
 * See gtk_widget_set_opacity().
 * @returns the requested opacity for this widget.
 */
get_opacity(): number
/**
 * Gets a #PangoContext with the appropriate font map, font description,
 * and base direction for this widget. Unlike the context returned
 * by gtk_widget_create_pango_context(), this context is owned by
 * the widget (it can be used until the screen for the widget changes
 * or the widget is removed from its toplevel), and will be updated to
 * match any changes to the widget’s attributes. This can be tracked
 * by using the #GtkWidget::screen-changed signal on the widget.
 * @returns the #PangoContext for the widget.
 */
get_pango_context(): Pango.Context
/**
 * Returns the parent container of `widget`.
 * @returns the parent container of @widget, or %NULL
 */
get_parent(): (Gtk.Widget | null)
/**
 * Gets `widget’`s parent window, or %NULL if it does not have one.
 * @returns the parent window of @widget, or %NULL if it does not have a parent window.
 */
get_parent_window(): (Gdk.Window | null)
/**
 * Returns the #GtkWidgetPath representing `widget,` if the widget
 * is not connected to a toplevel widget, a partial path will be
 * created.
 * @returns The #GtkWidgetPath representing @widget
 */
get_path(): Gtk.WidgetPath
/**
 * Obtains the location of the mouse pointer in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(); and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 */
get_pointer(): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves the minimum and natural size of a widget, taking
 * into account the widget’s preference for height-for-width management.
 * 
 * This is used to retrieve a suitable size by container widgets which do
 * not impose any restrictions on the child placement. It can be used
 * to deduce toplevel window and menu sizes as well as child widgets in
 * free-form containers such as GtkLayout.
 * 
 * Handle with care. Note that the natural height of a height-for-width
 * widget will generally be a smaller size than the minimum height, since the required
 * height for the natural width is generally smaller than the required height for
 * the minimum width.
 * 
 * Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
 * baseline alignment.
 */
get_preferred_size(): [Gtk.Requisition | null, Gtk.Requisition | null]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
get_preferred_width_for_height(height: number): [number, number]
/**
 * Determines whether `widget` is realized.
 * @returns %TRUE if @widget is realized, %FALSE otherwise
 */
get_realized(): boolean
/**
 * Determines whether `widget` is always treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_set_receives_default().
 * @returns %TRUE if @widget acts as the default widget when focused,               %FALSE otherwise
 */
get_receives_default(): boolean
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 * @returns The #GtkSizeRequestMode preferred by @widget.
 */
get_request_mode(): Gtk.SizeRequestMode
/**
 * Retrieves the widget’s requisition.
 * 
 * This function should only be used by widget implementations in
 * order to figure whether the widget’s requisition has actually
 * changed after some internal state change (so that they can call
 * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
 * 
 * Normally, gtk_widget_size_request() should be used.
 */
get_requisition(): Gtk.Requisition
/**
 * Get the root window where this widget is located. This function can
 * only be called after the widget has been added to a widget
 * hierarchy with #GtkWindow at the top.
 * 
 * The root window is useful for such purposes as creating a popup
 * #GdkWindow associated with the window. In general, you should only
 * create display specific resources when a widget has been realized,
 * and you should free those resources when the widget is unrealized.
 * @returns the #GdkWindow root window for the toplevel for this widget.
 */
get_root_window(): Gdk.Window
/**
 * Retrieves the internal scale factor that maps from window coordinates
 * to the actual device pixels. On traditional systems this is 1, on
 * high density outputs, it can be a higher value (typically 2).
 * 
 * See gdk_window_get_scale_factor().
 * @returns the scale factor for @widget
 */
get_scale_factor(): number
/**
 * Get the #GdkScreen from the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow
 * at the top.
 * 
 * In general, you should only create screen specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkScreen for the toplevel for this widget.
 */
get_screen(): Gdk.Screen
/**
 * Returns the widget’s sensitivity (in the sense of returning
 * the value that has been set using gtk_widget_set_sensitive()).
 * 
 * The effective sensitivity of a widget is however determined by both its
 * own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
 * @returns %TRUE if the widget is sensitive
 */
get_sensitive(): boolean
/**
 * Gets the settings object holding the settings used for this widget.
 * 
 * Note that this function can only be called when the #GtkWidget
 * is attached to a toplevel, since the settings object is specific
 * to a particular #GdkScreen.
 * @returns the relevant #GtkSettings object
 */
get_settings(): Gtk.Settings
/**
 * Gets the size request that was explicitly set for the widget using
 * gtk_widget_set_size_request(). A value of -1 stored in `width` or
 * `height` indicates that that dimension has not been set explicitly
 * and the natural requisition of the widget will be used instead. See
 * gtk_widget_set_size_request(). To get the size a widget will
 * actually request, call gtk_widget_get_preferred_size() instead of
 * this function.
 */
get_size_request(): [number, number]
/**
 * Returns the widget’s state. See gtk_widget_set_state().
 * @returns the state of @widget.
 */
get_state(): Gtk.StateType
/**
 * Returns the widget state as a flag set. It is worth mentioning
 * that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
 * returned, that is, also based on parent insensitivity, even if
 * `widget` itself is sensitive.
 * 
 * Also note that if you are looking for a way to obtain the
 * #GtkStateFlags to pass to a #GtkStyleContext method, you
 * should look at gtk_style_context_get_state().
 * @returns The state flags for widget
 */
get_state_flags(): Gtk.StateFlags
/**
 * Simply an accessor function that returns `widget->`style.
 * @returns the widget’s #GtkStyle
 */
get_style(): Gtk.Style
/**
 * Returns the style context associated to `widget`. The returned object is
 * guaranteed to be the same for the lifetime of `widget`.
 * @returns a #GtkStyleContext. This memory is owned by @widget and          must not be freed.
 */
get_style_context(): Gtk.StyleContext
/**
 * Returns %TRUE if `widget` is multiple pointer aware. See
 * gtk_widget_set_support_multidevice() for more information.
 * @returns %TRUE if @widget is multidevice aware.
 */
get_support_multidevice(): boolean
/**
 * Fetch an object build from the template XML for `widget_type` in this `widget` instance.
 * 
 * This will only report children which were previously declared with
 * gtk_widget_class_bind_template_child_full() or one of its
 * variants.
 * 
 * This function is only meant to be called for code which is private to the `widget_type` which
 * declared the child and is meant for language bindings which cannot easily make use
 * of the GObject structure offsets.
 * @param widget_type The #GType to get a template child for
 * @param name The “id” of the child defined in the template XML
 * @returns The object built in the template XML with the id @name
 */
get_template_child<T = GObject.Object>(widget_type: GObject.GType, name: string): T
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_markup(): (string | null)
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_text(): (string | null)
/**
 * Returns the #GtkWindow of the current tooltip. This can be the
 * GtkWindow created by default, or the custom tooltip window set
 * using gtk_widget_set_tooltip_window().
 * @returns The #GtkWindow of the current tooltip.
 */
get_tooltip_window(): Gtk.Window
/**
 * This function returns the topmost widget in the container hierarchy
 * `widget` is a part of. If `widget` has no parent widgets, it will be
 * returned as the topmost widget. No reference will be added to the
 * returned widget; it should not be unreferenced.
 * 
 * Note the difference in behavior vs. gtk_widget_get_ancestor();
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
 * would return
 * %NULL if `widget` wasn’t inside a toplevel window, and if the
 * window was inside a #GtkWindow-derived widget which was in turn
 * inside the toplevel #GtkWindow. While the second case may
 * seem unlikely, it actually happens when a #GtkPlug is embedded
 * inside a #GtkSocket within the same application.
 * 
 * To reliably find the toplevel #GtkWindow, use
 * gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
 * on the result. For instance, to get the title of a widget's toplevel
 * window, one might use:
 * 
 * ```c
 * static const char *
 * get_widget_toplevel_title (GtkWidget *widget)
 * {
 *   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 *   if (GTK_IS_WINDOW (toplevel))
 *     {
 *       return gtk_window_get_title (GTK_WINDOW (toplevel));
 *     }
 * 
 *   return NULL;
 * }
 * ```
 * 
 * @returns the topmost ancestor of @widget, or @widget itself    if there’s no ancestor.
 */
get_toplevel(): Gtk.Widget
/**
 * Gets the value of the #GtkWidget:valign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. If your widget want to support baseline aligned
 * children it must use gtk_widget_get_valign_with_baseline(), or
 * `g_object_get (widget, "valign", &value, NULL)`, which will
 * also report the true value.
 * @returns the vertical alignment of @widget, ignoring baseline alignment
 */
get_valign(): Gtk.Align
/**
 * Gets the value of the #GtkWidget:valign property, including
 * %GTK_ALIGN_BASELINE.
 * @returns the vertical alignment of @widget
 */
get_valign_with_baseline(): Gtk.Align
/**
 * Gets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_get_hexpand() for more detail.
 * @returns whether vexpand flag is set
 */
get_vexpand(): boolean
/**
 * Gets whether gtk_widget_set_vexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * See gtk_widget_get_hexpand_set() for more detail.
 * @returns whether vexpand has been explicitly set
 */
get_vexpand_set(): boolean
/**
 * Determines whether the widget is visible. If you want to
 * take into account whether the widget’s parent is also marked as
 * visible, use gtk_widget_is_visible() instead.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See gtk_widget_set_visible().
 * @returns %TRUE if the widget is visible
 */
get_visible(): boolean
/**
 * Gets the visual that will be used to render `widget`.
 * @returns the visual for @widget
 */
get_visual(): Gdk.Visual
/**
 * Returns the widget’s window if it is realized, %NULL otherwise
 * @returns @widget’s window.
 */
get_window(): (Gdk.Window | null)
/**
 * Makes `widget` the current grabbed widget.
 * 
 * This means that interaction with other widgets in the same
 * application is blocked and mouse as well as keyboard events
 * are delivered to this widget.
 * 
 * If `widget` is not sensitive, it is not set as the current
 * grabbed widget and this function does nothing.
 */
grab_add(): void
/**
 * Causes `widget` to become the default widget. `widget` must be able to be
 * a default widget; typically you would ensure this yourself
 * by calling gtk_widget_set_can_default() with a %TRUE value.
 * The default widget is activated when
 * the user presses Enter in a window. Default widgets must be
 * activatable, that is, gtk_widget_activate() should affect them. Note
 * that #GtkEntry widgets require the “activates-default” property
 * set to %TRUE before they activate the default widget when Enter
 * is pressed and the #GtkEntry is focused.
 */
grab_default(): void
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
grab_focus(): void
/**
 * Removes the grab from the given widget.
 * 
 * You have to pair calls to gtk_grab_add() and gtk_grab_remove().
 * 
 * If `widget` does not have the grab, this function does nothing.
 */
grab_remove(): void
/**
 * Determines whether the widget is currently grabbing events, so it
 * is the only widget receiving input events (keyboard and mouse).
 * 
 * See also gtk_grab_add().
 * @returns %TRUE if the widget is in the grab_widgets stack
 */
has_grab(): boolean
/**
 * Determines if the widget style has been looked up through the rc mechanism.
 * @returns %TRUE if the widget has been looked up through the rc   mechanism, %FALSE otherwise.
 */
has_rc_style(): boolean
/**
 * Checks whether there is a #GdkScreen is associated with
 * this widget. All toplevel widgets have an associated
 * screen, and all widgets added into a hierarchy with a toplevel
 * window at the top.
 * @returns %TRUE if there is a #GdkScreen associated   with the widget.
 */
has_screen(): boolean
/**
 * Determines if the widget should show a visible indication that
 * it has the global input focus. This is a convenience function for
 * use in ::draw handlers that takes into account whether focus
 * indication should currently be shown in the toplevel window of
 * `widget`. See gtk_window_get_focus_visible() for more information
 * about focus indication.
 * 
 * To find out if the widget has the global input focus, use
 * gtk_widget_has_focus().
 * @returns %TRUE if the widget should display a “focus rectangle”
 */
has_visible_focus(): boolean
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
hide(): void
/**
 * Utility function; intended to be connected to the #GtkWidget::delete-event
 * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
 * argument, then returns %TRUE. If connected to ::delete-event, the
 * result is that clicking the close button for a window (on the
 * window frame, top right corner usually) will hide but not destroy
 * the window. By default, GTK+ destroys windows when ::delete-event
 * is received.
 * @returns %TRUE
 */
hide_on_delete(): boolean
/**
 * Returns whether the widget is currently being destroyed.
 * This information can sometimes be used to avoid doing
 * unnecessary work.
 * @returns %TRUE if @widget is being destroyed
 */
in_destruction(): boolean
/**
 * Creates and initializes child widgets defined in templates. This
 * function must be called in the instance initializer for any
 * class which assigned itself a template using gtk_widget_class_set_template()
 * 
 * It is important to call this function in the instance initializer
 * of a #GtkWidget subclass and not in #GObject.constructed() or
 * #GObject.constructor() for two reasons.
 * 
 * One reason is that generally derived widgets will assume that parent
 * class composite widgets have been created in their instance
 * initializers.
 * 
 * Another reason is that when calling g_object_new() on a widget with
 * composite templates, it’s important to build the composite widgets
 * before the construct properties are set. Properties passed to g_object_new()
 * should take precedence over properties set in the private template XML.
 */
init_template(): void
/**
 * Sets an input shape for this widget’s GDK window. This allows for
 * windows which react to mouse click in a nonrectangular region, see
 * gdk_window_input_shape_combine_region() for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
input_shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Inserts `group` into `widget`. Children of `widget` that implement
 * #GtkActionable can then be associated with actions in `group` by
 * setting their “action-name” to
 * `prefix`.`action-name`.
 * 
 * If `group` is %NULL, a previously inserted group for `name` is removed
 * from `widget`.
 * @param name the prefix for actions in @group
 * @param group a #GActionGroup, or %NULL
 */
insert_action_group(name: string, group?: (Gio.ActionGroup | null)): void
/**
 * Computes the intersection of a `widget’`s area and `area,` storing
 * the intersection in `intersection,` and returns %TRUE if there was
 * an intersection.  `intersection` may be %NULL if you’re only
 * interested in whether there was an intersection.
 * @param area a rectangle
 * @returns %TRUE if there was an intersection
 */
intersect(area: Gdk.Rectangle): [boolean, Gdk.Rectangle | null]
/**
 * Determines whether `widget` is somewhere inside `ancestor,` possibly with
 * intermediate containers.
 * @param ancestor another #GtkWidget
 * @returns %TRUE if @ancestor contains @widget as a child,    grandchild, great grandchild, etc.
 */
is_ancestor(ancestor: Gtk.Widget): boolean
/**
 * Whether `widget` can rely on having its alpha channel
 * drawn correctly. On X11 this function returns whether a
 * compositing manager is running for `widget’`s screen.
 * 
 * Please note that the semantics of this call will change
 * in the future if used on a widget that has a composited
 * window in its hierarchy (as set by gdk_window_set_composited()).
 * @returns %TRUE if the widget can rely on its alpha channel being drawn correctly.
 */
is_composited(): boolean
/**
 * Determines whether `widget` can be drawn to. A widget can be drawn
 * to if it is mapped and visible.
 * @returns %TRUE if @widget is drawable, %FALSE otherwise
 */
is_drawable(): boolean
/**
 * Returns the widget’s effective sensitivity, which means
 * it is sensitive itself and also its parent widget is sensitive
 * @returns %TRUE if the widget is effectively sensitive
 */
is_sensitive(): boolean
/**
 * Determines whether `widget` is a toplevel widget.
 * 
 * Currently only #GtkWindow and #GtkInvisible (and out-of-process
 * #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
 * widget.
 * @returns %TRUE if @widget is a toplevel, %FALSE otherwise
 */
is_toplevel(): boolean
/**
 * Determines whether the widget and all its parents are marked as
 * visible.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See also gtk_widget_get_visible() and gtk_widget_set_visible()
 * @returns %TRUE if the widget and all its parents are visible
 */
is_visible(): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 * @returns %TRUE if stopping keyboard navigation is fine, %FALSE               if the emitting widget should try to handle the keyboard               navigation attempt in its parent container(s).
 */
keynav_failed(direction: Gtk.DirectionType): boolean
/**
 * Lists the closures used by `widget` for accelerator group connections
 * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
 * The closures can be used to monitor accelerator changes on `widget,`
 * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
 * #GtkAccelGroup of a closure which can be found out with
 * gtk_accel_group_from_accel_closure().
 * @returns a newly allocated #GList of closures
 */
list_accel_closures(): GObject.Closure[]
/**
 * Retrieves a %NULL-terminated array of strings containing the prefixes of
 * #GActionGroup's available to `widget`.
 * @returns a %NULL-terminated array of strings.
 */
list_action_prefixes(): string[]
/**
 * Returns a newly allocated list of the widgets, normally labels, for
 * which this widget is the target of a mnemonic (see for example,
 * gtk_label_set_mnemonic_widget()).
 * 
 * The widgets in the list are not individually referenced. If you
 * want to iterate through the list and perform actions involving
 * callbacks that might destroy the widgets, you
 * must call `g_list_foreach (result,
 * (GFunc)g_object_ref, NULL)` first, and then unref all the
 * widgets afterwards.
 * @returns the list of  mnemonic labels; free this list  with g_list_free() when you are done with it.
 */
list_mnemonic_labels(): Gtk.Widget[]
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
map(): void
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 * @returns %TRUE if the signal has been handled
 */
mnemonic_activate(group_cycling: boolean): boolean
/**
 * Sets the base color for a widget in a particular state.
 * All other style values are left untouched. The base color
 * is the background color used along with the text color
 * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
 * and #GtkTextView. See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > base color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the base color on that.
 * @param state the state for which to set the base color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_base().
 */
modify_base(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > background color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the background color on that.
 * @param state the state for which to set the background color
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_bg().
 */
modify_bg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the #GtkWidget
 * cursor-color and secondary-cursor-color
 * style properties.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param primary the color to use for primary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_cursor().
 * @param secondary the color to use for secondary cursor (does     not need to be allocated), or %NULL to undo the effect of     previous calls to of gtk_widget_modify_cursor().
 */
modify_cursor(primary?: (Gdk.Color | null), secondary?: (Gdk.Color | null)): void
/**
 * Sets the foreground color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the foreground color
 * @param color the color to assign (does not need to be allocated),     or %NULL to undo the effect of previous calls to     of gtk_widget_modify_fg().
 */
modify_fg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the font to use for a widget.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param font_desc the font description to use, or %NULL     to undo the effect of previous calls to gtk_widget_modify_font()
 */
modify_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Modifies style values on the widget.
 * 
 * Modifications made using this technique take precedence over
 * style values set via an RC file, however, they will be overridden
 * if a style is explicitly set on the widget using gtk_widget_set_style().
 * The #GtkRcStyle-struct is designed so each field can either be
 * set or unset, so it is possible, using this function, to modify some
 * style values and leave the others unchanged.
 * 
 * Note that modifications made with this function are not cumulative
 * with previous calls to gtk_widget_modify_style() or with such
 * functions as gtk_widget_modify_fg(). If you wish to retain
 * previous values, you must first call gtk_widget_get_modifier_style(),
 * make your modifications to the returned style, then call
 * gtk_widget_modify_style() with that style. On the other hand,
 * if you first call gtk_widget_modify_style(), subsequent calls
 * to such functions gtk_widget_modify_fg() will have a cumulative
 * effect with the initial modifications.
 * @param style the #GtkRcStyle-struct holding the style modifications
 */
modify_style(style: Gtk.RcStyle): void
/**
 * Sets the text color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * The text color is the foreground color used along with the
 * base color (see gtk_widget_modify_base()) for widgets such
 * as #GtkEntry and #GtkTextView.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the text color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_text().
 */
modify_text(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color to use for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color().
 * @param state the state for which to set the background color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_background_color()
 */
override_background_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the color to use for a widget.
 * 
 * All other style values are left untouched.
 * 
 * This function does not act recursively. Setting the color of a
 * container does not affect its children. Note that some widgets that
 * you may not think of as containers, for instance #GtkButtons,
 * are actually containers.
 * 
 * This API is mostly meant as a quick way for applications to
 * change a widget appearance. If you are developing a widgets
 * library and intend this change to be themeable, it is better
 * done by setting meaningful CSS classes in your
 * widget/container implementation through gtk_style_context_add_class().
 * 
 * This way, your widget library can install a #GtkCssProvider
 * with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
 * to provide a default styling for those widgets that need so, and
 * this theming may fully overridden by the user’s theme.
 * 
 * Note that for complex widgets this may bring in undesired
 * results (such as uniform background color everywhere), in
 * these cases it is better to fully style such widgets through a
 * #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
 * priority.
 * @param state the state for which to set the color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_color()
 */
override_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the
 * cursor-color and secondary-cursor-color
 * style properties. All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * Note that the underlying properties have the #GdkColor type,
 * so the alpha value in `primary` and `secondary` will be ignored.
 * @param cursor the color to use for primary cursor (does not need to be     allocated), or %NULL to undo the effect of previous calls to     of gtk_widget_override_cursor().
 * @param secondary_cursor the color to use for secondary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_override_cursor().
 */
override_cursor(cursor?: (Gdk.RGBA | null), secondary_cursor?: (Gdk.RGBA | null)): void
/**
 * Sets the font to use for a widget. All other style values are
 * left untouched. See gtk_widget_override_color().
 * @param font_desc the font description to use, or %NULL to undo     the effect of previous calls to gtk_widget_override_font()
 */
override_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Sets a symbolic color for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color() for overriding the foreground
 * or background color.
 * @param name the name of the symbolic color to modify
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to gtk_widget_override_symbolic_color()
 */
override_symbolic_color(name: string, color?: (Gdk.RGBA | null)): void
/**
 * Obtains the full path to `widget`. The path is simply the name of a
 * widget and all its parents in the container hierarchy, separated by
 * periods. The name of a widget comes from
 * gtk_widget_get_name(). Paths are used to apply styles to a widget
 * in gtkrc configuration files. Widget names are the type of the
 * widget by default (e.g. “GtkButton”) or can be set to an
 * application-specific value with gtk_widget_set_name(). By setting
 * the name of a widget, you allow users or theme authors to apply
 * styles to that specific widget in their gtkrc
 * file. `path_reversed_p` fills in the path in reverse order,
 * i.e. starting with `widget’`s name instead of starting with the name
 * of `widget’`s outermost ancestor.
 */
path(): [number, string, string]
/**
 * This function is only for use in widget implementations.
 * 
 * Flags the widget for a rerun of the GtkWidgetClass::size_allocate
 * function. Use this function instead of gtk_widget_queue_resize()
 * when the `widget'`s size request didn't change but it wants to
 * reposition its contents.
 * 
 * An example user of this function is gtk_widget_set_halign().
 */
queue_allocate(): void
/**
 * Mark `widget` as needing to recompute its expand flags. Call
 * this function when setting legacy expand child properties
 * on the child of a container.
 * 
 * See gtk_widget_compute_expand().
 */
queue_compute_expand(): void
/**
 * Equivalent to calling gtk_widget_queue_draw_area() for the
 * entire area of a widget.
 */
queue_draw(): void
/**
 * Convenience function that calls gtk_widget_queue_draw_region() on
 * the region created from the given coordinates.
 * 
 * The region here is specified in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(), and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 * 
 * `width` or `height` may be 0, in this case this function does
 * nothing. Negative values for `width` and `height` are not allowed.
 * @param x x coordinate of upper-left corner of rectangle to redraw
 * @param y y coordinate of upper-left corner of rectangle to redraw
 * @param width width of region to draw
 * @param height height of region to draw
 */
queue_draw_area(x: number, y: number, width: number, height: number): void
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
queue_draw_region(region: cairo.Region): void
/**
 * This function is only for use in widget implementations.
 * Flags a widget to have its size renegotiated; should
 * be called when a widget for some reason has a new size request.
 * For example, when you change the text in a #GtkLabel, #GtkLabel
 * queues a resize to ensure there’s enough space for the new text.
 * 
 * Note that you cannot call gtk_widget_queue_resize() on a widget
 * from inside its implementation of the GtkWidgetClass::size_allocate
 * virtual method. Calls to gtk_widget_queue_resize() from inside
 * GtkWidgetClass::size_allocate will be silently ignored.
 */
queue_resize(): void
/**
 * This function works like gtk_widget_queue_resize(),
 * except that the widget is not invalidated.
 */
queue_resize_no_redraw(): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
realize(): void
/**
 * Computes the intersection of a `widget’`s area and `region,` returning
 * the intersection. The result may be empty, use cairo_region_is_empty() to
 * check.
 * @param region a #cairo_region_t, in the same coordinate system as          @widget->allocation. That is, relative to @widget->window          for widgets which return %FALSE from gtk_widget_get_has_window();          relative to the parent window of @widget->window otherwise.
 * @returns A newly allocated region holding the intersection of @widget     and @region.
 */
region_intersect(region: cairo.Region): cairo.Region
/**
 * Registers a #GdkWindow with the widget and sets it up so that
 * the widget receives events for it. Call gtk_widget_unregister_window()
 * when destroying the window.
 * 
 * Before 3.8 you needed to call gdk_window_set_user_data() directly to set
 * this up. This is now deprecated and you should use gtk_widget_register_window()
 * instead. Old code will keep working as is, although some new features like
 * transparency might not work perfectly.
 * @param window a #GdkWindow
 */
register_window(window: Gdk.Window): void
/**
 * Removes an accelerator from `widget,` previously installed with
 * gtk_widget_add_accelerator().
 * @param accel_group accel group for this widget
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @returns whether an accelerator was installed and could be removed
 */
remove_accelerator(accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType): boolean
/**
 * Removes a widget from the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
 * must have previously been added to the list with
 * gtk_widget_add_mnemonic_label().
 * @param label a #GtkWidget that was previously set as a mnemonic label for         @widget with gtk_widget_add_mnemonic_label().
 */
remove_mnemonic_label(label: Gtk.Widget): void
/**
 * Removes a tick callback previously registered with
 * gtk_widget_add_tick_callback().
 * @param id an id returned by gtk_widget_add_tick_callback()
 */
remove_tick_callback(id: number): void
/**
 * A convenience function that uses the theme settings for `widget`
 * to look up `stock_id` and render it to a pixbuf. `stock_id` should
 * be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size`
 * should be a size such as #GTK_ICON_SIZE_MENU. `detail` should be a
 * string that identifies the widget or code doing the rendering, so
 * that theme engines can special-case rendering for that widget or
 * code.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be
 * freed after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @param detail render detail to pass to theme engine
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon(stock_id: string, size: number, detail?: (string | null)): (GdkPixbuf.Pixbuf | null)
/**
 * A convenience function that uses the theme engine and style
 * settings for `widget` to look up `stock_id` and render it to
 * a pixbuf. `stock_id` should be a stock icon ID such as
 * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
 * such as #GTK_ICON_SIZE_MENU.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be freed
 * after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon_pixbuf(stock_id: string, size: number): (GdkPixbuf.Pixbuf | null)
/**
 * Moves a widget from one #GtkContainer to another, handling reference
 * count issues to avoid destroying the widget.
 * @param new_parent a #GtkContainer to move the widget into
 */
reparent(new_parent: Gtk.Widget): void
/**
 * Reset the styles of `widget` and all descendents, so when
 * they are looked up again, they get the correct values
 * for the currently loaded RC file settings.
 * 
 * This function is not useful for applications.
 */
reset_rc_styles(): void
/**
 * Updates the style context of `widget` and all descendants
 * by updating its widget path. #GtkContainers may want
 * to use this on a child when reordering it in a way that a different
 * style might apply to it. See also gtk_container_get_path_for_child().
 */
reset_style(): void
/**
 * Very rarely-used function. This function is used to emit
 * an expose event on a widget. This function is not normally used
 * directly. The only time it is used is when propagating an expose
 * event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
 * and that is normally done using gtk_container_propagate_draw().
 * 
 * If you want to force an area of a window to be redrawn,
 * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
 * To cause the redraw to be done immediately, follow that call
 * with a call to gdk_window_process_updates().
 * @param event a expose #GdkEvent
 * @returns return from the event signal emission (%TRUE if   the event was handled)
 */
send_expose(event: Gdk.Event): number
/**
 * Sends the focus change `event` to `widget`
 * 
 * This function is not meant to be used by applications. The only time it
 * should be used is when it is necessary for a #GtkWidget to assign focus
 * to a widget that is semantically owned by the first widget even though
 * it’s not a direct child - for instance, a search entry in a floating
 * window similar to the quick search in #GtkTreeView.
 * 
 * An example of its usage is:
 * 
 * 
 * ```c
 *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
 * 
 *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
 *   fevent->focus_change.in = TRUE;
 *   fevent->focus_change.window = _gtk_widget_get_window (widget);
 *   if (fevent->focus_change.window != NULL)
 *     g_object_ref (fevent->focus_change.window);
 * 
 *   gtk_widget_send_focus_change (widget, fevent);
 * 
 *   gdk_event_free (event);
 * ```
 * 
 * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
 * @returns the return value from the event signal emission: %TRUE   if the event was handled, and %FALSE otherwise
 */
send_focus_change(event: Gdk.Event): boolean
/**
 * Given an accelerator group, `accel_group,` and an accelerator path,
 * `accel_path,` sets up an accelerator in `accel_group` so whenever the
 * key binding that is defined for `accel_path` is pressed, `widget`
 * will be activated.  This removes any accelerators (for any
 * accelerator group) installed by previous calls to
 * gtk_widget_set_accel_path(). Associating accelerators with
 * paths allows them to be modified by the user and the modifications
 * to be saved for future use. (See gtk_accel_map_save().)
 * 
 * This function is a low level function that would most likely
 * be used by a menu creation system like #GtkUIManager. If you
 * use #GtkUIManager, setting up accelerator paths will be done
 * automatically.
 * 
 * Even when you you aren’t using #GtkUIManager, if you only want to
 * set up accelerators on menu items gtk_menu_item_set_accel_path()
 * provides a somewhat more convenient interface.
 * 
 * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
 * pass a static string, you can save some memory by interning it first with
 * g_intern_static_string().
 * @param accel_path path used to look up the accelerator
 * @param accel_group a #GtkAccelGroup.
 */
set_accel_path(accel_path?: (string | null), accel_group?: (Gtk.AccelGroup | null)): void
/**
 * Sets the widget’s allocation.  This should not be used
 * directly, but from within a widget’s size_allocate method.
 * 
 * The allocation set should be the “adjusted” or actual
 * allocation. If you’re implementing a #GtkContainer, you want to use
 * gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
 * The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
 * allocation inside gtk_widget_size_allocate() to create an adjusted
 * allocation.
 * @param allocation a pointer to a #GtkAllocation to copy from
 */
set_allocation(allocation: Gtk.Allocation): void
/**
 * Sets whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * This is a hint to the widget and does not affect the behavior of
 * the GTK+ core; many widgets ignore this flag entirely. For widgets
 * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
 * the effect is to suppress default themed drawing of the widget's
 * background. (Children of the widget will still be drawn.) The application
 * is then entirely responsible for drawing the widget background.
 * 
 * Note that the background is still drawn when the widget is mapped.
 * @param app_paintable %TRUE if the application will paint on the widget
 */
set_app_paintable(app_paintable: boolean): void
/**
 * Specifies whether `widget` can be a default widget. See
 * gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param can_default whether or not @widget can be a default widget.
 */
set_can_default(can_default: boolean): void
/**
 * Specifies whether `widget` can own the input focus. See
 * gtk_widget_grab_focus() for actually setting the input focus on a
 * widget.
 * @param can_focus whether or not @widget can own the input focus.
 */
set_can_focus(can_focus: boolean): void
/**
 * Sets whether `widget` should be mapped along with its when its parent
 * is mapped and `widget` has been shown with gtk_widget_show().
 * 
 * The child visibility can be set for widget before it is added to
 * a container with gtk_widget_set_parent(), to avoid mapping
 * children unnecessary before immediately unmapping them. However
 * it will be reset to its default state of %TRUE when the widget
 * is removed from a container.
 * 
 * Note that changing the child visibility of a widget does not
 * queue a resize on the widget. Most of the time, the size of
 * a widget is computed from all visible children, whether or
 * not they are mapped. If this is not the case, the container
 * can queue a resize itself.
 * 
 * This function is only useful for container implementations and
 * never should be called by an application.
 * @param is_visible if %TRUE, @widget should be mapped along with its parent.
 */
set_child_visible(is_visible: boolean): void
/**
 * Sets the widget’s clip.  This must not be used directly,
 * but from within a widget’s size_allocate method.
 * It must be called after gtk_widget_set_allocation() (or after chaining up
 * to the parent class), because that function resets the clip.
 * 
 * The clip set should be the area that `widget` draws on. If `widget` is a
 * #GtkContainer, the area must contain all children's clips.
 * 
 * If this function is not called by `widget` during a ::size-allocate handler,
 * the clip will be set to `widget'`s allocation.
 * @param clip a pointer to a #GtkAllocation to copy from
 */
set_clip(clip: Gtk.Allocation): void
/**
 * Sets a widgets composite name. The widget must be
 * a composite child of its parent; see gtk_widget_push_composite_child().
 * @param name the name to set
 */
set_composite_name(name: string): void
/**
 * Enables or disables a #GdkDevice to interact with `widget`
 * and all its children.
 * 
 * It does so by descending through the #GdkWindow hierarchy
 * and enabling the same mask that is has for core events
 * (i.e. the one that gdk_window_get_events() returns).
 * @param device a #GdkDevice
 * @param enabled whether to enable the device
 */
set_device_enabled(device: Gdk.Device, enabled: boolean): void
/**
 * Sets the device event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive from `device`. Keep
 * in mind that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_device_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with windowless widgets (which return
 * %FALSE from gtk_widget_get_has_window());
 * to get events on those widgets, place them inside a #GtkEventBox
 * and receive events on the event box.
 * @param device a #GdkDevice
 * @param events event mask
 */
set_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Sets the reading direction on a particular widget. This direction
 * controls the primary direction for widgets containing text,
 * and also the direction in which the children of a container are
 * packed. The ability to set the direction is present in order
 * so that correct localization into languages with right-to-left
 * reading directions can be done. Generally, applications will
 * let the default reading direction present, except for containers
 * where the containers are arranged in an order that is explicitly
 * visual rather than logical (such as buttons for text justification).
 * 
 * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
 * set by gtk_widget_set_default_direction() will be used.
 * @param dir the new direction
 */
set_direction(dir: Gtk.TextDirection): void
set_direction(...args: never[]): any
/**
 * Widgets are double buffered by default; you can use this function
 * to turn off the buffering. “Double buffered” simply means that
 * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
 * automatically around expose events sent to the
 * widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
 * window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
 * buffer to the screen. The result is that users see the window
 * update in one smooth step, and don’t see individual graphics
 * primitives being rendered.
 * 
 * In very simple terms, double buffered widgets don’t flicker,
 * so you would only use this function to turn off double buffering
 * if you had special needs and really knew what you were doing.
 * 
 * Note: if you turn off double-buffering, you have to handle
 * expose events, since even the clearing to the background color or
 * pixmap will not happen automatically (as it is done in
 * gdk_window_begin_draw_frame()).
 * 
 * In 3.10 GTK and GDK have been restructured for translucent drawing. Since
 * then expose events for double-buffered widgets are culled into a single
 * event to the toplevel GDK window. If you now unset double buffering, you
 * will cause a separate rendering pass for every widget. This will likely
 * cause rendering problems - in particular related to stacking - and usually
 * increases rendering times significantly.
 * @param double_buffered %TRUE to double-buffer a widget
 */
set_double_buffered(double_buffered: boolean): void
/**
 * Sets the event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive. Keep in mind
 * that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with widgets that have no window.
 * (See gtk_widget_get_has_window()).  To get events on those widgets,
 * place them inside a #GtkEventBox and receive events on the event
 * box.
 * @param events event mask
 */
set_events(events: number): void
/**
 * Sets whether the widget should grab focus when it is clicked with the mouse.
 * Making mouse clicks not grab focus is useful in places like toolbars where
 * you don’t want the keyboard focus removed from the main area of the
 * application.
 * @param focus_on_click whether the widget should grab focus when clicked with the mouse
 */
set_focus_on_click(focus_on_click: boolean): void
/**
 * Sets the font map to use for Pango rendering. When not set, the widget
 * will inherit the font map from its parent.
 * @param font_map a #PangoFontMap, or %NULL to unset any previously     set font map
 */
set_font_map(font_map?: (Pango.FontMap | null)): void
/**
 * Sets the #cairo_font_options_t used for Pango rendering in this widget.
 * When not set, the default font options for the #GdkScreen will be used.
 * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
 */
set_font_options(options?: (cairo.FontOptions | null)): void
/**
 * Sets the horizontal alignment of `widget`.
 * See the #GtkWidget:halign property.
 * @param align the horizontal alignment
 */
set_halign(align: Gtk.Align): void
/**
 * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
 * #GtkWidget:has-tooltip for more information.
 * @param has_tooltip whether or not @widget has a tooltip.
 */
set_has_tooltip(has_tooltip: boolean): void
/**
 * Specifies whether `widget` has a #GdkWindow of its own. Note that
 * all realized widgets have a non-%NULL “window” pointer
 * (gtk_widget_get_window() never returns a %NULL window when a widget
 * is realized), but for many of them it’s actually the #GdkWindow of
 * one of its parent widgets. Widgets that do not create a %window for
 * themselves in #GtkWidget::realize must announce this by
 * calling this function with `has_window` = %FALSE.
 * 
 * This function should only be called by widget implementations,
 * and they should call it in their init() function.
 * @param has_window whether or not @widget has a window.
 */
set_has_window(has_window: boolean): void
/**
 * Sets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Call this function to set the expand flag if you would like your
 * widget to become larger horizontally when the window has extra
 * room.
 * 
 * By default, widgets automatically expand if any of their children
 * want to expand. (To see if a widget will automatically expand given
 * its current children and state, call gtk_widget_compute_expand(). A
 * container can decide how the expandability of children affects the
 * expansion of the container by overriding the compute_expand virtual
 * method on #GtkWidget.).
 * 
 * Setting hexpand explicitly with this function will override the
 * automatic expand behavior.
 * 
 * This function forces the widget to expand or not to expand,
 * regardless of children.  The override occurs because
 * gtk_widget_set_hexpand() sets the hexpand-set property (see
 * gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
 * value to be used, rather than looking at children and widget state.
 * @param expand whether to expand
 */
set_hexpand(expand: boolean): void
/**
 * Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
 * be used.
 * 
 * The hexpand-set property will be set automatically when you call
 * gtk_widget_set_hexpand() to set hexpand, so the most likely
 * reason to use this function would be to unset an explicit expand
 * flag.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @param set value for hexpand-set property
 */
set_hexpand_set(set: boolean): void
/**
 * Marks the widget as being mapped.
 * 
 * This function should only ever be called in a derived widget's
 * “map” or “unmap” implementation.
 * @param mapped %TRUE to mark the widget as mapped
 */
set_mapped(mapped: boolean): void
/**
 * Sets the bottom margin of `widget`.
 * See the #GtkWidget:margin-bottom property.
 * @param margin the bottom margin
 */
set_margin_bottom(margin: number): void
/**
 * Sets the end margin of `widget`.
 * See the #GtkWidget:margin-end property.
 * @param margin the end margin
 */
set_margin_end(margin: number): void
/**
 * Sets the left margin of `widget`.
 * See the #GtkWidget:margin-left property.
 * @param margin the left margin
 */
set_margin_left(margin: number): void
/**
 * Sets the right margin of `widget`.
 * See the #GtkWidget:margin-right property.
 * @param margin the right margin
 */
set_margin_right(margin: number): void
/**
 * Sets the start margin of `widget`.
 * See the #GtkWidget:margin-start property.
 * @param margin the start margin
 */
set_margin_start(margin: number): void
/**
 * Sets the top margin of `widget`.
 * See the #GtkWidget:margin-top property.
 * @param margin the top margin
 */
set_margin_top(margin: number): void
/**
 * Widgets can be named, which allows you to refer to them from a
 * CSS file. You can apply a style to widgets with a particular name
 * in the CSS file. See the documentation for the CSS syntax (on the
 * same page as the docs for #GtkStyleContext).
 * 
 * Note that the CSS syntax has certain special characters to delimit
 * and represent elements in a selector (period, #, >, *...), so using
 * these will make your widget impossible to match by name. Any combination
 * of alphanumeric symbols, dashes and underscores will suffice.
 * @param name name for the widget
 */
set_name(name: string): void
/**
 * Sets the #GtkWidget:no-show-all property, which determines whether
 * calls to gtk_widget_show_all() will affect this widget.
 * 
 * This is mostly for use in constructing widget hierarchies with externally
 * controlled visibility, see #GtkUIManager.
 * @param no_show_all the new value for the “no-show-all” property
 */
set_no_show_all(no_show_all: boolean): void
/**
 * Request the `widget` to be rendered partially transparent,
 * with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
 * are clamped to the [0,1] range.).
 * This works on both toplevel widget, and child widgets, although there
 * are some limitations:
 * 
 * For toplevel widgets this depends on the capabilities of the windowing
 * system. On X11 this has any effect only on X screens with a compositing manager
 * running. See gtk_widget_is_composited(). On Windows it should work
 * always, although setting a window’s opacity after the window has been
 * shown causes it to flicker once on Windows.
 * 
 * For child widgets it doesn’t work if any affected widget has a native window, or
 * disables double buffering.
 * @param opacity desired opacity, between 0 and 1
 */
set_opacity(opacity: number): void
/**
 * This function is useful only when implementing subclasses of
 * #GtkContainer.
 * Sets the container as the parent of `widget,` and takes care of
 * some details such as updating the state and style of the child
 * to reflect its new location. The opposite function is
 * gtk_widget_unparent().
 * @param parent parent container
 */
set_parent(parent: Gtk.Widget): void
/**
 * Sets a non default parent window for `widget`.
 * 
 * For #GtkWindow classes, setting a `parent_window` effects whether
 * the window is a toplevel window or can be embedded into other
 * widgets.
 * 
 * For #GtkWindow classes, this needs to be called before the
 * window is realized.
 * @param parent_window the new parent window.
 */
set_parent_window(parent_window: Gdk.Window): void
/**
 * Marks the widget as being realized. This function must only be
 * called after all #GdkWindows for the `widget` have been created
 * and registered.
 * 
 * This function should only ever be called in a derived widget's
 * “realize” or “unrealize” implementation.
 * @param realized %TRUE to mark the widget as realized
 */
set_realized(realized: boolean): void
/**
 * Specifies whether `widget` will be treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param receives_default whether or not @widget can be a default widget.
 */
set_receives_default(receives_default: boolean): void
/**
 * Sets whether the entire widget is queued for drawing when its size
 * allocation changes. By default, this setting is %TRUE and
 * the entire widget is redrawn on every size change. If your widget
 * leaves the upper left unchanged when made bigger, turning this
 * setting off will improve performance.
 * 
 * Note that for widgets where gtk_widget_get_has_window() is %FALSE
 * setting this flag to %FALSE turns off all allocation on resizing:
 * the widget will not even redraw if its position changes; this is to
 * allow containers that don’t draw anything to avoid excess
 * invalidations. If you set this flag on a widget with no window that
 * does draw on `widget->`window, you are
 * responsible for invalidating both the old and new allocation of the
 * widget when the widget is moved and responsible for invalidating
 * regions newly when the widget increases size.
 * @param redraw_on_allocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
 */
set_redraw_on_allocate(redraw_on_allocate: boolean): void
/**
 * Sets the sensitivity of a widget. A widget is sensitive if the user
 * can interact with it. Insensitive widgets are “grayed out” and the
 * user can’t interact with them. Insensitive widgets are known as
 * “inactive”, “disabled”, or “ghosted” in some other toolkits.
 * @param sensitive %TRUE to make the widget sensitive
 */
set_sensitive(sensitive: boolean): void
/**
 * Sets the minimum size of a widget; that is, the widget’s size
 * request will be at least `width` by `height`. You can use this
 * function to force a widget to be larger than it normally would be.
 * 
 * In most cases, gtk_window_set_default_size() is a better choice for
 * toplevel windows than this function; setting the default size will
 * still allow users to shrink the window. Setting the size request
 * will force them to leave the window at least as large as the size
 * request. When dealing with window sizes,
 * gtk_window_set_geometry_hints() can be a useful function as well.
 * 
 * Note the inherent danger of setting any fixed size - themes,
 * translations into other languages, different fonts, and user action
 * can all change the appropriate size for a given widget. So, it's
 * basically impossible to hardcode a size that will always be
 * correct.
 * 
 * The size request of a widget is the smallest size a widget can
 * accept while still functioning well and drawing itself correctly.
 * However in some strange cases a widget may be allocated less than
 * its requested size, and in many cases a widget may be allocated more
 * space than it requested.
 * 
 * If the size request in a given direction is -1 (unset), then
 * the “natural” size request of the widget will be used instead.
 * 
 * The size request set here does not include any margin from the
 * #GtkWidget properties margin-left, margin-right, margin-top, and
 * margin-bottom, but it does include pretty much all other padding
 * or border properties set by any subclass of #GtkWidget.
 * @param width width @widget should request, or -1 to unset
 * @param height height @widget should request, or -1 to unset
 */
set_size_request(width: number, height: number): void
/**
 * This function is for use in widget implementations. Sets the state
 * of a widget (insensitive, prelighted, etc.) Usually you should set
 * the state using wrapper functions such as gtk_widget_set_sensitive().
 * @param state new state for @widget
 */
set_state(state: Gtk.StateType): void
/**
 * This function is for use in widget implementations. Turns on flag
 * values in the current widget state (insensitive, prelighted, etc.).
 * 
 * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
 * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
 * direction, use gtk_widget_set_direction().
 * 
 * It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
 * will be propagated down to all non-internal children if `widget` is a
 * #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
 * down to all #GtkContainer children by different means than turning on the
 * state flag down the hierarchy, both gtk_widget_get_state_flags() and
 * gtk_widget_is_sensitive() will make use of these.
 * @param flags State flags to turn on
 * @param clear Whether to clear state before turning on @flags
 */
set_state_flags(flags: Gtk.StateFlags, clear: boolean): void
/**
 * Used to set the #GtkStyle for a widget (`widget->`style). Since
 * GTK 3, this function does nothing, the passed in style is ignored.
 * @param style a #GtkStyle, or %NULL to remove the effect     of a previous call to gtk_widget_set_style() and go back to     the default style
 */
set_style(style?: (Gtk.Style | null)): void
/**
 * Enables or disables multiple pointer awareness. If this setting is %TRUE,
 * `widget` will start receiving multiple, per device enter/leave events. Note
 * that if custom #GdkWindows are created in #GtkWidget::realize,
 * gdk_window_set_support_multidevice() will have to be called manually on them.
 * @param support_multidevice %TRUE to support input from multiple devices.
 */
set_support_multidevice(support_multidevice: boolean): void
/**
 * Sets `markup` as the contents of the tooltip, which is marked up with
 *  the [Pango text markup language][PangoMarkupFormat].
 * 
 * This function will take care of setting #GtkWidget:has-tooltip to %TRUE
 * and of the default handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-markup property and
 * gtk_tooltip_set_markup().
 * @param markup the contents of the tooltip for @widget, or %NULL
 */
set_tooltip_markup(markup?: (string | null)): void
/**
 * Sets `text` as the contents of the tooltip. This function will take
 * care of setting #GtkWidget:has-tooltip to %TRUE and of the default
 * handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
 * @param text the contents of the tooltip for @widget
 */
set_tooltip_text(text?: (string | null)): void
/**
 * Replaces the default window used for displaying
 * tooltips with `custom_window`. GTK+ will take care of showing and
 * hiding `custom_window` at the right moment, to behave likewise as
 * the default tooltip window. If `custom_window` is %NULL, the default
 * tooltip window will be used.
 * @param custom_window a #GtkWindow, or %NULL
 */
set_tooltip_window(custom_window?: (Gtk.Window | null)): void
/**
 * Sets the vertical alignment of `widget`.
 * See the #GtkWidget:valign property.
 * @param align the vertical alignment
 */
set_valign(align: Gtk.Align): void
/**
 * Sets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_set_hexpand() for more detail.
 * @param expand whether to expand
 */
set_vexpand(expand: boolean): void
/**
 * Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
 * be used.
 * 
 * See gtk_widget_set_hexpand_set() for more detail.
 * @param set value for vexpand-set property
 */
set_vexpand_set(set: boolean): void
/**
 * Sets the visibility state of `widget`. Note that setting this to
 * %TRUE doesn’t mean the widget is actually viewable, see
 * gtk_widget_get_visible().
 * 
 * This function simply calls gtk_widget_show() or gtk_widget_hide()
 * but is nicer to use when the visibility of the widget depends on
 * some condition.
 * @param visible whether the widget should be shown or not
 */
set_visible(visible: boolean): void
/**
 * Sets the visual that should be used for by widget and its children for
 * creating #GdkWindows. The visual must be on the same #GdkScreen as
 * returned by gtk_widget_get_screen(), so handling the
 * #GtkWidget::screen-changed signal is necessary.
 * 
 * Setting a new `visual` will not cause `widget` to recreate its windows,
 * so you should call this function before `widget` is realized.
 * @param visual visual to be used or %NULL to unset a previous one
 */
set_visual(visual?: (Gdk.Visual | null)): void
/**
 * Sets a widget’s window. This function should only be used in a
 * widget’s #GtkWidget::realize implementation. The %window passed is
 * usually either new window created with gdk_window_new(), or the
 * window of its parent widget as returned by
 * gtk_widget_get_parent_window().
 * 
 * Widgets must indicate whether they will create their own #GdkWindow
 * by calling gtk_widget_set_has_window(). This is usually done in the
 * widget’s init() function.
 * 
 * Note that this function does not add any reference to `window`.
 * @param window a #GdkWindow
 */
set_window(window: Gdk.Window): void
/**
 * Sets a shape for this widget’s GDK window. This allows for
 * transparent windows etc., see gdk_window_shape_combine_region()
 * for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
show_all(): void
/**
 * Shows a widget. If the widget is an unmapped toplevel widget
 * (i.e. a #GtkWindow that has not yet been shown), enter the main
 * loop and wait for the window to actually be mapped. Be careful;
 * because the main loop is running, anything can happen during
 * this function.
 */
show_now(): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
size_allocate(allocation: Gtk.Allocation): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size,
 * position and (optionally) baseline to their child widgets.
 * 
 * In this function, the allocation and baseline may be adjusted. It
 * will be forced to a 1x1 minimum size, and the
 * adjust_size_allocation virtual and adjust_baseline_allocation
 * methods on the child will be used to adjust the allocation and
 * baseline. Standard adjustments include removing the widget's
 * margins, and applying the widget’s #GtkWidget:halign and
 * #GtkWidget:valign properties.
 * 
 * If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
 * baseline argument is ignored and -1 is used instead.
 * @param allocation position and size to be allocated to @widget
 * @param baseline The baseline of the child, or -1
 */
size_allocate_with_baseline(allocation: Gtk.Allocation, baseline: number): void
/**
 * This function is typically used when implementing a #GtkContainer
 * subclass.  Obtains the preferred size of a widget. The container
 * uses this information to arrange its child widgets and decide what
 * size allocations to give them with gtk_widget_size_allocate().
 * 
 * You can also call this function from an application, with some
 * caveats. Most notably, getting a size request requires the widget
 * to be associated with a screen, because font information may be
 * needed. Multihead-aware applications should keep this in mind.
 * 
 * Also remember that the size request is not necessarily the size
 * a widget will actually be allocated.
 */
size_request(): Gtk.Requisition
/**
 * This function attaches the widget’s #GtkStyle to the widget's
 * #GdkWindow. It is a replacement for
 * 
 * 
 * ```
 * widget->style = gtk_style_attach (widget->style, widget->window);
 * ```
 * 
 * 
 * and should only ever be called in a derived widget’s “realize”
 * implementation which does not chain up to its parent class'
 * “realize” implementation, because one of the parent classes
 * (finally #GtkWidget) would attach the style itself.
 */
style_attach(): void
/**
 * Gets the value of a style property of `widget`.
 * @param property_name the name of a style property
 * @param value location to return the property value
 */
style_get_property(property_name: string, value: GObject.Value): void
/**
 * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
 * This causes all queued #GtkWidget::child-notify signals on `widget` to be
 * emitted.
 */
thaw_child_notify(): void
/**
 * Translate coordinates relative to `src_widget’`s allocation to coordinates
 * relative to `dest_widget’`s allocations. In order to perform this
 * operation, both widgets must be realized, and must share a common
 * toplevel.
 * @param dest_widget a #GtkWidget
 * @param src_x X position relative to @src_widget
 * @param src_y Y position relative to @src_widget
 * @returns %FALSE if either widget was not realized, or there   was no common ancestor. In this case, nothing is stored in   *@dest_x and *@dest_y. Otherwise %TRUE.
 */
translate_coordinates(dest_widget: Gtk.Widget, src_x: number, src_y: number): [boolean, number, number]
/**
 * Triggers a tooltip query on the display where the toplevel of `widget`
 * is located. See gtk_tooltip_trigger_tooltip_query() for more
 * information.
 */
trigger_tooltip_query(): void
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
unmap(): void
/**
 * This function is only for use in widget implementations.
 * Should be called by implementations of the remove method
 * on #GtkContainer, to dissociate a child from the container.
 */
unparent(): void
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
unrealize(): void
/**
 * Unregisters a #GdkWindow from the widget that was previously set up with
 * gtk_widget_register_window(). You need to call this when the window is
 * no longer used by the widget, such as when you destroy it.
 * @param window a #GdkWindow
 */
unregister_window(window: Gdk.Window): void
/**
 * This function is for use in widget implementations. Turns off flag
 * values for the current widget state (insensitive, prelighted, etc.).
 * See gtk_widget_set_state_flags().
 * @param flags State flags to turn off
 */
unset_state_flags(flags: Gtk.StateFlags): void
vfunc_adjust_baseline_allocation(baseline: number): void
vfunc_adjust_baseline_request(minimum_baseline: number, natural_baseline: number): void
vfunc_adjust_size_allocation(orientation: Gtk.Orientation, minimum_size: number, natural_size: number, allocated_pos: number, allocated_size: number): void
vfunc_adjust_size_request(orientation: Gtk.Orientation, minimum_size: number, natural_size: number): void
vfunc_button_press_event(event: Gdk.EventButton): boolean
vfunc_button_release_event(event: Gdk.EventButton): boolean
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 */
vfunc_can_activate_accel(signal_id: number): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
vfunc_child_notify(child_property: GObject.ParamSpec): void
vfunc_composited_changed(): void
vfunc_compute_expand(hexpand_p: boolean, vexpand_p: boolean): void
vfunc_configure_event(event: Gdk.EventConfigure): boolean
vfunc_damage_event(event: Gdk.EventExpose): boolean
vfunc_delete_event(event: Gdk.EventAny): boolean
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
vfunc_destroy(): void
vfunc_destroy_event(event: Gdk.EventAny): boolean
vfunc_direction_changed(previous_direction: Gtk.TextDirection): void
vfunc_dispatch_child_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_drag_begin(context: Gdk.DragContext): void
vfunc_drag_data_delete(context: Gdk.DragContext): void
vfunc_drag_data_get(context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_data_received(context: Gdk.DragContext, x: number, y: number, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_drop(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_drag_end(context: Gdk.DragContext): void
vfunc_drag_failed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
vfunc_drag_leave(context: Gdk.DragContext, time_: number): void
vfunc_drag_motion(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_draw(cr: cairo.Context): boolean
vfunc_enter_notify_event(event: Gdk.EventCrossing): boolean
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 */
vfunc_event(event: Gdk.Event): boolean
vfunc_focus(direction: Gtk.DirectionType): boolean
vfunc_focus_in_event(event: Gdk.EventFocus): boolean
vfunc_focus_out_event(event: Gdk.EventFocus): boolean
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 */
vfunc_get_accessible(): Atk.Object
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
vfunc_get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
vfunc_get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
vfunc_get_preferred_width_for_height(height: number): [number, number]
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 */
vfunc_get_request_mode(): Gtk.SizeRequestMode
vfunc_grab_broken_event(event: Gdk.EventGrabBroken): boolean
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
vfunc_grab_focus(): void
vfunc_grab_notify(was_grabbed: boolean): void
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
vfunc_hide(): void
vfunc_hierarchy_changed(previous_toplevel: Gtk.Widget): void
vfunc_key_press_event(event: Gdk.EventKey): boolean
vfunc_key_release_event(event: Gdk.EventKey): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 */
vfunc_keynav_failed(direction: Gtk.DirectionType): boolean
vfunc_leave_notify_event(event: Gdk.EventCrossing): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
vfunc_map(): void
vfunc_map_event(event: Gdk.EventAny): boolean
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 */
vfunc_mnemonic_activate(group_cycling: boolean): boolean
vfunc_motion_notify_event(event: Gdk.EventMotion): boolean
vfunc_move_focus(direction: Gtk.DirectionType): void
vfunc_parent_set(previous_parent: Gtk.Widget): void
vfunc_popup_menu(): boolean
vfunc_property_notify_event(event: Gdk.EventProperty): boolean
vfunc_proximity_in_event(event: Gdk.EventProximity): boolean
vfunc_proximity_out_event(event: Gdk.EventProximity): boolean
vfunc_query_tooltip(x: number, y: number, keyboard_tooltip: boolean, tooltip: Gtk.Tooltip): boolean
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
vfunc_queue_draw_region(region: cairo.Region): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
vfunc_realize(): void
vfunc_screen_changed(previous_screen: Gdk.Screen): void
vfunc_scroll_event(event: Gdk.EventScroll): boolean
vfunc_selection_clear_event(event: Gdk.EventSelection): boolean
vfunc_selection_get(selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_selection_notify_event(event: Gdk.EventSelection): boolean
vfunc_selection_received(selection_data: Gtk.SelectionData, time_: number): void
vfunc_selection_request_event(event: Gdk.EventSelection): boolean
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
vfunc_show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
vfunc_show_all(): void
vfunc_show_help(help_type: Gtk.WidgetHelpType): boolean
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
vfunc_size_allocate(allocation: Gtk.Allocation): void
vfunc_state_changed(previous_state: Gtk.StateType): void
vfunc_state_flags_changed(previous_state_flags: Gtk.StateFlags): void
vfunc_style_set(previous_style: Gtk.Style): void
vfunc_style_updated(): void
vfunc_touch_event(event: Gdk.EventTouch): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
vfunc_unmap(): void
vfunc_unmap_event(event: Gdk.EventAny): boolean
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
vfunc_unrealize(): void
vfunc_visibility_notify_event(event: Gdk.EventVisibility): boolean
vfunc_window_state_event(event: Gdk.EventWindowState): boolean
}

module MenuManager {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {

    }

}

/**
 * The goal of #DzlMenuManager is to simplify the process of merging multiple
 * GtkBuilder .ui files containing menus into a single representation of the
 * application menus. Additionally, it provides the ability to "unmerge"
 * previously merged menus.
 * 
 * This allows for an application to have plugins which seemlessly extends
 * the core application menus.
 * 
 * Implementation notes:
 * 
 * To make this work, we don't use the GMenu instances created by a GtkBuilder
 * instance. Instead, we create the menus ourself and recreate section and
 * submenu links. This allows the #DzlMenuManager to be in full control of
 * the generated menus.
 * 
 * dzl_menu_manager_get_menu_by_id() will always return a #GMenu, however
 * that menu may contain no children until something has extended it later
 * on during the application process.
 */
class MenuManager extends GObject.Object {

    // Constructors of Dazzle.MenuManager


constructor(properties?: Partial<MenuManager.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): MenuManager;

    // Own methods of Dazzle.MenuManager

    add_filename(filename: string): number
    add_resource(resource: string): number
    get_menu_by_id(menu_id: string): Gio.Menu
    merge(menu_id: string, model: Gio.MenuModel): number
    /**
     * This removes items from menus that were added as part of a previous
     * menu merge. Use the value returned from dzl_menu_manager_merge() as
     * the `merge_id`.
     * @param merge_id A previously registered merge id
     */
    remove(merge_id: number): void
}

module MultiPaned {

    // Signal callback interfaces

    interface ResizeDragBegin {
        (object: Gtk.Widget): void
    }

    interface ResizeDragEnd {
        (object: Gtk.Widget): void
    }


    // Constructor properties interface

    interface ConstructorProps extends Gtk.Container.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.Orientable.ConstructorProps {
orientation: Gtk.Orientation;
    }

}

/**
 * This widget is similar to #GtkPaned except that it allows adding more than
 * two children to the widget. For each additional child added to the
 * #DzlMultiPaned, an additional resize grip is added.
 */
class MultiPaned extends Gtk.Container implements Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Dazzle.MultiPaned

    get orientation(): Gtk.Orientation;
    set orientation(val: Gtk.Orientation);

    // Constructors of Dazzle.MultiPaned


constructor(properties?: Partial<MultiPaned.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): MultiPaned;

    // Own signals of Dazzle.MultiPaned

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'resize-drag-begin', callback: ((_source: this, object: Gtk.Widget) => void)): number
    connect_after(signal: 'resize-drag-begin', callback: ((_source: this, object: Gtk.Widget) => void)): number
    emit(signal: 'resize-drag-begin', object: Gtk.Widget): void
    connect(signal: 'resize-drag-end', callback: ((_source: this, object: Gtk.Widget) => void)): number
    connect_after(signal: 'resize-drag-end', callback: ((_source: this, object: Gtk.Widget) => void)): number
    emit(signal: 'resize-drag-end', object: Gtk.Widget): void

    // Own virtual methods of Dazzle.MultiPaned

    vfunc_resize_drag_begin(child: Gtk.Widget): void
    vfunc_resize_drag_end(child: Gtk.Widget): void

    // Own methods of Dazzle.MultiPaned

    /**
     * Locates the widget at position x,y within widget.
     * 
     * `x` and `y` should be relative to `self`.
     * @param x x coordinate
     * @param y y coordinate
     * @returns a #GtkWidget or %NULL
     */
    get_at_point(x: number, y: number): (Gtk.Widget | null)
    get_n_children(): number
    /**
     * Gets the `nth` child of the #DzlMultiPaned.
     * 
     * It is an error to call this function with a value >= the result of
     * dzl_multi_paned_get_nth_child().
     * 
     * The index starts from 0.
     * @param nth 
     * @returns A #GtkWidget
     */
    get_nth_child(nth: number): Gtk.Widget

// Inherited methods
/**
 * Retrieves the orientation of the `orientable`.
 * @returns the orientation of the @orientable.
 */
get_orientation(): Gtk.Orientation
/**
 * Sets the orientation of the `orientable`.
 * @param orientation the orientable’s new orientation.
 */
set_orientation(orientation: Gtk.Orientation): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module Path {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {

    }

}

class Path extends GObject.Object {

    // Constructors of Dazzle.Path


constructor(properties?: Partial<Path.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): Path;

    // Own methods of Dazzle.Path

    append(element: PathElement): void
    /**
     * Gets the path element found at `index`.
     * 
     * Indexes start from zero.
     * @param index 
     * @returns An #DzlPathElement.
     */
    get_element(index: number): (PathElement | null)
    get_elements(): PathElement[]
    get_length(): number
    has_prefix(prefix: Path): boolean
    is_empty(): boolean
    prepend(element: PathElement): void
    printf(): string
}

module PathBar {

    // Signal callback interfaces

    interface ElementSelected {
        (object: Path, p0: PathElement): void
    }

    interface PopulateMenu {
        (object: Path, p0: PathElement, p1: Gio.Menu): void
    }


    // Constructor properties interface

    interface ConstructorProps extends Gtk.Box.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.Orientable.ConstructorProps {
path: Path | any;
    }

}

class PathBar extends Gtk.Box implements Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Dazzle.PathBar

// This accessor conflicts with a property or field in a parent class or interface.
     path: Path | any;

    // Constructors of Dazzle.PathBar


constructor(properties?: Partial<PathBar.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): PathBar;

    // Own signals of Dazzle.PathBar

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'element-selected', callback: ((_source: this, object: Path, p0: PathElement) => void)): number
    connect_after(signal: 'element-selected', callback: ((_source: this, object: Path, p0: PathElement) => void)): number
    emit(signal: 'element-selected', object: Path, p0: PathElement): void
    connect(signal: 'populate-menu', callback: ((_source: this, object: Path, p0: PathElement, p1: Gio.Menu) => void)): number
    connect_after(signal: 'populate-menu', callback: ((_source: this, object: Path, p0: PathElement, p1: Gio.Menu) => void)): number
    emit(signal: 'populate-menu', object: Path, p0: PathElement, p1: Gio.Menu): void

    // Own methods of Dazzle.PathBar

    /**
     * Gets the path for the view.
     * @returns A #DzlPath.
     */
    get_path(): Path
    get_path(...args: never[]): any
    set_path(path: Path): void
    set_selected_index(index: number): void

// Inherited properties
/**
 * The orientation of the orientable.
 */
get orientation(): Gtk.Orientation;
set orientation(val: Gtk.Orientation);

// Inherited methods
/**
 * Retrieves the orientation of the `orientable`.
 * @returns the orientation of the @orientable.
 */
get_orientation(): Gtk.Orientation
/**
 * Sets the orientation of the `orientable`.
 * @param orientation the orientable’s new orientation.
 */
set_orientation(orientation: Gtk.Orientation): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module PathElement {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
icon_name: string;
    iconName: string;
    id: string;
    title: string;
    }

}

class PathElement extends GObject.Object {

    // Own properties of Dazzle.PathElement

    /**
     * The icon-name of the icon to display next to the path element
     * in the path bar. Set to %NULL for no icon.
     */
    get icon_name(): string;
    /**
     * The icon-name of the icon to display next to the path element
     * in the path bar. Set to %NULL for no icon.
     */
    get iconName(): string;
    /**
     * The id property is an application specific identifier for the
     * element within the path.
     */
    get id(): string;
    /**
     * The title property should contain the display text that should
     * be shown to represent the element in the #DzlPathBar.
     */
    get title(): string;

    // Constructors of Dazzle.PathElement


constructor(properties?: Partial<PathElement.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](id: (string | null), icon_name: (string | null), title: string): PathElement;

    // Own methods of Dazzle.PathElement

    /**
     * Gets the #DzlPathElement:icon-name property. This is used by the
     * path bar to display an icon next to the element of the path.
     * @returns The icon-name for the #DzlPathElement.
     */
    get_icon_name(): (string | null)
    /**
     * Gets the id for the element. Generally, a path is built of
     * multiple elements and each element should have an id that
     * is useful to the application that it using it. You might store
     * the name of a directory, or some other key as the id.
     * @returns The id for the #DzlPathElement.
     */
    get_id(): string
    /**
     * Gets the #DzlPathElement:title property. This is used by the
     * path bar to display text representing the element of the path.
     * @returns The title for the #DzlPathElement.
     */
    get_title(): (string | null)
}

module PillBox {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.EventBox.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
label: string;
    }

}

class PillBox extends Gtk.EventBox implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.PillBox

    get label(): string;
    set label(val: string);

    // Constructors of Dazzle.PillBox


constructor(properties?: Partial<PillBox.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](label: string): PillBox;
// Conflicted with Gtk.EventBox.new

static ["new"](...args: never[]): any;

    // Own methods of Dazzle.PillBox

    get_label(): string
    set_label(label: string): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module PreferencesBin {

    // Signal callback interfaces

    interface PreferenceActivated {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProps extends Gtk.Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
keywords: string;
    path: string | any;
    priority: number;
    schema_id: string;
    schemaId: string;
    }

}

class PreferencesBin extends Gtk.Bin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.PreferencesBin

    get keywords(): string;
// This accessor conflicts with a property or field in a parent class or interface.
     path: string | any;
    get priority(): number;
    get schema_id(): string;
    get schemaId(): string;

    // Constructors of Dazzle.PreferencesBin


constructor(properties?: Partial<PreferencesBin.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own signals of Dazzle.PreferencesBin

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'preference-activated', callback: ((_source: this) => void)): number
    connect_after(signal: 'preference-activated', callback: ((_source: this) => void)): number
    emit(signal: 'preference-activated'): void

    // Own virtual methods of Dazzle.PreferencesBin

    vfunc_connect(settings: Gio.Settings): void
    vfunc_disconnect(settings: Gio.Settings): void
    vfunc_matches(spec: PatternSpec): boolean

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module PreferencesEntry {

    // Signal callback interfaces

    interface Activate {
        (): void
    }

    interface Changed {
        (object: string): void
    }


    // Constructor properties interface

    interface ConstructorProps extends PreferencesBin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
text: string;
    title: string;
    }

}

class PreferencesEntry extends PreferencesBin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.PreferencesEntry

    get text(): string;
    set text(val: string);
    get title(): string;
    set title(val: string);

    // Constructors of Dazzle.PreferencesEntry


constructor(properties?: Partial<PreferencesEntry.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own signals of Dazzle.PreferencesEntry

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'activate', callback: ((_source: this) => void)): number
    connect_after(signal: 'activate', callback: ((_source: this) => void)): number
    emit(signal: 'activate'): void
    connect(signal: 'changed', callback: ((_source: this, object: string) => void)): number
    connect_after(signal: 'changed', callback: ((_source: this, object: string) => void)): number
    emit(signal: 'changed', object: string): void

    // Own methods of Dazzle.PreferencesEntry

    get_entry_widget(): Gtk.Widget
    get_title_widget(): Gtk.Widget

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module PreferencesFileChooserButton {

    // Constructor properties interface

    interface ConstructorProps extends PreferencesBin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
action: Gtk.FileChooserAction;
    key: string;
    subtitle: string;
    title: string;
    }

}

class PreferencesFileChooserButton extends PreferencesBin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.PreferencesFileChooserButton

    get action(): Gtk.FileChooserAction;
    get key(): string;
    get subtitle(): string;
    get title(): string;

    // Constructors of Dazzle.PreferencesFileChooserButton


constructor(properties?: Partial<PreferencesFileChooserButton.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module PreferencesFlowBox {

    // Constructor properties interface

    interface ConstructorProps extends ColumnLayout.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {

    }

}

class PreferencesFlowBox extends ColumnLayout implements Atk.ImplementorIface, Gtk.Buildable {

    // Constructors of Dazzle.PreferencesFlowBox


constructor(properties?: Partial<PreferencesFlowBox.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): PreferencesFlowBox;

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module PreferencesFontButton {

    // Signal callback interfaces

    interface Activate {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProps extends PreferencesBin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
key: string;
    title: string;
    }

}

class PreferencesFontButton extends PreferencesBin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.PreferencesFontButton

    get key(): string;
    get title(): string;

    // Constructors of Dazzle.PreferencesFontButton


constructor(properties?: Partial<PreferencesFontButton.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own signals of Dazzle.PreferencesFontButton

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'activate', callback: ((_source: this) => void)): number
    connect_after(signal: 'activate', callback: ((_source: this) => void)): number
    emit(signal: 'activate'): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module PreferencesGroup {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
is_list: boolean;
    isList: boolean;
    mode: Gtk.SelectionMode;
    priority: number;
    title: string;
    }

}

class PreferencesGroup extends Gtk.Bin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.PreferencesGroup

    get is_list(): boolean;
    get isList(): boolean;
    get mode(): Gtk.SelectionMode;
    set mode(val: Gtk.SelectionMode);
    get priority(): number;
    get title(): string;

    // Constructors of Dazzle.PreferencesGroup


constructor(properties?: Partial<PreferencesGroup.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own methods of Dazzle.PreferencesGroup

    add(widget: Gtk.Widget): void
    get_priority(): number
    /**
     * Gets a size group that can be used to organize items in
     * a group based on columns.
     * @param column 
     * @returns a #GtkSizeGroup
     */
    get_size_group(column: number): Gtk.SizeGroup
    get_title(): string
    refilter(spec: PatternSpec): number
    set_map(map: GLib.HashTable<any, any>): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module PreferencesPage {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
priority: number;
    }

}

class PreferencesPage extends Gtk.Bin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.PreferencesPage

    get priority(): number;
    set priority(val: number);

    // Constructors of Dazzle.PreferencesPage


constructor(properties?: Partial<PreferencesPage.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own methods of Dazzle.PreferencesPage

    add_group(group: PreferencesGroup): void
    get_group(group_name: string): (PreferencesGroup | null)
    refilter(spec: PatternSpec): void
    set_map(map: GLib.HashTable<any, any>): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module PreferencesSpinButton {

    // Signal callback interfaces

    interface Activate {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProps extends PreferencesBin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
key: string;
    subtitle: string;
    title: string;
    }

}

class PreferencesSpinButton extends PreferencesBin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.PreferencesSpinButton

    get key(): string;
    get subtitle(): string;
    get title(): string;

    // Constructors of Dazzle.PreferencesSpinButton


constructor(properties?: Partial<PreferencesSpinButton.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own signals of Dazzle.PreferencesSpinButton

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'activate', callback: ((_source: this) => void)): number
    connect_after(signal: 'activate', callback: ((_source: this) => void)): number
    emit(signal: 'activate'): void

    // Own methods of Dazzle.PreferencesSpinButton

    get_spin_button(): Gtk.Widget

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module PreferencesSwitch {

    // Signal callback interfaces

    interface Activated {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProps extends PreferencesBin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
is_radio: boolean;
    isRadio: boolean;
    key: string;
    subtitle: string;
    target: GLib.Variant;
    title: string;
    }

}

class PreferencesSwitch extends PreferencesBin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.PreferencesSwitch

    get is_radio(): boolean;
    get isRadio(): boolean;
    get key(): string;
    get subtitle(): string;
    set subtitle(val: string);
    get target(): GLib.Variant;
    get title(): string;
    set title(val: string);

    // Constructors of Dazzle.PreferencesSwitch


constructor(properties?: Partial<PreferencesSwitch.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own signals of Dazzle.PreferencesSwitch

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'activated', callback: ((_source: this) => void)): number
    connect_after(signal: 'activated', callback: ((_source: this) => void)): number
    emit(signal: 'activated'): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module PreferencesView {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Preferences.ConstructorProps, Gtk.Buildable.ConstructorProps {
show_search_entry: boolean;
    showSearchEntry: boolean;
    use_sidebar: boolean;
    useSidebar: boolean;
    }

}

class PreferencesView extends Gtk.Bin implements Atk.ImplementorIface, Preferences, Gtk.Buildable {

    // Own properties of Dazzle.PreferencesView

    get show_search_entry(): boolean;
    set show_search_entry(val: boolean);
    get showSearchEntry(): boolean;
    set showSearchEntry(val: boolean);
    get use_sidebar(): boolean;
    set use_sidebar(val: boolean);
    get useSidebar(): boolean;
    set useSidebar(val: boolean);

    // Constructors of Dazzle.PreferencesView


constructor(properties?: Partial<PreferencesView.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): PreferencesView;

    // Own methods of Dazzle.PreferencesView

    get_show_search_entry(): boolean
    get_use_sidebar(): boolean
    reapply_filter(): void
    set_show_search_entry(show_search_entry: boolean): void
    set_use_sidebar(use_sidebar: boolean): void

// Inherited methods
add_custom(page_name: string, group_name: string, widget: Gtk.Widget, keywords: (string | null), priority: number): number
add_file_chooser(page_name: string, group_name: string, schema_id: string, key: string, path: string, title: string, subtitle: string, action: Gtk.FileChooserAction, keywords: string, priority: number): number
add_font_button(page_name: string, group_name: string, schema_id: string, key: string, title: string, keywords: string, priority: number): number
add_group(page_name: string, group_name: string, title: string, priority: number): void
add_list_group(page_name: string, group_name: string, title: string, mode: Gtk.SelectionMode, priority: number): void
add_page(page_name: string, title: string, priority: number): void
add_radio(page_name: string, group_name: string, schema_id: string, key: string, path: (string | null), variant_string: (string | null), title: (string | null), subtitle: (string | null), keywords: (string | null), priority: number): number
add_spin_button(page_name: string, group_name: string, schema_id: string, key: string, path: string, title: string, subtitle: string, keywords: string, priority: number): number
add_switch(page_name: string, group_name: string, schema_id: string, key: string, path: (string | null), variant_string: (string | null), title: (string | null), subtitle: (string | null), keywords: (string | null), priority: number): number
get_widget(widget_id: number): (Gtk.Widget | null)
remove_id(widget_id: number): boolean
set_page(page_name: string, map: GLib.HashTable<any, any>): void
vfunc_add_custom(page_name: string, group_name: string, widget: Gtk.Widget, keywords: (string | null), priority: number): number
vfunc_add_file_chooser(page_name: string, group_name: string, schema_id: string, key: string, path: string, title: string, subtitle: string, action: Gtk.FileChooserAction, keywords: string, priority: number): number
vfunc_add_font_button(page_name: string, group_name: string, schema_id: string, key: string, title: string, keywords: string, priority: number): number
vfunc_add_group(page_name: string, group_name: string, title: string, priority: number): void
vfunc_add_list_group(page_name: string, group_name: string, title: string, mode: Gtk.SelectionMode, priority: number): void
vfunc_add_page(page_name: string, title: string, priority: number): void
vfunc_add_radio(page_name: string, group_name: string, schema_id: string, key: string, path: (string | null), variant_string: (string | null), title: (string | null), subtitle: (string | null), keywords: (string | null), priority: number): number
vfunc_add_spin_button(page_name: string, group_name: string, schema_id: string, key: string, path: string, title: string, subtitle: string, keywords: string, priority: number): number
vfunc_add_switch(page_name: string, group_name: string, schema_id: string, key: string, path: (string | null), variant_string: (string | null), title: (string | null), subtitle: (string | null), keywords: (string | null), priority: number): number
vfunc_get_widget(widget_id: number): (Gtk.Widget | null)
vfunc_remove_id(widget_id: number): boolean
vfunc_set_page(page_name: string, map: GLib.HashTable<any, any>): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module PriorityBox {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Box.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.Orientable.ConstructorProps {

    }

}

/**
 * This is like a #GtkBox but uses stable priorities to sort.
 */
class PriorityBox extends Gtk.Box implements Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Constructors of Dazzle.PriorityBox


constructor(properties?: Partial<PriorityBox.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): PriorityBox;

// Inherited properties
/**
 * The orientation of the orientable.
 */
get orientation(): Gtk.Orientation;
set orientation(val: Gtk.Orientation);

// Inherited methods
/**
 * Retrieves the orientation of the `orientable`.
 * @returns the orientation of the @orientable.
 */
get_orientation(): Gtk.Orientation
/**
 * Sets the orientation of the `orientable`.
 * @param orientation the orientable’s new orientation.
 */
set_orientation(orientation: Gtk.Orientation): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ProgressButton {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Button.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Actionable.ConstructorProps, Gtk.Activatable.ConstructorProps, Gtk.Buildable.ConstructorProps {
progress: number;
    show_progress: boolean;
    showProgress: boolean;
    }

}

class ProgressButton extends Gtk.Button implements Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {

    // Own properties of Dazzle.ProgressButton

    get progress(): number;
    set progress(val: number);
    get show_progress(): boolean;
    set show_progress(val: boolean);
    get showProgress(): boolean;
    set showProgress(val: boolean);

    // Constructors of Dazzle.ProgressButton


constructor(properties?: Partial<ProgressButton.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): ProgressButton;

    // Own methods of Dazzle.ProgressButton

    get_progress(): number
    get_show_progress(): boolean
    set_progress(percentage: number): void
    set_show_progress(show_progress: boolean): void

// Inherited properties
get action_name(): string;
set action_name(val: string);
get actionName(): string;
set actionName(val: string);
get action_target(): GLib.Variant;
set action_target(val: GLib.Variant);
get actionTarget(): GLib.Variant;
set actionTarget(val: GLib.Variant);
/**
 * The action that this activatable will activate and receive
 * updates from for various states and possibly appearance.
 * 
 * > #GtkActivatable implementors need to handle the this property and
 * > call gtk_activatable_do_set_related_action() when it changes.
 */
get related_action(): Gtk.Action;
set related_action(val: Gtk.Action);
/**
 * The action that this activatable will activate and receive
 * updates from for various states and possibly appearance.
 * 
 * > #GtkActivatable implementors need to handle the this property and
 * > call gtk_activatable_do_set_related_action() when it changes.
 */
get relatedAction(): Gtk.Action;
set relatedAction(val: Gtk.Action);
/**
 * Whether this activatable should reset its layout
 * and appearance when setting the related action or when
 * the action changes appearance.
 * 
 * See the #GtkAction documentation directly to find which properties
 * should be ignored by the #GtkActivatable when this property is %FALSE.
 * 
 * > #GtkActivatable implementors need to handle this property
 * > and call gtk_activatable_sync_action_properties() on the activatable
 * > widget when it changes.
 */
get use_action_appearance(): boolean;
set use_action_appearance(val: boolean);
/**
 * Whether this activatable should reset its layout
 * and appearance when setting the related action or when
 * the action changes appearance.
 * 
 * See the #GtkAction documentation directly to find which properties
 * should be ignored by the #GtkActivatable when this property is %FALSE.
 * 
 * > #GtkActivatable implementors need to handle this property
 * > and call gtk_activatable_sync_action_properties() on the activatable
 * > widget when it changes.
 */
get useActionAppearance(): boolean;
set useActionAppearance(val: boolean);
get app_paintable(): boolean;
set app_paintable(val: boolean);
get appPaintable(): boolean;
set appPaintable(val: boolean);
get can_default(): boolean;
set can_default(val: boolean);
get canDefault(): boolean;
set canDefault(val: boolean);
get can_focus(): boolean;
set can_focus(val: boolean);
get canFocus(): boolean;
set canFocus(val: boolean);
get composite_child(): boolean;
get compositeChild(): boolean;
/**
 * Whether the widget is double buffered.
 */
get double_buffered(): boolean;
set double_buffered(val: boolean);
/**
 * Whether the widget is double buffered.
 */
get doubleBuffered(): boolean;
set doubleBuffered(val: boolean);
get events(): Gdk.EventMask;
set events(val: Gdk.EventMask);
/**
 * Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
 */
get expand(): boolean;
set expand(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focus_on_click(): boolean;
set focus_on_click(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focusOnClick(): boolean;
set focusOnClick(val: boolean);
/**
 * How to distribute horizontal space if widget gets extra space, see #GtkAlign
 */
get halign(): Gtk.Align;
set halign(val: Gtk.Align);
get has_default(): boolean;
set has_default(val: boolean);
get hasDefault(): boolean;
set hasDefault(val: boolean);
get has_focus(): boolean;
set has_focus(val: boolean);
get hasFocus(): boolean;
set hasFocus(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get has_tooltip(): boolean;
set has_tooltip(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get hasTooltip(): boolean;
set hasTooltip(val: boolean);
get height_request(): number;
set height_request(val: number);
get heightRequest(): number;
set heightRequest(val: number);
/**
 * Whether to expand horizontally. See gtk_widget_set_hexpand().
 */
get hexpand(): boolean;
set hexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpand_set(): boolean;
set hexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpandSet(): boolean;
set hexpandSet(val: boolean);
get is_focus(): boolean;
set is_focus(val: boolean);
get isFocus(): boolean;
set isFocus(val: boolean);
/**
 * Sets all four sides' margin at once. If read, returns max
 * margin on any side.
 */
get margin(): number;
set margin(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_bottom(): number;
set margin_bottom(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginBottom(): number;
set marginBottom(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_end(): number;
set margin_end(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginEnd(): number;
set marginEnd(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_left(): number;
set margin_left(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginLeft(): number;
set marginLeft(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_right(): number;
set margin_right(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginRight(): number;
set marginRight(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_start(): number;
set margin_start(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginStart(): number;
set marginStart(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_top(): number;
set margin_top(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginTop(): number;
set marginTop(val: number);
get name(): string;
set name(val: string);
get no_show_all(): boolean;
set no_show_all(val: boolean);
get noShowAll(): boolean;
set noShowAll(val: boolean);
/**
 * The requested opacity of the widget. See gtk_widget_set_opacity() for
 * more details about window opacity.
 * 
 * Before 3.8 this was only available in GtkWindow
 */
get opacity(): number;
set opacity(val: number);
get parent(): Gtk.Container;
set parent(val: Gtk.Container);
get receives_default(): boolean;
set receives_default(val: boolean);
get receivesDefault(): boolean;
set receivesDefault(val: boolean);
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scale_factor(): number;
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scaleFactor(): number;
get sensitive(): boolean;
set sensitive(val: boolean);
/**
 * The style of the widget, which contains information about how it will look (colors, etc).
 */
get style(): Gtk.Style;
set style(val: Gtk.Style);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_markup(): string;
set tooltip_markup(val: string);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipMarkup(): string;
set tooltipMarkup(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_text(): string;
set tooltip_text(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipText(): string;
set tooltipText(val: string);
/**
 * How to distribute vertical space if widget gets extra space, see #GtkAlign
 */
get valign(): Gtk.Align;
set valign(val: Gtk.Align);
/**
 * Whether to expand vertically. See gtk_widget_set_vexpand().
 */
get vexpand(): boolean;
set vexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpand_set(): boolean;
set vexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpandSet(): boolean;
set vexpandSet(val: boolean);
get visible(): boolean;
set visible(val: boolean);
get width_request(): number;
set width_request(val: number);
get widthRequest(): number;
set widthRequest(val: number);
/**
 * The widget's window if it is realized, %NULL otherwise.
 */
get window(): Gdk.Window;

// Inherited methods
/**
 * Gets the action name for `actionable`.
 * 
 * See gtk_actionable_set_action_name() for more information.
 * @returns the action name, or %NULL if none is set
 */
get_action_name(): (string | null)
/**
 * Gets the current target value of `actionable`.
 * 
 * See gtk_actionable_set_action_target_value() for more information.
 * @returns the current target value
 */
get_action_target_value(): GLib.Variant
/**
 * Specifies the name of the action with which this widget should be
 * associated.  If `action_name` is %NULL then the widget will be
 * unassociated from any previous action.
 * 
 * Usually this function is used when the widget is located (or will be
 * located) within the hierarchy of a #GtkApplicationWindow.
 * 
 * Names are of the form “win.save” or “app.quit” for actions on the
 * containing #GtkApplicationWindow or its associated #GtkApplication,
 * respectively.  This is the same form used for actions in the #GMenu
 * associated with the window.
 * @param action_name an action name, or %NULL
 */
set_action_name(action_name?: (string | null)): void
/**
 * Sets the target value of an actionable widget.
 * 
 * If `target_value` is %NULL then the target value is unset.
 * 
 * The target value has two purposes.  First, it is used as the
 * parameter to activation of the action associated with the
 * #GtkActionable widget. Second, it is used to determine if the widget
 * should be rendered as “active” — the widget is active if the state
 * is equal to the given target.
 * 
 * Consider the example of associating a set of buttons with a #GAction
 * with string state in a typical “radio button” situation.  Each button
 * will be associated with the same action, but with a different target
 * value for that action.  Clicking on a particular button will activate
 * the action with the target of that button, which will typically cause
 * the action’s state to change to that value.  Since the action’s state
 * is now equal to the target value of the button, the button will now
 * be rendered as active (and the other buttons, with different targets,
 * rendered inactive).
 * @param target_value a #GVariant to set as the target value, or %NULL
 */
set_action_target_value(target_value?: (GLib.Variant | null)): void
/**
 * Sets the action-name and associated string target value of an
 * actionable widget.
 * 
 * `detailed_action_name` is a string in the format accepted by
 * g_action_parse_detailed_name().
 * 
 * (Note that prior to version 3.22.25,
 * this function is only usable for actions with a simple "s" target, and
 * `detailed_action_name` must be of the form `"action::target"` where
 * `action` is the action name and `target` is the string to use
 * as the target.)
 * @param detailed_action_name the detailed action name
 */
set_detailed_action_name(detailed_action_name: string): void
/**
 * Gets the action name for `actionable`.
 * 
 * See gtk_actionable_set_action_name() for more information.
 */
vfunc_get_action_name(): (string | null)
/**
 * Gets the current target value of `actionable`.
 * 
 * See gtk_actionable_set_action_target_value() for more information.
 */
vfunc_get_action_target_value(): GLib.Variant
/**
 * Specifies the name of the action with which this widget should be
 * associated.  If `action_name` is %NULL then the widget will be
 * unassociated from any previous action.
 * 
 * Usually this function is used when the widget is located (or will be
 * located) within the hierarchy of a #GtkApplicationWindow.
 * 
 * Names are of the form “win.save” or “app.quit” for actions on the
 * containing #GtkApplicationWindow or its associated #GtkApplication,
 * respectively.  This is the same form used for actions in the #GMenu
 * associated with the window.
 * @param action_name an action name, or %NULL
 */
vfunc_set_action_name(action_name?: (string | null)): void
/**
 * Sets the target value of an actionable widget.
 * 
 * If `target_value` is %NULL then the target value is unset.
 * 
 * The target value has two purposes.  First, it is used as the
 * parameter to activation of the action associated with the
 * #GtkActionable widget. Second, it is used to determine if the widget
 * should be rendered as “active” — the widget is active if the state
 * is equal to the given target.
 * 
 * Consider the example of associating a set of buttons with a #GAction
 * with string state in a typical “radio button” situation.  Each button
 * will be associated with the same action, but with a different target
 * value for that action.  Clicking on a particular button will activate
 * the action with the target of that button, which will typically cause
 * the action’s state to change to that value.  Since the action’s state
 * is now equal to the target value of the button, the button will now
 * be rendered as active (and the other buttons, with different targets,
 * rendered inactive).
 * @param target_value a #GVariant to set as the target value, or %NULL
 */
vfunc_set_action_target_value(target_value?: (GLib.Variant | null)): void
/**
 * This is a utility function for #GtkActivatable implementors.
 * 
 * When implementing #GtkActivatable you must call this when
 * handling changes of the #GtkActivatable:related-action, and
 * you must also use this to break references in #GObject->dispose().
 * 
 * This function adds a reference to the currently set related
 * action for you, it also makes sure the #GtkActivatable->update()
 * method is called when the related #GtkAction properties change
 * and registers to the action’s proxy list.
 * 
 * > Be careful to call this before setting the local
 * > copy of the #GtkAction property, since this function uses
 * > gtk_activatable_get_related_action() to retrieve the
 * > previous action.
 * @param action the #GtkAction to set
 */
do_set_related_action(action: Gtk.Action): void
/**
 * Gets the related #GtkAction for `activatable`.
 * @returns the related #GtkAction if one is set.
 */
get_related_action(): Gtk.Action
/**
 * Gets whether this activatable should reset its layout
 * and appearance when setting the related action or when
 * the action changes appearance.
 * @returns whether @activatable uses its actions appearance.
 */
get_use_action_appearance(): boolean
/**
 * Sets the related action on the `activatable` object.
 * 
 * > #GtkActivatable implementors need to handle the #GtkActivatable:related-action
 * > property and call gtk_activatable_do_set_related_action() when it changes.
 * @param action the #GtkAction to set
 */
set_related_action(action: Gtk.Action): void
/**
 * Sets whether this activatable should reset its layout and appearance
 * when setting the related action or when the action changes appearance
 * 
 * > #GtkActivatable implementors need to handle the
 * > #GtkActivatable:use-action-appearance property and call
 * > gtk_activatable_sync_action_properties() to update `activatable`
 * > if needed.
 * @param use_appearance whether to use the actions appearance
 */
set_use_action_appearance(use_appearance: boolean): void
/**
 * This is called to update the activatable completely, this is called
 * internally when the #GtkActivatable:related-action property is set
 * or unset and by the implementing class when
 * #GtkActivatable:use-action-appearance changes.
 * @param action the related #GtkAction or %NULL
 */
sync_action_properties(action?: (Gtk.Action | null)): void
/**
 * This is called to update the activatable completely, this is called
 * internally when the #GtkActivatable:related-action property is set
 * or unset and by the implementing class when
 * #GtkActivatable:use-action-appearance changes.
 * @param action the related #GtkAction or %NULL
 */
vfunc_sync_action_properties(action?: (Gtk.Action | null)): void
vfunc_update(action: Gtk.Action, property_name: string): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
/**
 * For widgets that can be “activated” (buttons, menu items, etc.)
 * this function activates them. Activation is what happens when you
 * press Enter on a widget during key navigation. If `widget` isn't
 * activatable, the function returns %FALSE.
 * @returns %TRUE if the widget was activatable
 */
activate(): boolean
/**
 * Installs an accelerator for this `widget` in `accel_group` that causes
 * `accel_signal` to be emitted if the accelerator is activated.
 * The `accel_group` needs to be added to the widget’s toplevel via
 * gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
 * Accelerators added through this function are not user changeable during
 * runtime. If you want to support accelerators that can be changed by the
 * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
 * gtk_menu_item_set_accel_path() instead.
 * @param accel_signal widget signal to emit on accelerator activation
 * @param accel_group accel group for this widget, added to its toplevel
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @param accel_flags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
 */
add_accelerator(accel_signal: string, accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): void
/**
 * Adds the device events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_device_events() for details.
 * @param device a #GdkDevice
 * @param events an event mask, see #GdkEventMask
 */
add_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Adds the events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_events() and the
 * [input handling overview][event-masks] for details.
 * @param events an event mask, see #GdkEventMask
 */
add_events(events: number): void
/**
 * Adds a widget to the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
 * list of mnemonic labels for the widget is cleared when the
 * widget is destroyed, so the caller must make sure to update
 * its internal state at this point as well, by using a connection
 * to the #GtkWidget::destroy signal or a weak notifier.
 * @param label a #GtkWidget that acts as a mnemonic label for @widget
 */
add_mnemonic_label(label: Gtk.Widget): void
/**
 * Queues an animation frame update and adds a callback to be called
 * before each frame. Until the tick callback is removed, it will be
 * called frequently (usually at the frame rate of the output device
 * or as quickly as the application can be repainted, whichever is
 * slower). For this reason, is most suitable for handling graphics
 * that change every frame or every few frames. The tick callback does
 * not automatically imply a relayout or repaint. If you want a
 * repaint or relayout, and aren’t changing widget properties that
 * would trigger that (for example, changing the text of a #GtkLabel),
 * then you will have to call gtk_widget_queue_resize() or
 * gtk_widget_queue_draw_area() yourself.
 * 
 * gdk_frame_clock_get_frame_time() should generally be used for timing
 * continuous animations and
 * gdk_frame_timings_get_predicted_presentation_time() if you are
 * trying to display isolated frames at particular times.
 * 
 * This is a more convenient alternative to connecting directly to the
 * #GdkFrameClock::update signal of #GdkFrameClock, since you don't
 * have to worry about when a #GdkFrameClock is assigned to a widget.
 * @param callback function to call for updating animations
 * @returns an id for the connection of this callback. Remove the callback     by passing it to gtk_widget_remove_tick_callback()
 */
add_tick_callback(callback: Gtk.TickCallback): number
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 * @returns %TRUE if the accelerator can be activated.
 */
can_activate_accel(signal_id: number): boolean
/**
 * This function is used by custom widget implementations; if you're
 * writing an app, you’d use gtk_widget_grab_focus() to move the focus
 * to a particular widget, and gtk_container_set_focus_chain() to
 * change the focus tab order. So you may want to investigate those
 * functions instead.
 * 
 * gtk_widget_child_focus() is called by containers as the user moves
 * around the window using keyboard shortcuts. `direction` indicates
 * what kind of motion is taking place (up, down, left, right, tab
 * forward, tab backward). gtk_widget_child_focus() emits the
 * #GtkWidget::focus signal; widgets override the default handler
 * for this signal in order to implement appropriate focus behavior.
 * 
 * The default ::focus handler for a widget should return %TRUE if
 * moving in `direction` left the focus on a focusable location inside
 * that widget, and %FALSE if moving in `direction` moved the focus
 * outside the widget. If returning %TRUE, widgets normally
 * call gtk_widget_grab_focus() to place the focus accordingly;
 * if returning %FALSE, they don’t modify the current focus location.
 * @param direction direction of focus movement
 * @returns %TRUE if focus ended up inside @widget
 */
child_focus(direction: Gtk.DirectionType): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
child_notify(child_property: string): void
child_notify(...args: never[]): any
/**
 * Same as gtk_widget_path(), but always uses the name of a widget’s type,
 * never uses a custom name set with gtk_widget_set_name().
 */
class_path(): [number, string, string]
/**
 * Computes whether a container should give this widget extra space
 * when possible. Containers should check this, rather than
 * looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
 * 
 * This function already checks whether the widget is visible, so
 * visibility does not need to be checked separately. Non-visible
 * widgets are not expanded.
 * 
 * The computed expand value uses either the expand setting explicitly
 * set on the widget itself, or, if none has been explicitly set,
 * the widget may expand if some of its children do.
 * @param orientation expand direction
 * @returns whether widget tree rooted here should be expanded
 */
compute_expand(orientation: Gtk.Orientation): boolean
/**
 * Creates a new #PangoContext with the appropriate font map,
 * font options, font description, and base direction for drawing
 * text for this widget. See also gtk_widget_get_pango_context().
 * @returns the new #PangoContext
 */
create_pango_context(): Pango.Context
/**
 * Creates a new #PangoLayout with the appropriate font map,
 * font description, and base direction for drawing text for
 * this widget.
 * 
 * If you keep a #PangoLayout created in this way around, you need
 * to re-create it when the widget #PangoContext is replaced.
 * This can be tracked by using the #GtkWidget::screen-changed signal
 * on the widget.
 * @param text text to set on the layout (can be %NULL)
 * @returns the new #PangoLayout
 */
create_pango_layout(text?: (string | null)): Pango.Layout
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
destroy(): void
/**
 * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
 * %NULL.  It’s intended to be used as a callback connected to the
 * “destroy” signal of a widget. You connect gtk_widget_destroyed()
 * as a signal handler, and pass the address of your widget variable
 * as user data. Then when the widget is destroyed, the variable will
 * be set to %NULL. Useful for example to avoid multiple copies
 * of the same dialog.
 * @param widget_pointer address of a variable that contains @widget
 */
destroyed(widget_pointer: Gtk.Widget): Gtk.Widget
/**
 * Returns %TRUE if `device` has been shadowed by a GTK+
 * device grab on another widget, so it would stop sending
 * events to `widget`. This may be used in the
 * #GtkWidget::grab-notify signal to check for specific
 * devices. See gtk_device_grab_add().
 * @param device a #GdkDevice
 * @returns %TRUE if there is an ongoing grab on @device          by another #GtkWidget than @widget.
 */
device_is_shadowed(device: Gdk.Device): boolean
/**
 * This function is equivalent to gtk_drag_begin_with_coordinates(),
 * passing -1, -1 as coordinates.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @returns the context for this drag
 */
drag_begin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: (Gdk.Event | null)): Gdk.DragContext
/**
 * Initiates a drag on the source side. The function only needs to be used
 * when the application is starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is %NULL, then %GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used to get information about the drag.
 * 
 * Generally there are three cases when you want to start a drag by hand by
 * calling this function:
 * 
 * 1. During a #GtkWidget::button-press-event handler, if you want to start a drag
 * immediately when the user presses the mouse button.  Pass the `event`
 * that you have in your #GtkWidget::button-press-event handler.
 * 
 * 2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
 * when the mouse moves past a certain threshold distance after a button-press.
 * Pass the `event` that you have in your #GtkWidget::motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).
 * If you really cannot pass a real event, pass %NULL instead.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @param x The initial x coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @param y The initial y coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @returns the context for this drag
 */
drag_begin_with_coordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: (Gdk.Event | null), x: number, y: number): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param start_x X coordinate of start of drag
 * @param start_y Y coordinate of start of drag
 * @param current_x current X coordinate
 * @param current_y current Y coordinate
 * @returns %TRUE if the drag threshold has been passed.
 */
drag_check_threshold(start_x: number, start_y: number, current_x: number, current_y: number): boolean
/**
 * Add the image targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_uri_targets(): void
/**
 * Looks for a match between the supported targets of `context` and the
 * `dest_target_list,` returning the first matching target, otherwise
 * returning %GDK_NONE. `dest_target_list` should usually be the return
 * value from gtk_drag_dest_get_target_list(), but some widgets may
 * have different valid targets for different parts of the widget; in
 * that case, they will have to implement a drag_motion handler that
 * passes the correct target list to this function.
 * @param context drag context
 * @param target_list list of droppable targets, or %NULL to use    gtk_drag_dest_get_target_list (@widget).
 * @returns first target that the source offers     and the dest can accept, or %GDK_NONE
 */
drag_dest_find_target(context: Gdk.DragContext, target_list?: (Gtk.TargetList | null)): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_dest_get_target_list(): (Gtk.TargetList | null)
/**
 * Returns whether the widget has been configured to always
 * emit #GtkWidget::drag-motion signals.
 * @returns %TRUE if the widget always emits   #GtkWidget::drag-motion events
 */
drag_dest_get_track_motion(): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget’s drag-and-drop signals
 * (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget’s #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget::drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget::drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There’s no way to set a default action here, you can use the
 * #GtkWidget::drag-motion callback for that. Here’s an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * 
 * ```c
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of     #GtkTargetEntrys indicating the drop types that this @widget will     accept, or %NULL. Later you can access the list with     gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this @widget.
 */
drag_dest_set(flags: Gtk.DestDefaults, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets this widget as a proxy for drops to another window.
 * @param proxy_window the window to which to forward drag events
 * @param protocol the drag protocol which the @proxy_window accepts   (You can use gdk_drag_get_protocol() to determine this)
 * @param use_coordinates If %TRUE, send the same coordinates to the   destination, because it is an embedded   subwindow.
 */
drag_dest_set_proxy(proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param target_list list of droppable targets, or %NULL for none
 */
drag_dest_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Tells the widget to emit #GtkWidget::drag-motion and
 * #GtkWidget::drag-leave events regardless of the targets and the
 * %GTK_DEST_DEFAULT_MOTION flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param track_motion whether to accept all targets
 */
drag_dest_set_track_motion(track_motion: boolean): void
/**
 * Clears information about a drop destination set with
 * gtk_drag_dest_set(). The widget will no longer receive
 * notification of drags.
 */
drag_dest_unset(): void
/**
 * Gets the data associated with a drag. When the data
 * is received or the retrieval fails, GTK+ will emit a
 * #GtkWidget::drag-data-received signal. Failure of the retrieval
 * is indicated by the length field of the `selection_data`
 * signal parameter being negative. However, when gtk_drag_get_data()
 * is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
 * then the widget will not receive notification of failed
 * drops.
 * @param context the drag context
 * @param target the target (form of the data) to retrieve
 * @param time_ a timestamp for retrieving the data. This will   generally be the time received in a #GtkWidget::drag-motion   or #GtkWidget::drag-drop signal
 */
drag_get_data(context: Gdk.DragContext, target: Gdk.Atom, time_: number): void
/**
 * Highlights a widget as a currently hovered drop target.
 * To end the highlight, call gtk_drag_unhighlight().
 * GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
 */
drag_highlight(): void
/**
 * Add the writable image targets supported by #GtkSelectionData to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_uri_targets(): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_source_get_target_list(): (Gtk.TargetList | null)
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param start_button_mask the bitmask of buttons that can start the drag
 * @param targets the table of targets     that the drag will support, may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
drag_source_set(start_button_mask: Gdk.ModifierType, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to `icon`. See the docs for #GtkIconTheme for more details.
 * @param icon A #GIcon
 */
drag_source_set_icon_gicon(icon: Gio.Icon): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param icon_name name of icon to use
 */
drag_source_set_icon_name(icon_name: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
drag_source_set_icon_pixbuf(pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param stock_id the ID of the stock icon to use
 */
drag_source_set_icon_stock(stock_id: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param target_list list of draggable targets, or %NULL for none
 */
drag_source_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Undoes the effects of gtk_drag_source_set().
 */
drag_source_unset(): void
/**
 * Removes a highlight set by gtk_drag_highlight() from
 * a widget.
 */
drag_unhighlight(): void
/**
 * Draws `widget` to `cr`. The top left corner of the widget will be
 * drawn to the currently set origin point of `cr`.
 * 
 * You should pass a cairo context as `cr` argument that is in an
 * original state. Otherwise the resulting drawing is undefined. For
 * example changing the operator using cairo_set_operator() or the
 * line width using cairo_set_line_width() might have unwanted side
 * effects.
 * You may however change the context’s transform matrix - like with
 * cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
 * region with cairo_clip() prior to calling this function. Also, it
 * is fine to modify the context with cairo_save() and
 * cairo_push_group() prior to calling this function.
 * 
 * Note that special-purpose widgets may contain special code for
 * rendering to the screen and might appear differently on screen
 * and when rendered using gtk_widget_draw().
 * @param cr a cairo context to draw to
 */
draw(cr: cairo.Context): void
/**
 * Ensures that `widget` has a style (`widget->`style).
 * 
 * Not a very useful function; most of the time, if you
 * want the style, the widget is realized, and realized
 * widgets are guaranteed to have a style already.
 */
ensure_style(): void
/**
 * Notifies the user about an input-related error on this widget.
 * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
 * gdk_window_beep(), otherwise it does nothing.
 * 
 * Note that the effect of gdk_window_beep() can be configured in many
 * ways, depending on the windowing backend and the desktop environment
 * or window manager that is used.
 */
error_bell(): void
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 * @returns return from the event signal emission (%TRUE if               the event was handled)
 */
event(event: Gdk.Event): boolean
/**
 * Stops emission of #GtkWidget::child-notify signals on `widget`. The
 * signals are queued until gtk_widget_thaw_child_notify() is called
 * on `widget`.
 * 
 * This is the analogue of g_object_freeze_notify() for child properties.
 */
freeze_child_notify(): void
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 * @returns the #AtkObject associated with @widget
 */
get_accessible(): Atk.Object
/**
 * Retrieves the #GActionGroup that was registered using `prefix`. The resulting
 * #GActionGroup may have been registered to `widget` or any #GtkWidget in its
 * ancestry.
 * 
 * If no action group was found matching `prefix,` then %NULL is returned.
 * @param prefix The “prefix” of the action group.
 * @returns A #GActionGroup or %NULL.
 */
get_action_group(prefix: string): (Gio.ActionGroup | null)
/**
 * Returns the baseline that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function, and when allocating child
 * widgets in #GtkWidget::size_allocate.
 * @returns the baseline of the @widget, or -1 if none
 */
get_allocated_baseline(): number
/**
 * Returns the height that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the height of the @widget
 */
get_allocated_height(): number
/**
 * Retrieves the widget’s allocated size.
 * 
 * This function returns the last values passed to
 * gtk_widget_size_allocate_with_baseline(). The value differs from
 * the size returned in gtk_widget_get_allocation() in that functions
 * like gtk_widget_set_halign() can adjust the allocation, but not
 * the value returned by this function.
 * 
 * If a widget is not visible, its allocated size is 0.
 */
get_allocated_size(): [Gtk.Allocation, number]
/**
 * Returns the width that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the width of the @widget
 */
get_allocated_width(): number
/**
 * Retrieves the widget’s allocation.
 * 
 * Note, when implementing a #GtkContainer: a widget’s allocation will
 * be its “adjusted” allocation, that is, the widget’s parent
 * container typically calls gtk_widget_size_allocate() with an
 * allocation, and that allocation is then adjusted (to handle margin
 * and alignment for example) before assignment to the widget.
 * gtk_widget_get_allocation() returns the adjusted allocation that
 * was actually assigned to the widget. The adjusted allocation is
 * guaranteed to be completely contained within the
 * gtk_widget_size_allocate() allocation, however. So a #GtkContainer
 * is guaranteed that its children stay inside the assigned bounds,
 * but not that they have exactly the bounds the container assigned.
 * There is no way to get the original allocation assigned by
 * gtk_widget_size_allocate(), since it isn’t stored; if a container
 * implementation needs that information it will have to track it itself.
 */
get_allocation(): Gtk.Allocation
/**
 * Gets the first ancestor of `widget` with type `widget_type`. For example,
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
 * the first #GtkBox that’s an ancestor of `widget`. No reference will be
 * added to the returned widget; it should not be unreferenced. See note
 * about checking for a toplevel #GtkWindow in the docs for
 * gtk_widget_get_toplevel().
 * 
 * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
 * considers `widget` to be an ancestor of itself.
 * @param widget_type ancestor type
 * @returns the ancestor widget, or %NULL if not found
 */
get_ancestor(widget_type: GObject.GType): (Gtk.Widget | null)
/**
 * Determines whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * See gtk_widget_set_app_paintable()
 * @returns %TRUE if the widget is app paintable
 */
get_app_paintable(): boolean
/**
 * Determines whether `widget` can be a default widget. See
 * gtk_widget_set_can_default().
 * @returns %TRUE if @widget can be a default widget, %FALSE otherwise
 */
get_can_default(): boolean
/**
 * Determines whether `widget` can own the input focus. See
 * gtk_widget_set_can_focus().
 * @returns %TRUE if @widget can own the input focus, %FALSE otherwise
 */
get_can_focus(): boolean
/**
 * This function is only for use in widget implementations. Obtains
 * `widget->`requisition, unless someone has forced a particular
 * geometry on the widget (e.g. with gtk_widget_set_size_request()),
 * in which case it returns that geometry instead of the widget's
 * requisition.
 * 
 * This function differs from gtk_widget_size_request() in that
 * it retrieves the last size request value from `widget->`requisition,
 * while gtk_widget_size_request() actually calls the "size_request" method
 * on `widget` to compute the size request and fill in `widget->`requisition,
 * and only then returns `widget->`requisition.
 * 
 * Because this function does not call the “size_request” method, it
 * can only be used when you know that `widget->`requisition is
 * up-to-date, that is, gtk_widget_size_request() has been called
 * since the last time a resize was queued. In general, only container
 * implementations have this information; applications should use
 * gtk_widget_size_request().
 */
get_child_requisition(): Gtk.Requisition
/**
 * Gets the value set with gtk_widget_set_child_visible().
 * If you feel a need to use this function, your code probably
 * needs reorganization.
 * 
 * This function is only useful for container implementations and
 * never should be called by an application.
 * @returns %TRUE if the widget is mapped with the parent.
 */
get_child_visible(): boolean
/**
 * Retrieves the widget’s clip area.
 * 
 * The clip area is the area in which all of `widget'`s drawing will
 * happen. Other toolkits call it the bounding box.
 * 
 * Historically, in GTK+ the clip area has been equal to the allocation
 * retrieved via gtk_widget_get_allocation().
 */
get_clip(): Gtk.Allocation
/**
 * Returns the clipboard object for the given selection to
 * be used with `widget`. `widget` must have a #GdkDisplay
 * associated with it, so must be attached to a toplevel
 * window.
 * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
 * @returns the appropriate clipboard object. If no             clipboard already exists, a new one will             be created. Once a clipboard object has             been created, it is persistent for all time.
 */
get_clipboard(selection: Gdk.Atom): Gtk.Clipboard
/**
 * Obtains the composite name of a widget.
 * @returns the composite name of @widget, or %NULL if @widget is not   a composite child. The string should be freed when it is no   longer needed.
 */
get_composite_name(): string
/**
 * Returns whether `device` can interact with `widget` and its
 * children. See gtk_widget_set_device_enabled().
 * @param device a #GdkDevice
 * @returns %TRUE is @device is enabled for @widget
 */
get_device_enabled(device: Gdk.Device): boolean
/**
 * Returns the events mask for the widget corresponding to an specific device. These
 * are the events that the widget will receive when `device` operates on it.
 * @param device a #GdkDevice
 * @returns device event mask for @widget
 */
get_device_events(device: Gdk.Device): Gdk.EventMask
/**
 * Gets the reading direction for a particular widget. See
 * gtk_widget_set_direction().
 * @returns the reading direction for the widget.
 */
get_direction(): Gtk.TextDirection
/**
 * Get the #GdkDisplay for the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow at the top.
 * 
 * In general, you should only create display specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkDisplay for the toplevel for this widget.
 */
get_display(): Gdk.Display
/**
 * Determines whether the widget is double buffered.
 * 
 * See gtk_widget_set_double_buffered()
 * @returns %TRUE if the widget is double buffered
 */
get_double_buffered(): boolean
/**
 * Returns the event mask (see #GdkEventMask) for the widget. These are the
 * events that the widget will receive.
 * 
 * Note: Internally, the widget event mask will be the logical OR of the event
 * mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
 * event mask necessary to cater for every #GtkEventController created for the
 * widget.
 * @returns event mask for @widget
 */
get_events(): number
/**
 * Returns whether the widget should grab focus when it is clicked with the mouse.
 * See gtk_widget_set_focus_on_click().
 * @returns %TRUE if the widget should grab focus when it is clicked with               the mouse.
 */
get_focus_on_click(): boolean
/**
 * Gets the font map that has been set with gtk_widget_set_font_map().
 * @returns A #PangoFontMap, or %NULL
 */
get_font_map(): (Pango.FontMap | null)
/**
 * Returns the #cairo_font_options_t used for Pango rendering. When not set,
 * the defaults font options for the #GdkScreen will be used.
 * @returns the #cairo_font_options_t or %NULL if not set
 */
get_font_options(): (cairo.FontOptions | null)
/**
 * Obtains the frame clock for a widget. The frame clock is a global
 * “ticker” that can be used to drive animations and repaints.  The
 * most common reason to get the frame clock is to call
 * gdk_frame_clock_get_frame_time(), in order to get a time to use for
 * animating. For example you might record the start of the animation
 * with an initial value from gdk_frame_clock_get_frame_time(), and
 * then update the animation by calling
 * gdk_frame_clock_get_frame_time() again during each repaint.
 * 
 * gdk_frame_clock_request_phase() will result in a new frame on the
 * clock, but won’t necessarily repaint any widgets. To repaint a
 * widget, you have to use gtk_widget_queue_draw() which invalidates
 * the widget (thus scheduling it to receive a draw on the next
 * frame). gtk_widget_queue_draw() will also end up requesting a frame
 * on the appropriate frame clock.
 * 
 * A widget’s frame clock will not change while the widget is
 * mapped. Reparenting a widget (which implies a temporary unmap) can
 * change the widget’s frame clock.
 * 
 * Unrealized widgets do not have a frame clock.
 * @returns a #GdkFrameClock, or %NULL if widget is unrealized
 */
get_frame_clock(): (Gdk.FrameClock | null)
/**
 * Gets the value of the #GtkWidget:halign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
 * alignment.
 * @returns the horizontal alignment of @widget
 */
get_halign(): Gtk.Align
/**
 * Returns the current value of the has-tooltip property.  See
 * #GtkWidget:has-tooltip for more information.
 * @returns current value of has-tooltip on @widget.
 */
get_has_tooltip(): boolean
/**
 * Determines whether `widget` has a #GdkWindow of its own. See
 * gtk_widget_set_has_window().
 * @returns %TRUE if @widget has a window, %FALSE otherwise
 */
get_has_window(): boolean
/**
 * Gets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Containers should use gtk_widget_compute_expand() rather than
 * this function, to see whether a widget, or any of its children,
 * has the expand flag set. If any child of a widget wants to
 * expand, the parent may ask to expand also.
 * 
 * This function only looks at the widget’s own hexpand flag, rather
 * than computing whether the entire widget tree rooted at this widget
 * wants to expand.
 * @returns whether hexpand flag is set
 */
get_hexpand(): boolean
/**
 * Gets whether gtk_widget_set_hexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @returns whether hexpand has been explicitly set
 */
get_hexpand_set(): boolean
/**
 * Whether the widget is mapped.
 * @returns %TRUE if the widget is mapped, %FALSE otherwise.
 */
get_mapped(): boolean
/**
 * Gets the value of the #GtkWidget:margin-bottom property.
 * @returns The bottom margin of @widget
 */
get_margin_bottom(): number
/**
 * Gets the value of the #GtkWidget:margin-end property.
 * @returns The end margin of @widget
 */
get_margin_end(): number
/**
 * Gets the value of the #GtkWidget:margin-left property.
 * @returns The left margin of @widget
 */
get_margin_left(): number
/**
 * Gets the value of the #GtkWidget:margin-right property.
 * @returns The right margin of @widget
 */
get_margin_right(): number
/**
 * Gets the value of the #GtkWidget:margin-start property.
 * @returns The start margin of @widget
 */
get_margin_start(): number
/**
 * Gets the value of the #GtkWidget:margin-top property.
 * @returns The top margin of @widget
 */
get_margin_top(): number
/**
 * Returns the modifier mask the `widget’`s windowing system backend
 * uses for a particular purpose.
 * 
 * See gdk_keymap_get_modifier_mask().
 * @param intent the use case for the modifier mask
 * @returns the modifier mask used for @intent.
 */
get_modifier_mask(intent: Gdk.ModifierIntent): Gdk.ModifierType
/**
 * Returns the current modifier style for the widget. (As set by
 * gtk_widget_modify_style().) If no style has previously set, a new
 * #GtkRcStyle will be created with all values unset, and set as the
 * modifier style for the widget. If you make changes to this rc
 * style, you must call gtk_widget_modify_style(), passing in the
 * returned rc style, to make sure that your changes take effect.
 * 
 * Caution: passing the style back to gtk_widget_modify_style() will
 * normally end up destroying it, because gtk_widget_modify_style() copies
 * the passed-in style and sets the copy as the new modifier style,
 * thus dropping any reference to the old modifier style. Add a reference
 * to the modifier style if you want to keep it alive.
 * @returns the modifier style for the widget.     This rc style is owned by the widget. If you want to keep a     pointer to value this around, you must add a refcount using     g_object_ref().
 */
get_modifier_style(): Gtk.RcStyle
/**
 * Retrieves the name of a widget. See gtk_widget_set_name() for the
 * significance of widget names.
 * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
 */
get_name(): string
/**
 * Returns the current value of the #GtkWidget:no-show-all property,
 * which determines whether calls to gtk_widget_show_all()
 * will affect this widget.
 * @returns the current value of the “no-show-all” property.
 */
get_no_show_all(): boolean
/**
 * Fetches the requested opacity for this widget.
 * See gtk_widget_set_opacity().
 * @returns the requested opacity for this widget.
 */
get_opacity(): number
/**
 * Gets a #PangoContext with the appropriate font map, font description,
 * and base direction for this widget. Unlike the context returned
 * by gtk_widget_create_pango_context(), this context is owned by
 * the widget (it can be used until the screen for the widget changes
 * or the widget is removed from its toplevel), and will be updated to
 * match any changes to the widget’s attributes. This can be tracked
 * by using the #GtkWidget::screen-changed signal on the widget.
 * @returns the #PangoContext for the widget.
 */
get_pango_context(): Pango.Context
/**
 * Returns the parent container of `widget`.
 * @returns the parent container of @widget, or %NULL
 */
get_parent(): (Gtk.Widget | null)
/**
 * Gets `widget’`s parent window, or %NULL if it does not have one.
 * @returns the parent window of @widget, or %NULL if it does not have a parent window.
 */
get_parent_window(): (Gdk.Window | null)
/**
 * Returns the #GtkWidgetPath representing `widget,` if the widget
 * is not connected to a toplevel widget, a partial path will be
 * created.
 * @returns The #GtkWidgetPath representing @widget
 */
get_path(): Gtk.WidgetPath
/**
 * Obtains the location of the mouse pointer in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(); and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 */
get_pointer(): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves the minimum and natural size of a widget, taking
 * into account the widget’s preference for height-for-width management.
 * 
 * This is used to retrieve a suitable size by container widgets which do
 * not impose any restrictions on the child placement. It can be used
 * to deduce toplevel window and menu sizes as well as child widgets in
 * free-form containers such as GtkLayout.
 * 
 * Handle with care. Note that the natural height of a height-for-width
 * widget will generally be a smaller size than the minimum height, since the required
 * height for the natural width is generally smaller than the required height for
 * the minimum width.
 * 
 * Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
 * baseline alignment.
 */
get_preferred_size(): [Gtk.Requisition | null, Gtk.Requisition | null]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
get_preferred_width_for_height(height: number): [number, number]
/**
 * Determines whether `widget` is realized.
 * @returns %TRUE if @widget is realized, %FALSE otherwise
 */
get_realized(): boolean
/**
 * Determines whether `widget` is always treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_set_receives_default().
 * @returns %TRUE if @widget acts as the default widget when focused,               %FALSE otherwise
 */
get_receives_default(): boolean
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 * @returns The #GtkSizeRequestMode preferred by @widget.
 */
get_request_mode(): Gtk.SizeRequestMode
/**
 * Retrieves the widget’s requisition.
 * 
 * This function should only be used by widget implementations in
 * order to figure whether the widget’s requisition has actually
 * changed after some internal state change (so that they can call
 * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
 * 
 * Normally, gtk_widget_size_request() should be used.
 */
get_requisition(): Gtk.Requisition
/**
 * Get the root window where this widget is located. This function can
 * only be called after the widget has been added to a widget
 * hierarchy with #GtkWindow at the top.
 * 
 * The root window is useful for such purposes as creating a popup
 * #GdkWindow associated with the window. In general, you should only
 * create display specific resources when a widget has been realized,
 * and you should free those resources when the widget is unrealized.
 * @returns the #GdkWindow root window for the toplevel for this widget.
 */
get_root_window(): Gdk.Window
/**
 * Retrieves the internal scale factor that maps from window coordinates
 * to the actual device pixels. On traditional systems this is 1, on
 * high density outputs, it can be a higher value (typically 2).
 * 
 * See gdk_window_get_scale_factor().
 * @returns the scale factor for @widget
 */
get_scale_factor(): number
/**
 * Get the #GdkScreen from the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow
 * at the top.
 * 
 * In general, you should only create screen specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkScreen for the toplevel for this widget.
 */
get_screen(): Gdk.Screen
/**
 * Returns the widget’s sensitivity (in the sense of returning
 * the value that has been set using gtk_widget_set_sensitive()).
 * 
 * The effective sensitivity of a widget is however determined by both its
 * own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
 * @returns %TRUE if the widget is sensitive
 */
get_sensitive(): boolean
/**
 * Gets the settings object holding the settings used for this widget.
 * 
 * Note that this function can only be called when the #GtkWidget
 * is attached to a toplevel, since the settings object is specific
 * to a particular #GdkScreen.
 * @returns the relevant #GtkSettings object
 */
get_settings(): Gtk.Settings
/**
 * Gets the size request that was explicitly set for the widget using
 * gtk_widget_set_size_request(). A value of -1 stored in `width` or
 * `height` indicates that that dimension has not been set explicitly
 * and the natural requisition of the widget will be used instead. See
 * gtk_widget_set_size_request(). To get the size a widget will
 * actually request, call gtk_widget_get_preferred_size() instead of
 * this function.
 */
get_size_request(): [number, number]
/**
 * Returns the widget’s state. See gtk_widget_set_state().
 * @returns the state of @widget.
 */
get_state(): Gtk.StateType
/**
 * Returns the widget state as a flag set. It is worth mentioning
 * that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
 * returned, that is, also based on parent insensitivity, even if
 * `widget` itself is sensitive.
 * 
 * Also note that if you are looking for a way to obtain the
 * #GtkStateFlags to pass to a #GtkStyleContext method, you
 * should look at gtk_style_context_get_state().
 * @returns The state flags for widget
 */
get_state_flags(): Gtk.StateFlags
/**
 * Simply an accessor function that returns `widget->`style.
 * @returns the widget’s #GtkStyle
 */
get_style(): Gtk.Style
/**
 * Returns the style context associated to `widget`. The returned object is
 * guaranteed to be the same for the lifetime of `widget`.
 * @returns a #GtkStyleContext. This memory is owned by @widget and          must not be freed.
 */
get_style_context(): Gtk.StyleContext
/**
 * Returns %TRUE if `widget` is multiple pointer aware. See
 * gtk_widget_set_support_multidevice() for more information.
 * @returns %TRUE if @widget is multidevice aware.
 */
get_support_multidevice(): boolean
/**
 * Fetch an object build from the template XML for `widget_type` in this `widget` instance.
 * 
 * This will only report children which were previously declared with
 * gtk_widget_class_bind_template_child_full() or one of its
 * variants.
 * 
 * This function is only meant to be called for code which is private to the `widget_type` which
 * declared the child and is meant for language bindings which cannot easily make use
 * of the GObject structure offsets.
 * @param widget_type The #GType to get a template child for
 * @param name The “id” of the child defined in the template XML
 * @returns The object built in the template XML with the id @name
 */
get_template_child<T = GObject.Object>(widget_type: GObject.GType, name: string): T
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_markup(): (string | null)
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_text(): (string | null)
/**
 * Returns the #GtkWindow of the current tooltip. This can be the
 * GtkWindow created by default, or the custom tooltip window set
 * using gtk_widget_set_tooltip_window().
 * @returns The #GtkWindow of the current tooltip.
 */
get_tooltip_window(): Gtk.Window
/**
 * This function returns the topmost widget in the container hierarchy
 * `widget` is a part of. If `widget` has no parent widgets, it will be
 * returned as the topmost widget. No reference will be added to the
 * returned widget; it should not be unreferenced.
 * 
 * Note the difference in behavior vs. gtk_widget_get_ancestor();
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
 * would return
 * %NULL if `widget` wasn’t inside a toplevel window, and if the
 * window was inside a #GtkWindow-derived widget which was in turn
 * inside the toplevel #GtkWindow. While the second case may
 * seem unlikely, it actually happens when a #GtkPlug is embedded
 * inside a #GtkSocket within the same application.
 * 
 * To reliably find the toplevel #GtkWindow, use
 * gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
 * on the result. For instance, to get the title of a widget's toplevel
 * window, one might use:
 * 
 * ```c
 * static const char *
 * get_widget_toplevel_title (GtkWidget *widget)
 * {
 *   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 *   if (GTK_IS_WINDOW (toplevel))
 *     {
 *       return gtk_window_get_title (GTK_WINDOW (toplevel));
 *     }
 * 
 *   return NULL;
 * }
 * ```
 * 
 * @returns the topmost ancestor of @widget, or @widget itself    if there’s no ancestor.
 */
get_toplevel(): Gtk.Widget
/**
 * Gets the value of the #GtkWidget:valign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. If your widget want to support baseline aligned
 * children it must use gtk_widget_get_valign_with_baseline(), or
 * `g_object_get (widget, "valign", &value, NULL)`, which will
 * also report the true value.
 * @returns the vertical alignment of @widget, ignoring baseline alignment
 */
get_valign(): Gtk.Align
/**
 * Gets the value of the #GtkWidget:valign property, including
 * %GTK_ALIGN_BASELINE.
 * @returns the vertical alignment of @widget
 */
get_valign_with_baseline(): Gtk.Align
/**
 * Gets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_get_hexpand() for more detail.
 * @returns whether vexpand flag is set
 */
get_vexpand(): boolean
/**
 * Gets whether gtk_widget_set_vexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * See gtk_widget_get_hexpand_set() for more detail.
 * @returns whether vexpand has been explicitly set
 */
get_vexpand_set(): boolean
/**
 * Determines whether the widget is visible. If you want to
 * take into account whether the widget’s parent is also marked as
 * visible, use gtk_widget_is_visible() instead.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See gtk_widget_set_visible().
 * @returns %TRUE if the widget is visible
 */
get_visible(): boolean
/**
 * Gets the visual that will be used to render `widget`.
 * @returns the visual for @widget
 */
get_visual(): Gdk.Visual
/**
 * Returns the widget’s window if it is realized, %NULL otherwise
 * @returns @widget’s window.
 */
get_window(): (Gdk.Window | null)
/**
 * Makes `widget` the current grabbed widget.
 * 
 * This means that interaction with other widgets in the same
 * application is blocked and mouse as well as keyboard events
 * are delivered to this widget.
 * 
 * If `widget` is not sensitive, it is not set as the current
 * grabbed widget and this function does nothing.
 */
grab_add(): void
/**
 * Causes `widget` to become the default widget. `widget` must be able to be
 * a default widget; typically you would ensure this yourself
 * by calling gtk_widget_set_can_default() with a %TRUE value.
 * The default widget is activated when
 * the user presses Enter in a window. Default widgets must be
 * activatable, that is, gtk_widget_activate() should affect them. Note
 * that #GtkEntry widgets require the “activates-default” property
 * set to %TRUE before they activate the default widget when Enter
 * is pressed and the #GtkEntry is focused.
 */
grab_default(): void
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
grab_focus(): void
/**
 * Removes the grab from the given widget.
 * 
 * You have to pair calls to gtk_grab_add() and gtk_grab_remove().
 * 
 * If `widget` does not have the grab, this function does nothing.
 */
grab_remove(): void
/**
 * Determines whether the widget is currently grabbing events, so it
 * is the only widget receiving input events (keyboard and mouse).
 * 
 * See also gtk_grab_add().
 * @returns %TRUE if the widget is in the grab_widgets stack
 */
has_grab(): boolean
/**
 * Determines if the widget style has been looked up through the rc mechanism.
 * @returns %TRUE if the widget has been looked up through the rc   mechanism, %FALSE otherwise.
 */
has_rc_style(): boolean
/**
 * Checks whether there is a #GdkScreen is associated with
 * this widget. All toplevel widgets have an associated
 * screen, and all widgets added into a hierarchy with a toplevel
 * window at the top.
 * @returns %TRUE if there is a #GdkScreen associated   with the widget.
 */
has_screen(): boolean
/**
 * Determines if the widget should show a visible indication that
 * it has the global input focus. This is a convenience function for
 * use in ::draw handlers that takes into account whether focus
 * indication should currently be shown in the toplevel window of
 * `widget`. See gtk_window_get_focus_visible() for more information
 * about focus indication.
 * 
 * To find out if the widget has the global input focus, use
 * gtk_widget_has_focus().
 * @returns %TRUE if the widget should display a “focus rectangle”
 */
has_visible_focus(): boolean
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
hide(): void
/**
 * Utility function; intended to be connected to the #GtkWidget::delete-event
 * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
 * argument, then returns %TRUE. If connected to ::delete-event, the
 * result is that clicking the close button for a window (on the
 * window frame, top right corner usually) will hide but not destroy
 * the window. By default, GTK+ destroys windows when ::delete-event
 * is received.
 * @returns %TRUE
 */
hide_on_delete(): boolean
/**
 * Returns whether the widget is currently being destroyed.
 * This information can sometimes be used to avoid doing
 * unnecessary work.
 * @returns %TRUE if @widget is being destroyed
 */
in_destruction(): boolean
/**
 * Creates and initializes child widgets defined in templates. This
 * function must be called in the instance initializer for any
 * class which assigned itself a template using gtk_widget_class_set_template()
 * 
 * It is important to call this function in the instance initializer
 * of a #GtkWidget subclass and not in #GObject.constructed() or
 * #GObject.constructor() for two reasons.
 * 
 * One reason is that generally derived widgets will assume that parent
 * class composite widgets have been created in their instance
 * initializers.
 * 
 * Another reason is that when calling g_object_new() on a widget with
 * composite templates, it’s important to build the composite widgets
 * before the construct properties are set. Properties passed to g_object_new()
 * should take precedence over properties set in the private template XML.
 */
init_template(): void
/**
 * Sets an input shape for this widget’s GDK window. This allows for
 * windows which react to mouse click in a nonrectangular region, see
 * gdk_window_input_shape_combine_region() for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
input_shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Inserts `group` into `widget`. Children of `widget` that implement
 * #GtkActionable can then be associated with actions in `group` by
 * setting their “action-name” to
 * `prefix`.`action-name`.
 * 
 * If `group` is %NULL, a previously inserted group for `name` is removed
 * from `widget`.
 * @param name the prefix for actions in @group
 * @param group a #GActionGroup, or %NULL
 */
insert_action_group(name: string, group?: (Gio.ActionGroup | null)): void
/**
 * Computes the intersection of a `widget’`s area and `area,` storing
 * the intersection in `intersection,` and returns %TRUE if there was
 * an intersection.  `intersection` may be %NULL if you’re only
 * interested in whether there was an intersection.
 * @param area a rectangle
 * @returns %TRUE if there was an intersection
 */
intersect(area: Gdk.Rectangle): [boolean, Gdk.Rectangle | null]
/**
 * Determines whether `widget` is somewhere inside `ancestor,` possibly with
 * intermediate containers.
 * @param ancestor another #GtkWidget
 * @returns %TRUE if @ancestor contains @widget as a child,    grandchild, great grandchild, etc.
 */
is_ancestor(ancestor: Gtk.Widget): boolean
/**
 * Whether `widget` can rely on having its alpha channel
 * drawn correctly. On X11 this function returns whether a
 * compositing manager is running for `widget’`s screen.
 * 
 * Please note that the semantics of this call will change
 * in the future if used on a widget that has a composited
 * window in its hierarchy (as set by gdk_window_set_composited()).
 * @returns %TRUE if the widget can rely on its alpha channel being drawn correctly.
 */
is_composited(): boolean
/**
 * Determines whether `widget` can be drawn to. A widget can be drawn
 * to if it is mapped and visible.
 * @returns %TRUE if @widget is drawable, %FALSE otherwise
 */
is_drawable(): boolean
/**
 * Returns the widget’s effective sensitivity, which means
 * it is sensitive itself and also its parent widget is sensitive
 * @returns %TRUE if the widget is effectively sensitive
 */
is_sensitive(): boolean
/**
 * Determines whether `widget` is a toplevel widget.
 * 
 * Currently only #GtkWindow and #GtkInvisible (and out-of-process
 * #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
 * widget.
 * @returns %TRUE if @widget is a toplevel, %FALSE otherwise
 */
is_toplevel(): boolean
/**
 * Determines whether the widget and all its parents are marked as
 * visible.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See also gtk_widget_get_visible() and gtk_widget_set_visible()
 * @returns %TRUE if the widget and all its parents are visible
 */
is_visible(): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 * @returns %TRUE if stopping keyboard navigation is fine, %FALSE               if the emitting widget should try to handle the keyboard               navigation attempt in its parent container(s).
 */
keynav_failed(direction: Gtk.DirectionType): boolean
/**
 * Lists the closures used by `widget` for accelerator group connections
 * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
 * The closures can be used to monitor accelerator changes on `widget,`
 * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
 * #GtkAccelGroup of a closure which can be found out with
 * gtk_accel_group_from_accel_closure().
 * @returns a newly allocated #GList of closures
 */
list_accel_closures(): GObject.Closure[]
/**
 * Retrieves a %NULL-terminated array of strings containing the prefixes of
 * #GActionGroup's available to `widget`.
 * @returns a %NULL-terminated array of strings.
 */
list_action_prefixes(): string[]
/**
 * Returns a newly allocated list of the widgets, normally labels, for
 * which this widget is the target of a mnemonic (see for example,
 * gtk_label_set_mnemonic_widget()).
 * 
 * The widgets in the list are not individually referenced. If you
 * want to iterate through the list and perform actions involving
 * callbacks that might destroy the widgets, you
 * must call `g_list_foreach (result,
 * (GFunc)g_object_ref, NULL)` first, and then unref all the
 * widgets afterwards.
 * @returns the list of  mnemonic labels; free this list  with g_list_free() when you are done with it.
 */
list_mnemonic_labels(): Gtk.Widget[]
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
map(): void
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 * @returns %TRUE if the signal has been handled
 */
mnemonic_activate(group_cycling: boolean): boolean
/**
 * Sets the base color for a widget in a particular state.
 * All other style values are left untouched. The base color
 * is the background color used along with the text color
 * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
 * and #GtkTextView. See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > base color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the base color on that.
 * @param state the state for which to set the base color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_base().
 */
modify_base(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > background color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the background color on that.
 * @param state the state for which to set the background color
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_bg().
 */
modify_bg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the #GtkWidget
 * cursor-color and secondary-cursor-color
 * style properties.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param primary the color to use for primary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_cursor().
 * @param secondary the color to use for secondary cursor (does     not need to be allocated), or %NULL to undo the effect of     previous calls to of gtk_widget_modify_cursor().
 */
modify_cursor(primary?: (Gdk.Color | null), secondary?: (Gdk.Color | null)): void
/**
 * Sets the foreground color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the foreground color
 * @param color the color to assign (does not need to be allocated),     or %NULL to undo the effect of previous calls to     of gtk_widget_modify_fg().
 */
modify_fg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the font to use for a widget.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param font_desc the font description to use, or %NULL     to undo the effect of previous calls to gtk_widget_modify_font()
 */
modify_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Modifies style values on the widget.
 * 
 * Modifications made using this technique take precedence over
 * style values set via an RC file, however, they will be overridden
 * if a style is explicitly set on the widget using gtk_widget_set_style().
 * The #GtkRcStyle-struct is designed so each field can either be
 * set or unset, so it is possible, using this function, to modify some
 * style values and leave the others unchanged.
 * 
 * Note that modifications made with this function are not cumulative
 * with previous calls to gtk_widget_modify_style() or with such
 * functions as gtk_widget_modify_fg(). If you wish to retain
 * previous values, you must first call gtk_widget_get_modifier_style(),
 * make your modifications to the returned style, then call
 * gtk_widget_modify_style() with that style. On the other hand,
 * if you first call gtk_widget_modify_style(), subsequent calls
 * to such functions gtk_widget_modify_fg() will have a cumulative
 * effect with the initial modifications.
 * @param style the #GtkRcStyle-struct holding the style modifications
 */
modify_style(style: Gtk.RcStyle): void
/**
 * Sets the text color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * The text color is the foreground color used along with the
 * base color (see gtk_widget_modify_base()) for widgets such
 * as #GtkEntry and #GtkTextView.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the text color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_text().
 */
modify_text(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color to use for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color().
 * @param state the state for which to set the background color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_background_color()
 */
override_background_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the color to use for a widget.
 * 
 * All other style values are left untouched.
 * 
 * This function does not act recursively. Setting the color of a
 * container does not affect its children. Note that some widgets that
 * you may not think of as containers, for instance #GtkButtons,
 * are actually containers.
 * 
 * This API is mostly meant as a quick way for applications to
 * change a widget appearance. If you are developing a widgets
 * library and intend this change to be themeable, it is better
 * done by setting meaningful CSS classes in your
 * widget/container implementation through gtk_style_context_add_class().
 * 
 * This way, your widget library can install a #GtkCssProvider
 * with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
 * to provide a default styling for those widgets that need so, and
 * this theming may fully overridden by the user’s theme.
 * 
 * Note that for complex widgets this may bring in undesired
 * results (such as uniform background color everywhere), in
 * these cases it is better to fully style such widgets through a
 * #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
 * priority.
 * @param state the state for which to set the color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_color()
 */
override_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the
 * cursor-color and secondary-cursor-color
 * style properties. All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * Note that the underlying properties have the #GdkColor type,
 * so the alpha value in `primary` and `secondary` will be ignored.
 * @param cursor the color to use for primary cursor (does not need to be     allocated), or %NULL to undo the effect of previous calls to     of gtk_widget_override_cursor().
 * @param secondary_cursor the color to use for secondary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_override_cursor().
 */
override_cursor(cursor?: (Gdk.RGBA | null), secondary_cursor?: (Gdk.RGBA | null)): void
/**
 * Sets the font to use for a widget. All other style values are
 * left untouched. See gtk_widget_override_color().
 * @param font_desc the font description to use, or %NULL to undo     the effect of previous calls to gtk_widget_override_font()
 */
override_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Sets a symbolic color for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color() for overriding the foreground
 * or background color.
 * @param name the name of the symbolic color to modify
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to gtk_widget_override_symbolic_color()
 */
override_symbolic_color(name: string, color?: (Gdk.RGBA | null)): void
/**
 * Obtains the full path to `widget`. The path is simply the name of a
 * widget and all its parents in the container hierarchy, separated by
 * periods. The name of a widget comes from
 * gtk_widget_get_name(). Paths are used to apply styles to a widget
 * in gtkrc configuration files. Widget names are the type of the
 * widget by default (e.g. “GtkButton”) or can be set to an
 * application-specific value with gtk_widget_set_name(). By setting
 * the name of a widget, you allow users or theme authors to apply
 * styles to that specific widget in their gtkrc
 * file. `path_reversed_p` fills in the path in reverse order,
 * i.e. starting with `widget’`s name instead of starting with the name
 * of `widget’`s outermost ancestor.
 */
path(): [number, string, string]
/**
 * This function is only for use in widget implementations.
 * 
 * Flags the widget for a rerun of the GtkWidgetClass::size_allocate
 * function. Use this function instead of gtk_widget_queue_resize()
 * when the `widget'`s size request didn't change but it wants to
 * reposition its contents.
 * 
 * An example user of this function is gtk_widget_set_halign().
 */
queue_allocate(): void
/**
 * Mark `widget` as needing to recompute its expand flags. Call
 * this function when setting legacy expand child properties
 * on the child of a container.
 * 
 * See gtk_widget_compute_expand().
 */
queue_compute_expand(): void
/**
 * Equivalent to calling gtk_widget_queue_draw_area() for the
 * entire area of a widget.
 */
queue_draw(): void
/**
 * Convenience function that calls gtk_widget_queue_draw_region() on
 * the region created from the given coordinates.
 * 
 * The region here is specified in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(), and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 * 
 * `width` or `height` may be 0, in this case this function does
 * nothing. Negative values for `width` and `height` are not allowed.
 * @param x x coordinate of upper-left corner of rectangle to redraw
 * @param y y coordinate of upper-left corner of rectangle to redraw
 * @param width width of region to draw
 * @param height height of region to draw
 */
queue_draw_area(x: number, y: number, width: number, height: number): void
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
queue_draw_region(region: cairo.Region): void
/**
 * This function is only for use in widget implementations.
 * Flags a widget to have its size renegotiated; should
 * be called when a widget for some reason has a new size request.
 * For example, when you change the text in a #GtkLabel, #GtkLabel
 * queues a resize to ensure there’s enough space for the new text.
 * 
 * Note that you cannot call gtk_widget_queue_resize() on a widget
 * from inside its implementation of the GtkWidgetClass::size_allocate
 * virtual method. Calls to gtk_widget_queue_resize() from inside
 * GtkWidgetClass::size_allocate will be silently ignored.
 */
queue_resize(): void
/**
 * This function works like gtk_widget_queue_resize(),
 * except that the widget is not invalidated.
 */
queue_resize_no_redraw(): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
realize(): void
/**
 * Computes the intersection of a `widget’`s area and `region,` returning
 * the intersection. The result may be empty, use cairo_region_is_empty() to
 * check.
 * @param region a #cairo_region_t, in the same coordinate system as          @widget->allocation. That is, relative to @widget->window          for widgets which return %FALSE from gtk_widget_get_has_window();          relative to the parent window of @widget->window otherwise.
 * @returns A newly allocated region holding the intersection of @widget     and @region.
 */
region_intersect(region: cairo.Region): cairo.Region
/**
 * Registers a #GdkWindow with the widget and sets it up so that
 * the widget receives events for it. Call gtk_widget_unregister_window()
 * when destroying the window.
 * 
 * Before 3.8 you needed to call gdk_window_set_user_data() directly to set
 * this up. This is now deprecated and you should use gtk_widget_register_window()
 * instead. Old code will keep working as is, although some new features like
 * transparency might not work perfectly.
 * @param window a #GdkWindow
 */
register_window(window: Gdk.Window): void
/**
 * Removes an accelerator from `widget,` previously installed with
 * gtk_widget_add_accelerator().
 * @param accel_group accel group for this widget
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @returns whether an accelerator was installed and could be removed
 */
remove_accelerator(accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType): boolean
/**
 * Removes a widget from the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
 * must have previously been added to the list with
 * gtk_widget_add_mnemonic_label().
 * @param label a #GtkWidget that was previously set as a mnemonic label for         @widget with gtk_widget_add_mnemonic_label().
 */
remove_mnemonic_label(label: Gtk.Widget): void
/**
 * Removes a tick callback previously registered with
 * gtk_widget_add_tick_callback().
 * @param id an id returned by gtk_widget_add_tick_callback()
 */
remove_tick_callback(id: number): void
/**
 * A convenience function that uses the theme settings for `widget`
 * to look up `stock_id` and render it to a pixbuf. `stock_id` should
 * be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size`
 * should be a size such as #GTK_ICON_SIZE_MENU. `detail` should be a
 * string that identifies the widget or code doing the rendering, so
 * that theme engines can special-case rendering for that widget or
 * code.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be
 * freed after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @param detail render detail to pass to theme engine
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon(stock_id: string, size: number, detail?: (string | null)): (GdkPixbuf.Pixbuf | null)
/**
 * A convenience function that uses the theme engine and style
 * settings for `widget` to look up `stock_id` and render it to
 * a pixbuf. `stock_id` should be a stock icon ID such as
 * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
 * such as #GTK_ICON_SIZE_MENU.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be freed
 * after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon_pixbuf(stock_id: string, size: number): (GdkPixbuf.Pixbuf | null)
/**
 * Moves a widget from one #GtkContainer to another, handling reference
 * count issues to avoid destroying the widget.
 * @param new_parent a #GtkContainer to move the widget into
 */
reparent(new_parent: Gtk.Widget): void
/**
 * Reset the styles of `widget` and all descendents, so when
 * they are looked up again, they get the correct values
 * for the currently loaded RC file settings.
 * 
 * This function is not useful for applications.
 */
reset_rc_styles(): void
/**
 * Updates the style context of `widget` and all descendants
 * by updating its widget path. #GtkContainers may want
 * to use this on a child when reordering it in a way that a different
 * style might apply to it. See also gtk_container_get_path_for_child().
 */
reset_style(): void
/**
 * Very rarely-used function. This function is used to emit
 * an expose event on a widget. This function is not normally used
 * directly. The only time it is used is when propagating an expose
 * event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
 * and that is normally done using gtk_container_propagate_draw().
 * 
 * If you want to force an area of a window to be redrawn,
 * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
 * To cause the redraw to be done immediately, follow that call
 * with a call to gdk_window_process_updates().
 * @param event a expose #GdkEvent
 * @returns return from the event signal emission (%TRUE if   the event was handled)
 */
send_expose(event: Gdk.Event): number
/**
 * Sends the focus change `event` to `widget`
 * 
 * This function is not meant to be used by applications. The only time it
 * should be used is when it is necessary for a #GtkWidget to assign focus
 * to a widget that is semantically owned by the first widget even though
 * it’s not a direct child - for instance, a search entry in a floating
 * window similar to the quick search in #GtkTreeView.
 * 
 * An example of its usage is:
 * 
 * 
 * ```c
 *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
 * 
 *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
 *   fevent->focus_change.in = TRUE;
 *   fevent->focus_change.window = _gtk_widget_get_window (widget);
 *   if (fevent->focus_change.window != NULL)
 *     g_object_ref (fevent->focus_change.window);
 * 
 *   gtk_widget_send_focus_change (widget, fevent);
 * 
 *   gdk_event_free (event);
 * ```
 * 
 * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
 * @returns the return value from the event signal emission: %TRUE   if the event was handled, and %FALSE otherwise
 */
send_focus_change(event: Gdk.Event): boolean
/**
 * Given an accelerator group, `accel_group,` and an accelerator path,
 * `accel_path,` sets up an accelerator in `accel_group` so whenever the
 * key binding that is defined for `accel_path` is pressed, `widget`
 * will be activated.  This removes any accelerators (for any
 * accelerator group) installed by previous calls to
 * gtk_widget_set_accel_path(). Associating accelerators with
 * paths allows them to be modified by the user and the modifications
 * to be saved for future use. (See gtk_accel_map_save().)
 * 
 * This function is a low level function that would most likely
 * be used by a menu creation system like #GtkUIManager. If you
 * use #GtkUIManager, setting up accelerator paths will be done
 * automatically.
 * 
 * Even when you you aren’t using #GtkUIManager, if you only want to
 * set up accelerators on menu items gtk_menu_item_set_accel_path()
 * provides a somewhat more convenient interface.
 * 
 * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
 * pass a static string, you can save some memory by interning it first with
 * g_intern_static_string().
 * @param accel_path path used to look up the accelerator
 * @param accel_group a #GtkAccelGroup.
 */
set_accel_path(accel_path?: (string | null), accel_group?: (Gtk.AccelGroup | null)): void
/**
 * Sets the widget’s allocation.  This should not be used
 * directly, but from within a widget’s size_allocate method.
 * 
 * The allocation set should be the “adjusted” or actual
 * allocation. If you’re implementing a #GtkContainer, you want to use
 * gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
 * The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
 * allocation inside gtk_widget_size_allocate() to create an adjusted
 * allocation.
 * @param allocation a pointer to a #GtkAllocation to copy from
 */
set_allocation(allocation: Gtk.Allocation): void
/**
 * Sets whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * This is a hint to the widget and does not affect the behavior of
 * the GTK+ core; many widgets ignore this flag entirely. For widgets
 * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
 * the effect is to suppress default themed drawing of the widget's
 * background. (Children of the widget will still be drawn.) The application
 * is then entirely responsible for drawing the widget background.
 * 
 * Note that the background is still drawn when the widget is mapped.
 * @param app_paintable %TRUE if the application will paint on the widget
 */
set_app_paintable(app_paintable: boolean): void
/**
 * Specifies whether `widget` can be a default widget. See
 * gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param can_default whether or not @widget can be a default widget.
 */
set_can_default(can_default: boolean): void
/**
 * Specifies whether `widget` can own the input focus. See
 * gtk_widget_grab_focus() for actually setting the input focus on a
 * widget.
 * @param can_focus whether or not @widget can own the input focus.
 */
set_can_focus(can_focus: boolean): void
/**
 * Sets whether `widget` should be mapped along with its when its parent
 * is mapped and `widget` has been shown with gtk_widget_show().
 * 
 * The child visibility can be set for widget before it is added to
 * a container with gtk_widget_set_parent(), to avoid mapping
 * children unnecessary before immediately unmapping them. However
 * it will be reset to its default state of %TRUE when the widget
 * is removed from a container.
 * 
 * Note that changing the child visibility of a widget does not
 * queue a resize on the widget. Most of the time, the size of
 * a widget is computed from all visible children, whether or
 * not they are mapped. If this is not the case, the container
 * can queue a resize itself.
 * 
 * This function is only useful for container implementations and
 * never should be called by an application.
 * @param is_visible if %TRUE, @widget should be mapped along with its parent.
 */
set_child_visible(is_visible: boolean): void
/**
 * Sets the widget’s clip.  This must not be used directly,
 * but from within a widget’s size_allocate method.
 * It must be called after gtk_widget_set_allocation() (or after chaining up
 * to the parent class), because that function resets the clip.
 * 
 * The clip set should be the area that `widget` draws on. If `widget` is a
 * #GtkContainer, the area must contain all children's clips.
 * 
 * If this function is not called by `widget` during a ::size-allocate handler,
 * the clip will be set to `widget'`s allocation.
 * @param clip a pointer to a #GtkAllocation to copy from
 */
set_clip(clip: Gtk.Allocation): void
/**
 * Sets a widgets composite name. The widget must be
 * a composite child of its parent; see gtk_widget_push_composite_child().
 * @param name the name to set
 */
set_composite_name(name: string): void
/**
 * Enables or disables a #GdkDevice to interact with `widget`
 * and all its children.
 * 
 * It does so by descending through the #GdkWindow hierarchy
 * and enabling the same mask that is has for core events
 * (i.e. the one that gdk_window_get_events() returns).
 * @param device a #GdkDevice
 * @param enabled whether to enable the device
 */
set_device_enabled(device: Gdk.Device, enabled: boolean): void
/**
 * Sets the device event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive from `device`. Keep
 * in mind that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_device_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with windowless widgets (which return
 * %FALSE from gtk_widget_get_has_window());
 * to get events on those widgets, place them inside a #GtkEventBox
 * and receive events on the event box.
 * @param device a #GdkDevice
 * @param events event mask
 */
set_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Sets the reading direction on a particular widget. This direction
 * controls the primary direction for widgets containing text,
 * and also the direction in which the children of a container are
 * packed. The ability to set the direction is present in order
 * so that correct localization into languages with right-to-left
 * reading directions can be done. Generally, applications will
 * let the default reading direction present, except for containers
 * where the containers are arranged in an order that is explicitly
 * visual rather than logical (such as buttons for text justification).
 * 
 * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
 * set by gtk_widget_set_default_direction() will be used.
 * @param dir the new direction
 */
set_direction(dir: Gtk.TextDirection): void
/**
 * Widgets are double buffered by default; you can use this function
 * to turn off the buffering. “Double buffered” simply means that
 * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
 * automatically around expose events sent to the
 * widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
 * window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
 * buffer to the screen. The result is that users see the window
 * update in one smooth step, and don’t see individual graphics
 * primitives being rendered.
 * 
 * In very simple terms, double buffered widgets don’t flicker,
 * so you would only use this function to turn off double buffering
 * if you had special needs and really knew what you were doing.
 * 
 * Note: if you turn off double-buffering, you have to handle
 * expose events, since even the clearing to the background color or
 * pixmap will not happen automatically (as it is done in
 * gdk_window_begin_draw_frame()).
 * 
 * In 3.10 GTK and GDK have been restructured for translucent drawing. Since
 * then expose events for double-buffered widgets are culled into a single
 * event to the toplevel GDK window. If you now unset double buffering, you
 * will cause a separate rendering pass for every widget. This will likely
 * cause rendering problems - in particular related to stacking - and usually
 * increases rendering times significantly.
 * @param double_buffered %TRUE to double-buffer a widget
 */
set_double_buffered(double_buffered: boolean): void
/**
 * Sets the event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive. Keep in mind
 * that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with widgets that have no window.
 * (See gtk_widget_get_has_window()).  To get events on those widgets,
 * place them inside a #GtkEventBox and receive events on the event
 * box.
 * @param events event mask
 */
set_events(events: number): void
/**
 * Sets whether the widget should grab focus when it is clicked with the mouse.
 * Making mouse clicks not grab focus is useful in places like toolbars where
 * you don’t want the keyboard focus removed from the main area of the
 * application.
 * @param focus_on_click whether the widget should grab focus when clicked with the mouse
 */
set_focus_on_click(focus_on_click: boolean): void
/**
 * Sets the font map to use for Pango rendering. When not set, the widget
 * will inherit the font map from its parent.
 * @param font_map a #PangoFontMap, or %NULL to unset any previously     set font map
 */
set_font_map(font_map?: (Pango.FontMap | null)): void
/**
 * Sets the #cairo_font_options_t used for Pango rendering in this widget.
 * When not set, the default font options for the #GdkScreen will be used.
 * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
 */
set_font_options(options?: (cairo.FontOptions | null)): void
/**
 * Sets the horizontal alignment of `widget`.
 * See the #GtkWidget:halign property.
 * @param align the horizontal alignment
 */
set_halign(align: Gtk.Align): void
/**
 * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
 * #GtkWidget:has-tooltip for more information.
 * @param has_tooltip whether or not @widget has a tooltip.
 */
set_has_tooltip(has_tooltip: boolean): void
/**
 * Specifies whether `widget` has a #GdkWindow of its own. Note that
 * all realized widgets have a non-%NULL “window” pointer
 * (gtk_widget_get_window() never returns a %NULL window when a widget
 * is realized), but for many of them it’s actually the #GdkWindow of
 * one of its parent widgets. Widgets that do not create a %window for
 * themselves in #GtkWidget::realize must announce this by
 * calling this function with `has_window` = %FALSE.
 * 
 * This function should only be called by widget implementations,
 * and they should call it in their init() function.
 * @param has_window whether or not @widget has a window.
 */
set_has_window(has_window: boolean): void
/**
 * Sets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Call this function to set the expand flag if you would like your
 * widget to become larger horizontally when the window has extra
 * room.
 * 
 * By default, widgets automatically expand if any of their children
 * want to expand. (To see if a widget will automatically expand given
 * its current children and state, call gtk_widget_compute_expand(). A
 * container can decide how the expandability of children affects the
 * expansion of the container by overriding the compute_expand virtual
 * method on #GtkWidget.).
 * 
 * Setting hexpand explicitly with this function will override the
 * automatic expand behavior.
 * 
 * This function forces the widget to expand or not to expand,
 * regardless of children.  The override occurs because
 * gtk_widget_set_hexpand() sets the hexpand-set property (see
 * gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
 * value to be used, rather than looking at children and widget state.
 * @param expand whether to expand
 */
set_hexpand(expand: boolean): void
/**
 * Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
 * be used.
 * 
 * The hexpand-set property will be set automatically when you call
 * gtk_widget_set_hexpand() to set hexpand, so the most likely
 * reason to use this function would be to unset an explicit expand
 * flag.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @param set value for hexpand-set property
 */
set_hexpand_set(set: boolean): void
/**
 * Marks the widget as being mapped.
 * 
 * This function should only ever be called in a derived widget's
 * “map” or “unmap” implementation.
 * @param mapped %TRUE to mark the widget as mapped
 */
set_mapped(mapped: boolean): void
/**
 * Sets the bottom margin of `widget`.
 * See the #GtkWidget:margin-bottom property.
 * @param margin the bottom margin
 */
set_margin_bottom(margin: number): void
/**
 * Sets the end margin of `widget`.
 * See the #GtkWidget:margin-end property.
 * @param margin the end margin
 */
set_margin_end(margin: number): void
/**
 * Sets the left margin of `widget`.
 * See the #GtkWidget:margin-left property.
 * @param margin the left margin
 */
set_margin_left(margin: number): void
/**
 * Sets the right margin of `widget`.
 * See the #GtkWidget:margin-right property.
 * @param margin the right margin
 */
set_margin_right(margin: number): void
/**
 * Sets the start margin of `widget`.
 * See the #GtkWidget:margin-start property.
 * @param margin the start margin
 */
set_margin_start(margin: number): void
/**
 * Sets the top margin of `widget`.
 * See the #GtkWidget:margin-top property.
 * @param margin the top margin
 */
set_margin_top(margin: number): void
/**
 * Widgets can be named, which allows you to refer to them from a
 * CSS file. You can apply a style to widgets with a particular name
 * in the CSS file. See the documentation for the CSS syntax (on the
 * same page as the docs for #GtkStyleContext).
 * 
 * Note that the CSS syntax has certain special characters to delimit
 * and represent elements in a selector (period, #, >, *...), so using
 * these will make your widget impossible to match by name. Any combination
 * of alphanumeric symbols, dashes and underscores will suffice.
 * @param name name for the widget
 */
set_name(name: string): void
/**
 * Sets the #GtkWidget:no-show-all property, which determines whether
 * calls to gtk_widget_show_all() will affect this widget.
 * 
 * This is mostly for use in constructing widget hierarchies with externally
 * controlled visibility, see #GtkUIManager.
 * @param no_show_all the new value for the “no-show-all” property
 */
set_no_show_all(no_show_all: boolean): void
/**
 * Request the `widget` to be rendered partially transparent,
 * with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
 * are clamped to the [0,1] range.).
 * This works on both toplevel widget, and child widgets, although there
 * are some limitations:
 * 
 * For toplevel widgets this depends on the capabilities of the windowing
 * system. On X11 this has any effect only on X screens with a compositing manager
 * running. See gtk_widget_is_composited(). On Windows it should work
 * always, although setting a window’s opacity after the window has been
 * shown causes it to flicker once on Windows.
 * 
 * For child widgets it doesn’t work if any affected widget has a native window, or
 * disables double buffering.
 * @param opacity desired opacity, between 0 and 1
 */
set_opacity(opacity: number): void
/**
 * This function is useful only when implementing subclasses of
 * #GtkContainer.
 * Sets the container as the parent of `widget,` and takes care of
 * some details such as updating the state and style of the child
 * to reflect its new location. The opposite function is
 * gtk_widget_unparent().
 * @param parent parent container
 */
set_parent(parent: Gtk.Widget): void
/**
 * Sets a non default parent window for `widget`.
 * 
 * For #GtkWindow classes, setting a `parent_window` effects whether
 * the window is a toplevel window or can be embedded into other
 * widgets.
 * 
 * For #GtkWindow classes, this needs to be called before the
 * window is realized.
 * @param parent_window the new parent window.
 */
set_parent_window(parent_window: Gdk.Window): void
/**
 * Marks the widget as being realized. This function must only be
 * called after all #GdkWindows for the `widget` have been created
 * and registered.
 * 
 * This function should only ever be called in a derived widget's
 * “realize” or “unrealize” implementation.
 * @param realized %TRUE to mark the widget as realized
 */
set_realized(realized: boolean): void
/**
 * Specifies whether `widget` will be treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param receives_default whether or not @widget can be a default widget.
 */
set_receives_default(receives_default: boolean): void
/**
 * Sets whether the entire widget is queued for drawing when its size
 * allocation changes. By default, this setting is %TRUE and
 * the entire widget is redrawn on every size change. If your widget
 * leaves the upper left unchanged when made bigger, turning this
 * setting off will improve performance.
 * 
 * Note that for widgets where gtk_widget_get_has_window() is %FALSE
 * setting this flag to %FALSE turns off all allocation on resizing:
 * the widget will not even redraw if its position changes; this is to
 * allow containers that don’t draw anything to avoid excess
 * invalidations. If you set this flag on a widget with no window that
 * does draw on `widget->`window, you are
 * responsible for invalidating both the old and new allocation of the
 * widget when the widget is moved and responsible for invalidating
 * regions newly when the widget increases size.
 * @param redraw_on_allocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
 */
set_redraw_on_allocate(redraw_on_allocate: boolean): void
/**
 * Sets the sensitivity of a widget. A widget is sensitive if the user
 * can interact with it. Insensitive widgets are “grayed out” and the
 * user can’t interact with them. Insensitive widgets are known as
 * “inactive”, “disabled”, or “ghosted” in some other toolkits.
 * @param sensitive %TRUE to make the widget sensitive
 */
set_sensitive(sensitive: boolean): void
/**
 * Sets the minimum size of a widget; that is, the widget’s size
 * request will be at least `width` by `height`. You can use this
 * function to force a widget to be larger than it normally would be.
 * 
 * In most cases, gtk_window_set_default_size() is a better choice for
 * toplevel windows than this function; setting the default size will
 * still allow users to shrink the window. Setting the size request
 * will force them to leave the window at least as large as the size
 * request. When dealing with window sizes,
 * gtk_window_set_geometry_hints() can be a useful function as well.
 * 
 * Note the inherent danger of setting any fixed size - themes,
 * translations into other languages, different fonts, and user action
 * can all change the appropriate size for a given widget. So, it's
 * basically impossible to hardcode a size that will always be
 * correct.
 * 
 * The size request of a widget is the smallest size a widget can
 * accept while still functioning well and drawing itself correctly.
 * However in some strange cases a widget may be allocated less than
 * its requested size, and in many cases a widget may be allocated more
 * space than it requested.
 * 
 * If the size request in a given direction is -1 (unset), then
 * the “natural” size request of the widget will be used instead.
 * 
 * The size request set here does not include any margin from the
 * #GtkWidget properties margin-left, margin-right, margin-top, and
 * margin-bottom, but it does include pretty much all other padding
 * or border properties set by any subclass of #GtkWidget.
 * @param width width @widget should request, or -1 to unset
 * @param height height @widget should request, or -1 to unset
 */
set_size_request(width: number, height: number): void
/**
 * This function is for use in widget implementations. Sets the state
 * of a widget (insensitive, prelighted, etc.) Usually you should set
 * the state using wrapper functions such as gtk_widget_set_sensitive().
 * @param state new state for @widget
 */
set_state(state: Gtk.StateType): void
/**
 * This function is for use in widget implementations. Turns on flag
 * values in the current widget state (insensitive, prelighted, etc.).
 * 
 * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
 * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
 * direction, use gtk_widget_set_direction().
 * 
 * It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
 * will be propagated down to all non-internal children if `widget` is a
 * #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
 * down to all #GtkContainer children by different means than turning on the
 * state flag down the hierarchy, both gtk_widget_get_state_flags() and
 * gtk_widget_is_sensitive() will make use of these.
 * @param flags State flags to turn on
 * @param clear Whether to clear state before turning on @flags
 */
set_state_flags(flags: Gtk.StateFlags, clear: boolean): void
/**
 * Used to set the #GtkStyle for a widget (`widget->`style). Since
 * GTK 3, this function does nothing, the passed in style is ignored.
 * @param style a #GtkStyle, or %NULL to remove the effect     of a previous call to gtk_widget_set_style() and go back to     the default style
 */
set_style(style?: (Gtk.Style | null)): void
/**
 * Enables or disables multiple pointer awareness. If this setting is %TRUE,
 * `widget` will start receiving multiple, per device enter/leave events. Note
 * that if custom #GdkWindows are created in #GtkWidget::realize,
 * gdk_window_set_support_multidevice() will have to be called manually on them.
 * @param support_multidevice %TRUE to support input from multiple devices.
 */
set_support_multidevice(support_multidevice: boolean): void
/**
 * Sets `markup` as the contents of the tooltip, which is marked up with
 *  the [Pango text markup language][PangoMarkupFormat].
 * 
 * This function will take care of setting #GtkWidget:has-tooltip to %TRUE
 * and of the default handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-markup property and
 * gtk_tooltip_set_markup().
 * @param markup the contents of the tooltip for @widget, or %NULL
 */
set_tooltip_markup(markup?: (string | null)): void
/**
 * Sets `text` as the contents of the tooltip. This function will take
 * care of setting #GtkWidget:has-tooltip to %TRUE and of the default
 * handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
 * @param text the contents of the tooltip for @widget
 */
set_tooltip_text(text?: (string | null)): void
/**
 * Replaces the default window used for displaying
 * tooltips with `custom_window`. GTK+ will take care of showing and
 * hiding `custom_window` at the right moment, to behave likewise as
 * the default tooltip window. If `custom_window` is %NULL, the default
 * tooltip window will be used.
 * @param custom_window a #GtkWindow, or %NULL
 */
set_tooltip_window(custom_window?: (Gtk.Window | null)): void
/**
 * Sets the vertical alignment of `widget`.
 * See the #GtkWidget:valign property.
 * @param align the vertical alignment
 */
set_valign(align: Gtk.Align): void
/**
 * Sets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_set_hexpand() for more detail.
 * @param expand whether to expand
 */
set_vexpand(expand: boolean): void
/**
 * Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
 * be used.
 * 
 * See gtk_widget_set_hexpand_set() for more detail.
 * @param set value for vexpand-set property
 */
set_vexpand_set(set: boolean): void
/**
 * Sets the visibility state of `widget`. Note that setting this to
 * %TRUE doesn’t mean the widget is actually viewable, see
 * gtk_widget_get_visible().
 * 
 * This function simply calls gtk_widget_show() or gtk_widget_hide()
 * but is nicer to use when the visibility of the widget depends on
 * some condition.
 * @param visible whether the widget should be shown or not
 */
set_visible(visible: boolean): void
/**
 * Sets the visual that should be used for by widget and its children for
 * creating #GdkWindows. The visual must be on the same #GdkScreen as
 * returned by gtk_widget_get_screen(), so handling the
 * #GtkWidget::screen-changed signal is necessary.
 * 
 * Setting a new `visual` will not cause `widget` to recreate its windows,
 * so you should call this function before `widget` is realized.
 * @param visual visual to be used or %NULL to unset a previous one
 */
set_visual(visual?: (Gdk.Visual | null)): void
/**
 * Sets a widget’s window. This function should only be used in a
 * widget’s #GtkWidget::realize implementation. The %window passed is
 * usually either new window created with gdk_window_new(), or the
 * window of its parent widget as returned by
 * gtk_widget_get_parent_window().
 * 
 * Widgets must indicate whether they will create their own #GdkWindow
 * by calling gtk_widget_set_has_window(). This is usually done in the
 * widget’s init() function.
 * 
 * Note that this function does not add any reference to `window`.
 * @param window a #GdkWindow
 */
set_window(window: Gdk.Window): void
/**
 * Sets a shape for this widget’s GDK window. This allows for
 * transparent windows etc., see gdk_window_shape_combine_region()
 * for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
show_all(): void
/**
 * Shows a widget. If the widget is an unmapped toplevel widget
 * (i.e. a #GtkWindow that has not yet been shown), enter the main
 * loop and wait for the window to actually be mapped. Be careful;
 * because the main loop is running, anything can happen during
 * this function.
 */
show_now(): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
size_allocate(allocation: Gtk.Allocation): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size,
 * position and (optionally) baseline to their child widgets.
 * 
 * In this function, the allocation and baseline may be adjusted. It
 * will be forced to a 1x1 minimum size, and the
 * adjust_size_allocation virtual and adjust_baseline_allocation
 * methods on the child will be used to adjust the allocation and
 * baseline. Standard adjustments include removing the widget's
 * margins, and applying the widget’s #GtkWidget:halign and
 * #GtkWidget:valign properties.
 * 
 * If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
 * baseline argument is ignored and -1 is used instead.
 * @param allocation position and size to be allocated to @widget
 * @param baseline The baseline of the child, or -1
 */
size_allocate_with_baseline(allocation: Gtk.Allocation, baseline: number): void
/**
 * This function is typically used when implementing a #GtkContainer
 * subclass.  Obtains the preferred size of a widget. The container
 * uses this information to arrange its child widgets and decide what
 * size allocations to give them with gtk_widget_size_allocate().
 * 
 * You can also call this function from an application, with some
 * caveats. Most notably, getting a size request requires the widget
 * to be associated with a screen, because font information may be
 * needed. Multihead-aware applications should keep this in mind.
 * 
 * Also remember that the size request is not necessarily the size
 * a widget will actually be allocated.
 */
size_request(): Gtk.Requisition
/**
 * This function attaches the widget’s #GtkStyle to the widget's
 * #GdkWindow. It is a replacement for
 * 
 * 
 * ```
 * widget->style = gtk_style_attach (widget->style, widget->window);
 * ```
 * 
 * 
 * and should only ever be called in a derived widget’s “realize”
 * implementation which does not chain up to its parent class'
 * “realize” implementation, because one of the parent classes
 * (finally #GtkWidget) would attach the style itself.
 */
style_attach(): void
/**
 * Gets the value of a style property of `widget`.
 * @param property_name the name of a style property
 * @param value location to return the property value
 */
style_get_property(property_name: string, value: GObject.Value): void
/**
 * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
 * This causes all queued #GtkWidget::child-notify signals on `widget` to be
 * emitted.
 */
thaw_child_notify(): void
/**
 * Translate coordinates relative to `src_widget’`s allocation to coordinates
 * relative to `dest_widget’`s allocations. In order to perform this
 * operation, both widgets must be realized, and must share a common
 * toplevel.
 * @param dest_widget a #GtkWidget
 * @param src_x X position relative to @src_widget
 * @param src_y Y position relative to @src_widget
 * @returns %FALSE if either widget was not realized, or there   was no common ancestor. In this case, nothing is stored in   *@dest_x and *@dest_y. Otherwise %TRUE.
 */
translate_coordinates(dest_widget: Gtk.Widget, src_x: number, src_y: number): [boolean, number, number]
/**
 * Triggers a tooltip query on the display where the toplevel of `widget`
 * is located. See gtk_tooltip_trigger_tooltip_query() for more
 * information.
 */
trigger_tooltip_query(): void
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
unmap(): void
/**
 * This function is only for use in widget implementations.
 * Should be called by implementations of the remove method
 * on #GtkContainer, to dissociate a child from the container.
 */
unparent(): void
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
unrealize(): void
/**
 * Unregisters a #GdkWindow from the widget that was previously set up with
 * gtk_widget_register_window(). You need to call this when the window is
 * no longer used by the widget, such as when you destroy it.
 * @param window a #GdkWindow
 */
unregister_window(window: Gdk.Window): void
/**
 * This function is for use in widget implementations. Turns off flag
 * values for the current widget state (insensitive, prelighted, etc.).
 * See gtk_widget_set_state_flags().
 * @param flags State flags to turn off
 */
unset_state_flags(flags: Gtk.StateFlags): void
vfunc_adjust_baseline_allocation(baseline: number): void
vfunc_adjust_baseline_request(minimum_baseline: number, natural_baseline: number): void
vfunc_adjust_size_allocation(orientation: Gtk.Orientation, minimum_size: number, natural_size: number, allocated_pos: number, allocated_size: number): void
vfunc_adjust_size_request(orientation: Gtk.Orientation, minimum_size: number, natural_size: number): void
vfunc_button_press_event(event: Gdk.EventButton): boolean
vfunc_button_release_event(event: Gdk.EventButton): boolean
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 */
vfunc_can_activate_accel(signal_id: number): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
vfunc_child_notify(child_property: GObject.ParamSpec): void
vfunc_composited_changed(): void
vfunc_compute_expand(hexpand_p: boolean, vexpand_p: boolean): void
vfunc_configure_event(event: Gdk.EventConfigure): boolean
vfunc_damage_event(event: Gdk.EventExpose): boolean
vfunc_delete_event(event: Gdk.EventAny): boolean
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
vfunc_destroy(): void
vfunc_destroy_event(event: Gdk.EventAny): boolean
vfunc_direction_changed(previous_direction: Gtk.TextDirection): void
vfunc_dispatch_child_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_drag_begin(context: Gdk.DragContext): void
vfunc_drag_data_delete(context: Gdk.DragContext): void
vfunc_drag_data_get(context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_data_received(context: Gdk.DragContext, x: number, y: number, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_drop(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_drag_end(context: Gdk.DragContext): void
vfunc_drag_failed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
vfunc_drag_leave(context: Gdk.DragContext, time_: number): void
vfunc_drag_motion(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_draw(cr: cairo.Context): boolean
vfunc_enter_notify_event(event: Gdk.EventCrossing): boolean
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 */
vfunc_event(event: Gdk.Event): boolean
vfunc_focus(direction: Gtk.DirectionType): boolean
vfunc_focus_in_event(event: Gdk.EventFocus): boolean
vfunc_focus_out_event(event: Gdk.EventFocus): boolean
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 */
vfunc_get_accessible(): Atk.Object
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
vfunc_get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
vfunc_get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
vfunc_get_preferred_width_for_height(height: number): [number, number]
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 */
vfunc_get_request_mode(): Gtk.SizeRequestMode
vfunc_grab_broken_event(event: Gdk.EventGrabBroken): boolean
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
vfunc_grab_focus(): void
vfunc_grab_notify(was_grabbed: boolean): void
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
vfunc_hide(): void
vfunc_hierarchy_changed(previous_toplevel: Gtk.Widget): void
vfunc_key_press_event(event: Gdk.EventKey): boolean
vfunc_key_release_event(event: Gdk.EventKey): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 */
vfunc_keynav_failed(direction: Gtk.DirectionType): boolean
vfunc_leave_notify_event(event: Gdk.EventCrossing): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
vfunc_map(): void
vfunc_map_event(event: Gdk.EventAny): boolean
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 */
vfunc_mnemonic_activate(group_cycling: boolean): boolean
vfunc_motion_notify_event(event: Gdk.EventMotion): boolean
vfunc_move_focus(direction: Gtk.DirectionType): void
vfunc_parent_set(previous_parent: Gtk.Widget): void
vfunc_popup_menu(): boolean
vfunc_property_notify_event(event: Gdk.EventProperty): boolean
vfunc_proximity_in_event(event: Gdk.EventProximity): boolean
vfunc_proximity_out_event(event: Gdk.EventProximity): boolean
vfunc_query_tooltip(x: number, y: number, keyboard_tooltip: boolean, tooltip: Gtk.Tooltip): boolean
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
vfunc_queue_draw_region(region: cairo.Region): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
vfunc_realize(): void
vfunc_screen_changed(previous_screen: Gdk.Screen): void
vfunc_scroll_event(event: Gdk.EventScroll): boolean
vfunc_selection_clear_event(event: Gdk.EventSelection): boolean
vfunc_selection_get(selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_selection_notify_event(event: Gdk.EventSelection): boolean
vfunc_selection_received(selection_data: Gtk.SelectionData, time_: number): void
vfunc_selection_request_event(event: Gdk.EventSelection): boolean
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
vfunc_show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
vfunc_show_all(): void
vfunc_show_help(help_type: Gtk.WidgetHelpType): boolean
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
vfunc_size_allocate(allocation: Gtk.Allocation): void
vfunc_state_changed(previous_state: Gtk.StateType): void
vfunc_state_flags_changed(previous_state_flags: Gtk.StateFlags): void
vfunc_style_set(previous_style: Gtk.Style): void
vfunc_style_updated(): void
vfunc_touch_event(event: Gdk.EventTouch): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
vfunc_unmap(): void
vfunc_unmap_event(event: Gdk.EventAny): boolean
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
vfunc_unrealize(): void
vfunc_visibility_notify_event(event: Gdk.EventVisibility): boolean
vfunc_window_state_event(event: Gdk.EventWindowState): boolean
}

module ProgressIcon {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.DrawingArea.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
progress: number;
    }

}

class ProgressIcon extends Gtk.DrawingArea implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.ProgressIcon

    get progress(): number;
    set progress(val: number);

    // Constructors of Dazzle.ProgressIcon


constructor(properties?: Partial<ProgressIcon.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): ProgressIcon;

    // Own methods of Dazzle.ProgressIcon

    get_progress(): number
    set_progress(progress: number): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ProgressMenuButton {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.MenuButton.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Actionable.ConstructorProps, Gtk.Activatable.ConstructorProps, Gtk.Buildable.ConstructorProps {
progress: number;
    show_progress: boolean;
    showProgress: boolean;
    show_theatric: boolean;
    showTheatric: boolean;
    theatric_icon_name: string;
    theatricIconName: string;
    transition_duration: number;
    transitionDuration: number;
    }

}

class ProgressMenuButton extends Gtk.MenuButton implements Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {

    // Own properties of Dazzle.ProgressMenuButton

    get progress(): number;
    set progress(val: number);
    get show_progress(): boolean;
    set show_progress(val: boolean);
    get showProgress(): boolean;
    set showProgress(val: boolean);
    get show_theatric(): boolean;
    set show_theatric(val: boolean);
    get showTheatric(): boolean;
    set showTheatric(val: boolean);
    get theatric_icon_name(): string;
    set theatric_icon_name(val: string);
    get theatricIconName(): string;
    set theatricIconName(val: string);
    get transition_duration(): number;
    set transition_duration(val: number);
    get transitionDuration(): number;
    set transitionDuration(val: number);

    // Constructors of Dazzle.ProgressMenuButton


constructor(properties?: Partial<ProgressMenuButton.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): ProgressMenuButton;

    // Own methods of Dazzle.ProgressMenuButton

    get_progress(): number
    get_show_progress(): boolean
    get_show_theatric(): boolean
    /**
     * To avoid suprious animations from the button, you must call this function any
     * time you want to allow animations to continue. This is because animations are
     * automatically started upon reaching a progress of 1.0.
     * 
     * If you are performing operations in the background, calling this function
     * every time you add an operation is a good strategry.
     */
    reset_theatrics(): void
    set_progress(progress: number): void
    set_show_progress(show_progress: boolean): void
    set_show_theatric(show_theatic: boolean): void

// Inherited properties
get app_paintable(): boolean;
set app_paintable(val: boolean);
get appPaintable(): boolean;
set appPaintable(val: boolean);
get can_default(): boolean;
set can_default(val: boolean);
get canDefault(): boolean;
set canDefault(val: boolean);
get can_focus(): boolean;
set can_focus(val: boolean);
get canFocus(): boolean;
set canFocus(val: boolean);
get composite_child(): boolean;
get compositeChild(): boolean;
/**
 * Whether the widget is double buffered.
 */
get double_buffered(): boolean;
set double_buffered(val: boolean);
/**
 * Whether the widget is double buffered.
 */
get doubleBuffered(): boolean;
set doubleBuffered(val: boolean);
get events(): Gdk.EventMask;
set events(val: Gdk.EventMask);
/**
 * Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
 */
get expand(): boolean;
set expand(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focus_on_click(): boolean;
set focus_on_click(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focusOnClick(): boolean;
set focusOnClick(val: boolean);
/**
 * How to distribute horizontal space if widget gets extra space, see #GtkAlign
 */
get halign(): Gtk.Align;
set halign(val: Gtk.Align);
get has_default(): boolean;
set has_default(val: boolean);
get hasDefault(): boolean;
set hasDefault(val: boolean);
get has_focus(): boolean;
set has_focus(val: boolean);
get hasFocus(): boolean;
set hasFocus(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get has_tooltip(): boolean;
set has_tooltip(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get hasTooltip(): boolean;
set hasTooltip(val: boolean);
get height_request(): number;
set height_request(val: number);
get heightRequest(): number;
set heightRequest(val: number);
/**
 * Whether to expand horizontally. See gtk_widget_set_hexpand().
 */
get hexpand(): boolean;
set hexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpand_set(): boolean;
set hexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpandSet(): boolean;
set hexpandSet(val: boolean);
get is_focus(): boolean;
set is_focus(val: boolean);
get isFocus(): boolean;
set isFocus(val: boolean);
/**
 * Sets all four sides' margin at once. If read, returns max
 * margin on any side.
 */
get margin(): number;
set margin(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_bottom(): number;
set margin_bottom(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginBottom(): number;
set marginBottom(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_end(): number;
set margin_end(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginEnd(): number;
set marginEnd(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_left(): number;
set margin_left(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginLeft(): number;
set marginLeft(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_right(): number;
set margin_right(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginRight(): number;
set marginRight(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_start(): number;
set margin_start(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginStart(): number;
set marginStart(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_top(): number;
set margin_top(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginTop(): number;
set marginTop(val: number);
get name(): string;
set name(val: string);
get no_show_all(): boolean;
set no_show_all(val: boolean);
get noShowAll(): boolean;
set noShowAll(val: boolean);
/**
 * The requested opacity of the widget. See gtk_widget_set_opacity() for
 * more details about window opacity.
 * 
 * Before 3.8 this was only available in GtkWindow
 */
get opacity(): number;
set opacity(val: number);
get parent(): Gtk.Container;
set parent(val: Gtk.Container);
get receives_default(): boolean;
set receives_default(val: boolean);
get receivesDefault(): boolean;
set receivesDefault(val: boolean);
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scale_factor(): number;
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scaleFactor(): number;
get sensitive(): boolean;
set sensitive(val: boolean);
/**
 * The style of the widget, which contains information about how it will look (colors, etc).
 */
get style(): Gtk.Style;
set style(val: Gtk.Style);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_markup(): string;
set tooltip_markup(val: string);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipMarkup(): string;
set tooltipMarkup(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_text(): string;
set tooltip_text(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipText(): string;
set tooltipText(val: string);
/**
 * How to distribute vertical space if widget gets extra space, see #GtkAlign
 */
get valign(): Gtk.Align;
set valign(val: Gtk.Align);
/**
 * Whether to expand vertically. See gtk_widget_set_vexpand().
 */
get vexpand(): boolean;
set vexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpand_set(): boolean;
set vexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpandSet(): boolean;
set vexpandSet(val: boolean);
get visible(): boolean;
set visible(val: boolean);
get width_request(): number;
set width_request(val: number);
get widthRequest(): number;
set widthRequest(val: number);
/**
 * The widget's window if it is realized, %NULL otherwise.
 */
get window(): Gdk.Window;

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
/**
 * For widgets that can be “activated” (buttons, menu items, etc.)
 * this function activates them. Activation is what happens when you
 * press Enter on a widget during key navigation. If `widget` isn't
 * activatable, the function returns %FALSE.
 * @returns %TRUE if the widget was activatable
 */
activate(): boolean
/**
 * Installs an accelerator for this `widget` in `accel_group` that causes
 * `accel_signal` to be emitted if the accelerator is activated.
 * The `accel_group` needs to be added to the widget’s toplevel via
 * gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
 * Accelerators added through this function are not user changeable during
 * runtime. If you want to support accelerators that can be changed by the
 * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
 * gtk_menu_item_set_accel_path() instead.
 * @param accel_signal widget signal to emit on accelerator activation
 * @param accel_group accel group for this widget, added to its toplevel
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @param accel_flags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
 */
add_accelerator(accel_signal: string, accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): void
/**
 * Adds the device events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_device_events() for details.
 * @param device a #GdkDevice
 * @param events an event mask, see #GdkEventMask
 */
add_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Adds the events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_events() and the
 * [input handling overview][event-masks] for details.
 * @param events an event mask, see #GdkEventMask
 */
add_events(events: number): void
/**
 * Adds a widget to the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
 * list of mnemonic labels for the widget is cleared when the
 * widget is destroyed, so the caller must make sure to update
 * its internal state at this point as well, by using a connection
 * to the #GtkWidget::destroy signal or a weak notifier.
 * @param label a #GtkWidget that acts as a mnemonic label for @widget
 */
add_mnemonic_label(label: Gtk.Widget): void
/**
 * Queues an animation frame update and adds a callback to be called
 * before each frame. Until the tick callback is removed, it will be
 * called frequently (usually at the frame rate of the output device
 * or as quickly as the application can be repainted, whichever is
 * slower). For this reason, is most suitable for handling graphics
 * that change every frame or every few frames. The tick callback does
 * not automatically imply a relayout or repaint. If you want a
 * repaint or relayout, and aren’t changing widget properties that
 * would trigger that (for example, changing the text of a #GtkLabel),
 * then you will have to call gtk_widget_queue_resize() or
 * gtk_widget_queue_draw_area() yourself.
 * 
 * gdk_frame_clock_get_frame_time() should generally be used for timing
 * continuous animations and
 * gdk_frame_timings_get_predicted_presentation_time() if you are
 * trying to display isolated frames at particular times.
 * 
 * This is a more convenient alternative to connecting directly to the
 * #GdkFrameClock::update signal of #GdkFrameClock, since you don't
 * have to worry about when a #GdkFrameClock is assigned to a widget.
 * @param callback function to call for updating animations
 * @returns an id for the connection of this callback. Remove the callback     by passing it to gtk_widget_remove_tick_callback()
 */
add_tick_callback(callback: Gtk.TickCallback): number
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 * @returns %TRUE if the accelerator can be activated.
 */
can_activate_accel(signal_id: number): boolean
/**
 * This function is used by custom widget implementations; if you're
 * writing an app, you’d use gtk_widget_grab_focus() to move the focus
 * to a particular widget, and gtk_container_set_focus_chain() to
 * change the focus tab order. So you may want to investigate those
 * functions instead.
 * 
 * gtk_widget_child_focus() is called by containers as the user moves
 * around the window using keyboard shortcuts. `direction` indicates
 * what kind of motion is taking place (up, down, left, right, tab
 * forward, tab backward). gtk_widget_child_focus() emits the
 * #GtkWidget::focus signal; widgets override the default handler
 * for this signal in order to implement appropriate focus behavior.
 * 
 * The default ::focus handler for a widget should return %TRUE if
 * moving in `direction` left the focus on a focusable location inside
 * that widget, and %FALSE if moving in `direction` moved the focus
 * outside the widget. If returning %TRUE, widgets normally
 * call gtk_widget_grab_focus() to place the focus accordingly;
 * if returning %FALSE, they don’t modify the current focus location.
 * @param direction direction of focus movement
 * @returns %TRUE if focus ended up inside @widget
 */
child_focus(direction: Gtk.DirectionType): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
child_notify(child_property: string): void
child_notify(...args: never[]): any
/**
 * Same as gtk_widget_path(), but always uses the name of a widget’s type,
 * never uses a custom name set with gtk_widget_set_name().
 */
class_path(): [number, string, string]
/**
 * Computes whether a container should give this widget extra space
 * when possible. Containers should check this, rather than
 * looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
 * 
 * This function already checks whether the widget is visible, so
 * visibility does not need to be checked separately. Non-visible
 * widgets are not expanded.
 * 
 * The computed expand value uses either the expand setting explicitly
 * set on the widget itself, or, if none has been explicitly set,
 * the widget may expand if some of its children do.
 * @param orientation expand direction
 * @returns whether widget tree rooted here should be expanded
 */
compute_expand(orientation: Gtk.Orientation): boolean
/**
 * Creates a new #PangoContext with the appropriate font map,
 * font options, font description, and base direction for drawing
 * text for this widget. See also gtk_widget_get_pango_context().
 * @returns the new #PangoContext
 */
create_pango_context(): Pango.Context
/**
 * Creates a new #PangoLayout with the appropriate font map,
 * font description, and base direction for drawing text for
 * this widget.
 * 
 * If you keep a #PangoLayout created in this way around, you need
 * to re-create it when the widget #PangoContext is replaced.
 * This can be tracked by using the #GtkWidget::screen-changed signal
 * on the widget.
 * @param text text to set on the layout (can be %NULL)
 * @returns the new #PangoLayout
 */
create_pango_layout(text?: (string | null)): Pango.Layout
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
destroy(): void
/**
 * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
 * %NULL.  It’s intended to be used as a callback connected to the
 * “destroy” signal of a widget. You connect gtk_widget_destroyed()
 * as a signal handler, and pass the address of your widget variable
 * as user data. Then when the widget is destroyed, the variable will
 * be set to %NULL. Useful for example to avoid multiple copies
 * of the same dialog.
 * @param widget_pointer address of a variable that contains @widget
 */
destroyed(widget_pointer: Gtk.Widget): Gtk.Widget
/**
 * Returns %TRUE if `device` has been shadowed by a GTK+
 * device grab on another widget, so it would stop sending
 * events to `widget`. This may be used in the
 * #GtkWidget::grab-notify signal to check for specific
 * devices. See gtk_device_grab_add().
 * @param device a #GdkDevice
 * @returns %TRUE if there is an ongoing grab on @device          by another #GtkWidget than @widget.
 */
device_is_shadowed(device: Gdk.Device): boolean
/**
 * This function is equivalent to gtk_drag_begin_with_coordinates(),
 * passing -1, -1 as coordinates.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @returns the context for this drag
 */
drag_begin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: (Gdk.Event | null)): Gdk.DragContext
/**
 * Initiates a drag on the source side. The function only needs to be used
 * when the application is starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is %NULL, then %GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used to get information about the drag.
 * 
 * Generally there are three cases when you want to start a drag by hand by
 * calling this function:
 * 
 * 1. During a #GtkWidget::button-press-event handler, if you want to start a drag
 * immediately when the user presses the mouse button.  Pass the `event`
 * that you have in your #GtkWidget::button-press-event handler.
 * 
 * 2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
 * when the mouse moves past a certain threshold distance after a button-press.
 * Pass the `event` that you have in your #GtkWidget::motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).
 * If you really cannot pass a real event, pass %NULL instead.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @param x The initial x coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @param y The initial y coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @returns the context for this drag
 */
drag_begin_with_coordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: (Gdk.Event | null), x: number, y: number): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param start_x X coordinate of start of drag
 * @param start_y Y coordinate of start of drag
 * @param current_x current X coordinate
 * @param current_y current Y coordinate
 * @returns %TRUE if the drag threshold has been passed.
 */
drag_check_threshold(start_x: number, start_y: number, current_x: number, current_y: number): boolean
/**
 * Add the image targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_uri_targets(): void
/**
 * Looks for a match between the supported targets of `context` and the
 * `dest_target_list,` returning the first matching target, otherwise
 * returning %GDK_NONE. `dest_target_list` should usually be the return
 * value from gtk_drag_dest_get_target_list(), but some widgets may
 * have different valid targets for different parts of the widget; in
 * that case, they will have to implement a drag_motion handler that
 * passes the correct target list to this function.
 * @param context drag context
 * @param target_list list of droppable targets, or %NULL to use    gtk_drag_dest_get_target_list (@widget).
 * @returns first target that the source offers     and the dest can accept, or %GDK_NONE
 */
drag_dest_find_target(context: Gdk.DragContext, target_list?: (Gtk.TargetList | null)): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_dest_get_target_list(): (Gtk.TargetList | null)
/**
 * Returns whether the widget has been configured to always
 * emit #GtkWidget::drag-motion signals.
 * @returns %TRUE if the widget always emits   #GtkWidget::drag-motion events
 */
drag_dest_get_track_motion(): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget’s drag-and-drop signals
 * (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget’s #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget::drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget::drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There’s no way to set a default action here, you can use the
 * #GtkWidget::drag-motion callback for that. Here’s an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * 
 * ```c
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of     #GtkTargetEntrys indicating the drop types that this @widget will     accept, or %NULL. Later you can access the list with     gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this @widget.
 */
drag_dest_set(flags: Gtk.DestDefaults, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets this widget as a proxy for drops to another window.
 * @param proxy_window the window to which to forward drag events
 * @param protocol the drag protocol which the @proxy_window accepts   (You can use gdk_drag_get_protocol() to determine this)
 * @param use_coordinates If %TRUE, send the same coordinates to the   destination, because it is an embedded   subwindow.
 */
drag_dest_set_proxy(proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param target_list list of droppable targets, or %NULL for none
 */
drag_dest_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Tells the widget to emit #GtkWidget::drag-motion and
 * #GtkWidget::drag-leave events regardless of the targets and the
 * %GTK_DEST_DEFAULT_MOTION flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param track_motion whether to accept all targets
 */
drag_dest_set_track_motion(track_motion: boolean): void
/**
 * Clears information about a drop destination set with
 * gtk_drag_dest_set(). The widget will no longer receive
 * notification of drags.
 */
drag_dest_unset(): void
/**
 * Gets the data associated with a drag. When the data
 * is received or the retrieval fails, GTK+ will emit a
 * #GtkWidget::drag-data-received signal. Failure of the retrieval
 * is indicated by the length field of the `selection_data`
 * signal parameter being negative. However, when gtk_drag_get_data()
 * is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
 * then the widget will not receive notification of failed
 * drops.
 * @param context the drag context
 * @param target the target (form of the data) to retrieve
 * @param time_ a timestamp for retrieving the data. This will   generally be the time received in a #GtkWidget::drag-motion   or #GtkWidget::drag-drop signal
 */
drag_get_data(context: Gdk.DragContext, target: Gdk.Atom, time_: number): void
/**
 * Highlights a widget as a currently hovered drop target.
 * To end the highlight, call gtk_drag_unhighlight().
 * GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
 */
drag_highlight(): void
/**
 * Add the writable image targets supported by #GtkSelectionData to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_uri_targets(): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_source_get_target_list(): (Gtk.TargetList | null)
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param start_button_mask the bitmask of buttons that can start the drag
 * @param targets the table of targets     that the drag will support, may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
drag_source_set(start_button_mask: Gdk.ModifierType, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to `icon`. See the docs for #GtkIconTheme for more details.
 * @param icon A #GIcon
 */
drag_source_set_icon_gicon(icon: Gio.Icon): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param icon_name name of icon to use
 */
drag_source_set_icon_name(icon_name: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
drag_source_set_icon_pixbuf(pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param stock_id the ID of the stock icon to use
 */
drag_source_set_icon_stock(stock_id: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param target_list list of draggable targets, or %NULL for none
 */
drag_source_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Undoes the effects of gtk_drag_source_set().
 */
drag_source_unset(): void
/**
 * Removes a highlight set by gtk_drag_highlight() from
 * a widget.
 */
drag_unhighlight(): void
/**
 * Draws `widget` to `cr`. The top left corner of the widget will be
 * drawn to the currently set origin point of `cr`.
 * 
 * You should pass a cairo context as `cr` argument that is in an
 * original state. Otherwise the resulting drawing is undefined. For
 * example changing the operator using cairo_set_operator() or the
 * line width using cairo_set_line_width() might have unwanted side
 * effects.
 * You may however change the context’s transform matrix - like with
 * cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
 * region with cairo_clip() prior to calling this function. Also, it
 * is fine to modify the context with cairo_save() and
 * cairo_push_group() prior to calling this function.
 * 
 * Note that special-purpose widgets may contain special code for
 * rendering to the screen and might appear differently on screen
 * and when rendered using gtk_widget_draw().
 * @param cr a cairo context to draw to
 */
draw(cr: cairo.Context): void
/**
 * Ensures that `widget` has a style (`widget->`style).
 * 
 * Not a very useful function; most of the time, if you
 * want the style, the widget is realized, and realized
 * widgets are guaranteed to have a style already.
 */
ensure_style(): void
/**
 * Notifies the user about an input-related error on this widget.
 * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
 * gdk_window_beep(), otherwise it does nothing.
 * 
 * Note that the effect of gdk_window_beep() can be configured in many
 * ways, depending on the windowing backend and the desktop environment
 * or window manager that is used.
 */
error_bell(): void
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 * @returns return from the event signal emission (%TRUE if               the event was handled)
 */
event(event: Gdk.Event): boolean
/**
 * Stops emission of #GtkWidget::child-notify signals on `widget`. The
 * signals are queued until gtk_widget_thaw_child_notify() is called
 * on `widget`.
 * 
 * This is the analogue of g_object_freeze_notify() for child properties.
 */
freeze_child_notify(): void
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 * @returns the #AtkObject associated with @widget
 */
get_accessible(): Atk.Object
/**
 * Retrieves the #GActionGroup that was registered using `prefix`. The resulting
 * #GActionGroup may have been registered to `widget` or any #GtkWidget in its
 * ancestry.
 * 
 * If no action group was found matching `prefix,` then %NULL is returned.
 * @param prefix The “prefix” of the action group.
 * @returns A #GActionGroup or %NULL.
 */
get_action_group(prefix: string): (Gio.ActionGroup | null)
/**
 * Returns the baseline that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function, and when allocating child
 * widgets in #GtkWidget::size_allocate.
 * @returns the baseline of the @widget, or -1 if none
 */
get_allocated_baseline(): number
/**
 * Returns the height that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the height of the @widget
 */
get_allocated_height(): number
/**
 * Retrieves the widget’s allocated size.
 * 
 * This function returns the last values passed to
 * gtk_widget_size_allocate_with_baseline(). The value differs from
 * the size returned in gtk_widget_get_allocation() in that functions
 * like gtk_widget_set_halign() can adjust the allocation, but not
 * the value returned by this function.
 * 
 * If a widget is not visible, its allocated size is 0.
 */
get_allocated_size(): [Gtk.Allocation, number]
/**
 * Returns the width that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the width of the @widget
 */
get_allocated_width(): number
/**
 * Retrieves the widget’s allocation.
 * 
 * Note, when implementing a #GtkContainer: a widget’s allocation will
 * be its “adjusted” allocation, that is, the widget’s parent
 * container typically calls gtk_widget_size_allocate() with an
 * allocation, and that allocation is then adjusted (to handle margin
 * and alignment for example) before assignment to the widget.
 * gtk_widget_get_allocation() returns the adjusted allocation that
 * was actually assigned to the widget. The adjusted allocation is
 * guaranteed to be completely contained within the
 * gtk_widget_size_allocate() allocation, however. So a #GtkContainer
 * is guaranteed that its children stay inside the assigned bounds,
 * but not that they have exactly the bounds the container assigned.
 * There is no way to get the original allocation assigned by
 * gtk_widget_size_allocate(), since it isn’t stored; if a container
 * implementation needs that information it will have to track it itself.
 */
get_allocation(): Gtk.Allocation
/**
 * Gets the first ancestor of `widget` with type `widget_type`. For example,
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
 * the first #GtkBox that’s an ancestor of `widget`. No reference will be
 * added to the returned widget; it should not be unreferenced. See note
 * about checking for a toplevel #GtkWindow in the docs for
 * gtk_widget_get_toplevel().
 * 
 * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
 * considers `widget` to be an ancestor of itself.
 * @param widget_type ancestor type
 * @returns the ancestor widget, or %NULL if not found
 */
get_ancestor(widget_type: GObject.GType): (Gtk.Widget | null)
/**
 * Determines whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * See gtk_widget_set_app_paintable()
 * @returns %TRUE if the widget is app paintable
 */
get_app_paintable(): boolean
/**
 * Determines whether `widget` can be a default widget. See
 * gtk_widget_set_can_default().
 * @returns %TRUE if @widget can be a default widget, %FALSE otherwise
 */
get_can_default(): boolean
/**
 * Determines whether `widget` can own the input focus. See
 * gtk_widget_set_can_focus().
 * @returns %TRUE if @widget can own the input focus, %FALSE otherwise
 */
get_can_focus(): boolean
/**
 * This function is only for use in widget implementations. Obtains
 * `widget->`requisition, unless someone has forced a particular
 * geometry on the widget (e.g. with gtk_widget_set_size_request()),
 * in which case it returns that geometry instead of the widget's
 * requisition.
 * 
 * This function differs from gtk_widget_size_request() in that
 * it retrieves the last size request value from `widget->`requisition,
 * while gtk_widget_size_request() actually calls the "size_request" method
 * on `widget` to compute the size request and fill in `widget->`requisition,
 * and only then returns `widget->`requisition.
 * 
 * Because this function does not call the “size_request” method, it
 * can only be used when you know that `widget->`requisition is
 * up-to-date, that is, gtk_widget_size_request() has been called
 * since the last time a resize was queued. In general, only container
 * implementations have this information; applications should use
 * gtk_widget_size_request().
 */
get_child_requisition(): Gtk.Requisition
/**
 * Gets the value set with gtk_widget_set_child_visible().
 * If you feel a need to use this function, your code probably
 * needs reorganization.
 * 
 * This function is only useful for container implementations and
 * never should be called by an application.
 * @returns %TRUE if the widget is mapped with the parent.
 */
get_child_visible(): boolean
/**
 * Retrieves the widget’s clip area.
 * 
 * The clip area is the area in which all of `widget'`s drawing will
 * happen. Other toolkits call it the bounding box.
 * 
 * Historically, in GTK+ the clip area has been equal to the allocation
 * retrieved via gtk_widget_get_allocation().
 */
get_clip(): Gtk.Allocation
/**
 * Returns the clipboard object for the given selection to
 * be used with `widget`. `widget` must have a #GdkDisplay
 * associated with it, so must be attached to a toplevel
 * window.
 * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
 * @returns the appropriate clipboard object. If no             clipboard already exists, a new one will             be created. Once a clipboard object has             been created, it is persistent for all time.
 */
get_clipboard(selection: Gdk.Atom): Gtk.Clipboard
/**
 * Obtains the composite name of a widget.
 * @returns the composite name of @widget, or %NULL if @widget is not   a composite child. The string should be freed when it is no   longer needed.
 */
get_composite_name(): string
/**
 * Returns whether `device` can interact with `widget` and its
 * children. See gtk_widget_set_device_enabled().
 * @param device a #GdkDevice
 * @returns %TRUE is @device is enabled for @widget
 */
get_device_enabled(device: Gdk.Device): boolean
/**
 * Returns the events mask for the widget corresponding to an specific device. These
 * are the events that the widget will receive when `device` operates on it.
 * @param device a #GdkDevice
 * @returns device event mask for @widget
 */
get_device_events(device: Gdk.Device): Gdk.EventMask
/**
 * Gets the reading direction for a particular widget. See
 * gtk_widget_set_direction().
 * @returns the reading direction for the widget.
 */
get_direction(): Gtk.TextDirection
get_direction(...args: never[]): any
/**
 * Get the #GdkDisplay for the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow at the top.
 * 
 * In general, you should only create display specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkDisplay for the toplevel for this widget.
 */
get_display(): Gdk.Display
/**
 * Determines whether the widget is double buffered.
 * 
 * See gtk_widget_set_double_buffered()
 * @returns %TRUE if the widget is double buffered
 */
get_double_buffered(): boolean
/**
 * Returns the event mask (see #GdkEventMask) for the widget. These are the
 * events that the widget will receive.
 * 
 * Note: Internally, the widget event mask will be the logical OR of the event
 * mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
 * event mask necessary to cater for every #GtkEventController created for the
 * widget.
 * @returns event mask for @widget
 */
get_events(): number
/**
 * Returns whether the widget should grab focus when it is clicked with the mouse.
 * See gtk_widget_set_focus_on_click().
 * @returns %TRUE if the widget should grab focus when it is clicked with               the mouse.
 */
get_focus_on_click(): boolean
/**
 * Gets the font map that has been set with gtk_widget_set_font_map().
 * @returns A #PangoFontMap, or %NULL
 */
get_font_map(): (Pango.FontMap | null)
/**
 * Returns the #cairo_font_options_t used for Pango rendering. When not set,
 * the defaults font options for the #GdkScreen will be used.
 * @returns the #cairo_font_options_t or %NULL if not set
 */
get_font_options(): (cairo.FontOptions | null)
/**
 * Obtains the frame clock for a widget. The frame clock is a global
 * “ticker” that can be used to drive animations and repaints.  The
 * most common reason to get the frame clock is to call
 * gdk_frame_clock_get_frame_time(), in order to get a time to use for
 * animating. For example you might record the start of the animation
 * with an initial value from gdk_frame_clock_get_frame_time(), and
 * then update the animation by calling
 * gdk_frame_clock_get_frame_time() again during each repaint.
 * 
 * gdk_frame_clock_request_phase() will result in a new frame on the
 * clock, but won’t necessarily repaint any widgets. To repaint a
 * widget, you have to use gtk_widget_queue_draw() which invalidates
 * the widget (thus scheduling it to receive a draw on the next
 * frame). gtk_widget_queue_draw() will also end up requesting a frame
 * on the appropriate frame clock.
 * 
 * A widget’s frame clock will not change while the widget is
 * mapped. Reparenting a widget (which implies a temporary unmap) can
 * change the widget’s frame clock.
 * 
 * Unrealized widgets do not have a frame clock.
 * @returns a #GdkFrameClock, or %NULL if widget is unrealized
 */
get_frame_clock(): (Gdk.FrameClock | null)
/**
 * Gets the value of the #GtkWidget:halign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
 * alignment.
 * @returns the horizontal alignment of @widget
 */
get_halign(): Gtk.Align
/**
 * Returns the current value of the has-tooltip property.  See
 * #GtkWidget:has-tooltip for more information.
 * @returns current value of has-tooltip on @widget.
 */
get_has_tooltip(): boolean
/**
 * Determines whether `widget` has a #GdkWindow of its own. See
 * gtk_widget_set_has_window().
 * @returns %TRUE if @widget has a window, %FALSE otherwise
 */
get_has_window(): boolean
/**
 * Gets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Containers should use gtk_widget_compute_expand() rather than
 * this function, to see whether a widget, or any of its children,
 * has the expand flag set. If any child of a widget wants to
 * expand, the parent may ask to expand also.
 * 
 * This function only looks at the widget’s own hexpand flag, rather
 * than computing whether the entire widget tree rooted at this widget
 * wants to expand.
 * @returns whether hexpand flag is set
 */
get_hexpand(): boolean
/**
 * Gets whether gtk_widget_set_hexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @returns whether hexpand has been explicitly set
 */
get_hexpand_set(): boolean
/**
 * Whether the widget is mapped.
 * @returns %TRUE if the widget is mapped, %FALSE otherwise.
 */
get_mapped(): boolean
/**
 * Gets the value of the #GtkWidget:margin-bottom property.
 * @returns The bottom margin of @widget
 */
get_margin_bottom(): number
/**
 * Gets the value of the #GtkWidget:margin-end property.
 * @returns The end margin of @widget
 */
get_margin_end(): number
/**
 * Gets the value of the #GtkWidget:margin-left property.
 * @returns The left margin of @widget
 */
get_margin_left(): number
/**
 * Gets the value of the #GtkWidget:margin-right property.
 * @returns The right margin of @widget
 */
get_margin_right(): number
/**
 * Gets the value of the #GtkWidget:margin-start property.
 * @returns The start margin of @widget
 */
get_margin_start(): number
/**
 * Gets the value of the #GtkWidget:margin-top property.
 * @returns The top margin of @widget
 */
get_margin_top(): number
/**
 * Returns the modifier mask the `widget’`s windowing system backend
 * uses for a particular purpose.
 * 
 * See gdk_keymap_get_modifier_mask().
 * @param intent the use case for the modifier mask
 * @returns the modifier mask used for @intent.
 */
get_modifier_mask(intent: Gdk.ModifierIntent): Gdk.ModifierType
/**
 * Returns the current modifier style for the widget. (As set by
 * gtk_widget_modify_style().) If no style has previously set, a new
 * #GtkRcStyle will be created with all values unset, and set as the
 * modifier style for the widget. If you make changes to this rc
 * style, you must call gtk_widget_modify_style(), passing in the
 * returned rc style, to make sure that your changes take effect.
 * 
 * Caution: passing the style back to gtk_widget_modify_style() will
 * normally end up destroying it, because gtk_widget_modify_style() copies
 * the passed-in style and sets the copy as the new modifier style,
 * thus dropping any reference to the old modifier style. Add a reference
 * to the modifier style if you want to keep it alive.
 * @returns the modifier style for the widget.     This rc style is owned by the widget. If you want to keep a     pointer to value this around, you must add a refcount using     g_object_ref().
 */
get_modifier_style(): Gtk.RcStyle
/**
 * Retrieves the name of a widget. See gtk_widget_set_name() for the
 * significance of widget names.
 * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
 */
get_name(): string
/**
 * Returns the current value of the #GtkWidget:no-show-all property,
 * which determines whether calls to gtk_widget_show_all()
 * will affect this widget.
 * @returns the current value of the “no-show-all” property.
 */
get_no_show_all(): boolean
/**
 * Fetches the requested opacity for this widget.
 * See gtk_widget_set_opacity().
 * @returns the requested opacity for this widget.
 */
get_opacity(): number
/**
 * Gets a #PangoContext with the appropriate font map, font description,
 * and base direction for this widget. Unlike the context returned
 * by gtk_widget_create_pango_context(), this context is owned by
 * the widget (it can be used until the screen for the widget changes
 * or the widget is removed from its toplevel), and will be updated to
 * match any changes to the widget’s attributes. This can be tracked
 * by using the #GtkWidget::screen-changed signal on the widget.
 * @returns the #PangoContext for the widget.
 */
get_pango_context(): Pango.Context
/**
 * Returns the parent container of `widget`.
 * @returns the parent container of @widget, or %NULL
 */
get_parent(): (Gtk.Widget | null)
/**
 * Gets `widget’`s parent window, or %NULL if it does not have one.
 * @returns the parent window of @widget, or %NULL if it does not have a parent window.
 */
get_parent_window(): (Gdk.Window | null)
/**
 * Returns the #GtkWidgetPath representing `widget,` if the widget
 * is not connected to a toplevel widget, a partial path will be
 * created.
 * @returns The #GtkWidgetPath representing @widget
 */
get_path(): Gtk.WidgetPath
/**
 * Obtains the location of the mouse pointer in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(); and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 */
get_pointer(): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves the minimum and natural size of a widget, taking
 * into account the widget’s preference for height-for-width management.
 * 
 * This is used to retrieve a suitable size by container widgets which do
 * not impose any restrictions on the child placement. It can be used
 * to deduce toplevel window and menu sizes as well as child widgets in
 * free-form containers such as GtkLayout.
 * 
 * Handle with care. Note that the natural height of a height-for-width
 * widget will generally be a smaller size than the minimum height, since the required
 * height for the natural width is generally smaller than the required height for
 * the minimum width.
 * 
 * Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
 * baseline alignment.
 */
get_preferred_size(): [Gtk.Requisition | null, Gtk.Requisition | null]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
get_preferred_width_for_height(height: number): [number, number]
/**
 * Determines whether `widget` is realized.
 * @returns %TRUE if @widget is realized, %FALSE otherwise
 */
get_realized(): boolean
/**
 * Determines whether `widget` is always treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_set_receives_default().
 * @returns %TRUE if @widget acts as the default widget when focused,               %FALSE otherwise
 */
get_receives_default(): boolean
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 * @returns The #GtkSizeRequestMode preferred by @widget.
 */
get_request_mode(): Gtk.SizeRequestMode
/**
 * Retrieves the widget’s requisition.
 * 
 * This function should only be used by widget implementations in
 * order to figure whether the widget’s requisition has actually
 * changed after some internal state change (so that they can call
 * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
 * 
 * Normally, gtk_widget_size_request() should be used.
 */
get_requisition(): Gtk.Requisition
/**
 * Get the root window where this widget is located. This function can
 * only be called after the widget has been added to a widget
 * hierarchy with #GtkWindow at the top.
 * 
 * The root window is useful for such purposes as creating a popup
 * #GdkWindow associated with the window. In general, you should only
 * create display specific resources when a widget has been realized,
 * and you should free those resources when the widget is unrealized.
 * @returns the #GdkWindow root window for the toplevel for this widget.
 */
get_root_window(): Gdk.Window
/**
 * Retrieves the internal scale factor that maps from window coordinates
 * to the actual device pixels. On traditional systems this is 1, on
 * high density outputs, it can be a higher value (typically 2).
 * 
 * See gdk_window_get_scale_factor().
 * @returns the scale factor for @widget
 */
get_scale_factor(): number
/**
 * Get the #GdkScreen from the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow
 * at the top.
 * 
 * In general, you should only create screen specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkScreen for the toplevel for this widget.
 */
get_screen(): Gdk.Screen
/**
 * Returns the widget’s sensitivity (in the sense of returning
 * the value that has been set using gtk_widget_set_sensitive()).
 * 
 * The effective sensitivity of a widget is however determined by both its
 * own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
 * @returns %TRUE if the widget is sensitive
 */
get_sensitive(): boolean
/**
 * Gets the settings object holding the settings used for this widget.
 * 
 * Note that this function can only be called when the #GtkWidget
 * is attached to a toplevel, since the settings object is specific
 * to a particular #GdkScreen.
 * @returns the relevant #GtkSettings object
 */
get_settings(): Gtk.Settings
/**
 * Gets the size request that was explicitly set for the widget using
 * gtk_widget_set_size_request(). A value of -1 stored in `width` or
 * `height` indicates that that dimension has not been set explicitly
 * and the natural requisition of the widget will be used instead. See
 * gtk_widget_set_size_request(). To get the size a widget will
 * actually request, call gtk_widget_get_preferred_size() instead of
 * this function.
 */
get_size_request(): [number, number]
/**
 * Returns the widget’s state. See gtk_widget_set_state().
 * @returns the state of @widget.
 */
get_state(): Gtk.StateType
/**
 * Returns the widget state as a flag set. It is worth mentioning
 * that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
 * returned, that is, also based on parent insensitivity, even if
 * `widget` itself is sensitive.
 * 
 * Also note that if you are looking for a way to obtain the
 * #GtkStateFlags to pass to a #GtkStyleContext method, you
 * should look at gtk_style_context_get_state().
 * @returns The state flags for widget
 */
get_state_flags(): Gtk.StateFlags
/**
 * Simply an accessor function that returns `widget->`style.
 * @returns the widget’s #GtkStyle
 */
get_style(): Gtk.Style
/**
 * Returns the style context associated to `widget`. The returned object is
 * guaranteed to be the same for the lifetime of `widget`.
 * @returns a #GtkStyleContext. This memory is owned by @widget and          must not be freed.
 */
get_style_context(): Gtk.StyleContext
/**
 * Returns %TRUE if `widget` is multiple pointer aware. See
 * gtk_widget_set_support_multidevice() for more information.
 * @returns %TRUE if @widget is multidevice aware.
 */
get_support_multidevice(): boolean
/**
 * Fetch an object build from the template XML for `widget_type` in this `widget` instance.
 * 
 * This will only report children which were previously declared with
 * gtk_widget_class_bind_template_child_full() or one of its
 * variants.
 * 
 * This function is only meant to be called for code which is private to the `widget_type` which
 * declared the child and is meant for language bindings which cannot easily make use
 * of the GObject structure offsets.
 * @param widget_type The #GType to get a template child for
 * @param name The “id” of the child defined in the template XML
 * @returns The object built in the template XML with the id @name
 */
get_template_child<T = GObject.Object>(widget_type: GObject.GType, name: string): T
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_markup(): (string | null)
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_text(): (string | null)
/**
 * Returns the #GtkWindow of the current tooltip. This can be the
 * GtkWindow created by default, or the custom tooltip window set
 * using gtk_widget_set_tooltip_window().
 * @returns The #GtkWindow of the current tooltip.
 */
get_tooltip_window(): Gtk.Window
/**
 * This function returns the topmost widget in the container hierarchy
 * `widget` is a part of. If `widget` has no parent widgets, it will be
 * returned as the topmost widget. No reference will be added to the
 * returned widget; it should not be unreferenced.
 * 
 * Note the difference in behavior vs. gtk_widget_get_ancestor();
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
 * would return
 * %NULL if `widget` wasn’t inside a toplevel window, and if the
 * window was inside a #GtkWindow-derived widget which was in turn
 * inside the toplevel #GtkWindow. While the second case may
 * seem unlikely, it actually happens when a #GtkPlug is embedded
 * inside a #GtkSocket within the same application.
 * 
 * To reliably find the toplevel #GtkWindow, use
 * gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
 * on the result. For instance, to get the title of a widget's toplevel
 * window, one might use:
 * 
 * ```c
 * static const char *
 * get_widget_toplevel_title (GtkWidget *widget)
 * {
 *   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 *   if (GTK_IS_WINDOW (toplevel))
 *     {
 *       return gtk_window_get_title (GTK_WINDOW (toplevel));
 *     }
 * 
 *   return NULL;
 * }
 * ```
 * 
 * @returns the topmost ancestor of @widget, or @widget itself    if there’s no ancestor.
 */
get_toplevel(): Gtk.Widget
/**
 * Gets the value of the #GtkWidget:valign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. If your widget want to support baseline aligned
 * children it must use gtk_widget_get_valign_with_baseline(), or
 * `g_object_get (widget, "valign", &value, NULL)`, which will
 * also report the true value.
 * @returns the vertical alignment of @widget, ignoring baseline alignment
 */
get_valign(): Gtk.Align
/**
 * Gets the value of the #GtkWidget:valign property, including
 * %GTK_ALIGN_BASELINE.
 * @returns the vertical alignment of @widget
 */
get_valign_with_baseline(): Gtk.Align
/**
 * Gets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_get_hexpand() for more detail.
 * @returns whether vexpand flag is set
 */
get_vexpand(): boolean
/**
 * Gets whether gtk_widget_set_vexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * See gtk_widget_get_hexpand_set() for more detail.
 * @returns whether vexpand has been explicitly set
 */
get_vexpand_set(): boolean
/**
 * Determines whether the widget is visible. If you want to
 * take into account whether the widget’s parent is also marked as
 * visible, use gtk_widget_is_visible() instead.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See gtk_widget_set_visible().
 * @returns %TRUE if the widget is visible
 */
get_visible(): boolean
/**
 * Gets the visual that will be used to render `widget`.
 * @returns the visual for @widget
 */
get_visual(): Gdk.Visual
/**
 * Returns the widget’s window if it is realized, %NULL otherwise
 * @returns @widget’s window.
 */
get_window(): (Gdk.Window | null)
/**
 * Makes `widget` the current grabbed widget.
 * 
 * This means that interaction with other widgets in the same
 * application is blocked and mouse as well as keyboard events
 * are delivered to this widget.
 * 
 * If `widget` is not sensitive, it is not set as the current
 * grabbed widget and this function does nothing.
 */
grab_add(): void
/**
 * Causes `widget` to become the default widget. `widget` must be able to be
 * a default widget; typically you would ensure this yourself
 * by calling gtk_widget_set_can_default() with a %TRUE value.
 * The default widget is activated when
 * the user presses Enter in a window. Default widgets must be
 * activatable, that is, gtk_widget_activate() should affect them. Note
 * that #GtkEntry widgets require the “activates-default” property
 * set to %TRUE before they activate the default widget when Enter
 * is pressed and the #GtkEntry is focused.
 */
grab_default(): void
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
grab_focus(): void
/**
 * Removes the grab from the given widget.
 * 
 * You have to pair calls to gtk_grab_add() and gtk_grab_remove().
 * 
 * If `widget` does not have the grab, this function does nothing.
 */
grab_remove(): void
/**
 * Determines whether the widget is currently grabbing events, so it
 * is the only widget receiving input events (keyboard and mouse).
 * 
 * See also gtk_grab_add().
 * @returns %TRUE if the widget is in the grab_widgets stack
 */
has_grab(): boolean
/**
 * Determines if the widget style has been looked up through the rc mechanism.
 * @returns %TRUE if the widget has been looked up through the rc   mechanism, %FALSE otherwise.
 */
has_rc_style(): boolean
/**
 * Checks whether there is a #GdkScreen is associated with
 * this widget. All toplevel widgets have an associated
 * screen, and all widgets added into a hierarchy with a toplevel
 * window at the top.
 * @returns %TRUE if there is a #GdkScreen associated   with the widget.
 */
has_screen(): boolean
/**
 * Determines if the widget should show a visible indication that
 * it has the global input focus. This is a convenience function for
 * use in ::draw handlers that takes into account whether focus
 * indication should currently be shown in the toplevel window of
 * `widget`. See gtk_window_get_focus_visible() for more information
 * about focus indication.
 * 
 * To find out if the widget has the global input focus, use
 * gtk_widget_has_focus().
 * @returns %TRUE if the widget should display a “focus rectangle”
 */
has_visible_focus(): boolean
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
hide(): void
/**
 * Utility function; intended to be connected to the #GtkWidget::delete-event
 * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
 * argument, then returns %TRUE. If connected to ::delete-event, the
 * result is that clicking the close button for a window (on the
 * window frame, top right corner usually) will hide but not destroy
 * the window. By default, GTK+ destroys windows when ::delete-event
 * is received.
 * @returns %TRUE
 */
hide_on_delete(): boolean
/**
 * Returns whether the widget is currently being destroyed.
 * This information can sometimes be used to avoid doing
 * unnecessary work.
 * @returns %TRUE if @widget is being destroyed
 */
in_destruction(): boolean
/**
 * Creates and initializes child widgets defined in templates. This
 * function must be called in the instance initializer for any
 * class which assigned itself a template using gtk_widget_class_set_template()
 * 
 * It is important to call this function in the instance initializer
 * of a #GtkWidget subclass and not in #GObject.constructed() or
 * #GObject.constructor() for two reasons.
 * 
 * One reason is that generally derived widgets will assume that parent
 * class composite widgets have been created in their instance
 * initializers.
 * 
 * Another reason is that when calling g_object_new() on a widget with
 * composite templates, it’s important to build the composite widgets
 * before the construct properties are set. Properties passed to g_object_new()
 * should take precedence over properties set in the private template XML.
 */
init_template(): void
/**
 * Sets an input shape for this widget’s GDK window. This allows for
 * windows which react to mouse click in a nonrectangular region, see
 * gdk_window_input_shape_combine_region() for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
input_shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Inserts `group` into `widget`. Children of `widget` that implement
 * #GtkActionable can then be associated with actions in `group` by
 * setting their “action-name” to
 * `prefix`.`action-name`.
 * 
 * If `group` is %NULL, a previously inserted group for `name` is removed
 * from `widget`.
 * @param name the prefix for actions in @group
 * @param group a #GActionGroup, or %NULL
 */
insert_action_group(name: string, group?: (Gio.ActionGroup | null)): void
/**
 * Computes the intersection of a `widget’`s area and `area,` storing
 * the intersection in `intersection,` and returns %TRUE if there was
 * an intersection.  `intersection` may be %NULL if you’re only
 * interested in whether there was an intersection.
 * @param area a rectangle
 * @returns %TRUE if there was an intersection
 */
intersect(area: Gdk.Rectangle): [boolean, Gdk.Rectangle | null]
/**
 * Determines whether `widget` is somewhere inside `ancestor,` possibly with
 * intermediate containers.
 * @param ancestor another #GtkWidget
 * @returns %TRUE if @ancestor contains @widget as a child,    grandchild, great grandchild, etc.
 */
is_ancestor(ancestor: Gtk.Widget): boolean
/**
 * Whether `widget` can rely on having its alpha channel
 * drawn correctly. On X11 this function returns whether a
 * compositing manager is running for `widget’`s screen.
 * 
 * Please note that the semantics of this call will change
 * in the future if used on a widget that has a composited
 * window in its hierarchy (as set by gdk_window_set_composited()).
 * @returns %TRUE if the widget can rely on its alpha channel being drawn correctly.
 */
is_composited(): boolean
/**
 * Determines whether `widget` can be drawn to. A widget can be drawn
 * to if it is mapped and visible.
 * @returns %TRUE if @widget is drawable, %FALSE otherwise
 */
is_drawable(): boolean
/**
 * Returns the widget’s effective sensitivity, which means
 * it is sensitive itself and also its parent widget is sensitive
 * @returns %TRUE if the widget is effectively sensitive
 */
is_sensitive(): boolean
/**
 * Determines whether `widget` is a toplevel widget.
 * 
 * Currently only #GtkWindow and #GtkInvisible (and out-of-process
 * #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
 * widget.
 * @returns %TRUE if @widget is a toplevel, %FALSE otherwise
 */
is_toplevel(): boolean
/**
 * Determines whether the widget and all its parents are marked as
 * visible.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See also gtk_widget_get_visible() and gtk_widget_set_visible()
 * @returns %TRUE if the widget and all its parents are visible
 */
is_visible(): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 * @returns %TRUE if stopping keyboard navigation is fine, %FALSE               if the emitting widget should try to handle the keyboard               navigation attempt in its parent container(s).
 */
keynav_failed(direction: Gtk.DirectionType): boolean
/**
 * Lists the closures used by `widget` for accelerator group connections
 * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
 * The closures can be used to monitor accelerator changes on `widget,`
 * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
 * #GtkAccelGroup of a closure which can be found out with
 * gtk_accel_group_from_accel_closure().
 * @returns a newly allocated #GList of closures
 */
list_accel_closures(): GObject.Closure[]
/**
 * Retrieves a %NULL-terminated array of strings containing the prefixes of
 * #GActionGroup's available to `widget`.
 * @returns a %NULL-terminated array of strings.
 */
list_action_prefixes(): string[]
/**
 * Returns a newly allocated list of the widgets, normally labels, for
 * which this widget is the target of a mnemonic (see for example,
 * gtk_label_set_mnemonic_widget()).
 * 
 * The widgets in the list are not individually referenced. If you
 * want to iterate through the list and perform actions involving
 * callbacks that might destroy the widgets, you
 * must call `g_list_foreach (result,
 * (GFunc)g_object_ref, NULL)` first, and then unref all the
 * widgets afterwards.
 * @returns the list of  mnemonic labels; free this list  with g_list_free() when you are done with it.
 */
list_mnemonic_labels(): Gtk.Widget[]
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
map(): void
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 * @returns %TRUE if the signal has been handled
 */
mnemonic_activate(group_cycling: boolean): boolean
/**
 * Sets the base color for a widget in a particular state.
 * All other style values are left untouched. The base color
 * is the background color used along with the text color
 * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
 * and #GtkTextView. See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > base color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the base color on that.
 * @param state the state for which to set the base color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_base().
 */
modify_base(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > background color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the background color on that.
 * @param state the state for which to set the background color
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_bg().
 */
modify_bg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the #GtkWidget
 * cursor-color and secondary-cursor-color
 * style properties.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param primary the color to use for primary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_cursor().
 * @param secondary the color to use for secondary cursor (does     not need to be allocated), or %NULL to undo the effect of     previous calls to of gtk_widget_modify_cursor().
 */
modify_cursor(primary?: (Gdk.Color | null), secondary?: (Gdk.Color | null)): void
/**
 * Sets the foreground color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the foreground color
 * @param color the color to assign (does not need to be allocated),     or %NULL to undo the effect of previous calls to     of gtk_widget_modify_fg().
 */
modify_fg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the font to use for a widget.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param font_desc the font description to use, or %NULL     to undo the effect of previous calls to gtk_widget_modify_font()
 */
modify_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Modifies style values on the widget.
 * 
 * Modifications made using this technique take precedence over
 * style values set via an RC file, however, they will be overridden
 * if a style is explicitly set on the widget using gtk_widget_set_style().
 * The #GtkRcStyle-struct is designed so each field can either be
 * set or unset, so it is possible, using this function, to modify some
 * style values and leave the others unchanged.
 * 
 * Note that modifications made with this function are not cumulative
 * with previous calls to gtk_widget_modify_style() or with such
 * functions as gtk_widget_modify_fg(). If you wish to retain
 * previous values, you must first call gtk_widget_get_modifier_style(),
 * make your modifications to the returned style, then call
 * gtk_widget_modify_style() with that style. On the other hand,
 * if you first call gtk_widget_modify_style(), subsequent calls
 * to such functions gtk_widget_modify_fg() will have a cumulative
 * effect with the initial modifications.
 * @param style the #GtkRcStyle-struct holding the style modifications
 */
modify_style(style: Gtk.RcStyle): void
/**
 * Sets the text color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * The text color is the foreground color used along with the
 * base color (see gtk_widget_modify_base()) for widgets such
 * as #GtkEntry and #GtkTextView.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the text color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_text().
 */
modify_text(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color to use for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color().
 * @param state the state for which to set the background color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_background_color()
 */
override_background_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the color to use for a widget.
 * 
 * All other style values are left untouched.
 * 
 * This function does not act recursively. Setting the color of a
 * container does not affect its children. Note that some widgets that
 * you may not think of as containers, for instance #GtkButtons,
 * are actually containers.
 * 
 * This API is mostly meant as a quick way for applications to
 * change a widget appearance. If you are developing a widgets
 * library and intend this change to be themeable, it is better
 * done by setting meaningful CSS classes in your
 * widget/container implementation through gtk_style_context_add_class().
 * 
 * This way, your widget library can install a #GtkCssProvider
 * with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
 * to provide a default styling for those widgets that need so, and
 * this theming may fully overridden by the user’s theme.
 * 
 * Note that for complex widgets this may bring in undesired
 * results (such as uniform background color everywhere), in
 * these cases it is better to fully style such widgets through a
 * #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
 * priority.
 * @param state the state for which to set the color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_color()
 */
override_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the
 * cursor-color and secondary-cursor-color
 * style properties. All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * Note that the underlying properties have the #GdkColor type,
 * so the alpha value in `primary` and `secondary` will be ignored.
 * @param cursor the color to use for primary cursor (does not need to be     allocated), or %NULL to undo the effect of previous calls to     of gtk_widget_override_cursor().
 * @param secondary_cursor the color to use for secondary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_override_cursor().
 */
override_cursor(cursor?: (Gdk.RGBA | null), secondary_cursor?: (Gdk.RGBA | null)): void
/**
 * Sets the font to use for a widget. All other style values are
 * left untouched. See gtk_widget_override_color().
 * @param font_desc the font description to use, or %NULL to undo     the effect of previous calls to gtk_widget_override_font()
 */
override_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Sets a symbolic color for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color() for overriding the foreground
 * or background color.
 * @param name the name of the symbolic color to modify
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to gtk_widget_override_symbolic_color()
 */
override_symbolic_color(name: string, color?: (Gdk.RGBA | null)): void
/**
 * Obtains the full path to `widget`. The path is simply the name of a
 * widget and all its parents in the container hierarchy, separated by
 * periods. The name of a widget comes from
 * gtk_widget_get_name(). Paths are used to apply styles to a widget
 * in gtkrc configuration files. Widget names are the type of the
 * widget by default (e.g. “GtkButton”) or can be set to an
 * application-specific value with gtk_widget_set_name(). By setting
 * the name of a widget, you allow users or theme authors to apply
 * styles to that specific widget in their gtkrc
 * file. `path_reversed_p` fills in the path in reverse order,
 * i.e. starting with `widget’`s name instead of starting with the name
 * of `widget’`s outermost ancestor.
 */
path(): [number, string, string]
/**
 * This function is only for use in widget implementations.
 * 
 * Flags the widget for a rerun of the GtkWidgetClass::size_allocate
 * function. Use this function instead of gtk_widget_queue_resize()
 * when the `widget'`s size request didn't change but it wants to
 * reposition its contents.
 * 
 * An example user of this function is gtk_widget_set_halign().
 */
queue_allocate(): void
/**
 * Mark `widget` as needing to recompute its expand flags. Call
 * this function when setting legacy expand child properties
 * on the child of a container.
 * 
 * See gtk_widget_compute_expand().
 */
queue_compute_expand(): void
/**
 * Equivalent to calling gtk_widget_queue_draw_area() for the
 * entire area of a widget.
 */
queue_draw(): void
/**
 * Convenience function that calls gtk_widget_queue_draw_region() on
 * the region created from the given coordinates.
 * 
 * The region here is specified in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(), and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 * 
 * `width` or `height` may be 0, in this case this function does
 * nothing. Negative values for `width` and `height` are not allowed.
 * @param x x coordinate of upper-left corner of rectangle to redraw
 * @param y y coordinate of upper-left corner of rectangle to redraw
 * @param width width of region to draw
 * @param height height of region to draw
 */
queue_draw_area(x: number, y: number, width: number, height: number): void
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
queue_draw_region(region: cairo.Region): void
/**
 * This function is only for use in widget implementations.
 * Flags a widget to have its size renegotiated; should
 * be called when a widget for some reason has a new size request.
 * For example, when you change the text in a #GtkLabel, #GtkLabel
 * queues a resize to ensure there’s enough space for the new text.
 * 
 * Note that you cannot call gtk_widget_queue_resize() on a widget
 * from inside its implementation of the GtkWidgetClass::size_allocate
 * virtual method. Calls to gtk_widget_queue_resize() from inside
 * GtkWidgetClass::size_allocate will be silently ignored.
 */
queue_resize(): void
/**
 * This function works like gtk_widget_queue_resize(),
 * except that the widget is not invalidated.
 */
queue_resize_no_redraw(): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
realize(): void
/**
 * Computes the intersection of a `widget’`s area and `region,` returning
 * the intersection. The result may be empty, use cairo_region_is_empty() to
 * check.
 * @param region a #cairo_region_t, in the same coordinate system as          @widget->allocation. That is, relative to @widget->window          for widgets which return %FALSE from gtk_widget_get_has_window();          relative to the parent window of @widget->window otherwise.
 * @returns A newly allocated region holding the intersection of @widget     and @region.
 */
region_intersect(region: cairo.Region): cairo.Region
/**
 * Registers a #GdkWindow with the widget and sets it up so that
 * the widget receives events for it. Call gtk_widget_unregister_window()
 * when destroying the window.
 * 
 * Before 3.8 you needed to call gdk_window_set_user_data() directly to set
 * this up. This is now deprecated and you should use gtk_widget_register_window()
 * instead. Old code will keep working as is, although some new features like
 * transparency might not work perfectly.
 * @param window a #GdkWindow
 */
register_window(window: Gdk.Window): void
/**
 * Removes an accelerator from `widget,` previously installed with
 * gtk_widget_add_accelerator().
 * @param accel_group accel group for this widget
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @returns whether an accelerator was installed and could be removed
 */
remove_accelerator(accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType): boolean
/**
 * Removes a widget from the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
 * must have previously been added to the list with
 * gtk_widget_add_mnemonic_label().
 * @param label a #GtkWidget that was previously set as a mnemonic label for         @widget with gtk_widget_add_mnemonic_label().
 */
remove_mnemonic_label(label: Gtk.Widget): void
/**
 * Removes a tick callback previously registered with
 * gtk_widget_add_tick_callback().
 * @param id an id returned by gtk_widget_add_tick_callback()
 */
remove_tick_callback(id: number): void
/**
 * A convenience function that uses the theme settings for `widget`
 * to look up `stock_id` and render it to a pixbuf. `stock_id` should
 * be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size`
 * should be a size such as #GTK_ICON_SIZE_MENU. `detail` should be a
 * string that identifies the widget or code doing the rendering, so
 * that theme engines can special-case rendering for that widget or
 * code.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be
 * freed after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @param detail render detail to pass to theme engine
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon(stock_id: string, size: number, detail?: (string | null)): (GdkPixbuf.Pixbuf | null)
/**
 * A convenience function that uses the theme engine and style
 * settings for `widget` to look up `stock_id` and render it to
 * a pixbuf. `stock_id` should be a stock icon ID such as
 * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
 * such as #GTK_ICON_SIZE_MENU.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be freed
 * after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon_pixbuf(stock_id: string, size: number): (GdkPixbuf.Pixbuf | null)
/**
 * Moves a widget from one #GtkContainer to another, handling reference
 * count issues to avoid destroying the widget.
 * @param new_parent a #GtkContainer to move the widget into
 */
reparent(new_parent: Gtk.Widget): void
/**
 * Reset the styles of `widget` and all descendents, so when
 * they are looked up again, they get the correct values
 * for the currently loaded RC file settings.
 * 
 * This function is not useful for applications.
 */
reset_rc_styles(): void
/**
 * Updates the style context of `widget` and all descendants
 * by updating its widget path. #GtkContainers may want
 * to use this on a child when reordering it in a way that a different
 * style might apply to it. See also gtk_container_get_path_for_child().
 */
reset_style(): void
/**
 * Very rarely-used function. This function is used to emit
 * an expose event on a widget. This function is not normally used
 * directly. The only time it is used is when propagating an expose
 * event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
 * and that is normally done using gtk_container_propagate_draw().
 * 
 * If you want to force an area of a window to be redrawn,
 * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
 * To cause the redraw to be done immediately, follow that call
 * with a call to gdk_window_process_updates().
 * @param event a expose #GdkEvent
 * @returns return from the event signal emission (%TRUE if   the event was handled)
 */
send_expose(event: Gdk.Event): number
/**
 * Sends the focus change `event` to `widget`
 * 
 * This function is not meant to be used by applications. The only time it
 * should be used is when it is necessary for a #GtkWidget to assign focus
 * to a widget that is semantically owned by the first widget even though
 * it’s not a direct child - for instance, a search entry in a floating
 * window similar to the quick search in #GtkTreeView.
 * 
 * An example of its usage is:
 * 
 * 
 * ```c
 *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
 * 
 *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
 *   fevent->focus_change.in = TRUE;
 *   fevent->focus_change.window = _gtk_widget_get_window (widget);
 *   if (fevent->focus_change.window != NULL)
 *     g_object_ref (fevent->focus_change.window);
 * 
 *   gtk_widget_send_focus_change (widget, fevent);
 * 
 *   gdk_event_free (event);
 * ```
 * 
 * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
 * @returns the return value from the event signal emission: %TRUE   if the event was handled, and %FALSE otherwise
 */
send_focus_change(event: Gdk.Event): boolean
/**
 * Given an accelerator group, `accel_group,` and an accelerator path,
 * `accel_path,` sets up an accelerator in `accel_group` so whenever the
 * key binding that is defined for `accel_path` is pressed, `widget`
 * will be activated.  This removes any accelerators (for any
 * accelerator group) installed by previous calls to
 * gtk_widget_set_accel_path(). Associating accelerators with
 * paths allows them to be modified by the user and the modifications
 * to be saved for future use. (See gtk_accel_map_save().)
 * 
 * This function is a low level function that would most likely
 * be used by a menu creation system like #GtkUIManager. If you
 * use #GtkUIManager, setting up accelerator paths will be done
 * automatically.
 * 
 * Even when you you aren’t using #GtkUIManager, if you only want to
 * set up accelerators on menu items gtk_menu_item_set_accel_path()
 * provides a somewhat more convenient interface.
 * 
 * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
 * pass a static string, you can save some memory by interning it first with
 * g_intern_static_string().
 * @param accel_path path used to look up the accelerator
 * @param accel_group a #GtkAccelGroup.
 */
set_accel_path(accel_path?: (string | null), accel_group?: (Gtk.AccelGroup | null)): void
/**
 * Sets the widget’s allocation.  This should not be used
 * directly, but from within a widget’s size_allocate method.
 * 
 * The allocation set should be the “adjusted” or actual
 * allocation. If you’re implementing a #GtkContainer, you want to use
 * gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
 * The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
 * allocation inside gtk_widget_size_allocate() to create an adjusted
 * allocation.
 * @param allocation a pointer to a #GtkAllocation to copy from
 */
set_allocation(allocation: Gtk.Allocation): void
/**
 * Sets whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * This is a hint to the widget and does not affect the behavior of
 * the GTK+ core; many widgets ignore this flag entirely. For widgets
 * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
 * the effect is to suppress default themed drawing of the widget's
 * background. (Children of the widget will still be drawn.) The application
 * is then entirely responsible for drawing the widget background.
 * 
 * Note that the background is still drawn when the widget is mapped.
 * @param app_paintable %TRUE if the application will paint on the widget
 */
set_app_paintable(app_paintable: boolean): void
/**
 * Specifies whether `widget` can be a default widget. See
 * gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param can_default whether or not @widget can be a default widget.
 */
set_can_default(can_default: boolean): void
/**
 * Specifies whether `widget` can own the input focus. See
 * gtk_widget_grab_focus() for actually setting the input focus on a
 * widget.
 * @param can_focus whether or not @widget can own the input focus.
 */
set_can_focus(can_focus: boolean): void
/**
 * Sets whether `widget` should be mapped along with its when its parent
 * is mapped and `widget` has been shown with gtk_widget_show().
 * 
 * The child visibility can be set for widget before it is added to
 * a container with gtk_widget_set_parent(), to avoid mapping
 * children unnecessary before immediately unmapping them. However
 * it will be reset to its default state of %TRUE when the widget
 * is removed from a container.
 * 
 * Note that changing the child visibility of a widget does not
 * queue a resize on the widget. Most of the time, the size of
 * a widget is computed from all visible children, whether or
 * not they are mapped. If this is not the case, the container
 * can queue a resize itself.
 * 
 * This function is only useful for container implementations and
 * never should be called by an application.
 * @param is_visible if %TRUE, @widget should be mapped along with its parent.
 */
set_child_visible(is_visible: boolean): void
/**
 * Sets the widget’s clip.  This must not be used directly,
 * but from within a widget’s size_allocate method.
 * It must be called after gtk_widget_set_allocation() (or after chaining up
 * to the parent class), because that function resets the clip.
 * 
 * The clip set should be the area that `widget` draws on. If `widget` is a
 * #GtkContainer, the area must contain all children's clips.
 * 
 * If this function is not called by `widget` during a ::size-allocate handler,
 * the clip will be set to `widget'`s allocation.
 * @param clip a pointer to a #GtkAllocation to copy from
 */
set_clip(clip: Gtk.Allocation): void
/**
 * Sets a widgets composite name. The widget must be
 * a composite child of its parent; see gtk_widget_push_composite_child().
 * @param name the name to set
 */
set_composite_name(name: string): void
/**
 * Enables or disables a #GdkDevice to interact with `widget`
 * and all its children.
 * 
 * It does so by descending through the #GdkWindow hierarchy
 * and enabling the same mask that is has for core events
 * (i.e. the one that gdk_window_get_events() returns).
 * @param device a #GdkDevice
 * @param enabled whether to enable the device
 */
set_device_enabled(device: Gdk.Device, enabled: boolean): void
/**
 * Sets the device event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive from `device`. Keep
 * in mind that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_device_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with windowless widgets (which return
 * %FALSE from gtk_widget_get_has_window());
 * to get events on those widgets, place them inside a #GtkEventBox
 * and receive events on the event box.
 * @param device a #GdkDevice
 * @param events event mask
 */
set_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Sets the reading direction on a particular widget. This direction
 * controls the primary direction for widgets containing text,
 * and also the direction in which the children of a container are
 * packed. The ability to set the direction is present in order
 * so that correct localization into languages with right-to-left
 * reading directions can be done. Generally, applications will
 * let the default reading direction present, except for containers
 * where the containers are arranged in an order that is explicitly
 * visual rather than logical (such as buttons for text justification).
 * 
 * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
 * set by gtk_widget_set_default_direction() will be used.
 * @param dir the new direction
 */
set_direction(dir: Gtk.TextDirection): void
set_direction(...args: never[]): any
/**
 * Widgets are double buffered by default; you can use this function
 * to turn off the buffering. “Double buffered” simply means that
 * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
 * automatically around expose events sent to the
 * widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
 * window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
 * buffer to the screen. The result is that users see the window
 * update in one smooth step, and don’t see individual graphics
 * primitives being rendered.
 * 
 * In very simple terms, double buffered widgets don’t flicker,
 * so you would only use this function to turn off double buffering
 * if you had special needs and really knew what you were doing.
 * 
 * Note: if you turn off double-buffering, you have to handle
 * expose events, since even the clearing to the background color or
 * pixmap will not happen automatically (as it is done in
 * gdk_window_begin_draw_frame()).
 * 
 * In 3.10 GTK and GDK have been restructured for translucent drawing. Since
 * then expose events for double-buffered widgets are culled into a single
 * event to the toplevel GDK window. If you now unset double buffering, you
 * will cause a separate rendering pass for every widget. This will likely
 * cause rendering problems - in particular related to stacking - and usually
 * increases rendering times significantly.
 * @param double_buffered %TRUE to double-buffer a widget
 */
set_double_buffered(double_buffered: boolean): void
/**
 * Sets the event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive. Keep in mind
 * that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with widgets that have no window.
 * (See gtk_widget_get_has_window()).  To get events on those widgets,
 * place them inside a #GtkEventBox and receive events on the event
 * box.
 * @param events event mask
 */
set_events(events: number): void
/**
 * Sets whether the widget should grab focus when it is clicked with the mouse.
 * Making mouse clicks not grab focus is useful in places like toolbars where
 * you don’t want the keyboard focus removed from the main area of the
 * application.
 * @param focus_on_click whether the widget should grab focus when clicked with the mouse
 */
set_focus_on_click(focus_on_click: boolean): void
/**
 * Sets the font map to use for Pango rendering. When not set, the widget
 * will inherit the font map from its parent.
 * @param font_map a #PangoFontMap, or %NULL to unset any previously     set font map
 */
set_font_map(font_map?: (Pango.FontMap | null)): void
/**
 * Sets the #cairo_font_options_t used for Pango rendering in this widget.
 * When not set, the default font options for the #GdkScreen will be used.
 * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
 */
set_font_options(options?: (cairo.FontOptions | null)): void
/**
 * Sets the horizontal alignment of `widget`.
 * See the #GtkWidget:halign property.
 * @param align the horizontal alignment
 */
set_halign(align: Gtk.Align): void
/**
 * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
 * #GtkWidget:has-tooltip for more information.
 * @param has_tooltip whether or not @widget has a tooltip.
 */
set_has_tooltip(has_tooltip: boolean): void
/**
 * Specifies whether `widget` has a #GdkWindow of its own. Note that
 * all realized widgets have a non-%NULL “window” pointer
 * (gtk_widget_get_window() never returns a %NULL window when a widget
 * is realized), but for many of them it’s actually the #GdkWindow of
 * one of its parent widgets. Widgets that do not create a %window for
 * themselves in #GtkWidget::realize must announce this by
 * calling this function with `has_window` = %FALSE.
 * 
 * This function should only be called by widget implementations,
 * and they should call it in their init() function.
 * @param has_window whether or not @widget has a window.
 */
set_has_window(has_window: boolean): void
/**
 * Sets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Call this function to set the expand flag if you would like your
 * widget to become larger horizontally when the window has extra
 * room.
 * 
 * By default, widgets automatically expand if any of their children
 * want to expand. (To see if a widget will automatically expand given
 * its current children and state, call gtk_widget_compute_expand(). A
 * container can decide how the expandability of children affects the
 * expansion of the container by overriding the compute_expand virtual
 * method on #GtkWidget.).
 * 
 * Setting hexpand explicitly with this function will override the
 * automatic expand behavior.
 * 
 * This function forces the widget to expand or not to expand,
 * regardless of children.  The override occurs because
 * gtk_widget_set_hexpand() sets the hexpand-set property (see
 * gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
 * value to be used, rather than looking at children and widget state.
 * @param expand whether to expand
 */
set_hexpand(expand: boolean): void
/**
 * Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
 * be used.
 * 
 * The hexpand-set property will be set automatically when you call
 * gtk_widget_set_hexpand() to set hexpand, so the most likely
 * reason to use this function would be to unset an explicit expand
 * flag.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @param set value for hexpand-set property
 */
set_hexpand_set(set: boolean): void
/**
 * Marks the widget as being mapped.
 * 
 * This function should only ever be called in a derived widget's
 * “map” or “unmap” implementation.
 * @param mapped %TRUE to mark the widget as mapped
 */
set_mapped(mapped: boolean): void
/**
 * Sets the bottom margin of `widget`.
 * See the #GtkWidget:margin-bottom property.
 * @param margin the bottom margin
 */
set_margin_bottom(margin: number): void
/**
 * Sets the end margin of `widget`.
 * See the #GtkWidget:margin-end property.
 * @param margin the end margin
 */
set_margin_end(margin: number): void
/**
 * Sets the left margin of `widget`.
 * See the #GtkWidget:margin-left property.
 * @param margin the left margin
 */
set_margin_left(margin: number): void
/**
 * Sets the right margin of `widget`.
 * See the #GtkWidget:margin-right property.
 * @param margin the right margin
 */
set_margin_right(margin: number): void
/**
 * Sets the start margin of `widget`.
 * See the #GtkWidget:margin-start property.
 * @param margin the start margin
 */
set_margin_start(margin: number): void
/**
 * Sets the top margin of `widget`.
 * See the #GtkWidget:margin-top property.
 * @param margin the top margin
 */
set_margin_top(margin: number): void
/**
 * Widgets can be named, which allows you to refer to them from a
 * CSS file. You can apply a style to widgets with a particular name
 * in the CSS file. See the documentation for the CSS syntax (on the
 * same page as the docs for #GtkStyleContext).
 * 
 * Note that the CSS syntax has certain special characters to delimit
 * and represent elements in a selector (period, #, >, *...), so using
 * these will make your widget impossible to match by name. Any combination
 * of alphanumeric symbols, dashes and underscores will suffice.
 * @param name name for the widget
 */
set_name(name: string): void
/**
 * Sets the #GtkWidget:no-show-all property, which determines whether
 * calls to gtk_widget_show_all() will affect this widget.
 * 
 * This is mostly for use in constructing widget hierarchies with externally
 * controlled visibility, see #GtkUIManager.
 * @param no_show_all the new value for the “no-show-all” property
 */
set_no_show_all(no_show_all: boolean): void
/**
 * Request the `widget` to be rendered partially transparent,
 * with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
 * are clamped to the [0,1] range.).
 * This works on both toplevel widget, and child widgets, although there
 * are some limitations:
 * 
 * For toplevel widgets this depends on the capabilities of the windowing
 * system. On X11 this has any effect only on X screens with a compositing manager
 * running. See gtk_widget_is_composited(). On Windows it should work
 * always, although setting a window’s opacity after the window has been
 * shown causes it to flicker once on Windows.
 * 
 * For child widgets it doesn’t work if any affected widget has a native window, or
 * disables double buffering.
 * @param opacity desired opacity, between 0 and 1
 */
set_opacity(opacity: number): void
/**
 * This function is useful only when implementing subclasses of
 * #GtkContainer.
 * Sets the container as the parent of `widget,` and takes care of
 * some details such as updating the state and style of the child
 * to reflect its new location. The opposite function is
 * gtk_widget_unparent().
 * @param parent parent container
 */
set_parent(parent: Gtk.Widget): void
/**
 * Sets a non default parent window for `widget`.
 * 
 * For #GtkWindow classes, setting a `parent_window` effects whether
 * the window is a toplevel window or can be embedded into other
 * widgets.
 * 
 * For #GtkWindow classes, this needs to be called before the
 * window is realized.
 * @param parent_window the new parent window.
 */
set_parent_window(parent_window: Gdk.Window): void
/**
 * Marks the widget as being realized. This function must only be
 * called after all #GdkWindows for the `widget` have been created
 * and registered.
 * 
 * This function should only ever be called in a derived widget's
 * “realize” or “unrealize” implementation.
 * @param realized %TRUE to mark the widget as realized
 */
set_realized(realized: boolean): void
/**
 * Specifies whether `widget` will be treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param receives_default whether or not @widget can be a default widget.
 */
set_receives_default(receives_default: boolean): void
/**
 * Sets whether the entire widget is queued for drawing when its size
 * allocation changes. By default, this setting is %TRUE and
 * the entire widget is redrawn on every size change. If your widget
 * leaves the upper left unchanged when made bigger, turning this
 * setting off will improve performance.
 * 
 * Note that for widgets where gtk_widget_get_has_window() is %FALSE
 * setting this flag to %FALSE turns off all allocation on resizing:
 * the widget will not even redraw if its position changes; this is to
 * allow containers that don’t draw anything to avoid excess
 * invalidations. If you set this flag on a widget with no window that
 * does draw on `widget->`window, you are
 * responsible for invalidating both the old and new allocation of the
 * widget when the widget is moved and responsible for invalidating
 * regions newly when the widget increases size.
 * @param redraw_on_allocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
 */
set_redraw_on_allocate(redraw_on_allocate: boolean): void
/**
 * Sets the sensitivity of a widget. A widget is sensitive if the user
 * can interact with it. Insensitive widgets are “grayed out” and the
 * user can’t interact with them. Insensitive widgets are known as
 * “inactive”, “disabled”, or “ghosted” in some other toolkits.
 * @param sensitive %TRUE to make the widget sensitive
 */
set_sensitive(sensitive: boolean): void
/**
 * Sets the minimum size of a widget; that is, the widget’s size
 * request will be at least `width` by `height`. You can use this
 * function to force a widget to be larger than it normally would be.
 * 
 * In most cases, gtk_window_set_default_size() is a better choice for
 * toplevel windows than this function; setting the default size will
 * still allow users to shrink the window. Setting the size request
 * will force them to leave the window at least as large as the size
 * request. When dealing with window sizes,
 * gtk_window_set_geometry_hints() can be a useful function as well.
 * 
 * Note the inherent danger of setting any fixed size - themes,
 * translations into other languages, different fonts, and user action
 * can all change the appropriate size for a given widget. So, it's
 * basically impossible to hardcode a size that will always be
 * correct.
 * 
 * The size request of a widget is the smallest size a widget can
 * accept while still functioning well and drawing itself correctly.
 * However in some strange cases a widget may be allocated less than
 * its requested size, and in many cases a widget may be allocated more
 * space than it requested.
 * 
 * If the size request in a given direction is -1 (unset), then
 * the “natural” size request of the widget will be used instead.
 * 
 * The size request set here does not include any margin from the
 * #GtkWidget properties margin-left, margin-right, margin-top, and
 * margin-bottom, but it does include pretty much all other padding
 * or border properties set by any subclass of #GtkWidget.
 * @param width width @widget should request, or -1 to unset
 * @param height height @widget should request, or -1 to unset
 */
set_size_request(width: number, height: number): void
/**
 * This function is for use in widget implementations. Sets the state
 * of a widget (insensitive, prelighted, etc.) Usually you should set
 * the state using wrapper functions such as gtk_widget_set_sensitive().
 * @param state new state for @widget
 */
set_state(state: Gtk.StateType): void
/**
 * This function is for use in widget implementations. Turns on flag
 * values in the current widget state (insensitive, prelighted, etc.).
 * 
 * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
 * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
 * direction, use gtk_widget_set_direction().
 * 
 * It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
 * will be propagated down to all non-internal children if `widget` is a
 * #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
 * down to all #GtkContainer children by different means than turning on the
 * state flag down the hierarchy, both gtk_widget_get_state_flags() and
 * gtk_widget_is_sensitive() will make use of these.
 * @param flags State flags to turn on
 * @param clear Whether to clear state before turning on @flags
 */
set_state_flags(flags: Gtk.StateFlags, clear: boolean): void
/**
 * Used to set the #GtkStyle for a widget (`widget->`style). Since
 * GTK 3, this function does nothing, the passed in style is ignored.
 * @param style a #GtkStyle, or %NULL to remove the effect     of a previous call to gtk_widget_set_style() and go back to     the default style
 */
set_style(style?: (Gtk.Style | null)): void
/**
 * Enables or disables multiple pointer awareness. If this setting is %TRUE,
 * `widget` will start receiving multiple, per device enter/leave events. Note
 * that if custom #GdkWindows are created in #GtkWidget::realize,
 * gdk_window_set_support_multidevice() will have to be called manually on them.
 * @param support_multidevice %TRUE to support input from multiple devices.
 */
set_support_multidevice(support_multidevice: boolean): void
/**
 * Sets `markup` as the contents of the tooltip, which is marked up with
 *  the [Pango text markup language][PangoMarkupFormat].
 * 
 * This function will take care of setting #GtkWidget:has-tooltip to %TRUE
 * and of the default handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-markup property and
 * gtk_tooltip_set_markup().
 * @param markup the contents of the tooltip for @widget, or %NULL
 */
set_tooltip_markup(markup?: (string | null)): void
/**
 * Sets `text` as the contents of the tooltip. This function will take
 * care of setting #GtkWidget:has-tooltip to %TRUE and of the default
 * handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
 * @param text the contents of the tooltip for @widget
 */
set_tooltip_text(text?: (string | null)): void
/**
 * Replaces the default window used for displaying
 * tooltips with `custom_window`. GTK+ will take care of showing and
 * hiding `custom_window` at the right moment, to behave likewise as
 * the default tooltip window. If `custom_window` is %NULL, the default
 * tooltip window will be used.
 * @param custom_window a #GtkWindow, or %NULL
 */
set_tooltip_window(custom_window?: (Gtk.Window | null)): void
/**
 * Sets the vertical alignment of `widget`.
 * See the #GtkWidget:valign property.
 * @param align the vertical alignment
 */
set_valign(align: Gtk.Align): void
/**
 * Sets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_set_hexpand() for more detail.
 * @param expand whether to expand
 */
set_vexpand(expand: boolean): void
/**
 * Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
 * be used.
 * 
 * See gtk_widget_set_hexpand_set() for more detail.
 * @param set value for vexpand-set property
 */
set_vexpand_set(set: boolean): void
/**
 * Sets the visibility state of `widget`. Note that setting this to
 * %TRUE doesn’t mean the widget is actually viewable, see
 * gtk_widget_get_visible().
 * 
 * This function simply calls gtk_widget_show() or gtk_widget_hide()
 * but is nicer to use when the visibility of the widget depends on
 * some condition.
 * @param visible whether the widget should be shown or not
 */
set_visible(visible: boolean): void
/**
 * Sets the visual that should be used for by widget and its children for
 * creating #GdkWindows. The visual must be on the same #GdkScreen as
 * returned by gtk_widget_get_screen(), so handling the
 * #GtkWidget::screen-changed signal is necessary.
 * 
 * Setting a new `visual` will not cause `widget` to recreate its windows,
 * so you should call this function before `widget` is realized.
 * @param visual visual to be used or %NULL to unset a previous one
 */
set_visual(visual?: (Gdk.Visual | null)): void
/**
 * Sets a widget’s window. This function should only be used in a
 * widget’s #GtkWidget::realize implementation. The %window passed is
 * usually either new window created with gdk_window_new(), or the
 * window of its parent widget as returned by
 * gtk_widget_get_parent_window().
 * 
 * Widgets must indicate whether they will create their own #GdkWindow
 * by calling gtk_widget_set_has_window(). This is usually done in the
 * widget’s init() function.
 * 
 * Note that this function does not add any reference to `window`.
 * @param window a #GdkWindow
 */
set_window(window: Gdk.Window): void
/**
 * Sets a shape for this widget’s GDK window. This allows for
 * transparent windows etc., see gdk_window_shape_combine_region()
 * for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
show_all(): void
/**
 * Shows a widget. If the widget is an unmapped toplevel widget
 * (i.e. a #GtkWindow that has not yet been shown), enter the main
 * loop and wait for the window to actually be mapped. Be careful;
 * because the main loop is running, anything can happen during
 * this function.
 */
show_now(): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
size_allocate(allocation: Gtk.Allocation): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size,
 * position and (optionally) baseline to their child widgets.
 * 
 * In this function, the allocation and baseline may be adjusted. It
 * will be forced to a 1x1 minimum size, and the
 * adjust_size_allocation virtual and adjust_baseline_allocation
 * methods on the child will be used to adjust the allocation and
 * baseline. Standard adjustments include removing the widget's
 * margins, and applying the widget’s #GtkWidget:halign and
 * #GtkWidget:valign properties.
 * 
 * If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
 * baseline argument is ignored and -1 is used instead.
 * @param allocation position and size to be allocated to @widget
 * @param baseline The baseline of the child, or -1
 */
size_allocate_with_baseline(allocation: Gtk.Allocation, baseline: number): void
/**
 * This function is typically used when implementing a #GtkContainer
 * subclass.  Obtains the preferred size of a widget. The container
 * uses this information to arrange its child widgets and decide what
 * size allocations to give them with gtk_widget_size_allocate().
 * 
 * You can also call this function from an application, with some
 * caveats. Most notably, getting a size request requires the widget
 * to be associated with a screen, because font information may be
 * needed. Multihead-aware applications should keep this in mind.
 * 
 * Also remember that the size request is not necessarily the size
 * a widget will actually be allocated.
 */
size_request(): Gtk.Requisition
/**
 * This function attaches the widget’s #GtkStyle to the widget's
 * #GdkWindow. It is a replacement for
 * 
 * 
 * ```
 * widget->style = gtk_style_attach (widget->style, widget->window);
 * ```
 * 
 * 
 * and should only ever be called in a derived widget’s “realize”
 * implementation which does not chain up to its parent class'
 * “realize” implementation, because one of the parent classes
 * (finally #GtkWidget) would attach the style itself.
 */
style_attach(): void
/**
 * Gets the value of a style property of `widget`.
 * @param property_name the name of a style property
 * @param value location to return the property value
 */
style_get_property(property_name: string, value: GObject.Value): void
/**
 * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
 * This causes all queued #GtkWidget::child-notify signals on `widget` to be
 * emitted.
 */
thaw_child_notify(): void
/**
 * Translate coordinates relative to `src_widget’`s allocation to coordinates
 * relative to `dest_widget’`s allocations. In order to perform this
 * operation, both widgets must be realized, and must share a common
 * toplevel.
 * @param dest_widget a #GtkWidget
 * @param src_x X position relative to @src_widget
 * @param src_y Y position relative to @src_widget
 * @returns %FALSE if either widget was not realized, or there   was no common ancestor. In this case, nothing is stored in   *@dest_x and *@dest_y. Otherwise %TRUE.
 */
translate_coordinates(dest_widget: Gtk.Widget, src_x: number, src_y: number): [boolean, number, number]
/**
 * Triggers a tooltip query on the display where the toplevel of `widget`
 * is located. See gtk_tooltip_trigger_tooltip_query() for more
 * information.
 */
trigger_tooltip_query(): void
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
unmap(): void
/**
 * This function is only for use in widget implementations.
 * Should be called by implementations of the remove method
 * on #GtkContainer, to dissociate a child from the container.
 */
unparent(): void
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
unrealize(): void
/**
 * Unregisters a #GdkWindow from the widget that was previously set up with
 * gtk_widget_register_window(). You need to call this when the window is
 * no longer used by the widget, such as when you destroy it.
 * @param window a #GdkWindow
 */
unregister_window(window: Gdk.Window): void
/**
 * This function is for use in widget implementations. Turns off flag
 * values for the current widget state (insensitive, prelighted, etc.).
 * See gtk_widget_set_state_flags().
 * @param flags State flags to turn off
 */
unset_state_flags(flags: Gtk.StateFlags): void
vfunc_adjust_baseline_allocation(baseline: number): void
vfunc_adjust_baseline_request(minimum_baseline: number, natural_baseline: number): void
vfunc_adjust_size_allocation(orientation: Gtk.Orientation, minimum_size: number, natural_size: number, allocated_pos: number, allocated_size: number): void
vfunc_adjust_size_request(orientation: Gtk.Orientation, minimum_size: number, natural_size: number): void
vfunc_button_press_event(event: Gdk.EventButton): boolean
vfunc_button_release_event(event: Gdk.EventButton): boolean
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 */
vfunc_can_activate_accel(signal_id: number): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
vfunc_child_notify(child_property: GObject.ParamSpec): void
vfunc_composited_changed(): void
vfunc_compute_expand(hexpand_p: boolean, vexpand_p: boolean): void
vfunc_configure_event(event: Gdk.EventConfigure): boolean
vfunc_damage_event(event: Gdk.EventExpose): boolean
vfunc_delete_event(event: Gdk.EventAny): boolean
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
vfunc_destroy(): void
vfunc_destroy_event(event: Gdk.EventAny): boolean
vfunc_direction_changed(previous_direction: Gtk.TextDirection): void
vfunc_dispatch_child_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_drag_begin(context: Gdk.DragContext): void
vfunc_drag_data_delete(context: Gdk.DragContext): void
vfunc_drag_data_get(context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_data_received(context: Gdk.DragContext, x: number, y: number, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_drop(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_drag_end(context: Gdk.DragContext): void
vfunc_drag_failed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
vfunc_drag_leave(context: Gdk.DragContext, time_: number): void
vfunc_drag_motion(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_draw(cr: cairo.Context): boolean
vfunc_enter_notify_event(event: Gdk.EventCrossing): boolean
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 */
vfunc_event(event: Gdk.Event): boolean
vfunc_focus(direction: Gtk.DirectionType): boolean
vfunc_focus_in_event(event: Gdk.EventFocus): boolean
vfunc_focus_out_event(event: Gdk.EventFocus): boolean
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 */
vfunc_get_accessible(): Atk.Object
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
vfunc_get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
vfunc_get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
vfunc_get_preferred_width_for_height(height: number): [number, number]
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 */
vfunc_get_request_mode(): Gtk.SizeRequestMode
vfunc_grab_broken_event(event: Gdk.EventGrabBroken): boolean
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
vfunc_grab_focus(): void
vfunc_grab_notify(was_grabbed: boolean): void
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
vfunc_hide(): void
vfunc_hierarchy_changed(previous_toplevel: Gtk.Widget): void
vfunc_key_press_event(event: Gdk.EventKey): boolean
vfunc_key_release_event(event: Gdk.EventKey): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 */
vfunc_keynav_failed(direction: Gtk.DirectionType): boolean
vfunc_leave_notify_event(event: Gdk.EventCrossing): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
vfunc_map(): void
vfunc_map_event(event: Gdk.EventAny): boolean
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 */
vfunc_mnemonic_activate(group_cycling: boolean): boolean
vfunc_motion_notify_event(event: Gdk.EventMotion): boolean
vfunc_move_focus(direction: Gtk.DirectionType): void
vfunc_parent_set(previous_parent: Gtk.Widget): void
vfunc_popup_menu(): boolean
vfunc_property_notify_event(event: Gdk.EventProperty): boolean
vfunc_proximity_in_event(event: Gdk.EventProximity): boolean
vfunc_proximity_out_event(event: Gdk.EventProximity): boolean
vfunc_query_tooltip(x: number, y: number, keyboard_tooltip: boolean, tooltip: Gtk.Tooltip): boolean
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
vfunc_queue_draw_region(region: cairo.Region): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
vfunc_realize(): void
vfunc_screen_changed(previous_screen: Gdk.Screen): void
vfunc_scroll_event(event: Gdk.EventScroll): boolean
vfunc_selection_clear_event(event: Gdk.EventSelection): boolean
vfunc_selection_get(selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_selection_notify_event(event: Gdk.EventSelection): boolean
vfunc_selection_received(selection_data: Gtk.SelectionData, time_: number): void
vfunc_selection_request_event(event: Gdk.EventSelection): boolean
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
vfunc_show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
vfunc_show_all(): void
vfunc_show_help(help_type: Gtk.WidgetHelpType): boolean
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
vfunc_size_allocate(allocation: Gtk.Allocation): void
vfunc_state_changed(previous_state: Gtk.StateType): void
vfunc_state_flags_changed(previous_state_flags: Gtk.StateFlags): void
vfunc_style_set(previous_style: Gtk.Style): void
vfunc_style_updated(): void
vfunc_touch_event(event: Gdk.EventTouch): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
vfunc_unmap(): void
vfunc_unmap_event(event: Gdk.EventAny): boolean
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
vfunc_unrealize(): void
vfunc_visibility_notify_event(event: Gdk.EventVisibility): boolean
vfunc_window_state_event(event: Gdk.EventWindowState): boolean
}

module PropertiesGroup {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps, Gio.ActionGroup.ConstructorProps {
object: GObject.Object;
    object_type: GObject.GType;
    objectType: GObject.GType;
    }

}

class PropertiesGroup extends GObject.Object implements Gio.ActionGroup {

    // Own properties of Dazzle.PropertiesGroup

    get object(): GObject.Object;
    set object(val: GObject.Object);
    get object_type(): GObject.GType;
    get objectType(): GObject.GType;

    // Constructors of Dazzle.PropertiesGroup


constructor(properties?: Partial<PropertiesGroup.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](object: GObject.Object): PropertiesGroup;

static new_for_type(object_type: GObject.GType): PropertiesGroup;

    // Own methods of Dazzle.PropertiesGroup

    /**
     * This function will try to add all properties found on the target
     * instance to the group. Only properties that are supported by the
     * #DzlPropertiesGroup will be added.
     * 
     * The action name of all added properties will be identical to their
     * property name.
     */
    add_all_properties(): void
    /**
     * Adds a new stateful action named `name` which maps to the underlying
     * property `property_name` of #DzlPropertiesGroup:object.
     * @param name the name of the action
     * @param property_name the name of the property
     */
    add_property(name: string, property_name: string): void
    /**
     * Adds a new stateful action named `name` which maps to the underlying
     * property `property_name` of #DzlPropertiesGroup:object.
     * 
     * Seting `flags` allows you to tweak some settings about the action.
     * @param name the name of the action
     * @param property_name the name of the property
     * @param flags optional flags for the action
     */
    add_property_full(name: string, property_name: string, flags: PropertiesFlags): void
    /**
     * Removes an action from `self` that was previously added with
     * dzl_properties_group_add_property(). `name` should match the
     * name parameter to that function.
     * @param name the name of the action
     */
    remove(name: string): void

// Inherited methods
/**
 * Emits the #GActionGroup::action-added signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 */
action_added(action_name: string): void
/**
 * Emits the #GActionGroup::action-enabled-changed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 * @param enabled whether or not the action is now enabled
 */
action_enabled_changed(action_name: string, enabled: boolean): void
/**
 * Emits the #GActionGroup::action-removed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 */
action_removed(action_name: string): void
/**
 * Emits the #GActionGroup::action-state-changed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 * @param state the new state of the named action
 */
action_state_changed(action_name: string, state: GLib.Variant): void
/**
 * Activate the named action within `action_group`.
 * 
 * If the action is expecting a parameter, then the correct type of
 * parameter must be given as `parameter`.  If the action is expecting no
 * parameters then `parameter` must be %NULL.  See
 * g_action_group_get_action_parameter_type().
 * 
 * If the #GActionGroup implementation supports asynchronous remote
 * activation over D-Bus, this call may return before the relevant
 * D-Bus traffic has been sent, or any replies have been received. In
 * order to block on such asynchronous activation calls,
 * g_dbus_connection_flush() should be called prior to the code, which
 * depends on the result of the action activation. Without flushing
 * the D-Bus connection, there is no guarantee that the action would
 * have been activated.
 * 
 * The following code which runs in a remote app instance, shows an
 * example of a "quit" action being activated on the primary app
 * instance over D-Bus. Here g_dbus_connection_flush() is called
 * before `exit()`. Without g_dbus_connection_flush(), the "quit" action
 * may fail to be activated on the primary instance.
 * 
 * 
 * ```c
 * // call "quit" action on primary instance
 * g_action_group_activate_action (G_ACTION_GROUP (app), "quit", NULL);
 * 
 * // make sure the action is activated now
 * g_dbus_connection_flush (...);
 * 
 * g_debug ("application has been terminated. exiting.");
 * 
 * exit (0);
 * ```
 * 
 * @param action_name the name of the action to activate
 * @param parameter parameters to the activation
 */
activate_action(action_name: string, parameter?: (GLib.Variant | null)): void
/**
 * Request for the state of the named action within `action_group` to be
 * changed to `value`.
 * 
 * The action must be stateful and `value` must be of the correct type.
 * See g_action_group_get_action_state_type().
 * 
 * This call merely requests a change.  The action may refuse to change
 * its state or may change its state to something other than `value`.
 * See g_action_group_get_action_state_hint().
 * 
 * If the `value` GVariant is floating, it is consumed.
 * @param action_name the name of the action to request the change on
 * @param value the new state
 */
change_action_state(action_name: string, value: GLib.Variant): void
/**
 * Checks if the named action within `action_group` is currently enabled.
 * 
 * An action must be enabled in order to be activated or in order to
 * have its state changed from outside callers.
 * @param action_name the name of the action to query
 * @returns whether or not the action is currently enabled
 */
get_action_enabled(action_name: string): boolean
/**
 * Queries the type of the parameter that must be given when activating
 * the named action within `action_group`.
 * 
 * When activating the action using g_action_group_activate_action(),
 * the #GVariant given to that function must be of the type returned
 * by this function.
 * 
 * In the case that this function returns %NULL, you must not give any
 * #GVariant, but %NULL instead.
 * 
 * The parameter type of a particular action will never change but it is
 * possible for an action to be removed and for a new action to be added
 * with the same name but a different parameter type.
 * @param action_name the name of the action to query
 * @returns the parameter type
 */
get_action_parameter_type(action_name: string): (GLib.VariantType | null)
/**
 * Queries the current state of the named action within `action_group`.
 * 
 * If the action is not stateful then %NULL will be returned.  If the
 * action is stateful then the type of the return value is the type
 * given by g_action_group_get_action_state_type().
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @param action_name the name of the action to query
 * @returns the current state of the action
 */
get_action_state(action_name: string): (GLib.Variant | null)
/**
 * Requests a hint about the valid range of values for the state of the
 * named action within `action_group`.
 * 
 * If %NULL is returned it either means that the action is not stateful
 * or that there is no hint about the valid range of values for the
 * state of the action.
 * 
 * If a #GVariant array is returned then each item in the array is a
 * possible value for the state.  If a #GVariant pair (ie: two-tuple) is
 * returned then the tuple specifies the inclusive lower and upper bound
 * of valid values for the state.
 * 
 * In any case, the information is merely a hint.  It may be possible to
 * have a state value outside of the hinted range and setting a value
 * within the range may fail.
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @param action_name the name of the action to query
 * @returns the state range hint
 */
get_action_state_hint(action_name: string): (GLib.Variant | null)
/**
 * Queries the type of the state of the named action within
 * `action_group`.
 * 
 * If the action is stateful then this function returns the
 * #GVariantType of the state.  All calls to
 * g_action_group_change_action_state() must give a #GVariant of this
 * type and g_action_group_get_action_state() will return a #GVariant
 * of the same type.
 * 
 * If the action is not stateful then this function will return %NULL.
 * In that case, g_action_group_get_action_state() will return %NULL
 * and you must not call g_action_group_change_action_state().
 * 
 * The state type of a particular action will never change but it is
 * possible for an action to be removed and for a new action to be added
 * with the same name but a different state type.
 * @param action_name the name of the action to query
 * @returns the state type, if the action is stateful
 */
get_action_state_type(action_name: string): (GLib.VariantType | null)
/**
 * Checks if the named action exists within `action_group`.
 * @param action_name the name of the action to check for
 * @returns whether the named action exists
 */
has_action(action_name: string): boolean
/**
 * Lists the actions contained within `action_group`.
 * 
 * The caller is responsible for freeing the list with g_strfreev() when
 * it is no longer required.
 * @returns a %NULL-terminated array of the names of the actions in the group
 */
list_actions(): string[]
/**
 * Queries all aspects of the named action within an `action_group`.
 * 
 * This function acquires the information available from
 * g_action_group_has_action(), g_action_group_get_action_enabled(),
 * g_action_group_get_action_parameter_type(),
 * g_action_group_get_action_state_type(),
 * g_action_group_get_action_state_hint() and
 * g_action_group_get_action_state() with a single function call.
 * 
 * This provides two main benefits.
 * 
 * The first is the improvement in efficiency that comes with not having
 * to perform repeated lookups of the action in order to discover
 * different things about it.  The second is that implementing
 * #GActionGroup can now be done by only overriding this one virtual
 * function.
 * 
 * The interface provides a default implementation of this function that
 * calls the individual functions, as required, to fetch the
 * information.  The interface also provides default implementations of
 * those functions that call this function.  All implementations,
 * therefore, must override either this function or all of the others.
 * 
 * If the action exists, %TRUE is returned and any of the requested
 * fields (as indicated by having a non-%NULL reference passed in) are
 * filled.  If the action doesn't exist, %FALSE is returned and the
 * fields may or may not have been modified.
 * @param action_name the name of an action in the group
 * @returns %TRUE if the action exists, else %FALSE
 */
query_action(action_name: string): [boolean, boolean, GLib.VariantType | null, GLib.VariantType | null, GLib.Variant | null, GLib.Variant | null]
/**
 * Emits the #GActionGroup::action-added signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 */
vfunc_action_added(action_name: string): void
/**
 * Emits the #GActionGroup::action-enabled-changed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 * @param enabled whether or not the action is now enabled
 */
vfunc_action_enabled_changed(action_name: string, enabled: boolean): void
/**
 * Emits the #GActionGroup::action-removed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 */
vfunc_action_removed(action_name: string): void
/**
 * Emits the #GActionGroup::action-state-changed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 * @param state the new state of the named action
 */
vfunc_action_state_changed(action_name: string, state: GLib.Variant): void
/**
 * Activate the named action within `action_group`.
 * 
 * If the action is expecting a parameter, then the correct type of
 * parameter must be given as `parameter`.  If the action is expecting no
 * parameters then `parameter` must be %NULL.  See
 * g_action_group_get_action_parameter_type().
 * 
 * If the #GActionGroup implementation supports asynchronous remote
 * activation over D-Bus, this call may return before the relevant
 * D-Bus traffic has been sent, or any replies have been received. In
 * order to block on such asynchronous activation calls,
 * g_dbus_connection_flush() should be called prior to the code, which
 * depends on the result of the action activation. Without flushing
 * the D-Bus connection, there is no guarantee that the action would
 * have been activated.
 * 
 * The following code which runs in a remote app instance, shows an
 * example of a "quit" action being activated on the primary app
 * instance over D-Bus. Here g_dbus_connection_flush() is called
 * before `exit()`. Without g_dbus_connection_flush(), the "quit" action
 * may fail to be activated on the primary instance.
 * 
 * 
 * ```c
 * // call "quit" action on primary instance
 * g_action_group_activate_action (G_ACTION_GROUP (app), "quit", NULL);
 * 
 * // make sure the action is activated now
 * g_dbus_connection_flush (...);
 * 
 * g_debug ("application has been terminated. exiting.");
 * 
 * exit (0);
 * ```
 * 
 * @param action_name the name of the action to activate
 * @param parameter parameters to the activation
 */
vfunc_activate_action(action_name: string, parameter?: (GLib.Variant | null)): void
/**
 * Request for the state of the named action within `action_group` to be
 * changed to `value`.
 * 
 * The action must be stateful and `value` must be of the correct type.
 * See g_action_group_get_action_state_type().
 * 
 * This call merely requests a change.  The action may refuse to change
 * its state or may change its state to something other than `value`.
 * See g_action_group_get_action_state_hint().
 * 
 * If the `value` GVariant is floating, it is consumed.
 * @param action_name the name of the action to request the change on
 * @param value the new state
 */
vfunc_change_action_state(action_name: string, value: GLib.Variant): void
/**
 * Checks if the named action within `action_group` is currently enabled.
 * 
 * An action must be enabled in order to be activated or in order to
 * have its state changed from outside callers.
 * @param action_name the name of the action to query
 */
vfunc_get_action_enabled(action_name: string): boolean
/**
 * Queries the type of the parameter that must be given when activating
 * the named action within `action_group`.
 * 
 * When activating the action using g_action_group_activate_action(),
 * the #GVariant given to that function must be of the type returned
 * by this function.
 * 
 * In the case that this function returns %NULL, you must not give any
 * #GVariant, but %NULL instead.
 * 
 * The parameter type of a particular action will never change but it is
 * possible for an action to be removed and for a new action to be added
 * with the same name but a different parameter type.
 * @param action_name the name of the action to query
 */
vfunc_get_action_parameter_type(action_name: string): (GLib.VariantType | null)
/**
 * Queries the current state of the named action within `action_group`.
 * 
 * If the action is not stateful then %NULL will be returned.  If the
 * action is stateful then the type of the return value is the type
 * given by g_action_group_get_action_state_type().
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @param action_name the name of the action to query
 */
vfunc_get_action_state(action_name: string): (GLib.Variant | null)
/**
 * Requests a hint about the valid range of values for the state of the
 * named action within `action_group`.
 * 
 * If %NULL is returned it either means that the action is not stateful
 * or that there is no hint about the valid range of values for the
 * state of the action.
 * 
 * If a #GVariant array is returned then each item in the array is a
 * possible value for the state.  If a #GVariant pair (ie: two-tuple) is
 * returned then the tuple specifies the inclusive lower and upper bound
 * of valid values for the state.
 * 
 * In any case, the information is merely a hint.  It may be possible to
 * have a state value outside of the hinted range and setting a value
 * within the range may fail.
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @param action_name the name of the action to query
 */
vfunc_get_action_state_hint(action_name: string): (GLib.Variant | null)
/**
 * Queries the type of the state of the named action within
 * `action_group`.
 * 
 * If the action is stateful then this function returns the
 * #GVariantType of the state.  All calls to
 * g_action_group_change_action_state() must give a #GVariant of this
 * type and g_action_group_get_action_state() will return a #GVariant
 * of the same type.
 * 
 * If the action is not stateful then this function will return %NULL.
 * In that case, g_action_group_get_action_state() will return %NULL
 * and you must not call g_action_group_change_action_state().
 * 
 * The state type of a particular action will never change but it is
 * possible for an action to be removed and for a new action to be added
 * with the same name but a different state type.
 * @param action_name the name of the action to query
 */
vfunc_get_action_state_type(action_name: string): (GLib.VariantType | null)
/**
 * Checks if the named action exists within `action_group`.
 * @param action_name the name of the action to check for
 */
vfunc_has_action(action_name: string): boolean
/**
 * Lists the actions contained within `action_group`.
 * 
 * The caller is responsible for freeing the list with g_strfreev() when
 * it is no longer required.
 */
vfunc_list_actions(): string[]
/**
 * Queries all aspects of the named action within an `action_group`.
 * 
 * This function acquires the information available from
 * g_action_group_has_action(), g_action_group_get_action_enabled(),
 * g_action_group_get_action_parameter_type(),
 * g_action_group_get_action_state_type(),
 * g_action_group_get_action_state_hint() and
 * g_action_group_get_action_state() with a single function call.
 * 
 * This provides two main benefits.
 * 
 * The first is the improvement in efficiency that comes with not having
 * to perform repeated lookups of the action in order to discover
 * different things about it.  The second is that implementing
 * #GActionGroup can now be done by only overriding this one virtual
 * function.
 * 
 * The interface provides a default implementation of this function that
 * calls the individual functions, as required, to fetch the
 * information.  The interface also provides default implementations of
 * those functions that call this function.  All implementations,
 * therefore, must override either this function or all of the others.
 * 
 * If the action exists, %TRUE is returned and any of the requested
 * fields (as indicated by having a non-%NULL reference passed in) are
 * filled.  If the action doesn't exist, %FALSE is returned and the
 * fields may or may not have been modified.
 * @param action_name the name of an action in the group
 */
vfunc_query_action(action_name: string): [boolean, boolean, GLib.VariantType | null, GLib.VariantType | null, GLib.Variant | null, GLib.Variant | null]
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module RadioBox {

    // Signal callback interfaces

    interface Changed {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProps extends Gtk.Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
active_id: string;
    activeId: string;
    has_more: boolean;
    hasMore: boolean;
    show_more: boolean;
    showMore: boolean;
    }

}

class RadioBox extends Gtk.Bin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.RadioBox

    get active_id(): string;
    set active_id(val: string);
    get activeId(): string;
    set activeId(val: string);
    get has_more(): boolean;
    get hasMore(): boolean;
    get show_more(): boolean;
    set show_more(val: boolean);
    get showMore(): boolean;
    set showMore(val: boolean);

    // Constructors of Dazzle.RadioBox


constructor(properties?: Partial<RadioBox.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): RadioBox;

    // Own signals of Dazzle.RadioBox

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'changed', callback: ((_source: this) => void)): number
    connect_after(signal: 'changed', callback: ((_source: this) => void)): number
    emit(signal: 'changed'): void

    // Own methods of Dazzle.RadioBox

    add_item(id: string, text: string): void
    get_active_id(): string
    remove_item(id: string): void
    set_active_id(id: string): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ReadOnlyListModel {

    // Constructor properties interface

    interface ConstructorProps<A extends GObject.Object = GObject.Object> extends GObject.Object.ConstructorProps, Gio.ListModel.ConstructorProps {
base_model: Gio.ListModel;
    baseModel: Gio.ListModel;
    }

}

class ReadOnlyListModel<A extends GObject.Object = GObject.Object> extends GObject.Object implements Gio.ListModel<A> {

    // Own properties of Dazzle.ReadOnlyListModel

    /**
     * The "base-model" property is the #GListModel that will be wrapped.
     * 
     * This base model is not accessible after creation so that API creators can
     * be sure the consumer cannot mutate the underlying model. That is useful
     * when you want to give a caller access to a #GListModel without the ability
     * to introspect on the type and mutate it without your knowledge (such as
     * with #GListStore).
     */
    set base_model(val: Gio.ListModel);
    /**
     * The "base-model" property is the #GListModel that will be wrapped.
     * 
     * This base model is not accessible after creation so that API creators can
     * be sure the consumer cannot mutate the underlying model. That is useful
     * when you want to give a caller access to a #GListModel without the ability
     * to introspect on the type and mutate it without your knowledge (such as
     * with #GListStore).
     */
    set baseModel(val: Gio.ListModel);

    // Constructors of Dazzle.ReadOnlyListModel


constructor(properties?: Partial<ReadOnlyListModel.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own static methods of Dazzle.ReadOnlyListModel

    /**
     * Creates a new #DzlReadOnlyListModel which is a read-only wrapper around
     * `base_model`. This is useful when you want to give API consumers access to
     * a #GListModel but without the ability to mutate the underlying list.
     * @param base_model a #GListModel
     */
    static ["new"](base_model: Gio.ListModel): Gio.ListModel

// Inherited methods
/**
 * Gets the type of the items in `list`.
 * 
 * All items returned from g_list_model_get_item() are of the type
 * returned by this function, or a subtype, or if the type is an
 * interface, they are an implementation of that interface.
 * 
 * The item type of a #GListModel can not change during the life of the
 * model.
 * @returns the #GType of the items contained in @list.
 */
get_item_type(): GObject.GType
/**
 * Gets the number of items in `list`.
 * 
 * Depending on the model implementation, calling this function may be
 * less efficient than iterating the list with increasing values for
 * `position` until g_list_model_get_item() returns %NULL.
 * @returns the number of items in @list.
 */
get_n_items(): number
/**
 * Get the item at `position`.
 * 
 * If `position` is greater than the number of items in `list,` %NULL is
 * returned.
 * 
 * %NULL is never returned for an index that is smaller than the length
 * of the list.
 * 
 * This function is meant to be used by language bindings in place
 * of g_list_model_get_item().
 * 
 * See also: g_list_model_get_n_items()
 * @param position the position of the item to fetch
 * @returns the object at @position.
 */
get_item(position: number): (A | null)
/**
 * Emits the #GListModel::items-changed signal on `list`.
 * 
 * This function should only be called by classes implementing
 * #GListModel. It has to be called after the internal representation
 * of `list` has been updated, because handlers connected to this signal
 * might query the new state of the list.
 * 
 * Implementations must only make changes to the model (as visible to
 * its consumer) in places that will not cause problems for that
 * consumer.  For models that are driven directly by a write API (such
 * as #GListStore), changes can be reported in response to uses of that
 * API.  For models that represent remote data, changes should only be
 * made from a fresh mainloop dispatch.  It is particularly not
 * permitted to make changes in response to a call to the #GListModel
 * consumer API.
 * 
 * Stated another way: in general, it is assumed that code making a
 * series of accesses to the model via the API, without returning to the
 * mainloop, and without calling other code, will continue to view the
 * same contents of the model.
 * @param position the position at which @list changed
 * @param removed the number of items removed
 * @param added the number of items added
 */
items_changed(position: number, removed: number, added: number): void
/**
 * Get the item at `position`. If `position` is greater than the number of
 * items in `list,` %NULL is returned.
 * 
 * %NULL is never returned for an index that is smaller than the length
 * of the list.  See g_list_model_get_n_items().
 * @param position the position of the item to fetch
 */
vfunc_get_item(position: number): (A | null)
/**
 * Gets the type of the items in `list`.
 * 
 * All items returned from g_list_model_get_item() are of the type
 * returned by this function, or a subtype, or if the type is an
 * interface, they are an implementation of that interface.
 * 
 * The item type of a #GListModel can not change during the life of the
 * model.
 */
vfunc_get_item_type(): GObject.GType
/**
 * Gets the number of items in `list`.
 * 
 * Depending on the model implementation, calling this function may be
 * less efficient than iterating the list with increasing values for
 * `position` until g_list_model_get_item() returns %NULL.
 */
vfunc_get_n_items(): number
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module RecursiveFileMonitor {

    // Signal callback interfaces

    interface Changed {
        (file: Gio.File, other_file: (Gio.File | null), event: Gio.FileMonitorEvent): void
    }


    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
root: Gio.File;
    }

}

class RecursiveFileMonitor extends GObject.Object {

    // Own properties of Dazzle.RecursiveFileMonitor

    get root(): Gio.File;

    // Constructors of Dazzle.RecursiveFileMonitor


constructor(properties?: Partial<RecursiveFileMonitor.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](root: Gio.File): RecursiveFileMonitor;

    // Own signals of Dazzle.RecursiveFileMonitor

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'changed', callback: ((_source: this, file: Gio.File, other_file: Gio.File | null, event: Gio.FileMonitorEvent) => void)): number
    connect_after(signal: 'changed', callback: ((_source: this, file: Gio.File, other_file: Gio.File | null, event: Gio.FileMonitorEvent) => void)): number
    emit(signal: 'changed', file: Gio.File, other_file: (Gio.File | null), event: Gio.FileMonitorEvent): void

    // Own methods of Dazzle.RecursiveFileMonitor

    /**
     * Cancels the recursive file monitor.
     */
    cancel(): void
    /**
     * Gets the root directory used forthe file monitor.
     * @returns a #GFile
     */
    get_root(): Gio.File
    /**
     * Sets a callback function to determine if a #GFile should be ignored
     * from signal emission.
     * 
     * `ignore_func` will always be called from the applications main thread.
     * 
     * If `ignore_func` is %NULL, it is set to the default which does not
     * ignore any files or directories.
     * @param ignore_func a #DzlRecursiveIgnoreFunc
     */
    set_ignore_func(ignore_func: RecursiveIgnoreFunc): void
    start_async(cancellable?: (Gio.Cancellable | null), callback?: (Gio.AsyncReadyCallback<this> | null)): void
    start_finish(result: Gio.AsyncResult): boolean
}

module ScrolledWindow {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.ScrolledWindow.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {

    }

}

class ScrolledWindow extends Gtk.ScrolledWindow implements Atk.ImplementorIface, Gtk.Buildable {

    // Constructors of Dazzle.ScrolledWindow


constructor(properties?: Partial<ScrolledWindow.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module SearchBar {

    // Signal callback interfaces

    interface Activate {
        (): void
    }

    interface Reveal {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProps extends Gtk.Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
search_mode_enabled: boolean;
    searchModeEnabled: boolean;
    show_close_button: boolean;
    showCloseButton: boolean;
    }

}

class SearchBar extends Gtk.Bin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.SearchBar

    get search_mode_enabled(): boolean;
    set search_mode_enabled(val: boolean);
    get searchModeEnabled(): boolean;
    set searchModeEnabled(val: boolean);
    get show_close_button(): boolean;
    set show_close_button(val: boolean);
    get showCloseButton(): boolean;
    set showCloseButton(val: boolean);

    // Constructors of Dazzle.SearchBar


constructor(properties?: Partial<SearchBar.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): SearchBar;

    // Own signals of Dazzle.SearchBar

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'activate', callback: ((_source: this) => void)): number
    connect_after(signal: 'activate', callback: ((_source: this) => void)): number
    emit(signal: 'activate'): void
    connect(signal: 'reveal', callback: ((_source: this) => void)): number
    connect_after(signal: 'reveal', callback: ((_source: this) => void)): number
    emit(signal: 'reveal'): void

    // Own methods of Dazzle.SearchBar

    get_entry(): Gtk.SearchEntry
    get_search_mode_enabled(): boolean
    get_show_close_button(): boolean
    set_search_mode_enabled(search_mode_enabled: boolean): void
    set_show_close_button(show_close_button: boolean): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module SettingsFlagAction {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps, Gio.Action.ConstructorProps {
flag_nick: string;
    flagNick: string;
    schema_id: string;
    schemaId: string;
    schema_key: string;
    schemaKey: string;
    }

}

class SettingsFlagAction extends GObject.Object implements Gio.Action {

    // Own properties of Dazzle.SettingsFlagAction

    get flag_nick(): string;
    get flagNick(): string;
    get schema_id(): string;
    get schemaId(): string;
    get schema_key(): string;
    set schema_key(val: string);
    get schemaKey(): string;
    set schemaKey(val: string);

    // Constructors of Dazzle.SettingsFlagAction


constructor(properties?: Partial<SettingsFlagAction.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own static methods of Dazzle.SettingsFlagAction

    /**
     * This creates a new action that can be used to toggle an individual flag in
     * a #GSettings key which is of a flags type.
     * @param schema_id 
     * @param schema_key 
     * @param flag_nick 
     */
    static ["new"](schema_id: string, schema_key: string, flag_nick: string): Gio.Action

// Inherited properties
/**
 * If `action` is currently enabled.
 * 
 * If the action is disabled then calls to g_action_activate() and
 * g_action_change_state() have no effect.
 */
get enabled(): boolean;
/**
 * The name of the action.  This is mostly meaningful for identifying
 * the action once it has been added to a #GActionGroup. It is immutable.
 */
get name(): string;
/**
 * The type of the parameter that must be given when activating the
 * action. This is immutable, and may be %NULL if no parameter is needed when
 * activating the action.
 */
get parameter_type(): GLib.VariantType;
/**
 * The type of the parameter that must be given when activating the
 * action. This is immutable, and may be %NULL if no parameter is needed when
 * activating the action.
 */
get parameterType(): GLib.VariantType;
/**
 * The state of the action, or %NULL if the action is stateless.
 */
get state(): GLib.Variant;
/**
 * The #GVariantType of the state that the action has, or %NULL if the
 * action is stateless. This is immutable.
 */
get state_type(): GLib.VariantType;
/**
 * The #GVariantType of the state that the action has, or %NULL if the
 * action is stateless. This is immutable.
 */
get stateType(): GLib.VariantType;

// Inherited methods
/**
 * Activates the action.
 * 
 * `parameter` must be the correct type of parameter for the action (ie:
 * the parameter type given at construction time).  If the parameter
 * type was %NULL then `parameter` must also be %NULL.
 * 
 * If the `parameter` GVariant is floating, it is consumed.
 * @param parameter the parameter to the activation
 */
activate(parameter?: (GLib.Variant | null)): void
/**
 * Request for the state of `action` to be changed to `value`.
 * 
 * The action must be stateful and `value` must be of the correct type.
 * See g_action_get_state_type().
 * 
 * This call merely requests a change.  The action may refuse to change
 * its state or may change its state to something other than `value`.
 * See g_action_get_state_hint().
 * 
 * If the `value` GVariant is floating, it is consumed.
 * @param value the new state
 */
change_state(value: GLib.Variant): void
/**
 * Checks if `action` is currently enabled.
 * 
 * An action must be enabled in order to be activated or in order to
 * have its state changed from outside callers.
 * @returns whether the action is enabled
 */
get_enabled(): boolean
/**
 * Queries the name of `action`.
 * @returns the name of the action
 */
get_name(): string
/**
 * Queries the type of the parameter that must be given when activating
 * `action`.
 * 
 * When activating the action using g_action_activate(), the #GVariant
 * given to that function must be of the type returned by this function.
 * 
 * In the case that this function returns %NULL, you must not give any
 * #GVariant, but %NULL instead.
 * @returns the parameter type
 */
get_parameter_type(): (GLib.VariantType | null)
/**
 * Queries the current state of `action`.
 * 
 * If the action is not stateful then %NULL will be returned.  If the
 * action is stateful then the type of the return value is the type
 * given by g_action_get_state_type().
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @returns the current state of the action
 */
get_state(): (GLib.Variant | null)
/**
 * Requests a hint about the valid range of values for the state of
 * `action`.
 * 
 * If %NULL is returned it either means that the action is not stateful
 * or that there is no hint about the valid range of values for the
 * state of the action.
 * 
 * If a #GVariant array is returned then each item in the array is a
 * possible value for the state.  If a #GVariant pair (ie: two-tuple) is
 * returned then the tuple specifies the inclusive lower and upper bound
 * of valid values for the state.
 * 
 * In any case, the information is merely a hint.  It may be possible to
 * have a state value outside of the hinted range and setting a value
 * within the range may fail.
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @returns the state range hint
 */
get_state_hint(): (GLib.Variant | null)
/**
 * Queries the type of the state of `action`.
 * 
 * If the action is stateful (e.g. created with
 * g_simple_action_new_stateful()) then this function returns the
 * #GVariantType of the state.  This is the type of the initial value
 * given as the state. All calls to g_action_change_state() must give a
 * #GVariant of this type and g_action_get_state() will return a
 * #GVariant of the same type.
 * 
 * If the action is not stateful (e.g. created with g_simple_action_new())
 * then this function will return %NULL. In that case, g_action_get_state()
 * will return %NULL and you must not call g_action_change_state().
 * @returns the state type, if the action is stateful
 */
get_state_type(): (GLib.VariantType | null)
/**
 * Activates the action.
 * 
 * `parameter` must be the correct type of parameter for the action (ie:
 * the parameter type given at construction time).  If the parameter
 * type was %NULL then `parameter` must also be %NULL.
 * 
 * If the `parameter` GVariant is floating, it is consumed.
 * @param parameter the parameter to the activation
 */
vfunc_activate(parameter?: (GLib.Variant | null)): void
/**
 * Request for the state of `action` to be changed to `value`.
 * 
 * The action must be stateful and `value` must be of the correct type.
 * See g_action_get_state_type().
 * 
 * This call merely requests a change.  The action may refuse to change
 * its state or may change its state to something other than `value`.
 * See g_action_get_state_hint().
 * 
 * If the `value` GVariant is floating, it is consumed.
 * @param value the new state
 */
vfunc_change_state(value: GLib.Variant): void
/**
 * Checks if `action` is currently enabled.
 * 
 * An action must be enabled in order to be activated or in order to
 * have its state changed from outside callers.
 */
vfunc_get_enabled(): boolean
/**
 * Queries the name of `action`.
 */
vfunc_get_name(): string
/**
 * Queries the type of the parameter that must be given when activating
 * `action`.
 * 
 * When activating the action using g_action_activate(), the #GVariant
 * given to that function must be of the type returned by this function.
 * 
 * In the case that this function returns %NULL, you must not give any
 * #GVariant, but %NULL instead.
 */
vfunc_get_parameter_type(): (GLib.VariantType | null)
/**
 * Queries the current state of `action`.
 * 
 * If the action is not stateful then %NULL will be returned.  If the
 * action is stateful then the type of the return value is the type
 * given by g_action_get_state_type().
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 */
vfunc_get_state(): (GLib.Variant | null)
/**
 * Requests a hint about the valid range of values for the state of
 * `action`.
 * 
 * If %NULL is returned it either means that the action is not stateful
 * or that there is no hint about the valid range of values for the
 * state of the action.
 * 
 * If a #GVariant array is returned then each item in the array is a
 * possible value for the state.  If a #GVariant pair (ie: two-tuple) is
 * returned then the tuple specifies the inclusive lower and upper bound
 * of valid values for the state.
 * 
 * In any case, the information is merely a hint.  It may be possible to
 * have a state value outside of the hinted range and setting a value
 * within the range may fail.
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 */
vfunc_get_state_hint(): (GLib.Variant | null)
/**
 * Queries the type of the state of `action`.
 * 
 * If the action is stateful (e.g. created with
 * g_simple_action_new_stateful()) then this function returns the
 * #GVariantType of the state.  This is the type of the initial value
 * given as the state. All calls to g_action_change_state() must give a
 * #GVariant of this type and g_action_get_state() will return a
 * #GVariant of the same type.
 * 
 * If the action is not stateful (e.g. created with g_simple_action_new())
 * then this function will return %NULL. In that case, g_action_get_state()
 * will return %NULL and you must not call g_action_change_state().
 */
vfunc_get_state_type(): (GLib.VariantType | null)
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module SettingsSandwich {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
path: string;
    schema_id: string;
    schemaId: string;
    }

}

class SettingsSandwich extends GObject.Object {

    // Own properties of Dazzle.SettingsSandwich

    get path(): string;
    get schema_id(): string;
    get schemaId(): string;

    // Constructors of Dazzle.SettingsSandwich


constructor(properties?: Partial<SettingsSandwich.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](schema_id: string, path: string): SettingsSandwich;

    // Own methods of Dazzle.SettingsSandwich

    append(settings: Gio.Settings): void
    bind(key: string, object: (any | null), property: string, flags: Gio.SettingsBindFlags): void
    /**
     * Creates a new binding similar to g_settings_bind_with_mapping() but applying
     * from the resolved value via the settings sandwich.
     * @param key the settings key to bind. @object (type GObject.Object): the target object.
     * @param object 
     * @param property the property on @object to apply.
     * @param flags flags for the binding.
     * @param get_mapping the get mapping function
     * @param set_mapping the set mapping function
     */
    bind_with_mapping(key: string, object: (any | null), property: string, flags: Gio.SettingsBindFlags, get_mapping: Gio.SettingsBindGetMapping, set_mapping: Gio.SettingsBindSetMapping): void
    get_boolean(key: string): boolean
    get_default_value(key: string): GLib.Variant
    get_double(key: string): number
    get_int(key: string): number
    get_string(key: string): string
    get_uint(key: string): number
    get_user_value(key: string): GLib.Variant
    get_value(key: string): GLib.Variant
    set_boolean(key: string, val: boolean): void
    set_double(key: string, val: number): void
    set_int(key: string, val: number): void
    set_string(key: string, val: string): void
    set_uint(key: string, val: number): void
    set_value(key: string, value: GLib.Variant): void
    unbind(property: string): void
}

module ShortcutAccelDialog {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Dialog.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
accelerator: string;
    shortcut_title: string;
    shortcutTitle: string;
    }

}

class ShortcutAccelDialog extends Gtk.Dialog implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.ShortcutAccelDialog

    get accelerator(): string;
    set accelerator(val: string);
    get shortcut_title(): string;
    set shortcut_title(val: string);
    get shortcutTitle(): string;
    set shortcutTitle(val: string);

    // Constructors of Dazzle.ShortcutAccelDialog


constructor(properties?: Partial<ShortcutAccelDialog.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): ShortcutAccelDialog;

    // Own methods of Dazzle.ShortcutAccelDialog

    get_accelerator(): string
    get_chord(): ShortcutChord
    get_shortcut_title(): string
    set_accelerator(accelerator: string): void
    set_shortcut_title(title: string): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ShortcutContext {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
name: string;
    use_binding_sets: boolean;
    useBindingSets: boolean;
    }

}

class ShortcutContext extends GObject.Object {

    // Own properties of Dazzle.ShortcutContext

    get name(): string;
    get use_binding_sets(): boolean;
    set use_binding_sets(val: boolean);
    get useBindingSets(): boolean;
    set useBindingSets(val: boolean);

    // Constructors of Dazzle.ShortcutContext


constructor(properties?: Partial<ShortcutContext.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](name: string): ShortcutContext;

    // Own methods of Dazzle.ShortcutContext

    activate(widget: Gtk.Widget, chord: ShortcutChord): ShortcutMatch
    add_action(accel: string, detailed_action_name: string): void
    add_command(accel: string, command: string): void
    /**
     * This is similar to dzl_shortcut_context_add_signal() but is easier to use
     * from language bindings.
     * @param accel the accelerator for the shortcut
     * @param signal_name the name of the signal
     * @param values The   values to use when calling the signal.
     */
    add_signalv(accel: string, signal_name: string, values?: (GObject.Value[] | null)): void
    get_name(): string
    load_from_data(data: string, len: number): boolean
    load_from_resource(resource_path: string): boolean
    remove(accel: string): boolean
}

module ShortcutController {

    // Signal callback interfaces

    interface Reset {
        (): void
    }

    interface SetContextNamed {
        (name: string): void
    }


    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
context: ShortcutContext;
    current_chord: ShortcutChord;
    currentChord: ShortcutChord;
    manager: ShortcutManager;
    widget: Gtk.Widget;
    }

}

class ShortcutController extends GObject.Object {

    // Own properties of Dazzle.ShortcutController

    get context(): ShortcutContext;
    get current_chord(): ShortcutChord;
    get currentChord(): ShortcutChord;
    get manager(): ShortcutManager;
    set manager(val: ShortcutManager);
    get widget(): Gtk.Widget;

    // Constructors of Dazzle.ShortcutController


constructor(properties?: Partial<ShortcutController.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](widget: Gtk.Widget): ShortcutController;

    // Own signals of Dazzle.ShortcutController

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'reset', callback: ((_source: this) => void)): number
    connect_after(signal: 'reset', callback: ((_source: this) => void)): number
    emit(signal: 'reset'): void
    connect(signal: 'set-context-named', callback: ((_source: this, name: string) => void)): number
    connect_after(signal: 'set-context-named', callback: ((_source: this, name: string) => void)): number
    emit(signal: 'set-context-named', name: string): void

    // Own static methods of Dazzle.ShortcutController

    /**
     * Finds the registered #DzlShortcutController for a widget.
     * 
     * The controller is created if it does not already exist.
     * @param widget 
     */
    static find(widget: Gtk.Widget): ShortcutController
    /**
     * Finds the registered #DzlShortcutController for a widget.
     * 
     * If no controller is found, %NULL is returned.
     * @param widget 
     */
    static try_find(widget: Gtk.Widget): (ShortcutController | null)

    // Own methods of Dazzle.ShortcutController

    add_command_action(command_id: string, default_accel: string, phase: ShortcutPhase, action: string): void
    add_command_callback(command_id: string, default_accel: string, phase: ShortcutPhase, callback: Gtk.Callback): void
    /**
     * This method will locate and execute the command matching the id `command`.
     * 
     * If the command is not found, %FALSE is returned.
     * @param command the id of the command
     * @returns %TRUE if the command was found and executed.
     */
    execute_command(command: string): boolean
    /**
     * This function gets the #DzlShortcutController:context property, which
     * is the current context to dispatch events to. An #DzlShortcutContext
     * is a group of keybindings that may be activated in response to a
     * single or series of #GdkEventKey.
     * @returns A #DzlShortcutContext or %NULL.
     */
    get_context(): (ShortcutContext | null)
    /**
     * Controllers can have a different context for a particular phase, which allows
     * them to activate different keybindings depending if the event in capture,
     * bubble, or dispatch.
     * @param phase the phase for the shorcut delivery
     * @returns A #DzlShortcutContext or %NULL.
     */
    get_context_for_phase(phase: ShortcutPhase): (ShortcutContext | null)
    /**
     * This method gets the #DzlShortcutController:current-chord property.
     * This is useful if you want to monitor in-progress chord building.
     * 
     * Note that this value will only be valid on the controller for the
     * toplevel widget (a #GtkWindow). Chords are not tracked at the
     * individual widget controller level.
     * @returns A #DzlShortcutChord or %NULL.
     */
    get_current_chord(): (ShortcutChord | null)
    /**
     * Gets the #DzlShortcutManager associated with this controller.
     * 
     * Generally, this will look for the root controller's manager as mixing and
     * matching managers in a single window hierarchy is not supported.
     * @returns A #DzlShortcutManager.
     */
    get_manager(): ShortcutManager
    get_widget(): Gtk.Widget
    remove_accel(accel: string, phase: ShortcutPhase): void
    /**
     * Changes the context for the controller to the context matching `name`.
     * 
     * Contexts are resolved at runtime through the current theme (and possibly
     * a parent theme if it inherits from one).
     * @param name The name of the context
     */
    set_context_by_name(name?: (string | null)): void
    /**
     * Sets the #DzlShortcutController:manager property.
     * 
     * If you set this to %NULL, it will revert to the default #DzlShortcutManager
     * for the process.
     * @param manager A #DzlShortcutManager or %NULL
     */
    set_manager(manager?: (ShortcutManager | null)): void
}

module ShortcutLabel {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Box.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.Orientable.ConstructorProps {
accelerator: string;
    chord: ShortcutChord;
    }

}

class ShortcutLabel extends Gtk.Box implements Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Dazzle.ShortcutLabel

    get accelerator(): string;
    set accelerator(val: string);
    get chord(): ShortcutChord;
    set chord(val: ShortcutChord);

    // Constructors of Dazzle.ShortcutLabel


constructor(properties?: Partial<ShortcutLabel.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): ShortcutLabel;

    // Own methods of Dazzle.ShortcutLabel

    get_accelerator(): string
    /**
     * Gets the chord for the label, or %NULL.
     * @returns A #DzlShortcutChord or %NULL
     */
    get_chord(): (ShortcutChord | null)
    set_accelerator(accelerator: string): void
    set_chord(chord: ShortcutChord): void

// Inherited properties
/**
 * The orientation of the orientable.
 */
get orientation(): Gtk.Orientation;
set orientation(val: Gtk.Orientation);

// Inherited methods
/**
 * Retrieves the orientation of the `orientable`.
 * @returns the orientation of the @orientable.
 */
get_orientation(): Gtk.Orientation
/**
 * Sets the orientation of the `orientable`.
 * @param orientation the orientable’s new orientation.
 */
set_orientation(orientation: Gtk.Orientation): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ShortcutManager {

    // Signal callback interfaces

    interface Changed {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProps<A extends GObject.Object = GObject.Object> extends GObject.Object.ConstructorProps, Gio.Initable.ConstructorProps, Gio.ListModel.ConstructorProps {
theme: ShortcutTheme;
    theme_name: string;
    themeName: string;
    user_dir: string;
    userDir: string;
    }

}

class ShortcutManager<A extends GObject.Object = GObject.Object> extends GObject.Object implements Gio.Initable, Gio.ListModel<A> {

    // Own properties of Dazzle.ShortcutManager

    get theme(): ShortcutTheme;
    set theme(val: ShortcutTheme);
    get theme_name(): string;
    set theme_name(val: string);
    get themeName(): string;
    set themeName(val: string);
    get user_dir(): string;
    set user_dir(val: string);
    get userDir(): string;
    set userDir(val: string);

    // Constructors of Dazzle.ShortcutManager


constructor(properties?: Partial<ShortcutManager.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own signals of Dazzle.ShortcutManager

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'changed', callback: ((_source: this) => void)): number
    connect_after(signal: 'changed', callback: ((_source: this) => void)): number
    emit(signal: 'changed'): void

    // Own static methods of Dazzle.ShortcutManager

    /**
     * Gets the singleton #DzlShortcutManager for the process.
     */
    static get_default(): ShortcutManager

    // Own methods of Dazzle.ShortcutManager

    add_action(detailed_action_name: string, section: string, group: string, title: string, subtitle: string): void
    add_command(command: string, section: string, group: string, title: string, subtitle: string): void
    /**
     * This method will add `shortcuts` to the #DzlShortcutManager.
     * 
     * This provides a simple way for widgets to add their shortcuts to the manager
     * so that they may be overriden by themes or the end user.
     * @param shortcuts shortcuts to add
     * @param translation_domain the gettext domain to use for translations
     */
    add_shortcut_entries(shortcuts: ShortcutEntry[], translation_domain?: (string | null)): void
    /**
     * Adds shortcuts registered with the #DzlShortcutManager to the
     * #DzlShortcutsWindow.
     * @param window A #DzlShortcutsWindow
     */
    add_shortcuts_to_window(window: ShortcutsWindow): void
    append_search_path(directory: string): void
    /**
     * Gets the "theme" property.
     * @returns An #DzlShortcutTheme.
     */
    get_theme(): ShortcutTheme
    /**
     * Locates a theme by the name of the theme.
     * 
     * If `theme_name` is %NULL, then the internal theme is used. You probably dont
     * need to use that as it is used by various controllers to hook up their
     * default actions.
     * @param theme_name the name of a theme or %NULL of the internal theme
     * @returns A #DzlShortcutTheme or %NULL.
     */
    get_theme_by_name(theme_name?: (string | null)): (ShortcutTheme | null)
    get_theme_name(): string
    get_user_dir(): string
    /**
     * This function will try to dispatch `event` to the proper widget and
     * #DzlShortcutContext. If the event is handled, then %TRUE is returned.
     * 
     * You should call this from #GtkWidget::key-press-event handler in your
     * #GtkWindow toplevel.
     * @param event A #GdkEventKey event to handle.
     * @param toplevel A #GtkWidget or %NULL.
     * @returns %TRUE if the event was handled.
     */
    handle_event(event: Gdk.EventKey, toplevel: Gtk.Widget): boolean
    prepend_search_path(directory: string): void
    queue_reload(): void
    reload(cancellable?: (Gio.Cancellable | null)): void
    remove_search_path(directory: string): void
    /**
     * Sets the theme for the shortcut manager.
     * @param theme An #DzlShortcutTheme
     */
    set_theme(theme: ShortcutTheme): void
    set_theme_name(theme_name: string): void
    set_user_dir(user_dir: string): void

// Inherited methods
/**
 * Initializes the object implementing the interface.
 * 
 * This method is intended for language bindings. If writing in C,
 * g_initable_new() should typically be used instead.
 * 
 * The object must be initialized before any real use after initial
 * construction, either with this function or g_async_initable_init_async().
 * 
 * Implementations may also support cancellation. If `cancellable` is not %NULL,
 * then initialization can be cancelled by triggering the cancellable object
 * from another thread. If the operation was cancelled, the error
 * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
 * the object doesn't support cancellable initialization the error
 * %G_IO_ERROR_NOT_SUPPORTED will be returned.
 * 
 * If the object is not initialized, or initialization returns with an
 * error, then all operations on the object except g_object_ref() and
 * g_object_unref() are considered to be invalid, and have undefined
 * behaviour. See the [introduction][ginitable] for more details.
 * 
 * Callers should not assume that a class which implements #GInitable can be
 * initialized multiple times, unless the class explicitly documents itself as
 * supporting this. Generally, a class’ implementation of init() can assume
 * (and assert) that it will only be called once. Previously, this documentation
 * recommended all #GInitable implementations should be idempotent; that
 * recommendation was relaxed in GLib 2.54.
 * 
 * If a class explicitly supports being initialized multiple times, it is
 * recommended that the method is idempotent: multiple calls with the same
 * arguments should return the same results. Only the first call initializes
 * the object; further calls return the result of the first call.
 * 
 * One reason why a class might need to support idempotent initialization is if
 * it is designed to be used via the singleton pattern, with a
 * #GObjectClass.constructor that sometimes returns an existing instance.
 * In this pattern, a caller would expect to be able to call g_initable_init()
 * on the result of g_object_new(), regardless of whether it is in fact a new
 * instance.
 * @param cancellable optional #GCancellable object, %NULL to ignore.
 * @returns %TRUE if successful. If an error has occurred, this function will     return %FALSE and set @error appropriately if present.
 */
init(cancellable?: (Gio.Cancellable | null)): boolean
/**
 * Initializes the object implementing the interface.
 * 
 * This method is intended for language bindings. If writing in C,
 * g_initable_new() should typically be used instead.
 * 
 * The object must be initialized before any real use after initial
 * construction, either with this function or g_async_initable_init_async().
 * 
 * Implementations may also support cancellation. If `cancellable` is not %NULL,
 * then initialization can be cancelled by triggering the cancellable object
 * from another thread. If the operation was cancelled, the error
 * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
 * the object doesn't support cancellable initialization the error
 * %G_IO_ERROR_NOT_SUPPORTED will be returned.
 * 
 * If the object is not initialized, or initialization returns with an
 * error, then all operations on the object except g_object_ref() and
 * g_object_unref() are considered to be invalid, and have undefined
 * behaviour. See the [introduction][ginitable] for more details.
 * 
 * Callers should not assume that a class which implements #GInitable can be
 * initialized multiple times, unless the class explicitly documents itself as
 * supporting this. Generally, a class’ implementation of init() can assume
 * (and assert) that it will only be called once. Previously, this documentation
 * recommended all #GInitable implementations should be idempotent; that
 * recommendation was relaxed in GLib 2.54.
 * 
 * If a class explicitly supports being initialized multiple times, it is
 * recommended that the method is idempotent: multiple calls with the same
 * arguments should return the same results. Only the first call initializes
 * the object; further calls return the result of the first call.
 * 
 * One reason why a class might need to support idempotent initialization is if
 * it is designed to be used via the singleton pattern, with a
 * #GObjectClass.constructor that sometimes returns an existing instance.
 * In this pattern, a caller would expect to be able to call g_initable_init()
 * on the result of g_object_new(), regardless of whether it is in fact a new
 * instance.
 * @param cancellable optional #GCancellable object, %NULL to ignore.
 */
vfunc_init(cancellable?: (Gio.Cancellable | null)): boolean
/**
 * Gets the type of the items in `list`.
 * 
 * All items returned from g_list_model_get_item() are of the type
 * returned by this function, or a subtype, or if the type is an
 * interface, they are an implementation of that interface.
 * 
 * The item type of a #GListModel can not change during the life of the
 * model.
 * @returns the #GType of the items contained in @list.
 */
get_item_type(): GObject.GType
/**
 * Gets the number of items in `list`.
 * 
 * Depending on the model implementation, calling this function may be
 * less efficient than iterating the list with increasing values for
 * `position` until g_list_model_get_item() returns %NULL.
 * @returns the number of items in @list.
 */
get_n_items(): number
/**
 * Get the item at `position`.
 * 
 * If `position` is greater than the number of items in `list,` %NULL is
 * returned.
 * 
 * %NULL is never returned for an index that is smaller than the length
 * of the list.
 * 
 * This function is meant to be used by language bindings in place
 * of g_list_model_get_item().
 * 
 * See also: g_list_model_get_n_items()
 * @param position the position of the item to fetch
 * @returns the object at @position.
 */
get_item(position: number): (A | null)
/**
 * Emits the #GListModel::items-changed signal on `list`.
 * 
 * This function should only be called by classes implementing
 * #GListModel. It has to be called after the internal representation
 * of `list` has been updated, because handlers connected to this signal
 * might query the new state of the list.
 * 
 * Implementations must only make changes to the model (as visible to
 * its consumer) in places that will not cause problems for that
 * consumer.  For models that are driven directly by a write API (such
 * as #GListStore), changes can be reported in response to uses of that
 * API.  For models that represent remote data, changes should only be
 * made from a fresh mainloop dispatch.  It is particularly not
 * permitted to make changes in response to a call to the #GListModel
 * consumer API.
 * 
 * Stated another way: in general, it is assumed that code making a
 * series of accesses to the model via the API, without returning to the
 * mainloop, and without calling other code, will continue to view the
 * same contents of the model.
 * @param position the position at which @list changed
 * @param removed the number of items removed
 * @param added the number of items added
 */
items_changed(position: number, removed: number, added: number): void
/**
 * Get the item at `position`. If `position` is greater than the number of
 * items in `list,` %NULL is returned.
 * 
 * %NULL is never returned for an index that is smaller than the length
 * of the list.  See g_list_model_get_n_items().
 * @param position the position of the item to fetch
 */
vfunc_get_item(position: number): (A | null)
/**
 * Gets the type of the items in `list`.
 * 
 * All items returned from g_list_model_get_item() are of the type
 * returned by this function, or a subtype, or if the type is an
 * interface, they are an implementation of that interface.
 * 
 * The item type of a #GListModel can not change during the life of the
 * model.
 */
vfunc_get_item_type(): GObject.GType
/**
 * Gets the number of items in `list`.
 * 
 * Depending on the model implementation, calling this function may be
 * less efficient than iterating the list with increasing values for
 * `position` until g_list_model_get_item() returns %NULL.
 */
vfunc_get_n_items(): number
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ShortcutModel {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.TreeStore.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.TreeDragDest.ConstructorProps, Gtk.TreeDragSource.ConstructorProps, Gtk.TreeModel.ConstructorProps, Gtk.TreeSortable.ConstructorProps {
manager: ShortcutManager;
    theme: ShortcutTheme;
    }

}

class ShortcutModel extends Gtk.TreeStore implements Gtk.Buildable, Gtk.TreeDragDest, Gtk.TreeDragSource, Gtk.TreeModel, Gtk.TreeSortable {

    // Own properties of Dazzle.ShortcutModel

    get manager(): ShortcutManager;
    set manager(val: ShortcutManager);
    get theme(): ShortcutTheme;
    set theme(val: ShortcutTheme);

    // Constructors of Dazzle.ShortcutModel


constructor(properties?: Partial<ShortcutModel.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own static methods of Dazzle.ShortcutModel

    static ["new"](): Gtk.TreeModel
    static ["new"](...args: never[]): any

    // Own methods of Dazzle.ShortcutModel

    /**
     * Gets the manager to be edited.
     * @returns A #DzlShortcutManager
     */
    get_manager(): ShortcutManager
    /**
     * Get the theme to be edited.
     * @returns A #DzlShortcutTheme
     */
    get_theme(): ShortcutTheme
    rebuild(): void
    set_chord(iter: Gtk.TreeIter, chord: ShortcutChord): void
    set_manager(manager: ShortcutManager): void
    set_theme(theme: ShortcutTheme): void

// Inherited methods
/**
 * Adds a child to `buildable`. `type` is an optional string
 * describing how the child should be added.
 * @param builder a #GtkBuilder
 * @param child child to add
 * @param type kind of child or %NULL
 */
add_child(builder: Gtk.Builder, child: GObject.Object, type?: (string | null)): void
/**
 * Constructs a child of `buildable` with the name `name`.
 * 
 * #GtkBuilder calls this function if a “constructor” has been
 * specified in the UI definition.
 * @param builder #GtkBuilder used to construct this object
 * @param name name of child to construct
 * @returns the constructed child
 */
construct_child<T = GObject.Object>(builder: Gtk.Builder, name: string): T
/**
 * This is similar to gtk_buildable_parser_finished() but is
 * called once for each custom tag handled by the `buildable`.
 * @param builder a #GtkBuilder
 * @param child child object or %NULL for non-child tags
 * @param tagname the name of the tag
 * @param data user data created in custom_tag_start
 */
custom_finished(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string, data?: (any | null)): void
/**
 * This is called at the end of each custom element handled by
 * the buildable.
 * @param builder #GtkBuilder used to construct this object
 * @param child child object or %NULL for non-child tags
 * @param tagname name of tag
 * @param data user data that will be passed in to parser functions
 */
custom_tag_end(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string, data?: (any | null)): void
/**
 * This is called for each unknown element under `<child>`.
 * @param builder a #GtkBuilder used to construct this object
 * @param child child object or %NULL for non-child tags
 * @param tagname name of tag
 * @returns %TRUE if a object has a custom implementation, %FALSE          if it doesn't.
 */
custom_tag_start(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string): [boolean, GLib.MarkupParser, any]
/**
 * Get the internal child called `childname` of the `buildable` object.
 * @param builder a #GtkBuilder
 * @param childname name of child
 * @returns the internal child of the buildable object
 */
get_internal_child<T = GObject.Object>(builder: Gtk.Builder, childname: string): T
/**
 * Gets the name of the `buildable` object.
 * 
 * #GtkBuilder sets the name based on the
 * [GtkBuilder UI definition][BUILDER-UI]
 * used to construct the `buildable`.
 * @returns the name set with gtk_buildable_set_name()
 */
get_name(): string
/**
 * Called when the builder finishes the parsing of a
 * [GtkBuilder UI definition][BUILDER-UI].
 * Note that this will be called once for each time
 * gtk_builder_add_from_file() or gtk_builder_add_from_string()
 * is called on a builder.
 * @param builder a #GtkBuilder
 */
parser_finished(builder: Gtk.Builder): void
/**
 * Sets the property name `name` to `value` on the `buildable` object.
 * @param builder a #GtkBuilder
 * @param name name of property
 * @param value value of property
 */
set_buildable_property(builder: Gtk.Builder, name: string, value: GObject.Value): void
/**
 * Sets the name of the `buildable` object.
 * @param name name to set
 */
set_name(name: string): void
/**
 * Adds a child to `buildable`. `type` is an optional string
 * describing how the child should be added.
 * @param builder a #GtkBuilder
 * @param child child to add
 * @param type kind of child or %NULL
 */
vfunc_add_child(builder: Gtk.Builder, child: GObject.Object, type?: (string | null)): void
/**
 * Constructs a child of `buildable` with the name `name`.
 * 
 * #GtkBuilder calls this function if a “constructor” has been
 * specified in the UI definition.
 * @param builder #GtkBuilder used to construct this object
 * @param name name of child to construct
 */
vfunc_construct_child<T = GObject.Object>(builder: Gtk.Builder, name: string): T
/**
 * This is similar to gtk_buildable_parser_finished() but is
 * called once for each custom tag handled by the `buildable`.
 * @param builder a #GtkBuilder
 * @param child child object or %NULL for non-child tags
 * @param tagname the name of the tag
 * @param data user data created in custom_tag_start
 */
vfunc_custom_finished(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string, data?: (any | null)): void
/**
 * This is called at the end of each custom element handled by
 * the buildable.
 * @param builder #GtkBuilder used to construct this object
 * @param child child object or %NULL for non-child tags
 * @param tagname name of tag
 * @param data user data that will be passed in to parser functions
 */
vfunc_custom_tag_end(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string, data?: (any | null)): void
/**
 * This is called for each unknown element under `<child>`.
 * @param builder a #GtkBuilder used to construct this object
 * @param child child object or %NULL for non-child tags
 * @param tagname name of tag
 */
vfunc_custom_tag_start(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string): [boolean, GLib.MarkupParser, any]
/**
 * Get the internal child called `childname` of the `buildable` object.
 * @param builder a #GtkBuilder
 * @param childname name of child
 */
vfunc_get_internal_child<T = GObject.Object>(builder: Gtk.Builder, childname: string): T
/**
 * Gets the name of the `buildable` object.
 * 
 * #GtkBuilder sets the name based on the
 * [GtkBuilder UI definition][BUILDER-UI]
 * used to construct the `buildable`.
 */
vfunc_get_name(): string
/**
 * Called when the builder finishes the parsing of a
 * [GtkBuilder UI definition][BUILDER-UI].
 * Note that this will be called once for each time
 * gtk_builder_add_from_file() or gtk_builder_add_from_string()
 * is called on a builder.
 * @param builder a #GtkBuilder
 */
vfunc_parser_finished(builder: Gtk.Builder): void
/**
 * Sets the property name `name` to `value` on the `buildable` object.
 * @param builder a #GtkBuilder
 * @param name name of property
 * @param value value of property
 */
vfunc_set_buildable_property(builder: Gtk.Builder, name: string, value: GObject.Value): void
/**
 * Sets the name of the `buildable` object.
 * @param name name to set
 */
vfunc_set_name(name: string): void
/**
 * Asks the #GtkTreeDragDest to insert a row before the path `dest,`
 * deriving the contents of the row from `selection_data`. If `dest` is
 * outside the tree so that inserting before it is impossible, %FALSE
 * will be returned. Also, %FALSE may be returned if the new row is
 * not created for some model-specific reason.  Should robustly handle
 * a `dest` no longer found in the model!
 * @param dest row to drop in front of
 * @param selection_data data to drop
 * @returns whether a new row was created before position @dest
 */
drag_data_received(dest: Gtk.TreePath, selection_data: Gtk.SelectionData): boolean
/**
 * Determines whether a drop is possible before the given `dest_path,`
 * at the same depth as `dest_path`. i.e., can we drop the data in
 * `selection_data` at that location. `dest_path` does not have to
 * exist; the return value will almost certainly be %FALSE if the
 * parent of `dest_path` doesn’t exist, though.
 * @param dest_path destination row
 * @param selection_data the data being dragged
 * @returns %TRUE if a drop is possible before @dest_path
 */
row_drop_possible(dest_path: Gtk.TreePath, selection_data: Gtk.SelectionData): boolean
/**
 * Asks the #GtkTreeDragDest to insert a row before the path `dest,`
 * deriving the contents of the row from `selection_data`. If `dest` is
 * outside the tree so that inserting before it is impossible, %FALSE
 * will be returned. Also, %FALSE may be returned if the new row is
 * not created for some model-specific reason.  Should robustly handle
 * a `dest` no longer found in the model!
 * @param dest row to drop in front of
 * @param selection_data data to drop
 */
vfunc_drag_data_received(dest: Gtk.TreePath, selection_data: Gtk.SelectionData): boolean
/**
 * Determines whether a drop is possible before the given `dest_path,`
 * at the same depth as `dest_path`. i.e., can we drop the data in
 * `selection_data` at that location. `dest_path` does not have to
 * exist; the return value will almost certainly be %FALSE if the
 * parent of `dest_path` doesn’t exist, though.
 * @param dest_path destination row
 * @param selection_data the data being dragged
 */
vfunc_row_drop_possible(dest_path: Gtk.TreePath, selection_data: Gtk.SelectionData): boolean
/**
 * Asks the #GtkTreeDragSource to delete the row at `path,` because
 * it was moved somewhere else via drag-and-drop. Returns %FALSE
 * if the deletion fails because `path` no longer exists, or for
 * some model-specific reason. Should robustly handle a `path` no
 * longer found in the model!
 * @param path row that was being dragged
 * @returns %TRUE if the row was successfully deleted
 */
drag_data_delete(path: Gtk.TreePath): boolean
/**
 * Asks the #GtkTreeDragSource to fill in `selection_data` with a
 * representation of the row at `path`. `selection_data->`target gives
 * the required type of the data.  Should robustly handle a `path` no
 * longer found in the model!
 * @param path row that was dragged
 * @param selection_data a #GtkSelectionData to fill with data                  from the dragged row
 * @returns %TRUE if data of the required type was provided
 */
drag_data_get(path: Gtk.TreePath, selection_data: Gtk.SelectionData): boolean
/**
 * Asks the #GtkTreeDragSource whether a particular row can be used as
 * the source of a DND operation. If the source doesn’t implement
 * this interface, the row is assumed draggable.
 * @param path row on which user is initiating a drag
 * @returns %TRUE if the row can be dragged
 */
row_draggable(path: Gtk.TreePath): boolean
/**
 * Asks the #GtkTreeDragSource to delete the row at `path,` because
 * it was moved somewhere else via drag-and-drop. Returns %FALSE
 * if the deletion fails because `path` no longer exists, or for
 * some model-specific reason. Should robustly handle a `path` no
 * longer found in the model!
 * @param path row that was being dragged
 */
vfunc_drag_data_delete(path: Gtk.TreePath): boolean
/**
 * Asks the #GtkTreeDragSource to fill in `selection_data` with a
 * representation of the row at `path`. `selection_data->`target gives
 * the required type of the data.  Should robustly handle a `path` no
 * longer found in the model!
 * @param path row that was dragged
 * @param selection_data a #GtkSelectionData to fill with data                  from the dragged row
 */
vfunc_drag_data_get(path: Gtk.TreePath, selection_data: Gtk.SelectionData): boolean
/**
 * Asks the #GtkTreeDragSource whether a particular row can be used as
 * the source of a DND operation. If the source doesn’t implement
 * this interface, the row is assumed draggable.
 * @param path row on which user is initiating a drag
 */
vfunc_row_draggable(path: Gtk.TreePath): boolean
/**
 * Creates a new #GtkTreeModel, with `child_model` as the child_model
 * and `root` as the virtual root.
 * @param root A #GtkTreePath or %NULL.
 * @returns A new #GtkTreeModel.
 */
filter_new(root?: (Gtk.TreePath | null)): Gtk.TreeModel
/**
 * Calls func on each node in model in a depth-first fashion.
 * 
 * If `func` returns %TRUE, then the tree ceases to be walked,
 * and gtk_tree_model_foreach() returns.
 * @param func a function to be called on each row
 */
foreach(func: Gtk.TreeModelForeachFunc): void
/**
 * Returns the type of the column.
 * @param index_ the column index
 * @returns the type of the column
 */
get_column_type(index_: number): GObject.GType
/**
 * Returns a set of flags supported by this interface.
 * 
 * The flags are a bitwise combination of #GtkTreeModelFlags.
 * The flags supported should not change during the lifetime
 * of the `tree_model`.
 * @returns the flags supported by this interface
 */
get_flags(): Gtk.TreeModelFlags
/**
 * Sets `iter` to a valid iterator pointing to `path`.  If `path` does
 * not exist, `iter` is set to an invalid iterator and %FALSE is returned.
 * @param path the #GtkTreePath-struct
 * @returns %TRUE, if @iter was set
 */
get_iter(path: Gtk.TreePath): [boolean, Gtk.TreeIter]
/**
 * Initializes `iter` with the first iterator in the tree
 * (the one at the path "0") and returns %TRUE. Returns
 * %FALSE if the tree is empty.
 * @returns %TRUE, if @iter was set
 */
get_iter_first(): [boolean, Gtk.TreeIter]
/**
 * Sets `iter` to a valid iterator pointing to `path_string,` if it
 * exists. Otherwise, `iter` is left invalid and %FALSE is returned.
 * @param path_string a string representation of a #GtkTreePath-struct
 * @returns %TRUE, if @iter was set
 */
get_iter_from_string(path_string: string): [boolean, Gtk.TreeIter]
/**
 * Returns the number of columns supported by `tree_model`.
 * @returns the number of columns
 */
get_n_columns(): number
/**
 * Returns a newly-created #GtkTreePath-struct referenced by `iter`.
 * 
 * This path should be freed with gtk_tree_path_free().
 * @param iter the #GtkTreeIter-struct
 * @returns a newly-created #GtkTreePath-struct
 */
get_path(iter: Gtk.TreeIter): Gtk.TreePath
/**
 * Generates a string representation of the iter.
 * 
 * This string is a “:” separated list of numbers.
 * For example, “4:10:0:3” would be an acceptable
 * return value for this string.
 * @param iter a #GtkTreeIter-struct
 * @returns a newly-allocated string.     Must be freed with g_free().
 */
get_string_from_iter(iter: Gtk.TreeIter): string
/**
 * Initializes and sets `value` to that at `column`.
 * 
 * When done with `value,` g_value_unset() needs to be called
 * to free any allocated memory.
 * @param iter the #GtkTreeIter-struct
 * @param column the column to lookup the value at
 */
get_value(iter: Gtk.TreeIter, column: number): unknown
/**
 * Sets `iter` to point to the first child of `parent`.
 * 
 * If `parent` has no children, %FALSE is returned and `iter` is
 * set to be invalid. `parent` will remain a valid node after this
 * function has been called.
 * 
 * If `parent` is %NULL returns the first node, equivalent to
 * `gtk_tree_model_get_iter_first (tree_model, iter);`
 * @param parent the #GtkTreeIter-struct, or %NULL
 * @returns %TRUE, if @iter has been set to the first child
 */
iter_children(parent?: (Gtk.TreeIter | null)): [boolean, Gtk.TreeIter]
/**
 * Returns %TRUE if `iter` has children, %FALSE otherwise.
 * @param iter the #GtkTreeIter-struct to test for children
 * @returns %TRUE if @iter has children
 */
iter_has_child(iter: Gtk.TreeIter): boolean
/**
 * Returns the number of children that `iter` has.
 * 
 * As a special case, if `iter` is %NULL, then the number
 * of toplevel nodes is returned.
 * @param iter the #GtkTreeIter-struct, or %NULL
 * @returns the number of children of @iter
 */
iter_n_children(iter?: (Gtk.TreeIter | null)): number
/**
 * Sets `iter` to point to the node following it at the current level.
 * 
 * If there is no next `iter,` %FALSE is returned and `iter` is set
 * to be invalid.
 * @param iter the #GtkTreeIter-struct
 * @returns %TRUE if @iter has been changed to the next node
 */
iter_next(iter: Gtk.TreeIter): boolean
/**
 * Sets `iter` to be the child of `parent,` using the given index.
 * 
 * The first index is 0. If `n` is too big, or `parent` has no children,
 * `iter` is set to an invalid iterator and %FALSE is returned. `parent`
 * will remain a valid node after this function has been called. As a
 * special case, if `parent` is %NULL, then the `n-th` root node
 * is set.
 * @param parent the #GtkTreeIter-struct to get the child from, or %NULL.
 * @param n the index of the desired child
 * @returns %TRUE, if @parent has an @n-th child
 */
iter_nth_child(parent: (Gtk.TreeIter | null), n: number): [boolean, Gtk.TreeIter]
/**
 * Sets `iter` to be the parent of `child`.
 * 
 * If `child` is at the toplevel, and doesn’t have a parent, then
 * `iter` is set to an invalid iterator and %FALSE is returned.
 * `child` will remain a valid node after this function has been
 * called.
 * 
 * `iter` will be initialized before the lookup is performed, so `child`
 * and `iter` cannot point to the same memory location.
 * @param child the #GtkTreeIter-struct
 * @returns %TRUE, if @iter is set to the parent of @child
 */
iter_parent(child: Gtk.TreeIter): [boolean, Gtk.TreeIter]
/**
 * Sets `iter` to point to the previous node at the current level.
 * 
 * If there is no previous `iter,` %FALSE is returned and `iter` is
 * set to be invalid.
 * @param iter the #GtkTreeIter-struct
 * @returns %TRUE if @iter has been changed to the previous node
 */
iter_previous(iter: Gtk.TreeIter): boolean
/**
 * Lets the tree ref the node.
 * 
 * This is an optional method for models to implement.
 * To be more specific, models may ignore this call as it exists
 * primarily for performance reasons.
 * 
 * This function is primarily meant as a way for views to let
 * caching models know when nodes are being displayed (and hence,
 * whether or not to cache that node). Being displayed means a node
 * is in an expanded branch, regardless of whether the node is currently
 * visible in the viewport. For example, a file-system based model
 * would not want to keep the entire file-hierarchy in memory,
 * just the sections that are currently being displayed by
 * every current view.
 * 
 * A model should be expected to be able to get an iter independent
 * of its reffed state.
 * @param iter the #GtkTreeIter-struct
 */
ref_node(iter: Gtk.TreeIter): void
/**
 * Emits the #GtkTreeModel::row-changed signal on `tree_model`.
 * @param path a #GtkTreePath-struct pointing to the changed row
 * @param iter a valid #GtkTreeIter-struct pointing to the changed row
 */
row_changed(path: Gtk.TreePath, iter: Gtk.TreeIter): void
/**
 * Emits the #GtkTreeModel::row-deleted signal on `tree_model`.
 * 
 * This should be called by models after a row has been removed.
 * The location pointed to by `path` should be the location that
 * the row previously was at. It may not be a valid location anymore.
 * 
 * Nodes that are deleted are not unreffed, this means that any
 * outstanding references on the deleted node should not be released.
 * @param path a #GtkTreePath-struct pointing to the previous location of     the deleted row
 */
row_deleted(path: Gtk.TreePath): void
/**
 * Emits the #GtkTreeModel::row-has-child-toggled signal on
 * `tree_model`. This should be called by models after the child
 * state of a node changes.
 * @param path a #GtkTreePath-struct pointing to the changed row
 * @param iter a valid #GtkTreeIter-struct pointing to the changed row
 */
row_has_child_toggled(path: Gtk.TreePath, iter: Gtk.TreeIter): void
/**
 * Emits the #GtkTreeModel::row-inserted signal on `tree_model`.
 * @param path a #GtkTreePath-struct pointing to the inserted row
 * @param iter a valid #GtkTreeIter-struct pointing to the inserted row
 */
row_inserted(path: Gtk.TreePath, iter: Gtk.TreeIter): void
/**
 * Emits the #GtkTreeModel::rows-reordered signal on `tree_model`.
 * 
 * This should be called by models when their rows have been
 * reordered.
 * @param path a #GtkTreePath-struct pointing to the tree node whose children     have been reordered
 * @param iter a valid #GtkTreeIter-struct pointing to the node     whose children have been reordered, or %NULL if the depth     of @path is 0
 * @param new_order an array of integers     mapping the current position of each child to its old     position before the re-ordering,     i.e. @new_order`[newpos] = oldpos`
 */
rows_reordered(path: Gtk.TreePath, iter: (Gtk.TreeIter | null), new_order: number[]): void
/**
 * Lets the tree unref the node.
 * 
 * This is an optional method for models to implement.
 * To be more specific, models may ignore this call as it exists
 * primarily for performance reasons. For more information on what
 * this means, see gtk_tree_model_ref_node().
 * 
 * Please note that nodes that are deleted are not unreffed.
 * @param iter the #GtkTreeIter-struct
 */
unref_node(iter: Gtk.TreeIter): void
/**
 * Returns the type of the column.
 * @param index_ the column index
 */
vfunc_get_column_type(index_: number): GObject.GType
/**
 * Returns a set of flags supported by this interface.
 * 
 * The flags are a bitwise combination of #GtkTreeModelFlags.
 * The flags supported should not change during the lifetime
 * of the `tree_model`.
 */
vfunc_get_flags(): Gtk.TreeModelFlags
/**
 * Sets `iter` to a valid iterator pointing to `path`.  If `path` does
 * not exist, `iter` is set to an invalid iterator and %FALSE is returned.
 * @param path the #GtkTreePath-struct
 */
vfunc_get_iter(path: Gtk.TreePath): [boolean, Gtk.TreeIter]
/**
 * Returns the number of columns supported by `tree_model`.
 */
vfunc_get_n_columns(): number
/**
 * Returns a newly-created #GtkTreePath-struct referenced by `iter`.
 * 
 * This path should be freed with gtk_tree_path_free().
 * @param iter the #GtkTreeIter-struct
 */
vfunc_get_path(iter: Gtk.TreeIter): Gtk.TreePath
/**
 * Initializes and sets `value` to that at `column`.
 * 
 * When done with `value,` g_value_unset() needs to be called
 * to free any allocated memory.
 * @param iter the #GtkTreeIter-struct
 * @param column the column to lookup the value at
 */
vfunc_get_value(iter: Gtk.TreeIter, column: number): unknown
/**
 * Sets `iter` to point to the first child of `parent`.
 * 
 * If `parent` has no children, %FALSE is returned and `iter` is
 * set to be invalid. `parent` will remain a valid node after this
 * function has been called.
 * 
 * If `parent` is %NULL returns the first node, equivalent to
 * `gtk_tree_model_get_iter_first (tree_model, iter);`
 * @param parent the #GtkTreeIter-struct, or %NULL
 */
vfunc_iter_children(parent?: (Gtk.TreeIter | null)): [boolean, Gtk.TreeIter]
/**
 * Returns %TRUE if `iter` has children, %FALSE otherwise.
 * @param iter the #GtkTreeIter-struct to test for children
 */
vfunc_iter_has_child(iter: Gtk.TreeIter): boolean
/**
 * Returns the number of children that `iter` has.
 * 
 * As a special case, if `iter` is %NULL, then the number
 * of toplevel nodes is returned.
 * @param iter the #GtkTreeIter-struct, or %NULL
 */
vfunc_iter_n_children(iter?: (Gtk.TreeIter | null)): number
/**
 * Sets `iter` to point to the node following it at the current level.
 * 
 * If there is no next `iter,` %FALSE is returned and `iter` is set
 * to be invalid.
 * @param iter the #GtkTreeIter-struct
 */
vfunc_iter_next(iter: Gtk.TreeIter): boolean
/**
 * Sets `iter` to be the child of `parent,` using the given index.
 * 
 * The first index is 0. If `n` is too big, or `parent` has no children,
 * `iter` is set to an invalid iterator and %FALSE is returned. `parent`
 * will remain a valid node after this function has been called. As a
 * special case, if `parent` is %NULL, then the `n-th` root node
 * is set.
 * @param parent the #GtkTreeIter-struct to get the child from, or %NULL.
 * @param n the index of the desired child
 */
vfunc_iter_nth_child(parent: (Gtk.TreeIter | null), n: number): [boolean, Gtk.TreeIter]
/**
 * Sets `iter` to be the parent of `child`.
 * 
 * If `child` is at the toplevel, and doesn’t have a parent, then
 * `iter` is set to an invalid iterator and %FALSE is returned.
 * `child` will remain a valid node after this function has been
 * called.
 * 
 * `iter` will be initialized before the lookup is performed, so `child`
 * and `iter` cannot point to the same memory location.
 * @param child the #GtkTreeIter-struct
 */
vfunc_iter_parent(child: Gtk.TreeIter): [boolean, Gtk.TreeIter]
/**
 * Sets `iter` to point to the previous node at the current level.
 * 
 * If there is no previous `iter,` %FALSE is returned and `iter` is
 * set to be invalid.
 * @param iter the #GtkTreeIter-struct
 */
vfunc_iter_previous(iter: Gtk.TreeIter): boolean
/**
 * Lets the tree ref the node.
 * 
 * This is an optional method for models to implement.
 * To be more specific, models may ignore this call as it exists
 * primarily for performance reasons.
 * 
 * This function is primarily meant as a way for views to let
 * caching models know when nodes are being displayed (and hence,
 * whether or not to cache that node). Being displayed means a node
 * is in an expanded branch, regardless of whether the node is currently
 * visible in the viewport. For example, a file-system based model
 * would not want to keep the entire file-hierarchy in memory,
 * just the sections that are currently being displayed by
 * every current view.
 * 
 * A model should be expected to be able to get an iter independent
 * of its reffed state.
 * @param iter the #GtkTreeIter-struct
 */
vfunc_ref_node(iter: Gtk.TreeIter): void
/**
 * Emits the #GtkTreeModel::row-changed signal on `tree_model`.
 * @param path a #GtkTreePath-struct pointing to the changed row
 * @param iter a valid #GtkTreeIter-struct pointing to the changed row
 */
vfunc_row_changed(path: Gtk.TreePath, iter: Gtk.TreeIter): void
/**
 * Emits the #GtkTreeModel::row-deleted signal on `tree_model`.
 * 
 * This should be called by models after a row has been removed.
 * The location pointed to by `path` should be the location that
 * the row previously was at. It may not be a valid location anymore.
 * 
 * Nodes that are deleted are not unreffed, this means that any
 * outstanding references on the deleted node should not be released.
 * @param path a #GtkTreePath-struct pointing to the previous location of     the deleted row
 */
vfunc_row_deleted(path: Gtk.TreePath): void
/**
 * Emits the #GtkTreeModel::row-has-child-toggled signal on
 * `tree_model`. This should be called by models after the child
 * state of a node changes.
 * @param path a #GtkTreePath-struct pointing to the changed row
 * @param iter a valid #GtkTreeIter-struct pointing to the changed row
 */
vfunc_row_has_child_toggled(path: Gtk.TreePath, iter: Gtk.TreeIter): void
/**
 * Emits the #GtkTreeModel::row-inserted signal on `tree_model`.
 * @param path a #GtkTreePath-struct pointing to the inserted row
 * @param iter a valid #GtkTreeIter-struct pointing to the inserted row
 */
vfunc_row_inserted(path: Gtk.TreePath, iter: Gtk.TreeIter): void
/**
 * Lets the tree unref the node.
 * 
 * This is an optional method for models to implement.
 * To be more specific, models may ignore this call as it exists
 * primarily for performance reasons. For more information on what
 * this means, see gtk_tree_model_ref_node().
 * 
 * Please note that nodes that are deleted are not unreffed.
 * @param iter the #GtkTreeIter-struct
 */
vfunc_unref_node(iter: Gtk.TreeIter): void
/**
 * Fills in `sort_column_id` and `order` with the current sort column and the
 * order. It returns %TRUE unless the `sort_column_id` is
 * %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID or
 * %GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID.
 * @returns %TRUE if the sort column is not one of the special sort   column ids.
 */
get_sort_column_id(): [boolean, number, Gtk.SortType]
/**
 * Returns %TRUE if the model has a default sort function. This is used
 * primarily by GtkTreeViewColumns in order to determine if a model can
 * go back to the default state, or not.
 * @returns %TRUE, if the model has a default sort function
 */
has_default_sort_func(): boolean
/**
 * Sets the default comparison function used when sorting to be `sort_func`.
 * If the current sort column id of `sortable` is
 * %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, then the model will sort using
 * this function.
 * 
 * If `sort_func` is %NULL, then there will be no default comparison function.
 * This means that once the model  has been sorted, it can’t go back to the
 * default state. In this case, when the current sort column id of `sortable`
 * is %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, the model will be unsorted.
 * @param sort_func The comparison function
 * @param destroy Destroy notifier of @user_data, or %NULL
 */
set_default_sort_func(sort_func: Gtk.TreeIterCompareFunc, destroy?: (GLib.DestroyNotify | null)): void
/**
 * Sets the current sort column to be `sort_column_id`. The `sortable` will
 * resort itself to reflect this change, after emitting a
 * #GtkTreeSortable::sort-column-changed signal. `sort_column_id` may either be
 * a regular column id, or one of the following special values:
 * 
 * - %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID: the default sort function
 *   will be used, if it is set
 * 
 * - %GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID: no sorting will occur
 * @param sort_column_id the sort column id to set
 * @param order The sort order of the column
 */
set_sort_column_id(sort_column_id: number, order: Gtk.SortType): void
/**
 * Sets the comparison function used when sorting to be `sort_func`. If the
 * current sort column id of `sortable` is the same as `sort_column_id,` then
 * the model will sort using this function.
 * @param sort_column_id the sort column id to set the function for
 * @param sort_func The comparison function
 * @param destroy Destroy notifier of @user_data, or %NULL
 */
set_sort_func(sort_column_id: number, sort_func: Gtk.TreeIterCompareFunc, destroy?: (GLib.DestroyNotify | null)): void
/**
 * Emits a #GtkTreeSortable::sort-column-changed signal on `sortable`.
 */
sort_column_changed(): void
/**
 * Fills in `sort_column_id` and `order` with the current sort column and the
 * order. It returns %TRUE unless the `sort_column_id` is
 * %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID or
 * %GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID.
 */
vfunc_get_sort_column_id(): [boolean, number, Gtk.SortType]
/**
 * Returns %TRUE if the model has a default sort function. This is used
 * primarily by GtkTreeViewColumns in order to determine if a model can
 * go back to the default state, or not.
 */
vfunc_has_default_sort_func(): boolean
/**
 * Sets the default comparison function used when sorting to be `sort_func`.
 * If the current sort column id of `sortable` is
 * %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, then the model will sort using
 * this function.
 * 
 * If `sort_func` is %NULL, then there will be no default comparison function.
 * This means that once the model  has been sorted, it can’t go back to the
 * default state. In this case, when the current sort column id of `sortable`
 * is %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID, the model will be unsorted.
 * @param sort_func The comparison function
 * @param destroy Destroy notifier of @user_data, or %NULL
 */
vfunc_set_default_sort_func(sort_func: Gtk.TreeIterCompareFunc, destroy?: (GLib.DestroyNotify | null)): void
/**
 * Sets the current sort column to be `sort_column_id`. The `sortable` will
 * resort itself to reflect this change, after emitting a
 * #GtkTreeSortable::sort-column-changed signal. `sort_column_id` may either be
 * a regular column id, or one of the following special values:
 * 
 * - %GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID: the default sort function
 *   will be used, if it is set
 * 
 * - %GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID: no sorting will occur
 * @param sort_column_id the sort column id to set
 * @param order The sort order of the column
 */
vfunc_set_sort_column_id(sort_column_id: number, order: Gtk.SortType): void
/**
 * Sets the comparison function used when sorting to be `sort_func`. If the
 * current sort column id of `sortable` is the same as `sort_column_id,` then
 * the model will sort using this function.
 * @param sort_column_id the sort column id to set the function for
 * @param sort_func The comparison function
 * @param destroy Destroy notifier of @user_data, or %NULL
 */
vfunc_set_sort_func(sort_column_id: number, sort_func: Gtk.TreeIterCompareFunc, destroy?: (GLib.DestroyNotify | null)): void
/**
 * Emits a #GtkTreeSortable::sort-column-changed signal on `sortable`.
 */
vfunc_sort_column_changed(): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
set(...args: never[]): any
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ShortcutSimpleLabel {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Box.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.Orientable.ConstructorProps {
accel: string;
    action: string;
    command: string;
    show_accel: boolean;
    showAccel: boolean;
    title: string;
    }

}

class ShortcutSimpleLabel extends Gtk.Box implements Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Dazzle.ShortcutSimpleLabel

    get accel(): string;
    set accel(val: string);
    get action(): string;
    set action(val: string);
    get command(): string;
    set command(val: string);
    get show_accel(): boolean;
    set show_accel(val: boolean);
    get showAccel(): boolean;
    set showAccel(val: boolean);
    get title(): string;
    set title(val: string);

    // Constructors of Dazzle.ShortcutSimpleLabel


constructor(properties?: Partial<ShortcutSimpleLabel.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): ShortcutSimpleLabel;

    // Own methods of Dazzle.ShortcutSimpleLabel

    get_accel(): string
    get_action(): string
    get_command(): string
    get_title(): string
    set_accel(accel: string): void
    set_action(action: string): void
    set_command(command: string): void
    set_title(title: string): void

// Inherited properties
/**
 * The orientation of the orientable.
 */
get orientation(): Gtk.Orientation;
set orientation(val: Gtk.Orientation);

// Inherited methods
/**
 * Retrieves the orientation of the `orientable`.
 * @returns the orientation of the @orientable.
 */
get_orientation(): Gtk.Orientation
/**
 * Sets the orientation of the `orientable`.
 * @param orientation the orientable’s new orientation.
 */
set_orientation(orientation: Gtk.Orientation): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ShortcutTheme {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
name: string;
    parent_name: string;
    parentName: string;
    subtitle: string;
    title: string;
    }

}

class ShortcutTheme extends GObject.Object {

    // Own properties of Dazzle.ShortcutTheme

    get name(): string;
    get parent_name(): string;
    set parent_name(val: string);
    get parentName(): string;
    set parentName(val: string);
    get subtitle(): string;
    set subtitle(val: string);
    get title(): string;
    set title(val: string);

    // Constructors of Dazzle.ShortcutTheme


constructor(properties?: Partial<ShortcutTheme.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](name: string): ShortcutTheme;

    // Own methods of Dazzle.ShortcutTheme

    add_command(accelerator: string, command: string): void
    add_context(context: ShortcutContext): void
    add_css_resource(path: string): void
    /**
     * Gets the context named `name`. If the context does not exist, it will
     * be created.
     * @param name The name of the context
     * @returns An #DzlShortcutContext
     */
    find_context_by_name(name: string): ShortcutContext
    /**
     * Finds the default context in the theme for `widget`.
     * @param widget 
     * @returns An #DzlShortcutContext or %NULL.
     */
    find_default_context(widget: Gtk.Widget): (ShortcutContext | null)
    get_chord_for_action(detailed_action_name: string): ShortcutChord
    get_chord_for_command(command: string): ShortcutChord
    get_name(): string
    /**
     * If the #DzlShortcutTheme:parent-name property has been set, this will fetch
     * the parent #DzlShortcutTheme.
     * @returns A #DzlShortcutTheme or %NULL.
     */
    get_parent(): (ShortcutTheme | null)
    /**
     * Gets the name of the parent shortcut theme.
     * 
     * This is used to resolve shortcuts from the parent theme without having to
     * copy them directly into this shortcut theme. It allows for some level of
     * copy-on-write (CoW).
     * @returns The name of the parent theme, or %NULL if none is set.
     */
    get_parent_name(): (string | null)
    get_subtitle(): string
    get_title(): string
    load_from_data(data: string, len: number): boolean
    load_from_file(file: Gio.File, cancellable?: (Gio.Cancellable | null)): boolean
    load_from_path(path: string, cancellable?: (Gio.Cancellable | null)): boolean
    remove_css_resource(path: string): void
    save_to_file(file: Gio.File, cancellable?: (Gio.Cancellable | null)): boolean
    save_to_path(path: string, cancellable?: (Gio.Cancellable | null)): boolean
    save_to_stream(stream: Gio.OutputStream, cancellable?: (Gio.Cancellable | null)): boolean
    set_accel_for_action(detailed_action_name: string, accel: string, phase: ShortcutPhase): void
    /**
     * This will set the command to execute when `accel` is pressed.  If command is
     * %NULL, the accelerator will be cleared.  If accelerator is %NULL, all
     * accelerators for `command` will be cleared.
     * @param command the command to be executed
     * @param accel the shortcut accelerator
     * @param phase the phase to activate within, or 0 for the default
     */
    set_accel_for_command(command: (string | null), accel: (string | null), phase: ShortcutPhase): void
    set_chord_for_action(detailed_action_name: string, chord: ShortcutChord, phase: ShortcutPhase): void
    /**
     * This will set the command to execute when `chord` is pressed.  If command is
     * %NULL, the accelerator will be cleared.  If `chord` is %NULL, all
     * accelerators for `command` will be cleared.
     * @param command the command to be executed
     * @param chord the chord for the command
     * @param phase the phase to activate within, or 0 for the default
     */
    set_chord_for_command(command: (string | null), chord: (ShortcutChord | null), phase: ShortcutPhase): void
    set_parent_name(parent_name: string): void
}

module ShortcutThemeEditor {

    // Signal callback interfaces

    interface Changed {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProps extends Gtk.Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
theme: ShortcutTheme;
    }

}

class ShortcutThemeEditor extends Gtk.Bin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.ShortcutThemeEditor

    get theme(): ShortcutTheme;
    set theme(val: ShortcutTheme);

    // Constructors of Dazzle.ShortcutThemeEditor


constructor(properties?: Partial<ShortcutThemeEditor.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): ShortcutThemeEditor;

    // Own signals of Dazzle.ShortcutThemeEditor

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'changed', callback: ((_source: this) => void)): number
    connect_after(signal: 'changed', callback: ((_source: this) => void)): number
    emit(signal: 'changed'): void

    // Own methods of Dazzle.ShortcutThemeEditor

    /**
     * Gets the shortcut theme if one hsa been set.
     * @returns An #DzlShortcutTheme or %NULL
     */
    get_theme(): (ShortcutTheme | null)
    set_theme(theme: ShortcutTheme): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ShortcutTooltip {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
accel: string;
    command_id: string;
    commandId: string;
    title: string;
    widget: Gtk.Widget;
    }

}

class ShortcutTooltip extends GObject.Object {

    // Own properties of Dazzle.ShortcutTooltip

    get accel(): string;
    set accel(val: string);
    get command_id(): string;
    set command_id(val: string);
    get commandId(): string;
    set commandId(val: string);
    /**
     * The "title" property contains an alternate title for the tooltip
     * instead of discovering the title from the shortcut manager.
     */
    get title(): string;
    set title(val: string);
    get widget(): Gtk.Widget;
    set widget(val: Gtk.Widget);

    // Constructors of Dazzle.ShortcutTooltip


constructor(properties?: Partial<ShortcutTooltip.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): ShortcutTooltip;

    // Own methods of Dazzle.ShortcutTooltip

    /**
     * Gets the #DzlShortcutTooltip:accel property, which can be used to override
     * the commands accel.
     * @returns an override accel, or %NULL
     */
    get_accel(): (string | null)
    /**
     * Gets the #DzlShortcutTooltip:command-id property.
     * @returns a string containing the command id
     */
    get_command_id(): (string | null)
    /**
     * Gets the #DzlShortcutTooltip:title property, if set.
     * @returns a string containing the title, or %NULL
     */
    get_title(): (string | null)
    /**
     * Gets the #GtkWidget that the shortcut-tooltip is wrapping.
     * @returns a #GtkWidget or %NULL if unset
     */
    get_widget(): (Gtk.Widget | null)
    /**
     * Allows overriding the accel that is used.
     * @param accel Sets the accelerator to use, or %NULL to unset   and use the default
     */
    set_accel(accel?: (string | null)): void
    /**
     * This sets the #DzlShortcutTooltip:command-id property which denotes which
     * shortcut registered with libdazzle to display when a tooltip request is
     * received.
     * @param command_id the command-id of the shortcut registered
     */
    set_command_id(command_id: string): void
    /**
     * Sets the #DzlShortcutTooltip:title property, which can be used to
     * override the default title for the tooltip as discovered from the
     * shortcut manager.
     * @param title a title for the tooltip, or %NULL
     */
    set_title(title?: (string | null)): void
    /**
     * Sets the widget to connect to the #GtkWidget::query-tooltip signal.
     * 
     * If configured, the widget will be displayed with an appropriate tooltip
     * message matching the shortcut from #DzlShortcutTooltip:command-id.
     * @param widget a #GtkWidget or %NULL
     */
    set_widget(widget?: (Gtk.Widget | null)): void
}

module ShortcutsGroup {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Box.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.Orientable.ConstructorProps {
accel_size_group: Gtk.SizeGroup;
    accelSizeGroup: Gtk.SizeGroup;
    height: number;
    title: string;
    title_size_group: Gtk.SizeGroup;
    titleSizeGroup: Gtk.SizeGroup;
    view: string;
    }

}

class ShortcutsGroup extends Gtk.Box implements Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Dazzle.ShortcutsGroup

    /**
     * The size group for the accelerator portion of shortcuts in this group.
     * 
     * This is used internally by GTK+, and must not be modified by applications.
     */
    set accel_size_group(val: Gtk.SizeGroup);
    /**
     * The size group for the accelerator portion of shortcuts in this group.
     * 
     * This is used internally by GTK+, and must not be modified by applications.
     */
    set accelSizeGroup(val: Gtk.SizeGroup);
    /**
     * A rough measure for the number of lines in this group.
     * 
     * This is used internally by GTK+, and is not useful for applications.
     */
    get height(): number;
    /**
     * The title for this group of shortcuts.
     */
    get title(): string;
    set title(val: string);
    /**
     * The size group for the textual portion of shortcuts in this group.
     * 
     * This is used internally by GTK+, and must not be modified by applications.
     */
    set title_size_group(val: Gtk.SizeGroup);
    /**
     * The size group for the textual portion of shortcuts in this group.
     * 
     * This is used internally by GTK+, and must not be modified by applications.
     */
    set titleSizeGroup(val: Gtk.SizeGroup);
    /**
     * An optional view that the shortcuts in this group are relevant for.
     * The group will be hidden if the #DzlShortcutsWindow:view-name property
     * does not match the view of this group.
     * 
     * Set this to %NULL to make the group always visible.
     */
    get view(): string;
    set view(val: string);

    // Constructors of Dazzle.ShortcutsGroup


constructor(properties?: Partial<ShortcutsGroup.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


// Inherited properties
/**
 * The orientation of the orientable.
 */
get orientation(): Gtk.Orientation;
set orientation(val: Gtk.Orientation);

// Inherited methods
/**
 * Retrieves the orientation of the `orientable`.
 * @returns the orientation of the @orientable.
 */
get_orientation(): Gtk.Orientation
/**
 * Sets the orientation of the `orientable`.
 * @param orientation the orientable’s new orientation.
 */
set_orientation(orientation: Gtk.Orientation): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ShortcutsSection {

    // Signal callback interfaces

    interface ChangeCurrentPage {
        (object: number): boolean
    }


    // Constructor properties interface

    interface ConstructorProps extends Gtk.Box.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.Orientable.ConstructorProps {
max_height: number;
    maxHeight: number;
    section_name: string;
    sectionName: string;
    title: string;
    view_name: string;
    viewName: string;
    }

}

class ShortcutsSection extends Gtk.Box implements Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Dazzle.ShortcutsSection

    /**
     * The maximum number of lines to allow per column. This property can
     * be used to influence how the groups in this section are distributed
     * across pages and columns. The default value of 15 should work in
     * for most cases.
     */
    get max_height(): number;
    set max_height(val: number);
    /**
     * The maximum number of lines to allow per column. This property can
     * be used to influence how the groups in this section are distributed
     * across pages and columns. The default value of 15 should work in
     * for most cases.
     */
    get maxHeight(): number;
    set maxHeight(val: number);
    /**
     * A unique name to identify this section among the sections
     * added to the DzlShortcutsWindow. Setting the #DzlShortcutsWindow:section-name
     * property to this string will make this section shown in the
     * DzlShortcutsWindow.
     */
    get section_name(): string;
    set section_name(val: string);
    /**
     * A unique name to identify this section among the sections
     * added to the DzlShortcutsWindow. Setting the #DzlShortcutsWindow:section-name
     * property to this string will make this section shown in the
     * DzlShortcutsWindow.
     */
    get sectionName(): string;
    set sectionName(val: string);
    /**
     * The string to show in the section selector of the DzlShortcutsWindow
     * for this section. If there is only one section, you don't need to
     * set a title, since the section selector will not be shown in this case.
     */
    get title(): string;
    set title(val: string);
    /**
     * A view name to filter the groups in this section by.
     * See #DzlShortcutsGroup:view.
     * 
     * Applications are expected to use the #DzlShortcutsWindow:view-name
     * property for this purpose.
     */
    get view_name(): string;
    set view_name(val: string);
    /**
     * A view name to filter the groups in this section by.
     * See #DzlShortcutsGroup:view.
     * 
     * Applications are expected to use the #DzlShortcutsWindow:view-name
     * property for this purpose.
     */
    get viewName(): string;
    set viewName(val: string);

    // Constructors of Dazzle.ShortcutsSection


constructor(properties?: Partial<ShortcutsSection.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own signals of Dazzle.ShortcutsSection

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'change-current-page', callback: ((_source: this, object: number) => boolean)): number
    connect_after(signal: 'change-current-page', callback: ((_source: this, object: number) => boolean)): number
    emit(signal: 'change-current-page', object: number): void

// Inherited properties
/**
 * The orientation of the orientable.
 */
get orientation(): Gtk.Orientation;
set orientation(val: Gtk.Orientation);

// Inherited methods
/**
 * Retrieves the orientation of the `orientable`.
 * @returns the orientation of the @orientable.
 */
get_orientation(): Gtk.Orientation
/**
 * Sets the orientation of the `orientable`.
 * @param orientation the orientable’s new orientation.
 */
set_orientation(orientation: Gtk.Orientation): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ShortcutsShortcut {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Box.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.Orientable.ConstructorProps {
accel_size_group: Gtk.SizeGroup;
    accelSizeGroup: Gtk.SizeGroup;
    accelerator: string;
    action_name: string;
    actionName: string;
    direction: Gtk.TextDirection;
    icon: Gio.Icon;
    icon_set: boolean;
    iconSet: boolean;
    shortcut_type: Gtk.ShortcutType;
    shortcutType: Gtk.ShortcutType;
    subtitle: string;
    subtitle_set: boolean;
    subtitleSet: boolean;
    title: string;
    title_size_group: Gtk.SizeGroup;
    titleSizeGroup: Gtk.SizeGroup;
    }

}

class ShortcutsShortcut extends Gtk.Box implements Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Dazzle.ShortcutsShortcut

    /**
     * The size group for the accelerator portion of this shortcut.
     * 
     * This is used internally by GTK+, and must not be modified by applications.
     */
    set accel_size_group(val: Gtk.SizeGroup);
    /**
     * The size group for the accelerator portion of this shortcut.
     * 
     * This is used internally by GTK+, and must not be modified by applications.
     */
    set accelSizeGroup(val: Gtk.SizeGroup);
    /**
     * The accelerator(s) represented by this object. This property is used
     * if #DzlShortcutsShortcut:shortcut-type is set to #GTK_SHORTCUT_ACCELERATOR.
     * 
     * The syntax of this property is (an extension of) the syntax understood by
     * gtk_accelerator_parse(). Multiple accelerators can be specified by separating
     * them with a space, but keep in mind that the available width is limited.
     * It is also possible to specify ranges of shortcuts, using ... between the keys.
     * Sequences of keys can be specified using a + or & between the keys.
     * 
     * Examples:
     * - A single shortcut: &lt;ctl&gt;&lt;alt&gt;delete
     * - Two alternative shortcuts: &lt;shift&gt;a Home
     * - A range of shortcuts: &lt;alt&gt;1...&lt;alt&gt;9
     * - Several keys pressed together: Control_L&Control_R
     * - A sequence of shortcuts or keys: &lt;ctl&gt;c+&lt;ctl&gt;x
     * 
     * Use + instead of & when the keys may (or have to be) pressed sequentially (e.g
     * use t+t for 'press the t key twice').
     * 
     * Note that <, > and & need to be escaped as &lt;, &gt; and &amp; when used
     * in .ui files.
     */
    get accelerator(): string;
    set accelerator(val: string);
    /**
     * A detailed action name. If this is set for a shortcut
     * of type %GTK_SHORTCUT_ACCELERATOR, then GTK+ will use
     * the accelerators that are associated with the action
     * via gtk_application_set_accels_for_action(), and setting
     * #DzlShortcutsShortcut::accelerator is not necessary.
     */
    get action_name(): string;
    set action_name(val: string);
    /**
     * A detailed action name. If this is set for a shortcut
     * of type %GTK_SHORTCUT_ACCELERATOR, then GTK+ will use
     * the accelerators that are associated with the action
     * via gtk_application_set_accels_for_action(), and setting
     * #DzlShortcutsShortcut::accelerator is not necessary.
     */
    get actionName(): string;
    set actionName(val: string);
    /**
     * The text direction for which this shortcut is active. If the shortcut
     * is used regardless of the text direction, set this property to
     * #GTK_TEXT_DIR_NONE.
     */
    get direction(): Gtk.TextDirection;
    set direction(val: Gtk.TextDirection);
    /**
     * An icon to represent the shortcut or gesture. This property is used if
     * #DzlShortcutsShortcut:shortcut-type is set to #GTK_SHORTCUT_GESTURE.
     * For the other predefined gesture types, GTK+ provides an icon on its own.
     */
    get icon(): Gio.Icon;
    set icon(val: Gio.Icon);
    /**
     * %TRUE if an icon has been set.
     */
    get icon_set(): boolean;
    set icon_set(val: boolean);
    /**
     * %TRUE if an icon has been set.
     */
    get iconSet(): boolean;
    set iconSet(val: boolean);
    /**
     * The type of shortcut that is represented.
     */
    get shortcut_type(): Gtk.ShortcutType;
    set shortcut_type(val: Gtk.ShortcutType);
    /**
     * The type of shortcut that is represented.
     */
    get shortcutType(): Gtk.ShortcutType;
    set shortcutType(val: Gtk.ShortcutType);
    /**
     * The subtitle for the shortcut or gesture.
     * 
     * This is typically used for gestures and should be a short, one-line
     * text that describes the gesture itself. For the predefined gesture
     * types, GTK+ provides a subtitle on its own.
     */
    get subtitle(): string;
    set subtitle(val: string);
    /**
     * %TRUE if a subtitle has been set.
     */
    get subtitle_set(): boolean;
    set subtitle_set(val: boolean);
    /**
     * %TRUE if a subtitle has been set.
     */
    get subtitleSet(): boolean;
    set subtitleSet(val: boolean);
    /**
     * The textual description for the shortcut or gesture represented by
     * this object. This should be a short string that can fit in a single line.
     */
    get title(): string;
    set title(val: string);
    /**
     * The size group for the textual portion of this shortcut.
     * 
     * This is used internally by GTK+, and must not be modified by applications.
     */
    set title_size_group(val: Gtk.SizeGroup);
    /**
     * The size group for the textual portion of this shortcut.
     * 
     * This is used internally by GTK+, and must not be modified by applications.
     */
    set titleSizeGroup(val: Gtk.SizeGroup);

    // Constructors of Dazzle.ShortcutsShortcut


constructor(properties?: Partial<ShortcutsShortcut.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


// Inherited properties
/**
 * The orientation of the orientable.
 */
get orientation(): Gtk.Orientation;
set orientation(val: Gtk.Orientation);

// Inherited methods
/**
 * Retrieves the orientation of the `orientable`.
 * @returns the orientation of the @orientable.
 */
get_orientation(): Gtk.Orientation
/**
 * Sets the orientation of the `orientable`.
 * @param orientation the orientable’s new orientation.
 */
set_orientation(orientation: Gtk.Orientation): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module ShortcutsWindow {

    // Signal callback interfaces

    interface Close {
        (): void
    }

    interface Search {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProps extends Gtk.Window.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
section_name: string;
    sectionName: string;
    view_name: string;
    viewName: string;
    }

}

class ShortcutsWindow extends Gtk.Window implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.ShortcutsWindow

    /**
     * The name of the section to show.
     * 
     * This should be the section-name of one of the #DzlShortcutsSection
     * objects that are in this shortcuts window.
     */
    get section_name(): string;
    set section_name(val: string);
    /**
     * The name of the section to show.
     * 
     * This should be the section-name of one of the #DzlShortcutsSection
     * objects that are in this shortcuts window.
     */
    get sectionName(): string;
    set sectionName(val: string);
    /**
     * The view name by which to filter the contents.
     * 
     * This should correspond to the #DzlShortcutsGroup:view property of some of
     * the #DzlShortcutsGroup objects that are inside this shortcuts window.
     * 
     * Set this to %NULL to show all groups.
     */
    get view_name(): string;
    set view_name(val: string);
    /**
     * The view name by which to filter the contents.
     * 
     * This should correspond to the #DzlShortcutsGroup:view property of some of
     * the #DzlShortcutsGroup objects that are inside this shortcuts window.
     * 
     * Set this to %NULL to show all groups.
     */
    get viewName(): string;
    set viewName(val: string);

    // Own fields of Dazzle.ShortcutsWindow


// @ts-expect-error This property conflicts with an accessor in a parent class or interface.
window: Gtk.Window

    // Constructors of Dazzle.ShortcutsWindow


constructor(properties?: Partial<ShortcutsWindow.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own signals of Dazzle.ShortcutsWindow

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'close', callback: ((_source: this) => void)): number
    connect_after(signal: 'close', callback: ((_source: this) => void)): number
    emit(signal: 'close'): void
    connect(signal: 'search', callback: ((_source: this) => void)): number
    connect_after(signal: 'search', callback: ((_source: this) => void)): number
    emit(signal: 'search'): void

    // Own virtual methods of Dazzle.ShortcutsWindow

    vfunc_close(): void
    vfunc_search(): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module SignalGroup {

    // Signal callback interfaces

    interface Bind {
        (instance: GObject.Object): void
    }

    interface Unbind {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
target: GObject.Object;
    target_type: GObject.GType;
    targetType: GObject.GType;
    }

}

/**
 * #DzlSignalGroup manages to simplify the process of connecting
 * many signals to a #GObject as a group. As such there is no API
 * to disconnect a signal from the group.
 * 
 * In particular, this allows you to:
 * 
 *  - Change the target instance, which automatically causes disconnection
 *    of the signals from the old instance and connecting to the new instance.
 *  - Block and unblock signals as a group
 *  - Ensuring that blocked state transfers across target instances.
 * 
 * One place you might want to use such a structure is with #GtkTextView and
 * #GtkTextBuffer. Often times, you'll need to connect to many signals on
 * #GtkTextBuffer from a #GtkTextView subclass. This allows you to create a
 * signal group during instance construction, simply bind the
 * #GtkTextView:buffer property to #DzlSignalGroup:target and connect
 * all the signals you need. When the #GtkTextView:buffer property changes
 * all of the signals will be transitioned correctly.
 */
class SignalGroup extends GObject.Object {

    // Own properties of Dazzle.SignalGroup

    /**
     * The target instance used when connecting signals.
     */
    get target(): GObject.Object;
    set target(val: GObject.Object);
    /**
     * The GType of the target property.
     */
    get target_type(): GObject.GType;
    /**
     * The GType of the target property.
     */
    get targetType(): GObject.GType;

    // Constructors of Dazzle.SignalGroup


constructor(properties?: Partial<SignalGroup.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](target_type: GObject.GType): SignalGroup;

    // Own signals of Dazzle.SignalGroup

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'bind', callback: ((_source: this, instance: GObject.Object) => void)): number
    connect_after(signal: 'bind', callback: ((_source: this, instance: GObject.Object) => void)): number
    emit(signal: 'bind', instance: GObject.Object): void
    connect(signal: 'unbind', callback: ((_source: this) => void)): number
    connect_after(signal: 'unbind', callback: ((_source: this) => void)): number
    emit(signal: 'unbind'): void

    // Own methods of Dazzle.SignalGroup

    /**
     * Blocks all signal handlers managed by `self` so they will not
     * be called during any signal emissions. Must be unblocked exactly
     * the same number of times it has been blocked to become active again.
     * 
     * This blocked state will be kept across changes of the target instance.
     * 
     * See: g_signal_handler_block().
     */
    block(): void
    /**
     * Connects `callback` to the signal `detailed_signal`
     * on the target instance of `self`.
     * 
     * See: g_signal_connect_data().
     * @param detailed_signal a string of the form "signal-name::detail"
     * @param c_handler the #GCallback to connect
     * @param notify function to be called when disposing of @self
     * @param flags the flags used to create the signal connection
     */
    connect_data(detailed_signal: string, c_handler: GObject.Callback, notify: GObject.ClosureNotify, flags: GObject.ConnectFlags): void
    /**
     * Connects `callback` to the signal `detailed_signal`
     * on the target instance of `self`.
     * 
     * The instance on which the signal is emitted and `data`
     * will be swapped when calling `callback`.
     * 
     * See: g_signal_connect_swapped().
     * @param detailed_signal a string of the form "signal-name::detail"
     * @param c_handler the #GCallback to connect
     */
    connect_swapped(detailed_signal: string, c_handler: GObject.Callback): void
    /**
     * Gets the target instance used when connecting signals.
     * @returns The target instance.
     */
    get_target<T = GObject.Object>(): T
    /**
     * Sets the target instance used when connecting signals. Any signal
     * that has been registered with dzl_signal_group_connect_object() or
     * similar functions will be connected to this object.
     * 
     * If the target instance was previously set, signals will be
     * disconnected from that object prior to connecting to `target`.
     * @param target The target instance used     when connecting signals.
     */
    set_target(target?: (GObject.Object | null)): void
    /**
     * Unblocks all signal handlers managed by `self` so they will be
     * called again during any signal emissions unless it is blocked
     * again. Must be unblocked exactly the same number of times it
     * has been blocked to become active again.
     * 
     * See: g_signal_handler_unblock().
     */
    unblock(): void
}

module SimpleLabel {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Widget.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
label: string;
    width_chars: number;
    widthChars: number;
    xalign: number;
    }

}

class SimpleLabel extends Gtk.Widget implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.SimpleLabel

    get label(): string;
    set label(val: string);
    get width_chars(): number;
    set width_chars(val: number);
    get widthChars(): number;
    set widthChars(val: number);
    get xalign(): number;
    set xalign(val: number);

    // Constructors of Dazzle.SimpleLabel


constructor(properties?: Partial<SimpleLabel.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](label: string): SimpleLabel;

    // Own methods of Dazzle.SimpleLabel

    get_label(): string
    get_width_chars(): number
    get_xalign(): number
    set_label(label: string): void
    set_width_chars(width_chars: number): void
    set_xalign(xalign: number): void

// Inherited methods
/**
 * Adds a child to `buildable`. `type` is an optional string
 * describing how the child should be added.
 * @param builder a #GtkBuilder
 * @param child child to add
 * @param type kind of child or %NULL
 */
add_child(builder: Gtk.Builder, child: GObject.Object, type?: (string | null)): void
/**
 * Constructs a child of `buildable` with the name `name`.
 * 
 * #GtkBuilder calls this function if a “constructor” has been
 * specified in the UI definition.
 * @param builder #GtkBuilder used to construct this object
 * @param name name of child to construct
 * @returns the constructed child
 */
construct_child<T = GObject.Object>(builder: Gtk.Builder, name: string): T
/**
 * This is similar to gtk_buildable_parser_finished() but is
 * called once for each custom tag handled by the `buildable`.
 * @param builder a #GtkBuilder
 * @param child child object or %NULL for non-child tags
 * @param tagname the name of the tag
 * @param data user data created in custom_tag_start
 */
custom_finished(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string, data?: (any | null)): void
/**
 * This is called at the end of each custom element handled by
 * the buildable.
 * @param builder #GtkBuilder used to construct this object
 * @param child child object or %NULL for non-child tags
 * @param tagname name of tag
 * @param data user data that will be passed in to parser functions
 */
custom_tag_end(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string, data?: (any | null)): void
/**
 * This is called for each unknown element under `<child>`.
 * @param builder a #GtkBuilder used to construct this object
 * @param child child object or %NULL for non-child tags
 * @param tagname name of tag
 * @returns %TRUE if a object has a custom implementation, %FALSE          if it doesn't.
 */
custom_tag_start(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string): [boolean, GLib.MarkupParser, any]
/**
 * Get the internal child called `childname` of the `buildable` object.
 * @param builder a #GtkBuilder
 * @param childname name of child
 * @returns the internal child of the buildable object
 */
get_internal_child<T = GObject.Object>(builder: Gtk.Builder, childname: string): T
/**
 * Gets the name of the `buildable` object.
 * 
 * #GtkBuilder sets the name based on the
 * [GtkBuilder UI definition][BUILDER-UI]
 * used to construct the `buildable`.
 * @returns the name set with gtk_buildable_set_name()
 */
get_name(): string
/**
 * Called when the builder finishes the parsing of a
 * [GtkBuilder UI definition][BUILDER-UI].
 * Note that this will be called once for each time
 * gtk_builder_add_from_file() or gtk_builder_add_from_string()
 * is called on a builder.
 * @param builder a #GtkBuilder
 */
parser_finished(builder: Gtk.Builder): void
/**
 * Sets the property name `name` to `value` on the `buildable` object.
 * @param builder a #GtkBuilder
 * @param name name of property
 * @param value value of property
 */
set_buildable_property(builder: Gtk.Builder, name: string, value: GObject.Value): void
/**
 * Sets the name of the `buildable` object.
 * @param name name to set
 */
set_name(name: string): void
/**
 * Adds a child to `buildable`. `type` is an optional string
 * describing how the child should be added.
 * @param builder a #GtkBuilder
 * @param child child to add
 * @param type kind of child or %NULL
 */
vfunc_add_child(builder: Gtk.Builder, child: GObject.Object, type?: (string | null)): void
/**
 * Constructs a child of `buildable` with the name `name`.
 * 
 * #GtkBuilder calls this function if a “constructor” has been
 * specified in the UI definition.
 * @param builder #GtkBuilder used to construct this object
 * @param name name of child to construct
 */
vfunc_construct_child<T = GObject.Object>(builder: Gtk.Builder, name: string): T
/**
 * This is similar to gtk_buildable_parser_finished() but is
 * called once for each custom tag handled by the `buildable`.
 * @param builder a #GtkBuilder
 * @param child child object or %NULL for non-child tags
 * @param tagname the name of the tag
 * @param data user data created in custom_tag_start
 */
vfunc_custom_finished(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string, data?: (any | null)): void
/**
 * This is called at the end of each custom element handled by
 * the buildable.
 * @param builder #GtkBuilder used to construct this object
 * @param child child object or %NULL for non-child tags
 * @param tagname name of tag
 * @param data user data that will be passed in to parser functions
 */
vfunc_custom_tag_end(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string, data?: (any | null)): void
/**
 * This is called for each unknown element under `<child>`.
 * @param builder a #GtkBuilder used to construct this object
 * @param child child object or %NULL for non-child tags
 * @param tagname name of tag
 */
vfunc_custom_tag_start(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string): [boolean, GLib.MarkupParser, any]
/**
 * Get the internal child called `childname` of the `buildable` object.
 * @param builder a #GtkBuilder
 * @param childname name of child
 */
vfunc_get_internal_child<T = GObject.Object>(builder: Gtk.Builder, childname: string): T
/**
 * Gets the name of the `buildable` object.
 * 
 * #GtkBuilder sets the name based on the
 * [GtkBuilder UI definition][BUILDER-UI]
 * used to construct the `buildable`.
 */
vfunc_get_name(): string
/**
 * Called when the builder finishes the parsing of a
 * [GtkBuilder UI definition][BUILDER-UI].
 * Note that this will be called once for each time
 * gtk_builder_add_from_file() or gtk_builder_add_from_string()
 * is called on a builder.
 * @param builder a #GtkBuilder
 */
vfunc_parser_finished(builder: Gtk.Builder): void
/**
 * Sets the property name `name` to `value` on the `buildable` object.
 * @param builder a #GtkBuilder
 * @param name name of property
 * @param value value of property
 */
vfunc_set_buildable_property(builder: Gtk.Builder, name: string, value: GObject.Value): void
/**
 * Sets the name of the `buildable` object.
 * @param name name to set
 */
vfunc_set_name(name: string): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module SimplePopover {

    // Signal callback interfaces

    interface Activate {
        (text: string): void
    }

    interface Changed {
        (): void
    }

    interface InsertText {
        (position: number, chars: string, n_chars: number): boolean
    }


    // Constructor properties interface

    interface ConstructorProps extends Gtk.Popover.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
button_text: string;
    buttonText: string;
    message: string;
    ready: boolean;
    text: string;
    title: string;
    }

}

class SimplePopover extends Gtk.Popover implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.SimplePopover

    get button_text(): string;
    set button_text(val: string);
    get buttonText(): string;
    set buttonText(val: string);
    get message(): string;
    set message(val: string);
    get ready(): boolean;
    set ready(val: boolean);
    get text(): string;
    set text(val: string);
    get title(): string;
    set title(val: string);

    // Constructors of Dazzle.SimplePopover


constructor(properties?: Partial<SimplePopover.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): SimplePopover;

    // Own signals of Dazzle.SimplePopover

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'activate', callback: ((_source: this, text: string) => void)): number
    connect_after(signal: 'activate', callback: ((_source: this, text: string) => void)): number
    emit(signal: 'activate', text: string): void
    connect(signal: 'changed', callback: ((_source: this) => void)): number
    connect_after(signal: 'changed', callback: ((_source: this) => void)): number
    emit(signal: 'changed'): void
    connect(signal: 'insert-text', callback: ((_source: this, position: number, chars: string, n_chars: number) => boolean)): number
    connect_after(signal: 'insert-text', callback: ((_source: this, position: number, chars: string, n_chars: number) => boolean)): number
    emit(signal: 'insert-text', position: number, chars: string, n_chars: number): void

    // Own virtual methods of Dazzle.SimplePopover

    vfunc_activate(text: string): void
    vfunc_changed(): void
    vfunc_insert_text(position: number, chars: string, n_chars: number): boolean

    // Own methods of Dazzle.SimplePopover

    get_button_text(): string
    get_message(): string
    get_ready(): boolean
    get_text(): string
    get_title(): string
    set_button_text(button_text: string): void
    set_message(message: string): void
    set_ready(ready: boolean): void
    set_text(text: string): void
    set_title(title: string): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module Slider {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Container.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
position: SliderPosition;
    }

}

class Slider extends Gtk.Container implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.Slider

    get position(): SliderPosition;
    set position(val: SliderPosition);

    // Constructors of Dazzle.Slider


constructor(properties?: Partial<Slider.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): Slider;

    // Own methods of Dazzle.Slider

    add_slider(widget: Gtk.Widget, position: SliderPosition): void
    get_position(): SliderPosition
    set_position(position: SliderPosition): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module StackList {

    // Signal callback interfaces

    interface HeaderActivated {
        (object: Gtk.ListBoxRow): void
    }

    interface RowActivated {
        (object: Gtk.ListBoxRow): void
    }


    // Constructor properties interface

    interface ConstructorProps extends Gtk.Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
model: Gio.ListModel;
    }

}

class StackList extends Gtk.Bin implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.StackList

    get model(): Gio.ListModel;

    // Constructors of Dazzle.StackList


constructor(properties?: Partial<StackList.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): StackList;

    // Own signals of Dazzle.StackList

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'header-activated', callback: ((_source: this, object: Gtk.ListBoxRow) => void)): number
    connect_after(signal: 'header-activated', callback: ((_source: this, object: Gtk.ListBoxRow) => void)): number
    emit(signal: 'header-activated', object: Gtk.ListBoxRow): void
    connect(signal: 'row-activated', callback: ((_source: this, object: Gtk.ListBoxRow) => void)): number
    connect_after(signal: 'row-activated', callback: ((_source: this, object: Gtk.ListBoxRow) => void)): number
    emit(signal: 'row-activated', object: Gtk.ListBoxRow): void

    // Own virtual methods of Dazzle.StackList

    vfunc_header_activated(row: Gtk.ListBoxRow): void
    vfunc_row_activated(row: Gtk.ListBoxRow): void

    // Own methods of Dazzle.StackList

    clear(): void
    get_depth(): number
    get_model(): Gio.ListModel
    pop(): void
    push(header: Gtk.Widget, model: Gio.ListModel, create_widget_func: StackListCreateWidgetFunc): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module StateMachine {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps, Gtk.Buildable.ConstructorProps {
state: string;
    }

}

class StateMachine extends GObject.Object implements Gtk.Buildable {

    // Own properties of Dazzle.StateMachine

    get state(): string;
    set state(val: string);

    // Constructors of Dazzle.StateMachine


constructor(properties?: Partial<StateMachine.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): StateMachine;

    // Own methods of Dazzle.StateMachine

    add_binding(state: string, source_object: (any | null), source_property: string, target_object: (any | null), target_property: string, flags: GObject.BindingFlags): void
    add_propertyv(state: string, object: (any | null), property: string, value: GObject.Value): void
    add_style(state: string, widget: Gtk.Widget, style: string): void
    /**
     * Creates a new #GAction with the name of `name`.
     * 
     * Setting the state of this action will toggle the state of the state machine.
     * You should use g_variant_new_string() or similar to create the state.
     * @param name the name of the action.
     * @returns A newly created #GAction.
     */
    create_action(name: string): Gio.Action
    /**
     * Gets the #DzlStateMachine:state property. This is the name of the
     * current state of the machine.
     * @returns The current state of the machine.
     */
    get_state(): string
    /**
     * Checks to see if the current state of the #DzlStateMachine matches `state`.
     * @param state the name of the state to check
     * @returns %TRUE if @self is currently set to @state.
     */
    is_state(state?: (string | null)): boolean
    /**
     * Sets the #DzlStateMachine:state property.
     * 
     * Registered state transformations will be applied during the state
     * transformation.
     * 
     * If the transition results in a cyclic operation, the state will stop at
     * the last state before the cycle was detected.
     * @param state 
     */
    set_state(state: string): void

// Inherited methods
/**
 * Adds a child to `buildable`. `type` is an optional string
 * describing how the child should be added.
 * @param builder a #GtkBuilder
 * @param child child to add
 * @param type kind of child or %NULL
 */
add_child(builder: Gtk.Builder, child: GObject.Object, type?: (string | null)): void
/**
 * Constructs a child of `buildable` with the name `name`.
 * 
 * #GtkBuilder calls this function if a “constructor” has been
 * specified in the UI definition.
 * @param builder #GtkBuilder used to construct this object
 * @param name name of child to construct
 * @returns the constructed child
 */
construct_child<T = GObject.Object>(builder: Gtk.Builder, name: string): T
/**
 * This is similar to gtk_buildable_parser_finished() but is
 * called once for each custom tag handled by the `buildable`.
 * @param builder a #GtkBuilder
 * @param child child object or %NULL for non-child tags
 * @param tagname the name of the tag
 * @param data user data created in custom_tag_start
 */
custom_finished(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string, data?: (any | null)): void
/**
 * This is called at the end of each custom element handled by
 * the buildable.
 * @param builder #GtkBuilder used to construct this object
 * @param child child object or %NULL for non-child tags
 * @param tagname name of tag
 * @param data user data that will be passed in to parser functions
 */
custom_tag_end(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string, data?: (any | null)): void
/**
 * This is called for each unknown element under `<child>`.
 * @param builder a #GtkBuilder used to construct this object
 * @param child child object or %NULL for non-child tags
 * @param tagname name of tag
 * @returns %TRUE if a object has a custom implementation, %FALSE          if it doesn't.
 */
custom_tag_start(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string): [boolean, GLib.MarkupParser, any]
/**
 * Get the internal child called `childname` of the `buildable` object.
 * @param builder a #GtkBuilder
 * @param childname name of child
 * @returns the internal child of the buildable object
 */
get_internal_child<T = GObject.Object>(builder: Gtk.Builder, childname: string): T
/**
 * Gets the name of the `buildable` object.
 * 
 * #GtkBuilder sets the name based on the
 * [GtkBuilder UI definition][BUILDER-UI]
 * used to construct the `buildable`.
 * @returns the name set with gtk_buildable_set_name()
 */
get_name(): string
/**
 * Called when the builder finishes the parsing of a
 * [GtkBuilder UI definition][BUILDER-UI].
 * Note that this will be called once for each time
 * gtk_builder_add_from_file() or gtk_builder_add_from_string()
 * is called on a builder.
 * @param builder a #GtkBuilder
 */
parser_finished(builder: Gtk.Builder): void
/**
 * Sets the property name `name` to `value` on the `buildable` object.
 * @param builder a #GtkBuilder
 * @param name name of property
 * @param value value of property
 */
set_buildable_property(builder: Gtk.Builder, name: string, value: GObject.Value): void
/**
 * Sets the name of the `buildable` object.
 * @param name name to set
 */
set_name(name: string): void
/**
 * Adds a child to `buildable`. `type` is an optional string
 * describing how the child should be added.
 * @param builder a #GtkBuilder
 * @param child child to add
 * @param type kind of child or %NULL
 */
vfunc_add_child(builder: Gtk.Builder, child: GObject.Object, type?: (string | null)): void
/**
 * Constructs a child of `buildable` with the name `name`.
 * 
 * #GtkBuilder calls this function if a “constructor” has been
 * specified in the UI definition.
 * @param builder #GtkBuilder used to construct this object
 * @param name name of child to construct
 */
vfunc_construct_child<T = GObject.Object>(builder: Gtk.Builder, name: string): T
/**
 * This is similar to gtk_buildable_parser_finished() but is
 * called once for each custom tag handled by the `buildable`.
 * @param builder a #GtkBuilder
 * @param child child object or %NULL for non-child tags
 * @param tagname the name of the tag
 * @param data user data created in custom_tag_start
 */
vfunc_custom_finished(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string, data?: (any | null)): void
/**
 * This is called at the end of each custom element handled by
 * the buildable.
 * @param builder #GtkBuilder used to construct this object
 * @param child child object or %NULL for non-child tags
 * @param tagname name of tag
 * @param data user data that will be passed in to parser functions
 */
vfunc_custom_tag_end(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string, data?: (any | null)): void
/**
 * This is called for each unknown element under `<child>`.
 * @param builder a #GtkBuilder used to construct this object
 * @param child child object or %NULL for non-child tags
 * @param tagname name of tag
 */
vfunc_custom_tag_start(builder: Gtk.Builder, child: (GObject.Object | null), tagname: string): [boolean, GLib.MarkupParser, any]
/**
 * Get the internal child called `childname` of the `buildable` object.
 * @param builder a #GtkBuilder
 * @param childname name of child
 */
vfunc_get_internal_child<T = GObject.Object>(builder: Gtk.Builder, childname: string): T
/**
 * Gets the name of the `buildable` object.
 * 
 * #GtkBuilder sets the name based on the
 * [GtkBuilder UI definition][BUILDER-UI]
 * used to construct the `buildable`.
 */
vfunc_get_name(): string
/**
 * Called when the builder finishes the parsing of a
 * [GtkBuilder UI definition][BUILDER-UI].
 * Note that this will be called once for each time
 * gtk_builder_add_from_file() or gtk_builder_add_from_string()
 * is called on a builder.
 * @param builder a #GtkBuilder
 */
vfunc_parser_finished(builder: Gtk.Builder): void
/**
 * Sets the property name `name` to `value` on the `buildable` object.
 * @param builder a #GtkBuilder
 * @param name name of property
 * @param value value of property
 */
vfunc_set_buildable_property(builder: Gtk.Builder, name: string, value: GObject.Value): void
/**
 * Sets the name of the `buildable` object.
 * @param name name to set
 */
vfunc_set_name(name: string): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module Suggestion {

    // Signal callback interfaces

    interface ReplaceTypedText {
        (object: string): string
    }

    interface SuggestSuffix {
        (object: string): string
    }


    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
icon: Gio.Icon;
    icon_name: string;
    iconName: string;
    id: string;
    secondary_icon: Gio.Icon;
    secondaryIcon: Gio.Icon;
    secondary_icon_name: string;
    secondaryIconName: string;
    subtitle: string;
    title: string;
    }

}

class Suggestion extends GObject.Object {

    // Own properties of Dazzle.Suggestion

    get icon(): Gio.Icon;
    get icon_name(): string;
    set icon_name(val: string);
    get iconName(): string;
    set iconName(val: string);
    get id(): string;
    set id(val: string);
    get secondary_icon(): Gio.Icon;
    get secondaryIcon(): Gio.Icon;
    get secondary_icon_name(): string;
    set secondary_icon_name(val: string);
    get secondaryIconName(): string;
    set secondaryIconName(val: string);
    get subtitle(): string;
    set subtitle(val: string);
    get title(): string;
    set title(val: string);

    // Constructors of Dazzle.Suggestion


constructor(properties?: Partial<Suggestion.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): Suggestion;

    // Own signals of Dazzle.Suggestion

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'replace-typed-text', callback: ((_source: this, object: string) => string)): number
    connect_after(signal: 'replace-typed-text', callback: ((_source: this, object: string) => string)): number
    emit(signal: 'replace-typed-text', object: string): void
    connect(signal: 'suggest-suffix', callback: ((_source: this, object: string) => string)): number
    connect_after(signal: 'suggest-suffix', callback: ((_source: this, object: string) => string)): number
    emit(signal: 'suggest-suffix', object: string): void

    // Own virtual methods of Dazzle.Suggestion

    /**
     * Gets the icon for the suggestion, if any.
     */
    vfunc_get_icon(): (Gio.Icon | null)
    /**
     * This function allows subclasses to dynamicly generate content for the
     * suggestion such as may be required when integrating with favicons or
     * similar.
     * 
     * `widget` is provided so that the implementation may determine scale or
     * any other style-specific settings from the style context.
     * @param widget a widget that may contain the surface
     */
    vfunc_get_icon_surface(widget: Gtk.Widget): (cairo.Surface | null)
    /**
     * Gets the secondary icon for the suggestion, if any.
     */
    vfunc_get_secondary_icon(): (Gio.Icon | null)
    /**
     * This function allows subclasses to dynamicly generate content for the
     * suggestion such as may be required when integrating with favicons or
     * similar.
     * 
     * `widget` is provided so that the implementation may determine scale or
     * any other style-specific settings from the style context.
     * @param widget a widget that may contain the surface
     */
    vfunc_get_secondary_icon_surface(widget: Gtk.Widget): (cairo.Surface | null)
    /**
     * This function is meant to be used to replace the text in the entry with text
     * that represents the suggestion most accurately. This happens when the user
     * presses tab while typing a suggestion. For example, if typing "gno" in the
     * entry, you might have a suggest_suffix of "me.org" so that the user sees
     * "gnome.org". But the replace_typed_text might include more data such as
     * "https://gnome.org" as it more closely represents the suggestion.
     * @param typed_text the text that was typed into the entry
     */
    vfunc_replace_typed_text(typed_text: string): (string | null)
    /**
     * This function requests potential text to append to `typed_text` to make it
     * more clear to the user what they will be activating by selecting this
     * suggestion. For example, if they start typing "gno", a potential suggested
     * suffix might be "me.org" to create "gnome.org".
     * @param typed_text The user entered text
     */
    vfunc_suggest_suffix(typed_text: string): (string | null)

    // Own methods of Dazzle.Suggestion

    /**
     * Gets the icon for the suggestion, if any.
     * @returns a #GIcon or %NULL
     */
    get_icon(): (Gio.Icon | null)
    get_icon_name(): string
    /**
     * This function allows subclasses to dynamicly generate content for the
     * suggestion such as may be required when integrating with favicons or
     * similar.
     * 
     * `widget` is provided so that the implementation may determine scale or
     * any other style-specific settings from the style context.
     * @param widget a widget that may contain the surface
     * @returns a #cairo_surface_t or %NULL
     */
    get_icon_surface(widget: Gtk.Widget): (cairo.Surface | null)
    get_id(): string
    /**
     * Gets the secondary icon for the suggestion, if any.
     * @returns a #GIcon or %NULL
     */
    get_secondary_icon(): (Gio.Icon | null)
    get_secondary_icon_name(): string
    /**
     * This function allows subclasses to dynamicly generate content for the
     * suggestion such as may be required when integrating with favicons or
     * similar.
     * 
     * `widget` is provided so that the implementation may determine scale or
     * any other style-specific settings from the style context.
     * @param widget a widget that may contain the surface
     * @returns a #cairo_surface_t or %NULL
     */
    get_secondary_icon_surface(widget: Gtk.Widget): (cairo.Surface | null)
    get_subtitle(): string
    get_title(): string
    /**
     * This function is meant to be used to replace the text in the entry with text
     * that represents the suggestion most accurately. This happens when the user
     * presses tab while typing a suggestion. For example, if typing "gno" in the
     * entry, you might have a suggest_suffix of "me.org" so that the user sees
     * "gnome.org". But the replace_typed_text might include more data such as
     * "https://gnome.org" as it more closely represents the suggestion.
     * @param typed_text the text that was typed into the entry
     * @returns The replacement text to insert into   the entry when "tab" is pressed to complete the insertion.
     */
    replace_typed_text(typed_text: string): (string | null)
    set_icon_name(icon_name: string): void
    set_id(id: string): void
    set_secondary_icon_name(icon_name: string): void
    set_subtitle(subtitle: string): void
    set_title(title: string): void
    /**
     * This function requests potential text to append to `typed_text` to make it
     * more clear to the user what they will be activating by selecting this
     * suggestion. For example, if they start typing "gno", a potential suggested
     * suffix might be "me.org" to create "gnome.org".
     * @param typed_text The user entered text
     * @returns Suffix to append to @typed_text   or %NULL to leave it unchanged.
     */
    suggest_suffix(typed_text: string): (string | null)
}

module SuggestionButton {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Stack.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
button: Gtk.Button;
    entry: SuggestionEntry;
    }

}

class SuggestionButton extends Gtk.Stack implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.SuggestionButton

    get button(): Gtk.Button;
    get entry(): SuggestionEntry;

    // Constructors of Dazzle.SuggestionButton


constructor(properties?: Partial<SuggestionButton.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): SuggestionButton;

    // Own methods of Dazzle.SuggestionButton

    get_button(): Gtk.Button
    get_entry(): SuggestionEntry

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module SuggestionEntry {

    // Signal callback interfaces

    interface Action {
        (object: string, p0: string, p1: string): void
    }

    interface ActivateSuggestion {
        (): void
    }

    interface HideSuggestions {
        (): void
    }

    interface MoveSuggestion {
        (amount: number): void
    }

    interface ShowSuggestions {
        (): void
    }

    interface SuggestionActivated {
        (object: Suggestion): void
    }

    interface SuggestionSelected {
        (suggestion: Suggestion): void
    }


    // Constructor properties interface

    interface ConstructorProps extends Gtk.Entry.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.CellEditable.ConstructorProps, Gtk.Editable.ConstructorProps {
activate_on_single_click: boolean;
    activateOnSingleClick: boolean;
    compact: boolean;
    model: Gio.ListModel;
    suggestion: Suggestion;
    typed_text: string;
    typedText: string;
    }

}

class SuggestionEntry extends Gtk.Entry implements Atk.ImplementorIface, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable {

    // Own properties of Dazzle.SuggestionEntry

    /**
     * The "activate-on-single-click" property denotes if results should be
     * activated simply by clicking on them. You may want to set this to
     * %FALSE if you want the behavior to only select the item.
     */
    get activate_on_single_click(): boolean;
    set activate_on_single_click(val: boolean);
    /**
     * The "activate-on-single-click" property denotes if results should be
     * activated simply by clicking on them. You may want to set this to
     * %FALSE if you want the behavior to only select the item.
     */
    get activateOnSingleClick(): boolean;
    set activateOnSingleClick(val: boolean);
    /**
     * The "compact" property denotes if an alternate style should be used to
     * reduce the width of the rows. This may be ideal in size contrained
     * situations with portrait display.
     */
    get compact(): boolean;
    set compact(val: boolean);
    get model(): Gio.ListModel;
    set model(val: Gio.ListModel);
    /**
     * The "suggestion" property is the currently selected suggestion, if any.
     */
    get suggestion(): Suggestion;
    set suggestion(val: Suggestion);
    get typed_text(): string;
    get typedText(): string;

    // Constructors of Dazzle.SuggestionEntry


constructor(properties?: Partial<SuggestionEntry.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): SuggestionEntry;

    // Own signals of Dazzle.SuggestionEntry

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'action', callback: ((_source: this, object: string, p0: string, p1: string) => void)): number
    connect_after(signal: 'action', callback: ((_source: this, object: string, p0: string, p1: string) => void)): number
    emit(signal: 'action', object: string, p0: string, p1: string): void
    connect(signal: 'activate-suggestion', callback: ((_source: this) => void)): number
    connect_after(signal: 'activate-suggestion', callback: ((_source: this) => void)): number
    emit(signal: 'activate-suggestion'): void
    connect(signal: 'hide-suggestions', callback: ((_source: this) => void)): number
    connect_after(signal: 'hide-suggestions', callback: ((_source: this) => void)): number
    emit(signal: 'hide-suggestions'): void
    connect(signal: 'move-suggestion', callback: ((_source: this, amount: number) => void)): number
    connect_after(signal: 'move-suggestion', callback: ((_source: this, amount: number) => void)): number
    emit(signal: 'move-suggestion', amount: number): void
    connect(signal: 'show-suggestions', callback: ((_source: this) => void)): number
    connect_after(signal: 'show-suggestions', callback: ((_source: this) => void)): number
    emit(signal: 'show-suggestions'): void
    connect(signal: 'suggestion-activated', callback: ((_source: this, object: Suggestion) => void)): number
    connect_after(signal: 'suggestion-activated', callback: ((_source: this, object: Suggestion) => void)): number
    emit(signal: 'suggestion-activated', object: Suggestion): void
    connect(signal: 'suggestion-selected', callback: ((_source: this, suggestion: Suggestion) => void)): number
    connect_after(signal: 'suggestion-selected', callback: ((_source: this, suggestion: Suggestion) => void)): number
    emit(signal: 'suggestion-selected', suggestion: Suggestion): void

    // Own virtual methods of Dazzle.SuggestionEntry

    vfunc_hide_suggestions(): void
    vfunc_move_suggestion(amount: number): void
    vfunc_show_suggestions(): void
    vfunc_suggestion_activated(suggestion: Suggestion): void
    vfunc_suggestion_selected(suggestion: Suggestion): void

    // Own methods of Dazzle.SuggestionEntry

    default_position_func(area: Gdk.Rectangle, is_absolute: boolean, user_data?: (any | null)): void
    get_activate_on_single_click(): boolean
    /**
     * Gets the #DzlSuggestionEntry:compact property.
     * @returns %TRUE if compact-mode is in use.
     */
    get_compact(): boolean
    /**
     * Gets the model being visualized.
     * @returns A #GListModel or %NULL.
     */
    get_model(): (Gio.ListModel | null)
    /**
     * Gets the result display widget for the entry. This is currently
     * always a #DzlSuggestionPopover.
     * @returns a #GtkWidget
     */
    get_popover(): Gtk.Widget
    /**
     * Gets the currently selected suggestion.
     * @returns An #DzlSuggestion or %NULL.
     */
    get_suggestion(): (Suggestion | null)
    get_typed_text(): string
    hide_suggestions(): void
    set_activate_on_single_click(activate_on_single_click: boolean): void
    /**
     * Sets the #DzlSuggestionEntry:compact property.
     * @param compact if compact mode should be used
     */
    set_compact(compact: boolean): void
    set_model(model: Gio.ListModel): void
    /**
     * Sets a position func to position the popover.
     * 
     * In `func,` you should set the height of the rectangle to the maximum height
     * that the popover should be allowed to grow.
     * @param func A function to call to position the popover, or %NULL to set the default.
     * @param func_data_destroy a destroy notify for @func_data
     */
    set_position_func(func?: (SuggestionPositionFunc | null), func_data_destroy?: (GLib.DestroyNotify | null)): void
    set_suggestion(suggestion: Suggestion): void
    /**
     * This is a #DzlSuggestionPositionFunc that can be used to make the suggestion
     * popover the full width of the window. It is similar to what you might find
     * in a web browser.
     * @param area 
     * @param is_absolute 
     * @param user_data 
     */
    window_position_func(area: Gdk.Rectangle, is_absolute: boolean, user_data?: (any | null)): void

// Inherited properties
/**
 * Indicates whether editing on the cell has been canceled.
 */
get editing_canceled(): boolean;
set editing_canceled(val: boolean);
/**
 * Indicates whether editing on the cell has been canceled.
 */
get editingCanceled(): boolean;
set editingCanceled(val: boolean);
get app_paintable(): boolean;
set app_paintable(val: boolean);
get appPaintable(): boolean;
set appPaintable(val: boolean);
get can_default(): boolean;
set can_default(val: boolean);
get canDefault(): boolean;
set canDefault(val: boolean);
get can_focus(): boolean;
set can_focus(val: boolean);
get canFocus(): boolean;
set canFocus(val: boolean);
get composite_child(): boolean;
get compositeChild(): boolean;
/**
 * Whether the widget is double buffered.
 */
get double_buffered(): boolean;
set double_buffered(val: boolean);
/**
 * Whether the widget is double buffered.
 */
get doubleBuffered(): boolean;
set doubleBuffered(val: boolean);
get events(): Gdk.EventMask;
set events(val: Gdk.EventMask);
/**
 * Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
 */
get expand(): boolean;
set expand(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focus_on_click(): boolean;
set focus_on_click(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focusOnClick(): boolean;
set focusOnClick(val: boolean);
/**
 * How to distribute horizontal space if widget gets extra space, see #GtkAlign
 */
get halign(): Gtk.Align;
set halign(val: Gtk.Align);
get has_default(): boolean;
set has_default(val: boolean);
get hasDefault(): boolean;
set hasDefault(val: boolean);
get has_focus(): boolean;
set has_focus(val: boolean);
get hasFocus(): boolean;
set hasFocus(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get has_tooltip(): boolean;
set has_tooltip(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get hasTooltip(): boolean;
set hasTooltip(val: boolean);
get height_request(): number;
set height_request(val: number);
get heightRequest(): number;
set heightRequest(val: number);
/**
 * Whether to expand horizontally. See gtk_widget_set_hexpand().
 */
get hexpand(): boolean;
set hexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpand_set(): boolean;
set hexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpandSet(): boolean;
set hexpandSet(val: boolean);
get is_focus(): boolean;
set is_focus(val: boolean);
get isFocus(): boolean;
set isFocus(val: boolean);
/**
 * Sets all four sides' margin at once. If read, returns max
 * margin on any side.
 */
get margin(): number;
set margin(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_bottom(): number;
set margin_bottom(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginBottom(): number;
set marginBottom(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_end(): number;
set margin_end(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginEnd(): number;
set marginEnd(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_left(): number;
set margin_left(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginLeft(): number;
set marginLeft(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_right(): number;
set margin_right(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginRight(): number;
set marginRight(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_start(): number;
set margin_start(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginStart(): number;
set marginStart(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_top(): number;
set margin_top(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginTop(): number;
set marginTop(val: number);
get name(): string;
set name(val: string);
get no_show_all(): boolean;
set no_show_all(val: boolean);
get noShowAll(): boolean;
set noShowAll(val: boolean);
/**
 * The requested opacity of the widget. See gtk_widget_set_opacity() for
 * more details about window opacity.
 * 
 * Before 3.8 this was only available in GtkWindow
 */
get opacity(): number;
set opacity(val: number);
get parent(): Gtk.Container;
set parent(val: Gtk.Container);
get receives_default(): boolean;
set receives_default(val: boolean);
get receivesDefault(): boolean;
set receivesDefault(val: boolean);
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scale_factor(): number;
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scaleFactor(): number;
get sensitive(): boolean;
set sensitive(val: boolean);
/**
 * The style of the widget, which contains information about how it will look (colors, etc).
 */
get style(): Gtk.Style;
set style(val: Gtk.Style);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_markup(): string;
set tooltip_markup(val: string);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipMarkup(): string;
set tooltipMarkup(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_text(): string;
set tooltip_text(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipText(): string;
set tooltipText(val: string);
/**
 * How to distribute vertical space if widget gets extra space, see #GtkAlign
 */
get valign(): Gtk.Align;
set valign(val: Gtk.Align);
/**
 * Whether to expand vertically. See gtk_widget_set_vexpand().
 */
get vexpand(): boolean;
set vexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpand_set(): boolean;
set vexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpandSet(): boolean;
set vexpandSet(val: boolean);
get visible(): boolean;
set visible(val: boolean);
get width_request(): number;
set width_request(val: number);
get widthRequest(): number;
set widthRequest(val: number);
/**
 * The widget's window if it is realized, %NULL otherwise.
 */
get window(): Gdk.Window;

// Inherited methods
/**
 * Emits the #GtkCellEditable::editing-done signal.
 */
editing_done(): void
/**
 * Emits the #GtkCellEditable::remove-widget signal.
 */
remove_widget(): void
/**
 * Begins editing on a `cell_editable`.
 * 
 * The #GtkCellRenderer for the cell creates and returns a #GtkCellEditable from
 * gtk_cell_renderer_start_editing(), configured for the #GtkCellRenderer type.
 * 
 * gtk_cell_editable_start_editing() can then set up `cell_editable` suitably for
 * editing a cell, e.g. making the Esc key emit #GtkCellEditable::editing-done.
 * 
 * Note that the `cell_editable` is created on-demand for the current edit; its
 * lifetime is temporary and does not persist across other edits and/or cells.
 * @param event The #GdkEvent that began the editing process, or   %NULL if editing was initiated programmatically
 */
start_editing(event?: (Gdk.Event | null)): void
/**
 * Emits the #GtkCellEditable::editing-done signal.
 */
vfunc_editing_done(): void
/**
 * Emits the #GtkCellEditable::remove-widget signal.
 */
vfunc_remove_widget(): void
/**
 * Begins editing on a `cell_editable`.
 * 
 * The #GtkCellRenderer for the cell creates and returns a #GtkCellEditable from
 * gtk_cell_renderer_start_editing(), configured for the #GtkCellRenderer type.
 * 
 * gtk_cell_editable_start_editing() can then set up `cell_editable` suitably for
 * editing a cell, e.g. making the Esc key emit #GtkCellEditable::editing-done.
 * 
 * Note that the `cell_editable` is created on-demand for the current edit; its
 * lifetime is temporary and does not persist across other edits and/or cells.
 * @param event The #GdkEvent that began the editing process, or   %NULL if editing was initiated programmatically
 */
vfunc_start_editing(event?: (Gdk.Event | null)): void
/**
 * Copies the contents of the currently selected content in the editable and
 * puts it on the clipboard.
 */
copy_clipboard(): void
/**
 * Removes the contents of the currently selected content in the editable and
 * puts it on the clipboard.
 */
cut_clipboard(): void
/**
 * Deletes the currently selected text of the editable.
 * This call doesn’t do anything if there is no selected text.
 */
delete_selection(): void
/**
 * Deletes a sequence of characters. The characters that are deleted are
 * those characters at positions from `start_pos` up to, but not including
 * `end_pos`. If `end_pos` is negative, then the characters deleted
 * are those from `start_pos` to the end of the text.
 * 
 * Note that the positions are specified in characters, not bytes.
 * @param start_pos start position
 * @param end_pos end position
 */
delete_text(start_pos: number, end_pos: number): void
/**
 * Retrieves a sequence of characters. The characters that are retrieved
 * are those characters at positions from `start_pos` up to, but not
 * including `end_pos`. If `end_pos` is negative, then the characters
 * retrieved are those characters from `start_pos` to the end of the text.
 * 
 * Note that positions are specified in characters, not bytes.
 * @param start_pos start of text
 * @param end_pos end of text
 * @returns a pointer to the contents of the widget as a      string. This string is allocated by the #GtkEditable      implementation and should be freed by the caller.
 */
get_chars(start_pos: number, end_pos: number): string
/**
 * Retrieves whether `editable` is editable. See
 * gtk_editable_set_editable().
 * @returns %TRUE if @editable is editable.
 */
get_editable(): boolean
/**
 * Retrieves the current position of the cursor relative to the start
 * of the content of the editable.
 * 
 * Note that this position is in characters, not in bytes.
 * @returns the cursor position
 */
get_position(): number
/**
 * Retrieves the selection bound of the editable. start_pos will be filled
 * with the start of the selection and `end_pos` with end. If no text was
 * selected both will be identical and %FALSE will be returned.
 * 
 * Note that positions are specified in characters, not bytes.
 * @returns %TRUE if an area is selected, %FALSE otherwise
 */
get_selection_bounds(): [boolean, number, number]
/**
 * Inserts `new_text_length` bytes of `new_text` into the contents of the
 * widget, at position `position`.
 * 
 * Note that the position is in characters, not in bytes.
 * The function updates `position` to point after the newly inserted text.
 * @param new_text the text to append
 * @param new_text_length the length of the text in bytes, or -1
 * @param position location of the position text will be inserted at
 */
insert_text(new_text: string, new_text_length: number, position: number): number
/**
 * Pastes the content of the clipboard to the current position of the
 * cursor in the editable.
 */
paste_clipboard(): void
/**
 * Selects a region of text. The characters that are selected are
 * those characters at positions from `start_pos` up to, but not
 * including `end_pos`. If `end_pos` is negative, then the
 * characters selected are those characters from `start_pos` to
 * the end of the text.
 * 
 * Note that positions are specified in characters, not bytes.
 * @param start_pos start of region
 * @param end_pos end of region
 */
select_region(start_pos: number, end_pos: number): void
/**
 * Determines if the user can edit the text in the editable
 * widget or not.
 * @param is_editable %TRUE if the user is allowed to edit the text   in the widget
 */
set_editable(is_editable: boolean): void
/**
 * Sets the cursor position in the editable to the given value.
 * 
 * The cursor is displayed before the character with the given (base 0)
 * index in the contents of the editable. The value must be less than or
 * equal to the number of characters in the editable. A value of -1
 * indicates that the position should be set after the last character
 * of the editable. Note that `position` is in characters, not in bytes.
 * @param position the position of the cursor
 */
set_position(position: number): void
vfunc_changed(): void
/**
 * Deletes a sequence of characters. The characters that are deleted are
 * those characters at positions from `start_pos` up to, but not including
 * `end_pos`. If `end_pos` is negative, then the characters deleted
 * are those from `start_pos` to the end of the text.
 * 
 * Note that the positions are specified in characters, not bytes.
 * @param start_pos start position
 * @param end_pos end position
 */
vfunc_delete_text(start_pos: number, end_pos: number): void
/**
 * Deletes a sequence of characters. The characters that are deleted are
 * those characters at positions from `start_pos` up to, but not including
 * `end_pos`. If `end_pos` is negative, then the characters deleted
 * are those from `start_pos` to the end of the text.
 * 
 * Note that the positions are specified in characters, not bytes.
 * @param start_pos start position
 * @param end_pos end position
 */
vfunc_do_delete_text(start_pos: number, end_pos: number): void
/**
 * Inserts `new_text_length` bytes of `new_text` into the contents of the
 * widget, at position `position`.
 * 
 * Note that the position is in characters, not in bytes.
 * The function updates `position` to point after the newly inserted text.
 * @param new_text the text to append
 * @param new_text_length the length of the text in bytes, or -1
 * @param position location of the position text will be inserted at
 */
vfunc_do_insert_text(new_text: string, new_text_length: number, position: number): number
/**
 * Retrieves a sequence of characters. The characters that are retrieved
 * are those characters at positions from `start_pos` up to, but not
 * including `end_pos`. If `end_pos` is negative, then the characters
 * retrieved are those characters from `start_pos` to the end of the text.
 * 
 * Note that positions are specified in characters, not bytes.
 * @param start_pos start of text
 * @param end_pos end of text
 */
vfunc_get_chars(start_pos: number, end_pos: number): string
/**
 * Retrieves the current position of the cursor relative to the start
 * of the content of the editable.
 * 
 * Note that this position is in characters, not in bytes.
 */
vfunc_get_position(): number
/**
 * Retrieves the selection bound of the editable. start_pos will be filled
 * with the start of the selection and `end_pos` with end. If no text was
 * selected both will be identical and %FALSE will be returned.
 * 
 * Note that positions are specified in characters, not bytes.
 */
vfunc_get_selection_bounds(): [boolean, number, number]
/**
 * Inserts `new_text_length` bytes of `new_text` into the contents of the
 * widget, at position `position`.
 * 
 * Note that the position is in characters, not in bytes.
 * The function updates `position` to point after the newly inserted text.
 * @param new_text the text to append
 * @param new_text_length the length of the text in bytes, or -1
 * @param position location of the position text will be inserted at
 */
vfunc_insert_text(new_text: string, new_text_length: number, position: number): number
/**
 * Sets the cursor position in the editable to the given value.
 * 
 * The cursor is displayed before the character with the given (base 0)
 * index in the contents of the editable. The value must be less than or
 * equal to the number of characters in the editable. A value of -1
 * indicates that the position should be set after the last character
 * of the editable. Note that `position` is in characters, not in bytes.
 * @param position the position of the cursor
 */
vfunc_set_position(position: number): void
/**
 * Selects a region of text. The characters that are selected are
 * those characters at positions from `start_pos` up to, but not
 * including `end_pos`. If `end_pos` is negative, then the
 * characters selected are those characters from `start_pos` to
 * the end of the text.
 * 
 * Note that positions are specified in characters, not bytes.
 * @param start_pos start of region
 * @param end_pos end of region
 */
vfunc_set_selection_bounds(start_pos: number, end_pos: number): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
/**
 * For widgets that can be “activated” (buttons, menu items, etc.)
 * this function activates them. Activation is what happens when you
 * press Enter on a widget during key navigation. If `widget` isn't
 * activatable, the function returns %FALSE.
 * @returns %TRUE if the widget was activatable
 */
activate(): boolean
/**
 * Installs an accelerator for this `widget` in `accel_group` that causes
 * `accel_signal` to be emitted if the accelerator is activated.
 * The `accel_group` needs to be added to the widget’s toplevel via
 * gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
 * Accelerators added through this function are not user changeable during
 * runtime. If you want to support accelerators that can be changed by the
 * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
 * gtk_menu_item_set_accel_path() instead.
 * @param accel_signal widget signal to emit on accelerator activation
 * @param accel_group accel group for this widget, added to its toplevel
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @param accel_flags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
 */
add_accelerator(accel_signal: string, accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): void
/**
 * Adds the device events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_device_events() for details.
 * @param device a #GdkDevice
 * @param events an event mask, see #GdkEventMask
 */
add_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Adds the events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_events() and the
 * [input handling overview][event-masks] for details.
 * @param events an event mask, see #GdkEventMask
 */
add_events(events: number): void
/**
 * Adds a widget to the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
 * list of mnemonic labels for the widget is cleared when the
 * widget is destroyed, so the caller must make sure to update
 * its internal state at this point as well, by using a connection
 * to the #GtkWidget::destroy signal or a weak notifier.
 * @param label a #GtkWidget that acts as a mnemonic label for @widget
 */
add_mnemonic_label(label: Gtk.Widget): void
/**
 * Queues an animation frame update and adds a callback to be called
 * before each frame. Until the tick callback is removed, it will be
 * called frequently (usually at the frame rate of the output device
 * or as quickly as the application can be repainted, whichever is
 * slower). For this reason, is most suitable for handling graphics
 * that change every frame or every few frames. The tick callback does
 * not automatically imply a relayout or repaint. If you want a
 * repaint or relayout, and aren’t changing widget properties that
 * would trigger that (for example, changing the text of a #GtkLabel),
 * then you will have to call gtk_widget_queue_resize() or
 * gtk_widget_queue_draw_area() yourself.
 * 
 * gdk_frame_clock_get_frame_time() should generally be used for timing
 * continuous animations and
 * gdk_frame_timings_get_predicted_presentation_time() if you are
 * trying to display isolated frames at particular times.
 * 
 * This is a more convenient alternative to connecting directly to the
 * #GdkFrameClock::update signal of #GdkFrameClock, since you don't
 * have to worry about when a #GdkFrameClock is assigned to a widget.
 * @param callback function to call for updating animations
 * @returns an id for the connection of this callback. Remove the callback     by passing it to gtk_widget_remove_tick_callback()
 */
add_tick_callback(callback: Gtk.TickCallback): number
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 * @returns %TRUE if the accelerator can be activated.
 */
can_activate_accel(signal_id: number): boolean
/**
 * This function is used by custom widget implementations; if you're
 * writing an app, you’d use gtk_widget_grab_focus() to move the focus
 * to a particular widget, and gtk_container_set_focus_chain() to
 * change the focus tab order. So you may want to investigate those
 * functions instead.
 * 
 * gtk_widget_child_focus() is called by containers as the user moves
 * around the window using keyboard shortcuts. `direction` indicates
 * what kind of motion is taking place (up, down, left, right, tab
 * forward, tab backward). gtk_widget_child_focus() emits the
 * #GtkWidget::focus signal; widgets override the default handler
 * for this signal in order to implement appropriate focus behavior.
 * 
 * The default ::focus handler for a widget should return %TRUE if
 * moving in `direction` left the focus on a focusable location inside
 * that widget, and %FALSE if moving in `direction` moved the focus
 * outside the widget. If returning %TRUE, widgets normally
 * call gtk_widget_grab_focus() to place the focus accordingly;
 * if returning %FALSE, they don’t modify the current focus location.
 * @param direction direction of focus movement
 * @returns %TRUE if focus ended up inside @widget
 */
child_focus(direction: Gtk.DirectionType): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
child_notify(child_property: string): void
/**
 * Same as gtk_widget_path(), but always uses the name of a widget’s type,
 * never uses a custom name set with gtk_widget_set_name().
 */
class_path(): [number, string, string]
/**
 * Computes whether a container should give this widget extra space
 * when possible. Containers should check this, rather than
 * looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
 * 
 * This function already checks whether the widget is visible, so
 * visibility does not need to be checked separately. Non-visible
 * widgets are not expanded.
 * 
 * The computed expand value uses either the expand setting explicitly
 * set on the widget itself, or, if none has been explicitly set,
 * the widget may expand if some of its children do.
 * @param orientation expand direction
 * @returns whether widget tree rooted here should be expanded
 */
compute_expand(orientation: Gtk.Orientation): boolean
/**
 * Creates a new #PangoContext with the appropriate font map,
 * font options, font description, and base direction for drawing
 * text for this widget. See also gtk_widget_get_pango_context().
 * @returns the new #PangoContext
 */
create_pango_context(): Pango.Context
/**
 * Creates a new #PangoLayout with the appropriate font map,
 * font description, and base direction for drawing text for
 * this widget.
 * 
 * If you keep a #PangoLayout created in this way around, you need
 * to re-create it when the widget #PangoContext is replaced.
 * This can be tracked by using the #GtkWidget::screen-changed signal
 * on the widget.
 * @param text text to set on the layout (can be %NULL)
 * @returns the new #PangoLayout
 */
create_pango_layout(text?: (string | null)): Pango.Layout
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
destroy(): void
/**
 * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
 * %NULL.  It’s intended to be used as a callback connected to the
 * “destroy” signal of a widget. You connect gtk_widget_destroyed()
 * as a signal handler, and pass the address of your widget variable
 * as user data. Then when the widget is destroyed, the variable will
 * be set to %NULL. Useful for example to avoid multiple copies
 * of the same dialog.
 * @param widget_pointer address of a variable that contains @widget
 */
destroyed(widget_pointer: Gtk.Widget): Gtk.Widget
/**
 * Returns %TRUE if `device` has been shadowed by a GTK+
 * device grab on another widget, so it would stop sending
 * events to `widget`. This may be used in the
 * #GtkWidget::grab-notify signal to check for specific
 * devices. See gtk_device_grab_add().
 * @param device a #GdkDevice
 * @returns %TRUE if there is an ongoing grab on @device          by another #GtkWidget than @widget.
 */
device_is_shadowed(device: Gdk.Device): boolean
/**
 * This function is equivalent to gtk_drag_begin_with_coordinates(),
 * passing -1, -1 as coordinates.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @returns the context for this drag
 */
drag_begin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: (Gdk.Event | null)): Gdk.DragContext
/**
 * Initiates a drag on the source side. The function only needs to be used
 * when the application is starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is %NULL, then %GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used to get information about the drag.
 * 
 * Generally there are three cases when you want to start a drag by hand by
 * calling this function:
 * 
 * 1. During a #GtkWidget::button-press-event handler, if you want to start a drag
 * immediately when the user presses the mouse button.  Pass the `event`
 * that you have in your #GtkWidget::button-press-event handler.
 * 
 * 2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
 * when the mouse moves past a certain threshold distance after a button-press.
 * Pass the `event` that you have in your #GtkWidget::motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).
 * If you really cannot pass a real event, pass %NULL instead.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @param x The initial x coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @param y The initial y coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @returns the context for this drag
 */
drag_begin_with_coordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: (Gdk.Event | null), x: number, y: number): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param start_x X coordinate of start of drag
 * @param start_y Y coordinate of start of drag
 * @param current_x current X coordinate
 * @param current_y current Y coordinate
 * @returns %TRUE if the drag threshold has been passed.
 */
drag_check_threshold(start_x: number, start_y: number, current_x: number, current_y: number): boolean
/**
 * Add the image targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_uri_targets(): void
/**
 * Looks for a match between the supported targets of `context` and the
 * `dest_target_list,` returning the first matching target, otherwise
 * returning %GDK_NONE. `dest_target_list` should usually be the return
 * value from gtk_drag_dest_get_target_list(), but some widgets may
 * have different valid targets for different parts of the widget; in
 * that case, they will have to implement a drag_motion handler that
 * passes the correct target list to this function.
 * @param context drag context
 * @param target_list list of droppable targets, or %NULL to use    gtk_drag_dest_get_target_list (@widget).
 * @returns first target that the source offers     and the dest can accept, or %GDK_NONE
 */
drag_dest_find_target(context: Gdk.DragContext, target_list?: (Gtk.TargetList | null)): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_dest_get_target_list(): (Gtk.TargetList | null)
/**
 * Returns whether the widget has been configured to always
 * emit #GtkWidget::drag-motion signals.
 * @returns %TRUE if the widget always emits   #GtkWidget::drag-motion events
 */
drag_dest_get_track_motion(): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget’s drag-and-drop signals
 * (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget’s #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget::drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget::drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There’s no way to set a default action here, you can use the
 * #GtkWidget::drag-motion callback for that. Here’s an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * 
 * ```c
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of     #GtkTargetEntrys indicating the drop types that this @widget will     accept, or %NULL. Later you can access the list with     gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this @widget.
 */
drag_dest_set(flags: Gtk.DestDefaults, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets this widget as a proxy for drops to another window.
 * @param proxy_window the window to which to forward drag events
 * @param protocol the drag protocol which the @proxy_window accepts   (You can use gdk_drag_get_protocol() to determine this)
 * @param use_coordinates If %TRUE, send the same coordinates to the   destination, because it is an embedded   subwindow.
 */
drag_dest_set_proxy(proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param target_list list of droppable targets, or %NULL for none
 */
drag_dest_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Tells the widget to emit #GtkWidget::drag-motion and
 * #GtkWidget::drag-leave events regardless of the targets and the
 * %GTK_DEST_DEFAULT_MOTION flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param track_motion whether to accept all targets
 */
drag_dest_set_track_motion(track_motion: boolean): void
/**
 * Clears information about a drop destination set with
 * gtk_drag_dest_set(). The widget will no longer receive
 * notification of drags.
 */
drag_dest_unset(): void
/**
 * Gets the data associated with a drag. When the data
 * is received or the retrieval fails, GTK+ will emit a
 * #GtkWidget::drag-data-received signal. Failure of the retrieval
 * is indicated by the length field of the `selection_data`
 * signal parameter being negative. However, when gtk_drag_get_data()
 * is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
 * then the widget will not receive notification of failed
 * drops.
 * @param context the drag context
 * @param target the target (form of the data) to retrieve
 * @param time_ a timestamp for retrieving the data. This will   generally be the time received in a #GtkWidget::drag-motion   or #GtkWidget::drag-drop signal
 */
drag_get_data(context: Gdk.DragContext, target: Gdk.Atom, time_: number): void
/**
 * Highlights a widget as a currently hovered drop target.
 * To end the highlight, call gtk_drag_unhighlight().
 * GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
 */
drag_highlight(): void
/**
 * Add the writable image targets supported by #GtkSelectionData to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_uri_targets(): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_source_get_target_list(): (Gtk.TargetList | null)
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param start_button_mask the bitmask of buttons that can start the drag
 * @param targets the table of targets     that the drag will support, may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
drag_source_set(start_button_mask: Gdk.ModifierType, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to `icon`. See the docs for #GtkIconTheme for more details.
 * @param icon A #GIcon
 */
drag_source_set_icon_gicon(icon: Gio.Icon): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param icon_name name of icon to use
 */
drag_source_set_icon_name(icon_name: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
drag_source_set_icon_pixbuf(pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param stock_id the ID of the stock icon to use
 */
drag_source_set_icon_stock(stock_id: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param target_list list of draggable targets, or %NULL for none
 */
drag_source_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Undoes the effects of gtk_drag_source_set().
 */
drag_source_unset(): void
/**
 * Removes a highlight set by gtk_drag_highlight() from
 * a widget.
 */
drag_unhighlight(): void
/**
 * Draws `widget` to `cr`. The top left corner of the widget will be
 * drawn to the currently set origin point of `cr`.
 * 
 * You should pass a cairo context as `cr` argument that is in an
 * original state. Otherwise the resulting drawing is undefined. For
 * example changing the operator using cairo_set_operator() or the
 * line width using cairo_set_line_width() might have unwanted side
 * effects.
 * You may however change the context’s transform matrix - like with
 * cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
 * region with cairo_clip() prior to calling this function. Also, it
 * is fine to modify the context with cairo_save() and
 * cairo_push_group() prior to calling this function.
 * 
 * Note that special-purpose widgets may contain special code for
 * rendering to the screen and might appear differently on screen
 * and when rendered using gtk_widget_draw().
 * @param cr a cairo context to draw to
 */
draw(cr: cairo.Context): void
/**
 * Ensures that `widget` has a style (`widget->`style).
 * 
 * Not a very useful function; most of the time, if you
 * want the style, the widget is realized, and realized
 * widgets are guaranteed to have a style already.
 */
ensure_style(): void
/**
 * Notifies the user about an input-related error on this widget.
 * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
 * gdk_window_beep(), otherwise it does nothing.
 * 
 * Note that the effect of gdk_window_beep() can be configured in many
 * ways, depending on the windowing backend and the desktop environment
 * or window manager that is used.
 */
error_bell(): void
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 * @returns return from the event signal emission (%TRUE if               the event was handled)
 */
event(event: Gdk.Event): boolean
/**
 * Stops emission of #GtkWidget::child-notify signals on `widget`. The
 * signals are queued until gtk_widget_thaw_child_notify() is called
 * on `widget`.
 * 
 * This is the analogue of g_object_freeze_notify() for child properties.
 */
freeze_child_notify(): void
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 * @returns the #AtkObject associated with @widget
 */
get_accessible(): Atk.Object
/**
 * Retrieves the #GActionGroup that was registered using `prefix`. The resulting
 * #GActionGroup may have been registered to `widget` or any #GtkWidget in its
 * ancestry.
 * 
 * If no action group was found matching `prefix,` then %NULL is returned.
 * @param prefix The “prefix” of the action group.
 * @returns A #GActionGroup or %NULL.
 */
get_action_group(prefix: string): (Gio.ActionGroup | null)
/**
 * Returns the baseline that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function, and when allocating child
 * widgets in #GtkWidget::size_allocate.
 * @returns the baseline of the @widget, or -1 if none
 */
get_allocated_baseline(): number
/**
 * Returns the height that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the height of the @widget
 */
get_allocated_height(): number
/**
 * Retrieves the widget’s allocated size.
 * 
 * This function returns the last values passed to
 * gtk_widget_size_allocate_with_baseline(). The value differs from
 * the size returned in gtk_widget_get_allocation() in that functions
 * like gtk_widget_set_halign() can adjust the allocation, but not
 * the value returned by this function.
 * 
 * If a widget is not visible, its allocated size is 0.
 */
get_allocated_size(): [Gtk.Allocation, number]
/**
 * Returns the width that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the width of the @widget
 */
get_allocated_width(): number
/**
 * Retrieves the widget’s allocation.
 * 
 * Note, when implementing a #GtkContainer: a widget’s allocation will
 * be its “adjusted” allocation, that is, the widget’s parent
 * container typically calls gtk_widget_size_allocate() with an
 * allocation, and that allocation is then adjusted (to handle margin
 * and alignment for example) before assignment to the widget.
 * gtk_widget_get_allocation() returns the adjusted allocation that
 * was actually assigned to the widget. The adjusted allocation is
 * guaranteed to be completely contained within the
 * gtk_widget_size_allocate() allocation, however. So a #GtkContainer
 * is guaranteed that its children stay inside the assigned bounds,
 * but not that they have exactly the bounds the container assigned.
 * There is no way to get the original allocation assigned by
 * gtk_widget_size_allocate(), since it isn’t stored; if a container
 * implementation needs that information it will have to track it itself.
 */
get_allocation(): Gtk.Allocation
/**
 * Gets the first ancestor of `widget` with type `widget_type`. For example,
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
 * the first #GtkBox that’s an ancestor of `widget`. No reference will be
 * added to the returned widget; it should not be unreferenced. See note
 * about checking for a toplevel #GtkWindow in the docs for
 * gtk_widget_get_toplevel().
 * 
 * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
 * considers `widget` to be an ancestor of itself.
 * @param widget_type ancestor type
 * @returns the ancestor widget, or %NULL if not found
 */
get_ancestor(widget_type: GObject.GType): (Gtk.Widget | null)
/**
 * Determines whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * See gtk_widget_set_app_paintable()
 * @returns %TRUE if the widget is app paintable
 */
get_app_paintable(): boolean
/**
 * Determines whether `widget` can be a default widget. See
 * gtk_widget_set_can_default().
 * @returns %TRUE if @widget can be a default widget, %FALSE otherwise
 */
get_can_default(): boolean
/**
 * Determines whether `widget` can own the input focus. See
 * gtk_widget_set_can_focus().
 * @returns %TRUE if @widget can own the input focus, %FALSE otherwise
 */
get_can_focus(): boolean
/**
 * This function is only for use in widget implementations. Obtains
 * `widget->`requisition, unless someone has forced a particular
 * geometry on the widget (e.g. with gtk_widget_set_size_request()),
 * in which case it returns that geometry instead of the widget's
 * requisition.
 * 
 * This function differs from gtk_widget_size_request() in that
 * it retrieves the last size request value from `widget->`requisition,
 * while gtk_widget_size_request() actually calls the "size_request" method
 * on `widget` to compute the size request and fill in `widget->`requisition,
 * and only then returns `widget->`requisition.
 * 
 * Because this function does not call the “size_request” method, it
 * can only be used when you know that `widget->`requisition is
 * up-to-date, that is, gtk_widget_size_request() has been called
 * since the last time a resize was queued. In general, only container
 * implementations have this information; applications should use
 * gtk_widget_size_request().
 */
get_child_requisition(): Gtk.Requisition
/**
 * Gets the value set with gtk_widget_set_child_visible().
 * If you feel a need to use this function, your code probably
 * needs reorganization.
 * 
 * This function is only useful for container implementations and
 * never should be called by an application.
 * @returns %TRUE if the widget is mapped with the parent.
 */
get_child_visible(): boolean
/**
 * Retrieves the widget’s clip area.
 * 
 * The clip area is the area in which all of `widget'`s drawing will
 * happen. Other toolkits call it the bounding box.
 * 
 * Historically, in GTK+ the clip area has been equal to the allocation
 * retrieved via gtk_widget_get_allocation().
 */
get_clip(): Gtk.Allocation
/**
 * Returns the clipboard object for the given selection to
 * be used with `widget`. `widget` must have a #GdkDisplay
 * associated with it, so must be attached to a toplevel
 * window.
 * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
 * @returns the appropriate clipboard object. If no             clipboard already exists, a new one will             be created. Once a clipboard object has             been created, it is persistent for all time.
 */
get_clipboard(selection: Gdk.Atom): Gtk.Clipboard
/**
 * Obtains the composite name of a widget.
 * @returns the composite name of @widget, or %NULL if @widget is not   a composite child. The string should be freed when it is no   longer needed.
 */
get_composite_name(): string
/**
 * Returns whether `device` can interact with `widget` and its
 * children. See gtk_widget_set_device_enabled().
 * @param device a #GdkDevice
 * @returns %TRUE is @device is enabled for @widget
 */
get_device_enabled(device: Gdk.Device): boolean
/**
 * Returns the events mask for the widget corresponding to an specific device. These
 * are the events that the widget will receive when `device` operates on it.
 * @param device a #GdkDevice
 * @returns device event mask for @widget
 */
get_device_events(device: Gdk.Device): Gdk.EventMask
/**
 * Gets the reading direction for a particular widget. See
 * gtk_widget_set_direction().
 * @returns the reading direction for the widget.
 */
get_direction(): Gtk.TextDirection
/**
 * Get the #GdkDisplay for the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow at the top.
 * 
 * In general, you should only create display specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkDisplay for the toplevel for this widget.
 */
get_display(): Gdk.Display
/**
 * Determines whether the widget is double buffered.
 * 
 * See gtk_widget_set_double_buffered()
 * @returns %TRUE if the widget is double buffered
 */
get_double_buffered(): boolean
/**
 * Returns the event mask (see #GdkEventMask) for the widget. These are the
 * events that the widget will receive.
 * 
 * Note: Internally, the widget event mask will be the logical OR of the event
 * mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
 * event mask necessary to cater for every #GtkEventController created for the
 * widget.
 * @returns event mask for @widget
 */
get_events(): number
/**
 * Returns whether the widget should grab focus when it is clicked with the mouse.
 * See gtk_widget_set_focus_on_click().
 * @returns %TRUE if the widget should grab focus when it is clicked with               the mouse.
 */
get_focus_on_click(): boolean
/**
 * Gets the font map that has been set with gtk_widget_set_font_map().
 * @returns A #PangoFontMap, or %NULL
 */
get_font_map(): (Pango.FontMap | null)
/**
 * Returns the #cairo_font_options_t used for Pango rendering. When not set,
 * the defaults font options for the #GdkScreen will be used.
 * @returns the #cairo_font_options_t or %NULL if not set
 */
get_font_options(): (cairo.FontOptions | null)
/**
 * Obtains the frame clock for a widget. The frame clock is a global
 * “ticker” that can be used to drive animations and repaints.  The
 * most common reason to get the frame clock is to call
 * gdk_frame_clock_get_frame_time(), in order to get a time to use for
 * animating. For example you might record the start of the animation
 * with an initial value from gdk_frame_clock_get_frame_time(), and
 * then update the animation by calling
 * gdk_frame_clock_get_frame_time() again during each repaint.
 * 
 * gdk_frame_clock_request_phase() will result in a new frame on the
 * clock, but won’t necessarily repaint any widgets. To repaint a
 * widget, you have to use gtk_widget_queue_draw() which invalidates
 * the widget (thus scheduling it to receive a draw on the next
 * frame). gtk_widget_queue_draw() will also end up requesting a frame
 * on the appropriate frame clock.
 * 
 * A widget’s frame clock will not change while the widget is
 * mapped. Reparenting a widget (which implies a temporary unmap) can
 * change the widget’s frame clock.
 * 
 * Unrealized widgets do not have a frame clock.
 * @returns a #GdkFrameClock, or %NULL if widget is unrealized
 */
get_frame_clock(): (Gdk.FrameClock | null)
/**
 * Gets the value of the #GtkWidget:halign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
 * alignment.
 * @returns the horizontal alignment of @widget
 */
get_halign(): Gtk.Align
/**
 * Returns the current value of the has-tooltip property.  See
 * #GtkWidget:has-tooltip for more information.
 * @returns current value of has-tooltip on @widget.
 */
get_has_tooltip(): boolean
/**
 * Determines whether `widget` has a #GdkWindow of its own. See
 * gtk_widget_set_has_window().
 * @returns %TRUE if @widget has a window, %FALSE otherwise
 */
get_has_window(): boolean
/**
 * Gets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Containers should use gtk_widget_compute_expand() rather than
 * this function, to see whether a widget, or any of its children,
 * has the expand flag set. If any child of a widget wants to
 * expand, the parent may ask to expand also.
 * 
 * This function only looks at the widget’s own hexpand flag, rather
 * than computing whether the entire widget tree rooted at this widget
 * wants to expand.
 * @returns whether hexpand flag is set
 */
get_hexpand(): boolean
/**
 * Gets whether gtk_widget_set_hexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @returns whether hexpand has been explicitly set
 */
get_hexpand_set(): boolean
/**
 * Whether the widget is mapped.
 * @returns %TRUE if the widget is mapped, %FALSE otherwise.
 */
get_mapped(): boolean
/**
 * Gets the value of the #GtkWidget:margin-bottom property.
 * @returns The bottom margin of @widget
 */
get_margin_bottom(): number
/**
 * Gets the value of the #GtkWidget:margin-end property.
 * @returns The end margin of @widget
 */
get_margin_end(): number
/**
 * Gets the value of the #GtkWidget:margin-left property.
 * @returns The left margin of @widget
 */
get_margin_left(): number
/**
 * Gets the value of the #GtkWidget:margin-right property.
 * @returns The right margin of @widget
 */
get_margin_right(): number
/**
 * Gets the value of the #GtkWidget:margin-start property.
 * @returns The start margin of @widget
 */
get_margin_start(): number
/**
 * Gets the value of the #GtkWidget:margin-top property.
 * @returns The top margin of @widget
 */
get_margin_top(): number
/**
 * Returns the modifier mask the `widget’`s windowing system backend
 * uses for a particular purpose.
 * 
 * See gdk_keymap_get_modifier_mask().
 * @param intent the use case for the modifier mask
 * @returns the modifier mask used for @intent.
 */
get_modifier_mask(intent: Gdk.ModifierIntent): Gdk.ModifierType
/**
 * Returns the current modifier style for the widget. (As set by
 * gtk_widget_modify_style().) If no style has previously set, a new
 * #GtkRcStyle will be created with all values unset, and set as the
 * modifier style for the widget. If you make changes to this rc
 * style, you must call gtk_widget_modify_style(), passing in the
 * returned rc style, to make sure that your changes take effect.
 * 
 * Caution: passing the style back to gtk_widget_modify_style() will
 * normally end up destroying it, because gtk_widget_modify_style() copies
 * the passed-in style and sets the copy as the new modifier style,
 * thus dropping any reference to the old modifier style. Add a reference
 * to the modifier style if you want to keep it alive.
 * @returns the modifier style for the widget.     This rc style is owned by the widget. If you want to keep a     pointer to value this around, you must add a refcount using     g_object_ref().
 */
get_modifier_style(): Gtk.RcStyle
/**
 * Retrieves the name of a widget. See gtk_widget_set_name() for the
 * significance of widget names.
 * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
 */
get_name(): string
/**
 * Returns the current value of the #GtkWidget:no-show-all property,
 * which determines whether calls to gtk_widget_show_all()
 * will affect this widget.
 * @returns the current value of the “no-show-all” property.
 */
get_no_show_all(): boolean
/**
 * Fetches the requested opacity for this widget.
 * See gtk_widget_set_opacity().
 * @returns the requested opacity for this widget.
 */
get_opacity(): number
/**
 * Gets a #PangoContext with the appropriate font map, font description,
 * and base direction for this widget. Unlike the context returned
 * by gtk_widget_create_pango_context(), this context is owned by
 * the widget (it can be used until the screen for the widget changes
 * or the widget is removed from its toplevel), and will be updated to
 * match any changes to the widget’s attributes. This can be tracked
 * by using the #GtkWidget::screen-changed signal on the widget.
 * @returns the #PangoContext for the widget.
 */
get_pango_context(): Pango.Context
/**
 * Returns the parent container of `widget`.
 * @returns the parent container of @widget, or %NULL
 */
get_parent(): (Gtk.Widget | null)
/**
 * Gets `widget’`s parent window, or %NULL if it does not have one.
 * @returns the parent window of @widget, or %NULL if it does not have a parent window.
 */
get_parent_window(): (Gdk.Window | null)
/**
 * Returns the #GtkWidgetPath representing `widget,` if the widget
 * is not connected to a toplevel widget, a partial path will be
 * created.
 * @returns The #GtkWidgetPath representing @widget
 */
get_path(): Gtk.WidgetPath
/**
 * Obtains the location of the mouse pointer in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(); and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 */
get_pointer(): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves the minimum and natural size of a widget, taking
 * into account the widget’s preference for height-for-width management.
 * 
 * This is used to retrieve a suitable size by container widgets which do
 * not impose any restrictions on the child placement. It can be used
 * to deduce toplevel window and menu sizes as well as child widgets in
 * free-form containers such as GtkLayout.
 * 
 * Handle with care. Note that the natural height of a height-for-width
 * widget will generally be a smaller size than the minimum height, since the required
 * height for the natural width is generally smaller than the required height for
 * the minimum width.
 * 
 * Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
 * baseline alignment.
 */
get_preferred_size(): [Gtk.Requisition | null, Gtk.Requisition | null]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
get_preferred_width_for_height(height: number): [number, number]
/**
 * Determines whether `widget` is realized.
 * @returns %TRUE if @widget is realized, %FALSE otherwise
 */
get_realized(): boolean
/**
 * Determines whether `widget` is always treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_set_receives_default().
 * @returns %TRUE if @widget acts as the default widget when focused,               %FALSE otherwise
 */
get_receives_default(): boolean
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 * @returns The #GtkSizeRequestMode preferred by @widget.
 */
get_request_mode(): Gtk.SizeRequestMode
/**
 * Retrieves the widget’s requisition.
 * 
 * This function should only be used by widget implementations in
 * order to figure whether the widget’s requisition has actually
 * changed after some internal state change (so that they can call
 * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
 * 
 * Normally, gtk_widget_size_request() should be used.
 */
get_requisition(): Gtk.Requisition
/**
 * Get the root window where this widget is located. This function can
 * only be called after the widget has been added to a widget
 * hierarchy with #GtkWindow at the top.
 * 
 * The root window is useful for such purposes as creating a popup
 * #GdkWindow associated with the window. In general, you should only
 * create display specific resources when a widget has been realized,
 * and you should free those resources when the widget is unrealized.
 * @returns the #GdkWindow root window for the toplevel for this widget.
 */
get_root_window(): Gdk.Window
/**
 * Retrieves the internal scale factor that maps from window coordinates
 * to the actual device pixels. On traditional systems this is 1, on
 * high density outputs, it can be a higher value (typically 2).
 * 
 * See gdk_window_get_scale_factor().
 * @returns the scale factor for @widget
 */
get_scale_factor(): number
/**
 * Get the #GdkScreen from the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow
 * at the top.
 * 
 * In general, you should only create screen specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkScreen for the toplevel for this widget.
 */
get_screen(): Gdk.Screen
/**
 * Returns the widget’s sensitivity (in the sense of returning
 * the value that has been set using gtk_widget_set_sensitive()).
 * 
 * The effective sensitivity of a widget is however determined by both its
 * own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
 * @returns %TRUE if the widget is sensitive
 */
get_sensitive(): boolean
/**
 * Gets the settings object holding the settings used for this widget.
 * 
 * Note that this function can only be called when the #GtkWidget
 * is attached to a toplevel, since the settings object is specific
 * to a particular #GdkScreen.
 * @returns the relevant #GtkSettings object
 */
get_settings(): Gtk.Settings
/**
 * Gets the size request that was explicitly set for the widget using
 * gtk_widget_set_size_request(). A value of -1 stored in `width` or
 * `height` indicates that that dimension has not been set explicitly
 * and the natural requisition of the widget will be used instead. See
 * gtk_widget_set_size_request(). To get the size a widget will
 * actually request, call gtk_widget_get_preferred_size() instead of
 * this function.
 */
get_size_request(): [number, number]
/**
 * Returns the widget’s state. See gtk_widget_set_state().
 * @returns the state of @widget.
 */
get_state(): Gtk.StateType
/**
 * Returns the widget state as a flag set. It is worth mentioning
 * that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
 * returned, that is, also based on parent insensitivity, even if
 * `widget` itself is sensitive.
 * 
 * Also note that if you are looking for a way to obtain the
 * #GtkStateFlags to pass to a #GtkStyleContext method, you
 * should look at gtk_style_context_get_state().
 * @returns The state flags for widget
 */
get_state_flags(): Gtk.StateFlags
/**
 * Simply an accessor function that returns `widget->`style.
 * @returns the widget’s #GtkStyle
 */
get_style(): Gtk.Style
/**
 * Returns the style context associated to `widget`. The returned object is
 * guaranteed to be the same for the lifetime of `widget`.
 * @returns a #GtkStyleContext. This memory is owned by @widget and          must not be freed.
 */
get_style_context(): Gtk.StyleContext
/**
 * Returns %TRUE if `widget` is multiple pointer aware. See
 * gtk_widget_set_support_multidevice() for more information.
 * @returns %TRUE if @widget is multidevice aware.
 */
get_support_multidevice(): boolean
/**
 * Fetch an object build from the template XML for `widget_type` in this `widget` instance.
 * 
 * This will only report children which were previously declared with
 * gtk_widget_class_bind_template_child_full() or one of its
 * variants.
 * 
 * This function is only meant to be called for code which is private to the `widget_type` which
 * declared the child and is meant for language bindings which cannot easily make use
 * of the GObject structure offsets.
 * @param widget_type The #GType to get a template child for
 * @param name The “id” of the child defined in the template XML
 * @returns The object built in the template XML with the id @name
 */
get_template_child<T = GObject.Object>(widget_type: GObject.GType, name: string): T
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_markup(): (string | null)
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_text(): (string | null)
/**
 * Returns the #GtkWindow of the current tooltip. This can be the
 * GtkWindow created by default, or the custom tooltip window set
 * using gtk_widget_set_tooltip_window().
 * @returns The #GtkWindow of the current tooltip.
 */
get_tooltip_window(): Gtk.Window
/**
 * This function returns the topmost widget in the container hierarchy
 * `widget` is a part of. If `widget` has no parent widgets, it will be
 * returned as the topmost widget. No reference will be added to the
 * returned widget; it should not be unreferenced.
 * 
 * Note the difference in behavior vs. gtk_widget_get_ancestor();
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
 * would return
 * %NULL if `widget` wasn’t inside a toplevel window, and if the
 * window was inside a #GtkWindow-derived widget which was in turn
 * inside the toplevel #GtkWindow. While the second case may
 * seem unlikely, it actually happens when a #GtkPlug is embedded
 * inside a #GtkSocket within the same application.
 * 
 * To reliably find the toplevel #GtkWindow, use
 * gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
 * on the result. For instance, to get the title of a widget's toplevel
 * window, one might use:
 * 
 * ```c
 * static const char *
 * get_widget_toplevel_title (GtkWidget *widget)
 * {
 *   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 *   if (GTK_IS_WINDOW (toplevel))
 *     {
 *       return gtk_window_get_title (GTK_WINDOW (toplevel));
 *     }
 * 
 *   return NULL;
 * }
 * ```
 * 
 * @returns the topmost ancestor of @widget, or @widget itself    if there’s no ancestor.
 */
get_toplevel(): Gtk.Widget
/**
 * Gets the value of the #GtkWidget:valign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. If your widget want to support baseline aligned
 * children it must use gtk_widget_get_valign_with_baseline(), or
 * `g_object_get (widget, "valign", &value, NULL)`, which will
 * also report the true value.
 * @returns the vertical alignment of @widget, ignoring baseline alignment
 */
get_valign(): Gtk.Align
/**
 * Gets the value of the #GtkWidget:valign property, including
 * %GTK_ALIGN_BASELINE.
 * @returns the vertical alignment of @widget
 */
get_valign_with_baseline(): Gtk.Align
/**
 * Gets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_get_hexpand() for more detail.
 * @returns whether vexpand flag is set
 */
get_vexpand(): boolean
/**
 * Gets whether gtk_widget_set_vexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * See gtk_widget_get_hexpand_set() for more detail.
 * @returns whether vexpand has been explicitly set
 */
get_vexpand_set(): boolean
/**
 * Determines whether the widget is visible. If you want to
 * take into account whether the widget’s parent is also marked as
 * visible, use gtk_widget_is_visible() instead.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See gtk_widget_set_visible().
 * @returns %TRUE if the widget is visible
 */
get_visible(): boolean
/**
 * Gets the visual that will be used to render `widget`.
 * @returns the visual for @widget
 */
get_visual(): Gdk.Visual
/**
 * Returns the widget’s window if it is realized, %NULL otherwise
 * @returns @widget’s window.
 */
get_window(): (Gdk.Window | null)
/**
 * Makes `widget` the current grabbed widget.
 * 
 * This means that interaction with other widgets in the same
 * application is blocked and mouse as well as keyboard events
 * are delivered to this widget.
 * 
 * If `widget` is not sensitive, it is not set as the current
 * grabbed widget and this function does nothing.
 */
grab_add(): void
/**
 * Causes `widget` to become the default widget. `widget` must be able to be
 * a default widget; typically you would ensure this yourself
 * by calling gtk_widget_set_can_default() with a %TRUE value.
 * The default widget is activated when
 * the user presses Enter in a window. Default widgets must be
 * activatable, that is, gtk_widget_activate() should affect them. Note
 * that #GtkEntry widgets require the “activates-default” property
 * set to %TRUE before they activate the default widget when Enter
 * is pressed and the #GtkEntry is focused.
 */
grab_default(): void
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
grab_focus(): void
/**
 * Removes the grab from the given widget.
 * 
 * You have to pair calls to gtk_grab_add() and gtk_grab_remove().
 * 
 * If `widget` does not have the grab, this function does nothing.
 */
grab_remove(): void
/**
 * Determines whether the widget is currently grabbing events, so it
 * is the only widget receiving input events (keyboard and mouse).
 * 
 * See also gtk_grab_add().
 * @returns %TRUE if the widget is in the grab_widgets stack
 */
has_grab(): boolean
/**
 * Determines if the widget style has been looked up through the rc mechanism.
 * @returns %TRUE if the widget has been looked up through the rc   mechanism, %FALSE otherwise.
 */
has_rc_style(): boolean
/**
 * Checks whether there is a #GdkScreen is associated with
 * this widget. All toplevel widgets have an associated
 * screen, and all widgets added into a hierarchy with a toplevel
 * window at the top.
 * @returns %TRUE if there is a #GdkScreen associated   with the widget.
 */
has_screen(): boolean
/**
 * Determines if the widget should show a visible indication that
 * it has the global input focus. This is a convenience function for
 * use in ::draw handlers that takes into account whether focus
 * indication should currently be shown in the toplevel window of
 * `widget`. See gtk_window_get_focus_visible() for more information
 * about focus indication.
 * 
 * To find out if the widget has the global input focus, use
 * gtk_widget_has_focus().
 * @returns %TRUE if the widget should display a “focus rectangle”
 */
has_visible_focus(): boolean
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
hide(): void
/**
 * Utility function; intended to be connected to the #GtkWidget::delete-event
 * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
 * argument, then returns %TRUE. If connected to ::delete-event, the
 * result is that clicking the close button for a window (on the
 * window frame, top right corner usually) will hide but not destroy
 * the window. By default, GTK+ destroys windows when ::delete-event
 * is received.
 * @returns %TRUE
 */
hide_on_delete(): boolean
/**
 * Returns whether the widget is currently being destroyed.
 * This information can sometimes be used to avoid doing
 * unnecessary work.
 * @returns %TRUE if @widget is being destroyed
 */
in_destruction(): boolean
/**
 * Creates and initializes child widgets defined in templates. This
 * function must be called in the instance initializer for any
 * class which assigned itself a template using gtk_widget_class_set_template()
 * 
 * It is important to call this function in the instance initializer
 * of a #GtkWidget subclass and not in #GObject.constructed() or
 * #GObject.constructor() for two reasons.
 * 
 * One reason is that generally derived widgets will assume that parent
 * class composite widgets have been created in their instance
 * initializers.
 * 
 * Another reason is that when calling g_object_new() on a widget with
 * composite templates, it’s important to build the composite widgets
 * before the construct properties are set. Properties passed to g_object_new()
 * should take precedence over properties set in the private template XML.
 */
init_template(): void
/**
 * Sets an input shape for this widget’s GDK window. This allows for
 * windows which react to mouse click in a nonrectangular region, see
 * gdk_window_input_shape_combine_region() for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
input_shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Inserts `group` into `widget`. Children of `widget` that implement
 * #GtkActionable can then be associated with actions in `group` by
 * setting their “action-name” to
 * `prefix`.`action-name`.
 * 
 * If `group` is %NULL, a previously inserted group for `name` is removed
 * from `widget`.
 * @param name the prefix for actions in @group
 * @param group a #GActionGroup, or %NULL
 */
insert_action_group(name: string, group?: (Gio.ActionGroup | null)): void
/**
 * Computes the intersection of a `widget’`s area and `area,` storing
 * the intersection in `intersection,` and returns %TRUE if there was
 * an intersection.  `intersection` may be %NULL if you’re only
 * interested in whether there was an intersection.
 * @param area a rectangle
 * @returns %TRUE if there was an intersection
 */
intersect(area: Gdk.Rectangle): [boolean, Gdk.Rectangle | null]
/**
 * Determines whether `widget` is somewhere inside `ancestor,` possibly with
 * intermediate containers.
 * @param ancestor another #GtkWidget
 * @returns %TRUE if @ancestor contains @widget as a child,    grandchild, great grandchild, etc.
 */
is_ancestor(ancestor: Gtk.Widget): boolean
/**
 * Whether `widget` can rely on having its alpha channel
 * drawn correctly. On X11 this function returns whether a
 * compositing manager is running for `widget’`s screen.
 * 
 * Please note that the semantics of this call will change
 * in the future if used on a widget that has a composited
 * window in its hierarchy (as set by gdk_window_set_composited()).
 * @returns %TRUE if the widget can rely on its alpha channel being drawn correctly.
 */
is_composited(): boolean
/**
 * Determines whether `widget` can be drawn to. A widget can be drawn
 * to if it is mapped and visible.
 * @returns %TRUE if @widget is drawable, %FALSE otherwise
 */
is_drawable(): boolean
/**
 * Returns the widget’s effective sensitivity, which means
 * it is sensitive itself and also its parent widget is sensitive
 * @returns %TRUE if the widget is effectively sensitive
 */
is_sensitive(): boolean
/**
 * Determines whether `widget` is a toplevel widget.
 * 
 * Currently only #GtkWindow and #GtkInvisible (and out-of-process
 * #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
 * widget.
 * @returns %TRUE if @widget is a toplevel, %FALSE otherwise
 */
is_toplevel(): boolean
/**
 * Determines whether the widget and all its parents are marked as
 * visible.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See also gtk_widget_get_visible() and gtk_widget_set_visible()
 * @returns %TRUE if the widget and all its parents are visible
 */
is_visible(): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 * @returns %TRUE if stopping keyboard navigation is fine, %FALSE               if the emitting widget should try to handle the keyboard               navigation attempt in its parent container(s).
 */
keynav_failed(direction: Gtk.DirectionType): boolean
/**
 * Lists the closures used by `widget` for accelerator group connections
 * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
 * The closures can be used to monitor accelerator changes on `widget,`
 * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
 * #GtkAccelGroup of a closure which can be found out with
 * gtk_accel_group_from_accel_closure().
 * @returns a newly allocated #GList of closures
 */
list_accel_closures(): GObject.Closure[]
/**
 * Retrieves a %NULL-terminated array of strings containing the prefixes of
 * #GActionGroup's available to `widget`.
 * @returns a %NULL-terminated array of strings.
 */
list_action_prefixes(): string[]
/**
 * Returns a newly allocated list of the widgets, normally labels, for
 * which this widget is the target of a mnemonic (see for example,
 * gtk_label_set_mnemonic_widget()).
 * 
 * The widgets in the list are not individually referenced. If you
 * want to iterate through the list and perform actions involving
 * callbacks that might destroy the widgets, you
 * must call `g_list_foreach (result,
 * (GFunc)g_object_ref, NULL)` first, and then unref all the
 * widgets afterwards.
 * @returns the list of  mnemonic labels; free this list  with g_list_free() when you are done with it.
 */
list_mnemonic_labels(): Gtk.Widget[]
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
map(): void
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 * @returns %TRUE if the signal has been handled
 */
mnemonic_activate(group_cycling: boolean): boolean
/**
 * Sets the base color for a widget in a particular state.
 * All other style values are left untouched. The base color
 * is the background color used along with the text color
 * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
 * and #GtkTextView. See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > base color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the base color on that.
 * @param state the state for which to set the base color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_base().
 */
modify_base(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > background color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the background color on that.
 * @param state the state for which to set the background color
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_bg().
 */
modify_bg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the #GtkWidget
 * cursor-color and secondary-cursor-color
 * style properties.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param primary the color to use for primary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_cursor().
 * @param secondary the color to use for secondary cursor (does     not need to be allocated), or %NULL to undo the effect of     previous calls to of gtk_widget_modify_cursor().
 */
modify_cursor(primary?: (Gdk.Color | null), secondary?: (Gdk.Color | null)): void
/**
 * Sets the foreground color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the foreground color
 * @param color the color to assign (does not need to be allocated),     or %NULL to undo the effect of previous calls to     of gtk_widget_modify_fg().
 */
modify_fg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the font to use for a widget.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param font_desc the font description to use, or %NULL     to undo the effect of previous calls to gtk_widget_modify_font()
 */
modify_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Modifies style values on the widget.
 * 
 * Modifications made using this technique take precedence over
 * style values set via an RC file, however, they will be overridden
 * if a style is explicitly set on the widget using gtk_widget_set_style().
 * The #GtkRcStyle-struct is designed so each field can either be
 * set or unset, so it is possible, using this function, to modify some
 * style values and leave the others unchanged.
 * 
 * Note that modifications made with this function are not cumulative
 * with previous calls to gtk_widget_modify_style() or with such
 * functions as gtk_widget_modify_fg(). If you wish to retain
 * previous values, you must first call gtk_widget_get_modifier_style(),
 * make your modifications to the returned style, then call
 * gtk_widget_modify_style() with that style. On the other hand,
 * if you first call gtk_widget_modify_style(), subsequent calls
 * to such functions gtk_widget_modify_fg() will have a cumulative
 * effect with the initial modifications.
 * @param style the #GtkRcStyle-struct holding the style modifications
 */
modify_style(style: Gtk.RcStyle): void
/**
 * Sets the text color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * The text color is the foreground color used along with the
 * base color (see gtk_widget_modify_base()) for widgets such
 * as #GtkEntry and #GtkTextView.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the text color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_text().
 */
modify_text(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color to use for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color().
 * @param state the state for which to set the background color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_background_color()
 */
override_background_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the color to use for a widget.
 * 
 * All other style values are left untouched.
 * 
 * This function does not act recursively. Setting the color of a
 * container does not affect its children. Note that some widgets that
 * you may not think of as containers, for instance #GtkButtons,
 * are actually containers.
 * 
 * This API is mostly meant as a quick way for applications to
 * change a widget appearance. If you are developing a widgets
 * library and intend this change to be themeable, it is better
 * done by setting meaningful CSS classes in your
 * widget/container implementation through gtk_style_context_add_class().
 * 
 * This way, your widget library can install a #GtkCssProvider
 * with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
 * to provide a default styling for those widgets that need so, and
 * this theming may fully overridden by the user’s theme.
 * 
 * Note that for complex widgets this may bring in undesired
 * results (such as uniform background color everywhere), in
 * these cases it is better to fully style such widgets through a
 * #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
 * priority.
 * @param state the state for which to set the color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_color()
 */
override_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the
 * cursor-color and secondary-cursor-color
 * style properties. All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * Note that the underlying properties have the #GdkColor type,
 * so the alpha value in `primary` and `secondary` will be ignored.
 * @param cursor the color to use for primary cursor (does not need to be     allocated), or %NULL to undo the effect of previous calls to     of gtk_widget_override_cursor().
 * @param secondary_cursor the color to use for secondary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_override_cursor().
 */
override_cursor(cursor?: (Gdk.RGBA | null), secondary_cursor?: (Gdk.RGBA | null)): void
/**
 * Sets the font to use for a widget. All other style values are
 * left untouched. See gtk_widget_override_color().
 * @param font_desc the font description to use, or %NULL to undo     the effect of previous calls to gtk_widget_override_font()
 */
override_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Sets a symbolic color for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color() for overriding the foreground
 * or background color.
 * @param name the name of the symbolic color to modify
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to gtk_widget_override_symbolic_color()
 */
override_symbolic_color(name: string, color?: (Gdk.RGBA | null)): void
/**
 * Obtains the full path to `widget`. The path is simply the name of a
 * widget and all its parents in the container hierarchy, separated by
 * periods. The name of a widget comes from
 * gtk_widget_get_name(). Paths are used to apply styles to a widget
 * in gtkrc configuration files. Widget names are the type of the
 * widget by default (e.g. “GtkButton”) or can be set to an
 * application-specific value with gtk_widget_set_name(). By setting
 * the name of a widget, you allow users or theme authors to apply
 * styles to that specific widget in their gtkrc
 * file. `path_reversed_p` fills in the path in reverse order,
 * i.e. starting with `widget’`s name instead of starting with the name
 * of `widget’`s outermost ancestor.
 */
path(): [number, string, string]
/**
 * This function is only for use in widget implementations.
 * 
 * Flags the widget for a rerun of the GtkWidgetClass::size_allocate
 * function. Use this function instead of gtk_widget_queue_resize()
 * when the `widget'`s size request didn't change but it wants to
 * reposition its contents.
 * 
 * An example user of this function is gtk_widget_set_halign().
 */
queue_allocate(): void
/**
 * Mark `widget` as needing to recompute its expand flags. Call
 * this function when setting legacy expand child properties
 * on the child of a container.
 * 
 * See gtk_widget_compute_expand().
 */
queue_compute_expand(): void
/**
 * Equivalent to calling gtk_widget_queue_draw_area() for the
 * entire area of a widget.
 */
queue_draw(): void
/**
 * Convenience function that calls gtk_widget_queue_draw_region() on
 * the region created from the given coordinates.
 * 
 * The region here is specified in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(), and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 * 
 * `width` or `height` may be 0, in this case this function does
 * nothing. Negative values for `width` and `height` are not allowed.
 * @param x x coordinate of upper-left corner of rectangle to redraw
 * @param y y coordinate of upper-left corner of rectangle to redraw
 * @param width width of region to draw
 * @param height height of region to draw
 */
queue_draw_area(x: number, y: number, width: number, height: number): void
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
queue_draw_region(region: cairo.Region): void
/**
 * This function is only for use in widget implementations.
 * Flags a widget to have its size renegotiated; should
 * be called when a widget for some reason has a new size request.
 * For example, when you change the text in a #GtkLabel, #GtkLabel
 * queues a resize to ensure there’s enough space for the new text.
 * 
 * Note that you cannot call gtk_widget_queue_resize() on a widget
 * from inside its implementation of the GtkWidgetClass::size_allocate
 * virtual method. Calls to gtk_widget_queue_resize() from inside
 * GtkWidgetClass::size_allocate will be silently ignored.
 */
queue_resize(): void
/**
 * This function works like gtk_widget_queue_resize(),
 * except that the widget is not invalidated.
 */
queue_resize_no_redraw(): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
realize(): void
/**
 * Computes the intersection of a `widget’`s area and `region,` returning
 * the intersection. The result may be empty, use cairo_region_is_empty() to
 * check.
 * @param region a #cairo_region_t, in the same coordinate system as          @widget->allocation. That is, relative to @widget->window          for widgets which return %FALSE from gtk_widget_get_has_window();          relative to the parent window of @widget->window otherwise.
 * @returns A newly allocated region holding the intersection of @widget     and @region.
 */
region_intersect(region: cairo.Region): cairo.Region
/**
 * Registers a #GdkWindow with the widget and sets it up so that
 * the widget receives events for it. Call gtk_widget_unregister_window()
 * when destroying the window.
 * 
 * Before 3.8 you needed to call gdk_window_set_user_data() directly to set
 * this up. This is now deprecated and you should use gtk_widget_register_window()
 * instead. Old code will keep working as is, although some new features like
 * transparency might not work perfectly.
 * @param window a #GdkWindow
 */
register_window(window: Gdk.Window): void
/**
 * Removes an accelerator from `widget,` previously installed with
 * gtk_widget_add_accelerator().
 * @param accel_group accel group for this widget
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @returns whether an accelerator was installed and could be removed
 */
remove_accelerator(accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType): boolean
/**
 * Removes a widget from the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
 * must have previously been added to the list with
 * gtk_widget_add_mnemonic_label().
 * @param label a #GtkWidget that was previously set as a mnemonic label for         @widget with gtk_widget_add_mnemonic_label().
 */
remove_mnemonic_label(label: Gtk.Widget): void
/**
 * Removes a tick callback previously registered with
 * gtk_widget_add_tick_callback().
 * @param id an id returned by gtk_widget_add_tick_callback()
 */
remove_tick_callback(id: number): void
/**
 * A convenience function that uses the theme settings for `widget`
 * to look up `stock_id` and render it to a pixbuf. `stock_id` should
 * be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size`
 * should be a size such as #GTK_ICON_SIZE_MENU. `detail` should be a
 * string that identifies the widget or code doing the rendering, so
 * that theme engines can special-case rendering for that widget or
 * code.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be
 * freed after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @param detail render detail to pass to theme engine
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon(stock_id: string, size: number, detail?: (string | null)): (GdkPixbuf.Pixbuf | null)
/**
 * A convenience function that uses the theme engine and style
 * settings for `widget` to look up `stock_id` and render it to
 * a pixbuf. `stock_id` should be a stock icon ID such as
 * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
 * such as #GTK_ICON_SIZE_MENU.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be freed
 * after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon_pixbuf(stock_id: string, size: number): (GdkPixbuf.Pixbuf | null)
/**
 * Moves a widget from one #GtkContainer to another, handling reference
 * count issues to avoid destroying the widget.
 * @param new_parent a #GtkContainer to move the widget into
 */
reparent(new_parent: Gtk.Widget): void
/**
 * Reset the styles of `widget` and all descendents, so when
 * they are looked up again, they get the correct values
 * for the currently loaded RC file settings.
 * 
 * This function is not useful for applications.
 */
reset_rc_styles(): void
/**
 * Updates the style context of `widget` and all descendants
 * by updating its widget path. #GtkContainers may want
 * to use this on a child when reordering it in a way that a different
 * style might apply to it. See also gtk_container_get_path_for_child().
 */
reset_style(): void
/**
 * Very rarely-used function. This function is used to emit
 * an expose event on a widget. This function is not normally used
 * directly. The only time it is used is when propagating an expose
 * event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
 * and that is normally done using gtk_container_propagate_draw().
 * 
 * If you want to force an area of a window to be redrawn,
 * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
 * To cause the redraw to be done immediately, follow that call
 * with a call to gdk_window_process_updates().
 * @param event a expose #GdkEvent
 * @returns return from the event signal emission (%TRUE if   the event was handled)
 */
send_expose(event: Gdk.Event): number
/**
 * Sends the focus change `event` to `widget`
 * 
 * This function is not meant to be used by applications. The only time it
 * should be used is when it is necessary for a #GtkWidget to assign focus
 * to a widget that is semantically owned by the first widget even though
 * it’s not a direct child - for instance, a search entry in a floating
 * window similar to the quick search in #GtkTreeView.
 * 
 * An example of its usage is:
 * 
 * 
 * ```c
 *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
 * 
 *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
 *   fevent->focus_change.in = TRUE;
 *   fevent->focus_change.window = _gtk_widget_get_window (widget);
 *   if (fevent->focus_change.window != NULL)
 *     g_object_ref (fevent->focus_change.window);
 * 
 *   gtk_widget_send_focus_change (widget, fevent);
 * 
 *   gdk_event_free (event);
 * ```
 * 
 * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
 * @returns the return value from the event signal emission: %TRUE   if the event was handled, and %FALSE otherwise
 */
send_focus_change(event: Gdk.Event): boolean
/**
 * Given an accelerator group, `accel_group,` and an accelerator path,
 * `accel_path,` sets up an accelerator in `accel_group` so whenever the
 * key binding that is defined for `accel_path` is pressed, `widget`
 * will be activated.  This removes any accelerators (for any
 * accelerator group) installed by previous calls to
 * gtk_widget_set_accel_path(). Associating accelerators with
 * paths allows them to be modified by the user and the modifications
 * to be saved for future use. (See gtk_accel_map_save().)
 * 
 * This function is a low level function that would most likely
 * be used by a menu creation system like #GtkUIManager. If you
 * use #GtkUIManager, setting up accelerator paths will be done
 * automatically.
 * 
 * Even when you you aren’t using #GtkUIManager, if you only want to
 * set up accelerators on menu items gtk_menu_item_set_accel_path()
 * provides a somewhat more convenient interface.
 * 
 * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
 * pass a static string, you can save some memory by interning it first with
 * g_intern_static_string().
 * @param accel_path path used to look up the accelerator
 * @param accel_group a #GtkAccelGroup.
 */
set_accel_path(accel_path?: (string | null), accel_group?: (Gtk.AccelGroup | null)): void
/**
 * Sets the widget’s allocation.  This should not be used
 * directly, but from within a widget’s size_allocate method.
 * 
 * The allocation set should be the “adjusted” or actual
 * allocation. If you’re implementing a #GtkContainer, you want to use
 * gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
 * The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
 * allocation inside gtk_widget_size_allocate() to create an adjusted
 * allocation.
 * @param allocation a pointer to a #GtkAllocation to copy from
 */
set_allocation(allocation: Gtk.Allocation): void
/**
 * Sets whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * This is a hint to the widget and does not affect the behavior of
 * the GTK+ core; many widgets ignore this flag entirely. For widgets
 * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
 * the effect is to suppress default themed drawing of the widget's
 * background. (Children of the widget will still be drawn.) The application
 * is then entirely responsible for drawing the widget background.
 * 
 * Note that the background is still drawn when the widget is mapped.
 * @param app_paintable %TRUE if the application will paint on the widget
 */
set_app_paintable(app_paintable: boolean): void
/**
 * Specifies whether `widget` can be a default widget. See
 * gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param can_default whether or not @widget can be a default widget.
 */
set_can_default(can_default: boolean): void
/**
 * Specifies whether `widget` can own the input focus. See
 * gtk_widget_grab_focus() for actually setting the input focus on a
 * widget.
 * @param can_focus whether or not @widget can own the input focus.
 */
set_can_focus(can_focus: boolean): void
/**
 * Sets whether `widget` should be mapped along with its when its parent
 * is mapped and `widget` has been shown with gtk_widget_show().
 * 
 * The child visibility can be set for widget before it is added to
 * a container with gtk_widget_set_parent(), to avoid mapping
 * children unnecessary before immediately unmapping them. However
 * it will be reset to its default state of %TRUE when the widget
 * is removed from a container.
 * 
 * Note that changing the child visibility of a widget does not
 * queue a resize on the widget. Most of the time, the size of
 * a widget is computed from all visible children, whether or
 * not they are mapped. If this is not the case, the container
 * can queue a resize itself.
 * 
 * This function is only useful for container implementations and
 * never should be called by an application.
 * @param is_visible if %TRUE, @widget should be mapped along with its parent.
 */
set_child_visible(is_visible: boolean): void
/**
 * Sets the widget’s clip.  This must not be used directly,
 * but from within a widget’s size_allocate method.
 * It must be called after gtk_widget_set_allocation() (or after chaining up
 * to the parent class), because that function resets the clip.
 * 
 * The clip set should be the area that `widget` draws on. If `widget` is a
 * #GtkContainer, the area must contain all children's clips.
 * 
 * If this function is not called by `widget` during a ::size-allocate handler,
 * the clip will be set to `widget'`s allocation.
 * @param clip a pointer to a #GtkAllocation to copy from
 */
set_clip(clip: Gtk.Allocation): void
/**
 * Sets a widgets composite name. The widget must be
 * a composite child of its parent; see gtk_widget_push_composite_child().
 * @param name the name to set
 */
set_composite_name(name: string): void
/**
 * Enables or disables a #GdkDevice to interact with `widget`
 * and all its children.
 * 
 * It does so by descending through the #GdkWindow hierarchy
 * and enabling the same mask that is has for core events
 * (i.e. the one that gdk_window_get_events() returns).
 * @param device a #GdkDevice
 * @param enabled whether to enable the device
 */
set_device_enabled(device: Gdk.Device, enabled: boolean): void
/**
 * Sets the device event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive from `device`. Keep
 * in mind that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_device_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with windowless widgets (which return
 * %FALSE from gtk_widget_get_has_window());
 * to get events on those widgets, place them inside a #GtkEventBox
 * and receive events on the event box.
 * @param device a #GdkDevice
 * @param events event mask
 */
set_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Sets the reading direction on a particular widget. This direction
 * controls the primary direction for widgets containing text,
 * and also the direction in which the children of a container are
 * packed. The ability to set the direction is present in order
 * so that correct localization into languages with right-to-left
 * reading directions can be done. Generally, applications will
 * let the default reading direction present, except for containers
 * where the containers are arranged in an order that is explicitly
 * visual rather than logical (such as buttons for text justification).
 * 
 * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
 * set by gtk_widget_set_default_direction() will be used.
 * @param dir the new direction
 */
set_direction(dir: Gtk.TextDirection): void
/**
 * Widgets are double buffered by default; you can use this function
 * to turn off the buffering. “Double buffered” simply means that
 * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
 * automatically around expose events sent to the
 * widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
 * window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
 * buffer to the screen. The result is that users see the window
 * update in one smooth step, and don’t see individual graphics
 * primitives being rendered.
 * 
 * In very simple terms, double buffered widgets don’t flicker,
 * so you would only use this function to turn off double buffering
 * if you had special needs and really knew what you were doing.
 * 
 * Note: if you turn off double-buffering, you have to handle
 * expose events, since even the clearing to the background color or
 * pixmap will not happen automatically (as it is done in
 * gdk_window_begin_draw_frame()).
 * 
 * In 3.10 GTK and GDK have been restructured for translucent drawing. Since
 * then expose events for double-buffered widgets are culled into a single
 * event to the toplevel GDK window. If you now unset double buffering, you
 * will cause a separate rendering pass for every widget. This will likely
 * cause rendering problems - in particular related to stacking - and usually
 * increases rendering times significantly.
 * @param double_buffered %TRUE to double-buffer a widget
 */
set_double_buffered(double_buffered: boolean): void
/**
 * Sets the event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive. Keep in mind
 * that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with widgets that have no window.
 * (See gtk_widget_get_has_window()).  To get events on those widgets,
 * place them inside a #GtkEventBox and receive events on the event
 * box.
 * @param events event mask
 */
set_events(events: number): void
/**
 * Sets whether the widget should grab focus when it is clicked with the mouse.
 * Making mouse clicks not grab focus is useful in places like toolbars where
 * you don’t want the keyboard focus removed from the main area of the
 * application.
 * @param focus_on_click whether the widget should grab focus when clicked with the mouse
 */
set_focus_on_click(focus_on_click: boolean): void
/**
 * Sets the font map to use for Pango rendering. When not set, the widget
 * will inherit the font map from its parent.
 * @param font_map a #PangoFontMap, or %NULL to unset any previously     set font map
 */
set_font_map(font_map?: (Pango.FontMap | null)): void
/**
 * Sets the #cairo_font_options_t used for Pango rendering in this widget.
 * When not set, the default font options for the #GdkScreen will be used.
 * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
 */
set_font_options(options?: (cairo.FontOptions | null)): void
/**
 * Sets the horizontal alignment of `widget`.
 * See the #GtkWidget:halign property.
 * @param align the horizontal alignment
 */
set_halign(align: Gtk.Align): void
/**
 * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
 * #GtkWidget:has-tooltip for more information.
 * @param has_tooltip whether or not @widget has a tooltip.
 */
set_has_tooltip(has_tooltip: boolean): void
/**
 * Specifies whether `widget` has a #GdkWindow of its own. Note that
 * all realized widgets have a non-%NULL “window” pointer
 * (gtk_widget_get_window() never returns a %NULL window when a widget
 * is realized), but for many of them it’s actually the #GdkWindow of
 * one of its parent widgets. Widgets that do not create a %window for
 * themselves in #GtkWidget::realize must announce this by
 * calling this function with `has_window` = %FALSE.
 * 
 * This function should only be called by widget implementations,
 * and they should call it in their init() function.
 * @param has_window whether or not @widget has a window.
 */
set_has_window(has_window: boolean): void
/**
 * Sets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Call this function to set the expand flag if you would like your
 * widget to become larger horizontally when the window has extra
 * room.
 * 
 * By default, widgets automatically expand if any of their children
 * want to expand. (To see if a widget will automatically expand given
 * its current children and state, call gtk_widget_compute_expand(). A
 * container can decide how the expandability of children affects the
 * expansion of the container by overriding the compute_expand virtual
 * method on #GtkWidget.).
 * 
 * Setting hexpand explicitly with this function will override the
 * automatic expand behavior.
 * 
 * This function forces the widget to expand or not to expand,
 * regardless of children.  The override occurs because
 * gtk_widget_set_hexpand() sets the hexpand-set property (see
 * gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
 * value to be used, rather than looking at children and widget state.
 * @param expand whether to expand
 */
set_hexpand(expand: boolean): void
/**
 * Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
 * be used.
 * 
 * The hexpand-set property will be set automatically when you call
 * gtk_widget_set_hexpand() to set hexpand, so the most likely
 * reason to use this function would be to unset an explicit expand
 * flag.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @param set value for hexpand-set property
 */
set_hexpand_set(set: boolean): void
/**
 * Marks the widget as being mapped.
 * 
 * This function should only ever be called in a derived widget's
 * “map” or “unmap” implementation.
 * @param mapped %TRUE to mark the widget as mapped
 */
set_mapped(mapped: boolean): void
/**
 * Sets the bottom margin of `widget`.
 * See the #GtkWidget:margin-bottom property.
 * @param margin the bottom margin
 */
set_margin_bottom(margin: number): void
/**
 * Sets the end margin of `widget`.
 * See the #GtkWidget:margin-end property.
 * @param margin the end margin
 */
set_margin_end(margin: number): void
/**
 * Sets the left margin of `widget`.
 * See the #GtkWidget:margin-left property.
 * @param margin the left margin
 */
set_margin_left(margin: number): void
/**
 * Sets the right margin of `widget`.
 * See the #GtkWidget:margin-right property.
 * @param margin the right margin
 */
set_margin_right(margin: number): void
/**
 * Sets the start margin of `widget`.
 * See the #GtkWidget:margin-start property.
 * @param margin the start margin
 */
set_margin_start(margin: number): void
/**
 * Sets the top margin of `widget`.
 * See the #GtkWidget:margin-top property.
 * @param margin the top margin
 */
set_margin_top(margin: number): void
/**
 * Widgets can be named, which allows you to refer to them from a
 * CSS file. You can apply a style to widgets with a particular name
 * in the CSS file. See the documentation for the CSS syntax (on the
 * same page as the docs for #GtkStyleContext).
 * 
 * Note that the CSS syntax has certain special characters to delimit
 * and represent elements in a selector (period, #, >, *...), so using
 * these will make your widget impossible to match by name. Any combination
 * of alphanumeric symbols, dashes and underscores will suffice.
 * @param name name for the widget
 */
set_name(name: string): void
/**
 * Sets the #GtkWidget:no-show-all property, which determines whether
 * calls to gtk_widget_show_all() will affect this widget.
 * 
 * This is mostly for use in constructing widget hierarchies with externally
 * controlled visibility, see #GtkUIManager.
 * @param no_show_all the new value for the “no-show-all” property
 */
set_no_show_all(no_show_all: boolean): void
/**
 * Request the `widget` to be rendered partially transparent,
 * with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
 * are clamped to the [0,1] range.).
 * This works on both toplevel widget, and child widgets, although there
 * are some limitations:
 * 
 * For toplevel widgets this depends on the capabilities of the windowing
 * system. On X11 this has any effect only on X screens with a compositing manager
 * running. See gtk_widget_is_composited(). On Windows it should work
 * always, although setting a window’s opacity after the window has been
 * shown causes it to flicker once on Windows.
 * 
 * For child widgets it doesn’t work if any affected widget has a native window, or
 * disables double buffering.
 * @param opacity desired opacity, between 0 and 1
 */
set_opacity(opacity: number): void
/**
 * This function is useful only when implementing subclasses of
 * #GtkContainer.
 * Sets the container as the parent of `widget,` and takes care of
 * some details such as updating the state and style of the child
 * to reflect its new location. The opposite function is
 * gtk_widget_unparent().
 * @param parent parent container
 */
set_parent(parent: Gtk.Widget): void
/**
 * Sets a non default parent window for `widget`.
 * 
 * For #GtkWindow classes, setting a `parent_window` effects whether
 * the window is a toplevel window or can be embedded into other
 * widgets.
 * 
 * For #GtkWindow classes, this needs to be called before the
 * window is realized.
 * @param parent_window the new parent window.
 */
set_parent_window(parent_window: Gdk.Window): void
/**
 * Marks the widget as being realized. This function must only be
 * called after all #GdkWindows for the `widget` have been created
 * and registered.
 * 
 * This function should only ever be called in a derived widget's
 * “realize” or “unrealize” implementation.
 * @param realized %TRUE to mark the widget as realized
 */
set_realized(realized: boolean): void
/**
 * Specifies whether `widget` will be treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param receives_default whether or not @widget can be a default widget.
 */
set_receives_default(receives_default: boolean): void
/**
 * Sets whether the entire widget is queued for drawing when its size
 * allocation changes. By default, this setting is %TRUE and
 * the entire widget is redrawn on every size change. If your widget
 * leaves the upper left unchanged when made bigger, turning this
 * setting off will improve performance.
 * 
 * Note that for widgets where gtk_widget_get_has_window() is %FALSE
 * setting this flag to %FALSE turns off all allocation on resizing:
 * the widget will not even redraw if its position changes; this is to
 * allow containers that don’t draw anything to avoid excess
 * invalidations. If you set this flag on a widget with no window that
 * does draw on `widget->`window, you are
 * responsible for invalidating both the old and new allocation of the
 * widget when the widget is moved and responsible for invalidating
 * regions newly when the widget increases size.
 * @param redraw_on_allocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
 */
set_redraw_on_allocate(redraw_on_allocate: boolean): void
/**
 * Sets the sensitivity of a widget. A widget is sensitive if the user
 * can interact with it. Insensitive widgets are “grayed out” and the
 * user can’t interact with them. Insensitive widgets are known as
 * “inactive”, “disabled”, or “ghosted” in some other toolkits.
 * @param sensitive %TRUE to make the widget sensitive
 */
set_sensitive(sensitive: boolean): void
/**
 * Sets the minimum size of a widget; that is, the widget’s size
 * request will be at least `width` by `height`. You can use this
 * function to force a widget to be larger than it normally would be.
 * 
 * In most cases, gtk_window_set_default_size() is a better choice for
 * toplevel windows than this function; setting the default size will
 * still allow users to shrink the window. Setting the size request
 * will force them to leave the window at least as large as the size
 * request. When dealing with window sizes,
 * gtk_window_set_geometry_hints() can be a useful function as well.
 * 
 * Note the inherent danger of setting any fixed size - themes,
 * translations into other languages, different fonts, and user action
 * can all change the appropriate size for a given widget. So, it's
 * basically impossible to hardcode a size that will always be
 * correct.
 * 
 * The size request of a widget is the smallest size a widget can
 * accept while still functioning well and drawing itself correctly.
 * However in some strange cases a widget may be allocated less than
 * its requested size, and in many cases a widget may be allocated more
 * space than it requested.
 * 
 * If the size request in a given direction is -1 (unset), then
 * the “natural” size request of the widget will be used instead.
 * 
 * The size request set here does not include any margin from the
 * #GtkWidget properties margin-left, margin-right, margin-top, and
 * margin-bottom, but it does include pretty much all other padding
 * or border properties set by any subclass of #GtkWidget.
 * @param width width @widget should request, or -1 to unset
 * @param height height @widget should request, or -1 to unset
 */
set_size_request(width: number, height: number): void
/**
 * This function is for use in widget implementations. Sets the state
 * of a widget (insensitive, prelighted, etc.) Usually you should set
 * the state using wrapper functions such as gtk_widget_set_sensitive().
 * @param state new state for @widget
 */
set_state(state: Gtk.StateType): void
/**
 * This function is for use in widget implementations. Turns on flag
 * values in the current widget state (insensitive, prelighted, etc.).
 * 
 * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
 * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
 * direction, use gtk_widget_set_direction().
 * 
 * It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
 * will be propagated down to all non-internal children if `widget` is a
 * #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
 * down to all #GtkContainer children by different means than turning on the
 * state flag down the hierarchy, both gtk_widget_get_state_flags() and
 * gtk_widget_is_sensitive() will make use of these.
 * @param flags State flags to turn on
 * @param clear Whether to clear state before turning on @flags
 */
set_state_flags(flags: Gtk.StateFlags, clear: boolean): void
/**
 * Used to set the #GtkStyle for a widget (`widget->`style). Since
 * GTK 3, this function does nothing, the passed in style is ignored.
 * @param style a #GtkStyle, or %NULL to remove the effect     of a previous call to gtk_widget_set_style() and go back to     the default style
 */
set_style(style?: (Gtk.Style | null)): void
/**
 * Enables or disables multiple pointer awareness. If this setting is %TRUE,
 * `widget` will start receiving multiple, per device enter/leave events. Note
 * that if custom #GdkWindows are created in #GtkWidget::realize,
 * gdk_window_set_support_multidevice() will have to be called manually on them.
 * @param support_multidevice %TRUE to support input from multiple devices.
 */
set_support_multidevice(support_multidevice: boolean): void
/**
 * Sets `markup` as the contents of the tooltip, which is marked up with
 *  the [Pango text markup language][PangoMarkupFormat].
 * 
 * This function will take care of setting #GtkWidget:has-tooltip to %TRUE
 * and of the default handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-markup property and
 * gtk_tooltip_set_markup().
 * @param markup the contents of the tooltip for @widget, or %NULL
 */
set_tooltip_markup(markup?: (string | null)): void
/**
 * Sets `text` as the contents of the tooltip. This function will take
 * care of setting #GtkWidget:has-tooltip to %TRUE and of the default
 * handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
 * @param text the contents of the tooltip for @widget
 */
set_tooltip_text(text?: (string | null)): void
/**
 * Replaces the default window used for displaying
 * tooltips with `custom_window`. GTK+ will take care of showing and
 * hiding `custom_window` at the right moment, to behave likewise as
 * the default tooltip window. If `custom_window` is %NULL, the default
 * tooltip window will be used.
 * @param custom_window a #GtkWindow, or %NULL
 */
set_tooltip_window(custom_window?: (Gtk.Window | null)): void
/**
 * Sets the vertical alignment of `widget`.
 * See the #GtkWidget:valign property.
 * @param align the vertical alignment
 */
set_valign(align: Gtk.Align): void
/**
 * Sets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_set_hexpand() for more detail.
 * @param expand whether to expand
 */
set_vexpand(expand: boolean): void
/**
 * Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
 * be used.
 * 
 * See gtk_widget_set_hexpand_set() for more detail.
 * @param set value for vexpand-set property
 */
set_vexpand_set(set: boolean): void
/**
 * Sets the visibility state of `widget`. Note that setting this to
 * %TRUE doesn’t mean the widget is actually viewable, see
 * gtk_widget_get_visible().
 * 
 * This function simply calls gtk_widget_show() or gtk_widget_hide()
 * but is nicer to use when the visibility of the widget depends on
 * some condition.
 * @param visible whether the widget should be shown or not
 */
set_visible(visible: boolean): void
/**
 * Sets the visual that should be used for by widget and its children for
 * creating #GdkWindows. The visual must be on the same #GdkScreen as
 * returned by gtk_widget_get_screen(), so handling the
 * #GtkWidget::screen-changed signal is necessary.
 * 
 * Setting a new `visual` will not cause `widget` to recreate its windows,
 * so you should call this function before `widget` is realized.
 * @param visual visual to be used or %NULL to unset a previous one
 */
set_visual(visual?: (Gdk.Visual | null)): void
/**
 * Sets a widget’s window. This function should only be used in a
 * widget’s #GtkWidget::realize implementation. The %window passed is
 * usually either new window created with gdk_window_new(), or the
 * window of its parent widget as returned by
 * gtk_widget_get_parent_window().
 * 
 * Widgets must indicate whether they will create their own #GdkWindow
 * by calling gtk_widget_set_has_window(). This is usually done in the
 * widget’s init() function.
 * 
 * Note that this function does not add any reference to `window`.
 * @param window a #GdkWindow
 */
set_window(window: Gdk.Window): void
/**
 * Sets a shape for this widget’s GDK window. This allows for
 * transparent windows etc., see gdk_window_shape_combine_region()
 * for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
show_all(): void
/**
 * Shows a widget. If the widget is an unmapped toplevel widget
 * (i.e. a #GtkWindow that has not yet been shown), enter the main
 * loop and wait for the window to actually be mapped. Be careful;
 * because the main loop is running, anything can happen during
 * this function.
 */
show_now(): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
size_allocate(allocation: Gtk.Allocation): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size,
 * position and (optionally) baseline to their child widgets.
 * 
 * In this function, the allocation and baseline may be adjusted. It
 * will be forced to a 1x1 minimum size, and the
 * adjust_size_allocation virtual and adjust_baseline_allocation
 * methods on the child will be used to adjust the allocation and
 * baseline. Standard adjustments include removing the widget's
 * margins, and applying the widget’s #GtkWidget:halign and
 * #GtkWidget:valign properties.
 * 
 * If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
 * baseline argument is ignored and -1 is used instead.
 * @param allocation position and size to be allocated to @widget
 * @param baseline The baseline of the child, or -1
 */
size_allocate_with_baseline(allocation: Gtk.Allocation, baseline: number): void
/**
 * This function is typically used when implementing a #GtkContainer
 * subclass.  Obtains the preferred size of a widget. The container
 * uses this information to arrange its child widgets and decide what
 * size allocations to give them with gtk_widget_size_allocate().
 * 
 * You can also call this function from an application, with some
 * caveats. Most notably, getting a size request requires the widget
 * to be associated with a screen, because font information may be
 * needed. Multihead-aware applications should keep this in mind.
 * 
 * Also remember that the size request is not necessarily the size
 * a widget will actually be allocated.
 */
size_request(): Gtk.Requisition
/**
 * This function attaches the widget’s #GtkStyle to the widget's
 * #GdkWindow. It is a replacement for
 * 
 * 
 * ```
 * widget->style = gtk_style_attach (widget->style, widget->window);
 * ```
 * 
 * 
 * and should only ever be called in a derived widget’s “realize”
 * implementation which does not chain up to its parent class'
 * “realize” implementation, because one of the parent classes
 * (finally #GtkWidget) would attach the style itself.
 */
style_attach(): void
/**
 * Gets the value of a style property of `widget`.
 * @param property_name the name of a style property
 * @param value location to return the property value
 */
style_get_property(property_name: string, value: GObject.Value): void
/**
 * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
 * This causes all queued #GtkWidget::child-notify signals on `widget` to be
 * emitted.
 */
thaw_child_notify(): void
/**
 * Translate coordinates relative to `src_widget’`s allocation to coordinates
 * relative to `dest_widget’`s allocations. In order to perform this
 * operation, both widgets must be realized, and must share a common
 * toplevel.
 * @param dest_widget a #GtkWidget
 * @param src_x X position relative to @src_widget
 * @param src_y Y position relative to @src_widget
 * @returns %FALSE if either widget was not realized, or there   was no common ancestor. In this case, nothing is stored in   *@dest_x and *@dest_y. Otherwise %TRUE.
 */
translate_coordinates(dest_widget: Gtk.Widget, src_x: number, src_y: number): [boolean, number, number]
/**
 * Triggers a tooltip query on the display where the toplevel of `widget`
 * is located. See gtk_tooltip_trigger_tooltip_query() for more
 * information.
 */
trigger_tooltip_query(): void
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
unmap(): void
/**
 * This function is only for use in widget implementations.
 * Should be called by implementations of the remove method
 * on #GtkContainer, to dissociate a child from the container.
 */
unparent(): void
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
unrealize(): void
/**
 * Unregisters a #GdkWindow from the widget that was previously set up with
 * gtk_widget_register_window(). You need to call this when the window is
 * no longer used by the widget, such as when you destroy it.
 * @param window a #GdkWindow
 */
unregister_window(window: Gdk.Window): void
/**
 * This function is for use in widget implementations. Turns off flag
 * values for the current widget state (insensitive, prelighted, etc.).
 * See gtk_widget_set_state_flags().
 * @param flags State flags to turn off
 */
unset_state_flags(flags: Gtk.StateFlags): void
vfunc_adjust_baseline_allocation(baseline: number): void
vfunc_adjust_baseline_request(minimum_baseline: number, natural_baseline: number): void
vfunc_adjust_size_allocation(orientation: Gtk.Orientation, minimum_size: number, natural_size: number, allocated_pos: number, allocated_size: number): void
vfunc_adjust_size_request(orientation: Gtk.Orientation, minimum_size: number, natural_size: number): void
vfunc_button_press_event(event: Gdk.EventButton): boolean
vfunc_button_release_event(event: Gdk.EventButton): boolean
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 */
vfunc_can_activate_accel(signal_id: number): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
vfunc_child_notify(child_property: GObject.ParamSpec): void
vfunc_composited_changed(): void
vfunc_compute_expand(hexpand_p: boolean, vexpand_p: boolean): void
vfunc_configure_event(event: Gdk.EventConfigure): boolean
vfunc_damage_event(event: Gdk.EventExpose): boolean
vfunc_delete_event(event: Gdk.EventAny): boolean
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
vfunc_destroy(): void
vfunc_destroy_event(event: Gdk.EventAny): boolean
vfunc_direction_changed(previous_direction: Gtk.TextDirection): void
vfunc_dispatch_child_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_drag_begin(context: Gdk.DragContext): void
vfunc_drag_data_delete(context: Gdk.DragContext): void
vfunc_drag_data_get(context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_data_received(context: Gdk.DragContext, x: number, y: number, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_drop(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_drag_end(context: Gdk.DragContext): void
vfunc_drag_failed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
vfunc_drag_leave(context: Gdk.DragContext, time_: number): void
vfunc_drag_motion(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_draw(cr: cairo.Context): boolean
vfunc_enter_notify_event(event: Gdk.EventCrossing): boolean
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 */
vfunc_event(event: Gdk.Event): boolean
vfunc_focus(direction: Gtk.DirectionType): boolean
vfunc_focus_in_event(event: Gdk.EventFocus): boolean
vfunc_focus_out_event(event: Gdk.EventFocus): boolean
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 */
vfunc_get_accessible(): Atk.Object
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
vfunc_get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
vfunc_get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
vfunc_get_preferred_width_for_height(height: number): [number, number]
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 */
vfunc_get_request_mode(): Gtk.SizeRequestMode
vfunc_grab_broken_event(event: Gdk.EventGrabBroken): boolean
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
vfunc_grab_focus(): void
vfunc_grab_notify(was_grabbed: boolean): void
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
vfunc_hide(): void
vfunc_hierarchy_changed(previous_toplevel: Gtk.Widget): void
vfunc_key_press_event(event: Gdk.EventKey): boolean
vfunc_key_release_event(event: Gdk.EventKey): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 */
vfunc_keynav_failed(direction: Gtk.DirectionType): boolean
vfunc_leave_notify_event(event: Gdk.EventCrossing): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
vfunc_map(): void
vfunc_map_event(event: Gdk.EventAny): boolean
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 */
vfunc_mnemonic_activate(group_cycling: boolean): boolean
vfunc_motion_notify_event(event: Gdk.EventMotion): boolean
vfunc_move_focus(direction: Gtk.DirectionType): void
vfunc_parent_set(previous_parent: Gtk.Widget): void
vfunc_popup_menu(): boolean
vfunc_property_notify_event(event: Gdk.EventProperty): boolean
vfunc_proximity_in_event(event: Gdk.EventProximity): boolean
vfunc_proximity_out_event(event: Gdk.EventProximity): boolean
vfunc_query_tooltip(x: number, y: number, keyboard_tooltip: boolean, tooltip: Gtk.Tooltip): boolean
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
vfunc_queue_draw_region(region: cairo.Region): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
vfunc_realize(): void
vfunc_screen_changed(previous_screen: Gdk.Screen): void
vfunc_scroll_event(event: Gdk.EventScroll): boolean
vfunc_selection_clear_event(event: Gdk.EventSelection): boolean
vfunc_selection_get(selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_selection_notify_event(event: Gdk.EventSelection): boolean
vfunc_selection_received(selection_data: Gtk.SelectionData, time_: number): void
vfunc_selection_request_event(event: Gdk.EventSelection): boolean
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
vfunc_show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
vfunc_show_all(): void
vfunc_show_help(help_type: Gtk.WidgetHelpType): boolean
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
vfunc_size_allocate(allocation: Gtk.Allocation): void
vfunc_state_changed(previous_state: Gtk.StateType): void
vfunc_state_flags_changed(previous_state_flags: Gtk.StateFlags): void
vfunc_style_set(previous_style: Gtk.Style): void
vfunc_style_updated(): void
vfunc_touch_event(event: Gdk.EventTouch): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
vfunc_unmap(): void
vfunc_unmap_event(event: Gdk.EventAny): boolean
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
vfunc_unrealize(): void
vfunc_visibility_notify_event(event: Gdk.EventVisibility): boolean
vfunc_window_state_event(event: Gdk.EventWindowState): boolean
}

module SuggestionEntryBuffer {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.EntryBuffer.ConstructorProps {
suggestion: Suggestion;
    }

}

class SuggestionEntryBuffer extends Gtk.EntryBuffer {

    // Own properties of Dazzle.SuggestionEntryBuffer

    get suggestion(): Suggestion;
    set suggestion(val: Suggestion);

    // Constructors of Dazzle.SuggestionEntryBuffer


constructor(properties?: Partial<SuggestionEntryBuffer.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): SuggestionEntryBuffer;

    // Own methods of Dazzle.SuggestionEntryBuffer

    clear(): void
    commit(): void
    /**
     * Gets the #DzlSuggestion that is the current "preview suffix" of the
     * text in the entry.
     * @returns An #DzlSuggestion or %NULL.
     */
    get_suggestion(): (Suggestion | null)
    get_typed_length(): number
    get_typed_text(): string
    /**
     * Sets the current suggestion for the entry buffer.
     * 
     * The suggestion is used to get a potential suffix for the current entry
     * text. This allows the entry to show "preview text" after the entered
     * text for what might be inserted should they activate the current item.
     * @param suggestion An #DzlSuggestion or %NULL
     */
    set_suggestion(suggestion?: (Suggestion | null)): void
}

module SuggestionPopover {

    // Signal callback interfaces

    interface SuggestionActivated {
        (object: Suggestion): void
    }


    // Constructor properties interface

    interface ConstructorProps extends Gtk.Window.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
model: Suggestion;
    relative_to: Gtk.Widget;
    relativeTo: Gtk.Widget;
    selected: Suggestion;
    subtitle_ellipsize: Pango.EllipsizeMode;
    subtitleEllipsize: Pango.EllipsizeMode;
    title_ellipsize: Pango.EllipsizeMode;
    titleEllipsize: Pango.EllipsizeMode;
    }

}

class SuggestionPopover extends Gtk.Window implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.SuggestionPopover

    get model(): Suggestion;
    set model(val: Suggestion);
    get relative_to(): Gtk.Widget;
    set relative_to(val: Gtk.Widget);
    get relativeTo(): Gtk.Widget;
    set relativeTo(val: Gtk.Widget);
    get selected(): Suggestion;
    set selected(val: Suggestion);
    get subtitle_ellipsize(): Pango.EllipsizeMode;
    set subtitle_ellipsize(val: Pango.EllipsizeMode);
    get subtitleEllipsize(): Pango.EllipsizeMode;
    set subtitleEllipsize(val: Pango.EllipsizeMode);
    get title_ellipsize(): Pango.EllipsizeMode;
    set title_ellipsize(val: Pango.EllipsizeMode);
    get titleEllipsize(): Pango.EllipsizeMode;
    set titleEllipsize(val: Pango.EllipsizeMode);

    // Constructors of Dazzle.SuggestionPopover


constructor(properties?: Partial<SuggestionPopover.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): SuggestionPopover;

    // Own signals of Dazzle.SuggestionPopover

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'suggestion-activated', callback: ((_source: this, object: Suggestion) => void)): number
    connect_after(signal: 'suggestion-activated', callback: ((_source: this, object: Suggestion) => void)): number
    emit(signal: 'suggestion-activated', object: Suggestion): void

    // Own methods of Dazzle.SuggestionPopover

    activate_selected(): void
    /**
     * Gets the model being visualized.
     * @returns A #GListModel or %NULL.
     */
    get_model(): (Gio.ListModel | null)
    get_relative_to(): (Gtk.Widget | null)
    /**
     * Gets the currently selected suggestion.
     * @returns An #DzlSuggestion or %NULL.
     */
    get_selected(): (Suggestion | null)
    move_by(amount: number): void
    popdown(): void
    popup(): void
    set_model(model: Gio.ListModel): void
    set_relative_to(widget: Gtk.Widget): void
    set_selected(suggestion: Suggestion): void

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module SuggestionRow {

    // Constructor properties interface

    interface ConstructorProps extends ListBoxRow.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Actionable.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.Orientable.ConstructorProps {
orientation: Gtk.Orientation;
    suggestion: Suggestion;
    }

}

class SuggestionRow extends ListBoxRow implements Atk.ImplementorIface, Gtk.Actionable, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Dazzle.SuggestionRow

    get orientation(): Gtk.Orientation;
    set orientation(val: Gtk.Orientation);
    get suggestion(): Suggestion;
    set suggestion(val: Suggestion);

    // Constructors of Dazzle.SuggestionRow


constructor(properties?: Partial<SuggestionRow.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): SuggestionRow;

    // Own methods of Dazzle.SuggestionRow

    /**
     * Gets the suggestion to be displayed.
     * @returns An #DzlSuggestion
     */
    get_suggestion(): Suggestion
    set_suggestion(suggestion: Suggestion): void

// Inherited properties
get app_paintable(): boolean;
set app_paintable(val: boolean);
get appPaintable(): boolean;
set appPaintable(val: boolean);
get can_default(): boolean;
set can_default(val: boolean);
get canDefault(): boolean;
set canDefault(val: boolean);
get can_focus(): boolean;
set can_focus(val: boolean);
get canFocus(): boolean;
set canFocus(val: boolean);
get composite_child(): boolean;
get compositeChild(): boolean;
/**
 * Whether the widget is double buffered.
 */
get double_buffered(): boolean;
set double_buffered(val: boolean);
/**
 * Whether the widget is double buffered.
 */
get doubleBuffered(): boolean;
set doubleBuffered(val: boolean);
get events(): Gdk.EventMask;
set events(val: Gdk.EventMask);
/**
 * Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
 */
get expand(): boolean;
set expand(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focus_on_click(): boolean;
set focus_on_click(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focusOnClick(): boolean;
set focusOnClick(val: boolean);
/**
 * How to distribute horizontal space if widget gets extra space, see #GtkAlign
 */
get halign(): Gtk.Align;
set halign(val: Gtk.Align);
get has_default(): boolean;
set has_default(val: boolean);
get hasDefault(): boolean;
set hasDefault(val: boolean);
get has_focus(): boolean;
set has_focus(val: boolean);
get hasFocus(): boolean;
set hasFocus(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get has_tooltip(): boolean;
set has_tooltip(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get hasTooltip(): boolean;
set hasTooltip(val: boolean);
get height_request(): number;
set height_request(val: number);
get heightRequest(): number;
set heightRequest(val: number);
/**
 * Whether to expand horizontally. See gtk_widget_set_hexpand().
 */
get hexpand(): boolean;
set hexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpand_set(): boolean;
set hexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpandSet(): boolean;
set hexpandSet(val: boolean);
get is_focus(): boolean;
set is_focus(val: boolean);
get isFocus(): boolean;
set isFocus(val: boolean);
/**
 * Sets all four sides' margin at once. If read, returns max
 * margin on any side.
 */
get margin(): number;
set margin(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_bottom(): number;
set margin_bottom(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginBottom(): number;
set marginBottom(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_end(): number;
set margin_end(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginEnd(): number;
set marginEnd(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_left(): number;
set margin_left(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginLeft(): number;
set marginLeft(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_right(): number;
set margin_right(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginRight(): number;
set marginRight(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_start(): number;
set margin_start(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginStart(): number;
set marginStart(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_top(): number;
set margin_top(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginTop(): number;
set marginTop(val: number);
get name(): string;
set name(val: string);
get no_show_all(): boolean;
set no_show_all(val: boolean);
get noShowAll(): boolean;
set noShowAll(val: boolean);
/**
 * The requested opacity of the widget. See gtk_widget_set_opacity() for
 * more details about window opacity.
 * 
 * Before 3.8 this was only available in GtkWindow
 */
get opacity(): number;
set opacity(val: number);
get parent(): Gtk.Container;
set parent(val: Gtk.Container);
get receives_default(): boolean;
set receives_default(val: boolean);
get receivesDefault(): boolean;
set receivesDefault(val: boolean);
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scale_factor(): number;
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scaleFactor(): number;
get sensitive(): boolean;
set sensitive(val: boolean);
/**
 * The style of the widget, which contains information about how it will look (colors, etc).
 */
get style(): Gtk.Style;
set style(val: Gtk.Style);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_markup(): string;
set tooltip_markup(val: string);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipMarkup(): string;
set tooltipMarkup(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_text(): string;
set tooltip_text(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipText(): string;
set tooltipText(val: string);
/**
 * How to distribute vertical space if widget gets extra space, see #GtkAlign
 */
get valign(): Gtk.Align;
set valign(val: Gtk.Align);
/**
 * Whether to expand vertically. See gtk_widget_set_vexpand().
 */
get vexpand(): boolean;
set vexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpand_set(): boolean;
set vexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpandSet(): boolean;
set vexpandSet(val: boolean);
get visible(): boolean;
set visible(val: boolean);
get width_request(): number;
set width_request(val: number);
get widthRequest(): number;
set widthRequest(val: number);
/**
 * The widget's window if it is realized, %NULL otherwise.
 */
get window(): Gdk.Window;

// Inherited methods
/**
 * Retrieves the orientation of the `orientable`.
 * @returns the orientation of the @orientable.
 */
get_orientation(): Gtk.Orientation
/**
 * Sets the orientation of the `orientable`.
 * @param orientation the orientable’s new orientation.
 */
set_orientation(orientation: Gtk.Orientation): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
/**
 * For widgets that can be “activated” (buttons, menu items, etc.)
 * this function activates them. Activation is what happens when you
 * press Enter on a widget during key navigation. If `widget` isn't
 * activatable, the function returns %FALSE.
 * @returns %TRUE if the widget was activatable
 */
activate(): boolean
/**
 * Installs an accelerator for this `widget` in `accel_group` that causes
 * `accel_signal` to be emitted if the accelerator is activated.
 * The `accel_group` needs to be added to the widget’s toplevel via
 * gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
 * Accelerators added through this function are not user changeable during
 * runtime. If you want to support accelerators that can be changed by the
 * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
 * gtk_menu_item_set_accel_path() instead.
 * @param accel_signal widget signal to emit on accelerator activation
 * @param accel_group accel group for this widget, added to its toplevel
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @param accel_flags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
 */
add_accelerator(accel_signal: string, accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): void
/**
 * Adds the device events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_device_events() for details.
 * @param device a #GdkDevice
 * @param events an event mask, see #GdkEventMask
 */
add_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Adds the events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_events() and the
 * [input handling overview][event-masks] for details.
 * @param events an event mask, see #GdkEventMask
 */
add_events(events: number): void
/**
 * Adds a widget to the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
 * list of mnemonic labels for the widget is cleared when the
 * widget is destroyed, so the caller must make sure to update
 * its internal state at this point as well, by using a connection
 * to the #GtkWidget::destroy signal or a weak notifier.
 * @param label a #GtkWidget that acts as a mnemonic label for @widget
 */
add_mnemonic_label(label: Gtk.Widget): void
/**
 * Queues an animation frame update and adds a callback to be called
 * before each frame. Until the tick callback is removed, it will be
 * called frequently (usually at the frame rate of the output device
 * or as quickly as the application can be repainted, whichever is
 * slower). For this reason, is most suitable for handling graphics
 * that change every frame or every few frames. The tick callback does
 * not automatically imply a relayout or repaint. If you want a
 * repaint or relayout, and aren’t changing widget properties that
 * would trigger that (for example, changing the text of a #GtkLabel),
 * then you will have to call gtk_widget_queue_resize() or
 * gtk_widget_queue_draw_area() yourself.
 * 
 * gdk_frame_clock_get_frame_time() should generally be used for timing
 * continuous animations and
 * gdk_frame_timings_get_predicted_presentation_time() if you are
 * trying to display isolated frames at particular times.
 * 
 * This is a more convenient alternative to connecting directly to the
 * #GdkFrameClock::update signal of #GdkFrameClock, since you don't
 * have to worry about when a #GdkFrameClock is assigned to a widget.
 * @param callback function to call for updating animations
 * @returns an id for the connection of this callback. Remove the callback     by passing it to gtk_widget_remove_tick_callback()
 */
add_tick_callback(callback: Gtk.TickCallback): number
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 * @returns %TRUE if the accelerator can be activated.
 */
can_activate_accel(signal_id: number): boolean
/**
 * This function is used by custom widget implementations; if you're
 * writing an app, you’d use gtk_widget_grab_focus() to move the focus
 * to a particular widget, and gtk_container_set_focus_chain() to
 * change the focus tab order. So you may want to investigate those
 * functions instead.
 * 
 * gtk_widget_child_focus() is called by containers as the user moves
 * around the window using keyboard shortcuts. `direction` indicates
 * what kind of motion is taking place (up, down, left, right, tab
 * forward, tab backward). gtk_widget_child_focus() emits the
 * #GtkWidget::focus signal; widgets override the default handler
 * for this signal in order to implement appropriate focus behavior.
 * 
 * The default ::focus handler for a widget should return %TRUE if
 * moving in `direction` left the focus on a focusable location inside
 * that widget, and %FALSE if moving in `direction` moved the focus
 * outside the widget. If returning %TRUE, widgets normally
 * call gtk_widget_grab_focus() to place the focus accordingly;
 * if returning %FALSE, they don’t modify the current focus location.
 * @param direction direction of focus movement
 * @returns %TRUE if focus ended up inside @widget
 */
child_focus(direction: Gtk.DirectionType): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
child_notify(child_property: string): void
child_notify(...args: never[]): any
/**
 * Same as gtk_widget_path(), but always uses the name of a widget’s type,
 * never uses a custom name set with gtk_widget_set_name().
 */
class_path(): [number, string, string]
/**
 * Computes whether a container should give this widget extra space
 * when possible. Containers should check this, rather than
 * looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
 * 
 * This function already checks whether the widget is visible, so
 * visibility does not need to be checked separately. Non-visible
 * widgets are not expanded.
 * 
 * The computed expand value uses either the expand setting explicitly
 * set on the widget itself, or, if none has been explicitly set,
 * the widget may expand if some of its children do.
 * @param orientation expand direction
 * @returns whether widget tree rooted here should be expanded
 */
compute_expand(orientation: Gtk.Orientation): boolean
/**
 * Creates a new #PangoContext with the appropriate font map,
 * font options, font description, and base direction for drawing
 * text for this widget. See also gtk_widget_get_pango_context().
 * @returns the new #PangoContext
 */
create_pango_context(): Pango.Context
/**
 * Creates a new #PangoLayout with the appropriate font map,
 * font description, and base direction for drawing text for
 * this widget.
 * 
 * If you keep a #PangoLayout created in this way around, you need
 * to re-create it when the widget #PangoContext is replaced.
 * This can be tracked by using the #GtkWidget::screen-changed signal
 * on the widget.
 * @param text text to set on the layout (can be %NULL)
 * @returns the new #PangoLayout
 */
create_pango_layout(text?: (string | null)): Pango.Layout
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
destroy(): void
/**
 * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
 * %NULL.  It’s intended to be used as a callback connected to the
 * “destroy” signal of a widget. You connect gtk_widget_destroyed()
 * as a signal handler, and pass the address of your widget variable
 * as user data. Then when the widget is destroyed, the variable will
 * be set to %NULL. Useful for example to avoid multiple copies
 * of the same dialog.
 * @param widget_pointer address of a variable that contains @widget
 */
destroyed(widget_pointer: Gtk.Widget): Gtk.Widget
/**
 * Returns %TRUE if `device` has been shadowed by a GTK+
 * device grab on another widget, so it would stop sending
 * events to `widget`. This may be used in the
 * #GtkWidget::grab-notify signal to check for specific
 * devices. See gtk_device_grab_add().
 * @param device a #GdkDevice
 * @returns %TRUE if there is an ongoing grab on @device          by another #GtkWidget than @widget.
 */
device_is_shadowed(device: Gdk.Device): boolean
/**
 * This function is equivalent to gtk_drag_begin_with_coordinates(),
 * passing -1, -1 as coordinates.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @returns the context for this drag
 */
drag_begin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: (Gdk.Event | null)): Gdk.DragContext
/**
 * Initiates a drag on the source side. The function only needs to be used
 * when the application is starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is %NULL, then %GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used to get information about the drag.
 * 
 * Generally there are three cases when you want to start a drag by hand by
 * calling this function:
 * 
 * 1. During a #GtkWidget::button-press-event handler, if you want to start a drag
 * immediately when the user presses the mouse button.  Pass the `event`
 * that you have in your #GtkWidget::button-press-event handler.
 * 
 * 2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
 * when the mouse moves past a certain threshold distance after a button-press.
 * Pass the `event` that you have in your #GtkWidget::motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).
 * If you really cannot pass a real event, pass %NULL instead.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @param x The initial x coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @param y The initial y coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @returns the context for this drag
 */
drag_begin_with_coordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: (Gdk.Event | null), x: number, y: number): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param start_x X coordinate of start of drag
 * @param start_y Y coordinate of start of drag
 * @param current_x current X coordinate
 * @param current_y current Y coordinate
 * @returns %TRUE if the drag threshold has been passed.
 */
drag_check_threshold(start_x: number, start_y: number, current_x: number, current_y: number): boolean
/**
 * Add the image targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_uri_targets(): void
/**
 * Looks for a match between the supported targets of `context` and the
 * `dest_target_list,` returning the first matching target, otherwise
 * returning %GDK_NONE. `dest_target_list` should usually be the return
 * value from gtk_drag_dest_get_target_list(), but some widgets may
 * have different valid targets for different parts of the widget; in
 * that case, they will have to implement a drag_motion handler that
 * passes the correct target list to this function.
 * @param context drag context
 * @param target_list list of droppable targets, or %NULL to use    gtk_drag_dest_get_target_list (@widget).
 * @returns first target that the source offers     and the dest can accept, or %GDK_NONE
 */
drag_dest_find_target(context: Gdk.DragContext, target_list?: (Gtk.TargetList | null)): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_dest_get_target_list(): (Gtk.TargetList | null)
/**
 * Returns whether the widget has been configured to always
 * emit #GtkWidget::drag-motion signals.
 * @returns %TRUE if the widget always emits   #GtkWidget::drag-motion events
 */
drag_dest_get_track_motion(): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget’s drag-and-drop signals
 * (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget’s #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget::drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget::drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There’s no way to set a default action here, you can use the
 * #GtkWidget::drag-motion callback for that. Here’s an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * 
 * ```c
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of     #GtkTargetEntrys indicating the drop types that this @widget will     accept, or %NULL. Later you can access the list with     gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this @widget.
 */
drag_dest_set(flags: Gtk.DestDefaults, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets this widget as a proxy for drops to another window.
 * @param proxy_window the window to which to forward drag events
 * @param protocol the drag protocol which the @proxy_window accepts   (You can use gdk_drag_get_protocol() to determine this)
 * @param use_coordinates If %TRUE, send the same coordinates to the   destination, because it is an embedded   subwindow.
 */
drag_dest_set_proxy(proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param target_list list of droppable targets, or %NULL for none
 */
drag_dest_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Tells the widget to emit #GtkWidget::drag-motion and
 * #GtkWidget::drag-leave events regardless of the targets and the
 * %GTK_DEST_DEFAULT_MOTION flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param track_motion whether to accept all targets
 */
drag_dest_set_track_motion(track_motion: boolean): void
/**
 * Clears information about a drop destination set with
 * gtk_drag_dest_set(). The widget will no longer receive
 * notification of drags.
 */
drag_dest_unset(): void
/**
 * Gets the data associated with a drag. When the data
 * is received or the retrieval fails, GTK+ will emit a
 * #GtkWidget::drag-data-received signal. Failure of the retrieval
 * is indicated by the length field of the `selection_data`
 * signal parameter being negative. However, when gtk_drag_get_data()
 * is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
 * then the widget will not receive notification of failed
 * drops.
 * @param context the drag context
 * @param target the target (form of the data) to retrieve
 * @param time_ a timestamp for retrieving the data. This will   generally be the time received in a #GtkWidget::drag-motion   or #GtkWidget::drag-drop signal
 */
drag_get_data(context: Gdk.DragContext, target: Gdk.Atom, time_: number): void
/**
 * Highlights a widget as a currently hovered drop target.
 * To end the highlight, call gtk_drag_unhighlight().
 * GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
 */
drag_highlight(): void
/**
 * Add the writable image targets supported by #GtkSelectionData to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_uri_targets(): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_source_get_target_list(): (Gtk.TargetList | null)
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param start_button_mask the bitmask of buttons that can start the drag
 * @param targets the table of targets     that the drag will support, may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
drag_source_set(start_button_mask: Gdk.ModifierType, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to `icon`. See the docs for #GtkIconTheme for more details.
 * @param icon A #GIcon
 */
drag_source_set_icon_gicon(icon: Gio.Icon): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param icon_name name of icon to use
 */
drag_source_set_icon_name(icon_name: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
drag_source_set_icon_pixbuf(pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param stock_id the ID of the stock icon to use
 */
drag_source_set_icon_stock(stock_id: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param target_list list of draggable targets, or %NULL for none
 */
drag_source_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Undoes the effects of gtk_drag_source_set().
 */
drag_source_unset(): void
/**
 * Removes a highlight set by gtk_drag_highlight() from
 * a widget.
 */
drag_unhighlight(): void
/**
 * Draws `widget` to `cr`. The top left corner of the widget will be
 * drawn to the currently set origin point of `cr`.
 * 
 * You should pass a cairo context as `cr` argument that is in an
 * original state. Otherwise the resulting drawing is undefined. For
 * example changing the operator using cairo_set_operator() or the
 * line width using cairo_set_line_width() might have unwanted side
 * effects.
 * You may however change the context’s transform matrix - like with
 * cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
 * region with cairo_clip() prior to calling this function. Also, it
 * is fine to modify the context with cairo_save() and
 * cairo_push_group() prior to calling this function.
 * 
 * Note that special-purpose widgets may contain special code for
 * rendering to the screen and might appear differently on screen
 * and when rendered using gtk_widget_draw().
 * @param cr a cairo context to draw to
 */
draw(cr: cairo.Context): void
/**
 * Ensures that `widget` has a style (`widget->`style).
 * 
 * Not a very useful function; most of the time, if you
 * want the style, the widget is realized, and realized
 * widgets are guaranteed to have a style already.
 */
ensure_style(): void
/**
 * Notifies the user about an input-related error on this widget.
 * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
 * gdk_window_beep(), otherwise it does nothing.
 * 
 * Note that the effect of gdk_window_beep() can be configured in many
 * ways, depending on the windowing backend and the desktop environment
 * or window manager that is used.
 */
error_bell(): void
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 * @returns return from the event signal emission (%TRUE if               the event was handled)
 */
event(event: Gdk.Event): boolean
/**
 * Stops emission of #GtkWidget::child-notify signals on `widget`. The
 * signals are queued until gtk_widget_thaw_child_notify() is called
 * on `widget`.
 * 
 * This is the analogue of g_object_freeze_notify() for child properties.
 */
freeze_child_notify(): void
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 * @returns the #AtkObject associated with @widget
 */
get_accessible(): Atk.Object
/**
 * Retrieves the #GActionGroup that was registered using `prefix`. The resulting
 * #GActionGroup may have been registered to `widget` or any #GtkWidget in its
 * ancestry.
 * 
 * If no action group was found matching `prefix,` then %NULL is returned.
 * @param prefix The “prefix” of the action group.
 * @returns A #GActionGroup or %NULL.
 */
get_action_group(prefix: string): (Gio.ActionGroup | null)
/**
 * Returns the baseline that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function, and when allocating child
 * widgets in #GtkWidget::size_allocate.
 * @returns the baseline of the @widget, or -1 if none
 */
get_allocated_baseline(): number
/**
 * Returns the height that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the height of the @widget
 */
get_allocated_height(): number
/**
 * Retrieves the widget’s allocated size.
 * 
 * This function returns the last values passed to
 * gtk_widget_size_allocate_with_baseline(). The value differs from
 * the size returned in gtk_widget_get_allocation() in that functions
 * like gtk_widget_set_halign() can adjust the allocation, but not
 * the value returned by this function.
 * 
 * If a widget is not visible, its allocated size is 0.
 */
get_allocated_size(): [Gtk.Allocation, number]
/**
 * Returns the width that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the width of the @widget
 */
get_allocated_width(): number
/**
 * Retrieves the widget’s allocation.
 * 
 * Note, when implementing a #GtkContainer: a widget’s allocation will
 * be its “adjusted” allocation, that is, the widget’s parent
 * container typically calls gtk_widget_size_allocate() with an
 * allocation, and that allocation is then adjusted (to handle margin
 * and alignment for example) before assignment to the widget.
 * gtk_widget_get_allocation() returns the adjusted allocation that
 * was actually assigned to the widget. The adjusted allocation is
 * guaranteed to be completely contained within the
 * gtk_widget_size_allocate() allocation, however. So a #GtkContainer
 * is guaranteed that its children stay inside the assigned bounds,
 * but not that they have exactly the bounds the container assigned.
 * There is no way to get the original allocation assigned by
 * gtk_widget_size_allocate(), since it isn’t stored; if a container
 * implementation needs that information it will have to track it itself.
 */
get_allocation(): Gtk.Allocation
/**
 * Gets the first ancestor of `widget` with type `widget_type`. For example,
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
 * the first #GtkBox that’s an ancestor of `widget`. No reference will be
 * added to the returned widget; it should not be unreferenced. See note
 * about checking for a toplevel #GtkWindow in the docs for
 * gtk_widget_get_toplevel().
 * 
 * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
 * considers `widget` to be an ancestor of itself.
 * @param widget_type ancestor type
 * @returns the ancestor widget, or %NULL if not found
 */
get_ancestor(widget_type: GObject.GType): (Gtk.Widget | null)
/**
 * Determines whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * See gtk_widget_set_app_paintable()
 * @returns %TRUE if the widget is app paintable
 */
get_app_paintable(): boolean
/**
 * Determines whether `widget` can be a default widget. See
 * gtk_widget_set_can_default().
 * @returns %TRUE if @widget can be a default widget, %FALSE otherwise
 */
get_can_default(): boolean
/**
 * Determines whether `widget` can own the input focus. See
 * gtk_widget_set_can_focus().
 * @returns %TRUE if @widget can own the input focus, %FALSE otherwise
 */
get_can_focus(): boolean
/**
 * This function is only for use in widget implementations. Obtains
 * `widget->`requisition, unless someone has forced a particular
 * geometry on the widget (e.g. with gtk_widget_set_size_request()),
 * in which case it returns that geometry instead of the widget's
 * requisition.
 * 
 * This function differs from gtk_widget_size_request() in that
 * it retrieves the last size request value from `widget->`requisition,
 * while gtk_widget_size_request() actually calls the "size_request" method
 * on `widget` to compute the size request and fill in `widget->`requisition,
 * and only then returns `widget->`requisition.
 * 
 * Because this function does not call the “size_request” method, it
 * can only be used when you know that `widget->`requisition is
 * up-to-date, that is, gtk_widget_size_request() has been called
 * since the last time a resize was queued. In general, only container
 * implementations have this information; applications should use
 * gtk_widget_size_request().
 */
get_child_requisition(): Gtk.Requisition
/**
 * Gets the value set with gtk_widget_set_child_visible().
 * If you feel a need to use this function, your code probably
 * needs reorganization.
 * 
 * This function is only useful for container implementations and
 * never should be called by an application.
 * @returns %TRUE if the widget is mapped with the parent.
 */
get_child_visible(): boolean
/**
 * Retrieves the widget’s clip area.
 * 
 * The clip area is the area in which all of `widget'`s drawing will
 * happen. Other toolkits call it the bounding box.
 * 
 * Historically, in GTK+ the clip area has been equal to the allocation
 * retrieved via gtk_widget_get_allocation().
 */
get_clip(): Gtk.Allocation
/**
 * Returns the clipboard object for the given selection to
 * be used with `widget`. `widget` must have a #GdkDisplay
 * associated with it, so must be attached to a toplevel
 * window.
 * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
 * @returns the appropriate clipboard object. If no             clipboard already exists, a new one will             be created. Once a clipboard object has             been created, it is persistent for all time.
 */
get_clipboard(selection: Gdk.Atom): Gtk.Clipboard
/**
 * Obtains the composite name of a widget.
 * @returns the composite name of @widget, or %NULL if @widget is not   a composite child. The string should be freed when it is no   longer needed.
 */
get_composite_name(): string
/**
 * Returns whether `device` can interact with `widget` and its
 * children. See gtk_widget_set_device_enabled().
 * @param device a #GdkDevice
 * @returns %TRUE is @device is enabled for @widget
 */
get_device_enabled(device: Gdk.Device): boolean
/**
 * Returns the events mask for the widget corresponding to an specific device. These
 * are the events that the widget will receive when `device` operates on it.
 * @param device a #GdkDevice
 * @returns device event mask for @widget
 */
get_device_events(device: Gdk.Device): Gdk.EventMask
/**
 * Gets the reading direction for a particular widget. See
 * gtk_widget_set_direction().
 * @returns the reading direction for the widget.
 */
get_direction(): Gtk.TextDirection
/**
 * Get the #GdkDisplay for the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow at the top.
 * 
 * In general, you should only create display specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkDisplay for the toplevel for this widget.
 */
get_display(): Gdk.Display
/**
 * Determines whether the widget is double buffered.
 * 
 * See gtk_widget_set_double_buffered()
 * @returns %TRUE if the widget is double buffered
 */
get_double_buffered(): boolean
/**
 * Returns the event mask (see #GdkEventMask) for the widget. These are the
 * events that the widget will receive.
 * 
 * Note: Internally, the widget event mask will be the logical OR of the event
 * mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
 * event mask necessary to cater for every #GtkEventController created for the
 * widget.
 * @returns event mask for @widget
 */
get_events(): number
/**
 * Returns whether the widget should grab focus when it is clicked with the mouse.
 * See gtk_widget_set_focus_on_click().
 * @returns %TRUE if the widget should grab focus when it is clicked with               the mouse.
 */
get_focus_on_click(): boolean
/**
 * Gets the font map that has been set with gtk_widget_set_font_map().
 * @returns A #PangoFontMap, or %NULL
 */
get_font_map(): (Pango.FontMap | null)
/**
 * Returns the #cairo_font_options_t used for Pango rendering. When not set,
 * the defaults font options for the #GdkScreen will be used.
 * @returns the #cairo_font_options_t or %NULL if not set
 */
get_font_options(): (cairo.FontOptions | null)
/**
 * Obtains the frame clock for a widget. The frame clock is a global
 * “ticker” that can be used to drive animations and repaints.  The
 * most common reason to get the frame clock is to call
 * gdk_frame_clock_get_frame_time(), in order to get a time to use for
 * animating. For example you might record the start of the animation
 * with an initial value from gdk_frame_clock_get_frame_time(), and
 * then update the animation by calling
 * gdk_frame_clock_get_frame_time() again during each repaint.
 * 
 * gdk_frame_clock_request_phase() will result in a new frame on the
 * clock, but won’t necessarily repaint any widgets. To repaint a
 * widget, you have to use gtk_widget_queue_draw() which invalidates
 * the widget (thus scheduling it to receive a draw on the next
 * frame). gtk_widget_queue_draw() will also end up requesting a frame
 * on the appropriate frame clock.
 * 
 * A widget’s frame clock will not change while the widget is
 * mapped. Reparenting a widget (which implies a temporary unmap) can
 * change the widget’s frame clock.
 * 
 * Unrealized widgets do not have a frame clock.
 * @returns a #GdkFrameClock, or %NULL if widget is unrealized
 */
get_frame_clock(): (Gdk.FrameClock | null)
/**
 * Gets the value of the #GtkWidget:halign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
 * alignment.
 * @returns the horizontal alignment of @widget
 */
get_halign(): Gtk.Align
/**
 * Returns the current value of the has-tooltip property.  See
 * #GtkWidget:has-tooltip for more information.
 * @returns current value of has-tooltip on @widget.
 */
get_has_tooltip(): boolean
/**
 * Determines whether `widget` has a #GdkWindow of its own. See
 * gtk_widget_set_has_window().
 * @returns %TRUE if @widget has a window, %FALSE otherwise
 */
get_has_window(): boolean
/**
 * Gets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Containers should use gtk_widget_compute_expand() rather than
 * this function, to see whether a widget, or any of its children,
 * has the expand flag set. If any child of a widget wants to
 * expand, the parent may ask to expand also.
 * 
 * This function only looks at the widget’s own hexpand flag, rather
 * than computing whether the entire widget tree rooted at this widget
 * wants to expand.
 * @returns whether hexpand flag is set
 */
get_hexpand(): boolean
/**
 * Gets whether gtk_widget_set_hexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @returns whether hexpand has been explicitly set
 */
get_hexpand_set(): boolean
/**
 * Whether the widget is mapped.
 * @returns %TRUE if the widget is mapped, %FALSE otherwise.
 */
get_mapped(): boolean
/**
 * Gets the value of the #GtkWidget:margin-bottom property.
 * @returns The bottom margin of @widget
 */
get_margin_bottom(): number
/**
 * Gets the value of the #GtkWidget:margin-end property.
 * @returns The end margin of @widget
 */
get_margin_end(): number
/**
 * Gets the value of the #GtkWidget:margin-left property.
 * @returns The left margin of @widget
 */
get_margin_left(): number
/**
 * Gets the value of the #GtkWidget:margin-right property.
 * @returns The right margin of @widget
 */
get_margin_right(): number
/**
 * Gets the value of the #GtkWidget:margin-start property.
 * @returns The start margin of @widget
 */
get_margin_start(): number
/**
 * Gets the value of the #GtkWidget:margin-top property.
 * @returns The top margin of @widget
 */
get_margin_top(): number
/**
 * Returns the modifier mask the `widget’`s windowing system backend
 * uses for a particular purpose.
 * 
 * See gdk_keymap_get_modifier_mask().
 * @param intent the use case for the modifier mask
 * @returns the modifier mask used for @intent.
 */
get_modifier_mask(intent: Gdk.ModifierIntent): Gdk.ModifierType
/**
 * Returns the current modifier style for the widget. (As set by
 * gtk_widget_modify_style().) If no style has previously set, a new
 * #GtkRcStyle will be created with all values unset, and set as the
 * modifier style for the widget. If you make changes to this rc
 * style, you must call gtk_widget_modify_style(), passing in the
 * returned rc style, to make sure that your changes take effect.
 * 
 * Caution: passing the style back to gtk_widget_modify_style() will
 * normally end up destroying it, because gtk_widget_modify_style() copies
 * the passed-in style and sets the copy as the new modifier style,
 * thus dropping any reference to the old modifier style. Add a reference
 * to the modifier style if you want to keep it alive.
 * @returns the modifier style for the widget.     This rc style is owned by the widget. If you want to keep a     pointer to value this around, you must add a refcount using     g_object_ref().
 */
get_modifier_style(): Gtk.RcStyle
/**
 * Retrieves the name of a widget. See gtk_widget_set_name() for the
 * significance of widget names.
 * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
 */
get_name(): string
/**
 * Returns the current value of the #GtkWidget:no-show-all property,
 * which determines whether calls to gtk_widget_show_all()
 * will affect this widget.
 * @returns the current value of the “no-show-all” property.
 */
get_no_show_all(): boolean
/**
 * Fetches the requested opacity for this widget.
 * See gtk_widget_set_opacity().
 * @returns the requested opacity for this widget.
 */
get_opacity(): number
/**
 * Gets a #PangoContext with the appropriate font map, font description,
 * and base direction for this widget. Unlike the context returned
 * by gtk_widget_create_pango_context(), this context is owned by
 * the widget (it can be used until the screen for the widget changes
 * or the widget is removed from its toplevel), and will be updated to
 * match any changes to the widget’s attributes. This can be tracked
 * by using the #GtkWidget::screen-changed signal on the widget.
 * @returns the #PangoContext for the widget.
 */
get_pango_context(): Pango.Context
/**
 * Returns the parent container of `widget`.
 * @returns the parent container of @widget, or %NULL
 */
get_parent(): (Gtk.Widget | null)
/**
 * Gets `widget’`s parent window, or %NULL if it does not have one.
 * @returns the parent window of @widget, or %NULL if it does not have a parent window.
 */
get_parent_window(): (Gdk.Window | null)
/**
 * Returns the #GtkWidgetPath representing `widget,` if the widget
 * is not connected to a toplevel widget, a partial path will be
 * created.
 * @returns The #GtkWidgetPath representing @widget
 */
get_path(): Gtk.WidgetPath
/**
 * Obtains the location of the mouse pointer in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(); and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 */
get_pointer(): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves the minimum and natural size of a widget, taking
 * into account the widget’s preference for height-for-width management.
 * 
 * This is used to retrieve a suitable size by container widgets which do
 * not impose any restrictions on the child placement. It can be used
 * to deduce toplevel window and menu sizes as well as child widgets in
 * free-form containers such as GtkLayout.
 * 
 * Handle with care. Note that the natural height of a height-for-width
 * widget will generally be a smaller size than the minimum height, since the required
 * height for the natural width is generally smaller than the required height for
 * the minimum width.
 * 
 * Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
 * baseline alignment.
 */
get_preferred_size(): [Gtk.Requisition | null, Gtk.Requisition | null]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
get_preferred_width_for_height(height: number): [number, number]
/**
 * Determines whether `widget` is realized.
 * @returns %TRUE if @widget is realized, %FALSE otherwise
 */
get_realized(): boolean
/**
 * Determines whether `widget` is always treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_set_receives_default().
 * @returns %TRUE if @widget acts as the default widget when focused,               %FALSE otherwise
 */
get_receives_default(): boolean
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 * @returns The #GtkSizeRequestMode preferred by @widget.
 */
get_request_mode(): Gtk.SizeRequestMode
/**
 * Retrieves the widget’s requisition.
 * 
 * This function should only be used by widget implementations in
 * order to figure whether the widget’s requisition has actually
 * changed after some internal state change (so that they can call
 * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
 * 
 * Normally, gtk_widget_size_request() should be used.
 */
get_requisition(): Gtk.Requisition
/**
 * Get the root window where this widget is located. This function can
 * only be called after the widget has been added to a widget
 * hierarchy with #GtkWindow at the top.
 * 
 * The root window is useful for such purposes as creating a popup
 * #GdkWindow associated with the window. In general, you should only
 * create display specific resources when a widget has been realized,
 * and you should free those resources when the widget is unrealized.
 * @returns the #GdkWindow root window for the toplevel for this widget.
 */
get_root_window(): Gdk.Window
/**
 * Retrieves the internal scale factor that maps from window coordinates
 * to the actual device pixels. On traditional systems this is 1, on
 * high density outputs, it can be a higher value (typically 2).
 * 
 * See gdk_window_get_scale_factor().
 * @returns the scale factor for @widget
 */
get_scale_factor(): number
/**
 * Get the #GdkScreen from the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow
 * at the top.
 * 
 * In general, you should only create screen specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkScreen for the toplevel for this widget.
 */
get_screen(): Gdk.Screen
/**
 * Returns the widget’s sensitivity (in the sense of returning
 * the value that has been set using gtk_widget_set_sensitive()).
 * 
 * The effective sensitivity of a widget is however determined by both its
 * own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
 * @returns %TRUE if the widget is sensitive
 */
get_sensitive(): boolean
/**
 * Gets the settings object holding the settings used for this widget.
 * 
 * Note that this function can only be called when the #GtkWidget
 * is attached to a toplevel, since the settings object is specific
 * to a particular #GdkScreen.
 * @returns the relevant #GtkSettings object
 */
get_settings(): Gtk.Settings
/**
 * Gets the size request that was explicitly set for the widget using
 * gtk_widget_set_size_request(). A value of -1 stored in `width` or
 * `height` indicates that that dimension has not been set explicitly
 * and the natural requisition of the widget will be used instead. See
 * gtk_widget_set_size_request(). To get the size a widget will
 * actually request, call gtk_widget_get_preferred_size() instead of
 * this function.
 */
get_size_request(): [number, number]
/**
 * Returns the widget’s state. See gtk_widget_set_state().
 * @returns the state of @widget.
 */
get_state(): Gtk.StateType
/**
 * Returns the widget state as a flag set. It is worth mentioning
 * that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
 * returned, that is, also based on parent insensitivity, even if
 * `widget` itself is sensitive.
 * 
 * Also note that if you are looking for a way to obtain the
 * #GtkStateFlags to pass to a #GtkStyleContext method, you
 * should look at gtk_style_context_get_state().
 * @returns The state flags for widget
 */
get_state_flags(): Gtk.StateFlags
/**
 * Simply an accessor function that returns `widget->`style.
 * @returns the widget’s #GtkStyle
 */
get_style(): Gtk.Style
/**
 * Returns the style context associated to `widget`. The returned object is
 * guaranteed to be the same for the lifetime of `widget`.
 * @returns a #GtkStyleContext. This memory is owned by @widget and          must not be freed.
 */
get_style_context(): Gtk.StyleContext
/**
 * Returns %TRUE if `widget` is multiple pointer aware. See
 * gtk_widget_set_support_multidevice() for more information.
 * @returns %TRUE if @widget is multidevice aware.
 */
get_support_multidevice(): boolean
/**
 * Fetch an object build from the template XML for `widget_type` in this `widget` instance.
 * 
 * This will only report children which were previously declared with
 * gtk_widget_class_bind_template_child_full() or one of its
 * variants.
 * 
 * This function is only meant to be called for code which is private to the `widget_type` which
 * declared the child and is meant for language bindings which cannot easily make use
 * of the GObject structure offsets.
 * @param widget_type The #GType to get a template child for
 * @param name The “id” of the child defined in the template XML
 * @returns The object built in the template XML with the id @name
 */
get_template_child<T = GObject.Object>(widget_type: GObject.GType, name: string): T
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_markup(): (string | null)
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_text(): (string | null)
/**
 * Returns the #GtkWindow of the current tooltip. This can be the
 * GtkWindow created by default, or the custom tooltip window set
 * using gtk_widget_set_tooltip_window().
 * @returns The #GtkWindow of the current tooltip.
 */
get_tooltip_window(): Gtk.Window
/**
 * This function returns the topmost widget in the container hierarchy
 * `widget` is a part of. If `widget` has no parent widgets, it will be
 * returned as the topmost widget. No reference will be added to the
 * returned widget; it should not be unreferenced.
 * 
 * Note the difference in behavior vs. gtk_widget_get_ancestor();
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
 * would return
 * %NULL if `widget` wasn’t inside a toplevel window, and if the
 * window was inside a #GtkWindow-derived widget which was in turn
 * inside the toplevel #GtkWindow. While the second case may
 * seem unlikely, it actually happens when a #GtkPlug is embedded
 * inside a #GtkSocket within the same application.
 * 
 * To reliably find the toplevel #GtkWindow, use
 * gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
 * on the result. For instance, to get the title of a widget's toplevel
 * window, one might use:
 * 
 * ```c
 * static const char *
 * get_widget_toplevel_title (GtkWidget *widget)
 * {
 *   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 *   if (GTK_IS_WINDOW (toplevel))
 *     {
 *       return gtk_window_get_title (GTK_WINDOW (toplevel));
 *     }
 * 
 *   return NULL;
 * }
 * ```
 * 
 * @returns the topmost ancestor of @widget, or @widget itself    if there’s no ancestor.
 */
get_toplevel(): Gtk.Widget
/**
 * Gets the value of the #GtkWidget:valign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. If your widget want to support baseline aligned
 * children it must use gtk_widget_get_valign_with_baseline(), or
 * `g_object_get (widget, "valign", &value, NULL)`, which will
 * also report the true value.
 * @returns the vertical alignment of @widget, ignoring baseline alignment
 */
get_valign(): Gtk.Align
/**
 * Gets the value of the #GtkWidget:valign property, including
 * %GTK_ALIGN_BASELINE.
 * @returns the vertical alignment of @widget
 */
get_valign_with_baseline(): Gtk.Align
/**
 * Gets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_get_hexpand() for more detail.
 * @returns whether vexpand flag is set
 */
get_vexpand(): boolean
/**
 * Gets whether gtk_widget_set_vexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * See gtk_widget_get_hexpand_set() for more detail.
 * @returns whether vexpand has been explicitly set
 */
get_vexpand_set(): boolean
/**
 * Determines whether the widget is visible. If you want to
 * take into account whether the widget’s parent is also marked as
 * visible, use gtk_widget_is_visible() instead.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See gtk_widget_set_visible().
 * @returns %TRUE if the widget is visible
 */
get_visible(): boolean
/**
 * Gets the visual that will be used to render `widget`.
 * @returns the visual for @widget
 */
get_visual(): Gdk.Visual
/**
 * Returns the widget’s window if it is realized, %NULL otherwise
 * @returns @widget’s window.
 */
get_window(): (Gdk.Window | null)
/**
 * Makes `widget` the current grabbed widget.
 * 
 * This means that interaction with other widgets in the same
 * application is blocked and mouse as well as keyboard events
 * are delivered to this widget.
 * 
 * If `widget` is not sensitive, it is not set as the current
 * grabbed widget and this function does nothing.
 */
grab_add(): void
/**
 * Causes `widget` to become the default widget. `widget` must be able to be
 * a default widget; typically you would ensure this yourself
 * by calling gtk_widget_set_can_default() with a %TRUE value.
 * The default widget is activated when
 * the user presses Enter in a window. Default widgets must be
 * activatable, that is, gtk_widget_activate() should affect them. Note
 * that #GtkEntry widgets require the “activates-default” property
 * set to %TRUE before they activate the default widget when Enter
 * is pressed and the #GtkEntry is focused.
 */
grab_default(): void
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
grab_focus(): void
/**
 * Removes the grab from the given widget.
 * 
 * You have to pair calls to gtk_grab_add() and gtk_grab_remove().
 * 
 * If `widget` does not have the grab, this function does nothing.
 */
grab_remove(): void
/**
 * Determines whether the widget is currently grabbing events, so it
 * is the only widget receiving input events (keyboard and mouse).
 * 
 * See also gtk_grab_add().
 * @returns %TRUE if the widget is in the grab_widgets stack
 */
has_grab(): boolean
/**
 * Determines if the widget style has been looked up through the rc mechanism.
 * @returns %TRUE if the widget has been looked up through the rc   mechanism, %FALSE otherwise.
 */
has_rc_style(): boolean
/**
 * Checks whether there is a #GdkScreen is associated with
 * this widget. All toplevel widgets have an associated
 * screen, and all widgets added into a hierarchy with a toplevel
 * window at the top.
 * @returns %TRUE if there is a #GdkScreen associated   with the widget.
 */
has_screen(): boolean
/**
 * Determines if the widget should show a visible indication that
 * it has the global input focus. This is a convenience function for
 * use in ::draw handlers that takes into account whether focus
 * indication should currently be shown in the toplevel window of
 * `widget`. See gtk_window_get_focus_visible() for more information
 * about focus indication.
 * 
 * To find out if the widget has the global input focus, use
 * gtk_widget_has_focus().
 * @returns %TRUE if the widget should display a “focus rectangle”
 */
has_visible_focus(): boolean
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
hide(): void
/**
 * Utility function; intended to be connected to the #GtkWidget::delete-event
 * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
 * argument, then returns %TRUE. If connected to ::delete-event, the
 * result is that clicking the close button for a window (on the
 * window frame, top right corner usually) will hide but not destroy
 * the window. By default, GTK+ destroys windows when ::delete-event
 * is received.
 * @returns %TRUE
 */
hide_on_delete(): boolean
/**
 * Returns whether the widget is currently being destroyed.
 * This information can sometimes be used to avoid doing
 * unnecessary work.
 * @returns %TRUE if @widget is being destroyed
 */
in_destruction(): boolean
/**
 * Creates and initializes child widgets defined in templates. This
 * function must be called in the instance initializer for any
 * class which assigned itself a template using gtk_widget_class_set_template()
 * 
 * It is important to call this function in the instance initializer
 * of a #GtkWidget subclass and not in #GObject.constructed() or
 * #GObject.constructor() for two reasons.
 * 
 * One reason is that generally derived widgets will assume that parent
 * class composite widgets have been created in their instance
 * initializers.
 * 
 * Another reason is that when calling g_object_new() on a widget with
 * composite templates, it’s important to build the composite widgets
 * before the construct properties are set. Properties passed to g_object_new()
 * should take precedence over properties set in the private template XML.
 */
init_template(): void
/**
 * Sets an input shape for this widget’s GDK window. This allows for
 * windows which react to mouse click in a nonrectangular region, see
 * gdk_window_input_shape_combine_region() for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
input_shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Inserts `group` into `widget`. Children of `widget` that implement
 * #GtkActionable can then be associated with actions in `group` by
 * setting their “action-name” to
 * `prefix`.`action-name`.
 * 
 * If `group` is %NULL, a previously inserted group for `name` is removed
 * from `widget`.
 * @param name the prefix for actions in @group
 * @param group a #GActionGroup, or %NULL
 */
insert_action_group(name: string, group?: (Gio.ActionGroup | null)): void
/**
 * Computes the intersection of a `widget’`s area and `area,` storing
 * the intersection in `intersection,` and returns %TRUE if there was
 * an intersection.  `intersection` may be %NULL if you’re only
 * interested in whether there was an intersection.
 * @param area a rectangle
 * @returns %TRUE if there was an intersection
 */
intersect(area: Gdk.Rectangle): [boolean, Gdk.Rectangle | null]
/**
 * Determines whether `widget` is somewhere inside `ancestor,` possibly with
 * intermediate containers.
 * @param ancestor another #GtkWidget
 * @returns %TRUE if @ancestor contains @widget as a child,    grandchild, great grandchild, etc.
 */
is_ancestor(ancestor: Gtk.Widget): boolean
/**
 * Whether `widget` can rely on having its alpha channel
 * drawn correctly. On X11 this function returns whether a
 * compositing manager is running for `widget’`s screen.
 * 
 * Please note that the semantics of this call will change
 * in the future if used on a widget that has a composited
 * window in its hierarchy (as set by gdk_window_set_composited()).
 * @returns %TRUE if the widget can rely on its alpha channel being drawn correctly.
 */
is_composited(): boolean
/**
 * Determines whether `widget` can be drawn to. A widget can be drawn
 * to if it is mapped and visible.
 * @returns %TRUE if @widget is drawable, %FALSE otherwise
 */
is_drawable(): boolean
/**
 * Returns the widget’s effective sensitivity, which means
 * it is sensitive itself and also its parent widget is sensitive
 * @returns %TRUE if the widget is effectively sensitive
 */
is_sensitive(): boolean
/**
 * Determines whether `widget` is a toplevel widget.
 * 
 * Currently only #GtkWindow and #GtkInvisible (and out-of-process
 * #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
 * widget.
 * @returns %TRUE if @widget is a toplevel, %FALSE otherwise
 */
is_toplevel(): boolean
/**
 * Determines whether the widget and all its parents are marked as
 * visible.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See also gtk_widget_get_visible() and gtk_widget_set_visible()
 * @returns %TRUE if the widget and all its parents are visible
 */
is_visible(): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 * @returns %TRUE if stopping keyboard navigation is fine, %FALSE               if the emitting widget should try to handle the keyboard               navigation attempt in its parent container(s).
 */
keynav_failed(direction: Gtk.DirectionType): boolean
/**
 * Lists the closures used by `widget` for accelerator group connections
 * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
 * The closures can be used to monitor accelerator changes on `widget,`
 * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
 * #GtkAccelGroup of a closure which can be found out with
 * gtk_accel_group_from_accel_closure().
 * @returns a newly allocated #GList of closures
 */
list_accel_closures(): GObject.Closure[]
/**
 * Retrieves a %NULL-terminated array of strings containing the prefixes of
 * #GActionGroup's available to `widget`.
 * @returns a %NULL-terminated array of strings.
 */
list_action_prefixes(): string[]
/**
 * Returns a newly allocated list of the widgets, normally labels, for
 * which this widget is the target of a mnemonic (see for example,
 * gtk_label_set_mnemonic_widget()).
 * 
 * The widgets in the list are not individually referenced. If you
 * want to iterate through the list and perform actions involving
 * callbacks that might destroy the widgets, you
 * must call `g_list_foreach (result,
 * (GFunc)g_object_ref, NULL)` first, and then unref all the
 * widgets afterwards.
 * @returns the list of  mnemonic labels; free this list  with g_list_free() when you are done with it.
 */
list_mnemonic_labels(): Gtk.Widget[]
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
map(): void
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 * @returns %TRUE if the signal has been handled
 */
mnemonic_activate(group_cycling: boolean): boolean
/**
 * Sets the base color for a widget in a particular state.
 * All other style values are left untouched. The base color
 * is the background color used along with the text color
 * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
 * and #GtkTextView. See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > base color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the base color on that.
 * @param state the state for which to set the base color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_base().
 */
modify_base(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > background color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the background color on that.
 * @param state the state for which to set the background color
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_bg().
 */
modify_bg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the #GtkWidget
 * cursor-color and secondary-cursor-color
 * style properties.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param primary the color to use for primary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_cursor().
 * @param secondary the color to use for secondary cursor (does     not need to be allocated), or %NULL to undo the effect of     previous calls to of gtk_widget_modify_cursor().
 */
modify_cursor(primary?: (Gdk.Color | null), secondary?: (Gdk.Color | null)): void
/**
 * Sets the foreground color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the foreground color
 * @param color the color to assign (does not need to be allocated),     or %NULL to undo the effect of previous calls to     of gtk_widget_modify_fg().
 */
modify_fg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the font to use for a widget.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param font_desc the font description to use, or %NULL     to undo the effect of previous calls to gtk_widget_modify_font()
 */
modify_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Modifies style values on the widget.
 * 
 * Modifications made using this technique take precedence over
 * style values set via an RC file, however, they will be overridden
 * if a style is explicitly set on the widget using gtk_widget_set_style().
 * The #GtkRcStyle-struct is designed so each field can either be
 * set or unset, so it is possible, using this function, to modify some
 * style values and leave the others unchanged.
 * 
 * Note that modifications made with this function are not cumulative
 * with previous calls to gtk_widget_modify_style() or with such
 * functions as gtk_widget_modify_fg(). If you wish to retain
 * previous values, you must first call gtk_widget_get_modifier_style(),
 * make your modifications to the returned style, then call
 * gtk_widget_modify_style() with that style. On the other hand,
 * if you first call gtk_widget_modify_style(), subsequent calls
 * to such functions gtk_widget_modify_fg() will have a cumulative
 * effect with the initial modifications.
 * @param style the #GtkRcStyle-struct holding the style modifications
 */
modify_style(style: Gtk.RcStyle): void
/**
 * Sets the text color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * The text color is the foreground color used along with the
 * base color (see gtk_widget_modify_base()) for widgets such
 * as #GtkEntry and #GtkTextView.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the text color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_text().
 */
modify_text(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color to use for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color().
 * @param state the state for which to set the background color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_background_color()
 */
override_background_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the color to use for a widget.
 * 
 * All other style values are left untouched.
 * 
 * This function does not act recursively. Setting the color of a
 * container does not affect its children. Note that some widgets that
 * you may not think of as containers, for instance #GtkButtons,
 * are actually containers.
 * 
 * This API is mostly meant as a quick way for applications to
 * change a widget appearance. If you are developing a widgets
 * library and intend this change to be themeable, it is better
 * done by setting meaningful CSS classes in your
 * widget/container implementation through gtk_style_context_add_class().
 * 
 * This way, your widget library can install a #GtkCssProvider
 * with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
 * to provide a default styling for those widgets that need so, and
 * this theming may fully overridden by the user’s theme.
 * 
 * Note that for complex widgets this may bring in undesired
 * results (such as uniform background color everywhere), in
 * these cases it is better to fully style such widgets through a
 * #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
 * priority.
 * @param state the state for which to set the color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_color()
 */
override_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the
 * cursor-color and secondary-cursor-color
 * style properties. All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * Note that the underlying properties have the #GdkColor type,
 * so the alpha value in `primary` and `secondary` will be ignored.
 * @param cursor the color to use for primary cursor (does not need to be     allocated), or %NULL to undo the effect of previous calls to     of gtk_widget_override_cursor().
 * @param secondary_cursor the color to use for secondary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_override_cursor().
 */
override_cursor(cursor?: (Gdk.RGBA | null), secondary_cursor?: (Gdk.RGBA | null)): void
/**
 * Sets the font to use for a widget. All other style values are
 * left untouched. See gtk_widget_override_color().
 * @param font_desc the font description to use, or %NULL to undo     the effect of previous calls to gtk_widget_override_font()
 */
override_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Sets a symbolic color for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color() for overriding the foreground
 * or background color.
 * @param name the name of the symbolic color to modify
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to gtk_widget_override_symbolic_color()
 */
override_symbolic_color(name: string, color?: (Gdk.RGBA | null)): void
/**
 * Obtains the full path to `widget`. The path is simply the name of a
 * widget and all its parents in the container hierarchy, separated by
 * periods. The name of a widget comes from
 * gtk_widget_get_name(). Paths are used to apply styles to a widget
 * in gtkrc configuration files. Widget names are the type of the
 * widget by default (e.g. “GtkButton”) or can be set to an
 * application-specific value with gtk_widget_set_name(). By setting
 * the name of a widget, you allow users or theme authors to apply
 * styles to that specific widget in their gtkrc
 * file. `path_reversed_p` fills in the path in reverse order,
 * i.e. starting with `widget’`s name instead of starting with the name
 * of `widget’`s outermost ancestor.
 */
path(): [number, string, string]
/**
 * This function is only for use in widget implementations.
 * 
 * Flags the widget for a rerun of the GtkWidgetClass::size_allocate
 * function. Use this function instead of gtk_widget_queue_resize()
 * when the `widget'`s size request didn't change but it wants to
 * reposition its contents.
 * 
 * An example user of this function is gtk_widget_set_halign().
 */
queue_allocate(): void
/**
 * Mark `widget` as needing to recompute its expand flags. Call
 * this function when setting legacy expand child properties
 * on the child of a container.
 * 
 * See gtk_widget_compute_expand().
 */
queue_compute_expand(): void
/**
 * Equivalent to calling gtk_widget_queue_draw_area() for the
 * entire area of a widget.
 */
queue_draw(): void
/**
 * Convenience function that calls gtk_widget_queue_draw_region() on
 * the region created from the given coordinates.
 * 
 * The region here is specified in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(), and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 * 
 * `width` or `height` may be 0, in this case this function does
 * nothing. Negative values for `width` and `height` are not allowed.
 * @param x x coordinate of upper-left corner of rectangle to redraw
 * @param y y coordinate of upper-left corner of rectangle to redraw
 * @param width width of region to draw
 * @param height height of region to draw
 */
queue_draw_area(x: number, y: number, width: number, height: number): void
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
queue_draw_region(region: cairo.Region): void
/**
 * This function is only for use in widget implementations.
 * Flags a widget to have its size renegotiated; should
 * be called when a widget for some reason has a new size request.
 * For example, when you change the text in a #GtkLabel, #GtkLabel
 * queues a resize to ensure there’s enough space for the new text.
 * 
 * Note that you cannot call gtk_widget_queue_resize() on a widget
 * from inside its implementation of the GtkWidgetClass::size_allocate
 * virtual method. Calls to gtk_widget_queue_resize() from inside
 * GtkWidgetClass::size_allocate will be silently ignored.
 */
queue_resize(): void
/**
 * This function works like gtk_widget_queue_resize(),
 * except that the widget is not invalidated.
 */
queue_resize_no_redraw(): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
realize(): void
/**
 * Computes the intersection of a `widget’`s area and `region,` returning
 * the intersection. The result may be empty, use cairo_region_is_empty() to
 * check.
 * @param region a #cairo_region_t, in the same coordinate system as          @widget->allocation. That is, relative to @widget->window          for widgets which return %FALSE from gtk_widget_get_has_window();          relative to the parent window of @widget->window otherwise.
 * @returns A newly allocated region holding the intersection of @widget     and @region.
 */
region_intersect(region: cairo.Region): cairo.Region
/**
 * Registers a #GdkWindow with the widget and sets it up so that
 * the widget receives events for it. Call gtk_widget_unregister_window()
 * when destroying the window.
 * 
 * Before 3.8 you needed to call gdk_window_set_user_data() directly to set
 * this up. This is now deprecated and you should use gtk_widget_register_window()
 * instead. Old code will keep working as is, although some new features like
 * transparency might not work perfectly.
 * @param window a #GdkWindow
 */
register_window(window: Gdk.Window): void
/**
 * Removes an accelerator from `widget,` previously installed with
 * gtk_widget_add_accelerator().
 * @param accel_group accel group for this widget
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @returns whether an accelerator was installed and could be removed
 */
remove_accelerator(accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType): boolean
/**
 * Removes a widget from the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
 * must have previously been added to the list with
 * gtk_widget_add_mnemonic_label().
 * @param label a #GtkWidget that was previously set as a mnemonic label for         @widget with gtk_widget_add_mnemonic_label().
 */
remove_mnemonic_label(label: Gtk.Widget): void
/**
 * Removes a tick callback previously registered with
 * gtk_widget_add_tick_callback().
 * @param id an id returned by gtk_widget_add_tick_callback()
 */
remove_tick_callback(id: number): void
/**
 * A convenience function that uses the theme settings for `widget`
 * to look up `stock_id` and render it to a pixbuf. `stock_id` should
 * be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size`
 * should be a size such as #GTK_ICON_SIZE_MENU. `detail` should be a
 * string that identifies the widget or code doing the rendering, so
 * that theme engines can special-case rendering for that widget or
 * code.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be
 * freed after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @param detail render detail to pass to theme engine
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon(stock_id: string, size: number, detail?: (string | null)): (GdkPixbuf.Pixbuf | null)
/**
 * A convenience function that uses the theme engine and style
 * settings for `widget` to look up `stock_id` and render it to
 * a pixbuf. `stock_id` should be a stock icon ID such as
 * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
 * such as #GTK_ICON_SIZE_MENU.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be freed
 * after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon_pixbuf(stock_id: string, size: number): (GdkPixbuf.Pixbuf | null)
/**
 * Moves a widget from one #GtkContainer to another, handling reference
 * count issues to avoid destroying the widget.
 * @param new_parent a #GtkContainer to move the widget into
 */
reparent(new_parent: Gtk.Widget): void
/**
 * Reset the styles of `widget` and all descendents, so when
 * they are looked up again, they get the correct values
 * for the currently loaded RC file settings.
 * 
 * This function is not useful for applications.
 */
reset_rc_styles(): void
/**
 * Updates the style context of `widget` and all descendants
 * by updating its widget path. #GtkContainers may want
 * to use this on a child when reordering it in a way that a different
 * style might apply to it. See also gtk_container_get_path_for_child().
 */
reset_style(): void
/**
 * Very rarely-used function. This function is used to emit
 * an expose event on a widget. This function is not normally used
 * directly. The only time it is used is when propagating an expose
 * event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
 * and that is normally done using gtk_container_propagate_draw().
 * 
 * If you want to force an area of a window to be redrawn,
 * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
 * To cause the redraw to be done immediately, follow that call
 * with a call to gdk_window_process_updates().
 * @param event a expose #GdkEvent
 * @returns return from the event signal emission (%TRUE if   the event was handled)
 */
send_expose(event: Gdk.Event): number
/**
 * Sends the focus change `event` to `widget`
 * 
 * This function is not meant to be used by applications. The only time it
 * should be used is when it is necessary for a #GtkWidget to assign focus
 * to a widget that is semantically owned by the first widget even though
 * it’s not a direct child - for instance, a search entry in a floating
 * window similar to the quick search in #GtkTreeView.
 * 
 * An example of its usage is:
 * 
 * 
 * ```c
 *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
 * 
 *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
 *   fevent->focus_change.in = TRUE;
 *   fevent->focus_change.window = _gtk_widget_get_window (widget);
 *   if (fevent->focus_change.window != NULL)
 *     g_object_ref (fevent->focus_change.window);
 * 
 *   gtk_widget_send_focus_change (widget, fevent);
 * 
 *   gdk_event_free (event);
 * ```
 * 
 * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
 * @returns the return value from the event signal emission: %TRUE   if the event was handled, and %FALSE otherwise
 */
send_focus_change(event: Gdk.Event): boolean
/**
 * Given an accelerator group, `accel_group,` and an accelerator path,
 * `accel_path,` sets up an accelerator in `accel_group` so whenever the
 * key binding that is defined for `accel_path` is pressed, `widget`
 * will be activated.  This removes any accelerators (for any
 * accelerator group) installed by previous calls to
 * gtk_widget_set_accel_path(). Associating accelerators with
 * paths allows them to be modified by the user and the modifications
 * to be saved for future use. (See gtk_accel_map_save().)
 * 
 * This function is a low level function that would most likely
 * be used by a menu creation system like #GtkUIManager. If you
 * use #GtkUIManager, setting up accelerator paths will be done
 * automatically.
 * 
 * Even when you you aren’t using #GtkUIManager, if you only want to
 * set up accelerators on menu items gtk_menu_item_set_accel_path()
 * provides a somewhat more convenient interface.
 * 
 * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
 * pass a static string, you can save some memory by interning it first with
 * g_intern_static_string().
 * @param accel_path path used to look up the accelerator
 * @param accel_group a #GtkAccelGroup.
 */
set_accel_path(accel_path?: (string | null), accel_group?: (Gtk.AccelGroup | null)): void
/**
 * Sets the widget’s allocation.  This should not be used
 * directly, but from within a widget’s size_allocate method.
 * 
 * The allocation set should be the “adjusted” or actual
 * allocation. If you’re implementing a #GtkContainer, you want to use
 * gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
 * The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
 * allocation inside gtk_widget_size_allocate() to create an adjusted
 * allocation.
 * @param allocation a pointer to a #GtkAllocation to copy from
 */
set_allocation(allocation: Gtk.Allocation): void
/**
 * Sets whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * This is a hint to the widget and does not affect the behavior of
 * the GTK+ core; many widgets ignore this flag entirely. For widgets
 * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
 * the effect is to suppress default themed drawing of the widget's
 * background. (Children of the widget will still be drawn.) The application
 * is then entirely responsible for drawing the widget background.
 * 
 * Note that the background is still drawn when the widget is mapped.
 * @param app_paintable %TRUE if the application will paint on the widget
 */
set_app_paintable(app_paintable: boolean): void
/**
 * Specifies whether `widget` can be a default widget. See
 * gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param can_default whether or not @widget can be a default widget.
 */
set_can_default(can_default: boolean): void
/**
 * Specifies whether `widget` can own the input focus. See
 * gtk_widget_grab_focus() for actually setting the input focus on a
 * widget.
 * @param can_focus whether or not @widget can own the input focus.
 */
set_can_focus(can_focus: boolean): void
/**
 * Sets whether `widget` should be mapped along with its when its parent
 * is mapped and `widget` has been shown with gtk_widget_show().
 * 
 * The child visibility can be set for widget before it is added to
 * a container with gtk_widget_set_parent(), to avoid mapping
 * children unnecessary before immediately unmapping them. However
 * it will be reset to its default state of %TRUE when the widget
 * is removed from a container.
 * 
 * Note that changing the child visibility of a widget does not
 * queue a resize on the widget. Most of the time, the size of
 * a widget is computed from all visible children, whether or
 * not they are mapped. If this is not the case, the container
 * can queue a resize itself.
 * 
 * This function is only useful for container implementations and
 * never should be called by an application.
 * @param is_visible if %TRUE, @widget should be mapped along with its parent.
 */
set_child_visible(is_visible: boolean): void
/**
 * Sets the widget’s clip.  This must not be used directly,
 * but from within a widget’s size_allocate method.
 * It must be called after gtk_widget_set_allocation() (or after chaining up
 * to the parent class), because that function resets the clip.
 * 
 * The clip set should be the area that `widget` draws on. If `widget` is a
 * #GtkContainer, the area must contain all children's clips.
 * 
 * If this function is not called by `widget` during a ::size-allocate handler,
 * the clip will be set to `widget'`s allocation.
 * @param clip a pointer to a #GtkAllocation to copy from
 */
set_clip(clip: Gtk.Allocation): void
/**
 * Sets a widgets composite name. The widget must be
 * a composite child of its parent; see gtk_widget_push_composite_child().
 * @param name the name to set
 */
set_composite_name(name: string): void
/**
 * Enables or disables a #GdkDevice to interact with `widget`
 * and all its children.
 * 
 * It does so by descending through the #GdkWindow hierarchy
 * and enabling the same mask that is has for core events
 * (i.e. the one that gdk_window_get_events() returns).
 * @param device a #GdkDevice
 * @param enabled whether to enable the device
 */
set_device_enabled(device: Gdk.Device, enabled: boolean): void
/**
 * Sets the device event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive from `device`. Keep
 * in mind that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_device_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with windowless widgets (which return
 * %FALSE from gtk_widget_get_has_window());
 * to get events on those widgets, place them inside a #GtkEventBox
 * and receive events on the event box.
 * @param device a #GdkDevice
 * @param events event mask
 */
set_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Sets the reading direction on a particular widget. This direction
 * controls the primary direction for widgets containing text,
 * and also the direction in which the children of a container are
 * packed. The ability to set the direction is present in order
 * so that correct localization into languages with right-to-left
 * reading directions can be done. Generally, applications will
 * let the default reading direction present, except for containers
 * where the containers are arranged in an order that is explicitly
 * visual rather than logical (such as buttons for text justification).
 * 
 * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
 * set by gtk_widget_set_default_direction() will be used.
 * @param dir the new direction
 */
set_direction(dir: Gtk.TextDirection): void
/**
 * Widgets are double buffered by default; you can use this function
 * to turn off the buffering. “Double buffered” simply means that
 * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
 * automatically around expose events sent to the
 * widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
 * window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
 * buffer to the screen. The result is that users see the window
 * update in one smooth step, and don’t see individual graphics
 * primitives being rendered.
 * 
 * In very simple terms, double buffered widgets don’t flicker,
 * so you would only use this function to turn off double buffering
 * if you had special needs and really knew what you were doing.
 * 
 * Note: if you turn off double-buffering, you have to handle
 * expose events, since even the clearing to the background color or
 * pixmap will not happen automatically (as it is done in
 * gdk_window_begin_draw_frame()).
 * 
 * In 3.10 GTK and GDK have been restructured for translucent drawing. Since
 * then expose events for double-buffered widgets are culled into a single
 * event to the toplevel GDK window. If you now unset double buffering, you
 * will cause a separate rendering pass for every widget. This will likely
 * cause rendering problems - in particular related to stacking - and usually
 * increases rendering times significantly.
 * @param double_buffered %TRUE to double-buffer a widget
 */
set_double_buffered(double_buffered: boolean): void
/**
 * Sets the event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive. Keep in mind
 * that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with widgets that have no window.
 * (See gtk_widget_get_has_window()).  To get events on those widgets,
 * place them inside a #GtkEventBox and receive events on the event
 * box.
 * @param events event mask
 */
set_events(events: number): void
/**
 * Sets whether the widget should grab focus when it is clicked with the mouse.
 * Making mouse clicks not grab focus is useful in places like toolbars where
 * you don’t want the keyboard focus removed from the main area of the
 * application.
 * @param focus_on_click whether the widget should grab focus when clicked with the mouse
 */
set_focus_on_click(focus_on_click: boolean): void
/**
 * Sets the font map to use for Pango rendering. When not set, the widget
 * will inherit the font map from its parent.
 * @param font_map a #PangoFontMap, or %NULL to unset any previously     set font map
 */
set_font_map(font_map?: (Pango.FontMap | null)): void
/**
 * Sets the #cairo_font_options_t used for Pango rendering in this widget.
 * When not set, the default font options for the #GdkScreen will be used.
 * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
 */
set_font_options(options?: (cairo.FontOptions | null)): void
/**
 * Sets the horizontal alignment of `widget`.
 * See the #GtkWidget:halign property.
 * @param align the horizontal alignment
 */
set_halign(align: Gtk.Align): void
/**
 * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
 * #GtkWidget:has-tooltip for more information.
 * @param has_tooltip whether or not @widget has a tooltip.
 */
set_has_tooltip(has_tooltip: boolean): void
/**
 * Specifies whether `widget` has a #GdkWindow of its own. Note that
 * all realized widgets have a non-%NULL “window” pointer
 * (gtk_widget_get_window() never returns a %NULL window when a widget
 * is realized), but for many of them it’s actually the #GdkWindow of
 * one of its parent widgets. Widgets that do not create a %window for
 * themselves in #GtkWidget::realize must announce this by
 * calling this function with `has_window` = %FALSE.
 * 
 * This function should only be called by widget implementations,
 * and they should call it in their init() function.
 * @param has_window whether or not @widget has a window.
 */
set_has_window(has_window: boolean): void
/**
 * Sets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Call this function to set the expand flag if you would like your
 * widget to become larger horizontally when the window has extra
 * room.
 * 
 * By default, widgets automatically expand if any of their children
 * want to expand. (To see if a widget will automatically expand given
 * its current children and state, call gtk_widget_compute_expand(). A
 * container can decide how the expandability of children affects the
 * expansion of the container by overriding the compute_expand virtual
 * method on #GtkWidget.).
 * 
 * Setting hexpand explicitly with this function will override the
 * automatic expand behavior.
 * 
 * This function forces the widget to expand or not to expand,
 * regardless of children.  The override occurs because
 * gtk_widget_set_hexpand() sets the hexpand-set property (see
 * gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
 * value to be used, rather than looking at children and widget state.
 * @param expand whether to expand
 */
set_hexpand(expand: boolean): void
/**
 * Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
 * be used.
 * 
 * The hexpand-set property will be set automatically when you call
 * gtk_widget_set_hexpand() to set hexpand, so the most likely
 * reason to use this function would be to unset an explicit expand
 * flag.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @param set value for hexpand-set property
 */
set_hexpand_set(set: boolean): void
/**
 * Marks the widget as being mapped.
 * 
 * This function should only ever be called in a derived widget's
 * “map” or “unmap” implementation.
 * @param mapped %TRUE to mark the widget as mapped
 */
set_mapped(mapped: boolean): void
/**
 * Sets the bottom margin of `widget`.
 * See the #GtkWidget:margin-bottom property.
 * @param margin the bottom margin
 */
set_margin_bottom(margin: number): void
/**
 * Sets the end margin of `widget`.
 * See the #GtkWidget:margin-end property.
 * @param margin the end margin
 */
set_margin_end(margin: number): void
/**
 * Sets the left margin of `widget`.
 * See the #GtkWidget:margin-left property.
 * @param margin the left margin
 */
set_margin_left(margin: number): void
/**
 * Sets the right margin of `widget`.
 * See the #GtkWidget:margin-right property.
 * @param margin the right margin
 */
set_margin_right(margin: number): void
/**
 * Sets the start margin of `widget`.
 * See the #GtkWidget:margin-start property.
 * @param margin the start margin
 */
set_margin_start(margin: number): void
/**
 * Sets the top margin of `widget`.
 * See the #GtkWidget:margin-top property.
 * @param margin the top margin
 */
set_margin_top(margin: number): void
/**
 * Widgets can be named, which allows you to refer to them from a
 * CSS file. You can apply a style to widgets with a particular name
 * in the CSS file. See the documentation for the CSS syntax (on the
 * same page as the docs for #GtkStyleContext).
 * 
 * Note that the CSS syntax has certain special characters to delimit
 * and represent elements in a selector (period, #, >, *...), so using
 * these will make your widget impossible to match by name. Any combination
 * of alphanumeric symbols, dashes and underscores will suffice.
 * @param name name for the widget
 */
set_name(name: string): void
/**
 * Sets the #GtkWidget:no-show-all property, which determines whether
 * calls to gtk_widget_show_all() will affect this widget.
 * 
 * This is mostly for use in constructing widget hierarchies with externally
 * controlled visibility, see #GtkUIManager.
 * @param no_show_all the new value for the “no-show-all” property
 */
set_no_show_all(no_show_all: boolean): void
/**
 * Request the `widget` to be rendered partially transparent,
 * with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
 * are clamped to the [0,1] range.).
 * This works on both toplevel widget, and child widgets, although there
 * are some limitations:
 * 
 * For toplevel widgets this depends on the capabilities of the windowing
 * system. On X11 this has any effect only on X screens with a compositing manager
 * running. See gtk_widget_is_composited(). On Windows it should work
 * always, although setting a window’s opacity after the window has been
 * shown causes it to flicker once on Windows.
 * 
 * For child widgets it doesn’t work if any affected widget has a native window, or
 * disables double buffering.
 * @param opacity desired opacity, between 0 and 1
 */
set_opacity(opacity: number): void
/**
 * This function is useful only when implementing subclasses of
 * #GtkContainer.
 * Sets the container as the parent of `widget,` and takes care of
 * some details such as updating the state and style of the child
 * to reflect its new location. The opposite function is
 * gtk_widget_unparent().
 * @param parent parent container
 */
set_parent(parent: Gtk.Widget): void
/**
 * Sets a non default parent window for `widget`.
 * 
 * For #GtkWindow classes, setting a `parent_window` effects whether
 * the window is a toplevel window or can be embedded into other
 * widgets.
 * 
 * For #GtkWindow classes, this needs to be called before the
 * window is realized.
 * @param parent_window the new parent window.
 */
set_parent_window(parent_window: Gdk.Window): void
/**
 * Marks the widget as being realized. This function must only be
 * called after all #GdkWindows for the `widget` have been created
 * and registered.
 * 
 * This function should only ever be called in a derived widget's
 * “realize” or “unrealize” implementation.
 * @param realized %TRUE to mark the widget as realized
 */
set_realized(realized: boolean): void
/**
 * Specifies whether `widget` will be treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param receives_default whether or not @widget can be a default widget.
 */
set_receives_default(receives_default: boolean): void
/**
 * Sets whether the entire widget is queued for drawing when its size
 * allocation changes. By default, this setting is %TRUE and
 * the entire widget is redrawn on every size change. If your widget
 * leaves the upper left unchanged when made bigger, turning this
 * setting off will improve performance.
 * 
 * Note that for widgets where gtk_widget_get_has_window() is %FALSE
 * setting this flag to %FALSE turns off all allocation on resizing:
 * the widget will not even redraw if its position changes; this is to
 * allow containers that don’t draw anything to avoid excess
 * invalidations. If you set this flag on a widget with no window that
 * does draw on `widget->`window, you are
 * responsible for invalidating both the old and new allocation of the
 * widget when the widget is moved and responsible for invalidating
 * regions newly when the widget increases size.
 * @param redraw_on_allocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
 */
set_redraw_on_allocate(redraw_on_allocate: boolean): void
/**
 * Sets the sensitivity of a widget. A widget is sensitive if the user
 * can interact with it. Insensitive widgets are “grayed out” and the
 * user can’t interact with them. Insensitive widgets are known as
 * “inactive”, “disabled”, or “ghosted” in some other toolkits.
 * @param sensitive %TRUE to make the widget sensitive
 */
set_sensitive(sensitive: boolean): void
/**
 * Sets the minimum size of a widget; that is, the widget’s size
 * request will be at least `width` by `height`. You can use this
 * function to force a widget to be larger than it normally would be.
 * 
 * In most cases, gtk_window_set_default_size() is a better choice for
 * toplevel windows than this function; setting the default size will
 * still allow users to shrink the window. Setting the size request
 * will force them to leave the window at least as large as the size
 * request. When dealing with window sizes,
 * gtk_window_set_geometry_hints() can be a useful function as well.
 * 
 * Note the inherent danger of setting any fixed size - themes,
 * translations into other languages, different fonts, and user action
 * can all change the appropriate size for a given widget. So, it's
 * basically impossible to hardcode a size that will always be
 * correct.
 * 
 * The size request of a widget is the smallest size a widget can
 * accept while still functioning well and drawing itself correctly.
 * However in some strange cases a widget may be allocated less than
 * its requested size, and in many cases a widget may be allocated more
 * space than it requested.
 * 
 * If the size request in a given direction is -1 (unset), then
 * the “natural” size request of the widget will be used instead.
 * 
 * The size request set here does not include any margin from the
 * #GtkWidget properties margin-left, margin-right, margin-top, and
 * margin-bottom, but it does include pretty much all other padding
 * or border properties set by any subclass of #GtkWidget.
 * @param width width @widget should request, or -1 to unset
 * @param height height @widget should request, or -1 to unset
 */
set_size_request(width: number, height: number): void
/**
 * This function is for use in widget implementations. Sets the state
 * of a widget (insensitive, prelighted, etc.) Usually you should set
 * the state using wrapper functions such as gtk_widget_set_sensitive().
 * @param state new state for @widget
 */
set_state(state: Gtk.StateType): void
/**
 * This function is for use in widget implementations. Turns on flag
 * values in the current widget state (insensitive, prelighted, etc.).
 * 
 * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
 * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
 * direction, use gtk_widget_set_direction().
 * 
 * It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
 * will be propagated down to all non-internal children if `widget` is a
 * #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
 * down to all #GtkContainer children by different means than turning on the
 * state flag down the hierarchy, both gtk_widget_get_state_flags() and
 * gtk_widget_is_sensitive() will make use of these.
 * @param flags State flags to turn on
 * @param clear Whether to clear state before turning on @flags
 */
set_state_flags(flags: Gtk.StateFlags, clear: boolean): void
/**
 * Used to set the #GtkStyle for a widget (`widget->`style). Since
 * GTK 3, this function does nothing, the passed in style is ignored.
 * @param style a #GtkStyle, or %NULL to remove the effect     of a previous call to gtk_widget_set_style() and go back to     the default style
 */
set_style(style?: (Gtk.Style | null)): void
/**
 * Enables or disables multiple pointer awareness. If this setting is %TRUE,
 * `widget` will start receiving multiple, per device enter/leave events. Note
 * that if custom #GdkWindows are created in #GtkWidget::realize,
 * gdk_window_set_support_multidevice() will have to be called manually on them.
 * @param support_multidevice %TRUE to support input from multiple devices.
 */
set_support_multidevice(support_multidevice: boolean): void
/**
 * Sets `markup` as the contents of the tooltip, which is marked up with
 *  the [Pango text markup language][PangoMarkupFormat].
 * 
 * This function will take care of setting #GtkWidget:has-tooltip to %TRUE
 * and of the default handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-markup property and
 * gtk_tooltip_set_markup().
 * @param markup the contents of the tooltip for @widget, or %NULL
 */
set_tooltip_markup(markup?: (string | null)): void
/**
 * Sets `text` as the contents of the tooltip. This function will take
 * care of setting #GtkWidget:has-tooltip to %TRUE and of the default
 * handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
 * @param text the contents of the tooltip for @widget
 */
set_tooltip_text(text?: (string | null)): void
/**
 * Replaces the default window used for displaying
 * tooltips with `custom_window`. GTK+ will take care of showing and
 * hiding `custom_window` at the right moment, to behave likewise as
 * the default tooltip window. If `custom_window` is %NULL, the default
 * tooltip window will be used.
 * @param custom_window a #GtkWindow, or %NULL
 */
set_tooltip_window(custom_window?: (Gtk.Window | null)): void
/**
 * Sets the vertical alignment of `widget`.
 * See the #GtkWidget:valign property.
 * @param align the vertical alignment
 */
set_valign(align: Gtk.Align): void
/**
 * Sets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_set_hexpand() for more detail.
 * @param expand whether to expand
 */
set_vexpand(expand: boolean): void
/**
 * Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
 * be used.
 * 
 * See gtk_widget_set_hexpand_set() for more detail.
 * @param set value for vexpand-set property
 */
set_vexpand_set(set: boolean): void
/**
 * Sets the visibility state of `widget`. Note that setting this to
 * %TRUE doesn’t mean the widget is actually viewable, see
 * gtk_widget_get_visible().
 * 
 * This function simply calls gtk_widget_show() or gtk_widget_hide()
 * but is nicer to use when the visibility of the widget depends on
 * some condition.
 * @param visible whether the widget should be shown or not
 */
set_visible(visible: boolean): void
/**
 * Sets the visual that should be used for by widget and its children for
 * creating #GdkWindows. The visual must be on the same #GdkScreen as
 * returned by gtk_widget_get_screen(), so handling the
 * #GtkWidget::screen-changed signal is necessary.
 * 
 * Setting a new `visual` will not cause `widget` to recreate its windows,
 * so you should call this function before `widget` is realized.
 * @param visual visual to be used or %NULL to unset a previous one
 */
set_visual(visual?: (Gdk.Visual | null)): void
/**
 * Sets a widget’s window. This function should only be used in a
 * widget’s #GtkWidget::realize implementation. The %window passed is
 * usually either new window created with gdk_window_new(), or the
 * window of its parent widget as returned by
 * gtk_widget_get_parent_window().
 * 
 * Widgets must indicate whether they will create their own #GdkWindow
 * by calling gtk_widget_set_has_window(). This is usually done in the
 * widget’s init() function.
 * 
 * Note that this function does not add any reference to `window`.
 * @param window a #GdkWindow
 */
set_window(window: Gdk.Window): void
/**
 * Sets a shape for this widget’s GDK window. This allows for
 * transparent windows etc., see gdk_window_shape_combine_region()
 * for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
show_all(): void
/**
 * Shows a widget. If the widget is an unmapped toplevel widget
 * (i.e. a #GtkWindow that has not yet been shown), enter the main
 * loop and wait for the window to actually be mapped. Be careful;
 * because the main loop is running, anything can happen during
 * this function.
 */
show_now(): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
size_allocate(allocation: Gtk.Allocation): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size,
 * position and (optionally) baseline to their child widgets.
 * 
 * In this function, the allocation and baseline may be adjusted. It
 * will be forced to a 1x1 minimum size, and the
 * adjust_size_allocation virtual and adjust_baseline_allocation
 * methods on the child will be used to adjust the allocation and
 * baseline. Standard adjustments include removing the widget's
 * margins, and applying the widget’s #GtkWidget:halign and
 * #GtkWidget:valign properties.
 * 
 * If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
 * baseline argument is ignored and -1 is used instead.
 * @param allocation position and size to be allocated to @widget
 * @param baseline The baseline of the child, or -1
 */
size_allocate_with_baseline(allocation: Gtk.Allocation, baseline: number): void
/**
 * This function is typically used when implementing a #GtkContainer
 * subclass.  Obtains the preferred size of a widget. The container
 * uses this information to arrange its child widgets and decide what
 * size allocations to give them with gtk_widget_size_allocate().
 * 
 * You can also call this function from an application, with some
 * caveats. Most notably, getting a size request requires the widget
 * to be associated with a screen, because font information may be
 * needed. Multihead-aware applications should keep this in mind.
 * 
 * Also remember that the size request is not necessarily the size
 * a widget will actually be allocated.
 */
size_request(): Gtk.Requisition
/**
 * This function attaches the widget’s #GtkStyle to the widget's
 * #GdkWindow. It is a replacement for
 * 
 * 
 * ```
 * widget->style = gtk_style_attach (widget->style, widget->window);
 * ```
 * 
 * 
 * and should only ever be called in a derived widget’s “realize”
 * implementation which does not chain up to its parent class'
 * “realize” implementation, because one of the parent classes
 * (finally #GtkWidget) would attach the style itself.
 */
style_attach(): void
/**
 * Gets the value of a style property of `widget`.
 * @param property_name the name of a style property
 * @param value location to return the property value
 */
style_get_property(property_name: string, value: GObject.Value): void
/**
 * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
 * This causes all queued #GtkWidget::child-notify signals on `widget` to be
 * emitted.
 */
thaw_child_notify(): void
/**
 * Translate coordinates relative to `src_widget’`s allocation to coordinates
 * relative to `dest_widget’`s allocations. In order to perform this
 * operation, both widgets must be realized, and must share a common
 * toplevel.
 * @param dest_widget a #GtkWidget
 * @param src_x X position relative to @src_widget
 * @param src_y Y position relative to @src_widget
 * @returns %FALSE if either widget was not realized, or there   was no common ancestor. In this case, nothing is stored in   *@dest_x and *@dest_y. Otherwise %TRUE.
 */
translate_coordinates(dest_widget: Gtk.Widget, src_x: number, src_y: number): [boolean, number, number]
/**
 * Triggers a tooltip query on the display where the toplevel of `widget`
 * is located. See gtk_tooltip_trigger_tooltip_query() for more
 * information.
 */
trigger_tooltip_query(): void
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
unmap(): void
/**
 * This function is only for use in widget implementations.
 * Should be called by implementations of the remove method
 * on #GtkContainer, to dissociate a child from the container.
 */
unparent(): void
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
unrealize(): void
/**
 * Unregisters a #GdkWindow from the widget that was previously set up with
 * gtk_widget_register_window(). You need to call this when the window is
 * no longer used by the widget, such as when you destroy it.
 * @param window a #GdkWindow
 */
unregister_window(window: Gdk.Window): void
/**
 * This function is for use in widget implementations. Turns off flag
 * values for the current widget state (insensitive, prelighted, etc.).
 * See gtk_widget_set_state_flags().
 * @param flags State flags to turn off
 */
unset_state_flags(flags: Gtk.StateFlags): void
vfunc_adjust_baseline_allocation(baseline: number): void
vfunc_adjust_baseline_request(minimum_baseline: number, natural_baseline: number): void
vfunc_adjust_size_allocation(orientation: Gtk.Orientation, minimum_size: number, natural_size: number, allocated_pos: number, allocated_size: number): void
vfunc_adjust_size_request(orientation: Gtk.Orientation, minimum_size: number, natural_size: number): void
vfunc_button_press_event(event: Gdk.EventButton): boolean
vfunc_button_release_event(event: Gdk.EventButton): boolean
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 */
vfunc_can_activate_accel(signal_id: number): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
vfunc_child_notify(child_property: GObject.ParamSpec): void
vfunc_composited_changed(): void
vfunc_compute_expand(hexpand_p: boolean, vexpand_p: boolean): void
vfunc_configure_event(event: Gdk.EventConfigure): boolean
vfunc_damage_event(event: Gdk.EventExpose): boolean
vfunc_delete_event(event: Gdk.EventAny): boolean
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
vfunc_destroy(): void
vfunc_destroy_event(event: Gdk.EventAny): boolean
vfunc_direction_changed(previous_direction: Gtk.TextDirection): void
vfunc_dispatch_child_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_drag_begin(context: Gdk.DragContext): void
vfunc_drag_data_delete(context: Gdk.DragContext): void
vfunc_drag_data_get(context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_data_received(context: Gdk.DragContext, x: number, y: number, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_drop(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_drag_end(context: Gdk.DragContext): void
vfunc_drag_failed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
vfunc_drag_leave(context: Gdk.DragContext, time_: number): void
vfunc_drag_motion(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_draw(cr: cairo.Context): boolean
vfunc_enter_notify_event(event: Gdk.EventCrossing): boolean
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 */
vfunc_event(event: Gdk.Event): boolean
vfunc_focus(direction: Gtk.DirectionType): boolean
vfunc_focus_in_event(event: Gdk.EventFocus): boolean
vfunc_focus_out_event(event: Gdk.EventFocus): boolean
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 */
vfunc_get_accessible(): Atk.Object
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
vfunc_get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
vfunc_get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
vfunc_get_preferred_width_for_height(height: number): [number, number]
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 */
vfunc_get_request_mode(): Gtk.SizeRequestMode
vfunc_grab_broken_event(event: Gdk.EventGrabBroken): boolean
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
vfunc_grab_focus(): void
vfunc_grab_notify(was_grabbed: boolean): void
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
vfunc_hide(): void
vfunc_hierarchy_changed(previous_toplevel: Gtk.Widget): void
vfunc_key_press_event(event: Gdk.EventKey): boolean
vfunc_key_release_event(event: Gdk.EventKey): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 */
vfunc_keynav_failed(direction: Gtk.DirectionType): boolean
vfunc_leave_notify_event(event: Gdk.EventCrossing): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
vfunc_map(): void
vfunc_map_event(event: Gdk.EventAny): boolean
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 */
vfunc_mnemonic_activate(group_cycling: boolean): boolean
vfunc_motion_notify_event(event: Gdk.EventMotion): boolean
vfunc_move_focus(direction: Gtk.DirectionType): void
vfunc_parent_set(previous_parent: Gtk.Widget): void
vfunc_popup_menu(): boolean
vfunc_property_notify_event(event: Gdk.EventProperty): boolean
vfunc_proximity_in_event(event: Gdk.EventProximity): boolean
vfunc_proximity_out_event(event: Gdk.EventProximity): boolean
vfunc_query_tooltip(x: number, y: number, keyboard_tooltip: boolean, tooltip: Gtk.Tooltip): boolean
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
vfunc_queue_draw_region(region: cairo.Region): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
vfunc_realize(): void
vfunc_screen_changed(previous_screen: Gdk.Screen): void
vfunc_scroll_event(event: Gdk.EventScroll): boolean
vfunc_selection_clear_event(event: Gdk.EventSelection): boolean
vfunc_selection_get(selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_selection_notify_event(event: Gdk.EventSelection): boolean
vfunc_selection_received(selection_data: Gtk.SelectionData, time_: number): void
vfunc_selection_request_event(event: Gdk.EventSelection): boolean
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
vfunc_show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
vfunc_show_all(): void
vfunc_show_help(help_type: Gtk.WidgetHelpType): boolean
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
vfunc_size_allocate(allocation: Gtk.Allocation): void
vfunc_state_changed(previous_state: Gtk.StateType): void
vfunc_state_flags_changed(previous_state_flags: Gtk.StateFlags): void
vfunc_style_set(previous_style: Gtk.Style): void
vfunc_style_updated(): void
vfunc_touch_event(event: Gdk.EventTouch): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
vfunc_unmap(): void
vfunc_unmap_event(event: Gdk.EventAny): boolean
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
vfunc_unrealize(): void
vfunc_visibility_notify_event(event: Gdk.EventVisibility): boolean
vfunc_window_state_event(event: Gdk.EventWindowState): boolean
}

module Tab {

    // Signal callback interfaces

    interface Clicked {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProps extends Bin.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Actionable.ConstructorProps, Gtk.Buildable.ConstructorProps {
active: boolean;
    can_close: boolean;
    canClose: boolean;
    edge: Gtk.PositionType;
    style: TabStyle | any;
    title: string;
    widget: Gtk.Widget | any;
    }

}

class Tab extends Bin implements Atk.ImplementorIface, Gtk.Actionable, Gtk.Buildable {

    // Own properties of Dazzle.Tab

    get active(): boolean;
    set active(val: boolean);
    get can_close(): boolean;
    set can_close(val: boolean);
    get canClose(): boolean;
    set canClose(val: boolean);
    get edge(): Gtk.PositionType;
    set edge(val: Gtk.PositionType);
// This accessor conflicts with another accessor's type in a parent class or interface.
    get style(): TabStyle | any;
// This accessor conflicts with another accessor's type in a parent class or interface.
    set style(val: TabStyle | any);
    get title(): string;
    set title(val: string);
// This accessor conflicts with a property or field in a parent class or interface.
     widget: Gtk.Widget | any;

    // Constructors of Dazzle.Tab


constructor(properties?: Partial<Tab.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own signals of Dazzle.Tab

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'clicked', callback: ((_source: this) => void)): number
    connect_after(signal: 'clicked', callback: ((_source: this) => void)): number
    emit(signal: 'clicked'): void

    // Own methods of Dazzle.Tab

    get_active(): boolean
    get_can_close(): boolean
    get_edge(): Gtk.PositionType
    get_icon_name(): string
    get_style(): TabStyle
    get_style(...args: never[]): any
    get_title(): string
    get_widget(): (Gtk.Widget | null)
    set_active(active: boolean): void
    set_can_close(can_close: boolean): void
    set_edge(edge: Gtk.PositionType): void
    set_gicon(gicon: Gio.Icon): void
    set_icon_name(icon_name: string): void
    set_style(style: TabStyle): void
    set_style(...args: never[]): any
    set_title(title: string): void
    set_widget(widget: Gtk.Widget): void

// Inherited properties
get action_name(): string;
set action_name(val: string);
get actionName(): string;
set actionName(val: string);
get action_target(): GLib.Variant;
set action_target(val: GLib.Variant);
get actionTarget(): GLib.Variant;
set actionTarget(val: GLib.Variant);
get app_paintable(): boolean;
set app_paintable(val: boolean);
get appPaintable(): boolean;
set appPaintable(val: boolean);
get can_default(): boolean;
set can_default(val: boolean);
get canDefault(): boolean;
set canDefault(val: boolean);
get can_focus(): boolean;
set can_focus(val: boolean);
get canFocus(): boolean;
set canFocus(val: boolean);
get composite_child(): boolean;
get compositeChild(): boolean;
/**
 * Whether the widget is double buffered.
 */
get double_buffered(): boolean;
set double_buffered(val: boolean);
/**
 * Whether the widget is double buffered.
 */
get doubleBuffered(): boolean;
set doubleBuffered(val: boolean);
get events(): Gdk.EventMask;
set events(val: Gdk.EventMask);
/**
 * Whether to expand in both directions. Setting this sets both #GtkWidget:hexpand and #GtkWidget:vexpand
 */
get expand(): boolean;
set expand(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focus_on_click(): boolean;
set focus_on_click(val: boolean);
/**
 * Whether the widget should grab focus when it is clicked with the mouse.
 * 
 * This property is only relevant for widgets that can take focus.
 * 
 * Before 3.20, several widgets (GtkButton, GtkFileChooserButton,
 * GtkComboBox) implemented this property individually.
 */
get focusOnClick(): boolean;
set focusOnClick(val: boolean);
/**
 * How to distribute horizontal space if widget gets extra space, see #GtkAlign
 */
get halign(): Gtk.Align;
set halign(val: Gtk.Align);
get has_default(): boolean;
set has_default(val: boolean);
get hasDefault(): boolean;
set hasDefault(val: boolean);
get has_focus(): boolean;
set has_focus(val: boolean);
get hasFocus(): boolean;
set hasFocus(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get has_tooltip(): boolean;
set has_tooltip(val: boolean);
/**
 * Enables or disables the emission of #GtkWidget::query-tooltip on `widget`.
 * A value of %TRUE indicates that `widget` can have a tooltip, in this case
 * the widget will be queried using #GtkWidget::query-tooltip to determine
 * whether it will provide a tooltip or not.
 * 
 * Note that setting this property to %TRUE for the first time will change
 * the event masks of the GdkWindows of this widget to include leave-notify
 * and motion-notify events.  This cannot and will not be undone when the
 * property is set to %FALSE again.
 */
get hasTooltip(): boolean;
set hasTooltip(val: boolean);
get height_request(): number;
set height_request(val: number);
get heightRequest(): number;
set heightRequest(val: number);
/**
 * Whether to expand horizontally. See gtk_widget_set_hexpand().
 */
get hexpand(): boolean;
set hexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpand_set(): boolean;
set hexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:hexpand property. See gtk_widget_get_hexpand_set().
 */
get hexpandSet(): boolean;
set hexpandSet(val: boolean);
get is_focus(): boolean;
set is_focus(val: boolean);
get isFocus(): boolean;
set isFocus(val: boolean);
/**
 * Sets all four sides' margin at once. If read, returns max
 * margin on any side.
 */
get margin(): number;
set margin(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_bottom(): number;
set margin_bottom(val: number);
/**
 * Margin on bottom side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginBottom(): number;
set marginBottom(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_end(): number;
set margin_end(val: number);
/**
 * Margin on end of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginEnd(): number;
set marginEnd(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_left(): number;
set margin_left(val: number);
/**
 * Margin on left side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginLeft(): number;
set marginLeft(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_right(): number;
set margin_right(val: number);
/**
 * Margin on right side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginRight(): number;
set marginRight(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_start(): number;
set margin_start(val: number);
/**
 * Margin on start of widget, horizontally. This property supports
 * left-to-right and right-to-left text directions.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginStart(): number;
set marginStart(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get margin_top(): number;
set margin_top(val: number);
/**
 * Margin on top side of widget.
 * 
 * This property adds margin outside of the widget's normal size
 * request, the margin will be added in addition to the size from
 * gtk_widget_set_size_request() for example.
 */
get marginTop(): number;
set marginTop(val: number);
get name(): string;
set name(val: string);
get no_show_all(): boolean;
set no_show_all(val: boolean);
get noShowAll(): boolean;
set noShowAll(val: boolean);
/**
 * The requested opacity of the widget. See gtk_widget_set_opacity() for
 * more details about window opacity.
 * 
 * Before 3.8 this was only available in GtkWindow
 */
get opacity(): number;
set opacity(val: number);
get parent(): Gtk.Container;
set parent(val: Gtk.Container);
get receives_default(): boolean;
set receives_default(val: boolean);
get receivesDefault(): boolean;
set receivesDefault(val: boolean);
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scale_factor(): number;
/**
 * The scale factor of the widget. See gtk_widget_get_scale_factor() for
 * more details about widget scaling.
 */
get scaleFactor(): number;
get sensitive(): boolean;
set sensitive(val: boolean);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_markup(): string;
set tooltip_markup(val: string);
/**
 * Sets the text of tooltip to be the given string, which is marked up
 * with the [Pango text markup language][PangoMarkupFormat].
 * Also see gtk_tooltip_set_markup().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipMarkup(): string;
set tooltipMarkup(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltip_text(): string;
set tooltip_text(val: string);
/**
 * Sets the text of tooltip to be the given string.
 * 
 * Also see gtk_tooltip_set_text().
 * 
 * This is a convenience property which will take care of getting the
 * tooltip shown if the given string is not %NULL: #GtkWidget:has-tooltip
 * will automatically be set to %TRUE and there will be taken care of
 * #GtkWidget::query-tooltip in the default signal handler.
 * 
 * Note that if both #GtkWidget:tooltip-text and #GtkWidget:tooltip-markup
 * are set, the last one wins.
 */
get tooltipText(): string;
set tooltipText(val: string);
/**
 * How to distribute vertical space if widget gets extra space, see #GtkAlign
 */
get valign(): Gtk.Align;
set valign(val: Gtk.Align);
/**
 * Whether to expand vertically. See gtk_widget_set_vexpand().
 */
get vexpand(): boolean;
set vexpand(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpand_set(): boolean;
set vexpand_set(val: boolean);
/**
 * Whether to use the #GtkWidget:vexpand property. See gtk_widget_get_vexpand_set().
 */
get vexpandSet(): boolean;
set vexpandSet(val: boolean);
get visible(): boolean;
set visible(val: boolean);
get width_request(): number;
set width_request(val: number);
get widthRequest(): number;
set widthRequest(val: number);
/**
 * The widget's window if it is realized, %NULL otherwise.
 */
get window(): Gdk.Window;

// Inherited methods
/**
 * Gets the action name for `actionable`.
 * 
 * See gtk_actionable_set_action_name() for more information.
 * @returns the action name, or %NULL if none is set
 */
get_action_name(): (string | null)
/**
 * Gets the current target value of `actionable`.
 * 
 * See gtk_actionable_set_action_target_value() for more information.
 * @returns the current target value
 */
get_action_target_value(): GLib.Variant
/**
 * Specifies the name of the action with which this widget should be
 * associated.  If `action_name` is %NULL then the widget will be
 * unassociated from any previous action.
 * 
 * Usually this function is used when the widget is located (or will be
 * located) within the hierarchy of a #GtkApplicationWindow.
 * 
 * Names are of the form “win.save” or “app.quit” for actions on the
 * containing #GtkApplicationWindow or its associated #GtkApplication,
 * respectively.  This is the same form used for actions in the #GMenu
 * associated with the window.
 * @param action_name an action name, or %NULL
 */
set_action_name(action_name?: (string | null)): void
/**
 * Sets the target value of an actionable widget.
 * 
 * If `target_value` is %NULL then the target value is unset.
 * 
 * The target value has two purposes.  First, it is used as the
 * parameter to activation of the action associated with the
 * #GtkActionable widget. Second, it is used to determine if the widget
 * should be rendered as “active” — the widget is active if the state
 * is equal to the given target.
 * 
 * Consider the example of associating a set of buttons with a #GAction
 * with string state in a typical “radio button” situation.  Each button
 * will be associated with the same action, but with a different target
 * value for that action.  Clicking on a particular button will activate
 * the action with the target of that button, which will typically cause
 * the action’s state to change to that value.  Since the action’s state
 * is now equal to the target value of the button, the button will now
 * be rendered as active (and the other buttons, with different targets,
 * rendered inactive).
 * @param target_value a #GVariant to set as the target value, or %NULL
 */
set_action_target_value(target_value?: (GLib.Variant | null)): void
/**
 * Sets the action-name and associated string target value of an
 * actionable widget.
 * 
 * `detailed_action_name` is a string in the format accepted by
 * g_action_parse_detailed_name().
 * 
 * (Note that prior to version 3.22.25,
 * this function is only usable for actions with a simple "s" target, and
 * `detailed_action_name` must be of the form `"action::target"` where
 * `action` is the action name and `target` is the string to use
 * as the target.)
 * @param detailed_action_name the detailed action name
 */
set_detailed_action_name(detailed_action_name: string): void
/**
 * Gets the action name for `actionable`.
 * 
 * See gtk_actionable_set_action_name() for more information.
 */
vfunc_get_action_name(): (string | null)
/**
 * Gets the current target value of `actionable`.
 * 
 * See gtk_actionable_set_action_target_value() for more information.
 */
vfunc_get_action_target_value(): GLib.Variant
/**
 * Specifies the name of the action with which this widget should be
 * associated.  If `action_name` is %NULL then the widget will be
 * unassociated from any previous action.
 * 
 * Usually this function is used when the widget is located (or will be
 * located) within the hierarchy of a #GtkApplicationWindow.
 * 
 * Names are of the form “win.save” or “app.quit” for actions on the
 * containing #GtkApplicationWindow or its associated #GtkApplication,
 * respectively.  This is the same form used for actions in the #GMenu
 * associated with the window.
 * @param action_name an action name, or %NULL
 */
vfunc_set_action_name(action_name?: (string | null)): void
/**
 * Sets the target value of an actionable widget.
 * 
 * If `target_value` is %NULL then the target value is unset.
 * 
 * The target value has two purposes.  First, it is used as the
 * parameter to activation of the action associated with the
 * #GtkActionable widget. Second, it is used to determine if the widget
 * should be rendered as “active” — the widget is active if the state
 * is equal to the given target.
 * 
 * Consider the example of associating a set of buttons with a #GAction
 * with string state in a typical “radio button” situation.  Each button
 * will be associated with the same action, but with a different target
 * value for that action.  Clicking on a particular button will activate
 * the action with the target of that button, which will typically cause
 * the action’s state to change to that value.  Since the action’s state
 * is now equal to the target value of the button, the button will now
 * be rendered as active (and the other buttons, with different targets,
 * rendered inactive).
 * @param target_value a #GVariant to set as the target value, or %NULL
 */
vfunc_set_action_target_value(target_value?: (GLib.Variant | null)): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
/**
 * For widgets that can be “activated” (buttons, menu items, etc.)
 * this function activates them. Activation is what happens when you
 * press Enter on a widget during key navigation. If `widget` isn't
 * activatable, the function returns %FALSE.
 * @returns %TRUE if the widget was activatable
 */
activate(): boolean
/**
 * Installs an accelerator for this `widget` in `accel_group` that causes
 * `accel_signal` to be emitted if the accelerator is activated.
 * The `accel_group` needs to be added to the widget’s toplevel via
 * gtk_window_add_accel_group(), and the signal must be of type %G_SIGNAL_ACTION.
 * Accelerators added through this function are not user changeable during
 * runtime. If you want to support accelerators that can be changed by the
 * user, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() or
 * gtk_menu_item_set_accel_path() instead.
 * @param accel_signal widget signal to emit on accelerator activation
 * @param accel_group accel group for this widget, added to its toplevel
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @param accel_flags flag accelerators, e.g. %GTK_ACCEL_VISIBLE
 */
add_accelerator(accel_signal: string, accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType, accel_flags: Gtk.AccelFlags): void
/**
 * Adds the device events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_device_events() for details.
 * @param device a #GdkDevice
 * @param events an event mask, see #GdkEventMask
 */
add_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Adds the events in the bitfield `events` to the event mask for
 * `widget`. See gtk_widget_set_events() and the
 * [input handling overview][event-masks] for details.
 * @param events an event mask, see #GdkEventMask
 */
add_events(events: number): void
/**
 * Adds a widget to the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). Note the
 * list of mnemonic labels for the widget is cleared when the
 * widget is destroyed, so the caller must make sure to update
 * its internal state at this point as well, by using a connection
 * to the #GtkWidget::destroy signal or a weak notifier.
 * @param label a #GtkWidget that acts as a mnemonic label for @widget
 */
add_mnemonic_label(label: Gtk.Widget): void
/**
 * Queues an animation frame update and adds a callback to be called
 * before each frame. Until the tick callback is removed, it will be
 * called frequently (usually at the frame rate of the output device
 * or as quickly as the application can be repainted, whichever is
 * slower). For this reason, is most suitable for handling graphics
 * that change every frame or every few frames. The tick callback does
 * not automatically imply a relayout or repaint. If you want a
 * repaint or relayout, and aren’t changing widget properties that
 * would trigger that (for example, changing the text of a #GtkLabel),
 * then you will have to call gtk_widget_queue_resize() or
 * gtk_widget_queue_draw_area() yourself.
 * 
 * gdk_frame_clock_get_frame_time() should generally be used for timing
 * continuous animations and
 * gdk_frame_timings_get_predicted_presentation_time() if you are
 * trying to display isolated frames at particular times.
 * 
 * This is a more convenient alternative to connecting directly to the
 * #GdkFrameClock::update signal of #GdkFrameClock, since you don't
 * have to worry about when a #GdkFrameClock is assigned to a widget.
 * @param callback function to call for updating animations
 * @returns an id for the connection of this callback. Remove the callback     by passing it to gtk_widget_remove_tick_callback()
 */
add_tick_callback(callback: Gtk.TickCallback): number
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 * @returns %TRUE if the accelerator can be activated.
 */
can_activate_accel(signal_id: number): boolean
/**
 * This function is used by custom widget implementations; if you're
 * writing an app, you’d use gtk_widget_grab_focus() to move the focus
 * to a particular widget, and gtk_container_set_focus_chain() to
 * change the focus tab order. So you may want to investigate those
 * functions instead.
 * 
 * gtk_widget_child_focus() is called by containers as the user moves
 * around the window using keyboard shortcuts. `direction` indicates
 * what kind of motion is taking place (up, down, left, right, tab
 * forward, tab backward). gtk_widget_child_focus() emits the
 * #GtkWidget::focus signal; widgets override the default handler
 * for this signal in order to implement appropriate focus behavior.
 * 
 * The default ::focus handler for a widget should return %TRUE if
 * moving in `direction` left the focus on a focusable location inside
 * that widget, and %FALSE if moving in `direction` moved the focus
 * outside the widget. If returning %TRUE, widgets normally
 * call gtk_widget_grab_focus() to place the focus accordingly;
 * if returning %FALSE, they don’t modify the current focus location.
 * @param direction direction of focus movement
 * @returns %TRUE if focus ended up inside @widget
 */
child_focus(direction: Gtk.DirectionType): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
child_notify(child_property: string): void
child_notify(...args: never[]): any
/**
 * Same as gtk_widget_path(), but always uses the name of a widget’s type,
 * never uses a custom name set with gtk_widget_set_name().
 */
class_path(): [number, string, string]
/**
 * Computes whether a container should give this widget extra space
 * when possible. Containers should check this, rather than
 * looking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand().
 * 
 * This function already checks whether the widget is visible, so
 * visibility does not need to be checked separately. Non-visible
 * widgets are not expanded.
 * 
 * The computed expand value uses either the expand setting explicitly
 * set on the widget itself, or, if none has been explicitly set,
 * the widget may expand if some of its children do.
 * @param orientation expand direction
 * @returns whether widget tree rooted here should be expanded
 */
compute_expand(orientation: Gtk.Orientation): boolean
/**
 * Creates a new #PangoContext with the appropriate font map,
 * font options, font description, and base direction for drawing
 * text for this widget. See also gtk_widget_get_pango_context().
 * @returns the new #PangoContext
 */
create_pango_context(): Pango.Context
/**
 * Creates a new #PangoLayout with the appropriate font map,
 * font description, and base direction for drawing text for
 * this widget.
 * 
 * If you keep a #PangoLayout created in this way around, you need
 * to re-create it when the widget #PangoContext is replaced.
 * This can be tracked by using the #GtkWidget::screen-changed signal
 * on the widget.
 * @param text text to set on the layout (can be %NULL)
 * @returns the new #PangoLayout
 */
create_pango_layout(text?: (string | null)): Pango.Layout
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
destroy(): void
/**
 * This function sets *`widget_pointer` to %NULL if `widget_pointer` !=
 * %NULL.  It’s intended to be used as a callback connected to the
 * “destroy” signal of a widget. You connect gtk_widget_destroyed()
 * as a signal handler, and pass the address of your widget variable
 * as user data. Then when the widget is destroyed, the variable will
 * be set to %NULL. Useful for example to avoid multiple copies
 * of the same dialog.
 * @param widget_pointer address of a variable that contains @widget
 */
destroyed(widget_pointer: Gtk.Widget): Gtk.Widget
/**
 * Returns %TRUE if `device` has been shadowed by a GTK+
 * device grab on another widget, so it would stop sending
 * events to `widget`. This may be used in the
 * #GtkWidget::grab-notify signal to check for specific
 * devices. See gtk_device_grab_add().
 * @param device a #GdkDevice
 * @returns %TRUE if there is an ongoing grab on @device          by another #GtkWidget than @widget.
 */
device_is_shadowed(device: Gdk.Device): boolean
/**
 * This function is equivalent to gtk_drag_begin_with_coordinates(),
 * passing -1, -1 as coordinates.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @returns the context for this drag
 */
drag_begin(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event?: (Gdk.Event | null)): Gdk.DragContext
/**
 * Initiates a drag on the source side. The function only needs to be used
 * when the application is starting drags itself, and is not needed when
 * gtk_drag_source_set() is used.
 * 
 * The `event` is used to retrieve the timestamp that will be used internally to
 * grab the pointer.  If `event` is %NULL, then %GDK_CURRENT_TIME will be used.
 * However, you should try to pass a real event in all cases, since that can be
 * used to get information about the drag.
 * 
 * Generally there are three cases when you want to start a drag by hand by
 * calling this function:
 * 
 * 1. During a #GtkWidget::button-press-event handler, if you want to start a drag
 * immediately when the user presses the mouse button.  Pass the `event`
 * that you have in your #GtkWidget::button-press-event handler.
 * 
 * 2. During a #GtkWidget::motion-notify-event handler, if you want to start a drag
 * when the mouse moves past a certain threshold distance after a button-press.
 * Pass the `event` that you have in your #GtkWidget::motion-notify-event handler.
 * 
 * 3. During a timeout handler, if you want to start a drag after the mouse
 * button is held down for some time.  Try to save the last event that you got
 * from the mouse, using gdk_event_copy(), and pass it to this function
 * (remember to free the event with gdk_event_free() when you are done).
 * If you really cannot pass a real event, pass %NULL instead.
 * @param targets The targets (data formats) in which the    source can provide the data
 * @param actions A bitmask of the allowed drag actions for this drag
 * @param button The button the user clicked to start the drag
 * @param event The event that triggered the start of the drag,    or %NULL if none can be obtained.
 * @param x The initial x coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @param y The initial y coordinate to start dragging from, in the coordinate space    of @widget. If -1 is passed, the coordinates are retrieved from @event or    the current pointer position
 * @returns the context for this drag
 */
drag_begin_with_coordinates(targets: Gtk.TargetList, actions: Gdk.DragAction, button: number, event: (Gdk.Event | null), x: number, y: number): Gdk.DragContext
/**
 * Checks to see if a mouse drag starting at (`start_x,` `start_y)` and ending
 * at (`current_x,` `current_y)` has passed the GTK+ drag threshold, and thus
 * should trigger the beginning of a drag-and-drop operation.
 * @param start_x X coordinate of start of drag
 * @param start_y Y coordinate of start of drag
 * @param current_x current X coordinate
 * @param current_y current Y coordinate
 * @returns %TRUE if the drag threshold has been passed.
 */
drag_check_threshold(start_x: number, start_y: number, current_x: number, current_y: number): boolean
/**
 * Add the image targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag destination. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_dest_set_target_list().
 */
drag_dest_add_uri_targets(): void
/**
 * Looks for a match between the supported targets of `context` and the
 * `dest_target_list,` returning the first matching target, otherwise
 * returning %GDK_NONE. `dest_target_list` should usually be the return
 * value from gtk_drag_dest_get_target_list(), but some widgets may
 * have different valid targets for different parts of the widget; in
 * that case, they will have to implement a drag_motion handler that
 * passes the correct target list to this function.
 * @param context drag context
 * @param target_list list of droppable targets, or %NULL to use    gtk_drag_dest_get_target_list (@widget).
 * @returns first target that the source offers     and the dest can accept, or %GDK_NONE
 */
drag_dest_find_target(context: Gdk.DragContext, target_list?: (Gtk.TargetList | null)): Gdk.Atom
/**
 * Returns the list of targets this widget can accept from
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_dest_get_target_list(): (Gtk.TargetList | null)
/**
 * Returns whether the widget has been configured to always
 * emit #GtkWidget::drag-motion signals.
 * @returns %TRUE if the widget always emits   #GtkWidget::drag-motion events
 */
drag_dest_get_track_motion(): boolean
/**
 * Sets a widget as a potential drop destination, and adds default behaviors.
 * 
 * The default behaviors listed in `flags` have an effect similar
 * to installing default handlers for the widget’s drag-and-drop signals
 * (#GtkWidget::drag-motion, #GtkWidget::drag-drop, ...). They all exist
 * for convenience. When passing #GTK_DEST_DEFAULT_ALL for instance it is
 * sufficient to connect to the widget’s #GtkWidget::drag-data-received
 * signal to get primitive, but consistent drag-and-drop support.
 * 
 * Things become more complicated when you try to preview the dragged data,
 * as described in the documentation for #GtkWidget::drag-motion. The default
 * behaviors described by `flags` make some assumptions, that can conflict
 * with your own signal handlers. For instance #GTK_DEST_DEFAULT_DROP causes
 * invokations of gdk_drag_status() in the context of #GtkWidget::drag-motion,
 * and invokations of gtk_drag_finish() in #GtkWidget::drag-data-received.
 * Especially the later is dramatic, when your own #GtkWidget::drag-motion
 * handler calls gtk_drag_get_data() to inspect the dragged data.
 * 
 * There’s no way to set a default action here, you can use the
 * #GtkWidget::drag-motion callback for that. Here’s an example which selects
 * the action to use depending on whether the control key is pressed or not:
 * 
 * ```c
 * static void
 * drag_motion (GtkWidget *widget,
 *              GdkDragContext *context,
 *              gint x,
 *              gint y,
 *              guint time)
 * {
 *   GdkModifierType mask;
 * 
 *   gdk_window_get_pointer (gtk_widget_get_window (widget),
 *                           NULL, NULL, &mask);
 *   if (mask & GDK_CONTROL_MASK)
 *     gdk_drag_status (context, GDK_ACTION_COPY, time);
 *   else
 *     gdk_drag_status (context, GDK_ACTION_MOVE, time);
 * }
 * ```
 * 
 * @param flags which types of default drag behavior to use
 * @param targets a pointer to an array of     #GtkTargetEntrys indicating the drop types that this @widget will     accept, or %NULL. Later you can access the list with     gtk_drag_dest_get_target_list() and gtk_drag_dest_find_target().
 * @param actions a bitmask of possible actions for a drop onto this @widget.
 */
drag_dest_set(flags: Gtk.DestDefaults, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets this widget as a proxy for drops to another window.
 * @param proxy_window the window to which to forward drag events
 * @param protocol the drag protocol which the @proxy_window accepts   (You can use gdk_drag_get_protocol() to determine this)
 * @param use_coordinates If %TRUE, send the same coordinates to the   destination, because it is an embedded   subwindow.
 */
drag_dest_set_proxy(proxy_window: Gdk.Window, protocol: Gdk.DragProtocol, use_coordinates: boolean): void
/**
 * Sets the target types that this widget can accept from drag-and-drop.
 * The widget must first be made into a drag destination with
 * gtk_drag_dest_set().
 * @param target_list list of droppable targets, or %NULL for none
 */
drag_dest_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Tells the widget to emit #GtkWidget::drag-motion and
 * #GtkWidget::drag-leave events regardless of the targets and the
 * %GTK_DEST_DEFAULT_MOTION flag.
 * 
 * This may be used when a widget wants to do generic
 * actions regardless of the targets that the source offers.
 * @param track_motion whether to accept all targets
 */
drag_dest_set_track_motion(track_motion: boolean): void
/**
 * Clears information about a drop destination set with
 * gtk_drag_dest_set(). The widget will no longer receive
 * notification of drags.
 */
drag_dest_unset(): void
/**
 * Gets the data associated with a drag. When the data
 * is received or the retrieval fails, GTK+ will emit a
 * #GtkWidget::drag-data-received signal. Failure of the retrieval
 * is indicated by the length field of the `selection_data`
 * signal parameter being negative. However, when gtk_drag_get_data()
 * is called implicitely because the %GTK_DEST_DEFAULT_DROP was set,
 * then the widget will not receive notification of failed
 * drops.
 * @param context the drag context
 * @param target the target (form of the data) to retrieve
 * @param time_ a timestamp for retrieving the data. This will   generally be the time received in a #GtkWidget::drag-motion   or #GtkWidget::drag-drop signal
 */
drag_get_data(context: Gdk.DragContext, target: Gdk.Atom, time_: number): void
/**
 * Highlights a widget as a currently hovered drop target.
 * To end the highlight, call gtk_drag_unhighlight().
 * GTK+ calls this automatically if %GTK_DEST_DEFAULT_HIGHLIGHT is set.
 */
drag_highlight(): void
/**
 * Add the writable image targets supported by #GtkSelectionData to
 * the target list of the drag source. The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_image_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_image_targets(): void
/**
 * Add the text targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_text_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_text_targets(): void
/**
 * Add the URI targets supported by #GtkSelectionData to
 * the target list of the drag source.  The targets
 * are added with `info` = 0. If you need another value,
 * use gtk_target_list_add_uri_targets() and
 * gtk_drag_source_set_target_list().
 */
drag_source_add_uri_targets(): void
/**
 * Gets the list of targets this widget can provide for
 * drag-and-drop.
 * @returns the #GtkTargetList, or %NULL if none
 */
drag_source_get_target_list(): (Gtk.TargetList | null)
/**
 * Sets up a widget so that GTK+ will start a drag operation when the user
 * clicks and drags on the widget. The widget must have a window.
 * @param start_button_mask the bitmask of buttons that can start the drag
 * @param targets the table of targets     that the drag will support, may be %NULL
 * @param actions the bitmask of possible actions for a drag from this widget
 */
drag_source_set(start_button_mask: Gdk.ModifierType, targets: (Gtk.TargetEntry[] | null), actions: Gdk.DragAction): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to `icon`. See the docs for #GtkIconTheme for more details.
 * @param icon A #GIcon
 */
drag_source_set_icon_gicon(icon: Gio.Icon): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a themed icon. See the docs for #GtkIconTheme for more details.
 * @param icon_name name of icon to use
 */
drag_source_set_icon_name(icon_name: string): void
/**
 * Sets the icon that will be used for drags from a particular widget
 * from a #GdkPixbuf. GTK+ retains a reference for `pixbuf` and will
 * release it when it is no longer needed.
 * @param pixbuf the #GdkPixbuf for the drag icon
 */
drag_source_set_icon_pixbuf(pixbuf: GdkPixbuf.Pixbuf): void
/**
 * Sets the icon that will be used for drags from a particular source
 * to a stock icon.
 * @param stock_id the ID of the stock icon to use
 */
drag_source_set_icon_stock(stock_id: string): void
/**
 * Changes the target types that this widget offers for drag-and-drop.
 * The widget must first be made into a drag source with
 * gtk_drag_source_set().
 * @param target_list list of draggable targets, or %NULL for none
 */
drag_source_set_target_list(target_list?: (Gtk.TargetList | null)): void
/**
 * Undoes the effects of gtk_drag_source_set().
 */
drag_source_unset(): void
/**
 * Removes a highlight set by gtk_drag_highlight() from
 * a widget.
 */
drag_unhighlight(): void
/**
 * Draws `widget` to `cr`. The top left corner of the widget will be
 * drawn to the currently set origin point of `cr`.
 * 
 * You should pass a cairo context as `cr` argument that is in an
 * original state. Otherwise the resulting drawing is undefined. For
 * example changing the operator using cairo_set_operator() or the
 * line width using cairo_set_line_width() might have unwanted side
 * effects.
 * You may however change the context’s transform matrix - like with
 * cairo_scale(), cairo_translate() or cairo_set_matrix() and clip
 * region with cairo_clip() prior to calling this function. Also, it
 * is fine to modify the context with cairo_save() and
 * cairo_push_group() prior to calling this function.
 * 
 * Note that special-purpose widgets may contain special code for
 * rendering to the screen and might appear differently on screen
 * and when rendered using gtk_widget_draw().
 * @param cr a cairo context to draw to
 */
draw(cr: cairo.Context): void
/**
 * Ensures that `widget` has a style (`widget->`style).
 * 
 * Not a very useful function; most of the time, if you
 * want the style, the widget is realized, and realized
 * widgets are guaranteed to have a style already.
 */
ensure_style(): void
/**
 * Notifies the user about an input-related error on this widget.
 * If the #GtkSettings:gtk-error-bell setting is %TRUE, it calls
 * gdk_window_beep(), otherwise it does nothing.
 * 
 * Note that the effect of gdk_window_beep() can be configured in many
 * ways, depending on the windowing backend and the desktop environment
 * or window manager that is used.
 */
error_bell(): void
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 * @returns return from the event signal emission (%TRUE if               the event was handled)
 */
event(event: Gdk.Event): boolean
/**
 * Stops emission of #GtkWidget::child-notify signals on `widget`. The
 * signals are queued until gtk_widget_thaw_child_notify() is called
 * on `widget`.
 * 
 * This is the analogue of g_object_freeze_notify() for child properties.
 */
freeze_child_notify(): void
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 * @returns the #AtkObject associated with @widget
 */
get_accessible(): Atk.Object
/**
 * Retrieves the #GActionGroup that was registered using `prefix`. The resulting
 * #GActionGroup may have been registered to `widget` or any #GtkWidget in its
 * ancestry.
 * 
 * If no action group was found matching `prefix,` then %NULL is returned.
 * @param prefix The “prefix” of the action group.
 * @returns A #GActionGroup or %NULL.
 */
get_action_group(prefix: string): (Gio.ActionGroup | null)
/**
 * Returns the baseline that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function, and when allocating child
 * widgets in #GtkWidget::size_allocate.
 * @returns the baseline of the @widget, or -1 if none
 */
get_allocated_baseline(): number
/**
 * Returns the height that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the height of the @widget
 */
get_allocated_height(): number
/**
 * Retrieves the widget’s allocated size.
 * 
 * This function returns the last values passed to
 * gtk_widget_size_allocate_with_baseline(). The value differs from
 * the size returned in gtk_widget_get_allocation() in that functions
 * like gtk_widget_set_halign() can adjust the allocation, but not
 * the value returned by this function.
 * 
 * If a widget is not visible, its allocated size is 0.
 */
get_allocated_size(): [Gtk.Allocation, number]
/**
 * Returns the width that has currently been allocated to `widget`.
 * This function is intended to be used when implementing handlers
 * for the #GtkWidget::draw function.
 * @returns the width of the @widget
 */
get_allocated_width(): number
/**
 * Retrieves the widget’s allocation.
 * 
 * Note, when implementing a #GtkContainer: a widget’s allocation will
 * be its “adjusted” allocation, that is, the widget’s parent
 * container typically calls gtk_widget_size_allocate() with an
 * allocation, and that allocation is then adjusted (to handle margin
 * and alignment for example) before assignment to the widget.
 * gtk_widget_get_allocation() returns the adjusted allocation that
 * was actually assigned to the widget. The adjusted allocation is
 * guaranteed to be completely contained within the
 * gtk_widget_size_allocate() allocation, however. So a #GtkContainer
 * is guaranteed that its children stay inside the assigned bounds,
 * but not that they have exactly the bounds the container assigned.
 * There is no way to get the original allocation assigned by
 * gtk_widget_size_allocate(), since it isn’t stored; if a container
 * implementation needs that information it will have to track it itself.
 */
get_allocation(): Gtk.Allocation
/**
 * Gets the first ancestor of `widget` with type `widget_type`. For example,
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_BOX)` gets
 * the first #GtkBox that’s an ancestor of `widget`. No reference will be
 * added to the returned widget; it should not be unreferenced. See note
 * about checking for a toplevel #GtkWindow in the docs for
 * gtk_widget_get_toplevel().
 * 
 * Note that unlike gtk_widget_is_ancestor(), gtk_widget_get_ancestor()
 * considers `widget` to be an ancestor of itself.
 * @param widget_type ancestor type
 * @returns the ancestor widget, or %NULL if not found
 */
get_ancestor(widget_type: GObject.GType): (Gtk.Widget | null)
/**
 * Determines whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * See gtk_widget_set_app_paintable()
 * @returns %TRUE if the widget is app paintable
 */
get_app_paintable(): boolean
/**
 * Determines whether `widget` can be a default widget. See
 * gtk_widget_set_can_default().
 * @returns %TRUE if @widget can be a default widget, %FALSE otherwise
 */
get_can_default(): boolean
/**
 * Determines whether `widget` can own the input focus. See
 * gtk_widget_set_can_focus().
 * @returns %TRUE if @widget can own the input focus, %FALSE otherwise
 */
get_can_focus(): boolean
/**
 * This function is only for use in widget implementations. Obtains
 * `widget->`requisition, unless someone has forced a particular
 * geometry on the widget (e.g. with gtk_widget_set_size_request()),
 * in which case it returns that geometry instead of the widget's
 * requisition.
 * 
 * This function differs from gtk_widget_size_request() in that
 * it retrieves the last size request value from `widget->`requisition,
 * while gtk_widget_size_request() actually calls the "size_request" method
 * on `widget` to compute the size request and fill in `widget->`requisition,
 * and only then returns `widget->`requisition.
 * 
 * Because this function does not call the “size_request” method, it
 * can only be used when you know that `widget->`requisition is
 * up-to-date, that is, gtk_widget_size_request() has been called
 * since the last time a resize was queued. In general, only container
 * implementations have this information; applications should use
 * gtk_widget_size_request().
 */
get_child_requisition(): Gtk.Requisition
/**
 * Gets the value set with gtk_widget_set_child_visible().
 * If you feel a need to use this function, your code probably
 * needs reorganization.
 * 
 * This function is only useful for container implementations and
 * never should be called by an application.
 * @returns %TRUE if the widget is mapped with the parent.
 */
get_child_visible(): boolean
/**
 * Retrieves the widget’s clip area.
 * 
 * The clip area is the area in which all of `widget'`s drawing will
 * happen. Other toolkits call it the bounding box.
 * 
 * Historically, in GTK+ the clip area has been equal to the allocation
 * retrieved via gtk_widget_get_allocation().
 */
get_clip(): Gtk.Allocation
/**
 * Returns the clipboard object for the given selection to
 * be used with `widget`. `widget` must have a #GdkDisplay
 * associated with it, so must be attached to a toplevel
 * window.
 * @param selection a #GdkAtom which identifies the clipboard             to use. %GDK_SELECTION_CLIPBOARD gives the             default clipboard. Another common value             is %GDK_SELECTION_PRIMARY, which gives             the primary X selection.
 * @returns the appropriate clipboard object. If no             clipboard already exists, a new one will             be created. Once a clipboard object has             been created, it is persistent for all time.
 */
get_clipboard(selection: Gdk.Atom): Gtk.Clipboard
/**
 * Obtains the composite name of a widget.
 * @returns the composite name of @widget, or %NULL if @widget is not   a composite child. The string should be freed when it is no   longer needed.
 */
get_composite_name(): string
/**
 * Returns whether `device` can interact with `widget` and its
 * children. See gtk_widget_set_device_enabled().
 * @param device a #GdkDevice
 * @returns %TRUE is @device is enabled for @widget
 */
get_device_enabled(device: Gdk.Device): boolean
/**
 * Returns the events mask for the widget corresponding to an specific device. These
 * are the events that the widget will receive when `device` operates on it.
 * @param device a #GdkDevice
 * @returns device event mask for @widget
 */
get_device_events(device: Gdk.Device): Gdk.EventMask
/**
 * Gets the reading direction for a particular widget. See
 * gtk_widget_set_direction().
 * @returns the reading direction for the widget.
 */
get_direction(): Gtk.TextDirection
/**
 * Get the #GdkDisplay for the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow at the top.
 * 
 * In general, you should only create display specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkDisplay for the toplevel for this widget.
 */
get_display(): Gdk.Display
/**
 * Determines whether the widget is double buffered.
 * 
 * See gtk_widget_set_double_buffered()
 * @returns %TRUE if the widget is double buffered
 */
get_double_buffered(): boolean
/**
 * Returns the event mask (see #GdkEventMask) for the widget. These are the
 * events that the widget will receive.
 * 
 * Note: Internally, the widget event mask will be the logical OR of the event
 * mask set through gtk_widget_set_events() or gtk_widget_add_events(), and the
 * event mask necessary to cater for every #GtkEventController created for the
 * widget.
 * @returns event mask for @widget
 */
get_events(): number
/**
 * Returns whether the widget should grab focus when it is clicked with the mouse.
 * See gtk_widget_set_focus_on_click().
 * @returns %TRUE if the widget should grab focus when it is clicked with               the mouse.
 */
get_focus_on_click(): boolean
/**
 * Gets the font map that has been set with gtk_widget_set_font_map().
 * @returns A #PangoFontMap, or %NULL
 */
get_font_map(): (Pango.FontMap | null)
/**
 * Returns the #cairo_font_options_t used for Pango rendering. When not set,
 * the defaults font options for the #GdkScreen will be used.
 * @returns the #cairo_font_options_t or %NULL if not set
 */
get_font_options(): (cairo.FontOptions | null)
/**
 * Obtains the frame clock for a widget. The frame clock is a global
 * “ticker” that can be used to drive animations and repaints.  The
 * most common reason to get the frame clock is to call
 * gdk_frame_clock_get_frame_time(), in order to get a time to use for
 * animating. For example you might record the start of the animation
 * with an initial value from gdk_frame_clock_get_frame_time(), and
 * then update the animation by calling
 * gdk_frame_clock_get_frame_time() again during each repaint.
 * 
 * gdk_frame_clock_request_phase() will result in a new frame on the
 * clock, but won’t necessarily repaint any widgets. To repaint a
 * widget, you have to use gtk_widget_queue_draw() which invalidates
 * the widget (thus scheduling it to receive a draw on the next
 * frame). gtk_widget_queue_draw() will also end up requesting a frame
 * on the appropriate frame clock.
 * 
 * A widget’s frame clock will not change while the widget is
 * mapped. Reparenting a widget (which implies a temporary unmap) can
 * change the widget’s frame clock.
 * 
 * Unrealized widgets do not have a frame clock.
 * @returns a #GdkFrameClock, or %NULL if widget is unrealized
 */
get_frame_clock(): (Gdk.FrameClock | null)
/**
 * Gets the value of the #GtkWidget:halign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. Baselines are not supported for horizontal
 * alignment.
 * @returns the horizontal alignment of @widget
 */
get_halign(): Gtk.Align
/**
 * Returns the current value of the has-tooltip property.  See
 * #GtkWidget:has-tooltip for more information.
 * @returns current value of has-tooltip on @widget.
 */
get_has_tooltip(): boolean
/**
 * Determines whether `widget` has a #GdkWindow of its own. See
 * gtk_widget_set_has_window().
 * @returns %TRUE if @widget has a window, %FALSE otherwise
 */
get_has_window(): boolean
/**
 * Gets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Containers should use gtk_widget_compute_expand() rather than
 * this function, to see whether a widget, or any of its children,
 * has the expand flag set. If any child of a widget wants to
 * expand, the parent may ask to expand also.
 * 
 * This function only looks at the widget’s own hexpand flag, rather
 * than computing whether the entire widget tree rooted at this widget
 * wants to expand.
 * @returns whether hexpand flag is set
 */
get_hexpand(): boolean
/**
 * Gets whether gtk_widget_set_hexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @returns whether hexpand has been explicitly set
 */
get_hexpand_set(): boolean
/**
 * Whether the widget is mapped.
 * @returns %TRUE if the widget is mapped, %FALSE otherwise.
 */
get_mapped(): boolean
/**
 * Gets the value of the #GtkWidget:margin-bottom property.
 * @returns The bottom margin of @widget
 */
get_margin_bottom(): number
/**
 * Gets the value of the #GtkWidget:margin-end property.
 * @returns The end margin of @widget
 */
get_margin_end(): number
/**
 * Gets the value of the #GtkWidget:margin-left property.
 * @returns The left margin of @widget
 */
get_margin_left(): number
/**
 * Gets the value of the #GtkWidget:margin-right property.
 * @returns The right margin of @widget
 */
get_margin_right(): number
/**
 * Gets the value of the #GtkWidget:margin-start property.
 * @returns The start margin of @widget
 */
get_margin_start(): number
/**
 * Gets the value of the #GtkWidget:margin-top property.
 * @returns The top margin of @widget
 */
get_margin_top(): number
/**
 * Returns the modifier mask the `widget’`s windowing system backend
 * uses for a particular purpose.
 * 
 * See gdk_keymap_get_modifier_mask().
 * @param intent the use case for the modifier mask
 * @returns the modifier mask used for @intent.
 */
get_modifier_mask(intent: Gdk.ModifierIntent): Gdk.ModifierType
/**
 * Returns the current modifier style for the widget. (As set by
 * gtk_widget_modify_style().) If no style has previously set, a new
 * #GtkRcStyle will be created with all values unset, and set as the
 * modifier style for the widget. If you make changes to this rc
 * style, you must call gtk_widget_modify_style(), passing in the
 * returned rc style, to make sure that your changes take effect.
 * 
 * Caution: passing the style back to gtk_widget_modify_style() will
 * normally end up destroying it, because gtk_widget_modify_style() copies
 * the passed-in style and sets the copy as the new modifier style,
 * thus dropping any reference to the old modifier style. Add a reference
 * to the modifier style if you want to keep it alive.
 * @returns the modifier style for the widget.     This rc style is owned by the widget. If you want to keep a     pointer to value this around, you must add a refcount using     g_object_ref().
 */
get_modifier_style(): Gtk.RcStyle
/**
 * Retrieves the name of a widget. See gtk_widget_set_name() for the
 * significance of widget names.
 * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
 */
get_name(): string
/**
 * Returns the current value of the #GtkWidget:no-show-all property,
 * which determines whether calls to gtk_widget_show_all()
 * will affect this widget.
 * @returns the current value of the “no-show-all” property.
 */
get_no_show_all(): boolean
/**
 * Fetches the requested opacity for this widget.
 * See gtk_widget_set_opacity().
 * @returns the requested opacity for this widget.
 */
get_opacity(): number
/**
 * Gets a #PangoContext with the appropriate font map, font description,
 * and base direction for this widget. Unlike the context returned
 * by gtk_widget_create_pango_context(), this context is owned by
 * the widget (it can be used until the screen for the widget changes
 * or the widget is removed from its toplevel), and will be updated to
 * match any changes to the widget’s attributes. This can be tracked
 * by using the #GtkWidget::screen-changed signal on the widget.
 * @returns the #PangoContext for the widget.
 */
get_pango_context(): Pango.Context
/**
 * Returns the parent container of `widget`.
 * @returns the parent container of @widget, or %NULL
 */
get_parent(): (Gtk.Widget | null)
/**
 * Gets `widget’`s parent window, or %NULL if it does not have one.
 * @returns the parent window of @widget, or %NULL if it does not have a parent window.
 */
get_parent_window(): (Gdk.Window | null)
/**
 * Returns the #GtkWidgetPath representing `widget,` if the widget
 * is not connected to a toplevel widget, a partial path will be
 * created.
 * @returns The #GtkWidgetPath representing @widget
 */
get_path(): Gtk.WidgetPath
/**
 * Obtains the location of the mouse pointer in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(); and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 */
get_pointer(): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves the minimum and natural size of a widget, taking
 * into account the widget’s preference for height-for-width management.
 * 
 * This is used to retrieve a suitable size by container widgets which do
 * not impose any restrictions on the child placement. It can be used
 * to deduce toplevel window and menu sizes as well as child widgets in
 * free-form containers such as GtkLayout.
 * 
 * Handle with care. Note that the natural height of a height-for-width
 * widget will generally be a smaller size than the minimum height, since the required
 * height for the natural width is generally smaller than the required height for
 * the minimum width.
 * 
 * Use gtk_widget_get_preferred_height_and_baseline_for_width() if you want to support
 * baseline alignment.
 */
get_preferred_size(): [Gtk.Requisition | null, Gtk.Requisition | null]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
get_preferred_width_for_height(height: number): [number, number]
/**
 * Determines whether `widget` is realized.
 * @returns %TRUE if @widget is realized, %FALSE otherwise
 */
get_realized(): boolean
/**
 * Determines whether `widget` is always treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_set_receives_default().
 * @returns %TRUE if @widget acts as the default widget when focused,               %FALSE otherwise
 */
get_receives_default(): boolean
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 * @returns The #GtkSizeRequestMode preferred by @widget.
 */
get_request_mode(): Gtk.SizeRequestMode
/**
 * Retrieves the widget’s requisition.
 * 
 * This function should only be used by widget implementations in
 * order to figure whether the widget’s requisition has actually
 * changed after some internal state change (so that they can call
 * gtk_widget_queue_resize() instead of gtk_widget_queue_draw()).
 * 
 * Normally, gtk_widget_size_request() should be used.
 */
get_requisition(): Gtk.Requisition
/**
 * Get the root window where this widget is located. This function can
 * only be called after the widget has been added to a widget
 * hierarchy with #GtkWindow at the top.
 * 
 * The root window is useful for such purposes as creating a popup
 * #GdkWindow associated with the window. In general, you should only
 * create display specific resources when a widget has been realized,
 * and you should free those resources when the widget is unrealized.
 * @returns the #GdkWindow root window for the toplevel for this widget.
 */
get_root_window(): Gdk.Window
/**
 * Retrieves the internal scale factor that maps from window coordinates
 * to the actual device pixels. On traditional systems this is 1, on
 * high density outputs, it can be a higher value (typically 2).
 * 
 * See gdk_window_get_scale_factor().
 * @returns the scale factor for @widget
 */
get_scale_factor(): number
/**
 * Get the #GdkScreen from the toplevel window associated with
 * this widget. This function can only be called after the widget
 * has been added to a widget hierarchy with a #GtkWindow
 * at the top.
 * 
 * In general, you should only create screen specific
 * resources when a widget has been realized, and you should
 * free those resources when the widget is unrealized.
 * @returns the #GdkScreen for the toplevel for this widget.
 */
get_screen(): Gdk.Screen
/**
 * Returns the widget’s sensitivity (in the sense of returning
 * the value that has been set using gtk_widget_set_sensitive()).
 * 
 * The effective sensitivity of a widget is however determined by both its
 * own and its parent widget’s sensitivity. See gtk_widget_is_sensitive().
 * @returns %TRUE if the widget is sensitive
 */
get_sensitive(): boolean
/**
 * Gets the settings object holding the settings used for this widget.
 * 
 * Note that this function can only be called when the #GtkWidget
 * is attached to a toplevel, since the settings object is specific
 * to a particular #GdkScreen.
 * @returns the relevant #GtkSettings object
 */
get_settings(): Gtk.Settings
/**
 * Gets the size request that was explicitly set for the widget using
 * gtk_widget_set_size_request(). A value of -1 stored in `width` or
 * `height` indicates that that dimension has not been set explicitly
 * and the natural requisition of the widget will be used instead. See
 * gtk_widget_set_size_request(). To get the size a widget will
 * actually request, call gtk_widget_get_preferred_size() instead of
 * this function.
 */
get_size_request(): [number, number]
/**
 * Returns the widget’s state. See gtk_widget_set_state().
 * @returns the state of @widget.
 */
get_state(): Gtk.StateType
/**
 * Returns the widget state as a flag set. It is worth mentioning
 * that the effective %GTK_STATE_FLAG_INSENSITIVE state will be
 * returned, that is, also based on parent insensitivity, even if
 * `widget` itself is sensitive.
 * 
 * Also note that if you are looking for a way to obtain the
 * #GtkStateFlags to pass to a #GtkStyleContext method, you
 * should look at gtk_style_context_get_state().
 * @returns The state flags for widget
 */
get_state_flags(): Gtk.StateFlags
/**
 * Returns the style context associated to `widget`. The returned object is
 * guaranteed to be the same for the lifetime of `widget`.
 * @returns a #GtkStyleContext. This memory is owned by @widget and          must not be freed.
 */
get_style_context(): Gtk.StyleContext
/**
 * Returns %TRUE if `widget` is multiple pointer aware. See
 * gtk_widget_set_support_multidevice() for more information.
 * @returns %TRUE if @widget is multidevice aware.
 */
get_support_multidevice(): boolean
/**
 * Fetch an object build from the template XML for `widget_type` in this `widget` instance.
 * 
 * This will only report children which were previously declared with
 * gtk_widget_class_bind_template_child_full() or one of its
 * variants.
 * 
 * This function is only meant to be called for code which is private to the `widget_type` which
 * declared the child and is meant for language bindings which cannot easily make use
 * of the GObject structure offsets.
 * @param widget_type The #GType to get a template child for
 * @param name The “id” of the child defined in the template XML
 * @returns The object built in the template XML with the id @name
 */
get_template_child<T = GObject.Object>(widget_type: GObject.GType, name: string): T
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_markup(): (string | null)
/**
 * Gets the contents of the tooltip for `widget`.
 * @returns the tooltip text, or %NULL. You should free the   returned string with g_free() when done.
 */
get_tooltip_text(): (string | null)
/**
 * Returns the #GtkWindow of the current tooltip. This can be the
 * GtkWindow created by default, or the custom tooltip window set
 * using gtk_widget_set_tooltip_window().
 * @returns The #GtkWindow of the current tooltip.
 */
get_tooltip_window(): Gtk.Window
/**
 * This function returns the topmost widget in the container hierarchy
 * `widget` is a part of. If `widget` has no parent widgets, it will be
 * returned as the topmost widget. No reference will be added to the
 * returned widget; it should not be unreferenced.
 * 
 * Note the difference in behavior vs. gtk_widget_get_ancestor();
 * `gtk_widget_get_ancestor (widget, GTK_TYPE_WINDOW)`
 * would return
 * %NULL if `widget` wasn’t inside a toplevel window, and if the
 * window was inside a #GtkWindow-derived widget which was in turn
 * inside the toplevel #GtkWindow. While the second case may
 * seem unlikely, it actually happens when a #GtkPlug is embedded
 * inside a #GtkSocket within the same application.
 * 
 * To reliably find the toplevel #GtkWindow, use
 * gtk_widget_get_toplevel() and call GTK_IS_WINDOW()
 * on the result. For instance, to get the title of a widget's toplevel
 * window, one might use:
 * 
 * ```c
 * static const char *
 * get_widget_toplevel_title (GtkWidget *widget)
 * {
 *   GtkWidget *toplevel = gtk_widget_get_toplevel (widget);
 *   if (GTK_IS_WINDOW (toplevel))
 *     {
 *       return gtk_window_get_title (GTK_WINDOW (toplevel));
 *     }
 * 
 *   return NULL;
 * }
 * ```
 * 
 * @returns the topmost ancestor of @widget, or @widget itself    if there’s no ancestor.
 */
get_toplevel(): Gtk.Widget
/**
 * Gets the value of the #GtkWidget:valign property.
 * 
 * For backwards compatibility reasons this method will never return
 * %GTK_ALIGN_BASELINE, but instead it will convert it to
 * %GTK_ALIGN_FILL. If your widget want to support baseline aligned
 * children it must use gtk_widget_get_valign_with_baseline(), or
 * `g_object_get (widget, "valign", &value, NULL)`, which will
 * also report the true value.
 * @returns the vertical alignment of @widget, ignoring baseline alignment
 */
get_valign(): Gtk.Align
/**
 * Gets the value of the #GtkWidget:valign property, including
 * %GTK_ALIGN_BASELINE.
 * @returns the vertical alignment of @widget
 */
get_valign_with_baseline(): Gtk.Align
/**
 * Gets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_get_hexpand() for more detail.
 * @returns whether vexpand flag is set
 */
get_vexpand(): boolean
/**
 * Gets whether gtk_widget_set_vexpand() has been used to
 * explicitly set the expand flag on this widget.
 * 
 * See gtk_widget_get_hexpand_set() for more detail.
 * @returns whether vexpand has been explicitly set
 */
get_vexpand_set(): boolean
/**
 * Determines whether the widget is visible. If you want to
 * take into account whether the widget’s parent is also marked as
 * visible, use gtk_widget_is_visible() instead.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See gtk_widget_set_visible().
 * @returns %TRUE if the widget is visible
 */
get_visible(): boolean
/**
 * Gets the visual that will be used to render `widget`.
 * @returns the visual for @widget
 */
get_visual(): Gdk.Visual
/**
 * Returns the widget’s window if it is realized, %NULL otherwise
 * @returns @widget’s window.
 */
get_window(): (Gdk.Window | null)
/**
 * Makes `widget` the current grabbed widget.
 * 
 * This means that interaction with other widgets in the same
 * application is blocked and mouse as well as keyboard events
 * are delivered to this widget.
 * 
 * If `widget` is not sensitive, it is not set as the current
 * grabbed widget and this function does nothing.
 */
grab_add(): void
/**
 * Causes `widget` to become the default widget. `widget` must be able to be
 * a default widget; typically you would ensure this yourself
 * by calling gtk_widget_set_can_default() with a %TRUE value.
 * The default widget is activated when
 * the user presses Enter in a window. Default widgets must be
 * activatable, that is, gtk_widget_activate() should affect them. Note
 * that #GtkEntry widgets require the “activates-default” property
 * set to %TRUE before they activate the default widget when Enter
 * is pressed and the #GtkEntry is focused.
 */
grab_default(): void
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
grab_focus(): void
/**
 * Removes the grab from the given widget.
 * 
 * You have to pair calls to gtk_grab_add() and gtk_grab_remove().
 * 
 * If `widget` does not have the grab, this function does nothing.
 */
grab_remove(): void
/**
 * Determines whether the widget is currently grabbing events, so it
 * is the only widget receiving input events (keyboard and mouse).
 * 
 * See also gtk_grab_add().
 * @returns %TRUE if the widget is in the grab_widgets stack
 */
has_grab(): boolean
/**
 * Determines if the widget style has been looked up through the rc mechanism.
 * @returns %TRUE if the widget has been looked up through the rc   mechanism, %FALSE otherwise.
 */
has_rc_style(): boolean
/**
 * Checks whether there is a #GdkScreen is associated with
 * this widget. All toplevel widgets have an associated
 * screen, and all widgets added into a hierarchy with a toplevel
 * window at the top.
 * @returns %TRUE if there is a #GdkScreen associated   with the widget.
 */
has_screen(): boolean
/**
 * Determines if the widget should show a visible indication that
 * it has the global input focus. This is a convenience function for
 * use in ::draw handlers that takes into account whether focus
 * indication should currently be shown in the toplevel window of
 * `widget`. See gtk_window_get_focus_visible() for more information
 * about focus indication.
 * 
 * To find out if the widget has the global input focus, use
 * gtk_widget_has_focus().
 * @returns %TRUE if the widget should display a “focus rectangle”
 */
has_visible_focus(): boolean
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
hide(): void
/**
 * Utility function; intended to be connected to the #GtkWidget::delete-event
 * signal on a #GtkWindow. The function calls gtk_widget_hide() on its
 * argument, then returns %TRUE. If connected to ::delete-event, the
 * result is that clicking the close button for a window (on the
 * window frame, top right corner usually) will hide but not destroy
 * the window. By default, GTK+ destroys windows when ::delete-event
 * is received.
 * @returns %TRUE
 */
hide_on_delete(): boolean
/**
 * Returns whether the widget is currently being destroyed.
 * This information can sometimes be used to avoid doing
 * unnecessary work.
 * @returns %TRUE if @widget is being destroyed
 */
in_destruction(): boolean
/**
 * Creates and initializes child widgets defined in templates. This
 * function must be called in the instance initializer for any
 * class which assigned itself a template using gtk_widget_class_set_template()
 * 
 * It is important to call this function in the instance initializer
 * of a #GtkWidget subclass and not in #GObject.constructed() or
 * #GObject.constructor() for two reasons.
 * 
 * One reason is that generally derived widgets will assume that parent
 * class composite widgets have been created in their instance
 * initializers.
 * 
 * Another reason is that when calling g_object_new() on a widget with
 * composite templates, it’s important to build the composite widgets
 * before the construct properties are set. Properties passed to g_object_new()
 * should take precedence over properties set in the private template XML.
 */
init_template(): void
/**
 * Sets an input shape for this widget’s GDK window. This allows for
 * windows which react to mouse click in a nonrectangular region, see
 * gdk_window_input_shape_combine_region() for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
input_shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Inserts `group` into `widget`. Children of `widget` that implement
 * #GtkActionable can then be associated with actions in `group` by
 * setting their “action-name” to
 * `prefix`.`action-name`.
 * 
 * If `group` is %NULL, a previously inserted group for `name` is removed
 * from `widget`.
 * @param name the prefix for actions in @group
 * @param group a #GActionGroup, or %NULL
 */
insert_action_group(name: string, group?: (Gio.ActionGroup | null)): void
/**
 * Computes the intersection of a `widget’`s area and `area,` storing
 * the intersection in `intersection,` and returns %TRUE if there was
 * an intersection.  `intersection` may be %NULL if you’re only
 * interested in whether there was an intersection.
 * @param area a rectangle
 * @returns %TRUE if there was an intersection
 */
intersect(area: Gdk.Rectangle): [boolean, Gdk.Rectangle | null]
/**
 * Determines whether `widget` is somewhere inside `ancestor,` possibly with
 * intermediate containers.
 * @param ancestor another #GtkWidget
 * @returns %TRUE if @ancestor contains @widget as a child,    grandchild, great grandchild, etc.
 */
is_ancestor(ancestor: Gtk.Widget): boolean
/**
 * Whether `widget` can rely on having its alpha channel
 * drawn correctly. On X11 this function returns whether a
 * compositing manager is running for `widget’`s screen.
 * 
 * Please note that the semantics of this call will change
 * in the future if used on a widget that has a composited
 * window in its hierarchy (as set by gdk_window_set_composited()).
 * @returns %TRUE if the widget can rely on its alpha channel being drawn correctly.
 */
is_composited(): boolean
/**
 * Determines whether `widget` can be drawn to. A widget can be drawn
 * to if it is mapped and visible.
 * @returns %TRUE if @widget is drawable, %FALSE otherwise
 */
is_drawable(): boolean
/**
 * Returns the widget’s effective sensitivity, which means
 * it is sensitive itself and also its parent widget is sensitive
 * @returns %TRUE if the widget is effectively sensitive
 */
is_sensitive(): boolean
/**
 * Determines whether `widget` is a toplevel widget.
 * 
 * Currently only #GtkWindow and #GtkInvisible (and out-of-process
 * #GtkPlugs) are toplevel widgets. Toplevel widgets have no parent
 * widget.
 * @returns %TRUE if @widget is a toplevel, %FALSE otherwise
 */
is_toplevel(): boolean
/**
 * Determines whether the widget and all its parents are marked as
 * visible.
 * 
 * This function does not check if the widget is obscured in any way.
 * 
 * See also gtk_widget_get_visible() and gtk_widget_set_visible()
 * @returns %TRUE if the widget and all its parents are visible
 */
is_visible(): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 * @returns %TRUE if stopping keyboard navigation is fine, %FALSE               if the emitting widget should try to handle the keyboard               navigation attempt in its parent container(s).
 */
keynav_failed(direction: Gtk.DirectionType): boolean
/**
 * Lists the closures used by `widget` for accelerator group connections
 * with gtk_accel_group_connect_by_path() or gtk_accel_group_connect().
 * The closures can be used to monitor accelerator changes on `widget,`
 * by connecting to the `GtkAccelGroup:`:accel-changed signal of the
 * #GtkAccelGroup of a closure which can be found out with
 * gtk_accel_group_from_accel_closure().
 * @returns a newly allocated #GList of closures
 */
list_accel_closures(): GObject.Closure[]
/**
 * Retrieves a %NULL-terminated array of strings containing the prefixes of
 * #GActionGroup's available to `widget`.
 * @returns a %NULL-terminated array of strings.
 */
list_action_prefixes(): string[]
/**
 * Returns a newly allocated list of the widgets, normally labels, for
 * which this widget is the target of a mnemonic (see for example,
 * gtk_label_set_mnemonic_widget()).
 * 
 * The widgets in the list are not individually referenced. If you
 * want to iterate through the list and perform actions involving
 * callbacks that might destroy the widgets, you
 * must call `g_list_foreach (result,
 * (GFunc)g_object_ref, NULL)` first, and then unref all the
 * widgets afterwards.
 * @returns the list of  mnemonic labels; free this list  with g_list_free() when you are done with it.
 */
list_mnemonic_labels(): Gtk.Widget[]
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
map(): void
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 * @returns %TRUE if the signal has been handled
 */
mnemonic_activate(group_cycling: boolean): boolean
/**
 * Sets the base color for a widget in a particular state.
 * All other style values are left untouched. The base color
 * is the background color used along with the text color
 * (see gtk_widget_modify_text()) for widgets such as #GtkEntry
 * and #GtkTextView. See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > base color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the base color on that.
 * @param state the state for which to set the base color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_base().
 */
modify_base(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * > Note that “no window” widgets (which have the %GTK_NO_WINDOW
 * > flag set) draw on their parent container’s window and thus may
 * > not draw any background themselves. This is the case for e.g.
 * > #GtkLabel.
 * >
 * > To modify the background of such widgets, you have to set the
 * > background color on their parent; if you want to set the background
 * > of a rectangular area around a label, try placing the label in
 * > a #GtkEventBox widget and setting the background color on that.
 * @param state the state for which to set the background color
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_bg().
 */
modify_bg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the #GtkWidget
 * cursor-color and secondary-cursor-color
 * style properties.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param primary the color to use for primary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_cursor().
 * @param secondary the color to use for secondary cursor (does     not need to be allocated), or %NULL to undo the effect of     previous calls to of gtk_widget_modify_cursor().
 */
modify_cursor(primary?: (Gdk.Color | null), secondary?: (Gdk.Color | null)): void
/**
 * Sets the foreground color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the foreground color
 * @param color the color to assign (does not need to be allocated),     or %NULL to undo the effect of previous calls to     of gtk_widget_modify_fg().
 */
modify_fg(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the font to use for a widget.
 * 
 * All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * @param font_desc the font description to use, or %NULL     to undo the effect of previous calls to gtk_widget_modify_font()
 */
modify_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Modifies style values on the widget.
 * 
 * Modifications made using this technique take precedence over
 * style values set via an RC file, however, they will be overridden
 * if a style is explicitly set on the widget using gtk_widget_set_style().
 * The #GtkRcStyle-struct is designed so each field can either be
 * set or unset, so it is possible, using this function, to modify some
 * style values and leave the others unchanged.
 * 
 * Note that modifications made with this function are not cumulative
 * with previous calls to gtk_widget_modify_style() or with such
 * functions as gtk_widget_modify_fg(). If you wish to retain
 * previous values, you must first call gtk_widget_get_modifier_style(),
 * make your modifications to the returned style, then call
 * gtk_widget_modify_style() with that style. On the other hand,
 * if you first call gtk_widget_modify_style(), subsequent calls
 * to such functions gtk_widget_modify_fg() will have a cumulative
 * effect with the initial modifications.
 * @param style the #GtkRcStyle-struct holding the style modifications
 */
modify_style(style: Gtk.RcStyle): void
/**
 * Sets the text color for a widget in a particular state.
 * 
 * All other style values are left untouched.
 * The text color is the foreground color used along with the
 * base color (see gtk_widget_modify_base()) for widgets such
 * as #GtkEntry and #GtkTextView.
 * See also gtk_widget_modify_style().
 * @param state the state for which to set the text color
 * @param color the color to assign (does not need to     be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_modify_text().
 */
modify_text(state: Gtk.StateType, color?: (Gdk.Color | null)): void
/**
 * Sets the background color to use for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color().
 * @param state the state for which to set the background color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_background_color()
 */
override_background_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the color to use for a widget.
 * 
 * All other style values are left untouched.
 * 
 * This function does not act recursively. Setting the color of a
 * container does not affect its children. Note that some widgets that
 * you may not think of as containers, for instance #GtkButtons,
 * are actually containers.
 * 
 * This API is mostly meant as a quick way for applications to
 * change a widget appearance. If you are developing a widgets
 * library and intend this change to be themeable, it is better
 * done by setting meaningful CSS classes in your
 * widget/container implementation through gtk_style_context_add_class().
 * 
 * This way, your widget library can install a #GtkCssProvider
 * with the %GTK_STYLE_PROVIDER_PRIORITY_FALLBACK priority in order
 * to provide a default styling for those widgets that need so, and
 * this theming may fully overridden by the user’s theme.
 * 
 * Note that for complex widgets this may bring in undesired
 * results (such as uniform background color everywhere), in
 * these cases it is better to fully style such widgets through a
 * #GtkCssProvider with the %GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
 * priority.
 * @param state the state for which to set the color
 * @param color the color to assign, or %NULL to undo the effect     of previous calls to gtk_widget_override_color()
 */
override_color(state: Gtk.StateFlags, color?: (Gdk.RGBA | null)): void
/**
 * Sets the cursor color to use in a widget, overriding the
 * cursor-color and secondary-cursor-color
 * style properties. All other style values are left untouched.
 * See also gtk_widget_modify_style().
 * 
 * Note that the underlying properties have the #GdkColor type,
 * so the alpha value in `primary` and `secondary` will be ignored.
 * @param cursor the color to use for primary cursor (does not need to be     allocated), or %NULL to undo the effect of previous calls to     of gtk_widget_override_cursor().
 * @param secondary_cursor the color to use for secondary cursor (does not     need to be allocated), or %NULL to undo the effect of previous     calls to of gtk_widget_override_cursor().
 */
override_cursor(cursor?: (Gdk.RGBA | null), secondary_cursor?: (Gdk.RGBA | null)): void
/**
 * Sets the font to use for a widget. All other style values are
 * left untouched. See gtk_widget_override_color().
 * @param font_desc the font description to use, or %NULL to undo     the effect of previous calls to gtk_widget_override_font()
 */
override_font(font_desc?: (Pango.FontDescription | null)): void
/**
 * Sets a symbolic color for a widget.
 * 
 * All other style values are left untouched.
 * See gtk_widget_override_color() for overriding the foreground
 * or background color.
 * @param name the name of the symbolic color to modify
 * @param color the color to assign (does not need     to be allocated), or %NULL to undo the effect of previous     calls to gtk_widget_override_symbolic_color()
 */
override_symbolic_color(name: string, color?: (Gdk.RGBA | null)): void
/**
 * Obtains the full path to `widget`. The path is simply the name of a
 * widget and all its parents in the container hierarchy, separated by
 * periods. The name of a widget comes from
 * gtk_widget_get_name(). Paths are used to apply styles to a widget
 * in gtkrc configuration files. Widget names are the type of the
 * widget by default (e.g. “GtkButton”) or can be set to an
 * application-specific value with gtk_widget_set_name(). By setting
 * the name of a widget, you allow users or theme authors to apply
 * styles to that specific widget in their gtkrc
 * file. `path_reversed_p` fills in the path in reverse order,
 * i.e. starting with `widget’`s name instead of starting with the name
 * of `widget’`s outermost ancestor.
 */
path(): [number, string, string]
/**
 * This function is only for use in widget implementations.
 * 
 * Flags the widget for a rerun of the GtkWidgetClass::size_allocate
 * function. Use this function instead of gtk_widget_queue_resize()
 * when the `widget'`s size request didn't change but it wants to
 * reposition its contents.
 * 
 * An example user of this function is gtk_widget_set_halign().
 */
queue_allocate(): void
/**
 * Mark `widget` as needing to recompute its expand flags. Call
 * this function when setting legacy expand child properties
 * on the child of a container.
 * 
 * See gtk_widget_compute_expand().
 */
queue_compute_expand(): void
/**
 * Equivalent to calling gtk_widget_queue_draw_area() for the
 * entire area of a widget.
 */
queue_draw(): void
/**
 * Convenience function that calls gtk_widget_queue_draw_region() on
 * the region created from the given coordinates.
 * 
 * The region here is specified in widget coordinates.
 * Widget coordinates are a bit odd; for historical reasons, they are
 * defined as `widget->`window coordinates for widgets that return %TRUE for
 * gtk_widget_get_has_window(), and are relative to `widget->`allocation.x,
 * `widget->`allocation.y otherwise.
 * 
 * `width` or `height` may be 0, in this case this function does
 * nothing. Negative values for `width` and `height` are not allowed.
 * @param x x coordinate of upper-left corner of rectangle to redraw
 * @param y y coordinate of upper-left corner of rectangle to redraw
 * @param width width of region to draw
 * @param height height of region to draw
 */
queue_draw_area(x: number, y: number, width: number, height: number): void
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
queue_draw_region(region: cairo.Region): void
/**
 * This function is only for use in widget implementations.
 * Flags a widget to have its size renegotiated; should
 * be called when a widget for some reason has a new size request.
 * For example, when you change the text in a #GtkLabel, #GtkLabel
 * queues a resize to ensure there’s enough space for the new text.
 * 
 * Note that you cannot call gtk_widget_queue_resize() on a widget
 * from inside its implementation of the GtkWidgetClass::size_allocate
 * virtual method. Calls to gtk_widget_queue_resize() from inside
 * GtkWidgetClass::size_allocate will be silently ignored.
 */
queue_resize(): void
/**
 * This function works like gtk_widget_queue_resize(),
 * except that the widget is not invalidated.
 */
queue_resize_no_redraw(): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
realize(): void
/**
 * Computes the intersection of a `widget’`s area and `region,` returning
 * the intersection. The result may be empty, use cairo_region_is_empty() to
 * check.
 * @param region a #cairo_region_t, in the same coordinate system as          @widget->allocation. That is, relative to @widget->window          for widgets which return %FALSE from gtk_widget_get_has_window();          relative to the parent window of @widget->window otherwise.
 * @returns A newly allocated region holding the intersection of @widget     and @region.
 */
region_intersect(region: cairo.Region): cairo.Region
/**
 * Registers a #GdkWindow with the widget and sets it up so that
 * the widget receives events for it. Call gtk_widget_unregister_window()
 * when destroying the window.
 * 
 * Before 3.8 you needed to call gdk_window_set_user_data() directly to set
 * this up. This is now deprecated and you should use gtk_widget_register_window()
 * instead. Old code will keep working as is, although some new features like
 * transparency might not work perfectly.
 * @param window a #GdkWindow
 */
register_window(window: Gdk.Window): void
/**
 * Removes an accelerator from `widget,` previously installed with
 * gtk_widget_add_accelerator().
 * @param accel_group accel group for this widget
 * @param accel_key GDK keyval of the accelerator
 * @param accel_mods modifier key combination of the accelerator
 * @returns whether an accelerator was installed and could be removed
 */
remove_accelerator(accel_group: Gtk.AccelGroup, accel_key: number, accel_mods: Gdk.ModifierType): boolean
/**
 * Removes a widget from the list of mnemonic labels for
 * this widget. (See gtk_widget_list_mnemonic_labels()). The widget
 * must have previously been added to the list with
 * gtk_widget_add_mnemonic_label().
 * @param label a #GtkWidget that was previously set as a mnemonic label for         @widget with gtk_widget_add_mnemonic_label().
 */
remove_mnemonic_label(label: Gtk.Widget): void
/**
 * Removes a tick callback previously registered with
 * gtk_widget_add_tick_callback().
 * @param id an id returned by gtk_widget_add_tick_callback()
 */
remove_tick_callback(id: number): void
/**
 * A convenience function that uses the theme settings for `widget`
 * to look up `stock_id` and render it to a pixbuf. `stock_id` should
 * be a stock icon ID such as #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size`
 * should be a size such as #GTK_ICON_SIZE_MENU. `detail` should be a
 * string that identifies the widget or code doing the rendering, so
 * that theme engines can special-case rendering for that widget or
 * code.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be
 * freed after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @param detail render detail to pass to theme engine
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon(stock_id: string, size: number, detail?: (string | null)): (GdkPixbuf.Pixbuf | null)
/**
 * A convenience function that uses the theme engine and style
 * settings for `widget` to look up `stock_id` and render it to
 * a pixbuf. `stock_id` should be a stock icon ID such as
 * #GTK_STOCK_OPEN or #GTK_STOCK_OK. `size` should be a size
 * such as #GTK_ICON_SIZE_MENU.
 * 
 * The pixels in the returned #GdkPixbuf are shared with the rest of
 * the application and should not be modified. The pixbuf should be freed
 * after use with g_object_unref().
 * @param stock_id a stock ID
 * @param size a stock size (#GtkIconSize). A size of `(GtkIconSize)-1`     means render at the size of the source and don’t scale (if there are     multiple source sizes, GTK+ picks one of the available sizes).
 * @returns a new pixbuf, or %NULL if the     stock ID wasn’t known
 */
render_icon_pixbuf(stock_id: string, size: number): (GdkPixbuf.Pixbuf | null)
/**
 * Moves a widget from one #GtkContainer to another, handling reference
 * count issues to avoid destroying the widget.
 * @param new_parent a #GtkContainer to move the widget into
 */
reparent(new_parent: Gtk.Widget): void
/**
 * Reset the styles of `widget` and all descendents, so when
 * they are looked up again, they get the correct values
 * for the currently loaded RC file settings.
 * 
 * This function is not useful for applications.
 */
reset_rc_styles(): void
/**
 * Updates the style context of `widget` and all descendants
 * by updating its widget path. #GtkContainers may want
 * to use this on a child when reordering it in a way that a different
 * style might apply to it. See also gtk_container_get_path_for_child().
 */
reset_style(): void
/**
 * Very rarely-used function. This function is used to emit
 * an expose event on a widget. This function is not normally used
 * directly. The only time it is used is when propagating an expose
 * event to a windowless child widget (gtk_widget_get_has_window() is %FALSE),
 * and that is normally done using gtk_container_propagate_draw().
 * 
 * If you want to force an area of a window to be redrawn,
 * use gdk_window_invalidate_rect() or gdk_window_invalidate_region().
 * To cause the redraw to be done immediately, follow that call
 * with a call to gdk_window_process_updates().
 * @param event a expose #GdkEvent
 * @returns return from the event signal emission (%TRUE if   the event was handled)
 */
send_expose(event: Gdk.Event): number
/**
 * Sends the focus change `event` to `widget`
 * 
 * This function is not meant to be used by applications. The only time it
 * should be used is when it is necessary for a #GtkWidget to assign focus
 * to a widget that is semantically owned by the first widget even though
 * it’s not a direct child - for instance, a search entry in a floating
 * window similar to the quick search in #GtkTreeView.
 * 
 * An example of its usage is:
 * 
 * 
 * ```c
 *   GdkEvent *fevent = gdk_event_new (GDK_FOCUS_CHANGE);
 * 
 *   fevent->focus_change.type = GDK_FOCUS_CHANGE;
 *   fevent->focus_change.in = TRUE;
 *   fevent->focus_change.window = _gtk_widget_get_window (widget);
 *   if (fevent->focus_change.window != NULL)
 *     g_object_ref (fevent->focus_change.window);
 * 
 *   gtk_widget_send_focus_change (widget, fevent);
 * 
 *   gdk_event_free (event);
 * ```
 * 
 * @param event a #GdkEvent of type GDK_FOCUS_CHANGE
 * @returns the return value from the event signal emission: %TRUE   if the event was handled, and %FALSE otherwise
 */
send_focus_change(event: Gdk.Event): boolean
/**
 * Given an accelerator group, `accel_group,` and an accelerator path,
 * `accel_path,` sets up an accelerator in `accel_group` so whenever the
 * key binding that is defined for `accel_path` is pressed, `widget`
 * will be activated.  This removes any accelerators (for any
 * accelerator group) installed by previous calls to
 * gtk_widget_set_accel_path(). Associating accelerators with
 * paths allows them to be modified by the user and the modifications
 * to be saved for future use. (See gtk_accel_map_save().)
 * 
 * This function is a low level function that would most likely
 * be used by a menu creation system like #GtkUIManager. If you
 * use #GtkUIManager, setting up accelerator paths will be done
 * automatically.
 * 
 * Even when you you aren’t using #GtkUIManager, if you only want to
 * set up accelerators on menu items gtk_menu_item_set_accel_path()
 * provides a somewhat more convenient interface.
 * 
 * Note that `accel_path` string will be stored in a #GQuark. Therefore, if you
 * pass a static string, you can save some memory by interning it first with
 * g_intern_static_string().
 * @param accel_path path used to look up the accelerator
 * @param accel_group a #GtkAccelGroup.
 */
set_accel_path(accel_path?: (string | null), accel_group?: (Gtk.AccelGroup | null)): void
/**
 * Sets the widget’s allocation.  This should not be used
 * directly, but from within a widget’s size_allocate method.
 * 
 * The allocation set should be the “adjusted” or actual
 * allocation. If you’re implementing a #GtkContainer, you want to use
 * gtk_widget_size_allocate() instead of gtk_widget_set_allocation().
 * The GtkWidgetClass::adjust_size_allocation virtual method adjusts the
 * allocation inside gtk_widget_size_allocate() to create an adjusted
 * allocation.
 * @param allocation a pointer to a #GtkAllocation to copy from
 */
set_allocation(allocation: Gtk.Allocation): void
/**
 * Sets whether the application intends to draw on the widget in
 * an #GtkWidget::draw handler.
 * 
 * This is a hint to the widget and does not affect the behavior of
 * the GTK+ core; many widgets ignore this flag entirely. For widgets
 * that do pay attention to the flag, such as #GtkEventBox and #GtkWindow,
 * the effect is to suppress default themed drawing of the widget's
 * background. (Children of the widget will still be drawn.) The application
 * is then entirely responsible for drawing the widget background.
 * 
 * Note that the background is still drawn when the widget is mapped.
 * @param app_paintable %TRUE if the application will paint on the widget
 */
set_app_paintable(app_paintable: boolean): void
/**
 * Specifies whether `widget` can be a default widget. See
 * gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param can_default whether or not @widget can be a default widget.
 */
set_can_default(can_default: boolean): void
/**
 * Specifies whether `widget` can own the input focus. See
 * gtk_widget_grab_focus() for actually setting the input focus on a
 * widget.
 * @param can_focus whether or not @widget can own the input focus.
 */
set_can_focus(can_focus: boolean): void
/**
 * Sets whether `widget` should be mapped along with its when its parent
 * is mapped and `widget` has been shown with gtk_widget_show().
 * 
 * The child visibility can be set for widget before it is added to
 * a container with gtk_widget_set_parent(), to avoid mapping
 * children unnecessary before immediately unmapping them. However
 * it will be reset to its default state of %TRUE when the widget
 * is removed from a container.
 * 
 * Note that changing the child visibility of a widget does not
 * queue a resize on the widget. Most of the time, the size of
 * a widget is computed from all visible children, whether or
 * not they are mapped. If this is not the case, the container
 * can queue a resize itself.
 * 
 * This function is only useful for container implementations and
 * never should be called by an application.
 * @param is_visible if %TRUE, @widget should be mapped along with its parent.
 */
set_child_visible(is_visible: boolean): void
/**
 * Sets the widget’s clip.  This must not be used directly,
 * but from within a widget’s size_allocate method.
 * It must be called after gtk_widget_set_allocation() (or after chaining up
 * to the parent class), because that function resets the clip.
 * 
 * The clip set should be the area that `widget` draws on. If `widget` is a
 * #GtkContainer, the area must contain all children's clips.
 * 
 * If this function is not called by `widget` during a ::size-allocate handler,
 * the clip will be set to `widget'`s allocation.
 * @param clip a pointer to a #GtkAllocation to copy from
 */
set_clip(clip: Gtk.Allocation): void
/**
 * Sets a widgets composite name. The widget must be
 * a composite child of its parent; see gtk_widget_push_composite_child().
 * @param name the name to set
 */
set_composite_name(name: string): void
/**
 * Enables or disables a #GdkDevice to interact with `widget`
 * and all its children.
 * 
 * It does so by descending through the #GdkWindow hierarchy
 * and enabling the same mask that is has for core events
 * (i.e. the one that gdk_window_get_events() returns).
 * @param device a #GdkDevice
 * @param enabled whether to enable the device
 */
set_device_enabled(device: Gdk.Device, enabled: boolean): void
/**
 * Sets the device event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive from `device`. Keep
 * in mind that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_device_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with windowless widgets (which return
 * %FALSE from gtk_widget_get_has_window());
 * to get events on those widgets, place them inside a #GtkEventBox
 * and receive events on the event box.
 * @param device a #GdkDevice
 * @param events event mask
 */
set_device_events(device: Gdk.Device, events: Gdk.EventMask): void
/**
 * Sets the reading direction on a particular widget. This direction
 * controls the primary direction for widgets containing text,
 * and also the direction in which the children of a container are
 * packed. The ability to set the direction is present in order
 * so that correct localization into languages with right-to-left
 * reading directions can be done. Generally, applications will
 * let the default reading direction present, except for containers
 * where the containers are arranged in an order that is explicitly
 * visual rather than logical (such as buttons for text justification).
 * 
 * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
 * set by gtk_widget_set_default_direction() will be used.
 * @param dir the new direction
 */
set_direction(dir: Gtk.TextDirection): void
/**
 * Widgets are double buffered by default; you can use this function
 * to turn off the buffering. “Double buffered” simply means that
 * gdk_window_begin_draw_frame() and gdk_window_end_draw_frame() are called
 * automatically around expose events sent to the
 * widget. gdk_window_begin_draw_frame() diverts all drawing to a widget's
 * window to an offscreen buffer, and gdk_window_end_draw_frame() draws the
 * buffer to the screen. The result is that users see the window
 * update in one smooth step, and don’t see individual graphics
 * primitives being rendered.
 * 
 * In very simple terms, double buffered widgets don’t flicker,
 * so you would only use this function to turn off double buffering
 * if you had special needs and really knew what you were doing.
 * 
 * Note: if you turn off double-buffering, you have to handle
 * expose events, since even the clearing to the background color or
 * pixmap will not happen automatically (as it is done in
 * gdk_window_begin_draw_frame()).
 * 
 * In 3.10 GTK and GDK have been restructured for translucent drawing. Since
 * then expose events for double-buffered widgets are culled into a single
 * event to the toplevel GDK window. If you now unset double buffering, you
 * will cause a separate rendering pass for every widget. This will likely
 * cause rendering problems - in particular related to stacking - and usually
 * increases rendering times significantly.
 * @param double_buffered %TRUE to double-buffer a widget
 */
set_double_buffered(double_buffered: boolean): void
/**
 * Sets the event mask (see #GdkEventMask) for a widget. The event
 * mask determines which events a widget will receive. Keep in mind
 * that different widgets have different default event masks, and by
 * changing the event mask you may disrupt a widget’s functionality,
 * so be careful. This function must be called while a widget is
 * unrealized. Consider gtk_widget_add_events() for widgets that are
 * already realized, or if you want to preserve the existing event
 * mask. This function can’t be used with widgets that have no window.
 * (See gtk_widget_get_has_window()).  To get events on those widgets,
 * place them inside a #GtkEventBox and receive events on the event
 * box.
 * @param events event mask
 */
set_events(events: number): void
/**
 * Sets whether the widget should grab focus when it is clicked with the mouse.
 * Making mouse clicks not grab focus is useful in places like toolbars where
 * you don’t want the keyboard focus removed from the main area of the
 * application.
 * @param focus_on_click whether the widget should grab focus when clicked with the mouse
 */
set_focus_on_click(focus_on_click: boolean): void
/**
 * Sets the font map to use for Pango rendering. When not set, the widget
 * will inherit the font map from its parent.
 * @param font_map a #PangoFontMap, or %NULL to unset any previously     set font map
 */
set_font_map(font_map?: (Pango.FontMap | null)): void
/**
 * Sets the #cairo_font_options_t used for Pango rendering in this widget.
 * When not set, the default font options for the #GdkScreen will be used.
 * @param options a #cairo_font_options_t, or %NULL to unset any   previously set default font options.
 */
set_font_options(options?: (cairo.FontOptions | null)): void
/**
 * Sets the horizontal alignment of `widget`.
 * See the #GtkWidget:halign property.
 * @param align the horizontal alignment
 */
set_halign(align: Gtk.Align): void
/**
 * Sets the has-tooltip property on `widget` to `has_tooltip`.  See
 * #GtkWidget:has-tooltip for more information.
 * @param has_tooltip whether or not @widget has a tooltip.
 */
set_has_tooltip(has_tooltip: boolean): void
/**
 * Specifies whether `widget` has a #GdkWindow of its own. Note that
 * all realized widgets have a non-%NULL “window” pointer
 * (gtk_widget_get_window() never returns a %NULL window when a widget
 * is realized), but for many of them it’s actually the #GdkWindow of
 * one of its parent widgets. Widgets that do not create a %window for
 * themselves in #GtkWidget::realize must announce this by
 * calling this function with `has_window` = %FALSE.
 * 
 * This function should only be called by widget implementations,
 * and they should call it in their init() function.
 * @param has_window whether or not @widget has a window.
 */
set_has_window(has_window: boolean): void
/**
 * Sets whether the widget would like any available extra horizontal
 * space. When a user resizes a #GtkWindow, widgets with expand=TRUE
 * generally receive the extra space. For example, a list or
 * scrollable area or document in your window would often be set to
 * expand.
 * 
 * Call this function to set the expand flag if you would like your
 * widget to become larger horizontally when the window has extra
 * room.
 * 
 * By default, widgets automatically expand if any of their children
 * want to expand. (To see if a widget will automatically expand given
 * its current children and state, call gtk_widget_compute_expand(). A
 * container can decide how the expandability of children affects the
 * expansion of the container by overriding the compute_expand virtual
 * method on #GtkWidget.).
 * 
 * Setting hexpand explicitly with this function will override the
 * automatic expand behavior.
 * 
 * This function forces the widget to expand or not to expand,
 * regardless of children.  The override occurs because
 * gtk_widget_set_hexpand() sets the hexpand-set property (see
 * gtk_widget_set_hexpand_set()) which causes the widget’s hexpand
 * value to be used, rather than looking at children and widget state.
 * @param expand whether to expand
 */
set_hexpand(expand: boolean): void
/**
 * Sets whether the hexpand flag (see gtk_widget_get_hexpand()) will
 * be used.
 * 
 * The hexpand-set property will be set automatically when you call
 * gtk_widget_set_hexpand() to set hexpand, so the most likely
 * reason to use this function would be to unset an explicit expand
 * flag.
 * 
 * If hexpand is set, then it overrides any computed
 * expand value based on child widgets. If hexpand is not
 * set, then the expand value depends on whether any
 * children of the widget would like to expand.
 * 
 * There are few reasons to use this function, but it’s here
 * for completeness and consistency.
 * @param set value for hexpand-set property
 */
set_hexpand_set(set: boolean): void
/**
 * Marks the widget as being mapped.
 * 
 * This function should only ever be called in a derived widget's
 * “map” or “unmap” implementation.
 * @param mapped %TRUE to mark the widget as mapped
 */
set_mapped(mapped: boolean): void
/**
 * Sets the bottom margin of `widget`.
 * See the #GtkWidget:margin-bottom property.
 * @param margin the bottom margin
 */
set_margin_bottom(margin: number): void
/**
 * Sets the end margin of `widget`.
 * See the #GtkWidget:margin-end property.
 * @param margin the end margin
 */
set_margin_end(margin: number): void
/**
 * Sets the left margin of `widget`.
 * See the #GtkWidget:margin-left property.
 * @param margin the left margin
 */
set_margin_left(margin: number): void
/**
 * Sets the right margin of `widget`.
 * See the #GtkWidget:margin-right property.
 * @param margin the right margin
 */
set_margin_right(margin: number): void
/**
 * Sets the start margin of `widget`.
 * See the #GtkWidget:margin-start property.
 * @param margin the start margin
 */
set_margin_start(margin: number): void
/**
 * Sets the top margin of `widget`.
 * See the #GtkWidget:margin-top property.
 * @param margin the top margin
 */
set_margin_top(margin: number): void
/**
 * Widgets can be named, which allows you to refer to them from a
 * CSS file. You can apply a style to widgets with a particular name
 * in the CSS file. See the documentation for the CSS syntax (on the
 * same page as the docs for #GtkStyleContext).
 * 
 * Note that the CSS syntax has certain special characters to delimit
 * and represent elements in a selector (period, #, >, *...), so using
 * these will make your widget impossible to match by name. Any combination
 * of alphanumeric symbols, dashes and underscores will suffice.
 * @param name name for the widget
 */
set_name(name: string): void
/**
 * Sets the #GtkWidget:no-show-all property, which determines whether
 * calls to gtk_widget_show_all() will affect this widget.
 * 
 * This is mostly for use in constructing widget hierarchies with externally
 * controlled visibility, see #GtkUIManager.
 * @param no_show_all the new value for the “no-show-all” property
 */
set_no_show_all(no_show_all: boolean): void
/**
 * Request the `widget` to be rendered partially transparent,
 * with opacity 0 being fully transparent and 1 fully opaque. (Opacity values
 * are clamped to the [0,1] range.).
 * This works on both toplevel widget, and child widgets, although there
 * are some limitations:
 * 
 * For toplevel widgets this depends on the capabilities of the windowing
 * system. On X11 this has any effect only on X screens with a compositing manager
 * running. See gtk_widget_is_composited(). On Windows it should work
 * always, although setting a window’s opacity after the window has been
 * shown causes it to flicker once on Windows.
 * 
 * For child widgets it doesn’t work if any affected widget has a native window, or
 * disables double buffering.
 * @param opacity desired opacity, between 0 and 1
 */
set_opacity(opacity: number): void
/**
 * This function is useful only when implementing subclasses of
 * #GtkContainer.
 * Sets the container as the parent of `widget,` and takes care of
 * some details such as updating the state and style of the child
 * to reflect its new location. The opposite function is
 * gtk_widget_unparent().
 * @param parent parent container
 */
set_parent(parent: Gtk.Widget): void
/**
 * Sets a non default parent window for `widget`.
 * 
 * For #GtkWindow classes, setting a `parent_window` effects whether
 * the window is a toplevel window or can be embedded into other
 * widgets.
 * 
 * For #GtkWindow classes, this needs to be called before the
 * window is realized.
 * @param parent_window the new parent window.
 */
set_parent_window(parent_window: Gdk.Window): void
/**
 * Marks the widget as being realized. This function must only be
 * called after all #GdkWindows for the `widget` have been created
 * and registered.
 * 
 * This function should only ever be called in a derived widget's
 * “realize” or “unrealize” implementation.
 * @param realized %TRUE to mark the widget as realized
 */
set_realized(realized: boolean): void
/**
 * Specifies whether `widget` will be treated as the default widget
 * within its toplevel when it has the focus, even if another widget
 * is the default.
 * 
 * See gtk_widget_grab_default() for details about the meaning of
 * “default”.
 * @param receives_default whether or not @widget can be a default widget.
 */
set_receives_default(receives_default: boolean): void
/**
 * Sets whether the entire widget is queued for drawing when its size
 * allocation changes. By default, this setting is %TRUE and
 * the entire widget is redrawn on every size change. If your widget
 * leaves the upper left unchanged when made bigger, turning this
 * setting off will improve performance.
 * 
 * Note that for widgets where gtk_widget_get_has_window() is %FALSE
 * setting this flag to %FALSE turns off all allocation on resizing:
 * the widget will not even redraw if its position changes; this is to
 * allow containers that don’t draw anything to avoid excess
 * invalidations. If you set this flag on a widget with no window that
 * does draw on `widget->`window, you are
 * responsible for invalidating both the old and new allocation of the
 * widget when the widget is moved and responsible for invalidating
 * regions newly when the widget increases size.
 * @param redraw_on_allocate if %TRUE, the entire widget will be redrawn   when it is allocated to a new size. Otherwise, only the   new portion of the widget will be redrawn.
 */
set_redraw_on_allocate(redraw_on_allocate: boolean): void
/**
 * Sets the sensitivity of a widget. A widget is sensitive if the user
 * can interact with it. Insensitive widgets are “grayed out” and the
 * user can’t interact with them. Insensitive widgets are known as
 * “inactive”, “disabled”, or “ghosted” in some other toolkits.
 * @param sensitive %TRUE to make the widget sensitive
 */
set_sensitive(sensitive: boolean): void
/**
 * Sets the minimum size of a widget; that is, the widget’s size
 * request will be at least `width` by `height`. You can use this
 * function to force a widget to be larger than it normally would be.
 * 
 * In most cases, gtk_window_set_default_size() is a better choice for
 * toplevel windows than this function; setting the default size will
 * still allow users to shrink the window. Setting the size request
 * will force them to leave the window at least as large as the size
 * request. When dealing with window sizes,
 * gtk_window_set_geometry_hints() can be a useful function as well.
 * 
 * Note the inherent danger of setting any fixed size - themes,
 * translations into other languages, different fonts, and user action
 * can all change the appropriate size for a given widget. So, it's
 * basically impossible to hardcode a size that will always be
 * correct.
 * 
 * The size request of a widget is the smallest size a widget can
 * accept while still functioning well and drawing itself correctly.
 * However in some strange cases a widget may be allocated less than
 * its requested size, and in many cases a widget may be allocated more
 * space than it requested.
 * 
 * If the size request in a given direction is -1 (unset), then
 * the “natural” size request of the widget will be used instead.
 * 
 * The size request set here does not include any margin from the
 * #GtkWidget properties margin-left, margin-right, margin-top, and
 * margin-bottom, but it does include pretty much all other padding
 * or border properties set by any subclass of #GtkWidget.
 * @param width width @widget should request, or -1 to unset
 * @param height height @widget should request, or -1 to unset
 */
set_size_request(width: number, height: number): void
/**
 * This function is for use in widget implementations. Sets the state
 * of a widget (insensitive, prelighted, etc.) Usually you should set
 * the state using wrapper functions such as gtk_widget_set_sensitive().
 * @param state new state for @widget
 */
set_state(state: Gtk.StateType): void
/**
 * This function is for use in widget implementations. Turns on flag
 * values in the current widget state (insensitive, prelighted, etc.).
 * 
 * This function accepts the values %GTK_STATE_FLAG_DIR_LTR and
 * %GTK_STATE_FLAG_DIR_RTL but ignores them. If you want to set the widget's
 * direction, use gtk_widget_set_direction().
 * 
 * It is worth mentioning that any other state than %GTK_STATE_FLAG_INSENSITIVE,
 * will be propagated down to all non-internal children if `widget` is a
 * #GtkContainer, while %GTK_STATE_FLAG_INSENSITIVE itself will be propagated
 * down to all #GtkContainer children by different means than turning on the
 * state flag down the hierarchy, both gtk_widget_get_state_flags() and
 * gtk_widget_is_sensitive() will make use of these.
 * @param flags State flags to turn on
 * @param clear Whether to clear state before turning on @flags
 */
set_state_flags(flags: Gtk.StateFlags, clear: boolean): void
/**
 * Enables or disables multiple pointer awareness. If this setting is %TRUE,
 * `widget` will start receiving multiple, per device enter/leave events. Note
 * that if custom #GdkWindows are created in #GtkWidget::realize,
 * gdk_window_set_support_multidevice() will have to be called manually on them.
 * @param support_multidevice %TRUE to support input from multiple devices.
 */
set_support_multidevice(support_multidevice: boolean): void
/**
 * Sets `markup` as the contents of the tooltip, which is marked up with
 *  the [Pango text markup language][PangoMarkupFormat].
 * 
 * This function will take care of setting #GtkWidget:has-tooltip to %TRUE
 * and of the default handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-markup property and
 * gtk_tooltip_set_markup().
 * @param markup the contents of the tooltip for @widget, or %NULL
 */
set_tooltip_markup(markup?: (string | null)): void
/**
 * Sets `text` as the contents of the tooltip. This function will take
 * care of setting #GtkWidget:has-tooltip to %TRUE and of the default
 * handler for the #GtkWidget::query-tooltip signal.
 * 
 * See also the #GtkWidget:tooltip-text property and gtk_tooltip_set_text().
 * @param text the contents of the tooltip for @widget
 */
set_tooltip_text(text?: (string | null)): void
/**
 * Replaces the default window used for displaying
 * tooltips with `custom_window`. GTK+ will take care of showing and
 * hiding `custom_window` at the right moment, to behave likewise as
 * the default tooltip window. If `custom_window` is %NULL, the default
 * tooltip window will be used.
 * @param custom_window a #GtkWindow, or %NULL
 */
set_tooltip_window(custom_window?: (Gtk.Window | null)): void
/**
 * Sets the vertical alignment of `widget`.
 * See the #GtkWidget:valign property.
 * @param align the vertical alignment
 */
set_valign(align: Gtk.Align): void
/**
 * Sets whether the widget would like any available extra vertical
 * space.
 * 
 * See gtk_widget_set_hexpand() for more detail.
 * @param expand whether to expand
 */
set_vexpand(expand: boolean): void
/**
 * Sets whether the vexpand flag (see gtk_widget_get_vexpand()) will
 * be used.
 * 
 * See gtk_widget_set_hexpand_set() for more detail.
 * @param set value for vexpand-set property
 */
set_vexpand_set(set: boolean): void
/**
 * Sets the visibility state of `widget`. Note that setting this to
 * %TRUE doesn’t mean the widget is actually viewable, see
 * gtk_widget_get_visible().
 * 
 * This function simply calls gtk_widget_show() or gtk_widget_hide()
 * but is nicer to use when the visibility of the widget depends on
 * some condition.
 * @param visible whether the widget should be shown or not
 */
set_visible(visible: boolean): void
/**
 * Sets the visual that should be used for by widget and its children for
 * creating #GdkWindows. The visual must be on the same #GdkScreen as
 * returned by gtk_widget_get_screen(), so handling the
 * #GtkWidget::screen-changed signal is necessary.
 * 
 * Setting a new `visual` will not cause `widget` to recreate its windows,
 * so you should call this function before `widget` is realized.
 * @param visual visual to be used or %NULL to unset a previous one
 */
set_visual(visual?: (Gdk.Visual | null)): void
/**
 * Sets a widget’s window. This function should only be used in a
 * widget’s #GtkWidget::realize implementation. The %window passed is
 * usually either new window created with gdk_window_new(), or the
 * window of its parent widget as returned by
 * gtk_widget_get_parent_window().
 * 
 * Widgets must indicate whether they will create their own #GdkWindow
 * by calling gtk_widget_set_has_window(). This is usually done in the
 * widget’s init() function.
 * 
 * Note that this function does not add any reference to `window`.
 * @param window a #GdkWindow
 */
set_window(window: Gdk.Window): void
/**
 * Sets a shape for this widget’s GDK window. This allows for
 * transparent windows etc., see gdk_window_shape_combine_region()
 * for more information.
 * @param region shape to be added, or %NULL to remove an existing shape
 */
shape_combine_region(region?: (cairo.Region | null)): void
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
show_all(): void
/**
 * Shows a widget. If the widget is an unmapped toplevel widget
 * (i.e. a #GtkWindow that has not yet been shown), enter the main
 * loop and wait for the window to actually be mapped. Be careful;
 * because the main loop is running, anything can happen during
 * this function.
 */
show_now(): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
size_allocate(allocation: Gtk.Allocation): void
/**
 * This function is only used by #GtkContainer subclasses, to assign a size,
 * position and (optionally) baseline to their child widgets.
 * 
 * In this function, the allocation and baseline may be adjusted. It
 * will be forced to a 1x1 minimum size, and the
 * adjust_size_allocation virtual and adjust_baseline_allocation
 * methods on the child will be used to adjust the allocation and
 * baseline. Standard adjustments include removing the widget's
 * margins, and applying the widget’s #GtkWidget:halign and
 * #GtkWidget:valign properties.
 * 
 * If the child widget does not have a valign of %GTK_ALIGN_BASELINE the
 * baseline argument is ignored and -1 is used instead.
 * @param allocation position and size to be allocated to @widget
 * @param baseline The baseline of the child, or -1
 */
size_allocate_with_baseline(allocation: Gtk.Allocation, baseline: number): void
/**
 * This function is typically used when implementing a #GtkContainer
 * subclass.  Obtains the preferred size of a widget. The container
 * uses this information to arrange its child widgets and decide what
 * size allocations to give them with gtk_widget_size_allocate().
 * 
 * You can also call this function from an application, with some
 * caveats. Most notably, getting a size request requires the widget
 * to be associated with a screen, because font information may be
 * needed. Multihead-aware applications should keep this in mind.
 * 
 * Also remember that the size request is not necessarily the size
 * a widget will actually be allocated.
 */
size_request(): Gtk.Requisition
/**
 * This function attaches the widget’s #GtkStyle to the widget's
 * #GdkWindow. It is a replacement for
 * 
 * 
 * ```
 * widget->style = gtk_style_attach (widget->style, widget->window);
 * ```
 * 
 * 
 * and should only ever be called in a derived widget’s “realize”
 * implementation which does not chain up to its parent class'
 * “realize” implementation, because one of the parent classes
 * (finally #GtkWidget) would attach the style itself.
 */
style_attach(): void
/**
 * Gets the value of a style property of `widget`.
 * @param property_name the name of a style property
 * @param value location to return the property value
 */
style_get_property(property_name: string, value: GObject.Value): void
/**
 * Reverts the effect of a previous call to gtk_widget_freeze_child_notify().
 * This causes all queued #GtkWidget::child-notify signals on `widget` to be
 * emitted.
 */
thaw_child_notify(): void
/**
 * Translate coordinates relative to `src_widget’`s allocation to coordinates
 * relative to `dest_widget’`s allocations. In order to perform this
 * operation, both widgets must be realized, and must share a common
 * toplevel.
 * @param dest_widget a #GtkWidget
 * @param src_x X position relative to @src_widget
 * @param src_y Y position relative to @src_widget
 * @returns %FALSE if either widget was not realized, or there   was no common ancestor. In this case, nothing is stored in   *@dest_x and *@dest_y. Otherwise %TRUE.
 */
translate_coordinates(dest_widget: Gtk.Widget, src_x: number, src_y: number): [boolean, number, number]
/**
 * Triggers a tooltip query on the display where the toplevel of `widget`
 * is located. See gtk_tooltip_trigger_tooltip_query() for more
 * information.
 */
trigger_tooltip_query(): void
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
unmap(): void
/**
 * This function is only for use in widget implementations.
 * Should be called by implementations of the remove method
 * on #GtkContainer, to dissociate a child from the container.
 */
unparent(): void
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
unrealize(): void
/**
 * Unregisters a #GdkWindow from the widget that was previously set up with
 * gtk_widget_register_window(). You need to call this when the window is
 * no longer used by the widget, such as when you destroy it.
 * @param window a #GdkWindow
 */
unregister_window(window: Gdk.Window): void
/**
 * This function is for use in widget implementations. Turns off flag
 * values for the current widget state (insensitive, prelighted, etc.).
 * See gtk_widget_set_state_flags().
 * @param flags State flags to turn off
 */
unset_state_flags(flags: Gtk.StateFlags): void
vfunc_adjust_baseline_allocation(baseline: number): void
vfunc_adjust_baseline_request(minimum_baseline: number, natural_baseline: number): void
vfunc_adjust_size_allocation(orientation: Gtk.Orientation, minimum_size: number, natural_size: number, allocated_pos: number, allocated_size: number): void
vfunc_adjust_size_request(orientation: Gtk.Orientation, minimum_size: number, natural_size: number): void
vfunc_button_press_event(event: Gdk.EventButton): boolean
vfunc_button_release_event(event: Gdk.EventButton): boolean
/**
 * Determines whether an accelerator that activates the signal
 * identified by `signal_id` can currently be activated.
 * This is done by emitting the #GtkWidget::can-activate-accel
 * signal on `widget;` if the signal isn’t overridden by a
 * handler or in a derived widget, then the default check is
 * that the widget must be sensitive, and the widget and all
 * its ancestors mapped.
 * @param signal_id the ID of a signal installed on @widget
 */
vfunc_can_activate_accel(signal_id: number): boolean
/**
 * Emits a #GtkWidget::child-notify signal for the
 * [child property][child-properties] `child_property`
 * on `widget`.
 * 
 * This is the analogue of g_object_notify() for child properties.
 * 
 * Also see gtk_container_child_notify().
 * @param child_property the name of a child property installed on the                  class of @widget’s parent
 */
vfunc_child_notify(child_property: GObject.ParamSpec): void
vfunc_composited_changed(): void
vfunc_compute_expand(hexpand_p: boolean, vexpand_p: boolean): void
vfunc_configure_event(event: Gdk.EventConfigure): boolean
vfunc_damage_event(event: Gdk.EventExpose): boolean
vfunc_delete_event(event: Gdk.EventAny): boolean
/**
 * Destroys a widget.
 * 
 * When a widget is destroyed all references it holds on other objects
 * will be released:
 * 
 *  - if the widget is inside a container, it will be removed from its
 *  parent
 *  - if the widget is a container, all its children will be destroyed,
 *  recursively
 *  - if the widget is a top level, it will be removed from the list
 *  of top level widgets that GTK+ maintains internally
 * 
 * It's expected that all references held on the widget will also
 * be released; you should connect to the #GtkWidget::destroy signal
 * if you hold a reference to `widget` and you wish to remove it when
 * this function is called. It is not necessary to do so if you are
 * implementing a #GtkContainer, as you'll be able to use the
 * #GtkContainerClass.remove() virtual function for that.
 * 
 * It's important to notice that gtk_widget_destroy() will only cause
 * the `widget` to be finalized if no additional references, acquired
 * using g_object_ref(), are held on it. In case additional references
 * are in place, the `widget` will be in an "inert" state after calling
 * this function; `widget` will still point to valid memory, allowing you
 * to release the references you hold, but you may not query the widget's
 * own state.
 * 
 * You should typically call this function on top level widgets, and
 * rarely on child widgets.
 * 
 * See also: gtk_container_remove()
 */
vfunc_destroy(): void
vfunc_destroy_event(event: Gdk.EventAny): boolean
vfunc_direction_changed(previous_direction: Gtk.TextDirection): void
vfunc_dispatch_child_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_drag_begin(context: Gdk.DragContext): void
vfunc_drag_data_delete(context: Gdk.DragContext): void
vfunc_drag_data_get(context: Gdk.DragContext, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_data_received(context: Gdk.DragContext, x: number, y: number, selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_drag_drop(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_drag_end(context: Gdk.DragContext): void
vfunc_drag_failed(context: Gdk.DragContext, result: Gtk.DragResult): boolean
vfunc_drag_leave(context: Gdk.DragContext, time_: number): void
vfunc_drag_motion(context: Gdk.DragContext, x: number, y: number, time_: number): boolean
vfunc_draw(cr: cairo.Context): boolean
vfunc_enter_notify_event(event: Gdk.EventCrossing): boolean
/**
 * Rarely-used function. This function is used to emit
 * the event signals on a widget (those signals should never
 * be emitted without using this function to do so).
 * If you want to synthesize an event though, don’t use this function;
 * instead, use gtk_main_do_event() so the event will behave as if
 * it were in the event queue. Don’t synthesize expose events; instead,
 * use gdk_window_invalidate_rect() to invalidate a region of the
 * window.
 * @param event a #GdkEvent
 */
vfunc_event(event: Gdk.Event): boolean
vfunc_focus(direction: Gtk.DirectionType): boolean
vfunc_focus_in_event(event: Gdk.EventFocus): boolean
vfunc_focus_out_event(event: Gdk.EventFocus): boolean
/**
 * Returns the accessible object that describes the widget to an
 * assistive technology.
 * 
 * If accessibility support is not available, this #AtkObject
 * instance may be a no-op. Likewise, if no class-specific #AtkObject
 * implementation is available for the widget instance in question,
 * it will inherit an #AtkObject implementation from the first ancestor
 * class for which such an implementation is defined.
 * 
 * The documentation of the
 * [ATK](http://developer.gnome.org/atk/stable/)
 * library contains more information about accessible objects and their uses.
 */
vfunc_get_accessible(): Atk.Object
/**
 * Retrieves a widget’s initial minimum and natural height.
 * 
 * This call is specific to width-for-height requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_height(): [number, number]
/**
 * Retrieves a widget’s minimum and natural height and the corresponding baselines if it would be given
 * the specified `width,` or the default height if `width` is -1. The baselines may be -1 which means
 * that no baseline is requested for this widget.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request and GtkWidgetClass::adjust_baseline_request virtual methods
 * and by any #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation, or -1 if none
 */
vfunc_get_preferred_height_and_baseline_for_width(width: number): [number, number, number, number]
/**
 * Retrieves a widget’s minimum and natural height if it would be given
 * the specified `width`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param width the width which is available for allocation
 */
vfunc_get_preferred_height_for_width(width: number): [number, number]
/**
 * Retrieves a widget’s initial minimum and natural width.
 * 
 * This call is specific to height-for-width requests.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 */
vfunc_get_preferred_width(): [number, number]
/**
 * Retrieves a widget’s minimum and natural width if it would be given
 * the specified `height`.
 * 
 * The returned request will be modified by the
 * GtkWidgetClass::adjust_size_request virtual method and by any
 * #GtkSizeGroups that have been applied. That is, the returned request
 * is the one that should be used for layout, not necessarily the one
 * returned by the widget itself.
 * @param height the height which is available for allocation
 */
vfunc_get_preferred_width_for_height(height: number): [number, number]
/**
 * Gets whether the widget prefers a height-for-width layout
 * or a width-for-height layout.
 * 
 * #GtkBin widgets generally propagate the preference of
 * their child, container widgets need to request something either in
 * context of their children or in context of their allocation
 * capabilities.
 */
vfunc_get_request_mode(): Gtk.SizeRequestMode
vfunc_grab_broken_event(event: Gdk.EventGrabBroken): boolean
/**
 * Causes `widget` to have the keyboard focus for the #GtkWindow it's
 * inside. `widget` must be a focusable widget, such as a #GtkEntry;
 * something like #GtkFrame won’t work.
 * 
 * More precisely, it must have the %GTK_CAN_FOCUS flag set. Use
 * gtk_widget_set_can_focus() to modify that flag.
 * 
 * The widget also needs to be realized and mapped. This is indicated by the
 * related signals. Grabbing the focus immediately after creating the widget
 * will likely fail and cause critical warnings.
 */
vfunc_grab_focus(): void
vfunc_grab_notify(was_grabbed: boolean): void
/**
 * Reverses the effects of gtk_widget_show(), causing the widget to be
 * hidden (invisible to the user).
 */
vfunc_hide(): void
vfunc_hierarchy_changed(previous_toplevel: Gtk.Widget): void
vfunc_key_press_event(event: Gdk.EventKey): boolean
vfunc_key_release_event(event: Gdk.EventKey): boolean
/**
 * This function should be called whenever keyboard navigation within
 * a single widget hits a boundary. The function emits the
 * #GtkWidget::keynav-failed signal on the widget and its return
 * value should be interpreted in a way similar to the return value of
 * gtk_widget_child_focus():
 * 
 * When %TRUE is returned, stay in the widget, the failed keyboard
 * navigation is OK and/or there is nowhere we can/should move the
 * focus to.
 * 
 * When %FALSE is returned, the caller should continue with keyboard
 * navigation outside the widget, e.g. by calling
 * gtk_widget_child_focus() on the widget’s toplevel.
 * 
 * The default ::keynav-failed handler returns %FALSE for
 * %GTK_DIR_TAB_FORWARD and %GTK_DIR_TAB_BACKWARD. For the other
 * values of #GtkDirectionType it returns %TRUE.
 * 
 * Whenever the default handler returns %TRUE, it also calls
 * gtk_widget_error_bell() to notify the user of the failed keyboard
 * navigation.
 * 
 * A use case for providing an own implementation of ::keynav-failed
 * (either by connecting to it or by overriding it) would be a row of
 * #GtkEntry widgets where the user should be able to navigate the
 * entire row with the cursor keys, as e.g. known from user interfaces
 * that require entering license keys.
 * @param direction direction of focus movement
 */
vfunc_keynav_failed(direction: Gtk.DirectionType): boolean
vfunc_leave_notify_event(event: Gdk.EventCrossing): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be mapped if it isn’t already.
 */
vfunc_map(): void
vfunc_map_event(event: Gdk.EventAny): boolean
/**
 * Emits the #GtkWidget::mnemonic-activate signal.
 * @param group_cycling %TRUE if there are other widgets with the same mnemonic
 */
vfunc_mnemonic_activate(group_cycling: boolean): boolean
vfunc_motion_notify_event(event: Gdk.EventMotion): boolean
vfunc_move_focus(direction: Gtk.DirectionType): void
vfunc_parent_set(previous_parent: Gtk.Widget): void
vfunc_popup_menu(): boolean
vfunc_property_notify_event(event: Gdk.EventProperty): boolean
vfunc_proximity_in_event(event: Gdk.EventProximity): boolean
vfunc_proximity_out_event(event: Gdk.EventProximity): boolean
vfunc_query_tooltip(x: number, y: number, keyboard_tooltip: boolean, tooltip: Gtk.Tooltip): boolean
/**
 * Invalidates the area of `widget` defined by `region` by calling
 * gdk_window_invalidate_region() on the widget’s window and all its
 * child windows. Once the main loop becomes idle (after the current
 * batch of events has been processed, roughly), the window will
 * receive expose events for the union of all regions that have been
 * invalidated.
 * 
 * Normally you would only use this function in widget
 * implementations. You might also use it to schedule a redraw of a
 * #GtkDrawingArea or some portion thereof.
 * @param region region to draw
 */
vfunc_queue_draw_region(region: cairo.Region): void
/**
 * Creates the GDK (windowing system) resources associated with a
 * widget.  For example, `widget->`window will be created when a widget
 * is realized.  Normally realization happens implicitly; if you show
 * a widget and all its parent containers, then the widget will be
 * realized and mapped automatically.
 * 
 * Realizing a widget requires all
 * the widget’s parent widgets to be realized; calling
 * gtk_widget_realize() realizes the widget’s parents in addition to
 * `widget` itself. If a widget is not yet inside a toplevel window
 * when you realize it, bad things will happen.
 * 
 * This function is primarily used in widget implementations, and
 * isn’t very useful otherwise. Many times when you think you might
 * need it, a better approach is to connect to a signal that will be
 * called after the widget is realized automatically, such as
 * #GtkWidget::draw. Or simply g_signal_connect () to the
 * #GtkWidget::realize signal.
 */
vfunc_realize(): void
vfunc_screen_changed(previous_screen: Gdk.Screen): void
vfunc_scroll_event(event: Gdk.EventScroll): boolean
vfunc_selection_clear_event(event: Gdk.EventSelection): boolean
vfunc_selection_get(selection_data: Gtk.SelectionData, info: number, time_: number): void
vfunc_selection_notify_event(event: Gdk.EventSelection): boolean
vfunc_selection_received(selection_data: Gtk.SelectionData, time_: number): void
vfunc_selection_request_event(event: Gdk.EventSelection): boolean
/**
 * Flags a widget to be displayed. Any widget that isn’t shown will
 * not appear on the screen. If you want to show all the widgets in a
 * container, it’s easier to call gtk_widget_show_all() on the
 * container, instead of individually showing the widgets.
 * 
 * Remember that you have to show the containers containing a widget,
 * in addition to the widget itself, before it will appear onscreen.
 * 
 * When a toplevel container is shown, it is immediately realized and
 * mapped; other shown widgets are realized and mapped when their
 * toplevel container is realized and mapped.
 */
vfunc_show(): void
/**
 * Recursively shows a widget, and any child widgets (if the widget is
 * a container).
 */
vfunc_show_all(): void
vfunc_show_help(help_type: Gtk.WidgetHelpType): boolean
/**
 * This function is only used by #GtkContainer subclasses, to assign a size
 * and position to their child widgets.
 * 
 * In this function, the allocation may be adjusted. It will be forced
 * to a 1x1 minimum size, and the adjust_size_allocation virtual
 * method on the child will be used to adjust the allocation. Standard
 * adjustments include removing the widget’s margins, and applying the
 * widget’s #GtkWidget:halign and #GtkWidget:valign properties.
 * 
 * For baseline support in containers you need to use gtk_widget_size_allocate_with_baseline()
 * instead.
 * @param allocation position and size to be allocated to @widget
 */
vfunc_size_allocate(allocation: Gtk.Allocation): void
vfunc_state_changed(previous_state: Gtk.StateType): void
vfunc_state_flags_changed(previous_state_flags: Gtk.StateFlags): void
vfunc_style_set(previous_style: Gtk.Style): void
vfunc_style_updated(): void
vfunc_touch_event(event: Gdk.EventTouch): boolean
/**
 * This function is only for use in widget implementations. Causes
 * a widget to be unmapped if it’s currently mapped.
 */
vfunc_unmap(): void
vfunc_unmap_event(event: Gdk.EventAny): boolean
/**
 * This function is only useful in widget implementations.
 * Causes a widget to be unrealized (frees all GDK resources
 * associated with the widget, such as `widget->`window).
 */
vfunc_unrealize(): void
vfunc_visibility_notify_event(event: Gdk.EventVisibility): boolean
vfunc_window_state_event(event: Gdk.EventWindowState): boolean
}

module TabStrip {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Box.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.Orientable.ConstructorProps {
edge: Gtk.PositionType;
    stack: Gtk.Stack;
    style: TabStyle | any;
    }

}

class TabStrip extends Gtk.Box implements Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Dazzle.TabStrip

    get edge(): Gtk.PositionType;
    set edge(val: Gtk.PositionType);
    get stack(): Gtk.Stack;
    set stack(val: Gtk.Stack);
// This accessor conflicts with another accessor's type in a parent class or interface.
    get style(): TabStyle | any;
// This accessor conflicts with another accessor's type in a parent class or interface.
    set style(val: TabStyle | any);

    // Constructors of Dazzle.TabStrip


constructor(properties?: Partial<TabStrip.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): TabStrip;

    // Own methods of Dazzle.TabStrip

    add_control(widget: Gtk.Widget): void
    get_edge(): Gtk.PositionType
    get_stack(): (Gtk.Stack | null)
    get_style(): TabStyle
    get_style(...args: never[]): any
    set_edge(edge: Gtk.PositionType): void
    set_stack(stack: Gtk.Stack): void
    set_style(style: TabStyle): void
    set_style(...args: never[]): any

// Inherited properties
/**
 * The orientation of the orientable.
 */
get orientation(): Gtk.Orientation;
set orientation(val: Gtk.Orientation);

// Inherited methods
/**
 * Retrieves the orientation of the `orientable`.
 * @returns the orientation of the @orientable.
 */
get_orientation(): Gtk.Orientation
/**
 * Sets the orientation of the `orientable`.
 * @param orientation the orientable’s new orientation.
 */
set_orientation(orientation: Gtk.Orientation): void
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module TaskCache {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {
key_copy_func: any;
    keyCopyFunc: any;
    key_destroy_func: any;
    keyDestroyFunc: any;
    key_equal_func: any;
    keyEqualFunc: any;
    key_hash_func: any;
    keyHashFunc: any;
    populate_callback: any;
    populateCallback: any;
    populate_callback_data: any;
    populateCallbackData: any;
    populate_callback_data_destroy: any;
    populateCallbackDataDestroy: any;
    time_to_live: number;
    timeToLive: number;
    value_copy_func: any;
    valueCopyFunc: any;
    value_destroy_func: any;
    valueDestroyFunc: any;
    }

}

class TaskCache extends GObject.Object {

    // Own properties of Dazzle.TaskCache

    set key_copy_func(val: any);
    set keyCopyFunc(val: any);
    set key_destroy_func(val: any);
    set keyDestroyFunc(val: any);
    set key_equal_func(val: any);
    set keyEqualFunc(val: any);
    set key_hash_func(val: any);
    set keyHashFunc(val: any);
    set populate_callback(val: any);
    set populateCallback(val: any);
    set populate_callback_data(val: any);
    set populateCallbackData(val: any);
    set populate_callback_data_destroy(val: any);
    set populateCallbackDataDestroy(val: any);
    /**
     * This is the number of milliseconds before an item should be evicted
     * from the cache.
     * 
     * A value of zero indicates no eviction.
     */
    set time_to_live(val: number);
    /**
     * This is the number of milliseconds before an item should be evicted
     * from the cache.
     * 
     * A value of zero indicates no eviction.
     */
    set timeToLive(val: number);
    set value_copy_func(val: any);
    set valueCopyFunc(val: any);
    set value_destroy_func(val: any);
    set valueDestroyFunc(val: any);

    // Constructors of Dazzle.TaskCache


constructor(properties?: Partial<TaskCache.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own methods of Dazzle.TaskCache

    evict(key?: (any | null)): boolean
    evict_all(): void
    get_async(key: (any | null), force_update: boolean, cancellable?: (Gio.Cancellable | null), callback?: (Gio.AsyncReadyCallback<this> | null)): void
    /**
     * Finish a call to dzl_task_cache_get_async().
     * @param result 
     * @returns The result from the cache.
     */
    get_finish(result: Gio.AsyncResult): (any | null)
    /**
     * Peeks to see `key` is contained in the cache and returns the
     * matching #GObject if it does.
     * 
     * The reference count of the resulting #GObject is not incremented.
     * For that reason, it is important to remember that this function
     * may only be called from the main thread.
     * @param key The key for the cache
     * @returns A #GObject or   %NULL if the key was not found in the cache.
     */
    peek<T = GObject.Object>(key?: (any | null)): T
    set_name(name: string): void
}

module ThemeManager {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {

    }

}

class ThemeManager extends GObject.Object {

    // Constructors of Dazzle.ThemeManager


constructor(properties?: Partial<ThemeManager.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): ThemeManager;

    // Own methods of Dazzle.ThemeManager

    /**
     * This will automatically register resources found within `resource_path`.
     * 
     * If `resource_path` starts with "resource://", embedded #GResources will be
     * used to locate the theme files. Otherwise, `resource_path` is expected to be
     * a path on disk that may or may not exist.
     * 
     * If the `resource_path` contains a directory named "themes", that directory
     * will be traversed for files matching the theme name and variant. For
     * example, if using the Adwaita theme, "themes/Adwaita.css" will be loaded. If
     * the dark variant is being used, "themes/Adwaita-dark.css" will be loaeded. If
     * no matching theme file is located, "themes/shared.css" will be loaded.
     * 
     * When the current theme changes, the CSS will be reloaded to adapt.
     * 
     * The "icons" sub-directory will be used to locate icon themes.
     * @param resource_path A path to a #GResources directory
     */
    add_resources(resource_path: string): void
    /**
     * This removes the CSS providers that were registered using `resource_path`.
     * 
     * You must have previously called dzl_theme_manager_add_resources() for
     * this function to do anything.
     * 
     * Since icons cannot be unloaded, previously loaded icons will continue to
     * be available even after calling this function.
     * @param resource_path A previously registered resources path
     */
    remove_resources(resource_path: string): void
}

module ThreeGrid {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Container.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps {
column_spacing: number;
    columnSpacing: number;
    row_spacing: number;
    rowSpacing: number;
    }

}

class ThreeGrid extends Gtk.Container implements Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Dazzle.ThreeGrid

    get column_spacing(): number;
    set column_spacing(val: number);
    get columnSpacing(): number;
    set columnSpacing(val: number);
    get row_spacing(): number;
    set row_spacing(val: number);
    get rowSpacing(): number;
    set rowSpacing(val: number);

    // Constructors of Dazzle.ThreeGrid


constructor(properties?: Partial<ThreeGrid.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): ThreeGrid;

// Inherited methods
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module Tree {

    // Signal callback interfaces

    interface Action {
        (object: string, p0: string, p1: string): void
    }

    interface PopulatePopup {
        (object: Gtk.Widget): void
    }


    // Constructor properties interface

    interface ConstructorProps extends Gtk.TreeView.ConstructorProps, Atk.ImplementorIface.ConstructorProps, Gtk.Buildable.ConstructorProps, Gtk.Scrollable.ConstructorProps {
always_expand: boolean;
    alwaysExpand: boolean;
    context_menu: Gio.MenuModel;
    contextMenu: Gio.MenuModel;
    root: TreeNode;
    selection: TreeNode;
    show_icons: boolean;
    showIcons: boolean;
    }

}

class Tree extends Gtk.TreeView implements Atk.ImplementorIface, Gtk.Buildable, Gtk.Scrollable {

    // Own properties of Dazzle.Tree

    get always_expand(): boolean;
    get alwaysExpand(): boolean;
    get context_menu(): Gio.MenuModel;
    set context_menu(val: Gio.MenuModel);
    get contextMenu(): Gio.MenuModel;
    set contextMenu(val: Gio.MenuModel);
    get root(): TreeNode;
    set root(val: TreeNode);
    get selection(): TreeNode;
    set selection(val: TreeNode);
    get show_icons(): boolean;
    set show_icons(val: boolean);
    get showIcons(): boolean;
    set showIcons(val: boolean);

    // Constructors of Dazzle.Tree


constructor(properties?: Partial<Tree.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own signals of Dazzle.Tree

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'action', callback: ((_source: this, object: string, p0: string, p1: string) => void)): number
    connect_after(signal: 'action', callback: ((_source: this, object: string, p0: string, p1: string) => void)): number
    emit(signal: 'action', object: string, p0: string, p1: string): void
    connect(signal: 'populate-popup', callback: ((_source: this, object: Gtk.Widget) => void)): number
    connect_after(signal: 'populate-popup', callback: ((_source: this, object: Gtk.Widget) => void)): number
    emit(signal: 'populate-popup', object: Gtk.Widget): void

    // Own virtual methods of Dazzle.Tree

    vfunc_action(action_group: string, action_name: string, param: string): void
    vfunc_populate_popup(widget: Gtk.Widget): void

    // Own methods of Dazzle.Tree

    /**
     * Add a builder to the tree.
     * @param builder A #DzlTreeBuilder to add.
     */
    add_builder(builder: TreeBuilder): void
    expand_to_node(node: TreeNode): void
    /**
     * Searches through the direct children of `node` for a matching child.
     * `find_func` should return %TRUE if the child matches, otherwise %FALSE.
     * @param node A #DzlTreeNode
     * @param find_func A callback to locate the child
     * @returns A #DzlTreeNode or %NULL.
     */
    find_child_node(node: TreeNode, find_func: TreeFindFunc): (TreeNode | null)
    /**
     * Walks the entire tree looking for the first item that matches given
     * `equal_func` and `key`.
     * 
     * The first parameter to `equal_func` will always be `key`.
     * The second parameter will be the nodes #DzlTreeNode:item property.
     * @param equal_func A #GEqualFunc
     * @param key the key for @equal_func
     * @returns A #DzlTreeNode or %NULL.
     */
    find_custom(equal_func: GLib.EqualFunc, key?: (any | null)): (TreeNode | null)
    /**
     * Finds a #DzlTreeNode with an item property matching `item`.
     * @param item A #GObject or %NULL.
     * @returns A #DzlTreeNode or %NULL.
     */
    find_item(item?: (GObject.Object | null)): (TreeNode | null)
    get_context_menu(): (Gio.MenuModel | null)
    /**
     * Retrieves the root node of the tree. The root node is not a visible node
     * in the self, but a placeholder for all other builders to build upon.
     * @returns A #DzlTreeNode or %NULL.
     */
    get_root(): (TreeNode | null)
    /**
     * Gets the currently selected node in the tree.
     * @returns A #DzlTreeNode.
     */
    get_selected(): TreeNode
    get_show_icons(): boolean
    rebuild(): void
    /**
     * Removes a builder from the tree.
     * @param builder A #DzlTreeBuilder to remove.
     */
    remove_builder(builder: TreeBuilder): void
    scroll_to_node(node: TreeNode): void
    set_context_menu(context_menu: Gio.MenuModel): void
    /**
     * Sets the filter function to be used to determine visability of a tree node.
     * @param filter_func A callback to determien visibility.
     */
    set_filter(filter_func: TreeFilterFunc): void
    /**
     * Sets the root node of the #DzlTree widget. This is used to build
     * the items within the treeview. The item itself will not be added
     * to the self, but the direct children will be.
     * @param node A #DzlTreeNode.
     */
    set_root(node: TreeNode): void
    set_show_icons(show_icons: boolean): void
    /**
     * Unselects the currently selected node in the tree.
     */
    unselect_all(): void

// Inherited properties
/**
 * Horizontal #GtkAdjustment of the scrollable widget. This adjustment is
 * shared between the scrollable widget and its parent.
 */
get hadjustment(): Gtk.Adjustment;
set hadjustment(val: Gtk.Adjustment);
/**
 * Determines whether horizontal scrolling should start once the scrollable
 * widget is allocated less than its minimum width or less than its natural width.
 */
get hscroll_policy(): Gtk.ScrollablePolicy;
set hscroll_policy(val: Gtk.ScrollablePolicy);
/**
 * Determines whether horizontal scrolling should start once the scrollable
 * widget is allocated less than its minimum width or less than its natural width.
 */
get hscrollPolicy(): Gtk.ScrollablePolicy;
set hscrollPolicy(val: Gtk.ScrollablePolicy);
/**
 * Verical #GtkAdjustment of the scrollable widget. This adjustment is shared
 * between the scrollable widget and its parent.
 */
get vadjustment(): Gtk.Adjustment;
set vadjustment(val: Gtk.Adjustment);
/**
 * Determines whether vertical scrolling should start once the scrollable
 * widget is allocated less than its minimum height or less than its natural height.
 */
get vscroll_policy(): Gtk.ScrollablePolicy;
set vscroll_policy(val: Gtk.ScrollablePolicy);
/**
 * Determines whether vertical scrolling should start once the scrollable
 * widget is allocated less than its minimum height or less than its natural height.
 */
get vscrollPolicy(): Gtk.ScrollablePolicy;
set vscrollPolicy(val: Gtk.ScrollablePolicy);

// Inherited methods
/**
 * Returns the size of a non-scrolling border around the
 * outside of the scrollable. An example for this would
 * be treeview headers. GTK+ can use this information to
 * display overlayed graphics, like the overshoot indication,
 * at the right position.
 * @returns %TRUE if @border has been set
 */
get_border(): [boolean, Gtk.Border]
/**
 * Retrieves the #GtkAdjustment used for horizontal scrolling.
 * @returns horizontal #GtkAdjustment.
 */
get_hadjustment(): Gtk.Adjustment
/**
 * Gets the horizontal #GtkScrollablePolicy.
 * @returns The horizontal #GtkScrollablePolicy.
 */
get_hscroll_policy(): Gtk.ScrollablePolicy
/**
 * Retrieves the #GtkAdjustment used for vertical scrolling.
 * @returns vertical #GtkAdjustment.
 */
get_vadjustment(): Gtk.Adjustment
/**
 * Gets the vertical #GtkScrollablePolicy.
 * @returns The vertical #GtkScrollablePolicy.
 */
get_vscroll_policy(): Gtk.ScrollablePolicy
/**
 * Sets the horizontal adjustment of the #GtkScrollable.
 * @param hadjustment a #GtkAdjustment
 */
set_hadjustment(hadjustment?: (Gtk.Adjustment | null)): void
/**
 * Sets the #GtkScrollablePolicy to determine whether
 * horizontal scrolling should start below the minimum width or
 * below the natural width.
 * @param policy the horizontal #GtkScrollablePolicy
 */
set_hscroll_policy(policy: Gtk.ScrollablePolicy): void
/**
 * Sets the vertical adjustment of the #GtkScrollable.
 * @param vadjustment a #GtkAdjustment
 */
set_vadjustment(vadjustment?: (Gtk.Adjustment | null)): void
/**
 * Sets the #GtkScrollablePolicy to determine whether
 * vertical scrolling should start below the minimum height or
 * below the natural height.
 * @param policy the vertical #GtkScrollablePolicy
 */
set_vscroll_policy(policy: Gtk.ScrollablePolicy): void
/**
 * Returns the size of a non-scrolling border around the
 * outside of the scrollable. An example for this would
 * be treeview headers. GTK+ can use this information to
 * display overlayed graphics, like the overshoot indication,
 * at the right position.
 */
vfunc_get_border(): [boolean, Gtk.Border]
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

module TreeBuilder {

    // Signal callback interfaces

    interface Added {
        (object: Tree): void
    }

    interface BuildChildren {
        (object: TreeNode): void
    }

    interface BuildNode {
        (object: TreeNode): void
    }

    interface DragDataGet {
        (object: TreeNode, p0: Gtk.SelectionData): boolean
    }

    interface DragDataReceived {
        (object: TreeNode, p0: TreeDropPosition, p1: Gdk.DragAction, p2: Gtk.SelectionData): boolean
    }

    interface DragNodeDelete {
        (object: TreeNode): boolean
    }

    interface DragNodeReceived {
        (object: TreeNode, p0: TreeNode, p1: TreeDropPosition, p2: Gdk.DragAction, p3: Gtk.SelectionData): boolean
    }

    interface NodeActivated {
        (object: TreeNode): boolean
    }

    interface NodeCollapsed {
        (object: TreeNode): void
    }

    interface NodeDraggable {
        (object: TreeNode): boolean
    }

    interface NodeDroppable {
        (object: TreeNode, p0: Gtk.SelectionData): boolean
    }

    interface NodeExpanded {
        (object: TreeNode): void
    }

    interface NodePopup {
        (object: TreeNode, p0: Gio.Menu): void
    }

    interface NodeSelected {
        (object: TreeNode): void
    }

    interface NodeUnselected {
        (object: TreeNode): void
    }

    interface Removed {
        (object: Tree): void
    }


    // Constructor properties interface

    interface ConstructorProps extends GObject.InitiallyUnowned.ConstructorProps {
tree: Tree;
    }

}

class TreeBuilder extends GObject.InitiallyUnowned {

    // Own properties of Dazzle.TreeBuilder

    get tree(): Tree;

    // Constructors of Dazzle.TreeBuilder


constructor(properties?: Partial<TreeBuilder.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): TreeBuilder;

    // Own signals of Dazzle.TreeBuilder

    connect(id: string, callback: (...args: any[]) => any): number
    connect_after(id: string, callback: (...args: any[]) => any): number
    emit(id: string, ...args: any[]): void
    connect(signal: 'added', callback: ((_source: this, object: Tree) => void)): number
    connect_after(signal: 'added', callback: ((_source: this, object: Tree) => void)): number
    emit(signal: 'added', object: Tree): void
    connect(signal: 'build-children', callback: ((_source: this, object: TreeNode) => void)): number
    connect_after(signal: 'build-children', callback: ((_source: this, object: TreeNode) => void)): number
    emit(signal: 'build-children', object: TreeNode): void
    connect(signal: 'build-node', callback: ((_source: this, object: TreeNode) => void)): number
    connect_after(signal: 'build-node', callback: ((_source: this, object: TreeNode) => void)): number
    emit(signal: 'build-node', object: TreeNode): void
    connect(signal: 'drag-data-get', callback: ((_source: this, object: TreeNode, p0: Gtk.SelectionData) => boolean)): number
    connect_after(signal: 'drag-data-get', callback: ((_source: this, object: TreeNode, p0: Gtk.SelectionData) => boolean)): number
    emit(signal: 'drag-data-get', object: TreeNode, p0: Gtk.SelectionData): void
    connect(signal: 'drag-data-received', callback: ((_source: this, object: TreeNode, p0: TreeDropPosition, p1: Gdk.DragAction, p2: Gtk.SelectionData) => boolean)): number
    connect_after(signal: 'drag-data-received', callback: ((_source: this, object: TreeNode, p0: TreeDropPosition, p1: Gdk.DragAction, p2: Gtk.SelectionData) => boolean)): number
    emit(signal: 'drag-data-received', object: TreeNode, p0: TreeDropPosition, p1: Gdk.DragAction, p2: Gtk.SelectionData): void
    connect(signal: 'drag-node-delete', callback: ((_source: this, object: TreeNode) => boolean)): number
    connect_after(signal: 'drag-node-delete', callback: ((_source: this, object: TreeNode) => boolean)): number
    emit(signal: 'drag-node-delete', object: TreeNode): void
    connect(signal: 'drag-node-received', callback: ((_source: this, object: TreeNode, p0: TreeNode, p1: TreeDropPosition, p2: Gdk.DragAction, p3: Gtk.SelectionData) => boolean)): number
    connect_after(signal: 'drag-node-received', callback: ((_source: this, object: TreeNode, p0: TreeNode, p1: TreeDropPosition, p2: Gdk.DragAction, p3: Gtk.SelectionData) => boolean)): number
    emit(signal: 'drag-node-received', object: TreeNode, p0: TreeNode, p1: TreeDropPosition, p2: Gdk.DragAction, p3: Gtk.SelectionData): void
    connect(signal: 'node-activated', callback: ((_source: this, object: TreeNode) => boolean)): number
    connect_after(signal: 'node-activated', callback: ((_source: this, object: TreeNode) => boolean)): number
    emit(signal: 'node-activated', object: TreeNode): void
    connect(signal: 'node-collapsed', callback: ((_source: this, object: TreeNode) => void)): number
    connect_after(signal: 'node-collapsed', callback: ((_source: this, object: TreeNode) => void)): number
    emit(signal: 'node-collapsed', object: TreeNode): void
    connect(signal: 'node-draggable', callback: ((_source: this, object: TreeNode) => boolean)): number
    connect_after(signal: 'node-draggable', callback: ((_source: this, object: TreeNode) => boolean)): number
    emit(signal: 'node-draggable', object: TreeNode): void
    connect(signal: 'node-droppable', callback: ((_source: this, object: TreeNode, p0: Gtk.SelectionData) => boolean)): number
    connect_after(signal: 'node-droppable', callback: ((_source: this, object: TreeNode, p0: Gtk.SelectionData) => boolean)): number
    emit(signal: 'node-droppable', object: TreeNode, p0: Gtk.SelectionData): void
    connect(signal: 'node-expanded', callback: ((_source: this, object: TreeNode) => void)): number
    connect_after(signal: 'node-expanded', callback: ((_source: this, object: TreeNode) => void)): number
    emit(signal: 'node-expanded', object: TreeNode): void
    connect(signal: 'node-popup', callback: ((_source: this, object: TreeNode, p0: Gio.Menu) => void)): number
    connect_after(signal: 'node-popup', callback: ((_source: this, object: TreeNode, p0: Gio.Menu) => void)): number
    emit(signal: 'node-popup', object: TreeNode, p0: Gio.Menu): void
    connect(signal: 'node-selected', callback: ((_source: this, object: TreeNode) => void)): number
    connect_after(signal: 'node-selected', callback: ((_source: this, object: TreeNode) => void)): number
    emit(signal: 'node-selected', object: TreeNode): void
    connect(signal: 'node-unselected', callback: ((_source: this, object: TreeNode) => void)): number
    connect_after(signal: 'node-unselected', callback: ((_source: this, object: TreeNode) => void)): number
    emit(signal: 'node-unselected', object: TreeNode): void
    connect(signal: 'removed', callback: ((_source: this, object: Tree) => void)): number
    connect_after(signal: 'removed', callback: ((_source: this, object: Tree) => void)): number
    emit(signal: 'removed', object: Tree): void

    // Own virtual methods of Dazzle.TreeBuilder

    vfunc_added(tree: Gtk.Widget): void
    vfunc_build_children(parent: TreeNode): void
    vfunc_build_node(node: TreeNode): void
    vfunc_cell_data_func(node: TreeNode, cell: Gtk.CellRenderer): void
    vfunc_drag_data_get(node: TreeNode, data: Gtk.SelectionData): boolean
    vfunc_drag_data_received(drop_node: TreeNode, position: TreeDropPosition, action: Gdk.DragAction, data: Gtk.SelectionData): boolean
    vfunc_drag_node_delete(node: TreeNode): boolean
    vfunc_drag_node_received(drag_node: TreeNode, drop_node: TreeNode, position: TreeDropPosition, action: Gdk.DragAction, data: Gtk.SelectionData): boolean
    vfunc_node_activated(node: TreeNode): boolean
    vfunc_node_collapsed(node: TreeNode): void
    vfunc_node_draggable(node: TreeNode): boolean
    vfunc_node_droppable(node: TreeNode, data: Gtk.SelectionData): boolean
    vfunc_node_expanded(node: TreeNode): void
    vfunc_node_popup(node: TreeNode, menu: Gio.Menu): void
    vfunc_node_selected(node: TreeNode): void
    vfunc_node_unselected(node: TreeNode): void
    vfunc_removed(tree: Gtk.Widget): void

    // Own methods of Dazzle.TreeBuilder

    /**
     * Gets the tree that owns the builder.
     * @returns A #DzlTree or %NULL.
     */
    get_tree(): (Tree | null)
}

module TreeNode {

    // Constructor properties interface

    interface ConstructorProps extends GObject.InitiallyUnowned.ConstructorProps {
children_possible: boolean;
    childrenPossible: boolean;
    expanded_icon_name: string;
    expandedIconName: string;
    gicon: Gio.Icon;
    icon_name: string;
    iconName: string;
    item: GObject.Object;
    parent: TreeNode;
    reset_on_collapse: boolean;
    resetOnCollapse: boolean;
    text: string;
    tree: Tree;
    use_dim_label: boolean;
    useDimLabel: boolean;
    use_markup: boolean;
    useMarkup: boolean;
    }

}

class TreeNode extends GObject.InitiallyUnowned {

    // Own properties of Dazzle.TreeNode

    /**
     * This property allows for more lazy loading of nodes.
     * 
     * When a node becomes visible, we normally build its children nodes
     * so that we know if we need an expansion arrow. However, that can
     * be expensive when rendering directories with lots of subdirectories.
     * 
     * Using this, you can always show an arrow without building the children
     * and simply hide the arrow if there were in fact no children (upon
     * expansion).
     */
    get children_possible(): boolean;
    set children_possible(val: boolean);
    /**
     * This property allows for more lazy loading of nodes.
     * 
     * When a node becomes visible, we normally build its children nodes
     * so that we know if we need an expansion arrow. However, that can
     * be expensive when rendering directories with lots of subdirectories.
     * 
     * Using this, you can always show an arrow without building the children
     * and simply hide the arrow if there were in fact no children (upon
     * expansion).
     */
    get childrenPossible(): boolean;
    set childrenPossible(val: boolean);
    get expanded_icon_name(): string;
    set expanded_icon_name(val: string);
    get expandedIconName(): string;
    set expandedIconName(val: string);
    /**
     * The cached GIcon to display.
     */
    get gicon(): Gio.Icon;
    set gicon(val: Gio.Icon);
    /**
     * An icon-name to display on the row.
     */
    get icon_name(): string;
    set icon_name(val: string);
    /**
     * An icon-name to display on the row.
     */
    get iconName(): string;
    set iconName(val: string);
    /**
     * An optional #GObject to associate with the node.
     */
    get item(): GObject.Object;
    set item(val: GObject.Object);
    /**
     * The parent of the node.
     */
    get parent(): TreeNode;
    /**
     * The "reset-on-collapse" property denotes that all children should be
     * removed from the node when it's row is collapsed. It will also set
     * #DzlTreeNode:needs-build to %TRUE so the next expansion rebuilds the
     * children. This is useful for situations where you want to ensure the nodes
     * are up to date (refreshed) on every expansion.
     */
    get reset_on_collapse(): boolean;
    set reset_on_collapse(val: boolean);
    /**
     * The "reset-on-collapse" property denotes that all children should be
     * removed from the node when it's row is collapsed. It will also set
     * #DzlTreeNode:needs-build to %TRUE so the next expansion rebuilds the
     * children. This is useful for situations where you want to ensure the nodes
     * are up to date (refreshed) on every expansion.
     */
    get resetOnCollapse(): boolean;
    set resetOnCollapse(val: boolean);
    /**
     * Text to display on the tree node.
     */
    get text(): string;
    set text(val: string);
    /**
     * The tree the node belongs to.
     */
    get tree(): Tree;
    set tree(val: Tree);
    get use_dim_label(): boolean;
    set use_dim_label(val: boolean);
    get useDimLabel(): boolean;
    set useDimLabel(val: boolean);
    /**
     * If the "text" property includes #GMarkup.
     */
    get use_markup(): boolean;
    set use_markup(val: boolean);
    /**
     * If the "text" property includes #GMarkup.
     */
    get useMarkup(): boolean;
    set useMarkup(val: boolean);

    // Constructors of Dazzle.TreeNode


constructor(properties?: Partial<TreeNode.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


static ["new"](): TreeNode;

    // Own methods of Dazzle.TreeNode

    /**
     * Adds an emplem to be rendered on top of the node.
     * 
     * Use dzl_tree_node_remove_emblem() to remove an emblem.
     * @param emblem_name the icon-name of the emblem
     */
    add_emblem(emblem_name: string): void
    /**
     * Appends `child` to the list of children owned by `node`.
     * @param child A #DzlTreeNode.
     */
    append(child: TreeNode): void
    /**
     * Removes all emblems from `self`.
     */
    clear_emblems(): void
    collapse(): void
    expand(expand_ancestors: boolean): boolean
    get_area(area: Gdk.Rectangle): void
    get_children_possible(): boolean
    get_expanded(): boolean
    /**
     * Gets the foreground-rgba to use for row text.
     * 
     * If %NULL, the default foreground color should be used.
     * @returns A #GdkRGBA or %NULL
     */
    get_foreground_rgba(): (Gdk.RGBA | null)
    /**
     * Fetch the GIcon, re-render if necessary
     * @returns An #GIcon or %NULL.
     */
    get_gicon(): Gio.Icon
    /**
     * Fetches the icon-name of the icon to display, or NULL for no icon.
     */
    get_icon_name(): string
    /**
     * Gets a #GObject for the node, if one was set.
     * @returns A #GObject or %NULL.
     */
    get_item<T = GObject.Object>(): T
    get_iter(iter: Gtk.TreeIter): boolean
    /**
     * Retrieves the parent #DzlTreeNode for `node`.
     * @returns A #DzlTreeNode.
     */
    get_parent(): TreeNode
    /**
     * Gets a #GtkTreePath for `node`.
     * @returns A #GtkTreePath if successful; otherwise %NULL.
     */
    get_path(): (Gtk.TreePath | null)
    get_reset_on_collapse(): boolean
    get_text(): string
    /**
     * Fetches the #DzlTree instance that owns the node.
     * @returns A #DzlTree.
     */
    get_tree(): Tree
    get_use_dim_label(): boolean
    get_use_markup(): boolean
    /**
     * Checks to see if `emblem_name` has been added to the #DzlTreeNode.
     * @param emblem_name a string containing the emblem name
     * @returns %TRUE if @emblem_name is used by @self
     */
    has_emblem(emblem_name: string): boolean
    /**
     * Inserts `child` as a child of `self` at `position`.
     * @param child a #DzlTreeNode
     * @param position the position for the child
     */
    insert(child: TreeNode, position: number): void
    /**
     * Inserts a `child` as a child of `node,` sorting it among the other children.
     * @param child A #DzlTreeNode.
     * @param compare_func A compare func to compare nodes.
     */
    insert_sorted(child: TreeNode, compare_func: TreeNodeCompareFunc): void
    invalidate(): void
    is_root(): boolean
    n_children(): number
    /**
     * Gets the `nth` child of `self` or %NULL if it does not exist.
     * @param nth the index of the child
     * @returns a #DzlTreeNode or %NULL
     */
    nth_child(nth: number): (TreeNode | null)
    /**
     * Prepends `child` to the list of children owned by `node`.
     * @param child A #DzlTreeNode.
     */
    prepend(child: TreeNode): void
    /**
     * Rebuilds a node, without invalidating children nodes. If you want to
     * ensure that children are also rebuilt, use dzl_tree_node_invalidate().
     */
    rebuild(): void
    /**
     * Removes `child` from the list of children owned by `node`.
     * @param child A #DzlTreeNode.
     */
    remove(child: TreeNode): void
    remove_emblem(emblem_name: string): void
    select(): void
    /**
     * If the node has not yet been built, setting this to %TRUE will add a
     * dummy child node. This dummy node will be removed when when the node
     * is built by the registered #DzlTreeBuilder instances.
     * @param children_possible If the node has children.
     */
    set_children_possible(children_possible: boolean): void
    set_emblems(emblems: string): void
    /**
     * Sets the foreground-rgba to be used by the row text.
     * 
     * If `foreground_rgba` is %NULL, the value is reset to the default.
     * @param foreground_rgba A #GdkRGBA or %NULL
     */
    set_foreground_rgba(foreground_rgba?: (Gdk.RGBA | null)): void
    set_gicon(icon: Gio.Icon): void
    /**
     * Sets the icon name of the node. This is displayed in the pixbuf
     * cell of the DzlTree.
     * @param icon_name The icon name.
     */
    set_icon_name(icon_name?: (string | null)): void
    /**
     * An optional object to associate with the node. This is handy to save needing
     * to subclass the #DzlTreeNode class.
     * @param item A #GObject.
     */
    set_item(item: GObject.Object): void
    set_reset_on_collapse(reset_on_collapse: boolean): void
    /**
     * Sets the text of the node. This is displayed in the text
     * cell of the DzlTree.
     * @param text The node text.
     */
    set_text(text?: (string | null)): void
    set_use_dim_label(use_dim_label: boolean): void
    set_use_markup(use_markup: boolean): void
    show_popover(popover: Gtk.Popover): void
}

module WidgetActionGroup {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps, Gio.ActionGroup.ConstructorProps {
widget: Gtk.Widget;
    }

}

class WidgetActionGroup extends GObject.Object implements Gio.ActionGroup {

    // Own properties of Dazzle.WidgetActionGroup

    get widget(): Gtk.Widget;

    // Constructors of Dazzle.WidgetActionGroup


constructor(properties?: Partial<WidgetActionGroup.ConstructorProps>, ...args: any[]);

_init(...args: any[]): void;


    // Own static methods of Dazzle.WidgetActionGroup

    /**
     * Helper function to create an #DzlWidgetActionGroup and attach
     * it to `widget` using the group name `group_name`.
     * @param widget A #GtkWidget
     * @param group_name the group name to use for the action group
     */
    static attach(widget: Gtk.Widget, group_name: string): void
    static ["new"](widget: Gtk.Widget): Gio.ActionGroup

    // Own methods of Dazzle.WidgetActionGroup

    set_action_enabled(action_name: string, enabled: boolean): void

// Inherited methods
/**
 * Emits the #GActionGroup::action-added signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 */
action_added(action_name: string): void
/**
 * Emits the #GActionGroup::action-enabled-changed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 * @param enabled whether or not the action is now enabled
 */
action_enabled_changed(action_name: string, enabled: boolean): void
/**
 * Emits the #GActionGroup::action-removed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 */
action_removed(action_name: string): void
/**
 * Emits the #GActionGroup::action-state-changed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 * @param state the new state of the named action
 */
action_state_changed(action_name: string, state: GLib.Variant): void
/**
 * Activate the named action within `action_group`.
 * 
 * If the action is expecting a parameter, then the correct type of
 * parameter must be given as `parameter`.  If the action is expecting no
 * parameters then `parameter` must be %NULL.  See
 * g_action_group_get_action_parameter_type().
 * 
 * If the #GActionGroup implementation supports asynchronous remote
 * activation over D-Bus, this call may return before the relevant
 * D-Bus traffic has been sent, or any replies have been received. In
 * order to block on such asynchronous activation calls,
 * g_dbus_connection_flush() should be called prior to the code, which
 * depends on the result of the action activation. Without flushing
 * the D-Bus connection, there is no guarantee that the action would
 * have been activated.
 * 
 * The following code which runs in a remote app instance, shows an
 * example of a "quit" action being activated on the primary app
 * instance over D-Bus. Here g_dbus_connection_flush() is called
 * before `exit()`. Without g_dbus_connection_flush(), the "quit" action
 * may fail to be activated on the primary instance.
 * 
 * 
 * ```c
 * // call "quit" action on primary instance
 * g_action_group_activate_action (G_ACTION_GROUP (app), "quit", NULL);
 * 
 * // make sure the action is activated now
 * g_dbus_connection_flush (...);
 * 
 * g_debug ("application has been terminated. exiting.");
 * 
 * exit (0);
 * ```
 * 
 * @param action_name the name of the action to activate
 * @param parameter parameters to the activation
 */
activate_action(action_name: string, parameter?: (GLib.Variant | null)): void
/**
 * Request for the state of the named action within `action_group` to be
 * changed to `value`.
 * 
 * The action must be stateful and `value` must be of the correct type.
 * See g_action_group_get_action_state_type().
 * 
 * This call merely requests a change.  The action may refuse to change
 * its state or may change its state to something other than `value`.
 * See g_action_group_get_action_state_hint().
 * 
 * If the `value` GVariant is floating, it is consumed.
 * @param action_name the name of the action to request the change on
 * @param value the new state
 */
change_action_state(action_name: string, value: GLib.Variant): void
/**
 * Checks if the named action within `action_group` is currently enabled.
 * 
 * An action must be enabled in order to be activated or in order to
 * have its state changed from outside callers.
 * @param action_name the name of the action to query
 * @returns whether or not the action is currently enabled
 */
get_action_enabled(action_name: string): boolean
/**
 * Queries the type of the parameter that must be given when activating
 * the named action within `action_group`.
 * 
 * When activating the action using g_action_group_activate_action(),
 * the #GVariant given to that function must be of the type returned
 * by this function.
 * 
 * In the case that this function returns %NULL, you must not give any
 * #GVariant, but %NULL instead.
 * 
 * The parameter type of a particular action will never change but it is
 * possible for an action to be removed and for a new action to be added
 * with the same name but a different parameter type.
 * @param action_name the name of the action to query
 * @returns the parameter type
 */
get_action_parameter_type(action_name: string): (GLib.VariantType | null)
/**
 * Queries the current state of the named action within `action_group`.
 * 
 * If the action is not stateful then %NULL will be returned.  If the
 * action is stateful then the type of the return value is the type
 * given by g_action_group_get_action_state_type().
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @param action_name the name of the action to query
 * @returns the current state of the action
 */
get_action_state(action_name: string): (GLib.Variant | null)
/**
 * Requests a hint about the valid range of values for the state of the
 * named action within `action_group`.
 * 
 * If %NULL is returned it either means that the action is not stateful
 * or that there is no hint about the valid range of values for the
 * state of the action.
 * 
 * If a #GVariant array is returned then each item in the array is a
 * possible value for the state.  If a #GVariant pair (ie: two-tuple) is
 * returned then the tuple specifies the inclusive lower and upper bound
 * of valid values for the state.
 * 
 * In any case, the information is merely a hint.  It may be possible to
 * have a state value outside of the hinted range and setting a value
 * within the range may fail.
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @param action_name the name of the action to query
 * @returns the state range hint
 */
get_action_state_hint(action_name: string): (GLib.Variant | null)
/**
 * Queries the type of the state of the named action within
 * `action_group`.
 * 
 * If the action is stateful then this function returns the
 * #GVariantType of the state.  All calls to
 * g_action_group_change_action_state() must give a #GVariant of this
 * type and g_action_group_get_action_state() will return a #GVariant
 * of the same type.
 * 
 * If the action is not stateful then this function will return %NULL.
 * In that case, g_action_group_get_action_state() will return %NULL
 * and you must not call g_action_group_change_action_state().
 * 
 * The state type of a particular action will never change but it is
 * possible for an action to be removed and for a new action to be added
 * with the same name but a different state type.
 * @param action_name the name of the action to query
 * @returns the state type, if the action is stateful
 */
get_action_state_type(action_name: string): (GLib.VariantType | null)
/**
 * Checks if the named action exists within `action_group`.
 * @param action_name the name of the action to check for
 * @returns whether the named action exists
 */
has_action(action_name: string): boolean
/**
 * Lists the actions contained within `action_group`.
 * 
 * The caller is responsible for freeing the list with g_strfreev() when
 * it is no longer required.
 * @returns a %NULL-terminated array of the names of the actions in the group
 */
list_actions(): string[]
/**
 * Queries all aspects of the named action within an `action_group`.
 * 
 * This function acquires the information available from
 * g_action_group_has_action(), g_action_group_get_action_enabled(),
 * g_action_group_get_action_parameter_type(),
 * g_action_group_get_action_state_type(),
 * g_action_group_get_action_state_hint() and
 * g_action_group_get_action_state() with a single function call.
 * 
 * This provides two main benefits.
 * 
 * The first is the improvement in efficiency that comes with not having
 * to perform repeated lookups of the action in order to discover
 * different things about it.  The second is that implementing
 * #GActionGroup can now be done by only overriding this one virtual
 * function.
 * 
 * The interface provides a default implementation of this function that
 * calls the individual functions, as required, to fetch the
 * information.  The interface also provides default implementations of
 * those functions that call this function.  All implementations,
 * therefore, must override either this function or all of the others.
 * 
 * If the action exists, %TRUE is returned and any of the requested
 * fields (as indicated by having a non-%NULL reference passed in) are
 * filled.  If the action doesn't exist, %FALSE is returned and the
 * fields may or may not have been modified.
 * @param action_name the name of an action in the group
 * @returns %TRUE if the action exists, else %FALSE
 */
query_action(action_name: string): [boolean, boolean, GLib.VariantType | null, GLib.VariantType | null, GLib.Variant | null, GLib.Variant | null]
/**
 * Emits the #GActionGroup::action-added signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 */
vfunc_action_added(action_name: string): void
/**
 * Emits the #GActionGroup::action-enabled-changed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 * @param enabled whether or not the action is now enabled
 */
vfunc_action_enabled_changed(action_name: string, enabled: boolean): void
/**
 * Emits the #GActionGroup::action-removed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 */
vfunc_action_removed(action_name: string): void
/**
 * Emits the #GActionGroup::action-state-changed signal on `action_group`.
 * 
 * This function should only be called by #GActionGroup implementations.
 * @param action_name the name of an action in the group
 * @param state the new state of the named action
 */
vfunc_action_state_changed(action_name: string, state: GLib.Variant): void
/**
 * Activate the named action within `action_group`.
 * 
 * If the action is expecting a parameter, then the correct type of
 * parameter must be given as `parameter`.  If the action is expecting no
 * parameters then `parameter` must be %NULL.  See
 * g_action_group_get_action_parameter_type().
 * 
 * If the #GActionGroup implementation supports asynchronous remote
 * activation over D-Bus, this call may return before the relevant
 * D-Bus traffic has been sent, or any replies have been received. In
 * order to block on such asynchronous activation calls,
 * g_dbus_connection_flush() should be called prior to the code, which
 * depends on the result of the action activation. Without flushing
 * the D-Bus connection, there is no guarantee that the action would
 * have been activated.
 * 
 * The following code which runs in a remote app instance, shows an
 * example of a "quit" action being activated on the primary app
 * instance over D-Bus. Here g_dbus_connection_flush() is called
 * before `exit()`. Without g_dbus_connection_flush(), the "quit" action
 * may fail to be activated on the primary instance.
 * 
 * 
 * ```c
 * // call "quit" action on primary instance
 * g_action_group_activate_action (G_ACTION_GROUP (app), "quit", NULL);
 * 
 * // make sure the action is activated now
 * g_dbus_connection_flush (...);
 * 
 * g_debug ("application has been terminated. exiting.");
 * 
 * exit (0);
 * ```
 * 
 * @param action_name the name of the action to activate
 * @param parameter parameters to the activation
 */
vfunc_activate_action(action_name: string, parameter?: (GLib.Variant | null)): void
/**
 * Request for the state of the named action within `action_group` to be
 * changed to `value`.
 * 
 * The action must be stateful and `value` must be of the correct type.
 * See g_action_group_get_action_state_type().
 * 
 * This call merely requests a change.  The action may refuse to change
 * its state or may change its state to something other than `value`.
 * See g_action_group_get_action_state_hint().
 * 
 * If the `value` GVariant is floating, it is consumed.
 * @param action_name the name of the action to request the change on
 * @param value the new state
 */
vfunc_change_action_state(action_name: string, value: GLib.Variant): void
/**
 * Checks if the named action within `action_group` is currently enabled.
 * 
 * An action must be enabled in order to be activated or in order to
 * have its state changed from outside callers.
 * @param action_name the name of the action to query
 */
vfunc_get_action_enabled(action_name: string): boolean
/**
 * Queries the type of the parameter that must be given when activating
 * the named action within `action_group`.
 * 
 * When activating the action using g_action_group_activate_action(),
 * the #GVariant given to that function must be of the type returned
 * by this function.
 * 
 * In the case that this function returns %NULL, you must not give any
 * #GVariant, but %NULL instead.
 * 
 * The parameter type of a particular action will never change but it is
 * possible for an action to be removed and for a new action to be added
 * with the same name but a different parameter type.
 * @param action_name the name of the action to query
 */
vfunc_get_action_parameter_type(action_name: string): (GLib.VariantType | null)
/**
 * Queries the current state of the named action within `action_group`.
 * 
 * If the action is not stateful then %NULL will be returned.  If the
 * action is stateful then the type of the return value is the type
 * given by g_action_group_get_action_state_type().
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @param action_name the name of the action to query
 */
vfunc_get_action_state(action_name: string): (GLib.Variant | null)
/**
 * Requests a hint about the valid range of values for the state of the
 * named action within `action_group`.
 * 
 * If %NULL is returned it either means that the action is not stateful
 * or that there is no hint about the valid range of values for the
 * state of the action.
 * 
 * If a #GVariant array is returned then each item in the array is a
 * possible value for the state.  If a #GVariant pair (ie: two-tuple) is
 * returned then the tuple specifies the inclusive lower and upper bound
 * of valid values for the state.
 * 
 * In any case, the information is merely a hint.  It may be possible to
 * have a state value outside of the hinted range and setting a value
 * within the range may fail.
 * 
 * The return value (if non-%NULL) should be freed with
 * g_variant_unref() when it is no longer required.
 * @param action_name the name of the action to query
 */
vfunc_get_action_state_hint(action_name: string): (GLib.Variant | null)
/**
 * Queries the type of the state of the named action within
 * `action_group`.
 * 
 * If the action is stateful then this function returns the
 * #GVariantType of the state.  All calls to
 * g_action_group_change_action_state() must give a #GVariant of this
 * type and g_action_group_get_action_state() will return a #GVariant
 * of the same type.
 * 
 * If the action is not stateful then this function will return %NULL.
 * In that case, g_action_group_get_action_state() will return %NULL
 * and you must not call g_action_group_change_action_state().
 * 
 * The state type of a particular action will never change but it is
 * possible for an action to be removed and for a new action to be added
 * with the same name but a different state type.
 * @param action_name the name of the action to query
 */
vfunc_get_action_state_type(action_name: string): (GLib.VariantType | null)
/**
 * Checks if the named action exists within `action_group`.
 * @param action_name the name of the action to check for
 */
vfunc_has_action(action_name: string): boolean
/**
 * Lists the actions contained within `action_group`.
 * 
 * The caller is responsible for freeing the list with g_strfreev() when
 * it is no longer required.
 */
vfunc_list_actions(): string[]
/**
 * Queries all aspects of the named action within an `action_group`.
 * 
 * This function acquires the information available from
 * g_action_group_has_action(), g_action_group_get_action_enabled(),
 * g_action_group_get_action_parameter_type(),
 * g_action_group_get_action_state_type(),
 * g_action_group_get_action_state_hint() and
 * g_action_group_get_action_state() with a single function call.
 * 
 * This provides two main benefits.
 * 
 * The first is the improvement in efficiency that comes with not having
 * to perform repeated lookups of the action in order to discover
 * different things about it.  The second is that implementing
 * #GActionGroup can now be done by only overriding this one virtual
 * function.
 * 
 * The interface provides a default implementation of this function that
 * calls the individual functions, as required, to fetch the
 * information.  The interface also provides default implementations of
 * those functions that call this function.  All implementations,
 * therefore, must override either this function or all of the others.
 * 
 * If the action exists, %TRUE is returned and any of the requested
 * fields (as indicated by having a non-%NULL reference passed in) are
 * filled.  If the action doesn't exist, %FALSE is returned and the
 * fields may or may not have been modified.
 * @param action_name the name of an action in the group
 */
vfunc_query_action(action_name: string): [boolean, boolean, GLib.VariantType | null, GLib.VariantType | null, GLib.Variant | null, GLib.Variant | null]
/**
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target`.
 * 
 * Whenever the `source_property` is changed the `target_property` is
 * updated using the same value. For instance:
 * 
 * 
 * ```c
 *   g_object_bind_property (action, "active", widget, "sensitive", 0);
 * ```
 * 
 * 
 * Will result in the "sensitive" property of the widget #GObject instance to be
 * updated with the same value of the "active" property of the action #GObject
 * instance.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well.
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. To remove the binding without affecting the
 * `source` and the `target` you can just call g_object_unref() on the returned
 * #GBinding instance.
 * 
 * Removing the binding by calling g_object_unref() on it must only be done if
 * the binding, `source` and `target` are only used from a single thread and it
 * is clear that both `source` and `target` outlive the binding. Especially it
 * is not safe to rely on this if the binding, `source` or `target` can be
 * finalized from different threads. Keep another reference to the binding and
 * use g_binding_unbind() instead to be on the safe side.
 * 
 * A #GObject can have multiple bindings.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
/**
 * Complete version of g_object_bind_property().
 * 
 * Creates a binding between `source_property` on `source` and `target_property`
 * on `target,` allowing you to set the transformation functions to be used by
 * the binding.
 * 
 * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
 * if `target_property` on `target` changes then the `source_property` on `source`
 * will be updated as well. The `transform_from` function is only used in case
 * of bidirectional bindings, otherwise it will be ignored
 * 
 * The binding will automatically be removed when either the `source` or the
 * `target` instances are finalized. This will release the reference that is
 * being held on the #GBinding instance; if you want to hold on to the
 * #GBinding instance, you will need to hold a reference to it.
 * 
 * To remove the binding, call g_binding_unbind().
 * 
 * A #GObject can have multiple bindings.
 * 
 * The same `user_data` parameter will be used for both `transform_to`
 * and `transform_from` transformation functions; the `notify` function will
 * be called once, when the binding is removed. If you need different data
 * for each transformation function, please use
 * g_object_bind_property_with_closures() instead.
 * @param source_property the property on @source to bind
 * @param target the target #GObject
 * @param target_property the property on @target to bind
 * @param flags flags to pass to #GBinding
 * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
 * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
 * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
 * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
 */
bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to?: (GObject.BindingTransformFunc | null), transform_from?: (GObject.BindingTransformFunc | null), notify?: (GLib.DestroyNotify | null)): GObject.Binding
bind_property_full(...args: never[]): any
/**
 * This function is intended for #GObject implementations to re-enforce
 * a [floating][floating-ref] object reference. Doing this is seldom
 * required: all #GInitiallyUnowneds are created with a floating reference
 * which usually just needs to be sunken by calling g_object_ref_sink().
 */
force_floating(): void
/**
 * Increases the freeze count on `object`. If the freeze count is
 * non-zero, the emission of "notify" signals on `object` is
 * stopped. The signals are queued until the freeze count is decreased
 * to zero. Duplicate notifications are squashed so that at most one
 * #GObject::notify signal is emitted for each property modified while the
 * object is frozen.
 * 
 * This is necessary for accessors that modify multiple properties to prevent
 * premature notification while the object is still being modified.
 */
freeze_notify(): void
/**
 * Gets a named field from the objects table of associations (see g_object_set_data()).
 * @param key name of the key for that association
 * @returns the data if found,          or %NULL if no such data exists.
 */
get_data(key: string): (any | null)
get_property(property_name: string): any
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
get_qdata(quark: GLib.Quark): (any | null)
/**
 * Gets `n_properties` properties for an `object`.
 * Obtained properties will be set to `values`. All properties must be valid.
 * Warnings will be emitted and undefined behaviour may result if invalid
 * properties are passed in.
 * @param names the names of each property to get
 * @param values the values of each property to get
 */
getv(names: string[], values: GObject.Value[]): void
/**
 * Checks whether `object` has a [floating][floating-ref] reference.
 * @returns %TRUE if @object has a floating reference
 */
is_floating(): boolean
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param property_name the name of a property installed on the class of @object.
 */
notify(property_name: string): void
/**
 * Emits a "notify" signal for the property specified by `pspec` on `object`.
 * 
 * This function omits the property name lookup, hence it is faster than
 * g_object_notify().
 * 
 * One way to avoid using g_object_notify() from within the
 * class that registered the properties, and using g_object_notify_by_pspec()
 * instead, is to store the GParamSpec used with
 * g_object_class_install_property() inside a static array, e.g.:
 * 
 * 
 * ```c
 *   typedef enum
 *   {
 *     PROP_FOO = 1,
 *     PROP_LAST
 *   } MyObjectProperty;
 * 
 *   static GParamSpec *properties[PROP_LAST];
 * 
 *   static void
 *   my_object_class_init (MyObjectClass *klass)
 *   {
 *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
 *                                              0, 100,
 *                                              50,
 *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
 *     g_object_class_install_property (gobject_class,
 *                                      PROP_FOO,
 *                                      properties[PROP_FOO]);
 *   }
 * ```
 * 
 * 
 * and then notify a change on the "foo" property with:
 * 
 * 
 * ```c
 *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
 * ```
 * 
 * @param pspec the #GParamSpec of a property installed on the class of @object.
 */
notify_by_pspec(pspec: GObject.ParamSpec): void
/**
 * Increases the reference count of `object`.
 * 
 * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
 * of `object` will be propagated to the return type (using the GCC typeof()
 * extension), so any casting the caller needs to do on the return type must be
 * explicit.
 * @returns the same @object
 */
ref(): GObject.Object
/**
 * Increase the reference count of `object,` and possibly remove the
 * [floating][floating-ref] reference, if `object` has a floating reference.
 * 
 * In other words, if the object is floating, then this call "assumes
 * ownership" of the floating reference, converting it to a normal
 * reference by clearing the floating flag while leaving the reference
 * count unchanged.  If the object is not floating, then this call
 * adds a new normal reference increasing the reference count by one.
 * 
 * Since GLib 2.56, the type of `object` will be propagated to the return type
 * under the same conditions as for g_object_ref().
 * @returns @object
 */
ref_sink(): GObject.Object
/**
 * Releases all references to other objects. This can be used to break
 * reference cycles.
 * 
 * This function should only be called from object system implementations.
 */
run_dispose(): void
/**
 * Each object carries around a table of associations from
 * strings to pointers.  This function lets you set an association.
 * 
 * If the object already had an association with that name,
 * the old association will be destroyed.
 * 
 * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
 * This means a copy of `key` is kept permanently (even after `object` has been
 * finalized) — so it is recommended to only use a small, bounded set of values
 * for `key` in your program, to avoid the #GQuark storage growing unbounded.
 * @param key name of the key
 * @param data data to associate with that key
 */
set_data(key: string, data?: (any | null)): void
set_property(property_name: string, value: any): void
/**
 * Remove a specified datum from the object's data associations,
 * without invoking the association's destroy handler.
 * @param key name of the key
 * @returns the data if found, or %NULL          if no such data exists.
 */
steal_data(key: string): (any | null)
/**
 * This function gets back user data pointers stored via
 * g_object_set_qdata() and removes the `data` from object
 * without invoking its destroy() function (if any was
 * set).
 * Usually, calling this function is only required to update
 * user data pointers with a destroy notifier, for example:
 * 
 * ```c
 * void
 * object_add_to_user_list (GObject     *object,
 *                          const gchar *new_string)
 * {
 *   // the quark, naming the object data
 *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
 *   // retrieve the old string list
 *   GList *list = g_object_steal_qdata (object, quark_string_list);
 * 
 *   // prepend new string
 *   list = g_list_prepend (list, g_strdup (new_string));
 *   // this changed 'list', so we need to set it again
 *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
 * }
 * static void
 * free_string_list (gpointer data)
 * {
 *   GList *node, *list = data;
 * 
 *   for (node = list; node; node = node->next)
 *     g_free (node->data);
 *   g_list_free (list);
 * }
 * ```
 * 
 * Using g_object_get_qdata() in the above example, instead of
 * g_object_steal_qdata() would have left the destroy function set,
 * and thus the partial string list would have been freed upon
 * g_object_set_qdata_full().
 * @param quark A #GQuark, naming the user data pointer
 * @returns The user data pointer set, or %NULL
 */
steal_qdata(quark: GLib.Quark): (any | null)
/**
 * Reverts the effect of a previous call to
 * g_object_freeze_notify(). The freeze count is decreased on `object`
 * and when it reaches zero, queued "notify" signals are emitted.
 * 
 * Duplicate notifications for each property are squashed so that at most one
 * #GObject::notify signal is emitted for each property, in the reverse order
 * in which they have been queued.
 * 
 * It is an error to call this function when the freeze count is zero.
 */
thaw_notify(): void
/**
 * Decreases the reference count of `object`. When its reference count
 * drops to 0, the object is finalized (i.e. its memory is freed).
 * 
 * If the pointer to the #GObject may be reused in future (for example, if it is
 * an instance variable of another object), it is recommended to clear the
 * pointer to %NULL rather than retain a dangling pointer to a potentially
 * invalid #GObject instance. Use g_clear_object() for this.
 */
unref(): void
/**
 * This function essentially limits the life time of the `closure` to
 * the life time of the object. That is, when the object is finalized,
 * the `closure` is invalidated by calling g_closure_invalidate() on
 * it, in order to prevent invocations of the closure with a finalized
 * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
 * added as marshal guards to the `closure,` to ensure that an extra
 * reference count is held on `object` during invocation of the
 * `closure`.  Usually, this function will be called on closures that
 * use this `object` as closure data.
 * @param closure #GClosure to watch
 */
watch_closure(closure: GObject.Closure): void
vfunc_constructed(): void
vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
vfunc_dispose(): void
vfunc_finalize(): void
vfunc_get_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
/**
 * Emits a "notify" signal for the property `property_name` on `object`.
 * 
 * When possible, eg. when signaling a property change from within the class
 * that registered the property, you should use g_object_notify_by_pspec()
 * instead.
 * 
 * Note that emission of the notify signal may be blocked with
 * g_object_freeze_notify(). In this case, the signal emissions are queued
 * and will be emitted (in reverse order) when g_object_thaw_notify() is
 * called.
 * @param pspec 
 */
vfunc_notify(pspec: GObject.ParamSpec): void
vfunc_set_property(property_id: number, value: GObject.Value, pspec: GObject.ParamSpec): void
disconnect(id: number): void
set(properties: { [key: string]: any }): void
block_signal_handler(id: number): any
unblock_signal_handler(id: number): any
stop_emission_by_name(detailedName: string): any
}

type AnimationClass = typeof Animation
type ApplicationClass = typeof Application
type ApplicationWindowClass = typeof ApplicationWindow
type BinClass = typeof Bin
type BindingGroupClass = typeof BindingGroup
type BoldingLabelClass = typeof BoldingLabel
type BoxClass = typeof Box
type BoxTheatricClass = typeof BoxTheatric
type CenteringBinClass = typeof CenteringBin
type ChildPropertyActionClass = typeof ChildPropertyAction
type ColumnLayoutClass = typeof ColumnLayout
class Counter {

    // Own fields of Dazzle.Counter

values: CounterValue
category: string
name: string
description: string

    // Constructors of Dazzle.Counter


    constructor(properties?: Partial<{
      category: string
name: string
description: string
    }>);
_init(...args: any[]): void;


    // Own methods of Dazzle.Counter

    get(): number
    reset(): void
}

abstract class CounterArena {

    // Constructors of Dazzle.CounterArena

constructor(pid: GLib.Pid);
_init(...args: any[]): void;


static new_for_pid(pid: GLib.Pid): CounterArena;

    // Own static methods of Dazzle.CounterArena

    static get_default(): CounterArena

    // Own methods of Dazzle.CounterArena

    /**
     * Calls `func` for every counter found in `area`.
     * @param func A callback to execute
     */
    foreach(func: CounterForeachFunc): void
    ref(): CounterArena
    register(counter: Counter): void
    unref(): void
}

class CounterValue {

    // Own fields of Dazzle.CounterValue

value: number
padding: number[]

    // Constructors of Dazzle.CounterValue


    constructor(properties?: Partial<{
      value: number
padding: number[]
    }>);
_init(...args: any[]): void;

}

type CountersWindowClass = typeof CountersWindow
type CpuGraphClass = typeof CpuGraph
type CpuModelClass = typeof CpuModel
type CssProviderClass = typeof CssProvider
type DirectoryModelClass = typeof DirectoryModel
type DirectoryReaperClass = typeof DirectoryReaper
type DockBinClass = typeof DockBin
type DockBinEdgeClass = typeof DockBinEdge
type DockInterface = typeof Dock
type DockItemInterface = typeof DockItem
type DockManagerClass = typeof DockManager
type DockOverlayClass = typeof DockOverlay
type DockOverlayEdgeClass = typeof DockOverlayEdge
type DockPanedClass = typeof DockPaned
type DockRevealerClass = typeof DockRevealer
type DockStackClass = typeof DockStack
type DockTransientGrabClass = typeof DockTransientGrab
type DockWidgetClass = typeof DockWidget
type DockWindowClass = typeof DockWindow
type ElasticBinClass = typeof ElasticBin
type EmptyStateClass = typeof EmptyState
type EntryBoxClass = typeof EntryBox
type FileChooserEntryClass = typeof FileChooserEntry
type FileTransferClass = typeof FileTransfer
class FileTransferStat {

    // Own fields of Dazzle.FileTransferStat

n_files_total: number
n_files: number
n_dirs_total: number
n_dirs: number
n_bytes_total: number
n_bytes: number

    // Constructors of Dazzle.FileTransferStat


    constructor(properties?: Partial<{
      n_files_total: number
n_files: number
n_dirs_total: number
n_dirs: number
n_bytes_total: number
n_bytes: number
    }>);
_init(...args: any[]): void;

}

type FuzzyIndexBuilderClass = typeof FuzzyIndexBuilder
type FuzzyIndexClass = typeof FuzzyIndex
type FuzzyIndexCursorClass = typeof FuzzyIndexCursor
type FuzzyIndexMatchClass = typeof FuzzyIndexMatch
abstract class FuzzyMutableIndex {

    // Constructors of Dazzle.FuzzyMutableIndex

constructor(case_sensitive: boolean);
_init(...args: any[]): void;


static ["new"](case_sensitive: boolean): FuzzyMutableIndex;

static new_with_free_func(case_sensitive: boolean): FuzzyMutableIndex;

    // Own methods of Dazzle.FuzzyMutableIndex

    /**
     * Start a bulk insertion. `fuzzy` is not ready for searching until
     * dzl_fuzzy_mutable_index_end_bulk_insert() has been called.
     * 
     * This allows for inserting large numbers of strings and deferring
     * the final sort until dzl_fuzzy_mutable_index_end_bulk_insert().
     */
    begin_bulk_insert(): void
    contains(key: string): boolean
    /**
     * Complete a bulk insert and resort the index.
     */
    end_bulk_insert(): void
    /**
     * Inserts a string into the fuzzy matcher.
     * @param key A UTF-8 encoded string.
     * @param value A value to associate with key.
     */
    insert(key: string, value?: (any | null)): void
    /**
     * DzlFuzzyMutableIndex searches within `fuzzy` for strings that fuzzy match `needle`.
     * Only up to `max_matches` will be returned.
     * 
     * TODO: max_matches is not yet respected.
     * @param needle The needle to fuzzy search for.
     * @param max_matches The max number of matches to return.
     * @returns A newly allocated   #GArray containing #FuzzyMatch elements. This should be freed when   the caller is done with it using g_array_unref().   It is a programming error to keep the structure around longer than   the @fuzzy instance.
     */
    match(needle: string, max_matches: number): FuzzyMutableIndexMatch[]
    ref(): FuzzyMutableIndex
    remove(key: string): void
    set_free_func(): void
    /**
     * Decrements the reference count of fuzzy by one. When the reference count
     * reaches zero, the structure will be freed.
     */
    unref(): void
}

class FuzzyMutableIndexMatch {

    // Own fields of Dazzle.FuzzyMutableIndexMatch

key: string
value: any
score: number
id: number

    // Constructors of Dazzle.FuzzyMutableIndexMatch


    constructor(properties?: Partial<{
      key: string
value: any
score: number
id: number
    }>);
_init(...args: any[]): void;

}

type GraphColumnClass = typeof GraphColumn
type GraphLineRendererClass = typeof GraphLineRenderer
type GraphModelClass = typeof GraphModel
class GraphModelIter {

    // Own fields of Dazzle.GraphModelIter

data: any[]

    // Constructors of Dazzle.GraphModelIter


    constructor(properties?: Partial<{
      data: any[]
    }>);
_init(...args: any[]): void;

}

type GraphRendererInterface = typeof GraphRenderer
type GraphViewClass = typeof GraphView
/**
 * Heaps are similar to a partially sorted tree but implemented as an
 * array. They allow for efficient O(1) lookup of the highest priority
 * item as it will always be the first item of the array.
 * 
 * To create a new heap use dzl_heap_new().
 * 
 * To add items to the heap, use dzl_heap_insert_val() or
 * dzl_heap_insert_vals() to insert in bulk.
 * 
 * To access an item in the heap, use dzl_heap_index().
 * 
 * To remove an arbitrary item from the heap, use dzl_heap_extract_index().
 * 
 * To remove the highest priority item in the heap, use dzl_heap_extract().
 * 
 * To free a heap, use dzl_heap_unref().
 * 
 * Here is an example that stores integers in a #DzlHeap:
 * 
 * ```c
 * static int
 * cmpint (gconstpointer a,
 *         gconstpointer b)
 * {
 *   return *(const gint *)a - *(const gint *)b;
 * }
 * 
 * int
 * main (gint   argc,
 *       gchar *argv[])
 * {
 *   DzlHeap *heap;
 *   gint i;
 *   gint v;
 * 
 *   heap = dzl_heap_new (sizeof (gint), cmpint);
 * 
 *   for (i = 0; i < 10000; i++)
 *     dzl_heap_insert_val (heap, i);
 *   for (i = 0; i < 10000; i++)
 *     dzl_heap_extract (heap, &v);
 * 
 *   dzl_heap_unref (heap);
 * }
 * ```
 * 
 */
class Heap {

    // Own fields of Dazzle.Heap

data: string
len: number

    // Constructors of Dazzle.Heap


    constructor(properties?: Partial<{
      data: string
len: number
    }>);
_init(...args: any[]): void;


static ["new"](element_size: number, compare_func: GLib.CompareFunc): Heap;

    // Own methods of Dazzle.Heap

    extract(result?: (any | null)): boolean
    extract_index(index_: number, result?: (any | null)): boolean
    insert_vals(data: (any | null), len: number): void
    /**
     * Increments the reference count of `heap` by one.
     * @returns @heap
     */
    ref(): Heap
    /**
     * Decrements the reference count of `heap` by one, freeing the structure
     * when the reference count reaches zero.
     */
    unref(): void
}

type JoinedMenuClass = typeof JoinedMenu
type ListBoxClass = typeof ListBox
type ListBoxRowClass = typeof ListBoxRow
type ListModelFilterClass = typeof ListModelFilter
type ListStoreAdapterClass = typeof ListStoreAdapter
type MenuButtonClass = typeof MenuButton
type MenuManagerClass = typeof MenuManager
type MultiPanedClass = typeof MultiPaned
type PathBarClass = typeof PathBar
type PathClass = typeof Path
type PathElementClass = typeof PathElement
abstract class PatternSpec {

    // Constructors of Dazzle.PatternSpec

constructor(keywords: string);
_init(...args: any[]): void;


static ["new"](keywords: string): PatternSpec;

    // Own methods of Dazzle.PatternSpec

    get_text(): string
    match(haystack: string): boolean
    ref(): PatternSpec
    unref(): void
}

type PillBoxClass = typeof PillBox
type PreferencesBinClass = typeof PreferencesBin
type PreferencesEntryClass = typeof PreferencesEntry
type PreferencesFileChooserButtonClass = typeof PreferencesFileChooserButton
type PreferencesFlowBoxClass = typeof PreferencesFlowBox
type PreferencesFontButtonClass = typeof PreferencesFontButton
type PreferencesGroupClass = typeof PreferencesGroup
type PreferencesInterface = typeof Preferences
type PreferencesPageClass = typeof PreferencesPage
type PreferencesSpinButtonClass = typeof PreferencesSpinButton
type PreferencesSwitchClass = typeof PreferencesSwitch
type PreferencesViewClass = typeof PreferencesView
type PriorityBoxClass = typeof PriorityBox
type ProgressButtonClass = typeof ProgressButton
type ProgressIconClass = typeof ProgressIcon
type ProgressMenuButtonClass = typeof ProgressMenuButton
type PropertiesGroupClass = typeof PropertiesGroup
type RadioBoxClass = typeof RadioBox
type ReadOnlyListModelClass = typeof ReadOnlyListModel
type RecursiveFileMonitorClass = typeof RecursiveFileMonitor
class Ring {

    // Own fields of Dazzle.Ring

data: number
len: number
pos: number

    // Constructors of Dazzle.Ring


    constructor(properties?: Partial<{
      data: number
len: number
pos: number
    }>);
_init(...args: any[]): void;


static sized_new(element_size: number, reserved_size: number): Ring;

    // Own methods of Dazzle.Ring

    /**
     * Appends `len` values located at `data`.
     * @param data A pointer to the array of values.
     * @param len The number of values.
     * @returns the index of the first item.
     */
    append_vals(data: (any | null), len: number): number
    /**
     * Calls `func` for every item in the #DzlRing starting from the most recently
     * inserted element to the least recently inserted.
     * @param func A #GFunc to call for each element.
     */
    foreach(func: GLib.Func): void
    /**
     * Atomically increments the reference count of `ring` by one.
     * @returns The @ring pointer.
     */
    ref(): Ring
    /**
     * Atomically decrements the reference count of `ring` by one.  When the
     * reference count reaches zero, the structure is freed.
     */
    unref(): void
}

type ScrolledWindowClass = typeof ScrolledWindow
type SearchBarClass = typeof SearchBar
type SettingsFlagActionClass = typeof SettingsFlagAction
type SettingsSandwichClass = typeof SettingsSandwich
type ShortcutAccelDialogClass = typeof ShortcutAccelDialog
abstract class ShortcutChord {

    // Constructors of Dazzle.ShortcutChord

constructor(event: Gdk.EventKey);
_init(...args: any[]): void;


static new_from_event(event: Gdk.EventKey): ShortcutChord;

static new_from_string(accelerator: string): ShortcutChord;

    // Own static methods of Dazzle.ShortcutChord

    static equal(data1?: (any | null), data2?: (any | null)): boolean
    static hash(data?: (any | null)): number

    // Own methods of Dazzle.ShortcutChord

    append_event(event: Gdk.EventKey): boolean
    copy(): ShortcutChord
    free(): void
    get_label(): string
    get_length(): number
    get_nth_key(nth: number, keyval: number, modifier: Gdk.ModifierType): void
    has_modifier(): boolean
    match(other: ShortcutChord): ShortcutMatch
    to_string(): string
}

abstract class ShortcutChordTable {

    // Constructors of Dazzle.ShortcutChordTable

_init(...args: any[]): void;


    // Own methods of Dazzle.ShortcutChordTable

    add(chord: ShortcutChord, data?: (any | null)): void
    /**
     * This function will call `foreach_func` for each chord in the table.
     * @param foreach_func A callback for each chord
     */
    foreach(foreach_func: ShortcutChordTableForeach): void
    free(): void
    lookup(chord: ShortcutChord, data?: (any | null)): ShortcutMatch
    lookup_data(data?: (any | null)): ShortcutChord
    printf(): void
    remove(chord: ShortcutChord): boolean
    remove_data(data?: (any | null)): boolean
    set_free_func(): void
    size(): number
}

type ShortcutContextClass = typeof ShortcutContext
type ShortcutControllerClass = typeof ShortcutController
/**
 * The #DzlShortcutEntry structure can be used to bulk register shortcuts
 * for a particular widget. It can also do the necessary hooks of registering
 * commands that can be changed using the keytheme components.
 */
class ShortcutEntry {

    // Own fields of Dazzle.ShortcutEntry

command: string
phase: ShortcutPhase
default_accel: string
section: string
group: string
title: string
subtitle: string

    // Constructors of Dazzle.ShortcutEntry

_init(...args: any[]): void;

}

type ShortcutLabelClass = typeof ShortcutLabel
type ShortcutManagerClass = typeof ShortcutManager
type ShortcutModelClass = typeof ShortcutModel
type ShortcutSimpleLabelClass = typeof ShortcutSimpleLabel
type ShortcutThemeClass = typeof ShortcutTheme
type ShortcutThemeEditorClass = typeof ShortcutThemeEditor
type ShortcutTooltipClass = typeof ShortcutTooltip
type ShortcutsGroupClass = typeof ShortcutsGroup
type ShortcutsSectionClass = typeof ShortcutsSection
type ShortcutsShortcutClass = typeof ShortcutsShortcut
type ShortcutsWindowClass = typeof ShortcutsWindow
type SignalGroupClass = typeof SignalGroup
type SimpleLabelClass = typeof SimpleLabel
type SimplePopoverClass = typeof SimplePopover
type SliderClass = typeof Slider
type StackListClass = typeof StackList
type StateMachineClass = typeof StateMachine
type SuggestionButtonClass = typeof SuggestionButton
type SuggestionClass = typeof Suggestion
type SuggestionEntryBufferClass = typeof SuggestionEntryBuffer
type SuggestionEntryClass = typeof SuggestionEntry
type SuggestionPopoverClass = typeof SuggestionPopover
type SuggestionRowClass = typeof SuggestionRow
type TabClass = typeof Tab
type TabStripClass = typeof TabStrip
type TaskCacheClass = typeof TaskCache
type ThemeManagerClass = typeof ThemeManager
type ThreeGridClass = typeof ThreeGrid
type TreeBuilderClass = typeof TreeBuilder
type TreeClass = typeof Tree
type TreeNodeClass = typeof TreeNode
abstract class Trie {

    // Constructors of Dazzle.Trie


    constructor(properties?: Partial<{
      
    }>);
_init(...args: any[]): void;


static ["new"](): Trie;

    // Own methods of Dazzle.Trie

    /**
     * This is an alias for dzl_trie_unref().
     */
    destroy(): void
    /**
     * Inserts `value` into `trie` located with `key`.
     * @param key The key to insert.
     * @param value The value to insert.
     */
    insert(key: string, value?: (any | null)): void
    /**
     * Looks up `key` in `trie` and returns the value associated.
     * @param key The key to lookup.
     * @returns The value inserted or %NULL.
     */
    lookup(key: string): (any | null)
    ref(): Trie
    /**
     * Removes `key` from `trie,` possibly destroying the value associated with
     * the key.
     * @param key The key to remove.
     * @returns %TRUE if @key was found, otherwise %FALSE.
     */
    remove(key: string): boolean
    /**
     * Traverses all nodes of `trie` according to the parameters. For each node
     * matching the traversal parameters, `func` will be executed.
     * 
     * Only %G_PRE_ORDER and %G_POST_ORDER are supported for `order`.
     * 
     * If `max_depth` is less than zero, the entire tree will be traversed.
     * If max_depth is 1, then only the root will be traversed.
     * @param key The key to start traversal from.
     * @param order The order to traverse.
     * @param flags The flags for which nodes to callback.
     * @param max_depth the maximum depth to process.
     * @param func The func to execute for each matching node.
     */
    traverse(key: string, order: GLib.TraverseType, flags: GLib.TraverseFlags, max_depth: number, func: TrieTraverseFunc): void
    /**
     * Drops the reference count by one on `trie`. When it reaches zero, the
     * structure is freed.
     */
    unref(): void
}

type WidgetActionGroupClass = typeof WidgetActionGroup
abstract class _GraphColumnClass {

    // Constructors of Dazzle._GraphColumnClass

_init(...args: any[]): void;

}

module Dock {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Container.ConstructorProps {
manager: DockManager;
    }

}

export interface DockNamespace {
      $gtype: GObject.GType<Dock>;
      prototype: Dock;
      
          
      }
interface Dock extends Gtk.Container {

    // Own properties of Dazzle.Dock

    get manager(): DockManager;
    set manager(val: DockManager);
}



export const Dock: DockNamespace;

module DockItem {

    // Constructor properties interface

    interface ConstructorProps extends Gtk.Widget.ConstructorProps {

    }

}

export interface DockItemNamespace {
      $gtype: GObject.GType<DockItem>;
      prototype: DockItem;
      
          
      }
interface DockItem extends Gtk.Widget {

    // Own methods of Dazzle.DockItem

    adopt(child: DockItem): boolean
    /**
     * This function will request that the dock item close itself.
     * @returns %TRUE if the dock item was closed
     */
    close(): boolean
    /**
     * Emits the #DzlDockItem::presented signal.
     * 
     * Containers should emit this when their descendant has been presented as the
     * current visible child. This allows dock items to do lazy initialization of
     * content once the widgetry is visible to the user.
     * 
     * Currently, this is best effort, as there are a number of situations that
     * make covering all cases problematic.
     */
    emit_presented(): void
    /**
     * If this dock item can be closed by the user, this virtual function should be
     * implemented by the panel and return %TRUE.
     * @returns %TRUE if the dock item can be closed by the user, otherwise %FALSE.
     */
    get_can_close(): boolean
    get_can_minimize(): boolean
    get_child_visible(child: DockItem): boolean
    get_child_visible(...args: never[]): any
    /**
     * Gets the icon_name for the #DzlDockItem.
     * 
     * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
     * you can set. But this can be helpful for integration of various container
     * widgets.
     * @returns A newly allocated string or %NULL.
     */
    get_icon_name(): (string | null)
    /**
     * Gets the dock manager for this dock item.
     * @returns A #DzlDockmanager.
     */
    get_manager(): (DockManager | null)
    /**
     * Gets the parent #DzlDockItem, or %NULL.
     * @returns A #DzlDockItem or %NULL.
     */
    get_parent(): (DockItem | null)
    /**
     * Gets the title for the #DzlDockItem.
     * 
     * Generally, you want to use a #DzlDockWidget which has a "title" property you
     * can set. But this can be helpful for integration of various container
     * widgets.
     * @returns A newly allocated string or %NULL.
     */
    get_title(): (string | null)
    has_widgets(): boolean
    /**
     * This requests that `self` minimize `child` if it knows how.
     * 
     * If not, it should suggest the gravity for `child` if it knows how to
     * determine that. For example, a #DzlDockBin might know if the widget was part
     * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
     * @param child A #DzlDockItem that is a child of @self
     * @param position A location for a #GtkPositionType
     * @returns %TRUE if @child was minimized. Otherwise %FALSE and @position   may be updated to a suggested position.
     */
    minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
    /**
     * Emits the "needs-attention" signal.
     */
    needs_attention(): void
    /**
     * This widget will walk the widget hierarchy to ensure that the
     * dock item is visible to the user.
     */
    present(): void
    present_child(child: DockItem): void
    /**
     * Gets a #GIcon for the dock item, if any has been set.
     * 
     * If an icon-name has been set, a new #GIcon for that icon-name
     * may be returned.
     * @returns a #GIcon or %NULL
     */
    ref_gicon(): (Gio.Icon | null)
    /**
     * This virtual method should remove `child` from `self` if the
     * dock item knows how to do so. For example, the #DzlDockStack
     * will remove `child` from it's internal #GtkStack.
     * 
     * After the virtual function has been executed, child tracking
     * will be removed so that #DzlDockItem implementations do not
     * need to implement themselves.
     * @param child 
     */
    release(child: DockItem): void
    set_child_visible(child: DockItem, child_visible: boolean): void
    set_child_visible(...args: never[]): any
    /**
     * Sets the dock manager for this #DzlDockItem.
     * @param manager A #DzlDockManager
     */
    set_manager(manager?: (DockManager | null)): void
    update_visibility(): void

    // Own virtual methods of Dazzle.DockItem

    vfunc_can_minimize(descendant: DockItem): boolean
    /**
     * This function will request that the dock item close itself.
     */
    vfunc_close(): boolean
    /**
     * If this dock item can be closed by the user, this virtual function should be
     * implemented by the panel and return %TRUE.
     */
    vfunc_get_can_close(): boolean
    vfunc_get_child_visible(child: DockItem): boolean
    /**
     * Gets the icon_name for the #DzlDockItem.
     * 
     * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
     * you can set. But this can be helpful for integration of various container
     * widgets.
     */
    vfunc_get_icon_name(): (string | null)
    /**
     * Gets the dock manager for this dock item.
     */
    vfunc_get_manager(): (DockManager | null)
    /**
     * Gets the title for the #DzlDockItem.
     * 
     * Generally, you want to use a #DzlDockWidget which has a "title" property you
     * can set. But this can be helpful for integration of various container
     * widgets.
     */
    vfunc_get_title(): (string | null)
    vfunc_manager_set(old_manager: DockManager): void
    /**
     * This requests that `self` minimize `child` if it knows how.
     * 
     * If not, it should suggest the gravity for `child` if it knows how to
     * determine that. For example, a #DzlDockBin might know if the widget was part
     * of the right panel and therefore may set `position` to %GTK_POS_RIGHT.
     * @param child A #DzlDockItem that is a child of @self
     * @param position A location for a #GtkPositionType
     */
    vfunc_minimize(child: DockItem, position: Gtk.PositionType): [boolean, Gtk.PositionType]
    /**
     * Emits the "needs-attention" signal.
     */
    vfunc_needs_attention(): void
    vfunc_present_child(child: DockItem): void
    vfunc_presented(): void
    /**
     * Gets a #GIcon for the dock item, if any has been set.
     * 
     * If an icon-name has been set, a new #GIcon for that icon-name
     * may be returned.
     */
    vfunc_ref_gicon(): (Gio.Icon | null)
    /**
     * This virtual method should remove `child` from `self` if the
     * dock item knows how to do so. For example, the #DzlDockStack
     * will remove `child` from it's internal #GtkStack.
     * 
     * After the virtual function has been executed, child tracking
     * will be removed so that #DzlDockItem implementations do not
     * need to implement themselves.
     * @param child 
     */
    vfunc_release(child: DockItem): void
    vfunc_set_child_visible(child: DockItem, child_visible: boolean): void
    /**
     * Sets the dock manager for this #DzlDockItem.
     * @param manager A #DzlDockManager
     */
    vfunc_set_manager(manager?: (DockManager | null)): void
    vfunc_update_visibility(): void
}



export const DockItem: DockItemNamespace;

module GraphRenderer {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {

    }

}

export interface GraphRendererNamespace {
      $gtype: GObject.GType<GraphRenderer>;
      prototype: GraphRenderer;
      
          
      }
interface GraphRenderer extends GObject.Object {

    // Own methods of Dazzle.GraphRenderer

    render(table: GraphModel, x_begin: number, x_end: number, y_begin: number, y_end: number, cr: cairo.Context, area: cairo.RectangleInt): void

    // Own virtual methods of Dazzle.GraphRenderer

    vfunc_render(table: GraphModel, x_begin: number, x_end: number, y_begin: number, y_end: number, cr: cairo.Context, area: cairo.RectangleInt): void
}



export const GraphRenderer: GraphRendererNamespace;

module Preferences {

    // Constructor properties interface

    interface ConstructorProps extends GObject.Object.ConstructorProps {

    }

}

export interface PreferencesNamespace {
      $gtype: GObject.GType<Preferences>;
      prototype: Preferences;
      
          
      }
interface Preferences extends GObject.Object {

    // Own methods of Dazzle.Preferences

    add_custom(page_name: string, group_name: string, widget: Gtk.Widget, keywords: (string | null), priority: number): number
    add_file_chooser(page_name: string, group_name: string, schema_id: string, key: string, path: string, title: string, subtitle: string, action: Gtk.FileChooserAction, keywords: string, priority: number): number
    add_font_button(page_name: string, group_name: string, schema_id: string, key: string, title: string, keywords: string, priority: number): number
    add_group(page_name: string, group_name: string, title: string, priority: number): void
    add_list_group(page_name: string, group_name: string, title: string, mode: Gtk.SelectionMode, priority: number): void
    add_page(page_name: string, title: string, priority: number): void
    add_radio(page_name: string, group_name: string, schema_id: string, key: string, path: (string | null), variant_string: (string | null), title: (string | null), subtitle: (string | null), keywords: (string | null), priority: number): number
    add_spin_button(page_name: string, group_name: string, schema_id: string, key: string, path: string, title: string, subtitle: string, keywords: string, priority: number): number
    add_switch(page_name: string, group_name: string, schema_id: string, key: string, path: (string | null), variant_string: (string | null), title: (string | null), subtitle: (string | null), keywords: (string | null), priority: number): number
    get_widget(widget_id: number): (Gtk.Widget | null)
    remove_id(widget_id: number): boolean
    set_page(page_name: string, map: GLib.HashTable<any, any>): void

    // Own virtual methods of Dazzle.Preferences

    vfunc_add_custom(page_name: string, group_name: string, widget: Gtk.Widget, keywords: (string | null), priority: number): number
    vfunc_add_file_chooser(page_name: string, group_name: string, schema_id: string, key: string, path: string, title: string, subtitle: string, action: Gtk.FileChooserAction, keywords: string, priority: number): number
    vfunc_add_font_button(page_name: string, group_name: string, schema_id: string, key: string, title: string, keywords: string, priority: number): number
    vfunc_add_group(page_name: string, group_name: string, title: string, priority: number): void
    vfunc_add_list_group(page_name: string, group_name: string, title: string, mode: Gtk.SelectionMode, priority: number): void
    vfunc_add_page(page_name: string, title: string, priority: number): void
    vfunc_add_radio(page_name: string, group_name: string, schema_id: string, key: string, path: (string | null), variant_string: (string | null), title: (string | null), subtitle: (string | null), keywords: (string | null), priority: number): number
    vfunc_add_spin_button(page_name: string, group_name: string, schema_id: string, key: string, path: string, title: string, subtitle: string, keywords: string, priority: number): number
    vfunc_add_switch(page_name: string, group_name: string, schema_id: string, key: string, path: (string | null), variant_string: (string | null), title: (string | null), subtitle: (string | null), keywords: (string | null), priority: number): number
    vfunc_get_widget(widget_id: number): (Gtk.Widget | null)
    vfunc_remove_id(widget_id: number): boolean
    vfunc_set_page(page_name: string, map: GLib.HashTable<any, any>): void
}



export const Preferences: PreferencesNamespace;

/**
 * Name of the imported GIR library
 * `see` https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gi/ns.cpp#L188
 */
const __name__: string
/**
 * Version of the imported GIR library
 * `see` https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gi/ns.cpp#L189
 */
const __version__: string
}

export default Dazzle;
// END